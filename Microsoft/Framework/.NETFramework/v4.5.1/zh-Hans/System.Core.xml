<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Core</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle">
      <summary>提供一个表示用于顺序访问的内存映射文件的安全句柄。</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle">
      <summary>提供一个表示用于随机访问的非托管内存块的视图的安全句柄。</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptHandle">
      <summary>提供一个可由下一代加密技术 (CNG) 对象使用的安全句柄。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.#ctor">
      <summary>初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptHandle" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle">
      <summary>释放由下一代加密技术 (CNG) 对象使用的句柄。</summary>
      <returns>如果成功释放了句柄，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle">
      <summary>释放由下一代加密技术 (CNG) 对象使用的本机句柄。</summary>
      <returns>如果成功释放了句柄，则为 true；否则为 false。</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle">
      <summary>提供一个表示密钥的安全句柄 (NCRYPT_KEY_HANDLE)。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle.#ctor">
      <summary>初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle" /> 类的新实例。</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle">
      <summary>提供一个表示密钥存储提供程序的安全句柄 (NCRYPT_PROV_HANDLE)。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle.#ctor">
      <summary>初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle" /> 类的新实例。</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle">
      <summary>提供一个表示机密协议值的安全句柄 (NCRYPT_SECRET_HANDLE)。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle.#ctor">
      <summary>初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle" /> 类的新实例。</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafePipeHandle">
      <summary>表示管道句柄的包装类。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafePipeHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /> 类的新实例。</summary>
      <param name="preexistingHandle">
        <see cref="T:System.IntPtr" /> 对象，表示要使用的预先存在的句柄。</param>
      <param name="ownsHandle">如果为 true，则在完成阶段可靠地释放句柄；如果为 false，则阻止可靠释放（建议不要这样做）。</param>
    </member>
    <member name="T:System.Action`10">
      <summary>封装一个方法，该方法具有 10 个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`11">
      <summary>封装一个方法，该方法具有 11 个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`12">
      <summary>封装一个方法，该方法具有 12 个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`13">
      <summary>封装一个方法，该方法具有 13 个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`14">
      <summary>封装一个方法，该方法具有 14 个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <param name="arg14">此委托封装的方法的第十四个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`15">
      <summary>封装一个方法，该方法具有 15 个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <param name="arg14">此委托封装的方法的第十四个参数。</param>
      <param name="arg15">此委托封装的方法的第十五个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`16">
      <summary>封装一个方法，该方法具有 16 个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <param name="arg14">此委托封装的方法的第十四个参数。</param>
      <param name="arg15">此委托封装的方法的第十五个参数。</param>
      <param name="arg16">此委托封装的方法的第十六个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
      <typeparam name="T16">此委托封装的方法的第十六个参数的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`9">
      <summary>封装一个方法，该方法具有九个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`10">
      <summary>封装一个方法，该方法具有九个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <returns>此委托封装的方法的返回值。</returns>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`11">
      <summary>封装一个方法，该方法具有 10 个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <returns>此委托封装的方法的返回值。</returns>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`12">
      <summary>封装一个方法，该方法具有 11 个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <returns>此委托封装的方法的返回值。</returns>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`13">
      <summary>封装一个方法，该方法具有 12 个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <returns>此委托封装的方法的返回值。</returns>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`14">
      <summary>封装一个方法，该方法具有 13 个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <returns>此委托封装的方法的返回值。</returns>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`15">
      <summary>封装一个方法，该方法具有 14 个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <returns>此委托封装的方法的返回值。</returns>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <param name="arg14">此委托封装的方法的第十四个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`16">
      <summary>封装一个方法，该方法具有 15 个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <returns>此委托封装的方法的返回值。</returns>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <param name="arg14">此委托封装的方法的第十四个参数。</param>
      <param name="arg15">此委托封装的方法的第十五个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`17">
      <summary>封装一个方法，该方法具有 16 个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <returns>此委托封装的方法的返回值。</returns>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <param name="arg14">此委托封装的方法的第十四个参数。</param>
      <param name="arg15">此委托封装的方法的第十五个参数。</param>
      <param name="arg16">此委托封装的方法的第十六个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
      <typeparam name="T16">此委托封装的方法的第十六个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1">
      <summary>表示值的集。</summary>
      <typeparam name="T">哈希集中的元素类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.HashSet`1" /> 类的一个新实例，该实例为空并使用集类型的默认相等比较器。</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.HashSet`1" /> 类的一个新实例，该实例使用集类型的默认相等比较器，包含从指定的集合复制的元素，并且有足够的容量容纳所复制的这些元素。</summary>
      <param name="collection">其元素被复制到新集中的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.HashSet`1" /> 类的一个新实例，该实例使用集类型的指定相等比较器，包含从指定的集合复制的元素，并且有足够的容量容纳所复制的这些元素。</summary>
      <param name="collection">其元素被复制到新集中的集合。</param>
      <param name="comparer">在比较集中的值时使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 实现，或为 null 以使用集类型的默认 <see cref="T:System.Collections.Generic.EqualityComparer`1" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.HashSet`1" /> 类的一个新实例，该实例为空并使用集类型的指定相等比较器。</summary>
      <param name="comparer">在比较集中的值时使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 实现，或为 null 以使用集类型的默认 <see cref="T:System.Collections.Generic.EqualityComparer`1" /> 实现。</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Collections.Generic.HashSet`1" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含序列化 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象所需的信息。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构，其中包含与 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象关联的序列化流的源和目标。</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Add(`0)">
      <summary>将指定的元素添加到集中。</summary>
      <returns>如果该元素添加到 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象中则为 true；如果该元素已存在则为 false。</returns>
      <param name="item">要添加到集中的元素。</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Clear">
      <summary>从 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象中移除所有元素。</summary>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Comparer">
      <summary>获取用于确定集中的值是否相等的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对象。</summary>
      <returns>用于确定集中的值是否相等的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对象。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Contains(`0)">
      <summary>确定 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是否包含指定的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象包含指定的元素，则为 true；否则为 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象中查找的元素。</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[])">
      <summary>将 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的元素复制到数组中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象复制的元素的目标的一维数组。 该数组的索引必须从零开始。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)">
      <summary>从指定数组索引处开始，将 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的元素复制到数组中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象复制的元素的目标的一维数组。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> 大于目标 <paramref name="array" /> 的长度。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>从指定数组索引处开始，将 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的指定数目的元素复制到数组中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象复制的元素的目标的一维数组。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <param name="count">要复制到 <paramref name="array" /> 的元素的数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于 0。 - 或 - <paramref name="count" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> 大于目标 <paramref name="array" /> 的长度。 - 或 - <paramref name="count" /> 大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾的可用空间。</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Count">
      <summary>获取集中包含的元素数。</summary>
      <returns>集中包含的元素数。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CreateSetComparer">
      <summary>返回 <see cref="T:System.Collections.IEqualityComparer" /> 对象，该对象可用于对 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行相等测试。</summary>
      <returns>
        <see cref="T:System.Collections.IEqualityComparer" /> 对象，可用于对 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行深入的相等测试。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>从当前 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象中移除指定集合中的所有元素。</summary>
      <param name="other">要从 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象中移除的项的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的枚举器。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的 <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口并返回序列化 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象所需的数据。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含序列化 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象所需的信息。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构，其中包含与 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象关联的序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象，以仅包含该对象和指定集合中存在的元素。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是否为指定集合的真子集。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是 <paramref name="other" /> 的真子集，则为 true；否则为 false。</returns>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是否为指定集合的真超集。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是 <paramref name="other" /> 的真超集，则为 true；否则为 false。</returns>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是否为指定集合的子集。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是 <paramref name="other" /> 的子集，则为 true；否则为 false。</returns>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是否为指定集合的超集。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是 <paramref name="other" /> 的超集，则为 true；否则为 false。</returns>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.OnDeserialization(System.Object)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并在完成反序列化之后引发反序列化事件。</summary>
      <param name="sender">反序列化事件源。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">与当前 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象关联的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象无效。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象和指定的集合是否共享常见元素。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象与 <paramref name="other" /> 至少共享一个公共元素，则为 true；否则为 false。</returns>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Remove(`0)">
      <summary>从 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象中移除指定的元素。</summary>
      <returns>如果成功找到并移除该元素，则为 true；否则为 false。如果在 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象中找不到 <paramref name="item" />，则此方法返回 false。</returns>
      <param name="item">要移除的元素。</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>从 <see cref="T:System.Collections.Generic.HashSet`1" /> 集合中移除与指定的谓词所定义的条件相匹配的所有元素。</summary>
      <returns>已从 <see cref="T:System.Collections.Generic.HashSet`1" /> 集合中移除的元素的个数。</returns>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，用于定义要移除的元素应满足的条件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象与指定的集合中是否包含相同的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象等于 <paramref name="other" />，则为 true；否则为 false。</returns>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象，以仅包含该对象或指定集合中存在的元素（但不可包含同时在该对象和指定集合中都存在的元素）。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>向 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象添加一个项。</summary>
      <param name="item">要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象中的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读。</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示集合是否为只读。</summary>
      <returns>如果该集合为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 对象。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TrimExcess">
      <summary>将 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的容量设置为它所包含的元素的实际个数，向上舍入为接近的特定于实现的值。</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象，以包含该对象本身、指定集合中存在的所有元素或两者。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1.Enumerator">
      <summary>枚举 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的元素。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 集合中位于枚举器当前位置的元素。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.Dispose">
      <summary>释放 <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> 对象使用的所有资源。</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.MoveNext">
      <summary>将枚举器前进到 <see cref="T:System.Collections.Generic.HashSet`1" /> 集合的下一个元素。</summary>
      <returns>如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>集合中位于枚举数当前位置的元素，如 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在该集合的第一个元素之前或最后一个元素之后。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
    </member>
    <member name="T:System.Diagnostics.EventSchemaTraceListener">
      <summary>将端对端事件的跟踪或调试输出定向到 XML 编码的符合架构的日志文件。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String)">
      <summary>通过将指定文件用作调试和跟踪输出的接收方来初始化 <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> 类的新实例。</summary>
      <param name="fileName">日志文件的路径。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String)">
      <summary>通过将指定文件用作调试和跟踪输出的接收方，来初始化具有指定名称的 <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> 类的新实例。</summary>
      <param name="fileName">日志文件的路径。</param>
      <param name="name">侦听器名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32)">
      <summary>通过将指定文件用作调试和跟踪输出的接收方，来初始化具有指定名称和指定缓冲区大小的 <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> 类的新实例。</summary>
      <param name="fileName">日志文件的路径。</param>
      <param name="name">侦听器名称。</param>
      <param name="bufferSize">输出缓冲区的大小（以字节为单位）。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption)">
      <summary>通过将具有指定日志保留策略的指定文件用作调试和跟踪输出的接收方，来初始化具有指定名称和指定缓冲区大小的 <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> 类的新实例。</summary>
      <param name="fileName">日志文件的路径。</param>
      <param name="name">侦听器名称。</param>
      <param name="bufferSize">输出缓冲区的大小（以字节为单位）。</param>
      <param name="logRetentionOption">
        <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> 值之一。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64)">
      <summary>通过将具有指定日志保留策略和最大大小的指定文件用作调试和跟踪输出的接收方，来初始化具有指定名称和缓冲区大小的 <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> 类的新实例。</summary>
      <param name="fileName">日志文件的路径。</param>
      <param name="name">侦听器名称。</param>
      <param name="bufferSize">输出缓冲区的大小（以字节为单位）。</param>
      <param name="logRetentionOption">
        <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> 值之一。</param>
      <param name="maximumFileSize">最大文件大小（以字节为单位）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumFileSize" /> 小于 <paramref name="bufferSize" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumFileSize" /> 小于 <paramref name="bufferSize" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64,System.Int32)">
      <summary>通过将具有指定日志保留策略、最大大小和文件计数的指定文件用作调试和跟踪输出的接收方，来初始化具有指定名称和指定缓冲区大小的 <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> 类的新实例。</summary>
      <param name="fileName">日志文件的路径。</param>
      <param name="name">侦听器名称。</param>
      <param name="bufferSize">输出缓冲区的大小（以字节为单位）。</param>
      <param name="logRetentionOption">
        <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> 值之一。</param>
      <param name="maximumFileSize">最大文件大小（以字节为单位）。</param>
      <param name="maximumNumberOfFiles">输出日志文件的最大数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumFileSize" /> 小于 <paramref name="bufferSize" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumFileSize" /> 小于 <paramref name="bufferSize" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumFileSize" /> 小于 <paramref name="bufferSize" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumFileSize" /> 小于 <paramref name="bufferSize" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.BufferSize">
      <summary>获取输出缓冲区的大小。</summary>
      <returns>输出缓冲区的大小（以字节为单位）。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.Close">
      <summary>关闭该侦听器的日志文件，以使其不再接收跟踪或调试输出。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.Fail(System.String,System.String)">
      <summary>将包含基本错误消息和详细错误消息的错误信息写入日志文件。</summary>
      <param name="message">要写入的基本错误消息。</param>
      <param name="detailMessage">要追加到基本错误消息中的详细错误消息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.Flush">
      <summary>导致缓冲数据写入该侦听器的日志。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes">
      <summary>获取跟踪侦听器支持的自定义 XML 配置特性。</summary>
      <returns>一个 <see cref="T:System.String" /> 数组，其中包含此侦听器可识别的 XML 配置特性。</returns>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.IsThreadSafe">
      <summary>获取一个值，该值指示跟踪侦听器是否是线程安全的。</summary>
      <returns>始终返回 true。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize">
      <summary>获取日志文件的最大大小。</summary>
      <returns>最大文件大小（以字节为单位）。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles">
      <summary>获取日志文件最大数。</summary>
      <returns>日志文件最大数是由文件的 <see cref="P:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption" /> 属性的值来确定。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <summary>将跟踪信息、单个数据对象和事件信息写入日志文件。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
      <param name="source">源名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="data">要发出的数据对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <summary>将跟踪信息、多个数据对象和事件信息写入日志文件。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
      <param name="source">源名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="data">要发出的数据对象的数组。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <summary>将跟踪信息、消息和事件信息写入日志文件。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
      <param name="source">源名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="message">要写入的消息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <summary>将跟踪信息、格式化消息和事件信息写入日志文件。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
      <param name="source">源名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="format">包含零个或多个格式项的格式字符串，这些项与 <paramref name="args" /> 数组中的对象相对应。</param>
      <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption">
      <summary>获取该文件的跟踪日志保留选项。</summary>
      <returns>
        <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> 值之一。 默认值为 <see cref="F:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
      <summary>将跟踪信息（包括相关活动的标识）、消息和事件信息写入日志文件。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
      <param name="source">源名称。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="message">要写入的跟踪消息。</param>
      <param name="relatedActivityId">标识相关活动的 <see cref="T:System.Guid" /> 结构。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.Write(System.String)">
      <summary>将消息写入日志文件，且不提供任何其他上下文信息。</summary>
      <param name="message">要写入的消息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.WriteLine(System.String)">
      <summary>将后跟当前行终止符的消息写入日志文件，且不提供任何其他上下文信息。</summary>
      <param name="message">要写入的消息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.Writer">
      <summary>获取或设置写入日志文件的基础文本编写器。</summary>
      <returns>
        <see cref="T:System.IO.TextWriter" /> 对象。</returns>
      <exception cref="T:System.NotSupportedException">尝试向 <see cref="P:System.Diagnostics.EventSchemaTraceListener.Writer" /> 属性分配值。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.TraceLogRetentionOption">
      <summary>指定将用于 <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> 日志的文件结构。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles">
      <summary>数量有限的顺序文件，每个文件均具有最大文件大小。 当达到 <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" /> 属性值时，即开始在带有递增整数后缀的新文件中写入。 当达到 <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles" /> 属性值时，会清除和覆盖第一个文件。 然后，会以循环方式逐渐覆盖这些文件。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles">
      <summary>数量有限的顺序文件，每个文件均具有最大文件大小。 当达到 <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" /> 属性值时，即开始在带有递增整数后缀的新文件中写入。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.SingleFileBoundedSize">
      <summary>一个最大文件大小由 <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" /> 属性确定的文件。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize">
      <summary>一个没有最大文件大小限制的文件。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.UnlimitedSequentialFiles">
      <summary>无限数量的顺序文件，每个文件的最大文件大小由 <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" /> 属性确定。 文件数量或大小没有逻辑上的约束，但受限于计算机强制的物理约束。</summary>
    </member>
    <member name="T:System.Diagnostics.UnescapedXmlDiagnosticData">
      <summary>提供非转义 XML 数据以记录用户提供的跟踪数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.UnescapedXmlDiagnosticData.#ctor(System.String)">
      <summary>使用指定的 XML 数据字符串初始化 <see cref="T:System.Diagnostics.UnescapedXmlDiagnosticData" /> 类的新实例。</summary>
      <param name="xmlPayload">要写入事件架构的 UserData 节点中的 XML 数据。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.UnescapedXmlDiagnosticData.ToString">
      <summary>返回 <see cref="T:System.Diagnostics.UnescapedXmlDiagnosticData" /> 对象的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.Diagnostics.UnescapedXmlDiagnosticData" /> 对象的字符串表示形式。 如果对象为 null，则此方法返回空字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.UnescapedXmlDiagnosticData.UnescapedXml">
      <summary>获取或设置非转义 XML 数据字符串。</summary>
      <returns>非转义 XML 字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.EventDescriptor">
      <summary>包含用来定义事件的元数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventDescriptor.#ctor(System.Int32,System.Byte,System.Byte,System.Byte,System.Byte,System.Int32,System.Int64)">
      <summary>初始化 <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> 类的新实例。</summary>
      <param name="id">事件标识符。</param>
      <param name="version">事件的版本。 版本指示对事件定义的修订情况。 可以使用此成员和 ID 成员来标识唯一事件。</param>
      <param name="channel">定义事件的潜在目标。</param>
      <param name="level">指定包括在事件中的详细程度。</param>
      <param name="opcode">要在写入事件时执行的操作。</param>
      <param name="task">标识正在写入事件的应用程序的逻辑组件。</param>
      <param name="keywords">用来指定事件类别的位掩码。 关键字可以包含一个或多个由提供程序定义的关键字和/或标准关键字。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Channel">
      <summary>从事件说明符中检索通道值。</summary>
      <returns>用来定义事件的潜在目标的通道。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.EventId">
      <summary>从事件说明符中检索事件标识符值。</summary>
      <returns>事件标识符。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Keywords">
      <summary>从事件说明符中检索关键字值。</summary>
      <returns>一个关键字，是用来指定事件类别的位掩码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Level">
      <summary>从事件说明符中检索级别值。</summary>
      <returns>包括在事件中的详细程度。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Opcode">
      <summary>从事件说明符中检索操作代码值。</summary>
      <returns>要在写入事件时执行的操作。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Task">
      <summary>从事件说明符中检索任务值。</summary>
      <returns>一项任务，用来标识正在写入事件的应用程序的逻辑组件。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Version">
      <summary>从事件说明符中检索版本值。</summary>
      <returns>事件的版本。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.EventProvider">
      <summary>该类可用于写入事件。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.#ctor(System.Guid)">
      <summary>初始化 <see cref="T:System.Diagnostics.Eventing.EventProvider" /> 类的新实例。</summary>
      <param name="providerGuid">唯一标识提供程序的 GUID。</param>
      <exception cref="T:System.InsufficientMemoryException">没有足够的内存来完成该操作。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <see cref="N:System.Diagnostics.Eventing" /> 命名空间中的类仅适用于 Windows Vista。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="providerGuid" /> 参数不能为 null。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">由 ETW 子系统返回的错误。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.Close">
      <summary>从 ETW 子系统中移除提供程序的注册并释放所有非托管资源。</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">由 ETW 子系统返回的错误。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.CreateActivityId">
      <summary>为提供程序创建一个唯一的活动标识符。</summary>
      <returns>在调用 <see cref="M:System.Diagnostics.Eventing.EventProvider.SetActivityId(System.Guid@)" /> 方法为提供程序设置活动标识符时使用的唯一 GUID。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.Dispose">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.Dispose(System.Boolean)">
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.Finalize">
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError">
      <summary>获取与事件写入失败相关联的最后一个错误。</summary>
      <returns>该值可用于确定事件写入失败的原因。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.IsEnabled">
      <summary>确定该提供程序是否已经由某个会话启用，而与用来启用该提供程序的级别值和关键字值无关。</summary>
      <returns>如果已为某个会话启用该提供程序，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.IsEnabled(System.Byte,System.Int64)">
      <summary>确认是否有任何会话正在从该提供程序请求指定的事件。</summary>
      <returns>如果有任何会话正在请求指定的事件，则为 true；否则为 false。</returns>
      <param name="level">包括在该事件中的详细程度。</param>
      <param name="keywords">用来指定事件类别的位掩码。 此掩码应当与在该事件的清单中定义的关键字掩码相同。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.SetActivityId(System.Guid@)">
      <summary>设置由 <see cref="Overload:System.Diagnostics.Eventing.EventProvider.WriteEvent" /> 方法使用的当前活动标识符。</summary>
      <param name="id">由 <see cref="M:System.Diagnostics.Eventing.EventProvider.CreateActivityId" /> 方法返回的唯一活动标识符。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Int32,System.IntPtr)">
      <summary>写入某个事件。 以内存块形式指定事件数据。</summary>
      <returns>如果写入此事件，则为 true；否则为 false。 如果为 false，则调用 <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> 方法来确定失败的原因。</returns>
      <param name="eventDescriptor">用来标识要写入的事件的 <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> 实例。</param>
      <param name="dataCount">
        <paramref name="data" /> 参数所指向的事件数据的大小。 事件数据的最大大小限制为 64 KB 减去事件头大小所得的值。 如果会话的缓冲区较小，而且会话中包括事件的扩展数据项，则该事件会较小。</param>
      <param name="data">指向要写入的事件数据的指针。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Object[])">
      <summary>写入某个事件。 以对象数组形式指定事件数据。</summary>
      <returns>如果写入此事件，则为 true；否则为 false。 如果为 false，则调用 <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> 方法来确定失败的原因。</returns>
      <param name="eventDescriptor">用来标识要写入的事件的 <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> 实例。</param>
      <param name="eventPayload">包含要写入的事件数据的对象数组。 该对象必须采用清单中所指定的顺序。 该数组限制为 32 个对象，其中只有八个对象可以是字符串。 事件数据的最大大小限制为 64 KB 减去事件头大小所得的值。 如果会话的缓冲区较小，而且会话中包括事件的扩展数据项，则该事件会较小。 此参数可以为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="eventPayload" /> 参数包含的对象或字符串太多。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.String)">
      <summary>写入某个事件。 以字符串形式指定事件数据。</summary>
      <returns>如果写入此事件，则为 true；否则为 false。 如果为 false，则调用 <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> 方法来确定失败的原因。</returns>
      <param name="eventDescriptor">用来标识要写入的事件的 <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> 实例。</param>
      <param name="data">要作为事件数据写入的字符串。</param>
      <exception cref="T:System.ArgumentException">如果 <paramref name="data" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String)">
      <summary>写入一个包含字符串数据的事件。</summary>
      <returns>如果写入此事件，则为 true；否则为 false。 如果为 false，则调用 <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> 方法来确定失败的原因。</returns>
      <param name="eventMessage">要作为事件数据写入的字符串。</param>
      <exception cref="T:System.ArgumentException">如果 <paramref name="eventMessage" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String,System.Byte,System.Int64)">
      <summary>如果级别值和关键字值与该会话所请求的事件相匹配，则写入一个包含字符串数据的事件。</summary>
      <returns>如果写入此事件，则为 true；否则为 false。 如果为 false，则调用 <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> 方法来确定失败的原因。</returns>
      <param name="eventMessage">要作为事件数据写入的字符串。</param>
      <param name="eventLevel">包括在该事件中的详细程度。 如果提供程序使用某个清单来定义该事件，请将此值设置为该清单中定义的级别。</param>
      <param name="eventKeywords">用来指定事件类别的位掩码。 如果提供程序使用某个清单来定义该事件，请将此值设置为在该清单中定义的关键字掩码。</param>
      <exception cref="T:System.ArgumentException">如果 <paramref name="eventMessage" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Int32,System.IntPtr)">
      <summary>在端到端方案中跟踪事件时将多个事件链接在一起。 以内存块形式指定事件数据。</summary>
      <returns>如果写入此事件，则为 true；否则为 false。 如果为 false，则调用 <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> 方法来确定失败的原因。</returns>
      <param name="eventDescriptor">用来标识要写入的事件的 <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> 实例。</param>
      <param name="relatedActivityId">上一个组件的活动标识符。 使用该参数可以将您的组件的事件链接到上一个组件的事件。</param>
      <param name="dataCount">
        <paramref name="data" /> 参数所指向的事件数据的大小。 事件数据的最大大小限制为 64 KB 减去事件头大小所得的值。 如果会话的缓冲区较小，而且会话中包括事件的扩展数据项，则该事件会较小。</param>
      <param name="data">指向要写入的事件数据的指针。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Object[])">
      <summary>在端到端方案中跟踪事件时将多个事件链接在一起。 以对象数组形式指定事件数据。</summary>
      <returns>如果写入此事件，则为 true；否则为 false。 如果为 false，则调用 <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> 方法来确定失败的原因。</returns>
      <param name="eventDescriptor">用来标识要写入的事件的 <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> 实例。</param>
      <param name="relatedActivityId">上一个组件的活动标识符。 使用该参数可以将您的组件的事件链接到上一个组件的事件。</param>
      <param name="eventPayload">包含要写入的事件数据的对象数组。 该数据必须采用清单中所指定的顺序。 该数组限制为 32 个对象，其中只有八个对象可以是字符串。 事件数据的最大大小限制为 64 KB 减去事件头大小所得的值。 如果会话的缓冲区较小，而且会话中包括事件的扩展数据项，则该事件会较小。</param>
      <exception cref="T:System.ArgumentException">如果 <paramref name="eventPayload" /> 包含的对象或字符串太多。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode">
      <summary>定义最后一个写操作的可能状态。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode.EventTooBig">
      <summary>该事件大于会话缓冲区大小；事件不能跨多个缓冲区。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode.NoError">
      <summary>写入成功。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode.NoFreeBuffers">
      <summary>该会话已没有可用缓冲区可供写入。 这种情况可能会在事件发生率过高时出现，因为此时磁盘子系统会过载或者缓冲区数目会太小。 事件将被丢弃，而不是阻塞，直至有更多缓冲区变得可用。 请考虑增加该会话缓冲区的数目和大小，或者减少写入事件的数目或大小。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.EventProviderTraceListener">
      <summary>用来向 ETW 子系统中写入事件的 <see cref="T:System.Diagnostics.TraceSource" /> 的侦听器。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String)">
      <summary>使用指定的提供程序标识符来初始化 <see cref="T:System.Diagnostics.Eventing.EventProviderTraceListener" /> 类的新实例。</summary>
      <param name="providerId">标识该提供程序的唯一字符串 <see cref="T:System.Guid" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String,System.String)">
      <summary>使用指定的提供程序标识符和侦听器名称来初始化 <see cref="T:System.Diagnostics.Eventing.EventProviderTraceListener" /> 类的新实例。</summary>
      <param name="providerId">标识该提供程序的唯一字符串 <see cref="T:System.Guid" />。</param>
      <param name="name">侦听器的名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String,System.String,System.String)">
      <summary>使用指定的提供程序标识符、侦听器名称和分隔符来初始化 <see cref="T:System.Diagnostics.Eventing.EventProviderTraceListener" /> 类的新实例。</summary>
      <param name="providerId">标识该提供程序的唯一字符串 <see cref="T:System.Guid" />。</param>
      <param name="name">侦听器的名称。</param>
      <param name="delimiter">用来分隔事件数据的分隔符（有关更多详细信息，请参见 <see cref="P:System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter" /> 属性）。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.Close">
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter">
      <summary>获取和设置用来对写入 ETW 子系统的事件数据进行分隔的分隔符。</summary>
      <returns>用来分隔事件数据的分隔符。 默认分隔符为逗号。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.Fail(System.String,System.String)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.Flush">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.GetSupportedAttributes">
    </member>
    <member name="P:System.Diagnostics.Eventing.EventProviderTraceListener.IsThreadSafe">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.Write(System.String)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.WriteLine(System.String)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventBookmark">
      <summary>表示事件流中的占位符（书签）。 可以使用此占位符在事件流中标记一个位置并返回到此位置。 此对象的实例可以从 <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> 对象获得，在这种情况下它对应于该事件记录的位置。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventBookmark.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>根据指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，包含序列化新 <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" /> 对象所需的信息。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含与新的 <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" /> 关联的序列化流的源。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventBookmark.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化目标对象所需的数据填充 <see cref="T:System.Runtime.Serialization." /><see cref="SerializationInfo" /> 对象。</summary>
      <param name="info">要用数据填充的 <see cref="T:System.Runtime.Serialization." />SerializationInfo 对象。</param>
      <param name="context">此序列化的目标。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventBookmark.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化目标对象所需的数据填充 <see cref="T:System.Runtime.Serialization." /><see cref="SerializationInfo" /> 对象。</summary>
      <param name="info">要用数据填充的 <see cref="T:System.Runtime.Serialization." />SerializationInfo 对象。</param>
      <param name="context">此序列化的目标。</param>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventKeyword">
      <summary>表示事件的关键字。 关键字在事件提供程序中定义，用于按事件的用法将此事件与其他类似事件分到一组中。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventKeyword.DisplayName">
      <summary>获取关键字的本地化名称。</summary>
      <returns>返回一个包含此关键字的本地化名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventKeyword.Name">
      <summary>获取关键字的非本地化名称。</summary>
      <returns>返回一个包含此关键字的非本地化名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventKeyword.Value">
      <summary>获取与关键字关联的数值。</summary>
      <returns>返回一个 long 值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLevel">
      <summary>包含在事件提供程序中定义的事件级别。 级别表示事件的严重性。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLevel.DisplayName">
      <summary>获取事件级别的本地化名称。 名称描述此级别用于哪种严重级别的事件。</summary>
      <returns>返回一个包含事件级别的本地化名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLevel.Name">
      <summary>获取事件级别的非本地化名称。</summary>
      <returns>返回一个包含事件级别的非本地化名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLevel.Value">
      <summary>获取事件级别的数值。</summary>
      <returns>返回整数值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogConfiguration">
      <summary>包含事件日志的静态信息和配置设置。 许多配置设置是由创建日志的事件提供程序定义的。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.#ctor(System.String)">
      <summary>通过指定要获取其信息和配置设置的本地事件日志，初始化新的 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogConfiguration" /> 对象。</summary>
      <param name="logName">要获取其信息和配置设置的本地事件日志的名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.#ctor(System.String,System.Diagnostics.Eventing.Reader.EventLogSession)">
      <summary>通过指定要获取其信息和配置设置的日志的名称，初始化新的 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogConfiguration" /> 对象。 根据指定的事件日志会话，此日志可能位于本地计算机或远程计算机上。</summary>
      <param name="logName">要获取其信息和配置设置的事件日志的名称。</param>
      <param name="session">用于确定指定日志所属的事件日志服务的事件日志会话。 此会话与本地计算机或远程计算机上的事件日志服务相连接。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.Dispose">
      <summary>释放此对象使用的所有资源。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.Dispose(System.Boolean)">
      <summary>释放此对象使用的非托管资源，并可以选择释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.IsClassicLog">
      <summary>获取指示事件日志是否为传统型事件日志的标志。 传统型事件日志是指在 .mc 文件而非在事件提供程序使用的清单（.xml 文件）中定义其事件的事件日志。</summary>
      <returns>如果事件日志是传统型日志，则返回 true；如果事件日志不是传统型日志，则返回 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.IsEnabled">
      <summary>获取或设置一个确定是启用还是禁用事件日志的布尔值。 启用的日志是指可以在其中记录事件的日志，禁用的日志是指无法在其中记录事件的日志。</summary>
      <returns>如果已启用日志，则返回 true；如果已禁用日志，则返回 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogFilePath">
      <summary>获取或设置存储日志事件的文件位置的文件目录路径。</summary>
      <returns>返回一个包含事件日志文件的路径的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogIsolation">
      <summary>获取一个 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogIsolation" /> 值，该值指定此事件日志是应用程序事件日志、系统事件日志还是自定义事件日志。</summary>
      <returns>返回一个 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogIsolation" /> 值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogMode">
      <summary>获取或设置一个 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogMode" /> 值，该值确定在事件日志已满时如何处理事件。</summary>
      <returns>返回一个 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogMode" /> 值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogName">
      <summary>获取事件日志的名称。</summary>
      <returns>返回一个包含事件日志的名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogType">
      <summary>获取一个 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogType" /> 值，该值确定事件日志的类型。</summary>
      <returns>返回一个 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogType" /> 值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.MaximumSizeInBytes">
      <summary>获取或设置允许事件日志文件具有的最大大小，以字节为单位。 当文件达到此最大大小时，则视为已满。</summary>
      <returns>返回一个长整型值，该值表示允许事件日志文件具有的最大大小，以字节为单位。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.OwningProviderName">
      <summary>获取创建此事件日志的事件提供程序的名称。</summary>
      <returns>返回一个包含创建此事件日志的事件提供程序的名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderBufferSize">
      <summary>获取事件提供程序用来将事件发布到日志的缓冲区的大小。</summary>
      <returns>返回一个可以为 null 的整数值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderControlGuid">
      <summary>如果此日志是调试日志，则获取事件日志的控件全局唯一标识符 (GUID)。 如果此日志不是调试日志，则此值将为 null。</summary>
      <returns>返回一个 GUID 值或 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderKeywords">
      <summary>获取或设置事件提供程序使用的关键字掩码。</summary>
      <returns>如果事件提供程序没有定义任何关键字，则返回一个可以为 null 的长整型值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderLatency">
      <summary>获取事件提供程序在将事件发布到日志时所使用的最大滞后时间。</summary>
      <returns>如果事件提供程序没有指定任何滞后时间，则返回一个可以为 null 的整数值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderLevel">
      <summary>获取或设置允许在事件日志中记录的最高事件级别（它定义事件的严重性）。 此值由事件提供程序定义。</summary>
      <returns>如果事件提供程序中没有定义最高事件级别，则返回一个可以为 null 的整数值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderMaximumNumberOfBuffers">
      <summary>获取事件提供程序用于将事件发布到事件日志的缓冲区的最大数目。</summary>
      <returns>返回一个整数值，该值是事件提供程序用于将事件发布到事件日志的缓冲区的最大数目。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderMinimumNumberOfBuffers">
      <summary>获取事件提供程序用于将事件发布到事件日志的缓冲区的最小数目。</summary>
      <returns>返回一个整数值，该值是事件提供程序用于将事件发布到事件日志的缓冲区的最小数目。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderNames">
      <summary>获取可以将事件发布到此事件日志的所有事件提供程序的名称的可枚举集合。</summary>
      <returns>返回包含事件提供程序名称的字符串的可枚举集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges">
      <summary>保存配置设置</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SecurityDescriptor">
      <summary>获取或设置事件日志的安全描述符。 安全描述符定义可以对事件日志进行读写操作的用户和用户组。</summary>
      <returns>返回一个包含事件日志的安全描述符的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogException">
      <summary>表示在读取事件日志相关信息的过程中发生错误时引发的所有异常的基类。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor(System.Int32)">
      <summary>使用异常的错误代码初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> 类的新实例。</summary>
      <param name="errorCode">在读取或配置事件日志相关信息时发生的错误的错误代码。 有关更多信息和事件日志相关错误代码的列表，请参见 http://go.microsoft.com/fwlink/?LinkId=82629。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，包含有关所引发异常的序列化对象数据。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor(System.String)">
      <summary>通过指定描述当前异常的错误消息初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> 类的新实例。</summary>
      <param name="message">描述当前异常的错误消息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor(System.String,System.Exception)">
      <summary>使用错误消息和内部异常初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> 类的新实例。</summary>
      <param name="message">描述当前异常的错误消息。</param>
      <param name="innerException">导致当前异常的异常实例。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用有关异常的信息设置 SerializationInfo 对象。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，它包含有关所引发异常的序列化对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogException.Message">
      <summary>获取描述当前异常的错误消息。</summary>
      <returns>返回一个包含描述当前异常的错误消息的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogInformation">
      <summary>允许您访问活动事件日志和事件日志文件的运行时属性。 这些属性包括日志中的事件数、日志大小、确定日志是否已满的值以及上次写入或访问日志的时间。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.Attributes">
      <summary>获取与日志关联的日志文件的文件特性。</summary>
      <returns>返回整数值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.CreationTime">
      <summary>获取与事件日志关联的日志文件的创建时间。</summary>
      <returns>返回 <see cref="T:System.DateTime" /> 对象。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.FileSize">
      <summary>获取与事件日志关联的文件的大小（以字节为单位）。</summary>
      <returns>返回一个长整型值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.IsLogFull">
      <summary>获取一个布尔值，该值确定日志文件是否已达到其最大大小（日志已满）。</summary>
      <returns>如果日志已满，则返回 true；如果日志未满，则返回 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.LastAccessTime">
      <summary>获取上次访问与事件日志关联的日志文件的时间。</summary>
      <returns>返回 <see cref="T:System.DateTime" /> 对象。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.LastWriteTime">
      <summary>获取上次将数据写入与事件日志关联的日志文件的时间。</summary>
      <returns>返回 <see cref="T:System.DateTime" /> 对象。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.OldestRecordNumber">
      <summary>获取事件日志中的最早事件记录数。</summary>
      <returns>返回一个表示事件日志中的最早事件记录数的长整型值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.RecordCount">
      <summary>获取事件日志中的事件记录数。</summary>
      <returns>返回一个表示事件日志中的事件记录数的长整型值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException">
      <summary>表示在事件提供程序发布事件中的无效数据时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，它包含有关所引发异常的序列化对象数据。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor(System.String)">
      <summary>通过指定描述当前异常的错误消息初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" /> 类的新实例。</summary>
      <param name="message">描述当前异常的错误消息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor(System.String,System.Exception)">
      <summary>使用错误消息和内部异常初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" /> 类的新实例。</summary>
      <param name="message">描述当前异常的错误消息。</param>
      <param name="innerException">导致当前异常的异常实例。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogIsolation">
      <summary>定义事件日志的默认访问权限。 应用程序和系统值指示，日志与相应的 Windows 日志（应用程序或系统事件日志）共享访问控制列表 (ACL)，并与同一隔离的其他日志共享 Windows 事件跟踪 (ETW) 会话。 具有自定义隔离的所有信道均使用专用 ETW 会话。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogIsolation.Application">
      <summary>日志与应用程序事件日志共享访问控制列表；与具有应用程序隔离的其他日志共享 ETW 会话。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogIsolation.Custom">
      <summary>事件日志是使用其自己的专用 ETW 会话的自定义事件日志。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogIsolation.System">
      <summary>日志与系统事件日志共享访问控制列表；与具有系统隔离的其他日志共享 ETW 会话。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogLink">
      <summary>表示事件提供程序与此提供程序要将事件发布到的事件日志之间的链接。 无法实例化此对象。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogLink.DisplayName">
      <summary>获取事件日志的本地化名称。</summary>
      <returns>返回一个包含事件日志的本地化名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogLink.IsImported">
      <summary>获取一个布尔值，该值确定是否导入了事件日志，而不是确定是否在事件提供程序中定义了事件日志。 在其他提供程序中定义导入的事件日志。</summary>
      <returns>如果事件提供程序已导入事件日志，则返回 true；如果事件提供程序没有导入事件日志，则返回 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogLink.LogName">
      <summary>获取与此对象关联的事件日志的非本地化名称。</summary>
      <returns>返回一个包含与此对象关联的事件日志的非本地化名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogMode">
      <summary>确定事件日志服务在日志达到其允许的最大大小时（事件日志已满时）处理事件日志的行为。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogMode.AutoBackup">
      <summary>存档已满的日志，不会覆盖事件。 必要时自动存档日志。 不会覆盖任何事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogMode.Circular">
      <summary>在日志文件已满时继续存储新事件。 每个新传入的事件会替换日志中的最早事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogMode.Retain">
      <summary>不会覆盖事件。 手动而非自动清除日志。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException">
      <summary>表示在请求的事件日志（通常由事件日志的名称或事件日志文件的路径来指定）不存在时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，它包含有关所引发异常的序列化对象数据。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor(System.String)">
      <summary>通过指定描述当前异常的错误消息初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" /> 类的新实例。</summary>
      <param name="message">描述当前异常的错误消息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用错误消息和内部异常初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" /> 类的新实例。</summary>
      <param name="message">描述当前异常的错误消息。</param>
      <param name="innerException">导致当前异常的异常实例。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogPropertySelector">
      <summary>包含表示事件的 XML 表示形式中的元素的 XPath 查询的字符串数组，事件的 XML 表示形式基于 Event Schema（事件架构）。 此对象中的查询用于从事件中提取值。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogPropertySelector.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogPropertySelector" /> 类的一个新实例。</summary>
      <param name="propertyQueries">用于从事件的 XML 表示形式中提取值的 XPath 查询。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogPropertySelector.Dispose">
      <summary>释放此对象使用的所有资源。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogPropertySelector.Dispose(System.Boolean)">
      <summary>释放此对象使用的非托管资源，并可以选择释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException">
      <summary>表示当指定的事件提供程序名称引用禁用的事件提供程序时引发的异常。 禁用的事件提供程序不能发布事件。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，它包含有关所引发异常的序列化对象数据。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor(System.String)">
      <summary>通过指定描述当前异常的错误消息初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" /> 类的新实例。</summary>
      <param name="message">描述当前异常的错误消息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor(System.String,System.Exception)">
      <summary>使用错误消息和内部异常初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" /> 类的新实例。</summary>
      <param name="message">描述当前异常的错误消息。</param>
      <param name="innerException">导致当前异常的异常实例。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogQuery">
      <summary>表示事件日志中的事件的查询以及定义如何执行查询和在哪台计算机上执行查询的设置。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogQuery.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType)">
      <summary>通过指定查询的目标初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogQuery" /> 类的新实例。 此目标可以是活动的事件日志，也可以是日志文件。</summary>
      <param name="path">要查询的事件日志的名称，或要查询的事件日志文件的路径。</param>
      <param name="pathType">指定路径参数中使用的字符串是指定事件日志的名称，还是指定事件日志文件的路径。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogQuery.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String)">
      <summary>通过指定查询的目标和事件查询初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogQuery" /> 类的新实例。 此目标可以是活动的事件日志，也可以是日志文件。</summary>
      <param name="path">要查询的事件日志的名称，或要查询的事件日志文件的路径。</param>
      <param name="pathType">指定路径参数中使用的字符串是指定事件日志的名称，还是指定事件日志文件的路径。</param>
      <param name="query">用于检索与查询条件匹配的事件的事件查询。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogQuery.ReverseDirection">
      <summary>获取或设置布尔值，该值确定是否从事件日志中的最新事件向日志中的最早事件读取事件。</summary>
      <returns>如果从日志中的最新事件向最早事件读取事件，则返回 true；如果从日志中的最早事件向最新事件读取事件，则返回 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogQuery.Session">
      <summary>获取或设置访问本地计算机或远程计算机上的事件日志服务的会话。 可以通过使用此 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogQuery" /> 对象创建 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> 对象或 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> 对象来将此对象设置为访问远程事件日志。</summary>
      <returns>返回一个 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogQuery.TolerateQueryErrors">
      <summary>获取或设置一个布尔值，该值确定在查询出错时此查询是否继续检索事件。</summary>
      <returns>true 指示即使对某些日志的查询失败，此查询也将继续检索事件；false 指示在查询失败时此查询将不继续检索事件。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogReader">
      <summary>允许根据事件查询从事件日志读取事件。 此对象读取的事件作为 <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> 对象返回。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)">
      <summary>通过指定事件查询来初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> 类的新实例。</summary>
      <param name="eventQuery">用于检索事件的事件查询。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)">
      <summary>通过指定事件查询和用作查询的开始位置的书签初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> 类的新实例。</summary>
      <param name="eventQuery">用于检索事件的事件查询。</param>
      <param name="bookmark">用作事件日志或事件流中的开始位置的书签（占位符）。 查询只返回在书签事件发生后记录的事件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.String)">
      <summary>通过指定要从中检索事件的活动事件日志，初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> 类的新实例。</summary>
      <param name="path">要从中检索事件的事件日志的名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType)">
      <summary>通过指定要从中检索事件的事件日志的名称或要从中检索事件的日志文件的路径，初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> 类的新实例。</summary>
      <param name="path">要从中检索事件的事件日志的名称，或要从中检索事件的事件日志文件的路径。</param>
      <param name="pathType">指定路径参数中使用的字符串是指定事件日志的名称，还是指定事件日志文件的路径。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogReader.BatchSize">
      <summary>获取或设置从每个读取操作的事件流中检索的事件数。</summary>
      <returns>返回整数值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.CancelReading">
      <summary>取消当前查询操作。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Dispose">
      <summary>释放此对象使用的所有资源。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Dispose(System.Boolean)">
      <summary>释放此对象使用的非托管资源，并可以选择释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogReader.LogStatus">
      <summary>获取与此对象中的事件查询关联的每个事件日志或日志文件的状态。</summary>
      <returns>返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogStatus" /> 对象的列表，其中每个对象包含有关与此对象中的事件查询关联的事件日志的状态信息。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent">
      <summary>读取从此对象中的事件查询返回的下一个事件。</summary>
      <returns>返回一个 <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent(System.TimeSpan)">
      <summary>读取从此对象中的事件查询返回的下一个事件。</summary>
      <returns>返回一个 <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> 对象。</returns>
      <param name="timeout">取消读取操作前允许该操作运行的最大时间。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.Diagnostics.Eventing.Reader.EventBookmark)">
      <summary>通过指定书签事件更改要读取的下一个事件在事件流中的位置。 不会检索在书签事件前记录的任何事件。</summary>
      <param name="bookmark">用作事件日志或事件流中的开始位置的书签（占位符）。 查询只返回在书签事件发生后记录的事件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.Diagnostics.Eventing.Reader.EventBookmark,System.Int64)">
      <summary>通过指定书签事件和事件与书签的偏移量，更改要读取的下一个事件在事件流中的位置。 不会检索在书签加上偏移量前记录的任何事件。</summary>
      <param name="bookmark">用作事件日志或事件流中的开始位置的书签（占位符）。 查询只返回在书签事件发生后记录的事件。</param>
      <param name="offset">用于更改书签位置的事件的偏移量。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.IO.SeekOrigin,System.Int64)">
      <summary>通过指定开始位置和与开始位置的偏移量，更改要读取的下一个事件在事件流中的位置。 不会检索在开始位置加上偏移量前记录的任何事件。</summary>
      <param name="origin">来自 <see cref="T:System.IO.SeekOrigin" /> 枚举的值定义从事件流中的什么位置开始查询事件。</param>
      <param name="offset">要添加到原点的事件的偏移量。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogReadingException">
      <summary>表示在读取、查询或订阅事件日志中的事件的过程中发生错误时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，它包含有关所引发异常的序列化对象数据。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor(System.String)">
      <summary>通过指定描述当前异常的错误消息初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" /> 类的新实例。</summary>
      <param name="message">描述当前异常的错误消息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor(System.String,System.Exception)">
      <summary>使用错误消息和内部异常初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" /> 类的新实例。</summary>
      <param name="message">描述当前异常的错误消息。</param>
      <param name="innerException">导致当前异常的异常实例。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogRecord">
      <summary>包含从 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> 对象接收的事件的事件实例的属性。 这些事件属性提供有关事件的信息，例如记录事件的计算机的名称和事件的创建时间。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ActivityId">
      <summary>获取进程中涉及事件的活动的全局唯一标识符 (GUID)。 这样使用方可以对相关活动进行分组。</summary>
      <returns>返回一个 GUID 值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Bookmark">
      <summary>获取与此事件对应的占位符（书签）。 它可在事件流中用作占位符。</summary>
      <returns>返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ContainerLog">
      <summary>获取在其中存储事件的事件日志或事件日志文件的名称。</summary>
      <returns>返回一个包含在其中存储事件的事件日志或事件日志文件的名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.Dispose(System.Boolean)">
      <summary>释放此对象使用的非托管资源，并可以选择释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.FormatDescription">
      <summary>获取当前区域设置中的事件消息。</summary>
      <returns>返回一个包含当前区域设置中的事件消息的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.FormatDescription(System.Collections.Generic.IEnumerable{System.Object})">
      <summary>获取事件消息，将消息中的变量替换为指定值。</summary>
      <returns>返回一个包含当前区域设置中的事件消息的字符串。</returns>
      <param name="values">用于替换事件消息中的变量的值。 变量用 %n 表示，其中 n 是一个数字。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.GetPropertyValues(System.Diagnostics.Eventing.Reader.EventLogPropertySelector)">
      <summary>获取用户提供的事件属性值的枚举，或基于 XPath 的数据的结果（如果事件具有 XML 表示形式）。</summary>
      <returns>返回对象的列表。</returns>
      <param name="propertySelector">选择要返回的属性值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Id">
      <summary>获取此事件的标识符。 具有此标识符值的所有事件均表示同一类型的事件。</summary>
      <returns>返回整数值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Keywords">
      <summary>获取事件的关键字掩码。 获取 <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.KeywordsDisplayNames" /> 属性的值以获得此掩码中使用的关键字的名称。</summary>
      <returns>返回一个长整型值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.KeywordsDisplayNames">
      <summary>获取在此事件的关键字掩码中使用的关键字的显示名称。</summary>
      <returns>返回字符串的可枚举集合，这些字符串包含在此事件的关键字掩码中使用的关键字的显示名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Level">
      <summary>获取事件的级别。 级别表示事件的严重性。 若要获得级别名称，请获取 <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.LevelDisplayName" /> 属性的值。</summary>
      <returns>返回一个字节值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.LevelDisplayName">
      <summary>获取此事件的级别的显示名称。</summary>
      <returns>返回一个包含此事件的级别的显示名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.LogName">
      <summary>获取记录此事件的事件日志的名称。</summary>
      <returns>返回一个包含此事件的事件日志名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.MachineName">
      <summary>获取在其上记录此事件的计算机的名称。</summary>
      <returns>返回一个包含在其上记录此事件的计算机的名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.MatchedQueryIds">
      <summary>获取此事件与之匹配的查询标识符的列表。 此事件与将返回此事件的查询相匹配。</summary>
      <returns>返回整数值的可枚举集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Opcode">
      <summary>获取事件的操作码。 此操作码定义一个数值，该数值标识应用程序在引发事件时正在执行的活动或活动中的点。 若要获得操作码名称，请获取 <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.OpcodeDisplayName" /> 属性的值。</summary>
      <returns>返回一个短整型值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.OpcodeDisplayName">
      <summary>获取此事件的操作码的显示名称。</summary>
      <returns>返回一个包含此事件的操作码的显示名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ProcessId">
      <summary>获取记录此事件的事件提供程序的进程标识符。</summary>
      <returns>返回整数值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Properties">
      <summary>获取事件的用户提供的属性。</summary>
      <returns>返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventProperty" /> 对象的列表。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ProviderId">
      <summary>获取发布此事件的事件提供程序的全局唯一标识符 (GUID)。</summary>
      <returns>返回一个 GUID 值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ProviderName">
      <summary>获取发布此事件的事件提供程序的名称。</summary>
      <returns>返回一个包含发布此事件的事件提供程序的名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Qualifiers">
      <summary>获取用于事件标识的限定符数。</summary>
      <returns>返回整数值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.RecordId">
      <summary>获取日志中事件的事件记录标识符。</summary>
      <returns>返回一个长整型值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.RelatedActivityId">
      <summary>获取进程中涉及事件的相关活动的全局唯一标识符 (GUID)。</summary>
      <returns>返回一个 GUID 值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Task">
      <summary>获取发布事件的应用程序或组件的一部分的任务标识符。 任务是一个保留了前 16 个值的 16 位值。 此类型允许使用 0x0000 和 0xffef 之间的任何值。 若要获得任务名称，请获取 <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.TaskDisplayName" /> 属性的值。</summary>
      <returns>返回整数值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.TaskDisplayName">
      <summary>获取事件的任务的显示名称。</summary>
      <returns>返回一个包含事件的任务的显示名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ThreadId">
      <summary>获取在其中运行事件提供程序的线程的线程标识符。</summary>
      <returns>返回整数值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.TimeCreated">
      <summary>获取事件的创建时间，格式为 <see cref="T:System.DateTime" />。</summary>
      <returns>返回一个 <see cref="T:System.DateTime" /> 值。 该值可以为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.ToXml">
      <summary>获取事件的 XML 表示形式。 所有的事件属性均以事件的 XML 表示。 XML 符合 event schema（事件架构）。</summary>
      <returns>返回一个包含事件的 XML 表示形式的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.UserId">
      <summary>获取其上下文用于发布事件的用户的安全描述符。</summary>
      <returns>返回一个 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Version">
      <summary>获取事件的版本号。</summary>
      <returns>返回一个字节值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogSession">
      <summary>用于访问本地计算机或远程计算机上的事件日志服务，以便您可以管理和收集有关计算机上的事件日志和事件提供程序的信息。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.#ctor">
      <summary>初始化新的 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> 对象并建立与本地事件日志服务的连接。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.#ctor(System.String)">
      <summary>初始化新的 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> 对象，并建立与指定计算机上的事件日志服务的连接。 调用此方法的用户的凭据（用户名和密码）将用作访问远程计算机的凭据。</summary>
      <param name="server">通过其连接到事件日志服务的计算机的名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.#ctor(System.String,System.String,System.String,System.Security.SecureString,System.Diagnostics.Eventing.Reader.SessionAuthentication)">
      <summary>初始化新的 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> 对象，并建立与指定计算机上的事件日志服务的连接。 使用指定的凭据（用户名和密码）作为访问远程计算机的凭据。</summary>
      <param name="server">通过其连接到事件日志服务的计算机的名称。</param>
      <param name="domain">指定用户的域。</param>
      <param name="user">用于连接到远程计算机的用户名。</param>
      <param name="password">用于连接到远程计算机的密码。</param>
      <param name="logOnType">用于连接到远程计算机的连接类型。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.CancelCurrentOperations">
      <summary>取消当前对此会话对象连接到的事件日志服务处于活动状态的所有操作（例如，读取事件日志或订阅事件日志）。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ClearLog(System.String)">
      <summary>从指定的事件日志中清除事件。</summary>
      <param name="logName">要从中清除所有事件的事件日志的名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ClearLog(System.String,System.String)">
      <summary>从指定的事件日志中清除事件，并将已清除的事件保存到指定文件。</summary>
      <param name="logName">要从中清除所有事件的事件日志的名称。</param>
      <param name="backupPath">已清除的事件将保存到的文件的路径。 此文件名应以 .evtx 结尾。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.Dispose">
      <summary>释放此对象使用的所有资源。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.Dispose(System.Boolean)">
      <summary>释放此对象使用的非托管资源，并可以选择释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLog(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String)">
      <summary>将事件导出到外部日志文件中。 存储事件，不存储事件消息。</summary>
      <param name="path">要从中导出事件的事件日志的名称，或要从中导出事件的事件日志文件的路径。</param>
      <param name="pathType">指定路径参数中使用的字符串是指定事件日志的名称，还是指定事件日志文件的路径。</param>
      <param name="query">用于选择要导出的事件的查询。将只导出从查询返回的事件。</param>
      <param name="targetFilePath">在执行此方法后导出的事件将存储到的日志文件（以 .evtx 结尾）的路径。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLog(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String,System.Boolean)">
      <summary>将事件导出到外部日志文件中。 可以设置标志以指示即使对某些日志的指定查询失败，此方法也将继续导出事件。 存储事件，不存储事件消息。</summary>
      <param name="path">要从中导出事件的事件日志的名称，或要从中导出事件的事件日志文件的路径。</param>
      <param name="pathType">指定路径参数中使用的字符串是指定事件日志的名称，还是指定事件日志文件的路径。</param>
      <param name="query">用于选择要导出的事件的查询。 将只导出从查询返回的事件。</param>
      <param name="targetFilePath">在执行此方法后导出的事件将存储到的日志文件（以 .evtx 结尾）的路径。</param>
      <param name="tolerateQueryErrors">true 指示即使对某些日志的指定查询失败，此方法也将继续导出事件；false 指示在指定查询失败时，此方法不会继续导出事件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLogAndMessages(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String)">
      <summary>将事件及其消息导出到外部日志文件中。</summary>
      <param name="path">要从中导出事件的事件日志的名称，或要从中导出事件的事件日志文件的路径。</param>
      <param name="pathType">指定路径参数中使用的字符串是指定事件日志的名称，还是指定事件日志文件的路径。</param>
      <param name="query">用于选择要导出的事件的查询。将只导出从查询返回的事件。</param>
      <param name="targetFilePath">在执行此方法后导出的事件将存储到的日志文件（以 .evtx 结尾）的路径。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLogAndMessages(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>将事件及其消息导出到外部日志文件中。 可以设置标志以指示即使对某些日志的指定查询失败，此方法也将继续导出事件。 以指定语言导出事件消息。</summary>
      <param name="path">要从中导出事件的事件日志的名称，或要从中导出事件的事件日志文件的路径。</param>
      <param name="pathType">指定路径参数中使用的字符串是指定事件日志的名称，还是指定事件日志文件的路径。</param>
      <param name="query">用于选择要导出的事件的查询。将只导出从查询返回的事件。</param>
      <param name="targetFilePath">在执行此方法后导出的事件将存储到的日志文件（以 .evtx 结尾）的路径。</param>
      <param name="tolerateQueryErrors">true 指示即使对某些日志的指定查询失败，此方法也将继续导出事件；false 指示在指定查询失败时，此方法不会继续导出事件。</param>
      <param name="targetCultureInfo">指定已导出的事件消息将使用哪种语言的区域性。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.GetLogInformation(System.String,System.Diagnostics.Eventing.Reader.PathType)">
      <summary>获取包含指定事件日志的运行时信息的对象。</summary>
      <returns>返回一个 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInformation" /> 对象，该对象包含有关指定日志的信息。</returns>
      <param name="logName">获取有关其信息的事件日志的名称，或获取有关其信息的事件日志文件的路径。</param>
      <param name="pathType">指定路径参数中使用的字符串是指定事件日志的名称，还是指定事件日志文件的路径。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.GetLogNames">
      <summary>获取向事件日志服务注册的所有事件日志名称的可枚举集合。</summary>
      <returns>返回包含事件日志名称的字符串的可枚举集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.GetProviderNames">
      <summary>获取向事件日志服务注册的所有事件提供程序名称的可枚举集合。 事件提供程序是将事件发布到事件日志的应用程序。</summary>
      <returns>返回包含事件提供程序名称的字符串的可枚举集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogSession.GlobalSession">
      <summary>获取连接到本地计算机上的事件日志服务的静态预定义会话对象。</summary>
      <returns>返回一个 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> 对象，该对象是连接到本地计算机上的事件日志服务的预定义会话对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogStatus">
      <summary>包含特定事件日志的状态代码或错误代码。 此状态可用来确定事件日志是否可用于操作。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogStatus.LogName">
      <summary>获取已获得其状态代码的事件日志的名称。</summary>
      <returns>返回一个包含已获得其状态代码的事件日志的名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogStatus.StatusCode">
      <summary>获取事件日志的状态代码或错误代码。 此状态或错误是对事件日志执行读取或订阅操作的结果。</summary>
      <returns>返回整数值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogType">
      <summary>定义在事件日志中记录的事件的类型。 每个日志只能包含一种类型的事件。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogType.Administrative">
      <summary>这些事件主要针对最终用户、管理员和支持人员。 管理类型日志中的事件指示管理员可以处理的问题以及可以执行的定义完善的解决方案。 例如，在应用程序无法连接到打印机时发生的事件就是一个管理事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogType.Analytical">
      <summary>分析事件日志中事件的发布量非常大。 它们描述程序操作并指示用户无法处理的问题。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogType.Debug">
      <summary>调试类型事件日志中的事件仅供开发人员用来诊断要调试的问题。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogType.Operational">
      <summary>操作类型事件日志中的事件用于分析和诊断问题或发生的事件。 它们可用于根据问题或发生的事件触发工具或任务。 例如，在系统中添加或移除打印机时发生的事件就是一个操作事件。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogWatcher">
      <summary>允许您订阅传入事件。 每次将所需事件发布到事件日志中时，都会引发 <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> 事件，并将执行处理此事件的方法。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)">
      <summary>通过指定事件查询来初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> 类的新实例。</summary>
      <param name="eventQuery">指定对事件订阅的查询。 当记录与查询中表示的条件相匹配的事件时，会引发 <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> 事件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)">
      <summary>通过指定事件查询和用作查询的开始位置的书签初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> 类的新实例。</summary>
      <param name="eventQuery">指定对事件订阅的查询。 当记录与查询中表示的条件相匹配的事件时，会引发 <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> 事件。</param>
      <param name="bookmark">用作事件日志或事件流中的开始位置的书签（占位符）。 查询只返回在书签事件发生后记录的事件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)">
      <summary>通过指定事件查询、用作查询的开始位置的书签和确定是否读取事件日志中已存在的事件的布尔值来初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> 类的新实例。</summary>
      <param name="eventQuery">指定对事件订阅的查询。 当记录与查询中表示的条件相匹配的事件时，会引发 <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> 事件。</param>
      <param name="bookmark">用作事件日志或事件流中的开始位置的书签（占位符）。 查询只返回在书签事件发生后记录的事件。</param>
      <param name="readExistingEvents">确定是否读取事件日志中已存在的事件的布尔值。 如果此值为 true，则读取现有事件；如果此值为 false，则不读取现有事件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)">
      <summary>通过指定事件日志的名称或路径初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> 类的新实例。</summary>
      <param name="path">事件的事件日志监视器的路径或名称。 如果在此事件日志中记录任何事件，则会引发 <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> 事件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose">
      <summary>释放此对象使用的所有资源。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)">
      <summary>释放此对象使用的非托管资源，并可以选择释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled">
      <summary>确定此对象是否开始将事件传递给事件委托。</summary>
      <returns>如果此对象可以将事件传递给事件委托，则返回 true；如果此对象已停止传递，则返回 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten">
      <summary>允许设置一个委托（事件处理程序方法），每次发布与在此对象的事件查询中指定的条件相匹配的事件时都会调用该委托。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventMetadata">
      <summary>包含在事件提供程序中定义的事件的元数据（属性和设置）。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Description">
      <summary>使用描述语言的当前线程区域设置获取与事件关联的描述模板。</summary>
      <returns>返回一个包含与事件关联的描述模板的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Id">
      <summary>获取在事件提供程序中定义的事件的标识符。</summary>
      <returns>返回一个作为事件标识符的 long 值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Keywords">
      <summary>获取与在事件提供程序中定义的事件关联的关键字。</summary>
      <returns>返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" /> 对象的可枚举集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Level">
      <summary>获取与在事件提供程序中定义的事件关联的级别。 级别定义事件的严重性。</summary>
      <returns>返回一个 <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.LogLink">
      <summary>获取提供程序发布此事件时接收此事件的事件日志的链接。</summary>
      <returns>返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogLink" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Opcode">
      <summary>获取与事件提供程序定义的此事件关联的操作码。 此操作码定义一个数值，该数值标识应用程序在引发事件时正在执行的活动或活动中的点。</summary>
      <returns>返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Task">
      <summary>获取与事件关联的任务。 任务标识发布事件的应用程序或组件的一部分。</summary>
      <returns>返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Template">
      <summary>获取事件的模板字符串。 模板用于描述提供程序在发布事件时使用的数据。 模板可选择指定提供事件的结构的 XML。 XML 允许事件发布程序提供的要在呈现事件时插入的值。</summary>
      <returns>返回一个包含事件的模板的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Version">
      <summary>获取限定事件标识符的事件的版本。</summary>
      <returns>返回一个字节值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventOpcode">
      <summary>包含在事件提供程序中定义的事件操作码。 操作码定义一个数值，该数值标识应用程序在引发事件时正在执行的活动或活动中的点。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventOpcode.DisplayName">
      <summary>获取事件操作码的本地化名称。</summary>
      <returns>返回一个包含事件操作码的本地化名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventOpcode.Name">
      <summary>获取事件操作码的非本地化名称。</summary>
      <returns>返回一个包含事件操作码的非本地化名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventOpcode.Value">
      <summary>获取与事件操作码关联的数值。</summary>
      <returns>返回整数值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventProperty">
      <summary>包含发布事件时事件提供程序指定的事件属性的值。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventProperty.Value">
      <summary>获取发布事件时事件提供程序指定的事件属性的值。</summary>
      <returns>返回一个对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventRecord">
      <summary>定义从 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> 对象接收的事件的事件实例的属性。 事件属性提供有关事件的信息，例如记录事件的计算机的名称和事件的创建时间。 此类是一个抽象类。 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogRecord" /> 类实现此类。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ActivityId">
      <summary>获取进程中涉及事件的活动的全局唯一标识符 (GUID)。 这样使用方可以对相关活动进行分组。</summary>
      <returns>返回一个 GUID 值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Bookmark">
      <summary>获取与此事件对应的占位符（书签）。 它可在事件流中用作占位符。</summary>
      <returns>返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.Dispose">
      <summary>释放此对象使用的所有资源。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.Dispose(System.Boolean)">
      <summary>释放此对象使用的非托管资源，并可以选择释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.FormatDescription">
      <summary>获取当前区域设置中的事件消息。</summary>
      <returns>返回一个包含当前区域设置中的事件消息的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.FormatDescription(System.Collections.Generic.IEnumerable{System.Object})">
      <summary>获取事件消息，将消息中的变量替换为指定值。</summary>
      <returns>返回一个包含当前区域设置中的事件消息的字符串。</returns>
      <param name="values">用于替换事件消息中的变量的值。 变量用 %n 表示，其中 n 是一个数字。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Id">
      <summary>获取此事件的标识符。 具有此标识符值的所有事件均表示同一类型的事件。</summary>
      <returns>返回整数值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Keywords">
      <summary>获取事件的关键字掩码。 获取 <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.KeywordsDisplayNames" /> 属性的值以获得此掩码中使用的关键字的名称。</summary>
      <returns>返回一个长整型值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.KeywordsDisplayNames">
      <summary>获取在此事件的关键字掩码中使用的关键字的显示名称。</summary>
      <returns>返回字符串的可枚举集合，这些字符串包含在此事件的关键字掩码中使用的关键字的显示名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Level">
      <summary>获取事件的级别。 级别表示事件的严重性。 若要获得级别名称，请获取 <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.LevelDisplayName" /> 属性的值。</summary>
      <returns>返回一个字节值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.LevelDisplayName">
      <summary>获取此事件的级别的显示名称。</summary>
      <returns>返回一个包含此事件的级别的显示名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.LogName">
      <summary>获取记录此事件的事件日志的名称。</summary>
      <returns>返回一个包含此事件的事件日志名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.MachineName">
      <summary>获取在其上记录此事件的计算机的名称。</summary>
      <returns>返回一个包含在其上记录此事件的计算机的名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Opcode">
      <summary>获取事件的操作码。 此操作码定义一个数值，该数值标识应用程序在引发事件时正在执行的活动或活动中的点。 若要获得操作码名称，请获取 <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.OpcodeDisplayName" /> 属性的值。</summary>
      <returns>返回一个短整型值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.OpcodeDisplayName">
      <summary>获取此事件的操作码的显示名称。</summary>
      <returns>返回一个包含此事件的操作码的显示名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ProcessId">
      <summary>获取记录此事件的事件提供程序的进程标识符。</summary>
      <returns>返回整数值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Properties">
      <summary>获取事件的用户提供的属性。</summary>
      <returns>返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventProperty" /> 对象的列表。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ProviderId">
      <summary>获取发布此事件的事件提供程序的全局唯一标识符 (GUID)。</summary>
      <returns>返回一个 GUID 值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ProviderName">
      <summary>获取发布此事件的事件提供程序的名称。</summary>
      <returns>返回一个包含发布此事件的事件提供程序的名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Qualifiers">
      <summary>获取用于事件标识的限定符数。</summary>
      <returns>返回整数值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.RecordId">
      <summary>获取日志中事件的事件记录标识符。</summary>
      <returns>返回一个长整型值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.RelatedActivityId">
      <summary>获取进程中涉及事件的相关活动的全局唯一标识符 (GUID)。</summary>
      <returns>返回一个 GUID 值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Task">
      <summary>获取发布事件的应用程序或组件的一部分的任务标识符。 任务是一个保留了前 16 个值的 16 位值。 此类型允许使用 0x0000 和 0xffef 之间的任何值。 若要获得任务名称，请获取 <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.TaskDisplayName" /> 属性的值。</summary>
      <returns>返回整数值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.TaskDisplayName">
      <summary>获取事件的任务的显示名称。</summary>
      <returns>返回一个包含事件的任务的显示名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ThreadId">
      <summary>获取在其中运行事件提供程序的线程的线程标识符。</summary>
      <returns>返回整数值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.TimeCreated">
      <summary>获取事件的创建时间，格式为 <see cref="T:System.DateTime" />。</summary>
      <returns>返回一个 <see cref="T:System.DateTime" /> 值。 该值可以为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.ToXml">
      <summary>获取事件的 XML 表示形式。 所有的事件属性均以事件 XML 表示。 XML 符合 event schema（事件架构）。</summary>
      <returns>返回一个包含事件的 XML 表示形式的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.UserId">
      <summary>获取其上下文用于发布事件的用户的安全描述符。</summary>
      <returns>返回一个 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Version">
      <summary>获取事件的版本号。</summary>
      <returns>返回一个字节值。 此值可为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs">
      <summary>当引发 <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> 事件时，此对象的实例将传递给处理该事件的委托方法。 此对象包含发布到事件日志的事件或事件订阅失败时发生的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs.EventException">
      <summary>获取在事件订阅失败时发生的异常。 此异常包含订阅失败原因的说明。</summary>
      <returns>返回一个 <see cref="T:System.Exception" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs.EventRecord">
      <summary>获取发布到事件日志的事件记录。 此事件与事件订阅中指定的查询的条件相匹配。</summary>
      <returns>返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventTask">
      <summary>包含在事件提供程序中定义的事件任务。 任务标识发布事件的应用程序或组件的一部分。 任务是一个保留了前 16 个值的 16 位值。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventTask.DisplayName">
      <summary>获取事件任务的本地化名称。</summary>
      <returns>返回一个包含事件任务的本地化名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventTask.EventGuid">
      <summary>获取与任务关联的事件全局唯一标识符 (GUID)。</summary>
      <returns>返回一个 GUID 值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventTask.Name">
      <summary>获取事件任务的非本地化名称。</summary>
      <returns>返回一个包含事件任务的非本地化名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventTask.Value">
      <summary>获取与任务关联的数值。</summary>
      <returns>返回整数值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.PathType">
      <summary>指定字符串是包含事件日志的名称，还是包含事件日志文件的文件系统路径。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.PathType.FilePath">
      <summary>路径参数包含事件日志文件的文件系统路径。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.PathType.LogName">
      <summary>路径参数包含事件日志的名称。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.ProviderMetadata">
      <summary>包含有关事件提供程序的静态信息，例如提供程序的名称和 ID 以及在提供程序中定义的事件的集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.ProviderMetadata.#ctor(System.String)">
      <summary>通过指定要检索有关其的信息的提供程序的名称，初始化 <see cref="T:System.Diagnostics.Eventing.Reader.ProviderMetadata" /> 类的新实例。</summary>
      <param name="providerName">要检索有关其的信息的事件提供程序的名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.ProviderMetadata.#ctor(System.String,System.Diagnostics.Eventing.Reader.EventLogSession,System.Globalization.CultureInfo)">
      <summary>通过指定要检索有关其的信息的提供程序的名称、向其注册提供程序的事件日志服务以及要返回的信息所使用的语言，初始化 <see cref="T:System.Diagnostics.Eventing.Reader.ProviderMetadata" /> 类的新实例。</summary>
      <param name="providerName">要检索有关其的信息的事件提供程序的名称。</param>
      <param name="session">
        <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> 对象，它指定是从本地计算机上的提供程序，还是从远程计算机上的提供程序获取提供程序信息。</param>
      <param name="targetCultureInfo">指定返回的信息应使用的语言的区域性。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.DisplayName">
      <summary>获取事件提供程序的本地化名称。</summary>
      <returns>返回一个包含事件提供程序的本地化名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.ProviderMetadata.Dispose">
      <summary>释放此对象使用的所有资源。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.ProviderMetadata.Dispose(System.Boolean)">
      <summary>释放此对象使用的非托管资源，并可以选择释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Events">
      <summary>获取 <see cref="T:System.Diagnostics.Eventing.Reader.EventMetadata" /> 对象的可枚举集合，其中每个对象表示在提供程序中定义的事件。</summary>
      <returns>返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventMetadata" /> 对象的可枚举集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.HelpLink">
      <summary>获取用于构成此事件提供程序中事件的帮助请求的 URL 基。</summary>
      <returns>返回一个 <see cref="T:System.Uri" /> 值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Id">
      <summary>获取事件提供程序的全局唯一标识符 (GUID)。</summary>
      <returns>返回事件提供程序的 GUID 值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Keywords">
      <summary>获取 <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" /> 对象的可枚举集合，其中每个对象表示在事件提供程序中定义的事件关键字。</summary>
      <returns>返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" /> 对象的可枚举集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Levels">
      <summary>获取 <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" /> 对象的可枚举集合，其中每个对象表示在事件提供程序中定义的级别。</summary>
      <returns>返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" /> 对象的可枚举集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.LogLinks">
      <summary>获取 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogLink" /> 对象的可枚举集合，其中每个对象表示事件提供程序使用的事件日志的链接。</summary>
      <returns>返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogLink" /> 对象的可枚举集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.MessageFilePath">
      <summary>获取包含消息表资源的文件的路径，该消息表资源具有与提供程序元数据关联的字符串。</summary>
      <returns>返回一个包含提供程序消息文件的路径的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Name">
      <summary>获取事件提供程序的唯一名称。</summary>
      <returns>返回一个包含事件提供程序的唯一名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Opcodes">
      <summary>获取 <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" /> 对象的可枚举集合，其中每个对象表示在事件提供程序中定义的操作码。</summary>
      <returns>返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" /> 对象的可枚举集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.ParameterFilePath">
      <summary>获取包含消息表资源的文件的路径，该消息表资源具有用于事件描述中的参数替换的字符串。</summary>
      <returns>返回一个包含文件路径的字符串，该文件包含消息表资源，该消息表资源具有用于事件描述中的参数替换的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.ResourceFilePath">
      <summary>获取包含与提供程序关联的元数据的文件的路径。</summary>
      <returns>返回一个包含文件路径的字符串，该文件包含与提供程序关联的元数据。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Tasks">
      <summary>获取 <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" /> 对象的可枚举集合，其中每个对象表示在事件提供程序中定义的任务。</summary>
      <returns>返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" /> 对象的可枚举集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.SessionAuthentication">
      <summary>定义在对服务器进行远程过程调用 (RPC) 登录期间使用的身份验证类型的值。 在创建指定与远程计算机的连接的 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> 对象时进行此登录。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.SessionAuthentication.Default">
      <summary>在 RPC 登录期间使用默认的身份验证方法。 默认的身份验证等效于协商。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.SessionAuthentication.Kerberos">
      <summary>在 RPC 登录期间使用 Kerberos 身份验证。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.SessionAuthentication.Negotiate">
      <summary>在 RPC 登录期间使用协商身份验证方法。 这样，客户端应用程序可以根据情况选择最佳的身份验证方法（NTLM 或 Kerberos）。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.SessionAuthentication.Ntlm">
      <summary>在 RPC 登录期间使用 Windows NT LAN Manager (NTLM) 身份验证。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.StandardEventKeywords">
      <summary>定义事件提供程序将其附加到事件的标准关键字。 有关关键字的更多信息，请参见 <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" />。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.AuditFailure">
      <summary>附加到所有失败的安全审核事件。 此关键字应仅用于安全日志中的事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.AuditSuccess">
      <summary>附加到所有成功的安全审核事件。 此关键字应仅用于安全日志中的事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.CorrelationHint">
      <summary>附加到传输事件，其相关的活动 ID（相关 ID）是一个计算值，不能保证其唯一性（不是真正的 GUID）。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.CorrelationHint2">
      <summary>附加到传输事件，其相关的活动 ID（相关 ID）是一个计算值，不能保证其唯一性（不是真正的 GUID）。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.EventLogClassic">
      <summary>附加到使用 RaiseEvent 函数引发的事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.None">
      <summary>此值指示在发布事件时未对关键字执行任何筛选。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.ResponseTime">
      <summary>已附加到所有响应时间事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.Sqm">
      <summary>附加到所有服务质量机制 (SQM) 事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.WdiContext">
      <summary>附加到所有 Windows 诊断基础结构 (WDI) 上下文事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.WdiDiagnostic">
      <summary>附加到所有 Windows 诊断基础结构 (WDI) 诊断事件。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.StandardEventLevel">
      <summary>定义事件日志服务中使用的标准事件级别。 级别定义事件的严重性。 自定义事件级别可以采用这些标准级别以外的级别来定义。 有关级别的更多信息，请参见 <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" />。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Critical">
      <summary>此级别与导致严重故障的错误相对应。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Error">
      <summary>此级别与表示某个问题的一般错误相对应。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Informational">
      <summary>此级别与不是错误的信息性事件或消息相对应。 这些事件可帮助跟踪应用程序的进度或状态。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.LogAlways">
      <summary>此值指示在事件发布期间未完成级别的筛选。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Verbose">
      <summary>此级别与冗长的事件或消息相对应。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Warning">
      <summary>此级别与警告事件相对应。 例如，因磁盘容量快满而发布的事件为警告事件。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.StandardEventOpcode">
      <summary>定义事件提供程序将其附加到事件的标准操作码。 有关操作码的更多信息，请参见 <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" />。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.DataCollectionStart">
      <summary>具有此操作码的事件是一个跟踪集合启动事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.DataCollectionStop">
      <summary>具有此操作码的事件是一个跟踪集合停止事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Extension">
      <summary>具有此操作码的事件是一个扩展事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Info">
      <summary>具有此操作码的事件是一个信息事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Receive">
      <summary>在应用程序中的一个活动收到数据时发布具有此操作码的事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Reply">
      <summary>在应用程序中的活动答复事件后发布具有此操作码的事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Resume">
      <summary>在应用程序中的活动从挂起状态恢复后发布具有此操作码的事件。 此事件应在具有挂起操作码的事件之后发生。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Send">
      <summary>在应用程序中的一个活动将数据或系统资源传输到另一个活动时发布具有此操作码的事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Start">
      <summary>在应用程序启动新事务或活动时发布具有此操作码的事件。 当多个具有启动操作码的事件相继发生而没有具有停止操作码的事件时，此事件可以嵌入到另一个事务或活动中。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Stop">
      <summary>在应用程序中的活动或事务结束时发布具有此操作码的事件。 此事件与具有启动操作码的最后一个未成对的事件对应。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Suspend">
      <summary>在应用程序中的活动挂起时发布具有此操作码的事件。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.StandardEventTask">
      <summary>定义事件提供程序将其附加到事件的标准任务。 有关任务的更多信息，请参见 <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" />。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventTask.None">
      <summary>没有用于标识发布事件的应用程序的一部分的任务。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterData">
      <summary>包含计数器的原始数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterData.Decrement">
      <summary>将计数器值减 1。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterData.Increment">
      <summary>将计数器值加 1。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterData.IncrementBy(System.Int64)">
      <summary>将计数器值增加指定数量。</summary>
      <param name="value">要为计数器值增加的数量。 增量值可以是正数也可以是负数。</param>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterData.RawValue">
      <summary>设置或设置原始计数器数据。</summary>
      <returns>原始计数器数据。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterData.Value">
      <summary>获取或设置计数器数据。</summary>
      <returns>计数器数据。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSet">
      <summary>定义一组逻辑计数器。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.#ctor(System.Guid,System.Guid,System.Diagnostics.PerformanceData.CounterSetInstanceType)">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceData.CounterSet" /> 类的新实例。</summary>
      <param name="providerGuid">唯一标识计数器数据的提供程序的 GUID。 请使用清单中指定的 GUID。</param>
      <param name="counterSetGuid">唯一标识提供程序的计数器集的 GUID。 请使用清单中指定的 GUID。</param>
      <param name="instanceType">标识计数器集的类型，例如，计数器集是单实例还是多实例计数器集。</param>
      <exception cref="T:System.InsufficientMemoryException">没有足够的可用内存来完成该操作。</exception>
      <exception cref="T:System.PlatformNotSupportedException">在 Windows Vista 之前的操作系统中不受支持。</exception>
      <exception cref="T:System.ArgumentException">其中某个参数为 NULL 或无效。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">基础 Win32 函数调用失败。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.AddCounter(System.Int32,System.Diagnostics.PerformanceData.CounterType)">
      <summary>使用指定的计数器标识符和类型向计数器集中添加计数器。</summary>
      <param name="counterId">标识计数器。 使用在清单中所用的值来定义计数器。</param>
      <param name="counterType">标识计数器类型。 计数器类型用来确定如何计算和显示计数器数据以及如何对其求平均值。</param>
      <exception cref="T:System.ArgumentException">计数器标识符已经存在于计数器集中、计数器标识符为负数，或者计数器类型为 NULL 或无效。</exception>
      <exception cref="T:System.InvalidOperationException">在为计数器集创建实例之后，将无法向其中添加计数器。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.AddCounter(System.Int32,System.Diagnostics.PerformanceData.CounterType,System.String)">
      <summary>使用指定的计数器标识符和类型以及计数器的显示名称向计数器集中添加计数器。</summary>
      <param name="counterId">标识计数器。 使用在清单中所用的值来定义计数器。</param>
      <param name="counterType">标识计数器类型。 计数器类型用来确定如何计算和显示计数器数据以及如何对其求平均值。</param>
      <param name="counterName">计数器的名称。 可以使用此名称来为该计数器集实例中的计数器编制索引。（参见 <see cref="P:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item(System.String)" />。）</param>
      <exception cref="T:System.ArgumentException">计数器标识符已经存在于计数器集中、计数器标识符为负数，或者计数器类型为 NULL 或无效。</exception>
      <exception cref="T:System.InvalidOperationException">在为计数器集创建实例之后，将无法向其中添加计数器。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.CreateCounterSetInstance(System.String)">
      <summary>创建计数器集的一个实例。</summary>
      <returns>将包含计数器数据的计数器集的实例。</returns>
      <param name="instanceName">实例的名称。 该名称必须是唯一的。</param>
      <exception cref="T:System.ArgumentException">实例名称为 NULL。</exception>
      <exception cref="T:System.InvalidOperationException">在为计数器集创建实例之前，必须先向其中添加计数器。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.Dispose">
      <summary>释放此对象使用的所有非托管资源。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.Dispose(System.Boolean)">
      <summary>释放此对象使用的所有非托管资源，并可选择释放托管资源。</summary>
      <param name="disposing">如果这是从 Dispose 方法调用的，则为 True；如果是从终结器调用的，则为 False。</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.Finalize">
      <summary>在垃圾回收功能将对象回收之前，释放资源。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSetInstance">
      <summary>为 <see cref="T:System.Diagnostics.PerformanceData.CounterSet" /> 类中定义的逻辑计数器创建实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterSetInstance.Counters">
      <summary>检索该计数器集实例的计数器数据集合。</summary>
      <returns>包含在该计数器集实例中的计数器数据的集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSetInstance.Dispose">
      <summary>释放此对象使用的所有非托管资源。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet">
      <summary>包含计数器值的集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Dispose">
      <summary>释放此对象使用的所有非托管资源。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item(System.Int32)">
      <summary>使用指定的计数器标识符来访问集合中的计数器值。</summary>
      <returns>计数器数据。</returns>
      <param name="counterId">计数器的标识符。 这是在向计数器集中添加计数器时所使用的标识符。</param>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item(System.String)">
      <summary>使用指定的计数器名称来访问集合中的计数器值。</summary>
      <returns>计数器数据。</returns>
      <param name="counterName">计数器的名称。 这是在向计数器集中添加计数器时所使用的名称。</param>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSetInstanceType">
      <summary>指定计数器集是允许多实例（如进程和物理磁盘），还是允许单实例（如内存）。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.GlobalAggregate">
      <summary>该计数器集中包含多个单实例计数器，这些计数器的聚合值是从一个或多个源获取的。 例如，这种类型的计数器集内的计数器可以从计算机上的每个硬盘（共三个）获取读取次数并对它们的值求和。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.GlobalAggregateWithHistory">
      <summary>此类型与 <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.GlobalAggregate" /> 相似，只是这种类型的计数器集存储使用者应用程序生存期的所有计数器值（计数器值将在超出计数器生存期之后进行缓存）。 例如，如果全局聚合示例中的某个硬盘变得不可用，则该磁盘读取的总字节数仍将可用，并用来计算聚合值。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.InstanceAggregate">
      <summary>此类型与 <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.MultipleAggregate" /> 相似，只是它将聚合来自同名实例的计数器数据，而不会将所有实例数据聚合到一个经过聚合的 (_Total) 实例。 例如，如果多个提供程序进程中都包含了名为 IExplore 的实例，则 <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.Multiple" /> 和 <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.MultipleAggregate" /> CounterSet 将显示多个 IExplore 实例（IExplore、IExplore#1、IExplore#2 等）；但是，<see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.InstanceAggregate" /> 实例类型将只发布一个 IExplore 实例，该实例的聚合计数器数据来自所有名为 IExplore 的实例。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.Multiple">
      <summary>该计数器集中包含多个多实例计数器，例如，测量进程的平均磁盘 I/O 的计数器。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.MultipleAggregate">
      <summary>该计数器集中包含多个多实例计数器，这些计数器的聚合值是从该计数器的所有实例获取的。 例如，这种类型的计数器集中的计数器可以获取多线程应用程序中所有线程的总的线程执行时间并对它们的值求和。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.Single">
      <summary>该计数器集中包含多个单实例计数器，例如，测量物理内存的计数器。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterType">
      <summary>定义可能的计数器类型。 每个计数器都被分配一个计数器类型。 计数器类型用来确定如何计算和显示计数器数据以及如何对其求平均值。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.AverageBase">
      <summary>该计数器在为 <see cref="F:System.Diagnostics.PerformanceData.CounterType.AverageCount64" /> 和 <see cref="F:System.Diagnostics.PerformanceData.CounterType.AverageTimer32" /> 计数器类型计算时间或统计平均值时用作基数（分母）。 该计数器类型仅收集最后观测到的值（请参见部署工具包中的 PERF_AVERAGE_BASE 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.AverageCount64">
      <summary>该计数器类型显示一次操作中平均处理的项数。 这种类型的计数器显示已处理的项（例如已发送的字节数）与已完成的操作数的比率。 计算该比率的方法是将上一个时间间隔内处理的项数与上一个时间间隔内完成的操作数进行比较（请参见部署工具包中的 PERF_AVERAGE_BULK 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.AverageTimer32">
      <summary>这种类型的计数器测量完成某个过程或操作平均所花费的时间。 这种类型的计数器显示采样时间间隔的总运行时间与该时间内完成的进程或操作数的比率。 此计数器类型用系统时钟的滴答来测量时间（请参见部署工具包中的 PERF_AVERAGE_TIMER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.Delta32">
      <summary>这种类型的计数器显示在最近的两个取样时间间隔内已测量特性发生的更改。（请参见部署工具包中的 PERF_COUNTER_DELTA 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.Delta64">
      <summary>这种类型的计数器显示在最近的两个取样时间间隔内已测量特性发生的更改。 它与 <see cref="F:System.Diagnostics.PerformanceData.CounterType.Delta32" /> 计数器类型基本相同，只是它使用更大的字段来容纳较大的值（请参见部署工具包中的 PERF_COUNTER_LARGE_DELTA 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.ElapsedTime">
      <summary>这种类型的计数器显示从启动组件或进程到计算该值之间经历的总时间（请参见部署工具包中的 PERF_ELAPSED_TIME 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.LargeQueueLength">
      <summary>这种类型的计数器监视一段时间内资源队列的平均长度。 这种类型的计数器显示在最近两个采用间隔内观测到的队列长度分别除以间隔时间后的差值。 此计数器类型与 <see cref="F:System.Diagnostics.PerformanceData.CounterType.QueueLength" /> 计数器类型基本相同，只是它使用更大的字段来容纳较大的值（请参见部署工具包中的 PERF_COUNTER_LARGE_QUEUELEN_TYPE 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerBase">
      <summary>指示已取样的项数。 它在计算中用作分母，以在获取多个相似项的计时时间时获取已取样各项的平均值。 此类型支持下列计数器类型：<see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive" />、<see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive" />、<see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive100Ns" /> 和 <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive100Ns" />。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive">
      <summary>此计数器的类型是多项计时器。 多项计时器从组件（如处理器或磁盘）的多个实例中收集数据。 这种类型的计数器以取样时间间隔总时间百分比的形式显示一个或多个组件处于活动状态的时间。 由于分子记录的是同时操作的组件的活动时间，因此最终的百分比可以超过 100%。 此计数器类型与 <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive100Ns" /> 的不同之处在于：它以系统性能计时器的滴答为单位（而不是以 100 毫微秒为单位）来测量时间（请参见部署工具包中的 PERF_COUNTER_MULTI_TIMER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive100Ns">
      <summary>这种类型的计数器以取样时间间隔总时间百分比的形式显示一个或多个组件处于活动状态的时间。 它以 100 纳秒为单位来测量时间。 此计数器的类型是多项计时器。 多项计时器旨在监视组件（如处理器或磁盘）的多个实例。（请参见部署工具包中的 PERF_100NSEC_MULTI_TIMER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive">
      <summary>这种类型的计数器以取样时间间隔总时间百分比的形式显示一个或多个组件处于活动状态的时间。 此计数器类型为一个反向多项计时器。 多项计时器监视组件（如处理器或磁盘）多个实例。 反向计数器测量组件处于非活动状态的时间并从该测量值中推导出处于活动状态的时间。 此计数器与 <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive100Ns" /> 的不同之处在于：它是以系统性能计时器的滴答为单位（而不是以 100 毫微秒为单位）来测量时间（请参见部署工具包中的 PERF_COUNTER_MULTI_TIMER_INV 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive100Ns">
      <summary>这种类型的计数器以取样时间间隔总时间百分比的形式显示一个或多个组件处于活动状态的时间。 这种类型的计数器以 100 纳秒为单位来测量时间。 此计数器类型为一个反向多项计时器。 多项计时器旨在监视组件（如处理器或磁盘）的多个实例。 反向计数器测量组件处于非活动状态的时间，并根据非活动时间的测量值推导出处于活动状态的时间（请参见部署工具包中的 PERF_100NSEC_MULTI_TIMER_INV 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.ObjectSpecificTimer">
      <summary>这种类型的 64 位计数器是一种以对象特定的单位来显示内容的计时器（请参见部署工具包中的 PERF_OBJ_TIME_TIMER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageActive">
      <summary>这种类型的计数器以总取样时间的百分比形式显示组件处于活动状态的平均时间（请参见部署工具包中的 PERF_COUNTER_TIMER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageActive100Ns">
      <summary>这种类型的计数器以取样时间间隔的总运行时间的百分比形式显示组件处于活动状态的时间。 它以 100 纳秒为单位来测量时间。 这种类型的计数器旨在一次测量一个组件的活动（请参见部署工具包中的 PERF_100NSEC_TIMER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageNotActive">
      <summary>这是反向计数器类型。 反向计数器测量组件处于非活动状态的时间并从该测量值中推导出处于活动状态的时间。 这种类型的计数器显示在取样时间间隔内观测到的活动时间的平均百分比。 计算这些计数器值的方法是监视服务处于非活动状态的时间百分比，然后从 100% 中减去该值。 此计数器类型与 <see cref="F:System.Diagnostics.PerformanceData.CounterType.PercentageNotActive100Ns" /> 计数器类型基本相同，只是它以系统性能计时器的计时周期（而不是以 100 纳秒）为单位来测量时间（请参见部署工具包中的 PERF_COUNTER_TIMER_INV 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageNotActive100Ns">
      <summary>这种类型的计数器显示取样时间间隔内观测到的活动时间的平均百分比。 这是反向计数器。 计算反向计数器值的方法是监视服务处于非活动状态的时间的百分比，然后从 100% 中减去该值（请参见部署工具包中的 PERF_100NSEC_TIMER_INV 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PrecisionObjectSpecificTimer">
      <summary>这种类型的计数器显示一个由以下两个计数器值组成的值：所监视事件的运行时间计数以及在对象头的 PerfFreq 字段中指定的频率。 这种类型的计数器与其他计数器计时器的不同之处在于伴随计数器值的时钟计时周期值，从而消除了因函数调用带来的延迟所造成的任何可能的差异。 当标准系统计时器的精度不足以提供精确读数时，需要使用精确计数器类型（请参见部署工具包中的 PERF_PRECISION_OBJECT_TIMER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PrecisionSystemTimer">
      <summary>这种类型的计数器显示一个由以下两个计数器值组成的值：所监视事件的运行时间计数以及系统性能计时器的频率。 这种类型的计数器与其他计数器计时器的不同之处在于伴随计数器值的时钟计时周期值，从而消除了因函数调用带来的延迟所造成的任何可能的差异。 当标准系统计时器的精度不足以提供精确读数时，需要使用精确计数器类型（请参见部署工具包中的 PERF_PRECISION_TIMER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PrecisionTimer100Ns">
      <summary>这种类型的计数器显示一个由以下两个计数器值组成的值：所监视事件的运行时间计数以及采用相同单位的专用计时器中的“时钟”时间。 它以 100 纳秒为单位来测量时间。 这种类型的计数器与其他计数器计时器的不同之处在于伴随计数器值的时钟计时周期值，从而消除了因函数调用带来的延迟所造成的任何可能的差异。 当标准系统计时器的精度不足以提供精确读数时，需要使用精确计数器类型（请参见部署工具包中的 PERF_PRECISION_100NS_TIMER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.QueueLength">
      <summary>这种类型的计数器旨在监视一段时间内资源队列的平均长度。 它显示在最近两个采用时间间隔内观测到的队列长度分别除以间隔时间后的差值。（请参见部署工具包中的 PERF_COUNTER_QUEUELEN_TYPE 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.QueueLength100Ns">
      <summary>这种类型的计数器以 100 纳秒为时间基准来测量队列长度的空间-时间积（请参见部署工具包中的 PERF_COUNTER_100NS_QUEUELEN_TYPE 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.QueueLengthObjectTime">
      <summary>这种类型的计数器使用对象特定的时间基准来测量队列长度的空间-时间积（请参见部署工具包中的 PERF_COUNTER_OBJ_QUEUELEN_TYPE 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RateOfCountPerSecond32">
      <summary>这种类型的计数器显示在取样时间间隔的每一秒内完成的操作的平均数目。 这种类型的计数器用系统时钟的滴答 (Tick) 来测量时间（请参见部署工具包中的 PERF_COUNTER_COUNTER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RateOfCountPerSecond64">
      <summary>这种类型的计数器显示在取样时间间隔的每一秒内完成的操作的平均数目。 这种类型的计数器用系统时钟的滴答 (Tick) 来测量时间 此计数器类型与 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RateOfCountPerSecond32" /> 类型相同，只是它使用更大的字段来容纳较大的值（请参见部署工具包中的 PERF_COUNTER_BULK_COUNT 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawBase32">
      <summary>该计数器类型仅收集最后观测到的值 该值用作计数器的表示常规算术分数的分母。 此类型支持 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction32" /> 计数器类型（请参见部署工具包中的 PERF_RAW_BASE 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawBase64">
      <summary>这种类型的计数器收集最后观测到的值。 它与 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawBase32" /> 计数器类型基本相同，只是它使用更大的字段来容纳较大的值。 此类型支持 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction64" /> 计数器类型（请参见部署工具包中的 PERF_LARGE_RAW_BASE 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawData32">
      <summary>这种类型的计数器仅显示最后观测到的值， 而不显示平均值（请参见部署工具包中的 PERF_COUNTER_RAWCOUNT 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawData64">
      <summary>这种类型的计数器仅显示最后观测到的值，而不显示平均值。 它与 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawData32" /> 计数器类型基本相同，只是它使用更大的字段来容纳较大的值（请参见部署工具包中的 PERF_COUNTER_LARGE_RAWCOUNT 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawDataHex32">
      <summary>这种类型的计数器以十六进制格式显示最近观测到的值， 而不显示平均值（请参见部署工具包中的 PERF_COUNTER_RAWCOUNT_HEX 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawDataHex64">
      <summary>这种类型的计数器以十六进制格式显示最后观测到的值。 它与 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawDataHex32" /> 计数器类型基本相同，只是它使用更大的字段来容纳较大的值（请参见部署工具包中的 PERF_COUNTER_LARGE_RAWCOUNT_HEX 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawFraction32">
      <summary>这种类型的计数器以百分比形式显示子集与其所属集合的比率。 例如，它将磁盘上使用的字节数与该磁盘上的总字节数进行比较。 这种类型的计数器只显示当前百分比，而不显示一段时间的平均值。（请参见部署工具包中的 PERF_RAW_FRACTION 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawFraction64">
      <summary>这种类型的计数器以百分比形式显示子集与其所属集合的比率。 例如，它将磁盘上使用的字节数与该磁盘上的总字节数进行比较。 这种类型的计数器只显示当前百分比，而不显示一段时间的平均值。 它与 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction32" /> 计数器类型基本相同，只是它使用更大的字段来容纳较大的值</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.SampleBase">
      <summary>此计数器存储获取的取样中断次数，并用作取样分数中的分母。 此类型支持 <see cref="F:System.Diagnostics.PerformanceData.CounterType.SampleFraction" /> 计数器类型。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.SampleCounter">
      <summary>这种类型的计数器显示一秒内完成的操作的平均数。 它以系统性能计时器的滴答为单位来测量时间。 变量 F 表示一秒内出现的计时周期数。 将 F 的值因式分解为方程式，以便可以以秒为单位显示结果。（请参见部署工具包中的 PERF_SAMPLE_COUNTER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.SampleFraction">
      <summary>这种类型的计数器显示最近两个取样时间间隔内的命中操作与所有操作的平均比率（请参见部署工具包中的 PERF_SAMPLE_FRACTION 计数器类型）。</summary>
    </member>
    <member name="T:System.Dynamic.BinaryOperationBinder">
      <summary>表示调用站点上的二元动态运算，它提供绑定语义和有关操作的细节。</summary>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>初始化 <see cref="T:System.Dynamic.BinaryOperationBinder" /> 类的新实例。</summary>
      <param name="operation">二元运算类型。</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态二元运算的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态操作的目标。</param>
      <param name="args">动态操作的参数数组。</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>如果无法绑定目标动态对象，则执行二元动态运算的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态二元运算的目标。</param>
      <param name="arg">动态二元运算的右操作数。</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>在派生类中重写时，如果无法绑定目标动态对象，则执行二元动态运算的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态二元运算的目标。</param>
      <param name="arg">动态二元运算的右操作数。</param>
      <param name="errorSuggestion">绑定失败时的绑定结果，或为 null。</param>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.Operation">
      <summary>二元运算类型。</summary>
      <returns>表示二元运算的类型的 <see cref="T:System.Linq.Expressions.ExpressionType" /> 对象。</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>操作的结果类型。</returns>
    </member>
    <member name="T:System.Dynamic.BindingRestrictions">
      <summary>表示应用于 <see cref="T:System.Dynamic.DynamicMetaObject" /> 的一组绑定限制，只有满足这些限制的动态绑定才是有效的。</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})">
      <summary>将 <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例列表中的绑定限制合并到一个限制集中。</summary>
      <returns>新的绑定限制集。</returns>
      <param name="contributingObjects">要合并其中的限制的 <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例列表。</param>
    </member>
    <member name="F:System.Dynamic.BindingRestrictions.Empty">
      <summary>表示一个空的绑定限制集。 此字段为只读。</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)">
      <summary>创建用来检查表达式中的任意不可变属性的绑定限制。</summary>
      <returns>新绑定限制。</returns>
      <param name="expression">表示限制的表达式。</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)">
      <summary>创建用来检查表达式中的对象实例标识的绑定限制。</summary>
      <returns>新绑定限制。</returns>
      <param name="expression">要测试的表达式。</param>
      <param name="instance">要测试的恰当对象实例。</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)">
      <summary>创建用来检查表达式中的运行时类型标识的绑定限制。</summary>
      <returns>新绑定限制。</returns>
      <param name="expression">要测试的表达式。</param>
      <param name="type">要测试的恰当类型。</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)">
      <summary>将绑定限制集与当前绑定限制合并。</summary>
      <returns>新的绑定限制集。</returns>
      <param name="restrictions">用于与当前绑定限制合并的限制集。</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.ToExpression">
      <summary>创建表示绑定限制的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <returns>表示限制的表达式树。</returns>
    </member>
    <member name="T:System.Dynamic.CallInfo">
      <summary>描述动态绑定进程中的参数。</summary>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary>创建一个新的 CallInfo，它表示动态绑定进程中的参数。</summary>
      <param name="argCount">参数的数量。</param>
      <param name="argNames">参数名称。</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])">
      <summary>创建一个新的 PositionalArgumentInfo。</summary>
      <param name="argCount">参数的数量。</param>
      <param name="argNames">参数名称。</param>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentCount">
      <summary>参数的数量。</summary>
      <returns>参数的数量。</returns>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentNames">
      <summary>参数名称。</summary>
      <returns>参数名称的只读集合。</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.Equals(System.Object)">
      <summary>确定是否将指定的 CallInfo 实例视为等于当前实例。</summary>
      <returns>如果指定的实例等于当前实例，则为 true；否则为 false。</returns>
      <param name="obj">要与当前实例进行比较的 <see cref="T:System.Dynamic.CallInfo" /> 实例。</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.GetHashCode">
      <summary>用作当前 <see cref="T:System.Dynamic.CallInfo" /> 的哈希函数。</summary>
      <returns>当前 <see cref="T:System.Dynamic.CallInfo" /> 的哈希代码。</returns>
    </member>
    <member name="T:System.Dynamic.ConvertBinder">
      <summary>表示调用站点上的转换动态操作，它提供绑定语义和有关操作的细节。</summary>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.#ctor(System.Type,System.Boolean)">
      <summary>初始化 <see cref="T:System.Dynamic.ConvertBinder" /> 的新实例。</summary>
      <param name="type">要转换到的类型。</param>
      <param name="explicit">如果应将转换视为显式转换，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态转换操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态转换操作的目标。</param>
      <param name="args">动态转换操作的参数数组。</param>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Explicit">
      <summary>获取一个值，该值指示是否应将转换视为显式转换。</summary>
      <returns>如果存在显式转换，则为 True；否则为 false。</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject)">
      <summary>如果无法绑定目标动态对象，则执行动态转换操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态转换操作的目标。</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>在派生类中重写时，如果无法绑定目标动态对象，则执行动态转换操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态转换操作的目标。</param>
      <param name="errorSuggestion">绑定失败时要使用的绑定结果，或为 null。</param>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Type">
      <summary>要转换到的类型。</summary>
      <returns>表示要转换到的类型的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="T:System.Dynamic.CreateInstanceBinder">
      <summary>表示调用站点上的调用创建操作，它提供绑定语义和有关操作的细节。</summary>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.CreateInstanceBinder" /> 的新实例。</summary>
      <param name="callInfo">调用站点上的参数的签名。</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态创建操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态创建操作的目标。</param>
      <param name="args">动态创建操作的参数数组。</param>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.CallInfo">
      <summary>获取调用站点上的参数的签名。</summary>
      <returns>调用站点上的参数的签名。</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>如果无法绑定目标动态对象，则执行动态创建操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态创建操作的目标。</param>
      <param name="args">动态创建操作的参数。</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>在派生类中重写时，如果无法绑定目标动态对象，则执行动态创建操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态创建操作的目标。</param>
      <param name="args">动态创建操作的参数。</param>
      <param name="errorSuggestion">绑定失败时要使用的绑定结果，或为 null。</param>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="T:System.Dynamic.DeleteIndexBinder">
      <summary>表示调用站点上的动态删除索引操作，它提供绑定语义和有关操作的细节。</summary>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.DeleteIndexBinder" /> 的新实例。</summary>
      <param name="callInfo">调用站点上的参数的签名。</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态删除索引操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态删除索引操作的目标。</param>
      <param name="args">动态删除索引操作的参数数组。</param>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.CallInfo">
      <summary>获取调用站点上的参数的签名。</summary>
      <returns>调用站点上的参数的签名。</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>如果无法绑定目标动态对象，则执行动态删除索引操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态删除索引操作的目标。</param>
      <param name="indexes">动态删除索引操作的参数。</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>在派生类中重写时，如果无法绑定目标动态对象，则执行动态删除索引操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态删除索引操作的目标。</param>
      <param name="indexes">动态删除索引操作的参数。</param>
      <param name="errorSuggestion">绑定失败时要使用的绑定结果，或为 null。</param>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="T:System.Dynamic.DeleteMemberBinder">
      <summary>表示调用站点上的动态删除成员操作，它提供绑定语义和有关操作的细节。</summary>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.Dynamic.DeleteIndexBinder" /> 的新实例。</summary>
      <param name="name">要删除的成员的名称。</param>
      <param name="ignoreCase">如果在匹配名称时应忽略大小写，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态删除成员操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态删除成员操作的目标。</param>
      <param name="args">动态删除成员操作的参数数组。</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject)">
      <summary>如果无法绑定目标动态对象，则执行动态删除成员操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态删除成员操作的目标。</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>在派生类中重写时，如果无法绑定目标动态对象，则执行动态删除成员操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态删除成员操作的目标。</param>
      <param name="errorSuggestion">绑定失败时要使用的绑定结果，或为 null。</param>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.IgnoreCase">
      <summary>获取指示字符串比较是否应忽略成员名称大小写的值。</summary>
      <returns>如果字符串比较应忽略大小写，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.Name">
      <summary>获取要删除的成员的名称。</summary>
      <returns>要删除的成员的名称。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObject">
      <summary>表示动态绑定和参与动态绑定的对象的绑定逻辑。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)">
      <summary>初始化 <see cref="T:System.Dynamic.DynamicMetaObject" /> 类的新实例。</summary>
      <param name="expression">在动态绑定过程中表示此 <see cref="T:System.Dynamic.DynamicMetaObject" /> 的表达式。</param>
      <param name="restrictions">用于确定绑定是否有效的绑定限制集。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)">
      <summary>初始化 <see cref="T:System.Dynamic.DynamicMetaObject" /> 类的新实例。</summary>
      <param name="expression">在动态绑定过程中表示此 <see cref="T:System.Dynamic.DynamicMetaObject" /> 的表达式。</param>
      <param name="restrictions">用于确定绑定是否有效的绑定限制集。</param>
      <param name="value">由 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示的运行时值。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
      <summary>执行动态二元运算的绑定。</summary>
      <returns>表示绑定结果的新 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">一个 <see cref="T:System.Dynamic.BinaryOperationBinder" /> 实例，表示动态操作的详细信息。</param>
      <param name="arg">一个 <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例，表示二元运算的右侧。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
      <summary>执行动态转换操作的绑定。</summary>
      <returns>表示绑定结果的新 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">一个 <see cref="T:System.Dynamic.ConvertBinder" /> 实例，表示动态操作的详细信息。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态创建实例操作的绑定。</summary>
      <returns>表示绑定结果的新 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">一个 <see cref="T:System.Dynamic.CreateInstanceBinder" /> 实例，表示动态操作的详细信息。</param>
      <param name="args">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例（即，创建实例操作的参数）的数组。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态删除索引操作的绑定。</summary>
      <returns>表示绑定结果的新 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">一个 <see cref="T:System.Dynamic.DeleteIndexBinder" /> 实例，表示动态操作的详细信息。</param>
      <param name="indexes">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例（即，删除索引操作的索引）的数组。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>执行动态删除成员操作的绑定。</summary>
      <returns>表示绑定结果的新 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">一个 <see cref="T:System.Dynamic.DeleteMemberBinder" /> 实例，表示动态操作的详细信息。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态获取索引操作的绑定。</summary>
      <returns>表示绑定结果的新 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">一个 <see cref="T:System.Dynamic.GetIndexBinder" /> 实例，表示动态操作的详细信息。</param>
      <param name="indexes">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例（即，获取索引操作的索引）的数组。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
      <summary>执行动态获取成员操作的绑定。</summary>
      <returns>表示绑定结果的新 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">一个 <see cref="T:System.Dynamic.GetMemberBinder" /> 实例，表示动态操作的详细信息。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态调用操作的绑定。</summary>
      <returns>表示绑定结果的新 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">一个 <see cref="T:System.Dynamic.InvokeBinder" /> 实例，表示动态操作的详细信息。</param>
      <param name="args">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例（即，调用操作的参数）的数组。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态调用成员操作的绑定。</summary>
      <returns>表示绑定结果的新 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">一个 <see cref="T:System.Dynamic.InvokeMemberBinder" /> 实例，表示动态操作的详细信息。</param>
      <param name="args">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例（即调用成员操作的参数）的数组。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>执行动态设置索引操作的绑定。</summary>
      <returns>表示绑定结果的新 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">一个 <see cref="T:System.Dynamic.SetIndexBinder" /> 实例，表示动态操作的详细信息。</param>
      <param name="indexes">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例（即，设置索引操作的索引）的数组。</param>
      <param name="value">表示设置索引操作的值的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
      <summary>执行动态设置成员操作的绑定。</summary>
      <returns>表示绑定结果的新 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">一个 <see cref="T:System.Dynamic.SetMemberBinder" /> 实例，表示动态操作的详细信息。</param>
      <param name="value">表示设置成员操作的值的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
      <summary>执行动态一元运算的绑定。</summary>
      <returns>表示绑定结果的新 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">一个 <see cref="T:System.Dynamic.UnaryOperationBinder" /> 实例，表示动态操作的详细信息。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)">
      <summary>为指定对象创建一个元对象。</summary>
      <returns>如果给定对象实现 <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" />，并且它不是来自当前 AppDomain 的外部的远程对象，则返回由 <see cref="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)" /> 返回的此对象的特定元对象。 否则，将创建并返回无限制的新的纯元对象。</returns>
      <param name="value">要为其获取元对象的对象。</param>
      <param name="expression">在动态绑定过程中表示此 <see cref="T:System.Dynamic.DynamicMetaObject" /> 的表达式。</param>
    </member>
    <member name="F:System.Dynamic.DynamicMetaObject.EmptyMetaObjects">
      <summary>表示 <see cref="T:System.Dynamic.DynamicMetaObject" /> 类型的空数组。 此字段为只读。</summary>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Expression">
      <summary>在动态绑定过程中表示 <see cref="T:System.Dynamic.DynamicMetaObject" /> 的表达式。</summary>
      <returns>在动态绑定过程中表示 <see cref="T:System.Dynamic.DynamicMetaObject" /> 的表达式。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.GetDynamicMemberNames">
      <summary>返回所有动态成员名称的枚举。</summary>
      <returns>动态成员名称的列表。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.HasValue">
      <summary>获取一个值，该值指示 <see cref="T:System.Dynamic.DynamicMetaObject" /> 是否具有运行时值。</summary>
      <returns>如果 <see cref="T:System.Dynamic.DynamicMetaObject" /> 具有运行时值，则为 True；否则为 False。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.LimitType">
      <summary>获取 <see cref="T:System.Dynamic.DynamicMetaObject" /> 的限制类型。</summary>
      <returns>如果运行时值可用，则为 <see cref="P:System.Dynamic.DynamicMetaObject.RuntimeType" />；否则为 <see cref="P:System.Dynamic.DynamicMetaObject.Expression" /> 的类型。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Restrictions">
      <summary>用于确定绑定是否有效的绑定限制集。</summary>
      <returns>绑定限制集。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.RuntimeType">
      <summary>获取运行时值的 <see cref="T:System.Type" />；如果 <see cref="T:System.Dynamic.DynamicMetaObject" /> 没有与其关联的值，则为 null。</summary>
      <returns>运行时值的 <see cref="T:System.Type" />，或为 null。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Value">
      <summary>由此 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示的运行时值。</summary>
      <returns>由此 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示的运行时值。</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObjectBinder">
      <summary>参与 <see cref="T:System.Dynamic.DynamicMetaObject" /> 绑定协议的动态调用站点联编程序。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.#ctor">
      <summary>初始化 <see cref="T:System.Dynamic.DynamicMetaObjectBinder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>在派生类中重写时，执行动态操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态操作的目标。</param>
      <param name="args">动态操作的参数数组。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>对一组参数执行动态操作的运行时绑定。</summary>
      <returns>一个表达式，对动态操作参数执行测试；如果测试有效，则执行动态操作。 如果测试在动态操作的后续匹配项上失败，将再次调用 Bind 为新参数类型生成新的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
      <param name="args">动态操作的参数数组。</param>
      <param name="parameters">表示绑定进程中调用站点的参数的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 实例数组。</param>
      <param name="returnLabel">用于返回动态绑定的结果的 LabelTarget。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>延迟操作绑定，直至已计算出所有动态操作参数的运行时值。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态操作的目标。</param>
      <param name="args">动态操作的参数数组。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject[])">
      <summary>延迟操作绑定，直至已计算出所有动态操作参数的运行时值。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="args">动态操作的参数数组。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.GetUpdateExpression(System.Type)">
      <summary>获取一个表达式，该表达式将使绑定得到更新。 它指示表达式的绑定不再有效。 通常在动态对象的“版本”发生更改时使用它。</summary>
      <returns>更新表达式。</returns>
      <param name="type">结果表达式的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性；允许任何类型。</param>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObjectBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="T:System.Dynamic.DynamicObject">
      <summary>提供用于指定运行时的动态行为的基类。 必须继承此类；不能直接实例化此类。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.#ctor">
      <summary>使派生的类型可以初始化 <see cref="T:System.Dynamic.DynamicObject" /> 类型的新实例。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
      <summary>返回所有动态成员名称的枚举。</summary>
      <returns>一个包含动态成员名称的序列。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>提供调度到动态虚方法的 <see cref="T:System.Dynamic.DynamicMetaObject" />。 可以将该对象封装到另一个 <see cref="T:System.Dynamic.DynamicMetaObject" /> 中，以便为各个不同操作提供自定义行为。 此方法支持语言实现器的动态语言运行时基础结构，不应从代码直接使用。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 类型的对象。</returns>
      <param name="parameter">表示要调度到动态虚方法的 <see cref="T:System.Dynamic.DynamicMetaObject" /> 的表达式。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
      <summary>提供二元运算的实现。 从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为诸如加法和乘法这样的运算指定动态行为。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。 如果此方法返回 false，则该语言的运行时联编程序将决定行为。（大多数情况下，将引发语言特定的运行时异常。）</returns>
      <param name="binder">提供有关二元运算的信息。 binder.Operation 属性返回一个 <see cref="T:System.Linq.Expressions.ExpressionType" /> 对象。 例如，对于 sum = first + second 语句（其中 first 和 second 派生自 DynamicObject 类），binder.Operation 将返回 ExpressionType.Add。</param>
      <param name="arg">二元运算的右操作数。 例如，对于 sum = first + second 语句（其中 first 和 second 派生自 DynamicObject 类），<paramref name="arg" /> 等于 second。</param>
      <param name="result">二元运算的结果。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
      <summary>提供类型转换运算的实现。 从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为将某个对象从一种类型转换为另一种类型的运算指定动态行为。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。 如果此方法返回 false，则该语言的运行时联编程序将决定行为。（大多数情况下，将引发语言特定的运行时异常。）</returns>
      <param name="binder">提供有关转换运算的信息。 binder.Type 属性提供必须将对象转换为的类型。 例如，对于 C# 中的语句 (String)sampleObject（Visual Basic 中为 CType(sampleObject, Type)）（其中 sampleObject 是派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类的类的一个实例），binder.Type 将返回 <see cref="T:System.String" /> 类型。 binder.Explicit 属性提供有关所发生转换的类型的信息。 对于显式转换，它返回 true；对于隐式转换，它返回 false。</param>
      <param name="result">类型转换运算的结果。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
      <summary>为初始化动态对象的新实例的操作提供实现。 不应将此方法用于 C# 或 Visual Basic。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。 如果此方法返回 false，则该语言的运行时联编程序将决定行为。（大多数情况下，将引发语言特定的运行时异常。）</returns>
      <param name="binder">提供有关初始化操作的信息。</param>
      <param name="args">初始化期间传递给对象的参数。 例如，对于 new SampleType(100) 操作（其中 SampleType 是派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类的类型），<paramref name="args[0]" /> 等于 100。</param>
      <param name="result">初始化的结果。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
      <summary>为按索引删除对象的操作提供实现。 不应将此方法用于 C# 或 Visual Basic。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。 如果此方法返回 false，则该语言的运行时联编程序将决定行为。（大多数情况下，将引发语言特定的运行时异常。）</returns>
      <param name="binder">提供有关删除的信息。</param>
      <param name="indexes">要删除的索引。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>为删除对象成员的操作提供实现。 不应将此方法用于 C# 或 Visual Basic。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。 如果此方法返回 false，则该语言的运行时联编程序将决定行为。（大多数情况下，将引发语言特定的运行时异常。）</returns>
      <param name="binder">提供有关删除的信息。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary>为按索引获取值的操作提供实现。 从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为索引操作指定动态行为。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。 如果此方法返回 false，则该语言的运行时联编程序将决定行为。（大多数情况下，将引发运行时异常。）</returns>
      <param name="binder">提供有关该操作的信息。</param>
      <param name="indexes">该操作中使用的索引。 例如，对于 C# 中的 sampleObject[3] 操作（Visual Basic 中为 sampleObject(3)）（其中 sampleObject 派生自 DynamicObject 类），<paramref name="indexes[0]" /> 等于 3。</param>
      <param name="result">索引操作的结果。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>为获取成员值的操作提供实现。 从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为诸如获取属性值这样的操作指定动态行为。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。 如果此方法返回 false，则该语言的运行时联编程序将决定行为。（大多数情况下，将引发运行时异常。）</returns>
      <param name="binder">提供有关调用了动态操作的对象的信息。 binder.Name 属性提供针对其执行动态操作的成员的名称。 例如，对于 Console.WriteLine(sampleObject.SampleProperty) 语句（其中 sampleObject 是派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类的类的一个实例），binder.Name 将返回“SampleProperty”。 binder.IgnoreCase 属性指定成员名称是否区分大小写。</param>
      <param name="result">获取操作的结果。 例如，如果为某个属性调用该方法，则可以为 <paramref name="result" /> 指派该属性值。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
      <summary>为调用对象的操作提供实现。 从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为诸如调用对象或委托这样的操作指定动态行为。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。 如果此方法返回 false，则该语言的运行时联编程序将决定行为。（大多数情况下，将引发语言特定的运行时异常。）</returns>
      <param name="binder">提供有关调用操作的信息。</param>
      <param name="args">调用操作期间传递给对象的参数。 例如，对于 sampleObject(100) 操作（其中 sampleObject 派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类），<paramref name="args[0]" /> 等于 100。</param>
      <param name="result">对象调用的结果。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>为调用成员的操作提供实现。 从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为诸如调用方法这样的操作指定动态行为。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。 如果此方法返回 false，则该语言的运行时联编程序将决定行为。（大多数情况下，将引发语言特定的运行时异常。）</returns>
      <param name="binder">提供有关动态操作的信息。 binder.Name 属性提供针对其执行动态操作的成员的名称。 例如，对于语句 sampleObject.SampleMethod(100)（其中 sampleObject 是派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类的类的一个实例），binder.Name 将返回“SampleMethod”。 binder.IgnoreCase 属性指定成员名称是否区分大小写。</param>
      <param name="args">调用操作期间传递给对象成员的参数。 例如，对于语句 sampleObject.SampleMethod(100)（其中 sampleObject 派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类），<paramref name="args[0]" /> 等于 100。</param>
      <param name="result">成员调用的结果。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
      <summary>为按索引设置值的操作提供实现。 从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为按指定索引访问对象的操作指定动态行为。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。 如果此方法返回 false，则该语言的运行时联编程序将决定行为。（大多数情况下，将引发语言特定的运行时异常。）</returns>
      <param name="binder">提供有关该操作的信息。</param>
      <param name="indexes">该操作中使用的索引。 例如，对于 C# 中的 sampleObject[3] = 10 操作（Visual Basic 中为 sampleObject(3) = 10）（其中 sampleObject 派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类），<paramref name="indexes[0]" /> 等于 3。</param>
      <param name="value">要为具有指定索引的对象设置的值。 例如，对于 C# 中的 sampleObject[3] = 10 操作（Visual Basic 中为 sampleObject(3) = 10）（其中 sampleObject 派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类），<paramref name="value" /> 等于 10。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>为设置成员值的操作提供实现。 从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为诸如设置属性值这样的操作指定动态行为。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。 如果此方法返回 false，则该语言的运行时联编程序将决定行为。（大多数情况下，将引发语言特定的运行时异常。）</returns>
      <param name="binder">提供有关调用了动态操作的对象的信息。 binder.Name 属性提供将该值分配到的成员的名称。 例如，对于语句 sampleObject.SampleProperty = "Test"（其中 sampleObject 是派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类的类的一个实例），binder.Name 将返回“SampleProperty”。 binder.IgnoreCase 属性指定成员名称是否区分大小写。</param>
      <param name="value">要为成员设置的值。 例如，对于 sampleObject.SampleProperty = "Test"（其中 sampleObject 是派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类的类的一个实例），<paramref name="value" /> 为“Test”。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
      <summary>提供一元运算的实现。 从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为诸如求反、递增、递减这样的运算指定动态行为。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。 如果此方法返回 false，则该语言的运行时联编程序将决定行为。（大多数情况下，将引发语言特定的运行时异常。）</returns>
      <param name="binder">提供有关一元运算的信息。 binder.Operation 属性返回一个 <see cref="T:System.Linq.Expressions.ExpressionType" /> 对象。 例如，对于 negativeNumber = -number 语句（其中 number 派生自 DynamicObject 类），binder.Operation 将返回“Negate”。</param>
      <param name="result">一元运算的结果。</param>
    </member>
    <member name="T:System.Dynamic.ExpandoObject">
      <summary>表示一个对象，该对象包含可在运行时动态添加和移除的成员。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.#ctor">
      <summary>初始化不包含任何成员的新 ExpandoObject。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>将指定值添加到具有指定键的 <see cref="T:System.Collections.Generic.ICollection`1" /> 中。</summary>
      <param name="item">表示要添加到集合中的键和值的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构。</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Clear">
      <summary>从集合中移除所有项。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>确定 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含特定的键和值。</summary>
      <returns>如果集合包含特定的键和值，则为 true；否则为 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中查找的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构。</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>从指定的数组索引开始，将 <see cref="T:System.Collections.Generic.ICollection`1" /> 的元素复制到类型 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的数组中。</summary>
      <param name="array">类型 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的一维数组，是从 <see cref="T:System.Collections.Generic.ICollection`1" /> 复制的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 元素的目标数组。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中开始复制位置的从零开始的索引。</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Count">
      <summary>获取 <see cref="T:System.Collections.Generic.ICollection`1" /> 中元素的数目。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 中元素的数目。</returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>从集合中移除键和值。</summary>
      <returns>如果成功找到并移除了键和值，则为 true；否则为 false。 如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中未找到键和值，则此方法将返回 false。</returns>
      <param name="item">表示要从集合中移除的键和值的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构。</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Add(System.String,System.Object)">
      <summary>将指定的键和值添加到字典中。</summary>
      <param name="key">要用作键的对象。</param>
      <param name="value">要用作值的对象。</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#ContainsKey(System.String)">
      <summary>确定字典是否包含指定键。</summary>
      <returns>如果词典包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="key">要在字典中定位的键。</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Item(System.String)">
      <summary>获取或设置具有指定键的元素。</summary>
      <returns>具有指定键的元素。</returns>
      <param name="key">要获取或设置的元素的键。</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>获取包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的键的 <see cref="T:System.Collections.Generic.ICollection`1" />。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1" />，其中包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象的键。</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(System.String)">
      <summary>从 <see cref="T:System.Collections.IDictionary" /> 中移除具有指定键的元素。</summary>
      <returns>如果该元素已成功移除，则为 true；否则为 false。 如果在原始 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中没有找到 <paramref name="key" />，此方法也会返回 false。</returns>
      <param name="key">要移除的元素的键。</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#TryGetValue(System.String,System.Object@)">
      <summary>获取与指定的键相关联的值。</summary>
      <returns>如果实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="key">要获取的值的键。</param>
      <param name="value">当此方法返回时，如果找到该键，则包含与指定的键相关联的值；否则将包含 <paramref name="value" /> 参数的类型默认值。 该参数未经初始化即被传递。</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>获取包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值的 <see cref="T:System.Collections.Generic.ICollection`1" />。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1" />，其中包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象中的值。</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 对象。</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="E:System.Dynamic.ExpandoObject.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>在属性值更改时发生。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>提供的 MetaObject 将调度到 Dynamic 虚方法。 可以将该对象封装到另一个 MetaObject 中，以便为单个操作提供自定义行为。</summary>
      <returns>类型为 <see cref="T:System.Dynamic.DynamicMetaObject" /> 的对象。</returns>
      <param name="parameter">表示要调度到动态虚方法的 MetaObject 的表达式。</param>
    </member>
    <member name="T:System.Dynamic.GetIndexBinder">
      <summary>表示调用站点上的动态获取索引操作，它提供绑定语义和有关操作的细节。</summary>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.GetIndexBinder" /> 的新实例。</summary>
      <param name="callInfo">调用站点上的参数的签名。</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态获取索引操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态获取索引操作的目标。</param>
      <param name="args">动态获取索引操作的参数数组。</param>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.CallInfo">
      <summary>获取调用站点上的参数的签名。</summary>
      <returns>调用站点上的参数的签名。</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>如果无法绑定目标动态对象，则执行动态获取索引操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态获取索引操作的目标。</param>
      <param name="indexes">动态获取索引操作的参数。</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>在派生类中重写时，如果无法绑定目标动态对象，则执行动态获取索引操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态获取索引操作的目标。</param>
      <param name="indexes">动态获取索引操作的参数。</param>
      <param name="errorSuggestion">绑定失败时要使用的绑定结果，或为 null。</param>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="T:System.Dynamic.GetMemberBinder">
      <summary>表示调用站点上的动态获取成员操作，它提供绑定语义和有关操作的细节。</summary>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.Dynamic.GetMemberBinder" /> 的新实例。</summary>
      <param name="name">要获取的成员的名称。</param>
      <param name="ignoreCase">如果在匹配名称时应忽略大小写，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态获取成员操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态获取成员操作的目标。</param>
      <param name="args">动态获取成员操作的参数数组。</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject)">
      <summary>如果无法绑定目标动态对象，则执行动态获取成员操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态获取成员操作的目标。</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>在派生类中重写时，如果无法绑定目标动态对象，则执行动态获取成员操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态获取成员操作的目标。</param>
      <param name="errorSuggestion">绑定失败时要使用的绑定结果，或为 null。</param>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.IgnoreCase">
      <summary>获取指示字符串比较是否应忽略成员名称大小写的值。</summary>
      <returns>如果忽略大小写，则为 true，否则为 false。</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.Name">
      <summary>获取要获取的成员的名称。</summary>
      <returns>要获取的成员的名称。</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="T:System.Dynamic.IDynamicMetaObjectProvider">
      <summary>表示一个动态对象，在运行时可将该对象的操作进行绑定。</summary>
    </member>
    <member name="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>返回 <see cref="T:System.Dynamic.DynamicMetaObject" />，它负责绑定对此对象执行的操作。</summary>
      <returns>要绑定此对象的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="parameter">运行时值的表达式树表示形式。</param>
    </member>
    <member name="T:System.Dynamic.IInvokeOnGetBinder">
      <summary>表示有关某个动态获取成员操作的信息，该信息指示此获取成员在执行获取操作时是否应该调用属性。</summary>
    </member>
    <member name="P:System.Dynamic.IInvokeOnGetBinder.InvokeOnGet">
      <summary>获取一个值，该值指示此获取成员在执行获取操作时是否应该调用属性。 此接口不存在时，默认值为 true。</summary>
      <returns>如果此获取成员在执行获取操作时应该调用属性，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Dynamic.InvokeBinder">
      <summary>表示调用站点上的调用动态操作，它提供绑定语义和有关操作的细节。</summary>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.InvokeBinder" /> 的新实例。</summary>
      <param name="callInfo">调用站点上的参数的签名。</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态调用操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态调用操作的目标。</param>
      <param name="args">动态调用操作的参数数组。</param>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.CallInfo">
      <summary>获取调用站点上的参数的签名。</summary>
      <returns>调用站点上的参数的签名。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>如果无法绑定目标动态对象，则执行动态调用操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态调用操作的目标。</param>
      <param name="args">动态调用操作的参数。</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>如果无法绑定目标动态对象，则执行动态调用操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态调用操作的目标。</param>
      <param name="args">动态调用操作的参数。</param>
      <param name="errorSuggestion">绑定失败时要使用的绑定结果，或为 null。</param>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="T:System.Dynamic.InvokeMemberBinder">
      <summary>表示调用站点上的调用成员动态操作，它提供绑定语义和有关操作的细节。</summary>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.#ctor(System.String,System.Boolean,System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.InvokeMemberBinder" /> 的新实例。</summary>
      <param name="name">要调用的成员名。</param>
      <param name="ignoreCase">如果在匹配名称时应忽略大小写，则为 true；否则为 false。</param>
      <param name="callInfo">调用站点上的参数的签名。</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态调用成员操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态调用成员操作的目标。</param>
      <param name="args">动态调用成员操作的参数数组。</param>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.CallInfo">
      <summary>获取调用站点上的参数的签名。</summary>
      <returns>调用站点上的参数的签名。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>在派生类中重写时，如果无法绑定目标动态对象，则执行动态调用操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态调用操作的目标。</param>
      <param name="args">动态调用操作的参数。</param>
      <param name="errorSuggestion">绑定失败时要使用的绑定结果，或为 null。</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>如果无法绑定目标动态对象，则执行动态调用成员操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态调用成员操作的目标。</param>
      <param name="args">动态调用成员操作的参数。</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>在派生类中重写时，如果无法绑定目标动态对象，则执行动态调用成员操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态调用成员操作的目标。</param>
      <param name="args">动态调用成员操作的参数。</param>
      <param name="errorSuggestion">绑定失败时要使用的绑定结果，或为 null。</param>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.IgnoreCase">
      <summary>获取指示字符串比较是否应忽略成员名称大小写的值。</summary>
      <returns>如果忽略大小写，则为 true，否则为 false。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.Name">
      <summary>获取要调用的成员的名称。</summary>
      <returns>要调用的成员名。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="T:System.Dynamic.SetIndexBinder">
      <summary>表示调用站点上的动态设置索引操作，它提供绑定语义和有关操作的细节。</summary>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.SetIndexBinder" /> 的新实例。</summary>
      <param name="callInfo">调用站点上的参数的签名。</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态设置索引操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态设置索引操作的目标。</param>
      <param name="args">动态设置索引操作的参数数组。</param>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.CallInfo">
      <summary>获取调用站点上的参数的签名。</summary>
      <returns>调用站点上的参数的签名。</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>如果无法绑定目标动态对象，则执行动态设置索引操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态设置索引操作的目标。</param>
      <param name="indexes">动态设置索引操作的参数。</param>
      <param name="value">要设置为集合的值。</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>在派生类中重写时，如果无法绑定目标动态对象，则执行动态设置索引操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态设置索引操作的目标。</param>
      <param name="indexes">动态设置索引操作的参数。</param>
      <param name="value">要设置为集合的值。</param>
      <param name="errorSuggestion">绑定失败时要使用的绑定结果，或为 null。</param>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="T:System.Dynamic.SetMemberBinder">
      <summary>表示调用站点上的动态设置成员操作，它提供绑定语义和有关操作的细节。</summary>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.Dynamic.SetMemberBinder" /> 的新实例。</summary>
      <param name="name">要获取的成员的名称。</param>
      <param name="ignoreCase">如果在匹配名称时应忽略大小写，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态设置成员操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态设置成员操作的目标。</param>
      <param name="args">动态设置成员操作的参数数组。</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>如果无法绑定目标动态对象，则执行动态集成员操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态设置成员操作的目标。</param>
      <param name="value">要为成员设置的值。</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>如果无法绑定目标动态对象，则执行动态集成员操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态设置成员操作的目标。</param>
      <param name="value">要为成员设置的值。</param>
      <param name="errorSuggestion">绑定失败时要使用的绑定结果，或为 null。</param>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.IgnoreCase">
      <summary>获取指示字符串比较是否应忽略成员名称大小写的值。</summary>
      <returns>如果忽略大小写，则为 true，否则为 false。</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.Name">
      <summary>获取要获取的成员的名称。</summary>
      <returns>要获取的成员的名称。</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="T:System.Dynamic.UnaryOperationBinder">
      <summary>表示调用站点上的一元动态运算，它提供绑定语义和有关操作的细节。</summary>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>初始化 <see cref="T:System.Dynamic.BinaryOperationBinder" /> 类的新实例。</summary>
      <param name="operation">一元运算类型。</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态一元运算的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态操作的目标。</param>
      <param name="args">动态操作的参数数组。</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)">
      <summary>如果无法绑定目标动态对象，则执行一元动态运算的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态一元运算的目标。</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>如果无法绑定目标动态对象，则执行一元动态运算的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态一元运算的目标。</param>
      <param name="errorSuggestion">绑定失败时的绑定结果，或为 null。</param>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.Operation">
      <summary>一元运算类型。</summary>
      <returns>表示一元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" /> 的对象。</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="T:System.IO.HandleInheritability">
      <summary>指定基础句柄是否已由子进程继承。</summary>
    </member>
    <member name="F:System.IO.HandleInheritability.Inheritable">
      <summary>指定句柄已由子进程继承。</summary>
    </member>
    <member name="F:System.IO.HandleInheritability.None">
      <summary>指定句柄未由子进程继承。</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFile">
      <summary>表示内存映射文件。</summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability,System.Boolean)">
      <summary>基于磁盘上的文件创建一个具有指定名称、容量、访问类型、安全权限、继承性和释放要求的内存映射文件。</summary>
      <returns>具有指定特征的内存映射文件。</returns>
      <param name="fileStream">要映射的文件的 <paramref name="fileStream" />。</param>
      <param name="mapName">要分配给内存映射文件的名称。</param>
      <param name="capacity">要分配给内存映射文件的最大大小（以字节为单位）。 指定 0 将容量设置为磁盘上文件的大小。</param>
      <param name="access">用于指定内存映射文件允许的访问类型的枚举值之一。 默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />。 此参数不可设置为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read" /> 或 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />。</param>
      <param name="memoryMappedFileSecurity">可以针对内存映射文件授予的文件访问和操作权限。 此参数可以为 null。</param>
      <param name="inheritability">用于指定内存映射文件的句柄能否由子进程继承的枚举值之一。 默认值为 <see cref="F:System.IO.HandleInheritability.None" />。</param>
      <param name="leaveOpen">若为 true，则在关闭 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" /> 后不释放 <paramref name="fileStream" />；若为 false，则释放 <paramref name="fileStream" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> 是空字符串。 - 或 - <paramref name="capacity" /> 和文件长度为零。 - 或 - 把 <paramref name="access" /> 设置到 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read" /> 或 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> 枚举值，这是不允许的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileStream" /> 或 <paramref name="mapname" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。 - 或 - <paramref name="capacity" /> 小于文件大小。 - 或 - <paramref name="access" /> 不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 枚举值。 - 或 - <paramref name="inheritability" /> 不是有效的 <see cref="T:System.IO.HandleInheritability" /> 枚举值。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="fileStream" /> 已关闭。</exception>
      <exception cref="T:System.UnauthorizedAccessException">当把 <paramref name="fileStream" /> 的访问设置到 <see cref="F:System.IO.FileAccess.Read" /> 或 <see cref="F:System.IO.FileAccess.Write" /> 时，将把 <paramref name="access" /> 设置到 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="mapName" /> 已存在。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String)">
      <summary>基于磁盘上的文件创建一个内存映射文件。</summary>
      <returns>内存映射文件。</returns>
      <param name="path">要映射的文件的路径。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空字符串，只包含空格，或者包含 <see cref="M:System.IO.Path.GetInvalidFileNameChars" /> 方法定义的一个或多个无效字符。 - 或 - <paramref name="path" /> 引用无效的设备。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 null。</exception>
      <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> 超过了操作系统定义的最大长度。 在 Windows 中，路径包含的字符必须少于 248 个，文件名包含的字符必须少于 260 个。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有该文件的所需权限。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode)">
      <summary>基于磁盘上的文件创建一个具有指定访问模式的内存映射文件。</summary>
      <returns>具有指定访问模式的内存映射文件。</returns>
      <param name="path">要映射的文件的路径。</param>
      <param name="mode">访问模式；必须为 <see cref="F:System.IO.FileMode.Open" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空字符串，只包含空格，或者包含 <see cref="M:System.IO.Path.GetInvalidFileNameChars" /> 方法定义的一个或多个无效字符。 - 或 - <paramref name="path" /> 引用无效的设备。 - 或 - <paramref name="mode" /> 为 <see cref="F:System.IO.FileMode.Append" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 null。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="mode" /> 是 <see cref="F:System.IO.FileMode.Create" />、<see cref="F:System.IO.FileMode.CreateNew" /> 或 <see cref="F:System.IO.FileMode.Truncate" />。 - 或 - <paramref name="mode" /> 为 <see cref="F:System.IO.FileMode.OpenOrCreate" /> 且磁盘上的文件不存在。 - 或 - 发生了 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> 超过了操作系统定义的最大长度。 在 Windows 中，路径包含的字符必须少于 248 个，文件名包含的字符必须少于 260 个。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有该文件的所需权限。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String)">
      <summary>基于磁盘上的文件创建一个具有指定访问模式和名称的内存映射文件。</summary>
      <returns>具有指定名称和访问模式的内存映射文件。</returns>
      <param name="path">要映射的文件的路径。</param>
      <param name="mode">访问模式；必须为 <see cref="F:System.IO.FileMode.Open" />。</param>
      <param name="mapName">要分配给内存映射文件的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空字符串，只包含空格，或者包含 <see cref="M:System.IO.Path.GetInvalidFileNameChars" /> 方法定义的一个或多个无效字符。 - 或 - <paramref name="path" /> 引用无效的设备。 - 或 - <paramref name="mapName" /> 是空字符串。 - 或 - <paramref name="mode" /> 为 <see cref="F:System.IO.FileMode.Append" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="mapName" /> 为 null。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="mode" /> 是 <see cref="F:System.IO.FileMode.Create" />、<see cref="F:System.IO.FileMode.CreateNew" /> 或 <see cref="F:System.IO.FileMode.Truncate" />。 - 或 - <paramref name="mode" /> 为 <see cref="F:System.IO.FileMode.OpenOrCreate" /> 且磁盘上的文件不存在。 - 或 - 发生了 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> 超过了操作系统定义的最大长度。 在 Windows 中，路径包含的字符必须少于 248 个，文件名包含的字符必须少于 260 个。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有该文件的所需权限。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64)">
      <summary>基于磁盘上的文件创建一个具有指定访问模式、名称和容量的内存映射文件。</summary>
      <returns>具有指定特征的内存映射文件。</returns>
      <param name="path">要映射的文件的路径。</param>
      <param name="mode">访问模式；除 <see cref="F:System.IO.FileMode.Append" /> 外，可以是任意 <see cref="T:System.IO.FileMode" /> 枚举值。</param>
      <param name="mapName">要分配给内存映射文件的名称。</param>
      <param name="capacity">要分配给内存映射文件的最大大小（以字节为单位）。 指定 0 将容量设置为磁盘上文件的大小。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空字符串，只包含空格，或者包含 <see cref="M:System.IO.Path.GetInvalidFileNameChars" /> 方法定义的一个或多个无效字符。 - 或 - <paramref name="path" /> 引用无效的设备。 - 或 - <paramref name="mapName" /> 是空字符串。 - 或 - <paramref name="mode" /> 为 <see cref="F:System.IO.FileMode.Append" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="mapName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 大于逻辑地址空间的大小。 - 或 - <paramref name="capacity" /> 小于零。 - 或 - <paramref name="capacity" /> 小于文件大小（但不为零）。 - 或 - <paramref name="capacity" /> 为零，且在磁盘上文件的大小也为零。</exception>
      <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> 超过了操作系统定义的最大长度。 在 Windows 中，路径包含的字符必须少于 248 个，文件名包含的字符必须少于 260 个。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有该文件的所需权限。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>基于磁盘上的文件创建一个具有指定访问模式、名称、容量和访问类型的内存映射文件。</summary>
      <returns>具有指定特征的内存映射文件。</returns>
      <param name="path">要映射的文件的路径。</param>
      <param name="mode">访问模式；除 <see cref="F:System.IO.FileMode.Append" /> 外，可以是任意 <see cref="T:System.IO.FileMode" /> 枚举值。</param>
      <param name="mapName">要分配给内存映射文件的名称。</param>
      <param name="capacity">要分配给内存映射文件的最大大小（以字节为单位）。 指定 0 将容量设置为磁盘上文件的大小。</param>
      <param name="access">用于指定内存映射文件允许的访问类型的枚举值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> 是空字符串。 - 或 - <paramref name="access" /> 不是一个允许的值。 - 或 - <paramref name="path" /> 指定空的文件。 - 或 - <paramref name="access" /> 指定为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read" />，容量大于 <paramref name="path" /> 所指示文件的大小。 - 或 - <paramref name="mode" /> 为 <see cref="F:System.IO.FileMode.Append" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="mapName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 大于逻辑地址空间的大小。 - 或 - <paramref name="capacity" /> 小于零。 - 或 - <paramref name="capacity" /> 小于文件大小（但不为零）。 - 或 - <paramref name="capacity" /> 为零，且在磁盘上文件的大小也为零。 - 或 - <paramref name="access" /> 不是定义的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 值。 - 或 - <paramref name="path" /> 指示的文件大小大于 <paramref name="capacity" />。</exception>
      <exception cref="T:System.IO.IOException">- 或 - 发生了 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> 超过了操作系统定义的最大长度。 在 Windows 中，路径包含的字符必须少于 248 个，文件名包含的字符必须少于 260 个。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有该文件的所需权限。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64)">
      <summary>在系统内存中创建一个具有指定容量的内存映射文件。</summary>
      <returns>具有指定名称和容量的内存映射文件。</returns>
      <param name="mapName">要分配给内存映射文件的名称。</param>
      <param name="capacity">要分配给内存映射文件的最大大小（以字节为单位）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> 是空字符串。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于或等于零。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>在系统内存中创建一个具有指定容量和访问类型的内存映射文件。</summary>
      <returns>具有指定特征的内存映射文件。</returns>
      <param name="mapName">要分配给内存映射文件的名称。</param>
      <param name="capacity">要分配给内存映射文件的最大大小（以字节为单位）。</param>
      <param name="access">用于指定内存映射文件允许的访问类型的枚举值之一。 默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> 是空字符串。 - 或 - <paramref name="access" /> 设置为只写，且写入值类型为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> 枚举值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于或等于零。 - 或 - <paramref name="access" /> 不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 枚举值。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability)">
      <summary>在系统内存中创建一个具有指定容量、访问类型、内存分配、安全权限和继承性的内存映射文件。</summary>
      <returns>具有指定特征的内存映射文件。</returns>
      <param name="mapName">要分配给内存映射文件的名称。</param>
      <param name="capacity">要分配给内存映射文件的最大大小（以字节为单位）。</param>
      <param name="access">用于指定内存映射文件允许的访问类型的枚举值之一。 默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />。</param>
      <param name="options">枚举值的按位组合，用于为内存映射文件指定内存分配选项。</param>
      <param name="memoryMappedFileSecurity">可以针对内存映射文件授予的文件访问和操作权限。 此参数可以为 null。</param>
      <param name="inheritability">用于指定内存映射文件的句柄能否由子进程继承的枚举值之一。 默认值为 <see cref="F:System.IO.HandleInheritability.None" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> 是空字符串。 - 或 - <paramref name="access" /> 设置为只写，且写入值类型为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> 枚举值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于或等于零。 - 或 - <paramref name="access" /> 不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 枚举值。 - 或 - <paramref name="inheritability" /> 不是有效的 <see cref="T:System.IO.HandleInheritability" /> 枚举值。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64)">
      <summary>在系统内存中创建或打开一个具有指定容量的内存映射文件。</summary>
      <returns>具有指定名称和大小的内存映射文件。</returns>
      <param name="mapName">要分配给内存映射文件的名称。</param>
      <param name="capacity">要分配给内存映射文件的最大大小（以字节为单位）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> 是空字符串。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 大于逻辑地址空间的大小。 - 或 - <paramref name="capacity" /> 小于或等于零。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>在系统内存中创建或打开一个具有指定容量和访问类型的内存映射文件。</summary>
      <returns>具有指定特征的内存映射文件。</returns>
      <param name="mapName">要分配给内存映射文件的名称。</param>
      <param name="capacity">要分配给内存映射文件的最大大小（以字节为单位）。</param>
      <param name="access">用于指定内存映射文件允许的访问类型的枚举值之一。 默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> 是空字符串。 - 或 - <paramref name="access" /> 设置为只写，且写入值类型为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> 枚举值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 大于逻辑地址空间的大小。 - 或 - <paramref name="capacity" /> 小于或等于零。 - 或 - <paramref name="access" /> 不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 枚举值。</exception>
      <exception cref="T:System.UnauthorizedAccessException">操作系统不允许对文件的指定访问；例如，访问权限设置为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> 或 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />，但文件或目录为只读。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability)">
      <summary>在系统内存中创建或打开一个具有指定容量、访问类型、内存分配、安全权限和继承性的内存映射文件。</summary>
      <returns>具有指定特征的内存映射文件。</returns>
      <param name="mapName">要分配给内存映射文件的名称。</param>
      <param name="capacity">要分配给内存映射文件的最大大小（以字节为单位）。</param>
      <param name="access">用于指定内存映射文件允许的访问类型的枚举值之一。 默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />。</param>
      <param name="options">枚举值的按位组合，用于为内存映射文件指定内存分配选项。</param>
      <param name="memoryMappedFileSecurity">可以针对内存映射文件授予的文件访问和操作权限。 此参数可以为 null。</param>
      <param name="inheritability">用于指定内存映射文件的句柄能否由子进程继承的枚举值之一。 默认值为 <see cref="F:System.IO.HandleInheritability.None" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> 是空字符串。 - 或 - <paramref name="access" /> 设置为只写，且写入值类型为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> 枚举值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 大于逻辑地址空间的大小。 - 或 - <paramref name="capacity" /> 小于或等于零。 - 或 - <paramref name="access" /> 不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 枚举值。 - 或 - <paramref name="inheritability" /> 不是有效的 <see cref="T:System.IO.HandleInheritability" /> 枚举值。</exception>
      <exception cref="T:System.UnauthorizedAccessException">操作系统不允许对文件的指定 <paramref name="access" />；例如，<paramref name="access" /> 设置为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> 或 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />，但文件或目录为只读。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor">
      <summary>创建映射到内存映射文件视图的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" />。</summary>
      <returns>可随机访问的内存块。</returns>
      <exception cref="T:System.UnauthorizedAccessException">对内存映射文件的访问控制未获授权。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64)">
      <summary>创建一个 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" />，它映射到内存映射文件的视图并具有指定的偏移和大小。</summary>
      <returns>可随机访问的内存块。</returns>
      <param name="offset">启动此视图的字节位置。</param>
      <param name="size">视图的大小。 指定 0（零）可创建从 <paramref name="offset" /> 开始，大约在内存映射文件结尾处结束的视图。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="size" /> 是负值。 - 或 - <paramref name="size" /> 大于逻辑地址空间。</exception>
      <exception cref="T:System.UnauthorizedAccessException">对内存映射文件的访问控制未获授权。</exception>
      <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>创建一个 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" />，它映射到内存映射文件的视图并具有指定的偏移、大小和访问限制。</summary>
      <returns>可随机访问的内存块。</returns>
      <param name="offset">启动此视图的字节位置。</param>
      <param name="size">视图的大小。 指定 0（零）可创建从 <paramref name="offset" /> 开始，大约在内存映射文件结尾处结束的视图。</param>
      <param name="access">用于指定内存映射文件允许的访问类型的枚举值之一。 默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="size" /> 是负值。 - 或 - <paramref name="size" /> 大于逻辑地址空间。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="access" /> 对于内存映射文件无效。</exception>
      <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream">
      <summary>创建映射到内存映射文件视图的流。</summary>
      <returns>内存流。</returns>
      <exception cref="T:System.UnauthorizedAccessException">对内存映射文件的访问控制未获授权。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64)">
      <summary>创建一个流，它映射到内存映射文件的视图并具有指定的偏移和大小。</summary>
      <returns>具有指定偏移和大小的内存流。</returns>
      <param name="offset">启动此视图的字节位置。</param>
      <param name="size">视图的大小。 指定 0（零）可创建从 <paramref name="offset" /> 开始，大约在内存映射文件结尾处结束的视图。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="size" /> 是负值。 - 或 - <paramref name="size" /> 大于逻辑地址空间。</exception>
      <exception cref="T:System.UnauthorizedAccessException">对内存映射文件的访问控制未获授权。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="size" /> 大于总虚拟内存。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>创建一个流，它映射到内存映射文件的视图，并具有指定的偏移、大小和访问类型。</summary>
      <returns>具有指定特征的内存流。</returns>
      <param name="offset">启动此视图的字节位置。</param>
      <param name="size">视图的大小。 指定 0（零）可创建从 <paramref name="offset" /> 开始，大约在内存映射文件结尾处结束的视图。</param>
      <param name="access">用于指定内存映射文件允许的访问类型的枚举值之一。 默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="size" /> 是负值。 - 或 - <paramref name="size" /> 大于逻辑地址空间。 - 或 - <paramref name="access " /> 不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 枚举值。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="access" /> 对于内存映射文件无效。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="size" /> 大于总虚拟内存。 - 或 - <paramref name="access" /> 对于内存映射文件无效。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose">
      <summary>释放由 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.GetAccessControl">
      <summary>获取对内存映射文件资源的访问控制。</summary>
      <returns>可以针对内存映射文件授予的文件访问和操作权限。</returns>
      <exception cref="T:System.InvalidOperationException">用于设置安全信息的基础调用失败。</exception>
      <exception cref="T:System.NotSupportedException">用于设置安全信息的基础调用失败。</exception>
      <exception cref="T:System.ObjectDisposedException">内存映射文件关闭。</exception>
      <exception cref="T:System.PlatformNotSupportedException">当前平台是 Windows 98 或更早版本。</exception>
      <exception cref="T:System.UnauthorizedAccessException">用于设置安全信息的基础调用失败。 - 或 - 内存映射文件已作为只 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> 文件打开。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String)">
      <summary>在系统内存中打开一个具有指定名称的现有内存映射文件。</summary>
      <returns>具有指定名称的内存映射文件。</returns>
      <param name="mapName">要打开的内存映射文件的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> 是空字符串。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> 为 null。</exception>
      <exception cref="T:System.IO.FileNotFoundException">为 <paramref name="mapName" /> 指定的文件不存在。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights)">
      <summary>在系统内存中打开一个具有指定名称和访问权限的现有内存映射文件。</summary>
      <returns>具有指定特征的内存映射文件。</returns>
      <param name="mapName">要打开的内存映射文件的名称。</param>
      <param name="desiredAccessRights">用于指定应用于内存映射文件的访问权限的枚举值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> 是空字符串。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="desiredAccessRights" /> 不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileRights" /> 枚举值。</exception>
      <exception cref="T:System.IO.FileNotFoundException">为 <paramref name="mapName" /> 指定的文件不存在。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights,System.IO.HandleInheritability)">
      <summary>在系统内存中打开一个具有指定名称、访问权限和继承性的现有内存映射文件。</summary>
      <returns>具有指定特征的内存映射文件。</returns>
      <param name="mapName">要打开的内存映射文件的名称。</param>
      <param name="desiredAccessRights">用于指定应用于内存映射文件的访问权限的枚举值之一。</param>
      <param name="inheritability">用于指定内存映射文件的句柄能否由子进程继承的枚举值之一。 默认值为 <see cref="F:System.IO.HandleInheritability.None" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> 是空字符串。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="desiredAccessRights" /> 不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileRights" /> 枚举值。 - 或 - <paramref name="inheritability" /> 不是有效的 <see cref="T:System.IO.HandleInheritability" /> 枚举值。</exception>
      <exception cref="T:System.UnauthorizedAccessException">请求的访问对于内存映射文件无效。</exception>
      <exception cref="T:System.IO.FileNotFoundException">为 <paramref name="mapName" /> 指定的文件不存在。</exception>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle">
      <summary>获取内存映射文件的文件句柄。</summary>
      <returns>内存映射文件的句柄。</returns>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.SetAccessControl(System.IO.MemoryMappedFiles.MemoryMappedFileSecurity)">
      <summary>设置对内存映射文件资源的访问控制。</summary>
      <param name="memoryMappedFileSecurity">可以针对内存映射文件授予的文件访问和操作权限。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="memoryMappedFileSecurity" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">用于设置安全信息的基础调用失败。</exception>
      <exception cref="T:System.NotSupportedException">用于设置安全信息的基础调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">用于设置安全信息的基础调用失败。</exception>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess">
      <summary>指定内存映射文件或视图的访问功能和限制。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.CopyOnWrite">
      <summary>对文件的读访问和写访问，限制条件是其他进程不会看到任何写入操作。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read">
      <summary>对文件的只读访问。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadExecute">
      <summary>对可以存储和运行可执行代码的文件的读访问。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite">
      <summary>对文件的读访问和写访问。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWriteExecute">
      <summary>对可以存储和运行可执行代码的文件的读访问和写访问。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write">
      <summary>对文件的只写访问。</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileOptions">
      <summary>为内存映射文件提供内存分配选项。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileOptions.DelayAllocatePages">
      <summary>在使用 <see cref="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor" /> 或 <see cref="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream" /> 方法创建视图之前，将延迟内存分配。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileOptions.None">
      <summary>未应用内存分配选项。</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileRights">
      <summary>指定不与磁盘上的文件关联的内存映射文件的访问权限。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.AccessSystemSecurity">
      <summary>获取或设置文件权限的权限。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ChangePermissions">
      <summary>更改与文件关联的安全和审核规则的权限。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.CopyOnWrite">
      <summary>读取和写入文件的权限，限制条件是其他进程不会看到写入操作。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Delete">
      <summary>删除文件的权限。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Execute">
      <summary>运行应用程序文件的权限。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.FullControl">
      <summary>对文件进行完全控制以及修改访问控制和审核规则的权限。 此值表示对文件进行任何操作的权限，并且是此枚举中的所有权限的组合。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Read">
      <summary>以只读方式打开和复制文件的权限。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadExecute">
      <summary>以只读方式打开和复制文件夹或文件以及运行应用程序文件的权限。 此权限包括 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Read" /> 权限和 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Execute" /> 权限。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadPermissions">
      <summary>从文件打开和复制访问及审核规则的权限。 这不包括读取数据、文件系统特性或扩展文件系统特性的权限。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadWrite">
      <summary>打开和复制文件的权限，以及向文件添加数据或从文件中删除数据的权限。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadWriteExecute">
      <summary>打开和复制文件的权限，向文件添加数据或从文件中删除数据的权限，以及运行应用程序文件的权限。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.TakeOwnership">
      <summary>更改文件所有者的权限。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Write">
      <summary>向文件添加数据或从文件中删除数据的权限。</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileSecurity">
      <summary>表示可以针对内存映射文件授予的文件访问和操作权限。</summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFileSecurity.#ctor">
      <summary>初始化 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileSecurity" /> 类的新实例。</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor">
      <summary>表示随机访问的内存映射文件视图。</summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Flush">
      <summary>清除此视图的所有缓冲区，使得所有缓冲的数据都被写入到基础文件。</summary>
      <exception cref="T:System.ObjectDisposedException">在访问器关闭后调用方法。</exception>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.PointerOffset">
      <summary>[This topic is preliminary and is subject to change.]获取此视图的开始位置相对于内存映射文件的开头进行偏移的字节数。</summary>
      <returns>此视图的开始位置和内存映射文件的开始位置之间的字节数。</returns>
      <exception cref="T:System.InvalidOperationException">从中创建此实例的对象为 null。</exception>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.SafeMemoryMappedViewHandle">
      <summary>获取内存映射文件的视图的句柄。</summary>
      <returns>文件视图的操作系统句柄的包装。</returns>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedViewStream">
      <summary>将内存映射文件的视图表示为按顺序访问的流。</summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedViewStream.Flush">
      <summary>清除此流的所有缓冲区，使得所有缓冲的数据都被写入到基础文件。</summary>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedViewStream.PointerOffset">
      <summary>[This topic is preliminary and is subject to change.]获取此视图的开始位置相对于内存映射文件的开头进行偏移的字节数。</summary>
      <returns>此视图的开始位置和内存映射文件的开始位置之间的字节数。</returns>
      <exception cref="T:System.InvalidOperationException">从中创建此实例的对象为 null。</exception>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedViewStream.SafeMemoryMappedViewHandle">
      <summary>获取内存映射文件的视图的句柄。</summary>
      <returns>文件视图的操作系统句柄的包装。</returns>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedViewStream.SetLength(System.Int64)">
      <summary>设置当前流的长度。</summary>
      <param name="value">所需的当前流的长度（以字节表示）。</param>
      <exception cref="T:System.NotSupportedException">此方法不受支持。</exception>
    </member>
    <member name="T:System.IO.Pipes.AnonymousPipeClientStream">
      <summary>公开匿名管道流的客户端，该管道流既支持同步读写操作，也支持异步读写操作。</summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>从指定的句柄初始化 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> 类的新实例。</summary>
      <param name="direction">确定管道方向的枚举值之一。 匿名管道只能是单向的，因此，<paramref name="direction" /> 不能设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</param>
      <param name="safePipeHandle">此 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> 对象将封装的管道的安全句柄。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="safePipeHandle " />不是有效的句柄。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="safePipeHandle" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">将 <paramref name="direction" /> 设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误，如磁盘错误。 - 或 - 流已关闭。</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)">
      <summary>使用指定的管道方向和管道句柄字符串表示形式初始化 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> 类的一个新实例。</summary>
      <param name="direction">确定管道方向的枚举值之一。 匿名管道只能是单向的，因此，<paramref name="direction" /> 不能设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</param>
      <param name="pipeHandleAsString">一个表示管道句柄的字符串。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeHandleAsString" /> 是无效的句柄。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeHandleAsString" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">将 <paramref name="direction" /> 设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.String)">
      <summary>使用指定的管道句柄字符串表示形式初始化 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> 类的一个新实例。</summary>
      <param name="pipeHandleAsString">一个表示管道句柄的字符串。</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="pipeHandleAsString" /> 不是有效的管道句柄。</exception>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeClientStream.ReadMode">
      <summary>设置 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> 对象的读取模式。</summary>
      <returns>
        <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> 对象的 <see cref="T:System.IO.Pipes.PipeTransmissionMode" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传输模式无效。 对于匿名管道，只支持 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" /></exception>
      <exception cref="T:System.NotSupportedException">转换模式为 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />。</exception>
      <exception cref="T:System.IO.IOException">连接断开或出现其他 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode">
      <summary>获取当前管道支持的管道传输模式。</summary>
      <returns>当前管道支持的 <see cref="T:System.IO.Pipes.PipeTransmissionMode" />。</returns>
    </member>
    <member name="T:System.IO.Pipes.AnonymousPipeServerStream">
      <summary>公开匿名管道周围的流，该管道既支持同步读写操作，也支持异步读写操作。</summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor">
      <summary>初始化 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection)">
      <summary>使用指定的管道方向初始化 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> 类的新实例。</summary>
      <param name="direction">确定管道方向的枚举值之一。 匿名管道只能是单向的，因此，<paramref name="direction" /> 不能设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</param>
      <exception cref="T:System.NotSupportedException">将 <paramref name="direction" /> 设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>从指定的管道句柄初始化 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> 类的新实例。</summary>
      <param name="direction">确定管道方向的枚举值之一。 匿名管道只能是单向的，因此，<paramref name="direction" /> 不能设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</param>
      <param name="serverSafePipeHandle">此 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> 对象将封装的管道的安全句柄。</param>
      <param name="clientSafePipeHandle">
        <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> 对象的安全句柄。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="serverSafePipeHandle" /> 或 <paramref name="clientSafePipeHandle" /> 是无效句柄。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serverSafePipeHandle" /> 或 <paramref name="clientSafePipeHandle" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">将 <paramref name="direction" /> 设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误，如磁盘错误。 - 或 - 流已关闭。</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)">
      <summary>使用指定的管道方向和继承模式初始化 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> 类的新实例。</summary>
      <param name="direction">确定管道方向的枚举值之一。 匿名管道只能是单向的，因此，<paramref name="direction" /> 不能设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</param>
      <param name="inheritability">确定基础句柄能否由子进程继承的枚举值之一。 必须设置为 <see cref="F:System.IO.HandleInheritability.None" /> 或 <see cref="F:System.IO.HandleInheritability.Inheritable" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">未将 <paramref name="inheritability" /> 设为 <see cref="F:System.IO.HandleInheritability.None" /> 或 <see cref="F:System.IO.HandleInheritability.Inheritable" />。</exception>
      <exception cref="T:System.NotSupportedException">将 <paramref name="direction" /> 设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)">
      <summary>使用指定的管道方向、继承模式和缓冲区大小初始化 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> 类的新实例。</summary>
      <param name="direction">确定管道方向的枚举值之一。 匿名管道只能是单向的，因此，<paramref name="direction" /> 不能设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</param>
      <param name="inheritability">确定基础句柄能否由子进程继承的枚举值之一。 必须设置为 <see cref="F:System.IO.HandleInheritability.None" /> 或 <see cref="F:System.IO.HandleInheritability.Inheritable" />。</param>
      <param name="bufferSize">缓冲区的大小。 此值必须大于等于 0。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">未将 <paramref name="inheritability" /> 设为 <see cref="F:System.IO.HandleInheritability.None" /> 或 <see cref="F:System.IO.HandleInheritability.Inheritable" />。 - 或 - <paramref name="bufferSize" /> 小于 0。</exception>
      <exception cref="T:System.NotSupportedException">将 <paramref name="direction" /> 设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)">
      <summary>使用指定的管道方向、继承模式、缓冲区大小和管道安全性初始化 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> 类的新实例。</summary>
      <param name="direction">确定管道方向的枚举值之一。 匿名管道只能是单向的，因此，<paramref name="direction" /> 不能设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</param>
      <param name="inheritability">确定基础句柄能否由子进程继承的枚举值之一。</param>
      <param name="bufferSize">缓冲区的大小。 此值必须大于等于 0。</param>
      <param name="pipeSecurity">一个对象，确定管道的访问控制和审核安全性。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">未将 <paramref name="inheritability" /> 设为 <see cref="F:System.IO.HandleInheritability.None" /> 或 <see cref="F:System.IO.HandleInheritability.Inheritable" />。 - 或 - <paramref name="bufferSize" /> 小于 0。</exception>
      <exception cref="T:System.NotSupportedException">将 <paramref name="direction" /> 设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</exception>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeServerStream.ClientSafePipeHandle">
      <summary>获取 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> 对象的安全句柄，当前该对象连接到 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> 对象。</summary>
      <returns>
        <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> 对象的句柄，当前该对象连接到 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> 对象。</returns>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle">
      <summary>关闭 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> 对象句柄的本地副本。</summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString">
      <summary>以字符串形式获取已连接的 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> 对象的句柄。</summary>
      <returns>一个表示已连接的 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> 对象的句柄的字符串。</returns>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeServerStream.ReadMode">
      <summary>设置 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> 对象的读取模式。 对于匿名管道，传输模式必须为 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />。</summary>
      <returns>
        <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> 对象的读取模式。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传输模式无效。 对于匿名管道，只支持 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" /></exception>
      <exception cref="T:System.NotSupportedException">该属性设置为 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />，对于匿名管道不支持此设置。</exception>
      <exception cref="T:System.IO.IOException">连接断开或出现其他 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode">
      <summary>获取当前管道支持的管道传输模式。</summary>
      <returns>当前管道支持的 <see cref="T:System.IO.Pipes.PipeTransmissionMode" />。</returns>
    </member>
    <member name="T:System.IO.Pipes.NamedPipeClientStream">
      <summary>公开命名管道周围的 <see cref="T:System.IO.Stream" />，该管道既支持同步读写操作，也支持异步读写操作。</summary>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.Boolean,System.Boolean,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>使用指定的管道方向为指定的管道句柄初始化 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 类的一个新实例。</summary>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <param name="isAsync">true 指示句柄已异步打开；否则为 false。</param>
      <param name="isConnected">true 指示已连接管道；否则为 false。</param>
      <param name="safePipeHandle">此 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 对象将封装的管道的安全句柄。</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="safePipeHandle" /> 不是有效的句柄。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="safePipeHandle" /> 不是有效的句柄。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="safePipeHandle" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="safePipeHandle" /> 不是有效的句柄。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String)">
      <summary>用指定的管道名称初始化 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 类的一个新实例。</summary>
      <param name="pipeName">管道的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 是零长度字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为“anonymous”。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String)">
      <summary>使用指定的管道和服务器名称初始化 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 类的一个新实例。</summary>
      <param name="serverName">要连接的远程计算机的名称，或者为“.”以指定本地计算机。</param>
      <param name="pipeName">管道的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 或 <paramref name="serverName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 或 <paramref name="serverName" /> 是零长度字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为“anonymous”。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeAccessRights,System.IO.Pipes.PipeOptions,System.Security.Principal.TokenImpersonationLevel,System.IO.HandleInheritability)">
      <summary>使用指定的管道和服务器名称、指定的管道选项、安全模拟级别以及继承模式初始化 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 类的一个新实例。</summary>
      <param name="serverName">要连接的远程计算机的名称，或者为“.”以指定本地计算机。</param>
      <param name="pipeName">管道的名称。</param>
      <param name="desiredAccessRights">指定管道所需访问权限的枚举值之一。</param>
      <param name="options">一个可确定如何打开或创建管道的枚举值。</param>
      <param name="impersonationLevel">确定安全模拟级别的枚举值之一。</param>
      <param name="inheritability">确定基础句柄是否将由子进程继承的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 或 <paramref name="serverName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 或 <paramref name="serverName" /> 是零长度字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为“anonymous”。 - 或 - <paramref name="options" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeOptions" /> 值。 - 或 - <paramref name="impersonationLevel" /> 不是有效的 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值。 - 或 - <paramref name="inheritability" /> 不是有效的 <see cref="T:System.IO.HandleInheritability" /> 值。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection)">
      <summary>使用指定的管道和服务器名称以及指定的管道方向初始化 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 类的一个新实例。</summary>
      <param name="serverName">要连接的远程计算机的名称，或者为“.”以指定本地计算机。</param>
      <param name="pipeName">管道的名称。</param>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 或 <paramref name="serverName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 或 <paramref name="serverName" /> 是零长度字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为“anonymous”。 - 或 - <paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions)">
      <summary>使用指定的管道和服务器名称以及指定的管道方向和管道选项初始化 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 类的一个新实例。</summary>
      <param name="serverName">要连接的远程计算机的名称，或者为“.”以指定本地计算机。</param>
      <param name="pipeName">管道的名称。</param>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <param name="options">一个可确定如何打开或创建管道的枚举值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 或 <paramref name="serverName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 或 <paramref name="serverName" /> 是零长度字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为“anonymous”。 - 或 - <paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。 - 或 - <paramref name="options" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeOptions" /> 值。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions,System.Security.Principal.TokenImpersonationLevel)">
      <summary>使用指定的管道和服务器名称、指定的管道方向和管道选项以及安全模拟级别初始化 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 类的一个新实例。</summary>
      <param name="serverName">要连接的远程计算机的名称，或者为“.”以指定本地计算机。</param>
      <param name="pipeName">管道的名称。</param>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <param name="options">一个可确定如何打开或创建管道的枚举值。</param>
      <param name="impersonationLevel">确定安全模拟级别的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 或 <paramref name="serverName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 或 <paramref name="serverName" /> 是零长度字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为“anonymous”。 - 或 - <paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。 - 或 - <paramref name="options" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeOptions" /> 值。 - 或 - <paramref name="impersonationLevel" /> 不是有效的 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions,System.Security.Principal.TokenImpersonationLevel,System.IO.HandleInheritability)">
      <summary>使用指定的管道和服务器名称、指定的管道方向、管道选项、安全模拟级别以及继承模式初始化 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 类的一个新实例。</summary>
      <param name="serverName">要连接的远程计算机的名称，或者为“.”以指定本地计算机。</param>
      <param name="pipeName">管道的名称。</param>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <param name="options">一个可确定如何打开或创建管道的枚举值。</param>
      <param name="impersonationLevel">确定安全模拟级别的枚举值之一。</param>
      <param name="inheritability">确定基础句柄是否将由子进程继承的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 或 <paramref name="serverName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 或 <paramref name="serverName" /> 是零长度字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为“anonymous”。 - 或 - <paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。 - 或 - <paramref name="options" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeOptions" /> 值。 - 或 - <paramref name="impersonationLevel" /> 不是有效的 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值。 - 或 - <paramref name="inheritability" /> 不是有效的 <see cref="T:System.IO.HandleInheritability" /> 值。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.Connect">
      <summary>连接到具有无限的超时值的等待服务器。</summary>
      <exception cref="T:System.InvalidOperationException">客户端已连接。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.Connect(System.Int32)">
      <summary>在指定的超时时间内连接到等待的服务器。</summary>
      <param name="timeout">在连接超时之前等待服务器响应的毫秒数。</param>
      <exception cref="T:System.TimeoutException">未能在指定的 <paramref name="timeout" /> 时期内连接到服务器。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于 0 并未设置为 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
      <exception cref="T:System.InvalidOperationException">客户端已连接。</exception>
      <exception cref="T:System.IO.IOException">服务器连接至其他客户端并且已经过了超时期间。</exception>
    </member>
    <member name="P:System.IO.Pipes.NamedPipeClientStream.NumberOfServerInstances">
      <summary>获取共享同一管道名称的服务器实例的数目。</summary>
      <returns>共享同一管道名称的服务器实例的数目。</returns>
      <exception cref="T:System.InvalidOperationException">尚未设置管道句柄。 - 或 - 当前 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 对象尚未连接到 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 对象。</exception>
      <exception cref="T:System.IO.IOException">管道已中断或出现 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">基础管道句柄已关闭。</exception>
    </member>
    <member name="T:System.IO.Pipes.NamedPipeServerStream">
      <summary>公开命名管道周围的 <see cref="T:System.IO.Stream" />，该管道既支持同步读写操作，也支持异步读写操作。</summary>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.Boolean,System.Boolean,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>从指定的管道句柄初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 类的一个新实例。</summary>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <param name="isAsync">true 指示句柄已异步打开；否则为 false。</param>
      <param name="isConnected">true 指示已连接管道；否则为 false。</param>
      <param name="safePipeHandle">此 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 对象将封装的管道的安全句柄。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="safePipeHandle" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="safePipeHandle" /> 是无效的句柄。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="safePipeHandle" /> 不是有效的管道句柄。 - 或 - 已超出最大服务器实例数。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String)">
      <summary>用指定的管道名称初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 类的一个新实例。</summary>
      <param name="pipeName">管道的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 是零长度字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为“anonymous”。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pipeName" /> 包含冒号（“:”）。</exception>
      <exception cref="T:System.PlatformNotSupportedException">操作系统是 Windows Millennium Edition、Windows 98 或 Windows 95，它们不被支持。</exception>
      <exception cref="T:System.IO.IOException">已超出最大服务器实例数。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection)">
      <summary>使用指定的管道名称和管道方向初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 类的新实例。</summary>
      <param name="pipeName">管道的名称。</param>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 是零长度字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为“anonymous”。 - 或 - <paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pipeName" /> 包含冒号（“:”）。</exception>
      <exception cref="T:System.PlatformNotSupportedException">操作系统是 Windows Millennium Edition、Windows 98 或 Windows 95，它们不被支持。</exception>
      <exception cref="T:System.IO.IOException">已超出最大服务器实例数。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32)">
      <summary>使用指定的管道名称、管道方向和服务器实例最大数目初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 类的一个新实例。</summary>
      <param name="pipeName">管道的名称。</param>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <param name="maxNumberOfServerInstances">共享同一名称的服务器实例的最大数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 是零长度字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为“anonymous”。 - 或 - <paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。 - 或 - 需要非负数。 - 或 - <paramref name="maxNumberofServerInstances" /> 小于 1 或大于 254。 - 或 - <see cref="F:System.IO.HandleInheritability.None" /> 或 <see cref="F:System.IO.HandleInheritability.Inheritable" /> 必需。 - 或 - 访问权限限于 <see cref="F:System.IO.Pipes.PipeAccessRights.ChangePermissions" />、<see cref="F:System.IO.Pipes.PipeAccessRights.TakeOwnership" /> 和 <see cref="F:System.IO.Pipes.PipeAccessRights.AccessSystemSecurity" /> 标志。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pipeName" /> 包含冒号（“:”）。</exception>
      <exception cref="T:System.PlatformNotSupportedException">操作系统是 Windows Millennium Edition、Windows 98 或 Windows 95，它们不被支持。</exception>
      <exception cref="T:System.IO.IOException">已超出最大服务器实例数。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode)">
      <summary>使用指定的管道名称、管道方向、服务器实例的最大数目和传输模式初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 类的一个新实例。</summary>
      <param name="pipeName">管道的名称。</param>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <param name="maxNumberOfServerInstances">共享同一名称的服务器实例的最大数目。</param>
      <param name="transmissionMode">一个可确定管道传输模式的枚举值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 是零长度字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为“anonymous”。 - 或 - <paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。 - 或 - <paramref name="maxNumberofServerInstances" /> 小于 1 或大于 254。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pipeName" /> 包含冒号（“:”）。</exception>
      <exception cref="T:System.PlatformNotSupportedException">操作系统是 Windows Millennium Edition、Windows 98 或 Windows 95，它们不被支持。</exception>
      <exception cref="T:System.IO.IOException">已超出最大服务器实例数。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions)">
      <summary>使用指定的管道名称、管道方向、服务器实例的最大数目、传输模式和管道选项初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 类的一个新实例。</summary>
      <param name="pipeName">管道的名称。</param>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <param name="maxNumberOfServerInstances">共享同一名称的服务器实例的最大数目。</param>
      <param name="transmissionMode">一个可确定管道传输模式的枚举值。</param>
      <param name="options">一个可确定如何打开或创建管道的枚举值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 是零长度字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为“anonymous”。 - 或 - <paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。 - 或 - <paramref name="maxNumberofServerInstances" /> 小于 1 或大于 254。 - 或 - <paramref name="options" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeOptions" /> 值。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pipeName" /> 包含冒号（“:”）。</exception>
      <exception cref="T:System.PlatformNotSupportedException">操作系统是 Windows Millennium Edition、Windows 98 或 Windows 95，它们不被支持。</exception>
      <exception cref="T:System.IO.IOException">已超出最大服务器实例数。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32)">
      <summary>使用指定的管道名称、管道方向、服务器实例的最大数目、传输模式、管道选项和建议的输入输出缓冲区大小初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 类的一个新实例。</summary>
      <param name="pipeName">管道的名称。</param>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <param name="maxNumberOfServerInstances">共享同一名称的服务器实例的最大数目。</param>
      <param name="transmissionMode">一个可确定管道传输模式的枚举值。</param>
      <param name="options">一个可确定如何打开或创建管道的枚举值。</param>
      <param name="inBufferSize">一个大于 0 的正值，指示输入缓冲区大小。</param>
      <param name="outBufferSize">一个大于 0 的正值，指示输出缓冲区大小。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 是零长度字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为“anonymous”。 - 或 - <paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。 - 或 - <paramref name="maxNumberofServerInstances" /> 小于 1 或大于 254。 - 或 - <paramref name="options" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeOptions" /> 值。 - 或 - <paramref name="inBufferSize" /> 为负数。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pipeName" /> 包含冒号（“:”）。</exception>
      <exception cref="T:System.PlatformNotSupportedException">操作系统是 Windows Millennium Edition、Windows 98 或 Windows 95，它们不被支持。</exception>
      <exception cref="T:System.IO.IOException">已超出最大服务器实例数。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32,System.IO.Pipes.PipeSecurity)">
      <summary>使用指定的管道名称、管道方向、服务器实例的最大数目、传输模式、管道选项、建议的输入输出缓冲区大小和管道安全性初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 类的一个新实例。</summary>
      <param name="pipeName">管道的名称。</param>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <param name="maxNumberOfServerInstances">共享同一名称的服务器实例的最大数目。</param>
      <param name="transmissionMode">一个可确定管道传输模式的枚举值。</param>
      <param name="options">一个可确定如何打开或创建管道的枚举值。</param>
      <param name="inBufferSize">一个大于 0 的正值，指示输入缓冲区大小。</param>
      <param name="outBufferSize">一个大于 0 的正值，指示输出缓冲区大小。</param>
      <param name="pipeSecurity">一个对象，确定管道的访问控制和审核安全性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 是零长度字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为“anonymous”。 - 或 - <paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。 - 或 - <paramref name="maxNumberofServerInstances" /> 小于 1 或大于 254。 - 或 - <paramref name="options" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeOptions" /> 值。 - 或 - <paramref name="inBufferSize" /> 为负数。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pipeName" /> 包含冒号（“:”）。</exception>
      <exception cref="T:System.PlatformNotSupportedException">操作系统是 Windows Millennium Edition、Windows 98 或 Windows 95，它们不被支持。</exception>
      <exception cref="T:System.IO.IOException">已超出最大服务器实例数。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32,System.IO.Pipes.PipeSecurity,System.IO.HandleInheritability)">
      <summary>使用指定的管道名称、管道方向、服务器实例的最大数目、传输模式、管道选项、建议的输入输出缓冲区大小、管道安全性和继承模式初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 类的一个新实例。</summary>
      <param name="pipeName">管道的名称。</param>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <param name="maxNumberOfServerInstances">共享同一名称的服务器实例的最大数目。</param>
      <param name="transmissionMode">一个可确定管道传输模式的枚举值。</param>
      <param name="options">一个可确定如何打开或创建管道的枚举值。</param>
      <param name="inBufferSize">一个大于 0 的正值，指示输入缓冲区大小。</param>
      <param name="outBufferSize">一个大于 0 的正值，指示输出缓冲区大小。</param>
      <param name="pipeSecurity">一个对象，确定管道的访问控制和审核安全性。</param>
      <param name="inheritability">确定基础句柄能否由子进程继承的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 是零长度字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为“anonymous”。 - 或 - <paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。 - 或 - <paramref name="maxNumberofServerInstances" /> 小于 1 或大于 254。 - 或 - <paramref name="options" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeOptions" /> 值。 - 或 - <paramref name="inBufferSize" /> 为负数。 - 或 - <paramref name="inheritability" /> 不是有效的 <see cref="T:System.IO.HandleInheritability" /> 值。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pipeName" /> 包含冒号（“:”）。</exception>
      <exception cref="T:System.PlatformNotSupportedException">操作系统是 Windows Millennium Edition、Windows 98 或 Windows 95，它们不被支持。</exception>
      <exception cref="T:System.IO.IOException">已超出最大服务器实例数。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32,System.IO.Pipes.PipeSecurity,System.IO.HandleInheritability,System.IO.Pipes.PipeAccessRights)">
      <summary>使用指定的管道名称、管道方向、服务器实例的最大数目、传输模式、管道选项、建议的输入输出缓冲区大小、管道安全性、继承模式和管道访问权限初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 类的一个新实例。</summary>
      <param name="pipeName">管道的名称。</param>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <param name="maxNumberOfServerInstances">共享同一名称的服务器实例的最大数目。</param>
      <param name="transmissionMode">一个可确定管道传输模式的枚举值。</param>
      <param name="options">一个可确定如何打开或创建管道的枚举值。</param>
      <param name="inBufferSize">输入缓冲区大小。</param>
      <param name="outBufferSize">输出缓冲区大小。</param>
      <param name="pipeSecurity">一个对象，确定管道的访问控制和审核安全性。</param>
      <param name="inheritability">确定基础句柄能否由子进程继承的枚举值之一。</param>
      <param name="additionalAccessRights">枚举值之一，指定管道的访问权限。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 是零长度字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为“anonymous”。 - 或 - <paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。 - 或 - <paramref name="maxNumberofServerInstances" /> 小于 1 或大于 254。 - 或 - <paramref name="options" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeOptions" /> 值。 - 或 - <paramref name="inBufferSize" /> 为负数。 - 或 - <paramref name="inheritability" /> 不是有效的 <see cref="T:System.IO.HandleInheritability" /> 值。 - 或 - <paramref name="additionalAccessRights" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeAccessRights" /> 值。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pipeName" /> 包含冒号（“:”）。</exception>
      <exception cref="T:System.PlatformNotSupportedException">操作系统是 Windows Millennium Edition、Windows 98 或 Windows 95，它们不被支持。</exception>
      <exception cref="T:System.IO.IOException">已超出最大服务器实例数。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.BeginWaitForConnection(System.AsyncCallback,System.Object)">
      <summary>开始异步操作以等待客户端建立连接。</summary>
      <returns>一个引用该异步请求的对象。</returns>
      <param name="callback">客户端连接到 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 对象时调用的方法。</param>
      <param name="state">一个用户提供的对象，它将该特定的异步请求与其他请求区别开来。</param>
      <exception cref="T:System.InvalidOperationException">管道未异步打开。 - 或 - 已建立管道连接。 - 或 - 尚未设置管道句柄。</exception>
      <exception cref="T:System.IO.IOException">管道连接已中断。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.Disconnect">
      <summary>断开当前连接。</summary>
      <exception cref="T:System.InvalidOperationException">尚未建立管道连接。 - 或 - 连接的管道已断开。 - 或 - 尚未设置管道句柄。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.EndWaitForConnection(System.IAsyncResult)">
      <summary>结束异步操作以等待客户端建立连接。</summary>
      <param name="asyncResult">挂起的异步请求。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">管道未异步打开。 - 或 - 尚未设置管道句柄。</exception>
      <exception cref="T:System.IO.IOException">管道连接已中断。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.GetImpersonationUserName">
      <summary>获取管道另一端的客户端用户名。</summary>
      <returns>管道另一端的客户端用户名。</returns>
      <exception cref="T:System.InvalidOperationException">尚未建立管道连接。 - 或 - 连接的管道已断开。 - 或 - 尚未设置管道句柄。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.IO.IOException">管道连接已中断。 - 或 - 客户端用户名的长度不能超过 19 个字符。</exception>
    </member>
    <member name="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances">
      <summary>表示系统资源允许的服务器实例的最大数目。</summary>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.RunAsClient(System.IO.Pipes.PipeStreamImpersonationWorker)">
      <summary>模拟客户端时调用委托。</summary>
      <param name="impersonationWorker">指定要调用的方法的委托。</param>
      <exception cref="T:System.InvalidOperationException">尚未建立管道连接。 - 或 - 连接的管道已断开。 - 或 - 尚未设置管道句柄。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.IO.IOException">管道连接已中断。 - 或 - 发生了 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.WaitForConnection">
      <summary>等待客户端连接到该 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 对象。</summary>
      <exception cref="T:System.InvalidOperationException">已建立管道连接。 - 或 - 尚未设置管道句柄。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.IO.IOException">管道连接已中断。</exception>
    </member>
    <member name="T:System.IO.Pipes.PipeAccessRights">
      <summary>定义要在创建访问和审核规则时使用的访问权限。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.AccessSystemSecurity">
      <summary>指定更改系统访问控制列表 (SACL) 的权限。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ChangePermissions">
      <summary>指定更改与管道关联的安全和审核规则的权限。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.CreateNewInstance">
      <summary>指定创建新管道的权限。 设置此权限也将设置 <see cref="F:System.IO.Pipes.PipeAccessRights.Synchronize" /> 权限。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.Delete">
      <summary>指定删除管道的权限。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.FullControl">
      <summary>指定对某个管道进行完全控制并修改访问控制和审核规则的权限。 此值表示在此枚举中的所有权限的组合。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.Read">
      <summary>指定从管道读取的权限。 此权限包括 <see cref="F:System.IO.Pipes.PipeAccessRights.ReadAttributes" />、<see cref="F:System.IO.Pipes.PipeAccessRights.ReadData" />、<see cref="F:System.IO.Pipes.PipeAccessRights.ReadExtendedAttributes" /> 和 <see cref="F:System.IO.Pipes.PipeAccessRights.ReadPermissions" /> 权限。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadAttributes">
      <summary>指定从管道读取文件系统特性的权限。 这不包括读取数据、扩展文件系统特性或访问和审核规则的权限。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadData">
      <summary>指定从管道读取数据的权限。 这不包括读取文件系统特性、扩展文件系统特性或访问和审核规则的权限。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadExtendedAttributes">
      <summary>指定从管道读取扩展文件系统特性的权限。 这不包括读取数据、文件系统特性或访问和审核规则的权限。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadPermissions">
      <summary>指定从管道读取访问和审核规则的权限。 这不包括读取数据、文件系统特性或扩展文件系统特性的权限。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadWrite">
      <summary>指定从管道进行读和写的权限。 此权限包括 <see cref="F:System.IO.Pipes.PipeAccessRights.ReadAttributes" />、<see cref="F:System.IO.Pipes.PipeAccessRights.ReadData" />、<see cref="F:System.IO.Pipes.PipeAccessRights.ReadExtendedAttributes" />、<see cref="F:System.IO.Pipes.PipeAccessRights.ReadPermissions" />、<see cref="F:System.IO.Pipes.PipeAccessRights.WriteAttributes" />、<see cref="F:System.IO.Pipes.PipeAccessRights.WriteData" /> 和 <see cref="F:System.IO.Pipes.PipeAccessRights.WriteExtendedAttributes" /> 权限。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.Synchronize">
      <summary>指定应用程序是否能够等待管道句柄，以便与 I/O 操作的完成保持同步。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.TakeOwnership">
      <summary>指定更改管道的所有者的权限。 请注意：管道的所有者对该资源拥有完全权限。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.Write">
      <summary>指定写入管道的权限。 此权限包括 <see cref="F:System.IO.Pipes.PipeAccessRights.WriteAttributes" />、<see cref="F:System.IO.Pipes.PipeAccessRights.WriteData" /> 和 <see cref="F:System.IO.Pipes.PipeAccessRights.WriteExtendedAttributes" /> 权限。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.WriteAttributes">
      <summary>指定向管道写入文件系统特性的权限。 这不包括写入数据或扩展文件系统特性的权限。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.WriteData">
      <summary>指定向管道写入数据的权限。 这不包括写入文件系统特性或扩展文件系统特性的权限。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.WriteExtendedAttributes">
      <summary>指定向管道写入扩展文件系统特性的权限。 这不包括写入文件特性或数据的权限。</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeAccessRule">
      <summary>表示访问控制项 (ACE) 的抽象，该访问控制项定义了管道的访问规则。</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeAccessRule.#ctor(System.Security.Principal.IdentityReference,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AccessControlType)">
      <summary>使用指定的标识、管道访问权限和访问控制类型来初始化 <see cref="T:System.IO.Pipes.PipeAccessRule" /> 类的一个新实例。</summary>
      <param name="identity">封装对用户帐户的引用的 <see cref="T:System.Security.Principal.IdentityReference" /> 对象。</param>
      <param name="rights">
        <see cref="T:System.IO.Pipes.PipeAccessRights" /> 值之一，该值指定与访问规则关联的操作的类型。</param>
      <param name="type">
        <see cref="T:System.Security.AccessControl.AccessControlType" /> 值之一，该值指定是允许还是拒绝该操作。</param>
    </member>
    <member name="M:System.IO.Pipes.PipeAccessRule.#ctor(System.String,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AccessControlType)">
      <summary>使用指定的标识、管道访问权限和访问控制类型来初始化 <see cref="T:System.IO.Pipes.PipeAccessRule" /> 类的一个新实例。</summary>
      <param name="identity">用户帐户的名称。</param>
      <param name="rights">
        <see cref="T:System.IO.Pipes.PipeAccessRights" /> 值之一，该值指定与访问规则关联的操作的类型。</param>
      <param name="type">
        <see cref="T:System.Security.AccessControl.AccessControlType" /> 值之一，该值指定是允许还是拒绝该操作。</param>
    </member>
    <member name="P:System.IO.Pipes.PipeAccessRule.PipeAccessRights">
      <summary>获取与当前 <see cref="T:System.IO.Pipes.PipeAccessRule" /> 对象关联的 <see cref="T:System.IO.Pipes.PipeAccessRights" /> 标志。</summary>
      <returns>
        <see cref="T:System.IO.Pipes.PipeAccessRights" /> 值的按位组合。</returns>
    </member>
    <member name="T:System.IO.Pipes.PipeAuditRule">
      <summary>表示访问控制项 (ACE) 的抽象，该访问控制项定义了管道的审核规则。</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeAuditRule.#ctor(System.Security.Principal.IdentityReference,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AuditFlags)">
      <summary>为 <see cref="T:System.Security.Principal.IdentityReference" /> 对象中指定的用户帐户初始化 <see cref="T:System.IO.Pipes.PipeAuditRule" /> 类的一个新实例。</summary>
      <param name="identity">封装对用户帐户的引用的 <see cref="T:System.Security.Principal.IdentityReference" /> 对象。</param>
      <param name="rights">
        <see cref="T:System.IO.Pipes.PipeAccessRights" /> 值之一，该值指定与访问规则关联的操作的类型。</param>
      <param name="flags">
        <see cref="T:System.Security.AccessControl.AuditFlags" /> 值之一，该值指定何时执行审核。</param>
    </member>
    <member name="M:System.IO.Pipes.PipeAuditRule.#ctor(System.String,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AuditFlags)">
      <summary>为命名的用户帐户初始化 <see cref="T:System.IO.Pipes.PipeAuditRule" /> 类的一个新实例。</summary>
      <param name="identity">用户帐户的名称。</param>
      <param name="rights">
        <see cref="T:System.IO.Pipes.PipeAccessRights" /> 值之一，该值指定与访问规则关联的操作的类型。</param>
      <param name="flags">
        <see cref="T:System.Security.AccessControl.AuditFlags" /> 值之一，该值指定何时执行审核。</param>
    </member>
    <member name="P:System.IO.Pipes.PipeAuditRule.PipeAccessRights">
      <summary>获取与当前 <see cref="T:System.IO.Pipes.PipeAuditRule" /> 对象关联的 <see cref="T:System.IO.Pipes.PipeAccessRights" /> 标志。</summary>
      <returns>
        <see cref="T:System.IO.Pipes.PipeAccessRights" /> 值的按位组合。</returns>
    </member>
    <member name="T:System.IO.Pipes.PipeDirection">
      <summary>指定管道的方向。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeDirection.In">
      <summary>指定管道方向为向内。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeDirection.InOut">
      <summary>指定管道方向为双向。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeDirection.Out">
      <summary>指定管道方向为向外。</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeOptions">
      <summary>提供创建 <see cref="T:System.IO.Pipes.PipeStream" /> 对象的选项。 此枚举有一个允许其成员值按位组合的 <see cref="T:System.FlagsAttribute" /> 特性。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeOptions.Asynchronous">
      <summary>指示管道可用于异步读取和写入。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeOptions.None">
      <summary>指示没有其他参数。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeOptions.WriteThrough">
      <summary>指示系统应通过任何中间缓存直接写入管道。</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeSecurity">
      <summary>表示管道的访问控制和审核安全。</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.#ctor">
      <summary>初始化 <see cref="T:System.IO.Pipes.PipeSecurity" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IO.Pipes.PipeSecurity.AccessRightType">
      <summary>获取与当前 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象关联的可保护对象的 <see cref="T:System.Type" />。</summary>
      <returns>与当前 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象关联的可保护对象的类型。</returns>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
      <summary>用指定的值初始化 <see cref="T:System.Security.AccessControl.AccessRule" /> 类的新实例。</summary>
      <returns>此方法所创建的 <see cref="T:System.Security.AccessControl.AccessRule" /> 对象。</returns>
      <param name="identityReference">应用访问规则的标识。 它必须是可以转换为 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 对象的对象。</param>
      <param name="accessMask">此规则的访问掩码。 访问掩码是一个 32 位的匿名位集合，其含义由单个集成器定义</param>
      <param name="isInherited">如果此规则是从父容器继承的，则为 true；否则为 false。</param>
      <param name="inheritanceFlags">
        <see cref="T:System.Security.AccessControl.InheritanceFlags" /> 值之一，指定访问规则的继承属性。</param>
      <param name="propagationFlags">
        <see cref="T:System.Security.AccessControl.PropagationFlags" /> 值之一，指定是否自动传播继承的访问规则。 如果 <paramref name="inheritanceFlags" /> 设置为 <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />，则将忽略传播标志。</param>
      <param name="type">指定有效的访问控制类型。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="accessMask" />、<paramref name="inheritanceFlags" />、<paramref name="propagationFlags" /> 或 <paramref name="type" /> 指定了一个无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identityReference" /> 为 null。 - 或 - <paramref name="accessMask" /> 是零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="identityReference" /> 既不属于 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 类型，也不属于可以转换为 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 类型的类型（如 <see cref="T:System.Security.Principal.NTAccount" />）。</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeSecurity.AccessRuleType">
      <summary>获取与当前 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象的访问规则关联的对象的 <see cref="T:System.Type" />。</summary>
      <returns>与当前 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象的访问规则关联的对象的类型。</returns>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.AddAccessRule(System.IO.Pipes.PipeAccessRule)">
      <summary>将访问规则添加到与当前 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象关联的自定义访问控制列表 (DACL)。</summary>
      <param name="rule">要添加的访问规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 参数为 null。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.AddAuditRule(System.IO.Pipes.PipeAuditRule)">
      <summary>将审核规则添加到与当前 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象关联的系统访问控制列表 (SACL)。</summary>
      <param name="rule">要添加的审核规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 参数为 null。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
      <summary>用指定的值初始化 <see cref="T:System.Security.AccessControl.AuditRule" /> 类的新实例。</summary>
      <returns>此方法所创建的 <see cref="T:System.Security.AccessControl.AuditRule" /> 对象。</returns>
      <param name="identityReference">应用访问规则的标识。 它必须是可以转换为 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 对象的对象。</param>
      <param name="accessMask">此规则的访问掩码。 访问掩码是一个 32 位的匿名位集合，其含义由单个集成器定义</param>
      <param name="isInherited">如果此规则是从父容器继承，则为 true；否则为 false。</param>
      <param name="inheritanceFlags">
        <see cref="T:System.Security.AccessControl.InheritanceFlags" /> 值之一，指定访问规则的继承属性。</param>
      <param name="propagationFlags">
        <see cref="T:System.Security.AccessControl.PropagationFlags" /> 值之一，指定是否自动传播继承的访问规则。 如果 <paramref name="inheritanceFlags" /> 设置为 <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />，则将忽略传播标志。</param>
      <param name="flags">
        <see cref="T:System.Security.AccessControl.AuditFlags" /> 值之一，指定有效的访问控制类型。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="accessMask" />、<paramref name="inheritanceFlags" />、<paramref name="propagationFlags" /> 或 <paramref name="flags" /> 属性指定了无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identityReference" /> 属性为 null。 - 或 - <paramref name="accessMask" /> 属性零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="identityReference" /> 属性既不是 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 类型，也不是可转换为 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 类型的类型，如 <see cref="T:System.Security.Principal.NTAccount" />。</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeSecurity.AuditRuleType">
      <summary>获取与当前 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象的审核规则关联的 <see cref="T:System.Type" /> 对象。</summary>
      <returns>与当前 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象的审核规则关联的对象的类型。</returns>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.Persist(System.Runtime.InteropServices.SafeHandle)">
      <summary>将与当前 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象关联的安全描述符的指定部分保存到永久性存储器。</summary>
      <param name="handle">与当前 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象关联的可保护对象的句柄。</param>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.Persist(System.String)">
      <summary>将与当前 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象关联的安全描述符的指定部分保存到永久性存储器。</summary>
      <param name="name">与当前 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象关联的可保护对象的名称。</param>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAccessRule(System.IO.Pipes.PipeAccessRule)">
      <summary>将访问规则从与当前 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象关联的自定义访问控制列表 (DACL) 中移除。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。</returns>
      <param name="rule">要移除的访问规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 参数为 null。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAccessRuleSpecific(System.IO.Pipes.PipeAccessRule)">
      <summary>将指定的访问规则从与当前 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象关联的自定义访问控制列表 (DACL) 中移除。</summary>
      <param name="rule">要移除的访问规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 参数为 null。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAuditRule(System.IO.Pipes.PipeAuditRule)">
      <summary>将审核规则从与当前 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象关联的系统访问控制列表 (SACL) 中移除。</summary>
      <returns>true （如果审核规则已移除）；否则为false</returns>
      <param name="rule">要移除的审核规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 参数为 null。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAuditRuleAll(System.IO.Pipes.PipeAuditRule)">
      <summary>将与指定的审核规则具有相同安全标识符的所有审核规则从与当前 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象关联的系统访问控制列表 (SACL) 中移除。</summary>
      <param name="rule">要移除的审核规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 参数为 null。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAuditRuleSpecific(System.IO.Pipes.PipeAuditRule)">
      <summary>将指定的审核规则从与当前 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象关联的系统访问控制列表 (SACL) 中移除。</summary>
      <param name="rule">要移除的审核规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 参数为 null。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.ResetAccessRule(System.IO.Pipes.PipeAccessRule)">
      <summary>将所有访问规则从与当前 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象关联的自定义访问控制列表 (DACL) 中移除，然后添加指定的访问规则。</summary>
      <param name="rule">要添加的访问规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 参数为 null。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.SetAccessRule(System.IO.Pipes.PipeAccessRule)">
      <summary>在与当前 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象关联的自定义访问控制列表 (DACL) 中设置访问规则。</summary>
      <param name="rule">要设置的规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 参数为 null。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.SetAuditRule(System.IO.Pipes.PipeAuditRule)">
      <summary>在与当前 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象关联的系统访问控制列表 (SACL) 中设置审核规则。</summary>
      <param name="rule">要设置的规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 参数为 null。</exception>
    </member>
    <member name="T:System.IO.Pipes.PipeStream">
      <summary>公开管道周围的 <see cref="T:System.IO.Stream" /> 对象，该对象同时支持匿名管道和命名管道。</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)">
      <summary>使用指定的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值和缓冲区大小初始化 <see cref="T:System.IO.Pipes.PipeStream" /> 类的一个新实例。</summary>
      <param name="direction">
        <see cref="T:System.IO.Pipes.PipeDirection" /> 值之一，指示管道对象的方向。</param>
      <param name="bufferSize">一个大于或等于 0 的正 <see cref="T:System.Int32" /> 值，指示缓冲区大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。 - 或 - <paramref name="bufferSize" /> 小于 0。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)">
      <summary>使用指定的 <see cref="T:System.IO.Pipes.PipeDirection" />、<see cref="T:System.IO.Pipes.PipeTransmissionMode" /> 和缓冲区大小初始化 <see cref="T:System.IO.Pipes.PipeStream" /> 类的一个新实例。</summary>
      <param name="direction">
        <see cref="T:System.IO.Pipes.PipeDirection" /> 值之一，指示管道对象的方向。</param>
      <param name="transmissionMode">
        <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> 值之一，指示管道对象的传输模式。</param>
      <param name="outBufferSize">一个大于或等于 0 的正 <see cref="T:System.Int32" /> 值，指示缓冲区大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。 - 或 - <paramref name="transmissionMode" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> 值。 - 或 - <paramref name="bufferSize" /> 小于 0。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步读操作。</summary>
      <returns>引用异步读取的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="buffer">要读入数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从此处开始读取。</param>
      <param name="count">最多读取的字节数。</param>
      <param name="callback">异步读操作完成后调用的方法。</param>
      <param name="state">一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。 - 或 - <paramref name="count" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> 大于 <paramref name="buffer" /> 中的可用字节数。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.NotSupportedException">管道不支持读操作。</exception>
      <exception cref="T:System.InvalidOperationException">管道已断开连接、正在等待连接或尚未设置句柄。</exception>
      <exception cref="T:System.IO.IOException">管道已中断或出现其他 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步写操作。</summary>
      <returns>一个引用异步写操作的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="buffer">包含要写入当前流的数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
      <param name="count">最多写入的字节数。</param>
      <param name="callback">异步写操作完成后调用的方法。</param>
      <param name="state">一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。 - 或 - <paramref name="count" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> 大于 <paramref name="buffer" /> 中的可用字节数。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.NotSupportedException">管道不支持写操作。</exception>
      <exception cref="T:System.InvalidOperationException">管道已断开连接、正在等待连接或尚未设置句柄。</exception>
      <exception cref="T:System.IO.IOException">管道已中断或出现其他 I/O 错误。</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.CanRead">
      <summary>获取一个值，该值指示当前流是否支持读操作。</summary>
      <returns>如果流支持读操作，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.CanSeek">
      <summary>获取一个值，该值指示当前流是否支持查找操作。</summary>
      <returns>所有情况下均为 false。</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.CanWrite">
      <summary>获取一个值，该值指示当前流是否支持写操作。</summary>
      <returns>如果流支持写操作，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.CheckPipePropertyOperations">
      <summary>验证管道是否处于可供获取或设置属性的正确状态。</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.CheckReadOperations">
      <summary>验证管道是否处于可供进行读操作的连接状态。</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.CheckWriteOperations">
      <summary>验证管道是否处于可供进行写操作的连接状态。</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
      <summary>释放 <see cref="T:System.IO.Pipes.PipeStream" /> 类使用的非托管资源，并可以选择释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
      <summary>结束挂起的异步读取请求。</summary>
      <returns>已读取的字节数。 返回值 0 指示已到达流的末尾（管道已关闭）。</returns>
      <param name="asyncResult">对挂起的异步请求的引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 并非源自当前流上的 <see cref="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.IO.IOException">此流关闭或发生内部错误。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
      <summary>结束挂起的异步写入请求。</summary>
      <param name="asyncResult">对挂起的异步请求的引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 并非源自当前流上的 <see cref="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.IO.IOException">此流关闭或发生内部错误。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Flush">
      <summary>清除当前流的缓冲区，并使所有缓冲的数据都写入到基础设备。</summary>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.NotSupportedException">管道不支持写操作。</exception>
      <exception cref="T:System.IO.IOException">管道已中断或出现其他 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.GetAccessControl">
      <summary>获取一个 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象，该对象封装当前 <see cref="T:System.IO.Pipes.PipeStream" /> 对象所描述管道的访问控制列表 (ACL) 项。</summary>
      <returns>一个 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象，该对象封装当前 <see cref="T:System.IO.Pipes.PipeStream" /> 对象所描述管道的访问控制列表 (ACL) 项。</returns>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.UnauthorizedAccessException">用于设置安全信息的基础调用失败。</exception>
      <exception cref="T:System.InvalidOperationException">用于设置安全信息的基础调用失败。</exception>
      <exception cref="T:System.NotSupportedException">用于设置安全信息的基础调用失败。</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.InBufferSize">
      <summary>获取管道的入站缓冲区的大小（以字节为单位）。</summary>
      <returns>一个整数值，表示入站缓冲区的大小（以字节为单位）。</returns>
      <exception cref="T:System.NotSupportedException">该流不可读取。</exception>
      <exception cref="T:System.InvalidOperationException">管道正在等待连接。</exception>
      <exception cref="T:System.IO.IOException">管道已中断或出现其他 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)">
      <summary>从指定的 <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /> 对象中初始化 <see cref="T:System.IO.Pipes.PipeStream" /> 对象。</summary>
      <param name="handle">要初始化的管道的 <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /> 对象。</param>
      <param name="isExposed">要公开句柄，则为 true；否则为 false。</param>
      <param name="isAsync">true 指示句柄已异步打开；否则为 false。</param>
      <exception cref="T:System.IO.IOException">句柄无法绑定到管道。</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsAsync">
      <summary>获取一个值，该值指示 <see cref="T:System.IO.Pipes.PipeStream" /> 对象是异步打开还是同步打开。</summary>
      <returns>如果 <see cref="T:System.IO.Pipes.PipeStream" /> 对象是异步打开的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsConnected">
      <summary>获取或设置一个值，该值指示是否已连接 <see cref="T:System.IO.Pipes.PipeStream" /> 对象。</summary>
      <returns>如果已连接 <see cref="T:System.IO.Pipes.PipeStream" /> 对象，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsHandleExposed">
      <summary>获取一个值，该值指示是否公开了 <see cref="T:System.IO.Pipes.PipeStream" /> 对象的句柄。</summary>
      <returns>如果公开了 <see cref="T:System.IO.Pipes.PipeStream" /> 对象的句柄，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsMessageComplete">
      <summary>获取一个值，该值指示最近的读操作返回的消息中是否有更多数据。</summary>
      <returns>如果消息中没有更多要读取的字符，则为 true；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">未连接管道。 - 或 - 尚未设置管道句柄。 - 或 - 管道的 <see cref="P:System.IO.Pipes.PipeStream.ReadMode" /> 属性值不是 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.Length">
      <summary>获取流长度（以字节为单位）。</summary>
      <returns>在所有情况下均为 0。</returns>
      <exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.OutBufferSize">
      <summary>获取管道的出站缓冲区的大小（以字节为单位）。</summary>
      <returns>出站缓冲区的大小（以字节为单位）。</returns>
      <exception cref="T:System.NotSupportedException">该流不可写入。</exception>
      <exception cref="T:System.InvalidOperationException">管道正在等待连接。</exception>
      <exception cref="T:System.IO.IOException">管道已中断或出现其他 I/O 错误。</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.Position">
      <summary>获取或设置当前流的当前位置。</summary>
      <returns>在所有情况下均为 0。</returns>
      <exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>从流中读取字节块，并将数据写入指定的缓冲区。</summary>
      <returns>读取到 <paramref name="buffer" /> 的总字节数。 如果当前可用的字节数没有请求的那么多，则此数小于请求的字节数；或如果已到达流的末尾，则为零。</returns>
      <param name="buffer">此方法返回时包含指定的字节数组，数组中 <paramref name="offset" /> 和 (<paramref name="offset" /> + <paramref name="count" /> - 1) 之间的值被从当前源中读取的字节替换。</param>
      <param name="offset">
        <paramref name="buffer" /> 数组中的字节偏移量，其中读取的字节将被替换。</param>
      <param name="count">最多读取的字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。 - 或 - <paramref name="count" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> 大于 <paramref name="buffer" /> 中的可用字节数。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.NotSupportedException">管道不支持读操作。</exception>
      <exception cref="T:System.InvalidOperationException">管道已断开连接、正在等待连接或尚未设置句柄。</exception>
      <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.ReadByte">
      <summary>从管道读取字节。</summary>
      <returns>强制转换为 <see cref="T:System.Int32" /> 的字节或 -1 指示到达流的末尾（管道已关闭）。</returns>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.NotSupportedException">管道不支持读操作。</exception>
      <exception cref="T:System.InvalidOperationException">管道已断开连接、正在等待连接或尚未设置句柄。</exception>
      <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.ReadMode">
      <summary>获取或设置 <see cref="T:System.IO.Pipes.PipeStream" /> 对象的读取模式。</summary>
      <returns>
        <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> 值之一，指示如何从管道读取 <see cref="T:System.IO.Pipes.PipeStream" /> 对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">提供的值不是有效的 <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> 值。</exception>
      <exception cref="T:System.NotSupportedException">提供的值并非此管道流支持的 <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> 值。</exception>
      <exception cref="T:System.InvalidOperationException">尚未设置句柄。 - 或 - 管道正在等待连接到命名客户端。</exception>
      <exception cref="T:System.IO.IOException">管道已中断或命名客户端出现 I/O 错误。</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.SafePipeHandle">
      <summary>获取当前 <see cref="T:System.IO.Pipes.PipeStream" /> 对象所封装的本地管道末端的安全句柄。</summary>
      <returns>由当前 <see cref="T:System.IO.Pipes.PipeStream" /> 对象所封装的管道的一个 <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">尚未设置管道句柄。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>将当前流的当前位置设置为指定值。</summary>
      <returns>流中的新位置。</returns>
      <param name="offset">相对于 <paramref name="origin" /> 的点，从此处开始查找。</param>
      <param name="origin">使用 <see cref="T:System.IO.SeekOrigin" /> 类型的值，将开始位置、结束位置或当前位置指定为 <paramref name="offset" /> 的参考点。</param>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)">
      <summary>将 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象所指定的访问控制列表 (ACL) 项应用于由当前 <see cref="T:System.IO.Pipes.PipeStream" /> 对象指定的管道。</summary>
      <param name="pipeSecurity">一个 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象，该对象指定要应用于当前管道的访问控制列表 (ACL) 项。</param>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeSecurity" /> 为 null。</exception>
      <exception cref="T:System.UnauthorizedAccessException">用于设置安全信息的基础调用失败。</exception>
      <exception cref="T:System.InvalidOperationException">用于设置安全信息的基础调用失败。</exception>
      <exception cref="T:System.NotSupportedException">用于设置安全信息的基础调用失败。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.SetLength(System.Int64)">
      <summary>将当前流的长度设为指定值。</summary>
      <param name="value">流的新长度。</param>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.TransmissionMode">
      <summary>获取当前管道支持的管道传输模式。</summary>
      <returns>
        <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> 值之一，指示当前管道支持的传输模式。</returns>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">尚未设置句柄。 - 或 - 管道正在等待连接匿名客户端/服务器操作，或正在等待连接命名管道。</exception>
      <exception cref="T:System.IO.IOException">管道已中断或出现其他 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.WaitForPipeDrain">
      <summary>等待管道另一端读取所有发送的字节。</summary>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.NotSupportedException">管道不支持写操作。</exception>
      <exception cref="T:System.IO.IOException">管道已中断或出现其他 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>使用缓冲区中的数据将字节块写入当前流。</summary>
      <param name="buffer">包含要写入管道的数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
      <param name="count">要写入当前流的最大字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。 - 或 - <paramref name="count" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> 大于 <paramref name="buffer" /> 中的可用字节数。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.NotSupportedException">管道不支持写操作。</exception>
      <exception cref="T:System.IO.IOException">管道已中断或出现其他 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.WriteByte(System.Byte)">
      <summary>将字节写入当前流。</summary>
      <param name="value">要写入流的字节。</param>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.NotSupportedException">管道不支持写操作。</exception>
      <exception cref="T:System.InvalidOperationException">管道已断开连接、正在等待连接或尚未设置句柄。</exception>
      <exception cref="T:System.IO.IOException">管道已中断或出现其他 I/O 错误。</exception>
    </member>
    <member name="T:System.IO.Pipes.PipeStreamImpersonationWorker">
      <summary>表示作为客户端调用的方法。</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeTransmissionMode">
      <summary>指定管道的传输模式。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeTransmissionMode.Byte">
      <summary>指示管道内的数据作为字节流进行传输和读取。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeTransmissionMode.Message">
      <summary>指示管道内的数据作为消息流进行传输和读取。</summary>
    </member>
    <member name="T:System.Linq.Enumerable">
      <summary>提供一组用于查询实现 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的对象的 static（在 Visual Basic 中为 Shared）方法。</summary>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
      <summary>对序列应用累加器函数。</summary>
      <returns>累加器的最终值。</returns>
      <param name="source">要聚合的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="func">要对每个元素调用的累加器函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
      <summary>对序列应用累加器函数。 将指定的种子值用作累加器初始值。</summary>
      <returns>累加器的最终值。</returns>
      <param name="source">要聚合的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="seed">累加器的初始值。</param>
      <param name="func">要对每个元素调用的累加器函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TAccumulate">累加器值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>对序列应用累加器函数。 将指定的种子值用作累加器的初始值，并使用指定的函数选择结果值。</summary>
      <returns>已转换的累加器最终值。</returns>
      <param name="source">要聚合的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="seed">累加器的初始值。</param>
      <param name="func">要对每个元素调用的累加器函数。</param>
      <param name="resultSelector">将累加器的最终值转换为结果值的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TAccumulate">累加器值的类型。</typeparam>
      <typeparam name="TResult">结果值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>确定序列中的所有元素是否满足条件。</summary>
      <returns>如果源序列中的每个元素都通过指定谓词中的测试，或者序列为空，则为 true；否则为 false。</returns>
      <param name="source">包含要应用谓词的元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>确定序列是否包含任何元素。</summary>
      <returns>如果源序列包含任何元素，则为 true；否则为 false。</returns>
      <param name="source">要检查是否为空的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>确定序列中的任何元素是否都满足条件。</summary>
      <returns>如果源序列中的任何元素都通过指定谓词中的测试，则为 true；否则为 false。</returns>
      <param name="source">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素将应用谓词。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的输入。</summary>
      <returns>类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的输入序列。</returns>
      <param name="source">类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>计算 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算平均值的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>计算 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算平均值的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>计算 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算平均值的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>计算 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算平均值的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>计算可以为 null 的 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>值序列的平均值；如果源序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算平均值的可以为 null 的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">序列中元素之和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>计算可以为 null 的 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>值序列的平均值；如果源序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算平均值的可以为 null 的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>值序列的平均值；如果源序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算平均值的、可以为 null 的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">序列中元素之和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>值序列的平均值；如果源序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算平均值的可以为 null 的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">序列中元素之和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>计算可以为 null 的 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>值序列的平均值；如果源序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算平均值的可以为 null 的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>计算 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算平均值的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>计算 <see cref="T:System.Decimal" /> 值序列的平均值，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">用于计算平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
      <exception cref="T:System.OverflowException">序列中元素之和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>计算 <see cref="T:System.Double" /> 值序列的平均值，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>计算 <see cref="T:System.Int32" /> 值序列的平均值，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
      <exception cref="T:System.OverflowException">序列中元素之和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>计算 <see cref="T:System.Int64" /> 值序列的平均值，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">source 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
      <exception cref="T:System.OverflowException">序列中元素之和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>计算可以为 null 的 <see cref="T:System.Decimal" /> 值序列的平均值，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>值序列的平均值；如果源序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">序列中元素之和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>计算可以为 null 的 <see cref="T:System.Double" /> 值序列的平均值，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>值序列的平均值；如果源序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int32" /> 值序列的平均值，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>值序列的平均值；如果源序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">序列中元素之和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int64" /> 值序列的平均值，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>值序列的平均值；如果源序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>计算可以为 null 的 <see cref="T:System.Single" /> 值序列的平均值，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>值序列的平均值；如果源序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>计算 <see cref="T:System.Single" /> 值序列的平均值，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
      <summary>将 <see cref="T:System.Collections.IEnumerable" /> 的元素强制转换为指定的类型。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含强制转换为指定类型的源序列的每个元素。</returns>
      <param name="source">包含要转换成类型 <paramref name="TResult" /> 的元素的 <see cref="T:System.Collections.IEnumerable" />。</param>
      <typeparam name="TResult">
        <paramref name="source" /> 中的元素要强制转换成的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidCastException">序列中的元素不能强制转换为 <paramref name="TResult" /> 类型。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>连接两个序列。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含两个输入序列的连接元素。</returns>
      <param name="first">要连接的第一个序列。</param>
      <param name="second">要与第一个序列连接的序列。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>通过使用默认的相等比较器确定序列是否包含指定的元素。</summary>
      <returns>如果源序列包含具有指定值的元素，则为 true；否则为 false。</returns>
      <param name="source">要在其中定位某个值的序列。</param>
      <param name="value">要在序列中定位的值。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 确定序列是否包含指定的元素。</summary>
      <returns>如果源序列包含具有指定值的元素，则为 true；否则为 false。</returns>
      <param name="source">要在其中定位某个值的序列。</param>
      <param name="value">要在序列中定位的值。</param>
      <param name="comparer">一个对值进行比较的相等比较器。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回序列中的元素数量。</summary>
      <returns>输入序列中的元素数量。</returns>
      <param name="source">包含要计数的元素的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>返回一个数字，表示在指定的序列中满足条件的元素数量。</summary>
      <returns>一个数字，表示序列中满足谓词函数条件的元素数量。</returns>
      <param name="source">包含要测试和计数的元素的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回指定序列的元素；如果序列为空，则返回单一实例集合中的类型参数的默认值。</summary>
      <returns>如果 <paramref name="source" /> 为空，则为包含 <paramref name="TSource" /> 类型的默认值的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象；否则为 <paramref name="source" />。</returns>
      <param name="source">序列为空时返回默认值的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>返回指定序列中的元素；如果序列为空，则返回单一实例集合中的指定值。</summary>
      <returns>如果 <paramref name="source" /> 为空，则为包含 <paramref name="defaultValue" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />；否则为 <paramref name="source" />。</returns>
      <param name="source">序列为空时为其返回指定值的序列。</param>
      <param name="defaultValue">序列为空时要返回的值。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>通过使用默认的相等比较器对值进行比较返回序列中的非重复元素。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含源序列中的非重复元素。</returns>
      <param name="source">要从中移除重复元素的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较返回序列中的非重复元素。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含源序列中的非重复元素。</returns>
      <param name="source">要从中移除重复元素的序列。</param>
      <param name="comparer">用于比较值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>返回序列中指定索引处的元素。</summary>
      <returns>源序列中指定位置处的元素。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="index">要检索的从零开始的元素索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于等于 <paramref name="source" /> 中的元素数量。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>返回序列中指定索引处的元素；如果索引超出范围，则返回默认值。</summary>
      <returns>如果索引超出源序列的范围，则为 default(<paramref name="TSource" />)；否则为源序列中指定位置处的元素。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="index">要检索的从零开始的元素索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Empty``1">
      <summary>返回一个具有指定的类型参数的空 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</summary>
      <returns>一个类型参数为 <paramref name="TResult" /> 的空 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <typeparam name="TResult">分配给返回的泛型 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的类型参数的类型。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>通过使用默认的相等比较器对值进行比较生成两个序列的差集。</summary>
      <returns>包含两个序列元素的差集的序列。</returns>
      <param name="first">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，将返回其也不在 <paramref name="second" /> 中的元素。</param>
      <param name="second">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，如果它的元素也出现在第一个序列中，则将导致从返回的序列中移除这些元素。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较产生两个序列的差集。</summary>
      <returns>包含两个序列元素的差集的序列。</returns>
      <param name="first">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，将返回其也不在 <paramref name="second" /> 中的元素。</param>
      <param name="second">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，如果它的元素也出现在第一个序列中，则将导致从返回的序列中移除这些元素。</param>
      <param name="comparer">用于比较值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回序列中的第一个元素。</summary>
      <returns>返回指定序列中的第一个元素。</returns>
      <param name="source">要返回其第一个元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>返回序列中满足指定条件的第一个元素。</summary>
      <returns>序列中通过指定谓词函数中的测试的第一个元素。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有元素满足 <paramref name="predicate" /> 中的条件。 - 或 - 源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回序列中的第一个元素；如果序列中不包含任何元素，则返回默认值。</summary>
      <returns>如果 <paramref name="source" /> 为空，则返回 default(<paramref name="TSource" />)；否则返回 <paramref name="source" /> 中的第一个元素。</returns>
      <param name="source">要返回其第一个元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>返回序列中满足条件的第一个元素；如果未找到这样的元素，则返回默认值。</summary>
      <returns>如果 <paramref name="source" /> 为空或没有元素通过 <paramref name="predicate" /> 指定的测试，则返回 default(<paramref name="TSource" />)，否则返回 <paramref name="source" /> 中通过 <paramref name="predicate" /> 指定的测试的第一个元素。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组。</summary>
      <returns>在 C# 中为 IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;，或者在 Visual Basic 中为 IEnumerable(Of IGrouping(Of TKey, TSource))，其中每个 <see cref="T:System.Linq.IGrouping`2" /> 对象都包含一个对象序列和一个键。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并使用指定的比较器对键进行比较。</summary>
      <returns>在 C# 中为 IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;，或者在 Visual Basic 中为 IEnumerable(Of IGrouping(Of TKey, TSource))，其中每个 <see cref="T:System.Linq.IGrouping`2" /> 对象都包含一个对象集合和一个键。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="comparer">一个用于对键进行比较的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且通过使用指定的函数对每个组中的元素进行投影。</summary>
      <returns>在 C# 中为 IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;，或者在 Visual Basic 中为 IEnumerable(Of IGrouping(Of TKey, TElement))，其中每个 <see cref="T:System.Linq.IGrouping`2" /> 对象都包含一个类型为 <paramref name="TElement" /> 的对象集合和一个键。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.IGrouping`2" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据键选择器函数对序列中的元素进行分组。 通过使用比较器对键进行比较，并且通过使用指定的函数对每个组的元素进行投影。</summary>
      <returns>在 C# 中为 IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;，或者在 Visual Basic 中为 IEnumerable(Of IGrouping(Of TKey, TElement))，其中每个 <see cref="T:System.Linq.IGrouping`2" /> 对象都包含一个类型为 <paramref name="TElement" /> 的对象集合和一个键。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的函数。</param>
      <param name="comparer">一个用于对键进行比较的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.IGrouping`2" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。 通过使用指定的函数对每个组的元素进行投影。</summary>
      <returns>
        <paramref name="TResult" /> 类型的元素的集合，其中每个元素都表示对一个组及其键的投影。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TElement">每个 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 返回的结果值的类型。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。 通过使用指定的比较器对键值进行比较，并且通过使用指定的函数对每个组的元素进行投影。</summary>
      <returns>
        <paramref name="TResult" /> 类型的元素的集合，其中每个元素都表示对一个组及其键的投影。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <param name="comparer">一个用于对键进行比较的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TElement">每个 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 返回的结果值的类型。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。</summary>
      <returns>
        <paramref name="TResult" /> 类型的元素的集合，其中每个元素都表示对一个组及其键的投影。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 返回的结果值的类型。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。 通过使用指定的比较器对键进行比较。</summary>
      <returns>
        <paramref name="TResult" /> 类型的元素的集合，其中每个元素都表示对一个组及其键的投影。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <param name="comparer">一个用于对键进行比较的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 返回的结果值的类型。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>基于键相等对两个序列的元素进行关联并对结果进行分组。 使用默认的相等比较器对键进行比较。</summary>
      <returns>一个包含 <paramref name="TResult" /> 类型的元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，这些元素可通过对两个序列执行分组联接获取。</returns>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从第一个序列的元素和第二个序列的匹配元素集合中创建结果元素的函数。</param>
      <typeparam name="TOuter">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>基于键相等对两个序列的元素进行关联并对结果进行分组。 使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</summary>
      <returns>一个包含 <paramref name="TResult" /> 类型的元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，这些元素可通过对两个序列执行分组联接获取。</returns>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从第一个序列的元素和第二个序列的匹配元素集合中创建结果元素的函数。</param>
      <param name="comparer">一个 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />，用于对键进行哈希处理和比较。</param>
      <typeparam name="TOuter">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>通过使用默认的相等比较器对值进行比较生成两个序列的交集。</summary>
      <returns>包含组成两个序列交集的元素的序列。</returns>
      <param name="first">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，将返回其也出现在 <paramref name="second" /> 中的非重复元素。</param>
      <param name="second">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，将返回其也出现在第一个序列中的非重复元素。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较以生成两个序列的交集。</summary>
      <returns>包含组成两个序列交集的元素的序列。</returns>
      <param name="first">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，将返回其也出现在 <paramref name="second" /> 中的非重复元素。</param>
      <param name="second">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，将返回其也出现在第一个序列中的非重复元素。</param>
      <param name="comparer">用于比较值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>基于匹配键对两个序列的元素进行关联。 使用默认的相等比较器对键进行比较。</summary>
      <returns>一个具有 <paramref name="TResult" /> 类型元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，这些元素是通过对两个序列执行内部联接得来的。</returns>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从两个匹配元素创建结果元素的函数。</param>
      <typeparam name="TOuter">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>基于匹配键对两个序列的元素进行关联。 使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</summary>
      <returns>一个具有 <paramref name="TResult" /> 类型元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，这些元素是通过对两个序列执行内部联接得来的。</returns>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从两个匹配元素创建结果元素的函数。</param>
      <param name="comparer">一个 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />，用于对键进行哈希处理和比较。</param>
      <typeparam name="TOuter">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回序列的最后一个元素。</summary>
      <returns>源序列中最后位置处的值。</returns>
      <param name="source">要返回其最后一个元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>返回序列中满足指定条件的最后一个元素。</summary>
      <returns>序列中通过指定谓词函数中的测试的最后一个元素。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有元素满足 <paramref name="predicate" /> 中的条件。 - 或 - 源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回序列中的最后一个元素；如果序列中不包含任何元素，则返回默认值。</summary>
      <returns>如果源序列为空，则返回 default(<paramref name="TSource" />)；否则返回 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 中的最后一个元素。</returns>
      <param name="source">要返回其最后一个元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>返回序列中满足条件的最后一个元素；如果未找到这样的元素，则返回默认值。</summary>
      <returns>如果序列为空或没有元素通过谓词函数中的测试，则返回 default(<paramref name="TSource" />)；否则返回通过谓词函数中的测试的最后一个元素。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回一个 <see cref="T:System.Int64" />，表示序列中的元素的总数量。</summary>
      <returns>源序列中的元素的数量。</returns>
      <param name="source">包含要进行计数的元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">元素的数量超过 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>返回一个 <see cref="T:System.Int64" />，表示序列中满足条件的元素的数量。</summary>
      <returns>一个数字，表示序列中满足谓词函数条件的元素数量。</returns>
      <param name="source">包含要进行计数的元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">匹配元素的数量超过 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>返回 <see cref="T:System.Decimal" /> 值序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>返回 <see cref="T:System.Double" /> 值序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>返回 <see cref="T:System.Int32" /> 值序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>返回 <see cref="T:System.Int64" /> 值序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>返回可以为 null 的 <see cref="T:System.Decimal" /> 值序列中的最大值。</summary>
      <returns>一个与序列中的最大值对应的值，该值的类型在 C# 中为 Nullable&lt;Decimal&gt;，在 Visual Basic 中为 Nullable(Of Decimal)。</returns>
      <param name="source">要确定其最大值的可以为 null 的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>返回可以为 null 的 <see cref="T:System.Double" /> 值序列中的最大值。</summary>
      <returns>一个与序列中的最大值对应的值，该值的类型在 C# 中为 Nullable&lt;Double&gt;，在 Visual Basic 中为 Nullable(Of Double)。</returns>
      <param name="source">要确定其最大值的可以为 null 的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>返回可以为 null 的 <see cref="T:System.Int32" /> 值序列中的最大值。</summary>
      <returns>一个与序列中的最大值对应的值，该值的类型在 C# 中为 Nullable&lt;Int32&gt;，在 Visual Basic 中为 Nullable(Of Int32)。</returns>
      <param name="source">要确定其最大值的可以为 null 的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>返回可以为 null 的 <see cref="T:System.Int64" /> 值序列中的最大值。</summary>
      <returns>一个与序列中的最大值对应的值，该值的类型在 C# 中为 Nullable&lt;Int64&gt;，在 Visual Basic 中为 Nullable(Of Int64)。</returns>
      <param name="source">要确定其最大值的可以为 null 的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>返回可以为 null 的 <see cref="T:System.Single" /> 值序列中的最大值。</summary>
      <returns>一个与序列中的最大值对应的值，该值的类型在 C# 中为 Nullable&lt;Single&gt;，在 Visual Basic 中为 Nullable(Of Single)。</returns>
      <param name="source">要确定其最大值的可以为 null 的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>返回 <see cref="T:System.Single" /> 值序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回泛型序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>调用序列的每个元素上的转换函数并返回最大 <see cref="T:System.Decimal" /> 值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>调用序列的每个元素上的转换函数并返回最大 <see cref="T:System.Double" /> 值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>调用序列的每个元素上的转换函数并返回最大 <see cref="T:System.Int32" /> 值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>调用序列的每个元素上的转换函数并返回最大 <see cref="T:System.Int64" /> 值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>调用序列的每个元素上的转换函数并返回可空 <see cref="T:System.Decimal" /> 的最大值。</summary>
      <returns>C# 中类型为 Nullable&lt;Decimal&gt; 的值或 Visual Basic 中与序列中最大值对应的 Nullable(Of Decimal)。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>调用序列的每个元素上的转换函数并返回可空 <see cref="T:System.Double" /> 的最大值。</summary>
      <returns>C# 中类型为 Nullable&lt;Double&gt; 的值或 Visual Basic 中与序列中最大值对应的 Nullable(Of Double)。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>调用序列的每个元素上的转换函数并返回可空 <see cref="T:System.Int32" /> 的最大值。</summary>
      <returns>C# 中类型为 Nullable&lt;Int32&gt; 的值或 Visual Basic 中与序列中最大值对应的 Nullable(Of Int32)。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>调用序列的每个元素上的转换函数并返回可空 <see cref="T:System.Int64" /> 的最大值。</summary>
      <returns>C# 中类型为 Nullable&lt;Int64&gt; 的值或 Visual Basic 中与序列中最大值对应的 Nullable(Of Int64)。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>调用序列的每个元素上的转换函数并返回可空 <see cref="T:System.Single" /> 的最大值。</summary>
      <returns>C# 中类型为 Nullable&lt;Single&gt; 的值或 Visual Basic 中与序列中最大值对应的 Nullable(Of Single)。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>调用序列的每个元素上的转换函数并返回最大 <see cref="T:System.Single" /> 值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>调用泛型序列的每个元素上的转换函数并返回最大结果值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 返回的值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>返回 <see cref="T:System.Decimal" /> 值序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个 <see cref="T:System.Decimal" /> 值序列，用于确定最大值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>返回 <see cref="T:System.Double" /> 值序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个 <see cref="T:System.Double" /> 值序列，用于确定最小值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>返回 <see cref="T:System.Int32" /> 值序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个 <see cref="T:System.Int32" /> 值序列，用于确定最小值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>返回 <see cref="T:System.Int64" /> 值序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个 <see cref="T:System.Int64" /> 值序列，用于确定最小值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>返回 <see cref="T:System.Decimal" /> 值（可空）序列中的最小值。</summary>
      <returns>C# 中类型为 Nullable&lt;Decimal&gt; 的值或 Visual Basic 中与序列中最小值对应的 Nullable(Of Decimal)。</returns>
      <param name="source">一个可空 <see cref="T:System.Decimal" /> 值的序列，用于确定最小值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>返回 <see cref="T:System.Double" /> 值（可空）序列中的最小值。</summary>
      <returns>C# 中类型为 Nullable&lt;Double&gt; 的值或 Visual Basic 中与序列中最小值对应的 Nullable(Of Double)。</returns>
      <param name="source">一个可空 <see cref="T:System.Double" /> 值的序列，用于确定最小值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>返回 <see cref="T:System.Int32" /> 值（可空）序列中的最小值。</summary>
      <returns>C# 中类型为 Nullable&lt;Int32&gt; 的值或 Visual Basic 中与序列中最小值对应的 Nullable(Of Int32)。</returns>
      <param name="source">一个可空 <see cref="T:System.Int32" /> 值的序列，用于确定最小值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>返回 <see cref="T:System.Int64" /> 值（可空）序列中的最小值。</summary>
      <returns>C# 中类型为 Nullable&lt;Int64&gt; 的值或 Visual Basic 中与序列中最小值对应的 Nullable(Of Int64)。</returns>
      <param name="source">一个可空 <see cref="T:System.Int64" /> 值的序列，用于确定最小值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>返回 <see cref="T:System.Single" /> 值（可空）序列中的最小值。</summary>
      <returns>C# 中类型为 Nullable&lt;Single&gt; 的值或 Visual Basic 中与序列中最小值对应的 Nullable(Of Single)。</returns>
      <param name="source">一个可空 <see cref="T:System.Single" /> 值的序列，用于确定最小值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>返回 <see cref="T:System.Single" /> 值序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个 <see cref="T:System.Single" /> 值序列，用于确定最小值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回泛型序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>调用序列的每个元素上的转换函数并返回最小 <see cref="T:System.Decimal" /> 值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>调用序列的每个元素上的转换函数并返回最小 <see cref="T:System.Double" /> 值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>调用序列的每个元素上的转换函数并返回最小 <see cref="T:System.Int32" /> 值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>调用序列的每个元素上的转换函数并返回最小 <see cref="T:System.Int64" /> 值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>调用序列的每个元素上的转换函数并返回可空 <see cref="T:System.Decimal" /> 的最小值。</summary>
      <returns>C# 中类型为 Nullable&lt;Decimal&gt; 的值或 Visual Basic 中与序列中最小值对应的 Nullable(Of Decimal)。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>调用序列的每个元素上的转换函数并返回可空 <see cref="T:System.Double" /> 的最小值。</summary>
      <returns>C# 中类型为 Nullable&lt;Double&gt; 的值或 Visual Basic 中与序列中最小值对应的 Nullable(Of Double)。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>调用序列的每个元素上的转换函数并返回可空 <see cref="T:System.Int32" /> 的最小值。</summary>
      <returns>C# 中类型为 Nullable&lt;Int32&gt; 的值或 Visual Basic 中与序列中最小值对应的 Nullable(Of Int32)。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>调用序列的每个元素上的转换函数并返回可空 <see cref="T:System.Int64" /> 的最小值。</summary>
      <returns>C# 中类型为 Nullable&lt;Int64&gt; 的值或 Visual Basic 中与序列中最小值对应的 Nullable(Of Int64)。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>调用序列的每个元素上的转换函数并返回可空 <see cref="T:System.Single" /> 的最小值。</summary>
      <returns>C# 中类型为 Nullable&lt;Single&gt; 的值或 Visual Basic 中与序列中最小值对应的 Nullable(Of Single)。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>调用序列的每个元素上的转换函数并返回最小 <see cref="T:System.Single" /> 值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>调用泛型序列的每个元素上的转换函数并返回最小结果值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 返回的值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
      <summary>根据指定类型筛选 <see cref="T:System.Collections.IEnumerable" /> 的元素。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含类型为 <paramref name="TResult" /> 的输入序列中的元素。</returns>
      <param name="source">
        <see cref="T:System.Collections.IEnumerable" />，其元素用于筛选。</param>
      <typeparam name="TResult">筛选序列元素所根据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>根据键按升序对序列的元素排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，其元素按键排序。</returns>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比较器按升序对序列的元素排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，其元素按键排序。</returns>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>根据键按降序对序列的元素排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，将根据某个键按降序对其元素进行排序。</returns>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比较器按降序对序列的元素排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，将根据某个键按降序对其元素进行排序。</returns>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
      <summary>生成指定范围内的整数的序列。</summary>
      <returns>C# 中的 IEnumerable&lt;Int32&gt; 或 Visual Basic 中包含某个范围内的顺序整数的 IEnumerable(Of Int32)。</returns>
      <param name="start">序列中第一个整数的值。</param>
      <param name="count">要生成的顺序整数的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于 0。 - 或 - <paramref name="start" /> + <paramref name="count" /> -1 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
      <summary>生成包含一个重复值的序列。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含一个重复值。</returns>
      <param name="element">要重复的值。</param>
      <param name="count">在生成序列中重复该值的次数。</param>
      <typeparam name="TResult">要在结果序列中重复的值的类型。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于 0。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>反转序列中元素的顺序。</summary>
      <returns>一个序列，其元素以相反顺序对应于输入序列的元素。</returns>
      <param name="source">要反转的值序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>将序列中的每个元素投影到新表中。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素为对 <paramref name="source" /> 的每个元素调用转换函数的结果。</returns>
      <param name="source">一个值序列，要对该序列调用转换函数。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 返回的值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
      <summary>通过合并元素的索引将序列的每个元素投影到新表中。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素为对 <paramref name="source" /> 的每个元素调用转换函数的结果。</returns>
      <param name="source">一个值序列，要对该序列调用转换函数。</param>
      <param name="selector">一个应用于每个源元素的转换函数；函数的第二个参数表示源元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 返回的值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>将序列的每个元素投影到 <see cref="T:System.Collections.Generic.IEnumerable`1" />，并将结果序列合并为一个序列，并对其中每个元素调用结果选择器函数。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素是对 <paramref name="source" /> 的每个元素调用一对多转换函数 <paramref name="collectionSelector" />，然后将那些序列元素中的每一个及其相应的源元素映射为结果元素的结果。</returns>
      <param name="source">一个要投影的值序列。</param>
      <param name="collectionSelector">一个应用于输入序列的每个元素的转换函数。</param>
      <param name="resultSelector">一个应用于中间序列的每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TCollection">
        <paramref name="collectionSelector" /> 收集的中间元素的类型。</typeparam>
      <typeparam name="TResult">结果序列的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="collectionSelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>将序列的每个元素投影到 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 并将结果序列合并为一个序列。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素是对输入序列的每个元素调用一对多转换函数的结果。</returns>
      <param name="source">一个要投影的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 返回的序列元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>将序列的每个元素投影到 <see cref="T:System.Collections.Generic.IEnumerable`1" />，并将结果序列合并为一个序列，并对其中每个元素调用结果选择器函数。 每个源元素的索引用于该元素的中间投影表。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素是对 <paramref name="source" /> 的每个元素调用一对多转换函数 <paramref name="collectionSelector" />，然后将那些序列元素中的每一个及其相应的源元素映射为结果元素的结果。</returns>
      <param name="source">一个要投影的值序列。</param>
      <param name="collectionSelector">一个应用于每个源元素的转换函数；函数的第二个参数表示源元素的索引。</param>
      <param name="resultSelector">一个应用于中间序列的每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TCollection">
        <paramref name="collectionSelector" /> 收集的中间元素的类型。</typeparam>
      <typeparam name="TResult">结果序列的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="collectionSelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>将序列的每个元素投影到 <see cref="T:System.Collections.Generic.IEnumerable`1" />，并将结果序列合并为一个序列。 每个源元素的索引用于该元素的投影表。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素是对输入序列的每个元素调用一对多转换函数的结果。</returns>
      <param name="source">一个要投影的值序列。</param>
      <param name="selector">一个应用于每个源元素的转换函数；函数的第二个参数表示源元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 返回的序列元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>通过使用相应类型的默认相等比较器对序列的元素进行比较，以确定两个序列是否相等。</summary>
      <returns>如果根据相应类型的默认相等比较器，两个源序列的长度相等，且其相应元素相等，则为 true；否则为 false。</returns>
      <param name="first">一个用于比较 <paramref name="second" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="second">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，用于与第一个序列进行比较。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对两个序列的元素进行比较，以确定序列是否相等。</summary>
      <returns>如果根据 <paramref name="comparer" />，两个源序列的长度相等，且其相应元素相等，则为 true；否则为 false。</returns>
      <param name="first">一个用于比较 <paramref name="second" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="second">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，用于与第一个序列进行比较。</param>
      <param name="comparer">一个用于比较元素的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回序列的唯一元素；如果该序列并非恰好包含一个元素，则会引发异常。</summary>
      <returns>输入序列的单个元素。</returns>
      <param name="source">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，用于返回单个元素。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">输入序列包含多个元素。 - 或 - 输入序列为空。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>返回序列中满足指定条件的唯一元素；如果有多个这样的元素存在，则会引发异常。</summary>
      <returns>输入序列中满足条件的单个元素。</returns>
      <param name="source">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，用于从中返回单个元素。</param>
      <param name="predicate">用于测试元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有元素满足 <paramref name="predicate" /> 中的条件。 - 或 - 多个元素满足 <paramref name="predicate" /> 中的条件。 - 或 - 源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回序列中的唯一元素；如果该序列为空，则返回默认值；如果该序列包含多个元素，此方法将引发异常。</summary>
      <returns>返回输入序列的单个元素；如果序列不包含任何元素，则返回 default(<paramref name="TSource" />)。</returns>
      <param name="source">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，用于返回单个元素。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">输入序列包含多个元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>返回序列中满足指定条件的唯一元素；如果这类元素不存在，则返回默认值；如果有多个元素满足该条件，此方法将引发异常。</summary>
      <returns>如果未找到这样的元素，则返回输入序列中满足条件的单个元素或 default (<paramref name="TSource" />)。</returns>
      <param name="source">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，用于从中返回单个元素。</param>
      <param name="predicate">用于测试元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>跳过序列中指定数量的元素，然后返回剩余的元素。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含输入序列中指定索引后出现的元素。</returns>
      <param name="source">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，用于从中返回元素。</param>
      <param name="count">返回剩余元素前要跳过的元素数量。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>只要满足指定的条件，就跳过序列中的元素，然后返回剩余元素。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含输入序列中的元素，该输入序列从线性系列中没有通过 <paramref name="predicate" /> 指定测试的第一个元素开始。</returns>
      <param name="source">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，用于从中返回元素。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>只要满足指定的条件，就跳过序列中的元素，然后返回剩余元素。 将在谓词函数的逻辑中使用元素的索引。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含输入序列中的元素，该输入序列从线性系列中没有通过 <paramref name="predicate" /> 指定测试的第一个元素开始。</returns>
      <param name="source">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，用于从中返回元素。</param>
      <param name="predicate">用于测试每个源元素是否满足条件的函数；该函数的第二个参数表示源元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>计算 <see cref="T:System.Decimal" /> 值序列之和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">一个要计算和的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>计算 <see cref="T:System.Double" /> 值序列之和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">一个要计算和的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>计算 <see cref="T:System.Int32" /> 值序列之和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">一个要计算和的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>计算 <see cref="T:System.Int64" /> 值序列之和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">一个要计算和的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>计算可以为 null 的 <see cref="T:System.Decimal" /> 值序列之和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算和的可以为 null 的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>计算可以为 null 的 <see cref="T:System.Double" /> 值序列之和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算和的可以为 null 的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int32" /> 值序列之和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算和的可以为 null 的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int64" /> 值序列之和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算和的可以为 null 的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>计算可以为 null 的 <see cref="T:System.Single" /> 值序列之和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算和的可以为 null 的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>计算 <see cref="T:System.Single" /> 值序列之和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">一个要计算和的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>计算 <see cref="T:System.Decimal" /> 值序列的和，这些值是通过对输入序列中的每个元素调用转换函数得来的。</summary>
      <returns>投影值之和。</returns>
      <param name="source">用于计算和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>计算 <see cref="T:System.Double" /> 值序列的和，这些值是通过对输入序列中的每个元素调用转换函数得来的。</summary>
      <returns>投影值之和。</returns>
      <param name="source">用于计算和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>计算 <see cref="T:System.Int32" /> 值序列的和，这些值是通过对输入序列中的每个元素调用转换函数得来的。</summary>
      <returns>投影值之和。</returns>
      <param name="source">用于计算和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>计算 <see cref="T:System.Int64" /> 值序列的和，这些值是通过对输入序列中的每个元素调用转换函数得来的。</summary>
      <returns>投影值之和。</returns>
      <param name="source">用于计算和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>计算可以为 null 的 <see cref="T:System.Decimal" /> 值序列的和，这些值是通过对输入序列中的每个元素调用转换函数得来的。</summary>
      <returns>投影值之和。</returns>
      <param name="source">用于计算和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>计算可以为 null 的 <see cref="T:System.Double" /> 值序列的和，这些值是通过对输入序列中的每个元素调用转换函数得来的。</summary>
      <returns>投影值之和。</returns>
      <param name="source">用于计算和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int32" /> 值序列的和，这些值是通过对输入序列中的每个元素调用转换函数得来的。</summary>
      <returns>投影值之和。</returns>
      <param name="source">用于计算和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int64" /> 值序列的和，这些值是通过对输入序列中的每个元素调用转换函数得来的。</summary>
      <returns>投影值之和。</returns>
      <param name="source">用于计算和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>计算可以为 null 的 <see cref="T:System.Single" /> 值序列的和，这些值是通过对输入序列中的每个元素调用转换函数得来的。</summary>
      <returns>投影值之和。</returns>
      <param name="source">用于计算和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>计算 <see cref="T:System.Single" /> 值序列的和，这些值是通过对输入序列中的每个元素调用转换函数得来的。</summary>
      <returns>投影值之和。</returns>
      <param name="source">用于计算和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>从序列的开头返回指定数量的连续元素。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含输入序列开头的指定数量的元素。</returns>
      <param name="source">要从其返回元素的序列。</param>
      <param name="count">要返回的元素数量。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>只要满足指定的条件，就会返回序列的元素。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含输入序列中出现在测试不再能够通过的元素之前的元素。</returns>
      <param name="source">要从其返回元素的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>只要满足指定的条件，就会返回序列的元素。 将在谓词函数的逻辑中使用元素的索引。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含输入序列中出现在测试不再能够通过的元素之前的元素。</returns>
      <param name="source">要从其返回元素的序列。</param>
      <param name="predicate">用于测试每个源元素是否满足条件的函数；该函数的第二个参数表示源元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>根据某个键按升序对序列中的元素执行后续排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，其元素按键排序。</returns>
      <param name="source">一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，包含要排序的元素。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比较器按升序对序列中的元素执行后续排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，其元素按键排序。</returns>
      <param name="source">一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，包含要排序的元素。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>根据某个键按降序对序列中的元素执行后续排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，将根据某个键按降序对其元素进行排序。</returns>
      <param name="source">一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，包含要排序的元素。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比较器按降序对序列中的元素执行后续排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，将根据某个键按降序对其元素进行排序。</returns>
      <param name="source">一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，包含要排序的元素。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个数组。</summary>
      <returns>一个包含输入序列中的元素的数组。</returns>
      <param name="source">要从其创建数组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>根据指定的键选择器函数，从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>一个包含键和值的 <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
      <param name="source">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，将从它创建一个 <see cref="T:System.Collections.Generic.Dictionary`2" />。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。 - 或 - <paramref name="keySelector" /> 产生了一个 null 键。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> 为两个元素产生了重复键。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数和键比较器，从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>一个包含键和值的 <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
      <param name="source">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，将从它创建一个 <see cref="T:System.Collections.Generic.Dictionary`2" />。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="comparer">一个用于对键进行比较的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。 - 或 - <paramref name="keySelector" /> 产生了一个 null 键。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> 为两个元素产生了重复键。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>根据指定的键选择器和元素选择器函数，从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.Dictionary`2" />，包含从输入序列中选择的类型为 <paramref name="TElement" /> 的值。</returns>
      <param name="source">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，将从它创建一个 <see cref="T:System.Collections.Generic.Dictionary`2" />。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> 返回的值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 null。 - 或 - <paramref name="keySelector" /> 产生了一个 null 键。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> 为两个元素产生了重复键。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数、比较器和元素选择器函数从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.Dictionary`2" />，包含从输入序列中选择的类型为 <paramref name="TElement" /> 的值。</returns>
      <param name="source">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，将从它创建一个 <see cref="T:System.Collections.Generic.Dictionary`2" />。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <param name="comparer">一个用于对键进行比较的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> 返回的值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 null。 - 或 - <paramref name="keySelector" /> 产生了一个 null 键。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> 为两个元素产生了重复键。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Collections.Generic.List`1" />。</summary>
      <returns>一个包含输入序列中元素的 <see cref="T:System.Collections.Generic.List`1" />。</returns>
      <param name="source">要从其创建 <see cref="T:System.Collections.Generic.List`1" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>根据指定的键选择器函数，从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Linq.Lookup`2" />。</summary>
      <returns>一个包含键和值的 <see cref="T:System.Linq.Lookup`2" />。</returns>
      <param name="source">要从其创建 <see cref="T:System.Linq.Lookup`2" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数和键比较器，从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Linq.Lookup`2" />。</summary>
      <returns>一个包含键和值的 <see cref="T:System.Linq.Lookup`2" />。</returns>
      <param name="source">要从其创建 <see cref="T:System.Linq.Lookup`2" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="comparer">一个用于对键进行比较的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>根据指定的键选择器和元素选择器函数，从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Linq.Lookup`2" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Lookup`2" />，包含从输入序列中选择的类型为 <paramref name="TElement" /> 的值。</returns>
      <param name="source">要从其创建 <see cref="T:System.Linq.Lookup`2" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> 返回的值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数、比较器和元素选择器函数，从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Linq.Lookup`2" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Lookup`2" />，包含从输入序列中选择的类型为 <paramref name="TElement" /> 的值。</returns>
      <param name="source">要从其创建 <see cref="T:System.Linq.Lookup`2" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <param name="comparer">一个用于对键进行比较的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> 返回的值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>通过使用默认的相等比较器生成两个序列的并集。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含两个输入序列中的非重复元素。</returns>
      <param name="first">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它的非重复元素构成联合的第一个集。</param>
      <param name="second">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它的非重复元素构成联合的第二个集。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 生成两个序列的并集。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含两个输入序列中的非重复元素。</returns>
      <param name="first">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它的非重复元素构成联合的第一个集。</param>
      <param name="second">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它的非重复元素构成联合的第二个集。</param>
      <param name="comparer">用于对值进行比较的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>基于谓词筛选值序列。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含输入序列中满足条件的元素。</returns>
      <param name="source">要筛选的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>基于谓词筛选值序列。 将在谓词函数的逻辑中使用每个元素的索引。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含输入序列中满足条件的元素。</returns>
      <param name="source">要筛选的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用于测试每个源元素是否满足条件的函数；该函数的第二个参数表示源元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>将指定函数应用于两个序列的对应元素，以生成结果序列。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含两个输入序列的已合并元素。</returns>
      <param name="first">要合并的第一个序列。</param>
      <param name="second">要合并的第二个序列。</param>
      <param name="resultSelector">用于指定如何合并这两个序列的元素的函数。</param>
      <typeparam name="TFirst">第一个输入序列中的元素的类型。</typeparam>
      <typeparam name="TSecond">第二个输入序列中的元素的类型。</typeparam>
      <typeparam name="TResult">结果序列的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="T:System.Linq.EnumerableExecutor">
      <summary>表示一个表达式目录树，并提供在重写该表达式目录树后执行该表达式目录树的功能。</summary>
    </member>
    <member name="M:System.Linq.EnumerableExecutor.#ctor">
      <summary>初始化 <see cref="T:System.Linq.EnumerableExecutor" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Linq.EnumerableExecutor`1">
      <summary>表示一个表达式目录树，并提供在重写该表达式目录树后执行该表达式目录树的功能。</summary>
      <typeparam name="T">执行表达式目录树后所得到的值的数据类型。</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableExecutor`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>初始化 <see cref="T:System.Linq.EnumerableExecutor`1" /> 类的新实例。</summary>
      <param name="expression">要与新实例关联的表达式目录树。</param>
    </member>
    <member name="T:System.Linq.EnumerableQuery">
      <summary>将 <see cref="T:System.Collections.IEnumerable" /> 表示为 <see cref="T:System.Linq.EnumerableQuery" /> 数据源。</summary>
    </member>
    <member name="M:System.Linq.EnumerableQuery.#ctor">
      <summary>初始化 <see cref="T:System.Linq.EnumerableQuery" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Linq.EnumerableQuery`1">
      <summary>将 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合表示为 <see cref="T:System.Linq.IQueryable`1" /> 数据源。</summary>
      <typeparam name="T">集合中数据的类型。</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>初始化 <see cref="T:System.Linq.EnumerableQuery`1" /> 类的新实例，并将该实例与 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合关联。</summary>
      <param name="enumerable">要与新实例关联的集合。</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>初始化 <see cref="T:System.Linq.EnumerableQuery`1" /> 类的新实例，并将该实例与表达式目录树关联。</summary>
      <param name="expression">要与新实例关联的表达式目录树。</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回一个枚举数，该枚举数可以循环访问关联的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合，如果该集合为空，则循环访问通过将关联的表达式目录树重写为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 数据源上的查询并执行该查询而得到的集合。</summary>
      <returns>可用来循环访问关联的数据源的枚举数。</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个枚举数，该枚举数可以循环访问关联的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合，如果该集合为空，则循环访问通过将关联的表达式目录树重写为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 数据源上的查询并执行该查询而得到的集合。</summary>
      <returns>可用来循环访问关联的数据源的枚举数。</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#ElementType">
      <summary>获取该实例所表示的集合中的数据的类型。</summary>
      <returns>该实例所表示的集合中的数据的类型。</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Expression">
      <summary>获取与该实例关联或者表示该实例的表达式目录树。</summary>
      <returns>与该实例关联或者表示该实例的表达式目录树。</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Provider">
      <summary>获取与该实例关联的查询提供程序。</summary>
      <returns>与该实例关联的查询提供程序。</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary>构造一个新的 <see cref="T:System.Linq.EnumerableQuery`1" /> 对象，并将它与表示 <see cref="T:System.Linq.IQueryable" /> 数据集合的指定表达式目录树关联。</summary>
      <returns>与 <paramref name="expression" /> 关联的 <see cref="T:System.Linq.EnumerableQuery`1" /> 对象。</returns>
      <param name="expression">表示 <see cref="T:System.Linq.IQueryable" /> 数据集合的表达式目录树。</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>构造一个新的 <see cref="T:System.Linq.EnumerableQuery`1" /> 对象，并将它与表示 <see cref="T:System.Linq.IQueryable`1" /> 数据集合的指定表达式目录树关联。</summary>
      <returns>与 <paramref name="expression" /> 关联的 EnumerableQuery 对象。</returns>
      <param name="expression">要执行的表达式目录树。</param>
      <typeparam name="S">
        <paramref name="expression" /> 所表示的集合中的数据的类型。</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary>在重写表达式后执行表达式，重写的目的是对无法通过 <see cref="T:System.Linq.Queryable" /> 方法查询的任何可枚举数据源调用 <see cref="T:System.Linq.Enumerable" /> 方法，而不是调用 <see cref="T:System.Linq.Queryable" /> 方法。</summary>
      <returns>执行 <paramref name="expression" /> 后所得到的值。</returns>
      <param name="expression">要执行的表达式目录树。</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
      <summary>在重写表达式后执行表达式，重写的目的是对无法通过 <see cref="T:System.Linq.Queryable" /> 方法查询的任何可枚举数据源调用 <see cref="T:System.Linq.Enumerable" /> 方法，而不是调用 <see cref="T:System.Linq.Queryable" /> 方法。</summary>
      <returns>执行 <paramref name="expression" /> 后所得到的值。</returns>
      <param name="expression">要执行的表达式目录树。</param>
      <typeparam name="S">
        <paramref name="expression" /> 所表示的集合中的数据的类型。</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.ToString">
      <summary>返回可枚举集合的文本表示形式；如果该集合为 null，则返回与此实例关联的表达式树的文本表示形式。</summary>
      <returns>可枚举集合的文本表示形式；如果该集合为 null，则为与此实例关联的表达式树的文本表示形式。</returns>
    </member>
    <member name="T:System.Linq.IGrouping`2">
      <summary>表示具有公共键的对象的集合。</summary>
      <typeparam name="TKey">
        <see cref="T:System.Linq.IGrouping`2" /> 的键的类型。</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.IGrouping`2" /> 的值的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Linq.IGrouping`2.Key">
      <summary>获取 <see cref="T:System.Linq.IGrouping`2" /> 的键。</summary>
      <returns>
        <see cref="T:System.Linq.IGrouping`2" /> 的键。</returns>
    </member>
    <member name="T:System.Linq.ILookup`2">
      <summary>定义索引器、大小属性以及将键映射到 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 值序列的数据结构的布尔搜索方法。</summary>
      <typeparam name="TKey">
        <see cref="T:System.Linq.ILookup`2" /> 中的键的类型。</typeparam>
      <typeparam name="TElement">组成 <see cref="T:System.Linq.ILookup`2" /> 中的值的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列中的元素的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Linq.ILookup`2.Contains(`0)">
      <summary>确定指定的键是否位于 <see cref="T:System.Linq.ILookup`2" /> 中。</summary>
      <returns>如果 <paramref name="key" /> 在 <see cref="T:System.Linq.ILookup`2" /> 中，则为 true；否则为 false。</returns>
      <param name="key">要在 <see cref="T:System.Linq.ILookup`2" /> 中搜索的键。</param>
    </member>
    <member name="P:System.Linq.ILookup`2.Count">
      <summary>获取 <see cref="T:System.Linq.ILookup`2" /> 中的键/值对集合的数目。</summary>
      <returns>
        <see cref="T:System.Linq.ILookup`2" /> 中键/值集合对的数目。</returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Item(`0)">
      <summary>获取按指定键进行索引的值的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列。</summary>
      <returns>按指定键进行索引的值的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列。</returns>
      <param name="key">所需值序列的键。</param>
    </member>
    <member name="T:System.Linq.IOrderedEnumerable`1">
      <summary>表示已排序序列。</summary>
      <typeparam name="TElement">序列中的元素的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
      <summary>根据某个键对 <see cref="T:System.Linq.IOrderedEnumerable`1" /> 的元素执行后续排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，其元素按键排序。</returns>
      <param name="keySelector">用于提取每个元素的键的 <see cref="T:System.Func`2" />。</param>
      <param name="comparer">用于比较键在返回序列中的位置的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <param name="descending">如果为 true，则对元素进行降序排序；如果为 false，则对元素进行升序排序。</param>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 生成的键的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary>表示排序操作的结果。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary>表示排序操作的结果。</summary>
      <typeparam name="T">数据源中数据的类型。</typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary>提供对未指定数据类型的特定数据源的查询进行计算的功能。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary>获取在执行与 <see cref="T:System.Linq.IQueryable" /> 的此实例关联的表达式目录树时返回的元素的类型。</summary>
      <returns>一个 <see cref="T:System.Type" />，表示在执行与之关联的表达式目录树时返回的元素的类型。</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary>获取与 <see cref="T:System.Linq.IQueryable" /> 的实例关联的表达式目录树。</summary>
      <returns>与 <see cref="T:System.Linq.IQueryable" /> 的此实例关联的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary>获取与此数据源关联的查询提供程序。</summary>
      <returns>与此数据源关联的 <see cref="T:System.Linq.IQueryProvider" />。</returns>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary>提供对数据类型已知的特定数据源的查询进行计算的功能。</summary>
      <typeparam name="T">数据源中数据的类型。</typeparam>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary>定义用于创建和执行 <see cref="T:System.Linq.IQueryable" /> 对象所描述的查询的方法。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>构造一个 <see cref="T:System.Linq.IQueryable`1" /> 对象，该对象可计算指定表达式目录树所表示的查询。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，它可计算指定表达式目录树所表示的查询。</returns>
      <param name="expression">表示 LINQ 查询的表达式目录树。</param>
      <typeparam name="TElement">返回的 <see cref="T:System.Linq.IQueryable`1" /> 的元素的类型。</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary>构造一个 <see cref="T:System.Linq.IQueryable" /> 对象，该对象可计算指定表达式目录树所表示的查询。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable" />，它可计算指定表达式目录树所表示的查询。</returns>
      <param name="expression">表示 LINQ 查询的表达式目录树。</param>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary>执行指定表达式目录树所表示的强类型查询。</summary>
      <returns>执行指定查询所生成的值。</returns>
      <param name="expression">表示 LINQ 查询的表达式目录树。</param>
      <typeparam name="TResult">执行查询所生成的值的类型。</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary>执行指定表达式目录树所表示的查询。</summary>
      <returns>执行指定查询所生成的值。</returns>
      <param name="expression">表示 LINQ 查询的表达式目录树。</param>
    </member>
    <member name="T:System.Linq.Lookup`2">
      <summary>表示映射到一个或多个值的各个键的集合。</summary>
      <typeparam name="TKey">
        <see cref="T:System.Linq.Lookup`2" /> 中的键的类型。</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.Lookup`2" /> 中的每个 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 值的元素的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
      <summary>对每个键及其关联值应用转换函数，并返回结果。</summary>
      <returns>包含 <see cref="T:System.Linq.Lookup`2" /> 中的各个键/值对集合中的一个值的集合。</returns>
      <param name="resultSelector">从每个键及其关联值投影结果值的函数。</param>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 生成的结果值的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Linq.Lookup`2.Contains(`0)">
      <summary>确定指定的键是否位于 <see cref="T:System.Linq.Lookup`2" /> 中。</summary>
      <returns>如果 <paramref name="key" /> 在 <see cref="T:System.Linq.Lookup`2" /> 中，则为 true；否则为 false。</returns>
      <param name="key">要在 <see cref="T:System.Linq.Lookup`2" /> 中查找的键。</param>
    </member>
    <member name="P:System.Linq.Lookup`2.Count">
      <summary>获取 <see cref="T:System.Linq.Lookup`2" /> 中的键/值对集合的数目。</summary>
      <returns>
        <see cref="T:System.Linq.Lookup`2" /> 中键/值集合对的数目。</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.GetEnumerator">
      <summary>返回一个循环访问 <see cref="T:System.Linq.Lookup`2" /> 的泛型枚举数。</summary>
      <returns>
        <see cref="T:System.Linq.Lookup`2" /> 的一个枚举数。</returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Item(`0)">
      <summary>获取按指定键进行索引的值的集合。</summary>
      <returns>按指定键进行索引的值的集合。</returns>
      <param name="key">所需值集合的键。</param>
    </member>
    <member name="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Linq.Lookup`2" /> 的枚举数。 此类不能被继承。</summary>
      <returns>
        <see cref="T:System.Linq.Lookup`2" /> 的一个枚举数。</returns>
    </member>
    <member name="T:System.Linq.OrderedParallelQuery`1">
      <summary>表示已排序的并行序列。</summary>
      <typeparam name="TSource">源集合中的元素的类型。</typeparam>
    </member>
    <member name="M:System.Linq.OrderedParallelQuery`1.GetEnumerator">
      <summary>返回循环访问序列的枚举数。</summary>
      <returns>循环访问序列的枚举数。</returns>
    </member>
    <member name="T:System.Linq.ParallelEnumerable">
      <summary>提供一组用于查询实现 ParallelQuery{TSource} 的对象的方法。 这是 <see cref="T:System.Linq.Enumerable" /> 的并行等效项。</summary>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})">
      <summary>对一个序列并行应用累加器函数。 此重载在顺序实现中不可用。</summary>
      <returns>已转换的累加器最终值。</returns>
      <param name="source">要聚合的序列。</param>
      <param name="seedFactory">一个返回初始累加器值的函数。</param>
      <param name="updateAccumulatorFunc">要对分区中的每个元素调用的累加器函数。</param>
      <param name="combineAccumulatorsFunc">要对每个分区中已生成的累加器结果调用的累加器函数。</param>
      <param name="resultSelector">将累加器的最终值转换为结果值的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TAccumulate">累加器值的类型。</typeparam>
      <typeparam name="TResult">结果值的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="seedFactory" /> 或 <paramref name="updateAccumulatorFunc" /> 或 <paramref name="combineAccumulatorsFunc" /> 或 <paramref name="resultSelector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})">
      <summary>对一个序列并行应用累加器函数。</summary>
      <returns>累加器的最终值。</returns>
      <param name="source">要聚合的序列。</param>
      <param name="func">要对每个元素调用的累加器函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})">
      <summary>对一个序列并行应用累加器函数。 将指定的种子值用作累加器初始值。</summary>
      <returns>累加器的最终值。</returns>
      <param name="source">要聚合的序列。</param>
      <param name="seed">累加器的初始值。</param>
      <param name="func">要对每个元素调用的累加器函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TAccumulate">累加器值的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>对一个序列并行应用累加器函数。 将指定的种子值用作累加器的初始值，并使用指定的函数选择结果值。</summary>
      <returns>已转换的累加器最终值。</returns>
      <param name="source">要聚合的序列。</param>
      <param name="seed">累加器的初始值。</param>
      <param name="func">要对每个元素调用的累加器函数。</param>
      <param name="resultSelector">将累加器的最终值转换为结果值的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TAccumulate">累加器值的类型。</typeparam>
      <typeparam name="TResult">结果值的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 或 <paramref name="resultSelector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})">
      <summary>对一个序列并行应用累加器函数。 此重载在顺序实现中不可用。</summary>
      <returns>已转换的累加器最终值。</returns>
      <param name="source">要聚合的序列。</param>
      <param name="seed">累加器的初始值。</param>
      <param name="updateAccumulatorFunc">要对分区中的每个元素调用的累加器函数。</param>
      <param name="combineAccumulatorsFunc">要对每个分区中已生成的累加器结果调用的累加器函数。</param>
      <param name="resultSelector">将累加器的最终值转换为结果值的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TAccumulate">累加器值的类型。</typeparam>
      <typeparam name="TResult">结果值的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="updateAccumulatorFunc" /> 或 <paramref name="combineAccumulatorsFunc" /> 或 <paramref name="resultSelector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>并行确定序列中的所有元素是否都满足条件。</summary>
      <returns>如果源序列中的每个元素都通过指定谓词中的测试，或者序列为空，则为 true；否则为 false。</returns>
      <param name="source">要将谓词应用到的元素所在的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})">
      <summary>确定并行序列是否包含任何元素。</summary>
      <returns>如果源序列包含任何元素，则为 true；否则为 false。</returns>
      <param name="source">要检查是否为空的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>并行确定序列中的任何元素是否满足条件。</summary>
      <returns>如果源序列中的任何元素都通过指定谓词中的测试，则为 true；否则为 false。</returns>
      <param name="source">要将谓词应用到的元素所在的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})">
      <summary>将 <see cref="T:System.Linq.ParallelQuery`1" /> 转换为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 以强制对查询进行顺序计算。</summary>
      <returns>类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的输入序列。</returns>
      <param name="source">要强制转换为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)">
      <summary>启用将数据源视为“已经排序”的处理方法，重写默认的将数据源视为“未经排序”的处理方法。 只可以对由 AsParallel、ParallelEnumerable.Range 和 ParallelEnumerable.Repeat 返回的非泛型序列调用 AsOrdered。</summary>
      <returns>将要维护后续查询运算符中的原始排序的源序列。</returns>
      <param name="source">输入序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.InvalidOperationException">如果 <paramref name="source" /> 中不包含任何元素则会引发 - 或 - 在 AsOrdered 通过查询调用舍入时引发。 他被允许在 <see cref="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" />，<see cref="M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)" /> 或 <see cref="M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)" /> 之后立即调用。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})">
      <summary>启用将数据源视为“已经排序”的处理方法，重写默认的将数据源视为“未经排序”的处理方法。 只可以对由 AsParallel、ParallelEnumerable.Range 和 ParallelEnumerable.Repeat 返回的泛型序列调用 AsOrdered。</summary>
      <returns>将要维护后续查询运算符中的原始排序的源序列。</returns>
      <param name="source">输入序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.InvalidOperationException">如果 <paramref name="source" /> 中不包含任何元素则会引发 - 或 - <paramref name="source" /> 不是 AsParallel、ParallelEnumerable.Range 或 ParallelEnumerable.Repeat 之一时引发。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})">
      <summary>启用查询的并行化，并由负责将输入序列拆分成各个分区的自定义分区程序指明其出处。</summary>
      <returns>作为要绑定到 ParallelEnumerable 扩展方法的 ParallelQuery 的 <paramref name="source" />。</returns>
      <param name="source">针对输入序列的分区程序。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>启用查询的并行化。</summary>
      <returns>作为要绑定到 ParallelEnumerable 扩展方法的 <see cref="T:System.Linq.ParallelQuery`1" /> 的源。</returns>
      <param name="source">要转换为 <see cref="T:System.Linq.ParallelQuery`1" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)">
      <summary>启用查询的并行化。</summary>
      <returns>作为要绑定到 ParallelEnumerable 扩展方法的 ParallelQuery 的 source。</returns>
      <param name="source">要转换为 <see cref="T:System.Linq.ParallelQuery" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})">
      <summary>将 <see cref="T:System.Linq.ParallelQuery`1" /> 转换为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 以强制对查询进行顺序计算。</summary>
      <returns>作为要绑定到顺序扩展方法的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的源。</returns>
      <param name="source">要转换为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Linq.ParallelQuery`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})">
      <summary>允许将中间查询视为元素之间未应用任何排序。</summary>
      <returns>具有任意顺序的源序列。</returns>
      <param name="source">输入序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})">
      <summary>并行计算一个值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">用于计算平均值的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})">
      <summary>并行计算一个值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">用于计算平均值的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})">
      <summary>并行计算一个值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">用于计算平均值的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">序列中元素之和或数量大于 <see cref="F:System.Int32.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})">
      <summary>并行计算一个值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">用于计算平均值的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">序列中元素之和或数量大于 <see cref="F:System.Int32.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>并行计算一个值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">用于计算平均值的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>并行计算一个值序列的平均值。</summary>
      <returns>返回值序列的平均值。</returns>
      <param name="source">源序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">用于计算平均值的值序列。值序列的平均值。<paramref name="source" /> 是一个空引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>并行计算一个值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">用于计算平均值的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">序列中元素之和或数量大于 <see cref="F:System.Int32.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>并行计算一个值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">用于计算平均值的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">序列中元素之和或数量大于 <see cref="F:System.Int32.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>并行计算一个值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">用于计算平均值的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})">
      <summary>并行计算一个值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">用于计算平均值的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>并行计算一个值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">用于计算平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
      <exception cref="T:System.OverflowException">（在 <see cref="T:System.AggregateException" /> 中作为内部异常引发）。 <paramref name="selector" /> 函数返回一个大于元素类型的 MaxValue 的值。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>并行计算一个值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">用于计算平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
      <exception cref="T:System.OverflowException">（在 <see cref="T:System.AggregateException" /> 中作为内部异常引发）。 <paramref name="selector" /> 函数返回一个大于元素类型的 MaxValue 的值。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>并行计算一个值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">用于计算平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">序列中元素之和或数量大于 <see cref="F:System.Int32.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
      <exception cref="T:System.OverflowException">（在 <see cref="T:System.AggregateException" /> 中作为内部异常引发）。 <paramref name="selector" /> 函数返回一个大于元素类型的 MaxValue 的值。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>并行计算一个值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">用于计算平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">序列中元素之和或数量大于 <see cref="F:System.Int32.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
      <exception cref="T:System.OverflowException">（在 <see cref="T:System.AggregateException" /> 中作为内部异常引发）。 <paramref name="selector" /> 函数返回一个大于元素类型的 MaxValue 的值。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>并行计算一个值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">用于计算平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
      <exception cref="T:System.OverflowException">（在 <see cref="T:System.AggregateException" /> 中作为内部异常引发）。 <paramref name="selector" /> 函数返回一个大于元素类型的 MaxValue 的值。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>并行计算一个值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">用于计算平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
      <exception cref="T:System.OverflowException">（在 <see cref="T:System.AggregateException" /> 中作为内部异常引发）。 <paramref name="selector" /> 函数返回一个大于元素类型的 MaxValue 的值。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>并行计算一个值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">用于计算平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">序列中元素之和或数量大于 <see cref="F:System.Int32.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
      <exception cref="T:System.OverflowException">（在 <see cref="T:System.AggregateException" /> 中作为内部异常引发）。 <paramref name="selector" /> 函数返回一个大于元素类型的 MaxValue 的值。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>并行计算一个值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">用于计算平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">序列中元素之和或数量大于 <see cref="F:System.Int64.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
      <exception cref="T:System.OverflowException">（在 <see cref="T:System.AggregateException" /> 中作为内部异常引发）。 <paramref name="selector" /> 函数返回一个大于元素类型的 MaxValue 的值。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>并行计算一个值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">用于计算平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
      <exception cref="T:System.OverflowException">（在 <see cref="T:System.AggregateException" /> 中作为内部异常引发）。 <paramref name="selector" /> 函数返回一个大于元素类型的 MaxValue 的值。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>并行计算一个值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">用于计算平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
      <exception cref="T:System.OverflowException">（在 <see cref="T:System.AggregateException" /> 中作为内部异常引发）。 <paramref name="selector" /> 函数返回一个大于元素类型的 MaxValue 的值。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)">
      <summary>将 ParallelQuery 的元素转换为指定的类型。</summary>
      <returns>一个序列，其中包含已转换为指定类型的源序列的每个元素。</returns>
      <param name="source">包含要转换的元素的序列。</param>
      <typeparam name="TResult">
        <paramref name="source" /> 中的元素要转换成的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.InvalidCastException">源序列的类型不能转换为 <paramref name="TResult" />。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>切勿调用此 Concat 重载。 此方法已标记为过时，调用此方法时总是会引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <param name="first">未使用此参数。</param>
      <param name="second">未使用此参数。</param>
      <typeparam name="TSource">未使用此类型参数。</typeparam>
      <exception cref="T:System.NotSupportedException">调用此方法时发生的异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>连接两个并行序列。</summary>
      <returns>一个序列，其中包含两个输入序列的已连接元素。</returns>
      <param name="first">要连接的第一个序列。</param>
      <param name="second">要与第一个序列连接的序列。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)">
      <summary>通过使用默认的相等比较器，并行确定某个序列是否包含指定的元素。</summary>
      <returns>如果源序列包含具有指定值的元素，则为 true；否则为 false。</returns>
      <param name="source">要在其中定位某个值的序列。</param>
      <param name="value">要在序列中定位的值。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 来并行确定序列是否包含指定的元素。</summary>
      <returns>如果源序列包含具有指定值的元素，则为 true；否则为 false。</returns>
      <param name="source">要在其中定位某个值的序列。</param>
      <param name="value">要在序列中定位的值。</param>
      <param name="comparer">一个对值进行比较的相等比较器。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})">
      <summary>返回并行序列中的元素数量。</summary>
      <returns>输入序列中的元素数量。</returns>
      <param name="source">包含要计数的元素的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">源中的元素数大于 <see cref="F:System.Int32.MaxValue" />。（在这种情况下 InnerException 为 <see cref="T:System.OverflowException" />）- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>返回一个数字，表示在指定的并行序列中满足条件的元素数量。</summary>
      <returns>一个数字，表示序列中满足谓词函数条件的元素数量。</returns>
      <param name="source">包含要计数的元素的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">源中的元素数大于 <see cref="F:System.Int32.MaxValue" />。（在这种情况下 InnerException 为 <see cref="T:System.OverflowException" />）- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})">
      <summary>返回指定的并行序列的元素；如果序列为空，则返回单一实例集合中的类型参数的默认值。</summary>
      <returns>如果 <paramref name="source" /> 为空，则为包含 default(TSource) 的序列；否则为 <paramref name="source" />。</returns>
      <param name="source">序列为空时返回默认值的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)">
      <summary>返回指定的并行序列中的元素；如果序列为空，则返回单一实例集合中的指定值。</summary>
      <returns>如果 <paramref name="source" /> 为空，则为包含 defaultValue 的序列；否则为 <paramref name="source" />。</returns>
      <param name="source">序列为空时为其返回指定值的序列。</param>
      <param name="defaultValue">序列为空时要返回的值。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})">
      <summary>通过使用默认的相等比较器对值进行比较，返回并行序列中的非重复元素。</summary>
      <returns>一个序列，其中包含源序列中的非重复元素。</returns>
      <param name="source">要从中移除重复元素的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较返回并行序列中的非重复元素。</summary>
      <returns>一个序列，其中包含源序列中的非重复元素。</returns>
      <param name="source">要从中移除重复元素的序列。</param>
      <param name="comparer">用于比较值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>返回并行序列中指定索引处的元素。</summary>
      <returns>源序列中指定位置处的元素。</returns>
      <param name="source">要从中返回元素的序列。</param>
      <param name="index">要检索的从零开始的元素索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于等于 <paramref name="source" /> 中的元素数量。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>返回并行序列中指定索引处的元素；如果索引超出范围，则返回默认值。</summary>
      <returns>如果索引超出源序列的范围，则为 default(TSource)；否则为源序列中指定位置处的元素。</returns>
      <param name="source">要从中返回元素的序列。</param>
      <param name="index">要检索的从零开始的元素索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Empty``1">
      <summary>返回一个具有指定的类型参数的空 ParallelQuery{TResult}。</summary>
      <returns>一个空序列，其类型参数为 <paramref name="TResult" />。</returns>
      <typeparam name="TResult">分配给返回的泛型序列的类型参数的类型。</typeparam>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>切勿调用此 Except 重载。 此方法已标记为过时，调用此方法时总是会引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <param name="first">未使用此参数。</param>
      <param name="second">未使用此参数。</param>
      <typeparam name="TSource">未使用此类型参数。</typeparam>
      <exception cref="T:System.NotSupportedException">调用此方法时发生的异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>切勿调用此 Except 重载。 此方法已标记为过时，调用此方法时总是会引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <param name="first">未使用此参数。</param>
      <param name="second">未使用此参数。</param>
      <param name="comparer">未使用此参数。</param>
      <typeparam name="TSource">未使用此类型参数。</typeparam>
      <exception cref="T:System.NotSupportedException">调用此方法时发生的异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>通过使用默认的相等比较器对值进行比较，生成两个并行序列的差集。</summary>
      <returns>包含两个序列元素的差集的序列。</returns>
      <param name="first">一个序列，其中的未同时出现在 <paramref name="second" /> 中的元素将会返回。</param>
      <param name="second">一个序列，其中的元素如果同时出现在第一个序列中，则将导致从返回的序列中移除这些元素。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较产生两个并行序列的差集。</summary>
      <returns>包含两个序列元素的差集的序列。</returns>
      <param name="first">一个序列，其中的未同时出现在 <paramref name="second" /> 中的元素将会返回。</param>
      <param name="second">一个序列，其中的元素如果同时出现在第一个序列中，则将导致从返回的序列中移除这些元素。</param>
      <param name="comparer">用于比较值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})">
      <summary>返回并行序列中的第一个元素。</summary>
      <returns>返回指定序列中的第一个元素。</returns>
      <param name="source">要返回其第一个元素的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>返回并行序列中满足指定条件的第一个元素。</summary>
      <returns>序列中通过指定谓词函数中的测试的第一个元素。</returns>
      <param name="source">要从中返回元素的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中没有元素满足 <paramref name="predicate" /> 中的条件。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>返回并行序列中的第一个元素；如果该序列中不包含任何元素，则返回默认值。</summary>
      <returns>如果 <paramref name="source" /> 为空，则返回 default(TSource)；否则返回 <paramref name="source" /> 中的第一个元素。</returns>
      <param name="source">要返回其第一个元素的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>返回并行序列中满足条件的第一个元素；如果未找到这样的元素，则返回默认值。</summary>
      <returns>如果 <paramref name="source" /> 为空或没有元素通过 predicate 指定的测试，则返回 default(TSource)，否则返回 <paramref name="source" /> 中通过 predicate 指定的测试的第一个元素。</returns>
      <param name="source">要从中返回元素的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})">
      <summary>对 <paramref name="source" /> 中的每个元素并行调用指定的操作。</summary>
      <param name="source">其元素将由 <paramref name="action" /> 处理的 <see cref="T:System.Linq.ParallelQuery`1" />。</param>
      <param name="action">要对每个元素调用的操作。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>根据指定的键选择器函数对序列中的元素进行并行分组。</summary>
      <returns>依照 <paramref name="TKey" /> 按降序排列的组序列。</returns>
      <param name="source">一个 OrderedParallelQuery{TSource}，包含要排序的元素。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数对序列中的元素进行并行分组，并使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 对键进行比较。</summary>
      <returns>依照 <paramref name="TKey" /> 按降序排列的组序列。</returns>
      <param name="source">一个 <see cref="T:System.Linq.OrderedParallelQuery`1" />，包含要排序的元素。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>根据指定的键选择器函数对序列中的元素进行并行分组，并且通过使用指定的函数对每个组中的元素进行投影。</summary>
      <returns>依照 <paramref name="TKey" /> 按降序排列的组序列。</returns>
      <param name="source">一个 <see cref="T:System.Linq.OrderedParallelQuery`1" />，包含要排序的元素。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.IGrouping`2" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据键选择器函数对序列中的元素进行并行分组。 通过使用比较器对键进行比较，并且通过使用指定的函数对每个组的元素进行投影。</summary>
      <returns>依照 <paramref name="TKey" /> 按降序排列的组序列。</returns>
      <param name="source">一个 OrderedParallelQuery{TSource}，包含要排序的元素。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到 IGrouping 中的元素的函数。</param>
      <param name="comparer">一个用于比较键的 IComparer{TSource}。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TElement">IGrouping 中的元素的类型</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>根据指定的键选择器函数对序列中的元素进行并行分组，并且从每个组及其键中创建结果值。 通过使用指定的函数对每个组的元素进行投影。</summary>
      <returns>
        <paramref name="TResult" /> 类型的元素的序列，其中每个元素都表示对一个组及其键的投影。</returns>
      <param name="source">要对其元素进行分组的序列。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到 IGrouping&lt;TKey, TElement&gt; 中的元素的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TElement">每个 IGrouping{TKey, TElement} 中的元素的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 返回的结果值的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。 通过使用指定的比较器对键值进行比较，并且通过使用指定的函数对每个组的元素进行投影。</summary>
      <returns>
        <paramref name="TResult" /> 类型的元素的序列，其中每个元素都表示对一个组及其键的投影。</returns>
      <param name="source">要对其元素进行分组的序列。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到 IGrouping{Key, TElement} 中的元素的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <param name="comparer">一个用于对键进行比较的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TElement">每个 IGrouping{TKey, TElement} 中的元素的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 返回的结果值的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>根据指定的键选择器函数对序列中的元素进行并行分组，并且从每个组及其键中创建结果值。</summary>
      <returns>
        <paramref name="TResult" /> 类型的元素的序列，其中每个元素都表示对一个组及其键的投影。</returns>
      <param name="source">要对其元素进行分组的序列。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 返回的结果值的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数对序列中的元素进行并行分组，并且从每个组及其键中创建结果值。 通过使用指定的比较器对键进行比较。</summary>
      <returns>一个组序列。</returns>
      <param name="source">要对其元素进行分组的序列。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <param name="comparer">一个用于对键进行比较的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 返回的结果值的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>切勿调用此 GroupJoin 重载。 此方法已标记为过时，调用此方法时总是会引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <param name="outer">未使用此参数。</param>
      <param name="inner">未使用此参数。</param>
      <param name="outerKeySelector">未使用此参数。</param>
      <param name="innerKeySelector">未使用此参数。</param>
      <param name="resultSelector">未使用此参数。</param>
      <typeparam name="TOuter">未使用此类型参数。</typeparam>
      <typeparam name="TInner">未使用此类型参数。</typeparam>
      <typeparam name="TKey">未使用此类型参数。</typeparam>
      <typeparam name="TResult">未使用此类型参数。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>切勿调用此 GroupJoin 重载。 此方法已标记为过时，调用此方法时总是会引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <param name="outer">未使用此参数。</param>
      <param name="inner">未使用此参数。</param>
      <param name="outerKeySelector">未使用此参数。</param>
      <param name="innerKeySelector">未使用此参数。</param>
      <param name="resultSelector">未使用此参数。</param>
      <param name="comparer">未使用此参数。</param>
      <typeparam name="TOuter">未使用此类型参数。</typeparam>
      <typeparam name="TInner">未使用此类型参数。</typeparam>
      <typeparam name="TKey">未使用此类型参数。</typeparam>
      <typeparam name="TResult">未使用此类型参数。</typeparam>
      <exception cref="T:System.NotSupportedException">调用此方法时发生的异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>基于键相等对两个序列的元素进行并行关联并对结果进行分组。 使用默认的相等比较器对键进行比较。</summary>
      <returns>一个序列，其中包含通过对两个序列执行分组联接获得的 <paramref name="TResult" /> 类型的元素。</returns>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从第一个序列的元素和第二个序列的匹配元素集合中创建结果元素的函数。</param>
      <typeparam name="TOuter">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>基于键相等对两个序列的元素进行并行关联并对结果进行分组。 使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</summary>
      <returns>一个序列，其中包含通过对两个序列执行分组联接获得的 <paramref name="TResult" /> 类型的元素。</returns>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从第一个序列的元素和第二个序列的匹配元素集合中创建结果元素的函数。</param>
      <param name="comparer">一个 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />，用于对键进行哈希处理和比较。</param>
      <typeparam name="TOuter">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>切勿调用此 Intersect 重载。 此方法已标记为过时，调用此方法时总是会引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <param name="first">未使用此参数。</param>
      <param name="second">未使用此参数。</param>
      <typeparam name="TSource">未使用此类型参数。</typeparam>
      <exception cref="T:System.NotSupportedException">调用此方法时发生的异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>切勿调用此 Intersect 重载。 此方法已标记为过时，调用此方法时总是会引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <param name="first">未使用此参数。</param>
      <param name="second">未使用此参数。</param>
      <param name="comparer">未使用此参数。</param>
      <typeparam name="TSource">未使用此类型参数。</typeparam>
      <exception cref="T:System.NotSupportedException">调用此方法时发生的异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>通过使用默认的相等比较器对值进行比较，生成两个并行序列的交集。</summary>
      <returns>包含组成两个序列交集的元素的序列。</returns>
      <param name="first">一个序列，其中的同时出现在 <paramref name="second" /> 中的非重复元素将会返回。</param>
      <param name="second">一个序列，其中的同时出现在第一个序列中的非重复元素将会返回。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 IEqualityComparer{T} 对值进行比较，生成两个并行序列的交集。</summary>
      <returns>包含组成两个序列交集的元素的序列。</returns>
      <param name="first">一个序列，其中的同时出现在 <paramref name="second" /> 中的非重复元素将会返回。</param>
      <param name="second">一个序列，其中的同时出现在第一个序列中的非重复元素将会返回。</param>
      <param name="comparer">用于比较值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>切勿调用此 Join 重载。 此方法已标记为过时，调用此方法时总是会引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <param name="outer">未使用此参数。</param>
      <param name="inner">未使用此参数。</param>
      <param name="outerKeySelector">未使用此参数。</param>
      <param name="innerKeySelector">未使用此参数。</param>
      <param name="resultSelector">未使用此参数。</param>
      <typeparam name="TOuter">未使用此类型参数。</typeparam>
      <typeparam name="TInner">未使用此类型参数。</typeparam>
      <typeparam name="TKey">未使用此类型参数。</typeparam>
      <typeparam name="TResult">未使用此类型参数。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>切勿调用此 Join 重载。 此方法已标记为过时，调用此方法时总是会引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <param name="outer">未使用此参数。</param>
      <param name="inner">未使用此参数。</param>
      <param name="outerKeySelector">未使用此参数。</param>
      <param name="innerKeySelector">未使用此参数。</param>
      <param name="resultSelector">未使用此参数。</param>
      <param name="comparer">未使用此参数。</param>
      <typeparam name="TOuter">未使用此类型参数。</typeparam>
      <typeparam name="TInner">未使用此类型参数。</typeparam>
      <typeparam name="TKey">未使用此类型参数。</typeparam>
      <typeparam name="TResult">未使用此类型参数。</typeparam>
      <exception cref="T:System.NotSupportedException">调用此方法时发生的异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>基于匹配键对两个序列的元素进行并行关联。 使用默认的相等比较器对键进行比较。</summary>
      <returns>一个序列，其中包含通过对两个序列执行内部联接获得的 <paramref name="TResult" /> 类型的元素。</returns>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从两个匹配元素创建结果元素的函数。</param>
      <typeparam name="TOuter">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>基于匹配键对两个序列的元素进行并行关联。 使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</summary>
      <returns>一个序列，其中包含通过对两个序列执行内部联接获得的 <paramref name="TResult" /> 类型的元素。</returns>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从两个匹配元素创建结果元素的函数。</param>
      <param name="comparer">一个 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />，用于对键进行哈希处理和比较。</param>
      <typeparam name="TOuter">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})">
      <summary>返回并行序列中的最后一个元素。</summary>
      <returns>源序列中最后位置处的值。</returns>
      <param name="source">要从中返回最后一个元素的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>返回并行序列中满足指定条件的最后一个元素。</summary>
      <returns>序列中通过指定谓词函数中的测试的最后一个元素。</returns>
      <param name="source">要从中返回元素的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中没有元素满足 <paramref name="predicate" /> 中的条件。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>返回并行序列中的最后一个元素；如果该序列中不包含任何元素，则返回默认值。</summary>
      <returns>如果源序列为空，则返回 default()；否则返回该序列中的最后一个元素。</returns>
      <param name="source">要从中返回元素的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>返回并行序列中满足条件的最后一个元素；如果未找到这样的元素，则返回默认值。</summary>
      <returns>如果序列为空或没有元素通过谓词函数中的测试，则返回 default()；否则，返回通过谓词函数中的测试的最后一个元素。</returns>
      <param name="source">要从中返回元素的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})">
      <summary>返回一个 Int64，表示并行序列中的元素的总数。</summary>
      <returns>输入序列中的元素数量。</returns>
      <param name="source">包含要计数的元素的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">源中的元素数大于 <see cref="F:System.Int64.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.OverflowException">计算结果大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>返回一个 Int64，表示并行序列中满足条件的元素的数量。</summary>
      <returns>一个数字，表示序列中满足谓词函数条件的元素数量。</returns>
      <param name="source">包含要计数的元素的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">源中的元素数大于 <see cref="F:System.Int64.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.OverflowException">计算结果大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})">
      <summary>返回值的并行序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})">
      <summary>返回值的并行序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})">
      <summary>返回值的并行序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})">
      <summary>返回值的并行序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>返回值的并行序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>返回值的并行序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>返回值的并行序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>返回值的并行序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>返回值的并行序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})">
      <summary>返回值的并行序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})">
      <summary>返回值的并行序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <typeparam name="TSource">源序列中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素，且 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素，且 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素，且 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素，且 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素，且 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素，且 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 返回的值的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素，且 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})">
      <summary>返回值的并行序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素，且 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})">
      <summary>返回值的并行序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素，且 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})">
      <summary>返回值的并行序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素，且 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})">
      <summary>返回值的并行序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素，且 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>返回值的并行序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>返回值的并行序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>返回值的并行序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>返回值的并行序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>返回值的并行序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})">
      <summary>返回值的并行序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素，且 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})">
      <summary>返回值的并行序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素，且 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素，且 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素，且 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素，且 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素，且 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素，且 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 返回的值的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素，且 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)">
      <summary>根据指定类型筛选 ParallelQuery 的元素。</summary>
      <returns>一个序列，其中包含类型的输入序列中的元素。</returns>
      <param name="source">要筛选其元素的序列。</param>
      <typeparam name="TResult">筛选序列元素所根据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>根据键按升序对序列中的元素进行并行排序。</summary>
      <returns>其中的元素将根据某个键进行排序的 OrderedParallelQuery{TSource}。</returns>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比较器按升序对序列中的元素进行并行排序。</summary>
      <returns>其中的元素将根据某个键进行排序的 OrderedParallelQuery{TSource}。</returns>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 IComparer{TKey}。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>根据键按降序对序列中的元素进行并行排序。</summary>
      <returns>一个 OrderedParallelQuery{TSource}，其元素将根据某个键按降序进行排序。</returns>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比较器按降序对序列的元素排序。</summary>
      <returns>一个 OrderedParallelQuery{TSource}，其元素将根据某个键按降序进行排序。</returns>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 IComparer{TKey}。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="KeySelector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)">
      <summary>生成指定范围内的整数的并行序列。</summary>
      <returns>C# 中的 IEnumerable&lt;Int32&gt; 或 Visual Basic 中的 IEnumerable(Of Int32)，其中包含某个范围的顺序整数。</returns>
      <param name="start">序列中第一个整数的值。</param>
      <param name="count">要生成的顺序整数的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于 0 - 或 - <paramref name="start" /> + <paramref name="count" /> - 1 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)">
      <summary>生成包含一个重复值的并行序列。</summary>
      <returns>一个包含重复值的序列。</returns>
      <param name="element">要重复的值。</param>
      <param name="count">在生成序列中重复该值的次数。</param>
      <typeparam name="TResult">要在结果序列中重复的值的类型。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于 0。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})">
      <summary>反转并行序列中元素的顺序。</summary>
      <returns>一个序列，其元素以相反顺序对应于输入序列的元素。</returns>
      <param name="source">要反转的值序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>将序列中的每个元素并行投影到新窗体中。</summary>
      <returns>一个序列，其元素是对 <paramref name="source" /> 的每个元素调用转换函数的结果。</returns>
      <param name="source">一个值序列，要对该序列调用转换函数。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">选择器返回的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})">
      <summary>通过合并元素的索引，将序列的每个元素并行投影到新窗体中。</summary>
      <returns>一个序列，其元素是对基于提供到 <paramref name="selector" /> 的索引的 <paramref name="source" /> 中的每个元素调用转换函数的结果。</returns>
      <param name="source">一个值序列，要对该序列调用转换函数。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">选择器返回的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.OverflowException">超过 <see cref="F:System.Int32.MaxValue" /> 个元素都是用该查询枚举。 流方案中可能会出现这种情况。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>将序列的每个元素投影到 <see cref="T:System.Collections.Generic.IEnumerable`1" />，并将结果序列合并为一个序列，并对其中每个元素调用结果选择器函数。</summary>
      <returns>一个序列，其元素是通过以下方法得到的：对基于提供给 <paramref name="collectionSelector" /> 的 <paramref name="source" /> 的每个元素调用一对多转换函数 <paramref name="collectionSelector" />，然后将这些序列元素中的每一个元素及其相应的源元素映射到一个结果元素。</returns>
      <param name="source">一个要投影的值序列。</param>
      <param name="collectionSelector">一个应用于每个源元素的转换函数；函数的第二个参数表示源元素的索引。</param>
      <param name="resultSelector">用于从第一个序列的元素和第二个序列的匹配元素集合中创建结果元素的函数。</param>
      <typeparam name="TSource">
        <paramref name="collectionSelector" /> 收集的中间元素的类型。</typeparam>
      <typeparam name="TCollection">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">结果序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.OverflowException">超过 <see cref="F:System.Int32.MaxValue" /> 个元素都是用该查询枚举。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>将序列的每个元素以并行方式投影到 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 并将结果序列合并为一个序列。</summary>
      <returns>一个序列，其元素是对输入序列的每个元素调用一对多转换函数的结果。</returns>
      <param name="source">一个要投影的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">选择器返回的序列元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>将序列的每个元素投影到 <see cref="T:System.Collections.Generic.IEnumerable`1" />，并将结果序列合并为一个序列，并对其中每个元素调用结果选择器函数。 每个源元素的索引用于该元素的中间投影表。</summary>
      <returns>一个序列，其元素是通过以下方法得到的：对基于提供给 <paramref name="collectionSelector" /> 的 <paramref name="source" /> 的每个元素调用一对多转换函数 <paramref name="collectionSelector" />，然后将这些序列元素中的每一个元素及其相应的源元素映射到一个结果元素。</returns>
      <param name="source">一个要投影的值序列。</param>
      <param name="collectionSelector">一个应用于每个源元素的转换函数；函数的第二个参数表示源元素的索引。</param>
      <param name="resultSelector">用于从第一个序列的元素和第二个序列的匹配元素集合中创建结果元素的函数。</param>
      <typeparam name="TSource">
        <paramref name="collectionSelector" /> 收集的中间元素的类型。</typeparam>
      <typeparam name="TCollection">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">要返回的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.OverflowException">超过 <see cref="F:System.Int32.MaxValue" /> 个元素都是用该查询枚举。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>将序列的每个元素以并行方式投影到 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 并将结果序列合并为一个序列。 每个源元素的索引用于该元素的投影表。</summary>
      <returns>一个序列，其元素是对输入序列的每个元素调用一对多转换函数的结果。</returns>
      <param name="source">一个要投影的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">选择器返回的序列元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.OverflowException">超过 <see cref="F:System.Int32.MaxValue" /> 个元素都是用该查询枚举。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>切勿调用此 SequenceEqual 重载。 此方法已标记为过时，调用此方法时总是会引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <param name="first">未使用此参数。</param>
      <param name="second">未使用此参数。</param>
      <typeparam name="TSource">未使用此类型参数。</typeparam>
      <exception cref="T:System.NotSupportedException">每次调用此方法时引发。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>切勿调用此 SequenceEqual 重载。 此方法已标记为过时，调用此方法时总是会引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <param name="first">未使用此参数。</param>
      <param name="second">未使用此参数。</param>
      <param name="comparer">未使用此参数。</param>
      <typeparam name="TSource">未使用此类型参数。</typeparam>
      <exception cref="T:System.NotSupportedException">每次调用此方法时引发。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>通过使用相应类型的默认相等比较器对序列的元素进行比较，以确定两个并行序列是否相等。</summary>
      <returns>如果根据相应类型的默认相等比较器，两个源序列的长度相等，且其相应元素相等，则为 true；否则为 false。</returns>
      <param name="first">要与 second 进行比较的序列。</param>
      <param name="second">要与第一个输入序列进行比较的序列。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>使用指定的 IEqualityComparer{T} 对两个并行序列的元素进行比较，以确定这两个序列是否相等。</summary>
      <returns>如果根据相应类型的默认相等比较器，两个源序列的长度相等，且其相应元素相等，则为 true；否则为 false。</returns>
      <param name="first">要与 <paramref name="second" /> 进行比较的序列。</param>
      <param name="second">要与第一个输入序列进行比较的序列。</param>
      <param name="comparer">一个用于比较元素的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})">
      <summary>返回并行序列的唯一元素；如果该序列并非恰好包含一个元素，则会引发异常。</summary>
      <returns>输入序列的单个元素。</returns>
      <param name="source">要返回其单个元素的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">输入序列包含多个元素。- 或 - 输入序列为空。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>返回并行序列中满足指定条件的唯一元素；如果有多个这样的元素存在，则会引发异常。</summary>
      <returns>输入序列中满足条件的单个元素。</returns>
      <param name="source">要返回其单个元素的序列。</param>
      <param name="predicate">用于测试元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">没有元素满足 <paramref name="predicate" /> 中的条件。- 或 - 多个元素满足 <paramref name="predicate" /> 中的条件。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>返回并行序列中的唯一元素；如果该序列为空，则返回默认值；如果该序列包含多个元素，此方法将引发异常。</summary>
      <returns>返回输入序列的单个元素；如果序列不包含任何元素，则返回 default()。</returns>
      <param name="source">要返回其单个元素的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>返回并行序列中满足指定条件的唯一元素；如果这类元素不存在，则返回默认值；如果有多个元素满足该条件，此方法将引发异常。</summary>
      <returns>输入序列中满足条件的单个元素，如果未找到这样的元素，则为 default()。</returns>
      <param name="source">要返回其单个元素的序列。</param>
      <param name="predicate">用于测试元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 是空的，或者返回了多个元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>跳过并行序列中指定数量的元素，然后返回剩余的元素。</summary>
      <returns>一个序列，其中包含输入序列中的指定索引后出现的元素。</returns>
      <param name="source">要从其返回元素的序列。</param>
      <param name="count">返回剩余元素前要跳过的元素数量。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.OverflowException">计数比 <see cref="F:System.Int32.MaxValue" /> 大</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>跳过并行序列中满足指定条件的任何元素，然后返回剩余元素。</summary>
      <returns>一个序列，它包含输入序列中从没有通过谓词指定的测试的线性系列中第一个元素开始的元素。</returns>
      <param name="source">要从其返回元素的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>跳过并行序列中满足指定条件的任何元素，然后返回剩余元素。 将在谓词函数的逻辑中使用元素的索引。</summary>
      <returns>一个序列，它包含输入序列中从没有通过谓词指定的测试的线性系列中第一个元素开始的元素。</returns>
      <param name="source">要从其返回元素的序列。</param>
      <param name="predicate">用于测试每个源元素是否满足条件的函数；该函数的第二个参数表示源元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.OverflowException">超过 <see cref="F:System.Int32.MaxValue" /> 个元素都是用该查询枚举。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})">
      <summary>并行计算一个值序列的和。</summary>
      <returns>序列中投影值的总和。</returns>
      <param name="source">一个要对其求和的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">和大于 <see cref="F:System.Decimal.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})">
      <summary>并行计算一个值序列的和。</summary>
      <returns>序列中投影值的总和。</returns>
      <param name="source">一个要对其求和的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">和大于 <see cref="F:System.Double.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})">
      <summary>并行计算一个值序列的和。</summary>
      <returns>序列中投影值的总和。</returns>
      <param name="source">一个要对其求和的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">和大于 <see cref="F:System.Int32.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})">
      <summary>并行计算一个值序列的和。</summary>
      <returns>序列中投影值的总和。</returns>
      <param name="source">一个要对其求和的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">和大于 <see cref="F:System.Int64.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>并行计算一个值序列的和。</summary>
      <returns>序列中投影值的总和。</returns>
      <param name="source">一个要对其求和的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">和大于 <see cref="F:System.Decimal.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>并行计算一个值序列的和。</summary>
      <returns>序列中投影值的总和。</returns>
      <param name="source">一个要对其求和的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">和大于 <see cref="F:System.Double.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>并行计算一个值序列的和。</summary>
      <returns>序列中投影值的总和。</returns>
      <param name="source">一个要对其求和的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">和大于 <see cref="F:System.Int32.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>并行计算一个值序列的和。</summary>
      <returns>序列中投影值的总和。</returns>
      <param name="source">一个要对其求和的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">和大于 <see cref="F:System.Int64.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>并行计算一个值序列的和。</summary>
      <returns>序列中投影值的总和。</returns>
      <param name="source">一个要对其求和的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">和大于 <see cref="F:System.Single.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})">
      <summary>并行计算一个值序列的和。</summary>
      <returns>序列中投影值的总和。</returns>
      <param name="source">一个要对其求和的值序列。</param>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">和大于 <see cref="F:System.Single.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>并行计算一个值序列的和，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <returns>序列中投影值的总和。</returns>
      <param name="source">一个要对其求和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">和大于 <see cref="F:System.Decimal.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>并行计算一个值序列的和，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <returns>序列中投影值的总和。</returns>
      <param name="source">一个要对其求和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">和大于 <see cref="F:System.Double.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>并行计算一个值序列的和，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <returns>序列中投影值的总和。</returns>
      <param name="source">一个要对其求和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">源序列中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">和大于 <see cref="F:System.Int32.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>并行计算一个值序列的和，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <returns>序列中投影值的总和。</returns>
      <param name="source">一个要对其求和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">和大于 <see cref="F:System.Int64.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>并行计算一个值序列的和，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <returns>序列中投影值的总和。</returns>
      <param name="source">一个要对其求和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">和大于 <see cref="F:System.Decimal.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>并行计算一个值序列的和，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <returns>序列中投影值的总和。</returns>
      <param name="source">一个要对其求和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">和大于 <see cref="F:System.Double.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>并行计算一个值序列的和，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <returns>序列中投影值的总和。</returns>
      <param name="source">一个要对其求和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">和大于 <see cref="F:System.Int32.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>并行计算一个值序列的和，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <returns>序列中投影值的总和。</returns>
      <param name="source">一个要对其求和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">和大于 <see cref="F:System.Int64.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>并行计算一个值序列的和，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <returns>序列中投影值的总和。</returns>
      <param name="source">一个要对其求和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">和大于 <see cref="F:System.Single.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>并行计算一个值序列的和，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <returns>序列中投影值的总和。</returns>
      <param name="source">一个要对其求和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">和大于 <see cref="F:System.Single.MaxValue" />。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>从并行序列的开头返回指定数量的连续元素。</summary>
      <returns>一个序列，其中包含输入序列开头的指定数量的元素。</returns>
      <param name="source">要从其返回元素的序列。</param>
      <param name="count">要返回的元素数量。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>返回并行序列中满足指定条件的任何元素。</summary>
      <returns>一个序列，它包含输入序列中出现在无法再通过测试的元素之前的元素。</returns>
      <param name="source">要从其返回元素的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>返回并行序列中满足指定条件的任何元素。 将在谓词函数的逻辑中使用元素的索引。</summary>
      <returns>一个序列，它包含输入序列中出现在无法再通过测试的元素之前的元素。</returns>
      <param name="source">要从其返回元素的序列。</param>
      <param name="predicate">用于测试每个源元素是否满足条件的函数；该函数的第二个参数表示源元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.OverflowException">超过 <see cref="F:System.Int32.MaxValue" /> 个元素都是用这个查询枚举的。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})">
      <summary>根据某个键按升序对序列中的元素并行执行后续排序。</summary>
      <returns>其中的元素将根据某个键进行排序的 OrderedParallelQuery{TSource}。</returns>
      <param name="source">一个包含要排序的元素的 OrderedParallelQuery{TSource}。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比较器按升序对序列中的元素并行执行后续排序。</summary>
      <returns>其中的元素将根据某个键进行排序的 OrderedParallelQuery{TSource}。</returns>
      <param name="source">一个包含要排序的元素的 OrderedParallelQuery{TSource}。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 IComparer{TKey}。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})">
      <summary>根据某个键按降序对序列中的元素并行执行后续排序。</summary>
      <returns>一个序列，将根据键按降序对其元素进行排序。</returns>
      <param name="source">一个包含要排序的元素的 OrderedParallelQuery{TSource}。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比较器按降序对序列中的元素并行执行后续排序。</summary>
      <returns>一个序列，将根据键按降序对其元素进行排序。</returns>
      <param name="source">一个包含要排序的元素的 OrderedParallelQuery{TSource}。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 IComparer{TKey}。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})">
      <summary>从 <see cref="T:System.Linq.ParallelQuery`1" /> 创建一个数组。</summary>
      <returns>一个包含输入序列中的元素的数组。</returns>
      <param name="source">要从其中创建数组的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>根据指定的键选择器函数，从 <see cref="T:System.Linq.ParallelQuery`1" /> 创建一个 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>一个包含键和值的 <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
      <param name="source">据其创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的序列。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> 生成一个为 null 引用的键（在 Visual Basic 中为 Nothing）。- 或 - <paramref name="keySelector" /> 为两个元素产生了重复键。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数和键比较器，从 <see cref="T:System.Linq.ParallelQuery`1" /> 创建一个 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>一个包含键和值的 <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
      <param name="source">据其创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的序列。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="comparer">一个用于对键进行比较的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> 生成一个为 null 引用的键（在 Visual Basic 中为 Nothing）。- 或 - <paramref name="keySelector" /> 为两个元素产生了重复键。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>根据指定的键选择器和元素选择器函数，从 <see cref="T:System.Linq.ParallelQuery`1" /> 创建一个 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.Dictionary`2" />，包含从输入序列中选择的类型为 <paramref name="TElement" /> 的值。</returns>
      <param name="source">据其创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的序列。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> 返回的值的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> 生成一个为 null 引用的键（在 Visual Basic 中为 Nothing）。- 或 - <paramref name="keySelector" /> 为两个元素产生了重复键。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数、比较器和元素选择器函数，从 <see cref="T:System.Linq.ParallelQuery`1" /> 创建一个 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.Dictionary`2" />，包含从输入序列中选择的类型为 <paramref name="TElement" /> 的值。</returns>
      <param name="source">据其创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的序列。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <param name="comparer">一个用于对键进行比较的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> 返回的值的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> 生成一个为 null 引用的键（在 Visual Basic 中为 Nothing）。- 或 - <paramref name="keySelector" /> 为两个元素产生了重复键。- 或 - 在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})">
      <summary>从 <see cref="T:System.Linq.ParallelQuery`1" /> 创建一个 <see cref="T:System.Collections.Generic.List`1" />。</summary>
      <returns>一个包含输入序列中的元素的 <see cref="T:System.Collections.Generic.List`1" />。</returns>
      <param name="source">据其创建 <see cref="T:System.Collections.Generic.List`1" /> 的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>根据指定的键选择器函数，从 <see cref="T:System.Linq.ParallelQuery`1" /> 创建一个 <see cref="T:System.Linq.ILookup`2" />。</summary>
      <returns>一个包含键和值的 <see cref="T:System.Linq.ILookup`2" />。</returns>
      <param name="source">据其创建 <see cref="T:System.Linq.ILookup`2" /> 的序列。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数和键比较器，从 <see cref="T:System.Linq.ParallelQuery`1" /> 创建一个 <see cref="T:System.Linq.ILookup`2" />。</summary>
      <returns>一个包含键和值的 <see cref="T:System.Linq.ILookup`2" />。</returns>
      <param name="source">据其创建 <see cref="T:System.Linq.ILookup`2" /> 的序列。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="comparer">一个用于对键进行比较的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>根据指定的键选择器和元素选择器函数，从 <see cref="T:System.Linq.ParallelQuery`1" /> 创建一个 <see cref="T:System.Linq.ILookup`2" />。</summary>
      <returns>一个 <see cref="T:System.Linq.ILookup`2" />，包含从输入序列中选择的类型为 <paramref name="TElement" /> 的值。</returns>
      <param name="source">据其创建 <see cref="T:System.Linq.ILookup`2" /> 的序列。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> 返回的值的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数、比较器和元素选择器函数从 <see cref="T:System.Linq.ParallelQuery`1" /> 创建一个 <see cref="T:System.Linq.ILookup`2" />。</summary>
      <returns>一个 Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;)，其中包含从输入序列中选择的 TElement 类型的值。</returns>
      <param name="source">据其创建 <see cref="T:System.Linq.ILookup`2" /> 的序列。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <param name="comparer">一个用于对键进行比较的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> 返回的值的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>切勿调用此 Union 重载。 此方法已标记为过时，调用此方法时总是会引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <param name="first">未使用此参数。</param>
      <param name="second">未使用此参数。</param>
      <typeparam name="TSource">未使用此类型参数。</typeparam>
      <exception cref="T:System.NotSupportedException">调用此方法时发生的异常。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>切勿调用此 Union 重载。 此方法已标记为过时，调用此方法时总是会引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <param name="first">未使用此参数。</param>
      <param name="second">未使用此参数。</param>
      <param name="comparer">未使用此参数。</param>
      <typeparam name="TSource">未使用此类型参数。</typeparam>
      <exception cref="T:System.NotSupportedException">调用此方法时发生的异常。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>通过使用默认的相等比较器，生成两个并行序列的并集。</summary>
      <returns>一个序列，其中包含两个输入序列中的非重复元素。</returns>
      <param name="first">一个序列，其中的非重复元素构成并集的第一部分。</param>
      <param name="second">一个序列，其中的非重复元素构成并集的第二部分。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 IEqualityComparer{T} 生成两个并行序列的并集。</summary>
      <returns>一个序列，其中包含两个输入序列中的非重复元素。</returns>
      <param name="first">一个序列，其中的非重复元素构成并集的第一部分。</param>
      <param name="second">一个序列，其中的非重复元素构成并集的第二部分。</param>
      <param name="comparer">用于比较值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>基于谓词并行筛选值序列。</summary>
      <returns>一个序列，其中包含输入序列中满足条件的元素。</returns>
      <param name="source">要筛选的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">source 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>基于谓词并行筛选值序列。 将在谓词函数的逻辑中使用每个元素的索引。</summary>
      <returns>一个序列，其中包含输入序列中满足条件的元素。</returns>
      <param name="source">要筛选的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">source 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.OverflowException">超过 <see cref="F:System.Int32.MaxValue" /> 个元素都是用该查询枚举。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)">
      <summary>设置要与查询关联的 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <returns>表示与源相同的查询的 ParallelQuery，但带有已注册的取消标记。</returns>
      <param name="source">要对其设置选项的 ParallelQuery。</param>
      <param name="cancellationToken">取消标记。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">与 <paramref name="cancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.InvalidOperationException">在该查询中，多次使用 <paramref name="WithCancellation" />。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>设置要在查询中使用的并行度。 并行度是将用于处理查询的同时执行的任务的最大数目。</summary>
      <returns>表示与源相同的查询的 ParallelQuery，其中设置了对并行度的限制。</returns>
      <param name="source">要对其设置并行度限制的 ParallelQuery。</param>
      <param name="degreeOfParallelism">查询的并行度。 默认值是 Math.Min(<see cref="P:System.Environment.ProcessorCount" />, MAX_SUPPORTED_DOP)，其中 MAX_SUPPORTED_DOP 为 64。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="degreeOfParallelism" /> 小于 1 或大于 63。</exception>
      <exception cref="T:System.InvalidOperationException">WithDegreeOfParallelism 在查询中多次使用。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)">
      <summary>设置查询的执行模式。</summary>
      <returns>表示与源相同的查询的 ParallelQuery，但带有已注册的执行模式。</returns>
      <param name="source">要对其设置选项的 ParallelQuery。</param>
      <param name="executionMode">执行查询使用的模式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="executionMode" /> 不是有效的 <see cref="T:System.Linq.ParallelExecutionMode" /> 值。</exception>
      <exception cref="T:System.InvalidOperationException">WithExecutionMode 在查询中多次使用。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)">
      <summary>设置此查询的合并选项，它指定查询对输出进行缓冲处理的方式。</summary>
      <returns>表示与源相同的查询的 ParallelQuery，但带有已注册的合并选项。</returns>
      <param name="source">要对其设置选项的 ParallelQuery。</param>
      <param name="mergeOptions">要为此查询设置的合并选项。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mergeOptions" /> 不是有效的 <see cref="T:System.Linq.ParallelMergeOptions" /> 值。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="WithMergeOptions" /> 在查询中多次使用。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>切勿调用此 Zip 重载。 此方法已标记为过时，调用此方法时总是会引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <param name="first">未使用此参数。</param>
      <param name="second">未使用此参数。</param>
      <param name="resultSelector">未使用此参数。</param>
      <typeparam name="TFirst">未使用此类型参数。</typeparam>
      <typeparam name="TSecond">未使用此类型参数。</typeparam>
      <typeparam name="TResult">未使用此类型参数。</typeparam>
      <exception cref="T:System.NotSupportedException">调用此方法时发生的异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})">
      <summary>通过使用指定的谓词函数并行合并两个序列。</summary>
      <returns>一个序列，其中包含通过对两个序列执行 <paramref name="resultSelector" /> 配对获得的 <paramref name="TResult" /> 类型的元素。 如果序列长度不相等，这将截断为较短序列的长度。</returns>
      <param name="first">要压缩的第一个序列。</param>
      <param name="second">要压缩的第二个序列。</param>
      <param name="resultSelector">用于从两个匹配元素创建结果元素的函数。</param>
      <typeparam name="TFirst">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TSecond">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TResult">返回元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 或 <paramref name="resultSelector" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已使用通过 <paramref name="WithCancellation" /> 传入的标记取消。</exception>
      <exception cref="T:System.AggregateException">在查询的评估过程中出现了一个或多个异常。</exception>
    </member>
    <member name="T:System.Linq.ParallelExecutionMode">
      <summary>查询执行模式是一种提示，它指定系统在并行化查询时应如何使性能达到平衡。</summary>
    </member>
    <member name="F:System.Linq.ParallelExecutionMode.Default">
      <summary>此设置为默认设置。 PLINQ 将检查查询的结构，仅在可能带来加速时才对查询进行并行化。 如果查询结构指示不可能获得加速，则 PLINQ 会将查询当作普通的 LINQ to Objects 查询来执行。</summary>
    </member>
    <member name="F:System.Linq.ParallelExecutionMode.ForceParallelism">
      <summary>并行化整个查询，即使要使用系统开销大的算法。 如果认为并行执行查询将带来加速，则使用此标志，但处于默认模式的 PLINQ 将按顺序执行它。</summary>
    </member>
    <member name="T:System.Linq.ParallelMergeOptions">
      <summary>指定查询中要使用的输出合并的首选类型。 换言之，它指示 PLINQ 如何将多个分区的结果合并回单个结果序列。 这仅是一个提示，系统在并行处理所有查询时可能不会考虑这一点。</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.AutoBuffered">
      <summary>利用系统选定大小的输出缓冲区进行合并。 在向查询使用者提供结果之前，会先将结果累计到输出缓冲区中。</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.Default">
      <summary>使用默认合并类型，即 AutoBuffered。</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.FullyBuffered">
      <summary>利用整个输出缓冲区进行合并。 在向查询使用者提供任何结果之前，系统会先累计所有结果。</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.NotBuffered">
      <summary>不利用输出缓冲区进行合并。 一旦计算出结果元素，就向查询使用者提供这些元素。</summary>
    </member>
    <member name="T:System.Linq.ParallelQuery">
      <summary>表示并行序列。</summary>
    </member>
    <member name="M:System.Linq.ParallelQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问序列的枚举数。</summary>
      <returns>循环访问序列的枚举数。</returns>
    </member>
    <member name="T:System.Linq.ParallelQuery`1">
      <summary>表示并行序列。</summary>
      <typeparam name="TSource">源序列中的元素的类型。</typeparam>
    </member>
    <member name="M:System.Linq.ParallelQuery`1.GetEnumerator">
      <summary>返回循环访问序列的枚举数。</summary>
      <returns>循环访问序列的枚举数。</returns>
    </member>
    <member name="T:System.Linq.Queryable">
      <summary>提供一组用于查询实现 <see cref="T:System.Linq.IQueryable`1" /> 的数据结构的 static（在 Visual Basic 中为 Shared）方法。</summary>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
      <summary>对序列应用累加器函数。</summary>
      <returns>累加器的最终值。</returns>
      <param name="source">要聚合的序列。</param>
      <param name="func">要应用于每个元素的累加器函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
      <summary>对序列应用累加器函数。 将指定的种子值用作累加器初始值。</summary>
      <returns>累加器的最终值。</returns>
      <param name="source">要聚合的序列。</param>
      <param name="seed">累加器的初始值。</param>
      <param name="func">要对每个元素调用的累加器函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TAccumulate">累加器值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
      <summary>对序列应用累加器函数。 将指定的种子值用作累加器的初始值，并使用指定的函数选择结果值。</summary>
      <returns>已转换的累加器最终值。</returns>
      <param name="source">要聚合的序列。</param>
      <param name="seed">累加器的初始值。</param>
      <param name="func">要对每个元素调用的累加器函数。</param>
      <param name="selector">将累加器的最终值转换为结果值的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TAccumulate">累加器值的类型。</typeparam>
      <typeparam name="TResult">结果值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>确定序列中的所有元素是否都满足条件。</summary>
      <returns>如果源序列中的每个元素都通过指定谓词中的测试，或者序列为空，则为 true；否则为 false。</returns>
      <param name="source">要测试其元素是否满足条件的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
      <summary>确定序列是否包含任何元素。</summary>
      <returns>如果源序列包含任何元素，则为 true；否则为 false。</returns>
      <param name="source">要检查是否为空的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>确定序列中的任何元素是否都满足条件。</summary>
      <returns>如果源序列中的任何元素都通过指定谓词中的测试，则为 true；否则为 false。</returns>
      <param name="source">要测试其元素是否满足条件的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>将泛型 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 转换为泛型 <see cref="T:System.Linq.IQueryable`1" />。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，表示输入序列。</returns>
      <param name="source">要转换的序列。</param>
      <typeparam name="TElement">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
      <summary>将 <see cref="T:System.Collections.IEnumerable" /> 转换为 <see cref="T:System.Linq.IQueryable" />。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable" />，表示输入序列。</returns>
      <param name="source">要转换的序列。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 未为某些 <paramref name="T" /> 实现 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
      <summary>计算 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算平均值的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
      <summary>计算 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算平均值的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
      <summary>计算 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算平均值的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
      <summary>计算 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算平均值的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>计算可以为 null 的 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>值序列的平均值；如果 Source 序列为空或仅包含 null 值，则为 null。</returns>
      <param name="source">要计算平均值的可以为 null 的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>计算可以为 null 的 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>值序列的平均值；如果 Source 序列为空或仅包含 null 值，则为 null。</returns>
      <param name="source">要计算平均值的可以为 null 的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>值序列的平均值；如果 Source 序列为空或仅包含 null 值，则为 null。</returns>
      <param name="source">要计算平均值的、可以为 null 的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>值序列的平均值；如果 Source 序列为空或仅包含 null 值，则为 null。</returns>
      <param name="source">要计算平均值的可以为 null 的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>计算可以为 null 的 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>值序列的平均值；如果 Source 序列为空或仅包含 null 值，则为 null。</returns>
      <param name="source">要计算平均值的可以为 null 的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
      <summary>计算 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算平均值的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>计算 <see cref="T:System.Decimal" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">用于计算平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>计算 <see cref="T:System.Double" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>计算 <see cref="T:System.Int32" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>计算 <see cref="T:System.Int64" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>计算可以为 null 的 <see cref="T:System.Decimal" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>值序列的平均值；如果 <paramref name="source" /> 序列为空或仅包含 null 值，则为 null。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>计算可以为 null 的 <see cref="T:System.Double" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>值序列的平均值；如果 <paramref name="source" /> 序列为空或仅包含 null 值，则为 null。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int32" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>值序列的平均值；如果 <paramref name="source" /> 序列为空或仅包含 null 值，则为 null。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int64" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>值序列的平均值；如果 <paramref name="source" /> 序列为空或仅包含 null 值，则为 null。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>计算可以为 null 的 <see cref="T:System.Single" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>值序列的平均值；如果 <paramref name="source" /> 序列为空或仅包含 null 值，则为 null。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>计算 <see cref="T:System.Single" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
      <summary>将 <see cref="T:System.Linq.IQueryable" /> 的元素转换为指定的类型。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含被转换为指定类型的源序列中的每个元素。</returns>
      <param name="source">包含要转换的元素的 <see cref="T:System.Linq.IQueryable" />。</param>
      <typeparam name="TResult">
        <paramref name="source" /> 中的元素要转换成的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidCastException">序列中的元素不能强制转换为 <paramref name="TResult" /> 类型。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>连接两个序列。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含两个输入序列的连接元素。</returns>
      <param name="source1">要连接的第一个序列。</param>
      <param name="source2">要与第一个序列连接的序列。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
      <summary>通过使用默认的相等比较器确定序列是否包含指定的元素。</summary>
      <returns>如果输入序列包含具有指定值的元素，则为 true；否则为 false。</returns>
      <param name="source">要在其中定位 <paramref name="item" /> 的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="item">要在序列中定位的对象。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 确定序列是否包含指定的元素。</summary>
      <returns>如果输入序列包含具有指定值的元素，则为 true；否则为 false。</returns>
      <param name="source">要在其中定位 <paramref name="item" /> 的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="item">要在序列中定位的对象。</param>
      <param name="comparer">用于比较值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
      <summary>返回序列中的元素数量。</summary>
      <returns>输入序列中的元素数量。</returns>
      <param name="source">包含要计数的元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>返回指定序列中满足条件的元素数量。</summary>
      <returns>序列中满足谓词函数的条件的元素数量。</returns>
      <param name="source">包含要进行计数的元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
      <summary>返回指定序列的元素；如果序列为空，则返回单一实例集合中的类型参数的默认值。</summary>
      <returns>用于在 <paramref name="source" /> 为空的情况下包含 default(<paramref name="TSource" />) 的 <see cref="T:System.Linq.IQueryable`1" />；否则为 <paramref name="source" />。</returns>
      <param name="source">用于在序列为空的情况下返回默认值的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
      <summary>返回指定序列中的元素；如果序列为空，则返回单一实例集合中的指定值。</summary>
      <returns>在 <paramref name="source" /> 为空的情况下包含 <paramref name="defaultValue" /> 的 <see cref="T:System.Linq.IQueryable`1" />；否则为 <paramref name="source" />。</returns>
      <param name="source">用于在序列为空的情况下返回指定值的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="defaultValue">序列为空时要返回的值。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
      <summary>通过使用默认的相等比较器对值进行比较返回序列中的非重复元素。</summary>
      <returns>包含 <paramref name="source" /> 中的非重复元素的 <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source">要从中删除重复项的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较返回序列中的非重复元素。</summary>
      <returns>包含 <paramref name="source" /> 中的非重复元素的 <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source">要从中删除重复项的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="comparer">用于比较值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>返回序列中指定索引处的元素。</summary>
      <returns>
        <paramref name="source" /> 中指定位置处的元素。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="index">要检索的从零开始的元素索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>返回序列中指定索引处的元素；如果索引超出范围，则返回默认值。</summary>
      <returns>如果 <paramref name="index" /> 超出 <paramref name="source" /> 的界限，则返回 default(<paramref name="TSource" />)；否则返回 <paramref name="source" /> 中指定位置处的元素。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="index">要检索的从零开始的元素索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>通过使用默认的相等比较器对值进行比较生成两个序列的差集。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含两个序列的差集。</returns>
      <param name="source1">一个 <see cref="T:System.Linq.IQueryable`1" />，将返回其不在 <paramref name="source2" /> 中的元素。</param>
      <param name="source2">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其也出现在第一个序列中的元素将不会出现在返回的序列中。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较产生两个序列的差集。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含两个序列的差集。</returns>
      <param name="source1">一个 <see cref="T:System.Linq.IQueryable`1" />，将返回其不在 <paramref name="source2" /> 中的元素。</param>
      <param name="source2">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其也出现在第一个序列中的元素将不会出现在返回的序列中。</param>
      <param name="comparer">用于比较值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
      <summary>返回序列中的第一个元素。</summary>
      <returns>
        <paramref name="source" /> 中的第一个元素。</returns>
      <param name="source">要返回其第一个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>返回序列中满足指定条件的第一个元素。</summary>
      <returns>通过 <paramref name="predicate" /> 中测试的 <paramref name="source" /> 中的第一个元素。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有元素满足 <paramref name="predicate" /> 中的条件。 - 或 - 源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>返回序列中的第一个元素；如果序列中不包含任何元素，则返回默认值。</summary>
      <returns>如果 <paramref name="source" /> 为空，则返回 default(<paramref name="TSource" />)；否则返回 <paramref name="source" /> 中的第一个元素。</returns>
      <param name="source">要返回其第一个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>返回序列中满足指定条件的第一个元素，如果未找到这样的元素，则返回默认值。</summary>
      <returns>如果 <paramref name="source" /> 为空或没有元素通过 <paramref name="predicate" /> 指定的测试，则返回 default(<paramref name="TSource" />)，否则返回 <paramref name="source" /> 中通过 <paramref name="predicate" /> 指定的测试的第一个元素。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组。</summary>
      <returns>在 C# 中为 IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;，或者在 Visual Basic 中为 IQueryable(Of IGrouping(Of TKey, TSource))，其中每个 <see cref="T:System.Linq.IGrouping`2" /> 对象都包含一个对象序列和一个键。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并使用指定的比较器对键进行比较。</summary>
      <returns>在 C# 中为 IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;，或者在 Visual Basic 中为 IQueryable(Of IGrouping(Of TKey, TSource))，其中每个 <see cref="T:System.Linq.IGrouping`2" /> 都包含一个对象序列和一个键。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="comparer">一个用于对键进行比较的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且通过使用指定的函数对每个组中的元素进行投影。</summary>
      <returns>在 C# 中为 IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;，或在 Visual Basic 中为 IQueryable(Of IGrouping(Of TKey, TElement))，其中每个 <see cref="T:System.Linq.IGrouping`2" /> 都包含一个 <paramref name="TElement" /> 类型的对象序列和一个键。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <typeparam name="TElement">每个 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>对序列中的元素进行分组并且通过使用指定的函数对每组中的元素进行投影。 通过使用指定的比较器对键值进行比较。</summary>
      <returns>在 C# 中为 IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;，或在 Visual Basic 中为 IQueryable(Of IGrouping(Of TKey, TElement))，其中每个 <see cref="T:System.Linq.IGrouping`2" /> 都包含一个 <paramref name="TElement" /> 类型的对象序列和一个键。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的函数。</param>
      <param name="comparer">一个用于对键进行比较的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <typeparam name="TElement">每个 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。 通过使用指定的函数对每个组的元素进行投影。</summary>
      <returns>一个 T:System.Linq.IQueryable`1，它具有 <paramref name="TResult" /> 的类型参数，并且其中每个元素都表示对一个组及其键的投影。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <typeparam name="TElement">每个 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 返回的结果值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。 通过使用指定的比较器对键进行比较，并且通过使用指定的函数对每个组的元素进行投影。</summary>
      <returns>一个 T:System.Linq.IQueryable`1，它具有 <paramref name="TResult" /> 的类型参数，并且其中每个元素都表示对一个组及其键的投影。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <param name="comparer">一个用于对键进行比较的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <typeparam name="TElement">每个 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 返回的结果值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 或 <paramref name="resultSelector" /> 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。</summary>
      <returns>一个 T:System.Linq.IQueryable`1，它具有 <paramref name="TResult" /> 的类型参数，并且其中每个元素都表示对一个组及其键的投影。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 返回的结果值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。 通过使用指定的比较器对键进行比较。</summary>
      <returns>一个 T:System.Linq.IQueryable`1，它具有 <paramref name="TResult" /> 的类型参数，并且其中每个元素都表示对一个组及其键的投影。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <param name="comparer">一个用于对键进行比较的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 返回的结果值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="resultSelector" /> 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
      <summary>基于键相等对两个序列的元素进行关联并对结果进行分组。 使用默认的相等比较器对键进行比较。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含通过对两个序列执行已分组的联接而获得的 <paramref name="TResult" /> 类型的元素。</returns>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从第一个序列的元素和第二个序列的匹配元素集合中创建结果元素的函数。</param>
      <typeparam name="TOuter">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>基于键相等对两个序列的元素进行关联并对结果进行分组。 使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含通过对两个序列执行已分组的联接而获得的 <paramref name="TResult" /> 类型的元素。</returns>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从第一个序列的元素和第二个序列的匹配元素集合中创建结果元素的函数。</param>
      <param name="comparer">用于对键进行哈希处理和比较的比较器。</param>
      <typeparam name="TOuter">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>通过使用默认的相等比较器对值进行比较生成两个序列的交集。</summary>
      <returns>一个包含两个序列的交集的序列。</returns>
      <param name="source1">一个序列，将返回其也出现在 <paramref name="source2" /> 中的非重复元素。</param>
      <param name="source2">一个序列，将返回其也在第一个序列中出现的非重复元素。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较以生成两个序列的交集。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，它包含两个序列的交集。</returns>
      <param name="source1">一个 <see cref="T:System.Linq.IQueryable`1" />，将返回其也出现在 <paramref name="source2" /> 中的非重复元素。</param>
      <param name="source2">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，将返回其也出现在第一个序列中的非重复元素。</param>
      <param name="comparer">用于比较值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
      <summary>基于匹配键对两个序列的元素进行关联。 使用默认的相等比较器对键进行比较。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，具有通过对两个序列执行内部联接而获得的 <paramref name="TResult" /> 类型的元素。</returns>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从两个匹配元素创建结果元素的函数。</param>
      <typeparam name="TOuter">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>基于匹配键对两个序列的元素进行关联。 使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，具有通过对两个序列执行内部联接而获得的 <paramref name="TResult" /> 类型的元素。</returns>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从两个匹配元素创建结果元素的函数。</param>
      <param name="comparer">一个 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />，用于对键进行哈希处理和比较。</param>
      <typeparam name="TOuter">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
      <summary>返回序列中的最后一个元素。</summary>
      <returns>位于 <paramref name="source" /> 中最后位置处的值。</returns>
      <param name="source">要返回其最后一个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>返回序列中满足指定条件的最后一个元素。</summary>
      <returns>
        <paramref name="source" /> 中的最后一个元素，它通过了由 <paramref name="predicate" /> 指定的测试。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有元素满足 <paramref name="predicate" /> 中的条件。 - 或 - 源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>返回序列中的最后一个元素，如果序列中不包含任何元素，则返回默认值。</summary>
      <returns>如果 <paramref name="source" /> 为空，则返回 default(<paramref name="TSource" />)；否则返回 <paramref name="source" /> 中的最后一个元素。</returns>
      <param name="source">要返回其最后一个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>返回序列中满足条件的最后一个元素；如果未找到这样的元素，则返回默认值。</summary>
      <returns>如果 <paramref name="source" /> 为空或没有元素通过谓词函数中的测试，则返回 default(<paramref name="TSource" />)；否则，返回通过谓词函数中测试的 <paramref name="source" /> 的最后一个元素。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
      <summary>返回一个 <see cref="T:System.Int64" />，表示序列中的元素的总数量。</summary>
      <returns>
        <paramref name="source" /> 中的元素的数量。</returns>
      <param name="source">包含要进行计数的元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">元素的数量超过 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>返回一个 <see cref="T:System.Int64" />，它表示序列中满足条件的元素数量。</summary>
      <returns>
        <paramref name="source" /> 中满足谓词函数的条件的元素数量。</returns>
      <param name="source">包含要进行计数的元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">匹配元素的数量超过 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
      <summary>返回泛型 <see cref="T:System.Linq.IQueryable`1" /> 中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定最大值的值序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>对泛型 <see cref="T:System.Linq.IQueryable`1" /> 的每个元素调用投影函数，并返回最大结果值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定最大值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="selector" /> 表示的函数返回的值类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
      <summary>返回泛型 <see cref="T:System.Linq.IQueryable`1" /> 中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">要确定最小值的值序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>对泛型 <see cref="T:System.Linq.IQueryable`1" /> 的每个元素调用投影函数，并返回最小结果值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">要确定最小值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="selector" /> 表示的函数返回的值类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
      <summary>根据指定类型筛选 <see cref="T:System.Linq.IQueryable" /> 的元素。</summary>
      <returns>一个集合，包含 <paramref name="source" /> 中的类型为 <paramref name="TResult" /> 的元素。</returns>
      <param name="source">要对其元素进行筛选的 <see cref="T:System.Linq.IQueryable" />。</param>
      <typeparam name="TResult">筛选序列元素所根据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>根据键按升序对序列的元素排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedQueryable`1" />，根据键对其元素排序。</returns>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比较器按升序对序列的元素排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedQueryable`1" />，根据键对其元素排序。</returns>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>根据键按降序对序列的元素排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedQueryable`1" />，将根据键按降序对其元素进行排序。</returns>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比较器按降序对序列的元素排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedQueryable`1" />，将根据键按降序对其元素进行排序。</returns>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
      <summary>反转序列中元素的顺序。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，其元素以相反顺序对应于输入序列的元素。</returns>
      <param name="source">要反转的值序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>将序列中的每个元素投影到新表中。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，其元素为对 <paramref name="source" /> 的每个元素调用投影函数的结果。</returns>
      <param name="source">一个要投影的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="selector" /> 表示的函数返回的值类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
      <summary>通过合并元素的索引将序列的每个元素投影到新表中。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，其元素为对 <paramref name="source" /> 的每个元素调用投影函数的结果。</returns>
      <param name="source">一个要投影的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="selector" /> 表示的函数返回的值类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>将序列的每个元素投影到一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，并对其中的每个元素调用结果选择器函数。 每个中间序列的结果值都组合为一个一维序列，并将其返回。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，其元素是通过对 <paramref name="source" /> 的每个元素调用一对多投影函数 <paramref name="collectionSelector" />，然后将这些序列元素的每一个及其对应的 <paramref name="source" /> 元素映射到结果元素中的结果。</returns>
      <param name="source">一个要投影的值序列。</param>
      <param name="collectionSelector">一个应用于输入序列的每个元素的投影函数。</param>
      <param name="resultSelector">一个应用于每个中间序列的每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TCollection">由 <paramref name="collectionSelector" /> 表示的函数收集的中间元素类型。</typeparam>
      <typeparam name="TResult">结果序列的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="collectionSelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>将序列的每个元素投影到一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，并将结果序列组合为一个序列。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，其元素是对输入序列的每个元素调用一对多投影函数的结果。</returns>
      <param name="source">一个要投影的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="selector" /> 表示的函数返回的序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>将序列中的每个元素投影到一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它合并了生成它的源元素的索引。 对每个中间序列的每个元素调用结果选择器函数，并且将结果值合并为一个一维序列，并将其返回。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，其元素是通过对 <paramref name="source" /> 的每个元素调用一对多投影函数 <paramref name="collectionSelector" />，然后将这些序列元素的每一个及其对应的 <paramref name="source" /> 元素映射到结果元素中的结果。</returns>
      <param name="source">一个要投影的值序列。</param>
      <param name="collectionSelector">要应用于输入序列的每个元素的投影函数；此函数的第二个参数表示源元素的索引。</param>
      <param name="resultSelector">一个应用于每个中间序列的每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TCollection">由 <paramref name="collectionSelector" /> 表示的函数收集的中间元素类型。</typeparam>
      <typeparam name="TResult">结果序列的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="collectionSelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>将序列的每个元素投影到一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，并将结果序列组合为一个序列。 每个源元素的索引用于该元素的投影表。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，其元素是对输入序列的每个元素调用一对多投影函数的结果。</returns>
      <param name="source">一个要投影的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数；此函数的第二个参数表示源元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="selector" /> 表示的函数返回的序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>通过使用默认的相等比较器比较元素以确定两个序列是否相等。</summary>
      <returns>如果两个源序列的长度相等并且它们的对应元素也相等，则为 true；否则为 false。</returns>
      <param name="source1">一个 <see cref="T:System.Linq.IQueryable`1" />，其元素用于与 <paramref name="source2" /> 中的元素进行比较。</param>
      <param name="source2">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素用于与第一个序列中的元素进行比较。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 比较元素以确定两个序列是否相等。</summary>
      <returns>如果两个源序列的长度相等并且它们的对应元素也相等，则为 true；否则为 false。</returns>
      <param name="source1">一个 <see cref="T:System.Linq.IQueryable`1" />，其元素用于与 <paramref name="source2" /> 中的元素进行比较。</param>
      <param name="source2">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素用于与第一个序列中的元素进行比较。</param>
      <param name="comparer">一个用于比较元素的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
      <summary>返回序列的唯一元素；如果该序列并非恰好包含一个元素，则会引发异常。</summary>
      <returns>输入序列的单个元素。</returns>
      <param name="source">要返回其单个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 具有多个元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>返回序列中满足指定条件的唯一元素；如果有多个这样的元素存在，则会引发异常。</summary>
      <returns>满足 <paramref name="predicate" /> 中条件的输入序列中的单个元素。</returns>
      <param name="source">要从中返回单个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有元素满足 <paramref name="predicate" /> 中的条件。 - 或 - 多个元素满足 <paramref name="predicate" /> 中的条件。 - 或 - 源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>返回序列中的唯一元素；如果该序列为空，则返回默认值；如果该序列包含多个元素，此方法将引发异常。</summary>
      <returns>返回输入序列的单个元素；如果序列不包含任何元素，则返回 default(<paramref name="TSource" />)。</returns>
      <param name="source">要返回其单个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 具有多个元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>返回序列中满足指定条件的唯一元素；如果这类元素不存在，则返回默认值；如果有多个元素满足该条件，此方法将引发异常。</summary>
      <returns>返回满足 <paramref name="predicate" /> 中条件的输入序列的单个元素；如果未找到这样的元素，则返回 default(<paramref name="TSource" />)。</returns>
      <param name="source">要从中返回单个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">多个元素满足 <paramref name="predicate" /> 中的条件。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>跳过序列中指定数量的元素，然后返回剩余的元素。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含输入序列中指定索引后出现的元素。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="count">返回剩余元素前要跳过的元素数量。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>只要满足指定的条件，就跳过序列中的元素，然后返回剩余元素。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含从未通过 <paramref name="predicate" /> 指定测试的线性系列中的第一个元素开始的 <paramref name="source" /> 中的元素。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>只要满足指定的条件，就跳过序列中的元素，然后返回剩余元素。 将在谓词函数的逻辑中使用元素的索引。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含从未通过 <paramref name="predicate" /> 指定测试的线性系列中的第一个元素开始的 <paramref name="source" /> 中的元素。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数；此函数的第二个参数表示源元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
      <summary>计算 <see cref="T:System.Decimal" /> 值序列之和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">一个要计算和的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
      <summary>计算 <see cref="T:System.Double" /> 值序列之和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">一个要计算和的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
      <summary>计算 <see cref="T:System.Int32" /> 值序列之和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">一个要计算和的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
      <summary>计算 <see cref="T:System.Int64" /> 值序列之和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">一个要计算和的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>计算可以为 null 的 <see cref="T:System.Decimal" /> 值序列之和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算和的可以为 null 的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>计算可以为 null 的 <see cref="T:System.Double" /> 值序列之和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算和的可以为 null 的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int32" /> 值序列之和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算和的可以为 null 的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int64" /> 值序列之和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算和的可以为 null 的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>计算可以为 null 的 <see cref="T:System.Single" /> 值序列之和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算和的可以为 null 的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
      <summary>计算 <see cref="T:System.Single" /> 值序列之和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">一个要计算和的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>计算 <see cref="T:System.Decimal" /> 值序列之和，而该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>投影值之和。</returns>
      <param name="source">一个 <paramref name="TSource" /> 类型的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>计算 <see cref="T:System.Double" /> 值序列之和，而该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>投影值之和。</returns>
      <param name="source">一个 <paramref name="TSource" /> 类型的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>计算 <see cref="T:System.Int32" /> 值序列之和，而该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>投影值之和。</returns>
      <param name="source">一个 <paramref name="TSource" /> 类型的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>计算 <see cref="T:System.Int64" /> 值序列之和，而该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>投影值之和。</returns>
      <param name="source">一个 <paramref name="TSource" /> 类型的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>计算可以为 null 的 <see cref="T:System.Decimal" /> 值序列之和，而该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>投影值之和。</returns>
      <param name="source">一个 <paramref name="TSource" /> 类型的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>计算可以为 null 的 <see cref="T:System.Double" /> 值序列之和，而该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>投影值之和。</returns>
      <param name="source">一个 <paramref name="TSource" /> 类型的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int32" /> 值序列之和，而该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>投影值之和。</returns>
      <param name="source">一个 <paramref name="TSource" /> 类型的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int64" /> 值序列之和，而该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>投影值之和。</returns>
      <param name="source">一个 <paramref name="TSource" /> 类型的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>计算可以为 null 的 <see cref="T:System.Single" /> 值序列之和，而该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>投影值之和。</returns>
      <param name="source">一个 <paramref name="TSource" /> 类型的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>计算 <see cref="T:System.Single" /> 值序列之和，而该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>投影值之和。</returns>
      <param name="source">一个 <paramref name="TSource" /> 类型的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>从序列的开头返回指定数量的连续元素。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含从 <paramref name="source" /> 开始处的指定数量的元素。</returns>
      <param name="source">要从其返回元素的序列。</param>
      <param name="count">要返回的元素数量。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>只要满足指定的条件，就会返回序列的元素。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含不再通过由 <paramref name="predicate" /> 指定测试的元素之前出现的输入序列中的元素。</returns>
      <param name="source">要从其返回元素的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>只要满足指定的条件，就会返回序列的元素。 将在谓词函数的逻辑中使用元素的索引。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含不再通过由 <paramref name="predicate" /> 指定测试的元素之前出现的输入序列中的元素。</returns>
      <param name="source">要从其返回元素的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数；此函数的第二个参数表示源序列中元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>根据某个键按升序对序列中的元素执行后续排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedQueryable`1" />，根据键对其元素排序。</returns>
      <param name="source">一个 <see cref="T:System.Linq.IOrderedQueryable`1" />，包含要排序的元素。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比较器按升序对序列中的元素执行后续排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedQueryable`1" />，根据键对其元素排序。</returns>
      <param name="source">一个 <see cref="T:System.Linq.IOrderedQueryable`1" />，包含要排序的元素。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>根据某个键按降序对序列中的元素执行后续排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedQueryable`1" />，将根据键按降序对其元素进行排序。</returns>
      <param name="source">一个 <see cref="T:System.Linq.IOrderedQueryable`1" />，包含要排序的元素。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比较器按降序对序列中的元素执行后续排序。</summary>
      <returns>一个集合，其中的元素是根据某个键按降序进行排序的。</returns>
      <param name="source">一个 <see cref="T:System.Linq.IOrderedQueryable`1" />，包含要排序的元素。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 函数返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>通过使用默认的相等比较器生成两个序列的并集。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含两个输入序列中的元素（重复元素除外）。</returns>
      <param name="source1">非重复元素组成合并运算的第一组的一个序列。</param>
      <param name="source2">非重复元素组成合并运算的第二组的一个序列。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 生成两个序列的并集。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含两个输入序列中的元素（重复元素除外）。</returns>
      <param name="source1">非重复元素组成合并运算的第一组的一个序列。</param>
      <param name="source2">非重复元素组成合并运算的第二组的一个序列。</param>
      <param name="comparer">用于比较值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>基于谓词筛选值序列。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含满足由 <paramref name="predicate" /> 指定的条件的输入序列中的元素。</returns>
      <param name="source">要筛选的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>基于谓词筛选值序列。 将在谓词函数的逻辑中使用每个元素的索引。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含满足由 <paramref name="predicate" /> 指定的条件的输入序列中的元素。</returns>
      <param name="source">要筛选的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数；此函数的第二个参数表示源序列中元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>通过使用指定的谓词函数合并两个序列。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含两个输入序列的已合并元素。</returns>
      <param name="source1">要合并的第一个序列。</param>
      <param name="source2">要合并的第二个序列。</param>
      <param name="resultSelector">用于指定如何合并这两个序列的元素的函数。</param>
      <typeparam name="TFirst">第一个输入序列中的元素的类型。</typeparam>
      <typeparam name="TSecond">第二个输入序列中的元素的类型。</typeparam>
      <typeparam name="TResult">结果序列的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2 " /> 为 null。</exception>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary>表示包含二元运算符的表达式。</summary>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <summary>获取一个值，该值指示是否可以减小此表达式树节点。</summary>
      <returns>如果可以简化表达式树节点，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary>获取合并运算或复合赋值运算使用的类型转换函数。</summary>
      <returns>一个表示类型转换函数的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary>获取一个值，该值指示表达式目录树节点是否表示对运算符的提升调用。</summary>
      <returns>如果该节点表示提升调用，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary>获取一个值，该值指示表达式目录树节点是否表示对运算符（其返回类型提升为可以为 null 的类型）的提升调用。</summary>
      <returns>如果该运算符的返回类型提升为可以为 null 的类型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary>获取二元运算的左操作数。</summary>
      <returns>表示二元运算的左操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary>获取二元运算的实现方法。</summary>
      <returns>表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <summary>将二进制表达式节点简化为更简单的表达式。</summary>
      <returns>已简化的表达式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary>获取二元运算的右操作数。</summary>
      <returns>表示二元运算的右操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。 如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="left">结果的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性。</param>
      <param name="conversion">结果的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性。</param>
      <param name="right">结果的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.BlockExpression">
      <summary>表示一个包含可在其中定义变量的表达式序列的块。</summary>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
      <summary>获取此块中的表达式。</summary>
      <returns>包含此块中所有表达式的只读集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
      <summary>返回此表达式的节点类型。 扩展节点应在重写此方法时返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Result">
      <summary>获取此块中的最后一个表达式。</summary>
      <returns>表示此块中最后一个表达式的 <see cref="T:System.Linq.Expressions.Expression" /> 对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.BlockExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。 如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="variables">结果的 <see cref="P:System.Linq.Expressions.BlockExpression.Variables" /> 属性。</param>
      <param name="expressions">结果的 <see cref="P:System.Linq.Expressions.BlockExpression.Expressions" /> 属性。</param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Variables">
      <summary>获取在此块中定义的变量。</summary>
      <returns>包含在此块中定义的所有变量的只读集合。</returns>
    </member>
    <member name="T:System.Linq.Expressions.CatchBlock">
      <summary>表示 try 块中的 catch 语句。</summary>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Body">
      <summary>获取 catch 块的主体。</summary>
      <returns>表示 catch 主体的 <see cref="T:System.Linq.Expressions.Expression" /> 对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Filter">
      <summary>获取 <see cref="T:System.Linq.Expressions.CatchBlock" /> 筛选器的主体。</summary>
      <returns>表示 <see cref="T:System.Linq.Expressions.CatchBlock" /> 筛选器的主体的 <see cref="T:System.Linq.Expressions.Expression" /> 对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Test">
      <summary>获取此处理程序捕捉的 <see cref="T:System.Exception" /> 的类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示此处理程序捕捉的 <see cref="T:System.Exception" /> 的类型。</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.ToString">
      <summary>返回表示当前 <see cref="T:System.Object" /> 的 <see cref="T:System.String" />。</summary>
      <returns>
        <see cref="T:System.String" />，表示当前的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。 如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="variable">结果的 <see cref="P:System.Linq.Expressions.CatchBlock.Variable" /> 属性。</param>
      <param name="filter">结果的 <see cref="P:System.Linq.Expressions.CatchBlock.Filter" /> 属性。</param>
      <param name="body">结果的 <see cref="P:System.Linq.Expressions.CatchBlock.Body" /> 属性。</param>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Variable">
      <summary>获取对此处理程序捕捉的 <see cref="T:System.Exception" /> 对象的引用。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象，表示对此处理程序捕捉的 <see cref="T:System.Exception" /> 对象的引用。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary>表示包含条件运算符的表达式。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary>获取当测试的计算结果为 false 时要执行的表达式。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression" />，表示当测试结果为 false 时要执行的表达式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary>获取当测试的计算结果为 true 时要执行的表达式。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression" />，表示当测试为 true 时要执行的表达式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <summary>返回此表达式的节点类型。 扩展节点应在重写此方法时返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary>获取条件运算的测试。</summary>
      <returns>一个表示条件运算的测试的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。 如果所有子级都相同，则将返回此表达式</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="test">结果的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 属性。</param>
      <param name="ifTrue">结果的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 属性。</param>
      <param name="ifFalse">结果的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary>表示具有常量值的表达式。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <summary>返回此 Expression 的节点类型。 扩展节点应在重写此方法时返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.ConstantExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary>获取常量表达式的值。</summary>
      <returns>
        <see cref="T:System.Object" /> 等于所表示的表达式的值。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DebugInfoExpression">
      <summary>发出或清除调试信息的序列点。 这允许调试器在调试时突出显示正确的源代码。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <summary>获取表示源文件的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</summary>
      <returns>表示源文件的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <summary>获取此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的结束列。</summary>
      <returns>用于生成包装表达式的代码的结束列号。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <summary>获取此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的结束行。</summary>
      <returns>用于生成包装表达式的代码的结束行号。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <summary>获取指示 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 是否用于清除序列点的值。</summary>
      <returns>如果 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 用于清除序列点，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <summary>获取此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始列。</summary>
      <returns>用于生成包装表达式的代码的起始列号。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <summary>获取此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始行。</summary>
      <returns>用于生成包装表达式的代码的起始行号。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DefaultExpression">
      <summary>表示类型或空表达式的默认值。</summary>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <summary>返回此表达式的节点类型。 扩展节点应在重写此方法时返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.DefaultExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpression">
      <summary>表示动态操作。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Arguments">
      <summary>获取动态操作的参数。</summary>
      <returns>包含动态操作的参数的只读集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Binder">
      <summary>获取 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />，它确定动态站点的运行时行为。</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />，它确定动态站点的运行时行为。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.DelegateType">
      <summary>获取由 <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示由 <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arguments">动态操作的参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arg0">动态操作的第一个参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
      <param name="arg2">动态操作的第三个参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
      <param name="arg2">动态操作的第三个参数。</param>
      <param name="arg3">动态操作的第四个参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arguments">动态操作的参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arguments">动态操作的参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和一个参数绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arg0">动态操作的参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和两个参数绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和三个参数绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
      <param name="arg2">动态操作的第三个参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和四个参数绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
      <param name="arg2">动态操作的第三个参数。</param>
      <param name="arg3">动态操作的第四个参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arguments">动态操作的参数。</param>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.NodeType">
      <summary>返回此表达式的节点类型。 扩展节点应在重写此方法时返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.DynamicExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>将发送至这个参数的数值，arguments 与 DynamicExpression 的当前实例的 Arguments 属性进行比较。                                         如果参数和属性的值相同，则返回当前实例。 如果它们不是等效的，则返回一个新的 DynamicExpression 实例，该实例的 Arguments 被设置为参数 arguments 的值，实例其它部分与当前实例完全相同。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="arguments">结果的 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpressionVisitor">
      <summary>表示动态表达式树的访问者或重写者。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.#ctor">
      <summary>初始化 <see cref="T:System.Linq.Expressions.DynamicExpressionVisitor" /> 的新实例。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则返回 <see cref="T:System.Linq.Expressions.Expression" />；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary>表示 <see cref="T:System.Collections.IEnumerable" /> 集合的单个元素的初始值设定项。</summary>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary>获取用于将某个元素添加到 <see cref="T:System.Collections.IEnumerable" /> 集合的实例方法。</summary>
      <returns>表示用于将某个元素添加到集合的实例方法的 <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary>获取传递给某一方法的参数集合，该方法会将元素添加到 <see cref="T:System.Collections.IEnumerable" /> 集合中。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，这些对象表示用于将元素添加到集合中的方法的参数。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary>返回 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象的文本表示形式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ElementInit" /> 对象的文本表示形式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。 如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="arguments">结果的 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary>提供一种基类，表示表达式目录树节点的类派生自该基类。 它还包含用来创建各种节点类型的 static（在 Visual Basic 中为 Shared）工厂方法。 这是一个 abstract 类。</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor">
      <summary>构造 <see cref="T:System.Linq.Expressions.Expression" /> 的新实例。</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
      <summary>初始化 <see cref="T:System.Linq.Expressions.Expression" /> 类的新实例。</summary>
      <param name="nodeType">要设置为节点类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="type">此 <see cref="T:System.Linq.Expressions.Expression" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不进行溢出检查的算术加法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Add" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义加法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示不进行溢出检查的算术加法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。 可指定实现方法。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Add" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义加法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示不进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示不进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示进行溢出检查的算术加法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义加法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示进行溢出检查的算术加法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。 可指定实现方法。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义加法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位 AND 运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.And" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义按位 AND 运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位 AND 运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。 可指定实现方法。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.And" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义按位 AND 运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示仅在第一个操作数的计算结果为 true 时才计算第二个操作数的条件 AND 运算。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义按位 AND 运算符。 - 或 - <paramref name="left" />.Type 和 <paramref name="right" />.Type 不是同一布尔值类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示仅在第一个操作数解析为 true 时才计算第二个操作数的条件 AND 运算。 可指定实现方法。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义按位 AND 运算符。 - 或 - <paramref name="method" /> 为 null 并且 <paramref name="left" />.Type 和 <paramref name="right" />.Type 不是同一布尔值类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位 AND 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位 AND 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示按位 AND 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个用于访问多维数组的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="array">一个表示多维数组的表达式。</param>
      <param name="indexes">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用于为数组编制索引的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>创建一个用于访问数组的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="array">一个表示要编制索引的数组的表达式。</param>
      <param name="indexes">一个数组，其中包含用于为数组编制索引的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个表示对秩大于 1 的数组应用数组索引运算符的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性设置为指定值。</returns>
      <param name="array">要将 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="indexes">其中包含用来填充 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 或 <paramref name="indexes" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type 不表示数组类型。 - 或 - <paramref name="array" />.Type 的秩与 <paramref name="indexes" /> 中的元素数量不匹配。 - 或 - <see cref="P:System.Linq.Expressions.Expression.Type" /> 的一个或多个元素的 <paramref name="indexes" /> 属性不表示 <see cref="T:System.Int32" /> 类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示对秩为 1 的数组应用数组索引运算符的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="array">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="index">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 或 <paramref name="index" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type 不表示数组类型。 - 或 - <paramref name="array" />.Type 表示秩不为 1 的数组类型。 - 或 - <paramref name="index" />.Type 不表示 <see cref="T:System.Int32" /> 类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>创建一个表示对多维数组应用数组索引运算符的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性设置为指定值。</returns>
      <param name="array">
        <see cref="T:System.Linq.Expressions.Expression" /> 实例（即数组索引操作的索引）的数组。</param>
      <param name="indexes">用于填充 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 或 <paramref name="indexes" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type 不表示数组类型。 - 或 - <paramref name="array" />.Type 的秩与 <paramref name="indexes" /> 中的元素数量不匹配。 - 或 - <see cref="P:System.Linq.Expressions.Expression.Type" /> 的一个或多个元素的 <paramref name="indexes" /> 属性不表示 <see cref="T:System.Int32" /> 类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示用于获取一维数组的长度的表达式。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> 且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性等于 <paramref name="array" /> 的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="array">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type 不表示数组类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Assign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary>创建一个表示初始化字段或属性的 <see cref="T:System.Linq.Expressions.MemberAssignment" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberAssignment" />，其<see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 等于 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />，并且其 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 属性设置为指定值。</returns>
      <param name="member">要将 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MemberInfo" />。</param>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 或 <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。 - 或 - <paramref name="member" /> 所表示的属性没有 set 访问器。 - 或 - <paramref name="expression" />.Type 不能赋给 <paramref name="member" /> 所表示的字段或属性的类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>使用属性访问器方法创建一个表示成员初始化的 <see cref="T:System.Linq.Expressions.MemberAssignment" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberAssignment" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />，<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为表示在 <paramref name="propertyAccessor" /> 中访问的属性的 <see cref="T:System.Reflection.PropertyInfo" />，并且 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 属性设置为 <paramref name="expression" />。</returns>
      <param name="propertyAccessor">一个表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 或 <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不表示属性访问器方法。 - 或 - <paramref name="propertyAccessor" /> 所访问的属性没有 set 访问器。 - 或 - <paramref name="expression" />.Type 不能赋给 <paramref name="member" /> 所表示的字段或属性的类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定表达式，但不包含任何变量。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="expressions">块中的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定的变量和表达式。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="variables">块中的变量。</param>
      <param name="expressions">块中的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定的变量和表达式。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="variables">块中的变量。</param>
      <param name="expressions">块中的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含两个表达式，但不包含任何变量。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="arg0">块中的第一个表达式。</param>
      <param name="arg1">块中的第二个表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含三个表达式，但不包含任何变量。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="arg0">块中的第一个表达式。</param>
      <param name="arg1">块中的第二个表达式。</param>
      <param name="arg2">块中的第三个表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含四个表达式，但不包含任何变量。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="arg0">块中的第一个表达式。</param>
      <param name="arg1">块中的第二个表达式。</param>
      <param name="arg2">块中的第三个表达式。</param>
      <param name="arg3">块中的第四个表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含五个表达式，但不包含任何变量。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="arg0">块中的第一个表达式。</param>
      <param name="arg1">块中的第二个表达式。</param>
      <param name="arg2">块中的第三个表达式。</param>
      <param name="arg3">块中的第四个表达式。</param>
      <param name="arg4">块中的第五个表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定表达式，但不包含任何变量。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="expressions">块中的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定表达式和特定结果类型，但不包含任何变量。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="type">块的结果类型。</param>
      <param name="expressions">块中的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定的变量和表达式。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="type">块的结果类型。</param>
      <param name="variables">块中的变量。</param>
      <param name="expressions">块中的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定的变量和表达式。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="type">块的结果类型。</param>
      <param name="variables">块中的变量。</param>
      <param name="expressions">块中的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定表达式和特定结果类型，但不包含任何变量。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="type">块的结果类型。</param>
      <param name="expressions">块中的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <summary>创建一个表示 break 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Break，并且其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有一个在跳转时将传递给目标标签的 null 值。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 break 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。 可以指定在跳转时传递给标签的值。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Break，并且其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">将在跳转时传递给关联标签的值。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个表示具有指定类型的 break 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。 可以指定在跳转时传递给标签的值。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Break，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">将在跳转时传递给关联标签的值。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>创建一个表示具有指定类型的 break 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Break，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示调用不带参数的方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
      <param name="instance">一个 <see cref="T:System.Linq.Expressions.Expression" />，它指定一个实例方法调用对于 static 方法（在 Visual Basic 中为 Shared 方法）应传递 null。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。 - 或 - <paramref name="instance" /> 为 null，并且 <paramref name="method" /> 表示实例方法。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type 不能赋给 <paramref name="method" /> 所表示的方法的声明类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个表示调用带参数的方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性设置为指定值。</returns>
      <param name="instance">要将 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />，它为 static（在 Visual Basic 中为 Shared）方法传递 null。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arguments">其中包含用来填充 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。 - 或 - <paramref name="instance" /> 为 null，并且 <paramref name="method" /> 表示实例方法。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type 不能赋给 <paramref name="method" /> 所表示的方法的声明类型。 - 或 - <paramref name="arguments" /> 中的元素数量与 <paramref name="method" /> 所表示的方法的参数数量不相等。 - 或 - <paramref name="arguments" /> 的一个或多个元素不能赋给 <paramref name="method" /> 所表示的方法的相应参数。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建表示对采用两个参数的方法的调用的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
      <param name="instance">指定一个实例调用的实例的 <see cref="T:System.Linq.Expressions.Expression" />。对于 static 方法（在 Visual Basic 中为 Shared 方法）应传递 null。</param>
      <param name="method">表示目标方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示调用带三个参数的方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
      <param name="instance">指定一个实例调用的实例的 <see cref="T:System.Linq.Expressions.Expression" />。对于 static 方法（在 Visual Basic 中为 Shared 方法）应传递 null。</param>
      <param name="method">表示目标方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">用于表示第三个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>创建一个表示调用带参数的方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性设置为指定值。</returns>
      <param name="instance">一个 <see cref="T:System.Linq.Expressions.Expression" />，它指定一个实例方法调用的实例。对于 static 方法（在 Visual Basic 中为 Shared 方法）应传递 null。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arguments">用于填充 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。 - 或 - <paramref name="instance" /> 为 null，并且 <paramref name="method" /> 表示实例方法。 - 或 - <paramref name="arguments" /> 不为 null，且其一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type 不能赋给 <paramref name="method" /> 所表示的方法的声明类型。 - 或 - <paramref name="arguments" /> 中的元素数量与 <paramref name="method" /> 所表示的方法的参数数量不相等。 - 或 - <paramref name="arguments" /> 的一个或多个元素不能赋给 <paramref name="method" /> 所表示的方法的相应参数。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>通过调用适当的工厂方法创建表示对方法的调用的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，<see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 属性等于 <paramref name="instance" />，<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 设置为表示指定实例方法的 <see cref="T:System.Reflection.MethodInfo" />，并且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 设置为指定参数。</returns>
      <param name="instance">一个 <see cref="T:System.Linq.Expressions.Expression" />，将搜索其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性值以查找特定方法。</param>
      <param name="methodName">方法的名称。</param>
      <param name="typeArguments">指定泛型方法的类型参数的 <see cref="T:System.Type" /> 对象的数组。 当 methodName 指定非泛型方法时，此参数应为 null。</param>
      <param name="arguments">表示方法的参数的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 或 <paramref name="methodName" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">在 <paramref name="instance" />.Type 或其基类型中找不到这样的方法：名称为 <paramref name="methodName" />、类型参数与 <paramref name="typeArguments" /> 相匹配，且参数类型与 <paramref name="arguments" /> 相匹配。 - 或 - 在 <paramref name="instance" />.Type 或其基类型中找到多个这样的方法：名称为 <paramref name="methodName" />，类型参数与 <paramref name="typeArguments" /> 相匹配，参数类型与 <paramref name="arguments" /> 相匹配。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对 static 方法（在 Visual Basic 中为 Shared 方法）的调用。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
      <param name="method">表示目标方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arguments">表示调用参数的 <see cref="T:System.Linq.Expressions.Expression" /> 的集合。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对使用一个参数的 static 方法（在 Visual Basic 中为 Shared 方法）的调用。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对使用两个参数的静态方法的调用。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对使用三个参数的静态方法的调用。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">用于表示第三个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对使用四个参数的静态方法的调用。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">用于表示第三个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg3">用于表示第四个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对使用五个参数的静态方法的调用。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">用于表示第三个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg3">用于表示第四个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg4">用于表示第五个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对带参数的 static 方法（在 Visual Basic 中为 Shared 方法）的调用。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 并且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</returns>
      <param name="method">一个 <see cref="T:System.Reflection.MethodInfo" />，表示要将 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 设置为与其相等的 static（在 Visual Basic 中为 Shared）方法。</param>
      <param name="arguments">用于填充 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 中的元素数量与 <paramref name="method" /> 所表示的方法的参数数量不相等。 - 或 - <paramref name="arguments" /> 的一个或多个元素不能赋给 <paramref name="method" /> 所表示的方法的相应参数。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>通过调用适当的工厂方法创建一个表示调用 static（在 Visual Basic 中为 Shared）方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为表示指定 static（在 Visual Basic 中为 Shared）方法的 <see cref="T:System.Reflection.MethodInfo" />，并且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性设置为指定参数。</returns>
      <param name="type">用于指定类型的 <see cref="T:System.Type" />，该类型中包含指定的 static（在 Visual Basic 中为 Shared）方法。</param>
      <param name="methodName">方法的名称。</param>
      <param name="typeArguments">指定泛型方法的类型参数的 <see cref="T:System.Type" /> 对象的数组。 当 methodName 指定非泛型方法时，此参数应为 null。</param>
      <param name="arguments">表示方法的参数的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="methodName" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">在 <paramref name="type" /> 或其基类型中找不到这样的方法：名称为 <paramref name="methodName" />、类型参数与 <paramref name="typeArguments" /> 相匹配，且参数类型与 <paramref name="arguments" /> 相匹配。 - 或 - 在 <paramref name="type" /> 或其基类型中找到多个这样的方法：名称为 <paramref name="methodName" />，类型参数与 <paramref name="typeArguments" /> 相匹配，参数类型与 <paramref name="arguments" /> 相匹配。</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.CanReduce">
      <summary>指示可将节点简化为更简单的节点。 如果返回 true，则可以调用 Reduce() 以生成简化形式。</summary>
      <returns>如果可以简化节点，则为 True；否则为 false。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />，其中具有对已捕获的 <see cref="T:System.Exception" /> 对象的引用以便在处理程序主体中使用。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="variable">一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />，它表示对此处理程序捕获的 <see cref="T:System.Exception" /> 对象的引用。</param>
      <param name="body">catch 语句的主体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />，其中具有 <see cref="T:System.Exception" /> 筛选器和对已捕获的 <see cref="T:System.Exception" /> 对象的引用。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="variable">一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />，它表示对此处理程序捕获的 <see cref="T:System.Exception" /> 对象的引用。</param>
      <param name="body">catch 语句的主体。</param>
      <param name="filter">
        <see cref="T:System.Exception" /> 筛选器的主体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="type">此 <see cref="T:System.Linq.Expressions.CatchBlock" /> 将处理的 <see cref="T:System.Exception" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="body">catch 语句的主体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />，其中具有 <see cref="T:System.Exception" /> 筛选器，但没有对已捕获的 <see cref="T:System.Exception" /> 对象的引用。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="type">此 <see cref="T:System.Linq.Expressions.CatchBlock" /> 将处理的 <see cref="T:System.Exception" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="body">catch 语句的主体。</param>
      <param name="filter">
        <see cref="T:System.Exception" /> 筛选器的主体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <summary>创建一个用于清除序列点的 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。</summary>
      <returns>用于清除序列点的 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的实例。</returns>
      <param name="document">表示源文件的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示合并运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不表示引用类型或可以为 null 的值类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type 和 <paramref name="right" />.Type 不可相互转换。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary>在给定转换函数的情况下，创建一个表示合并运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type 和 <paramref name="right" />.Type 不可相互转换。 - 或 - <paramref name="conversion" /> 不为 null，并且 <paramref name="conversion" />.Type 为不是正好带一个参数的委托类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不表示引用类型或可以为 null 的值类型。 - 或 - <paramref name="left" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性表示一个类型，该类型不能赋给委托类型 <paramref name="conversion" />.Type 的参数类型。 - 或 - <paramref name="right" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不等于委托类型 <paramref name="conversion" />.Type 的返回类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示条件语句的 <see cref="T:System.Linq.Expressions.ConditionalExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，并且其 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性设置为指定值。</returns>
      <param name="test">要将 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifTrue">要将 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifFalse">要将 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="test" /> 或 <paramref name="ifTrue" /> 或 <paramref name="ifFalse" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="test" />.Type 不为 <see cref="T:System.Boolean" />。 - 或 - <paramref name="ifTrue" />.Type 不等于 <paramref name="ifFalse" />.Type。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个表示条件语句的 <see cref="T:System.Linq.Expressions.ConditionalExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，并且其 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性设置为指定值。</returns>
      <param name="test">要将 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifTrue">要将 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifFalse">要将 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary>创建一个 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.ConstantExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> 并且 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.ConstantExpression" />。</returns>
      <param name="value">要将 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 属性设置为与其相等的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary>创建一个 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.ConstantExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ConstantExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />，并且其 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定值。</returns>
      <param name="value">要将 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 属性设置为与其相等的 <see cref="T:System.Object" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不为 null 并且 <paramref name="type" /> 不可从 <paramref name="value" /> 的动态类型赋值。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <summary>创建一个表示 continue 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Continue，并且其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有一个在跳转时将传递给目标标签的 null 值。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>创建一个表示具有指定类型的 continue 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Continue，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 null 值。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个表示类型转换运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> 并且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">未定义 <paramref name="expression" />.Type 和 <paramref name="type" /> 之间的转换运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示实现方法已指定的转换运算。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> 并且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带一个参数。</exception>
      <exception cref="T:System.InvalidOperationException">未定义 <paramref name="expression" />.Type 和 <paramref name="type" /> 之间的转换运算符。 - 或 - <paramref name="expression" />.Type 不能赋给 <paramref name="method" /> 所表示的方法的参数类型。 - 或 - <paramref name="method" /> 所表示的方法的返回类型不能赋给 <paramref name="type" />。 - 或 - <paramref name="expression" />.Type 或 <paramref name="type" /> 为可以为 null 的值类型，并且相应的不可以为 null 的值类型不分别等于 <paramref name="method" /> 所表示的方法的参数类型或返回类型。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个与 <paramref name="method" /> 说明相匹配的方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示在目标类型发生溢出时引发异常的转换运算。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> 并且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">未定义 <paramref name="expression" />.Type 和 <paramref name="type" /> 之间的转换运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示在目标类型发生溢出时引发异常并为其指定了实现方法的转换运算。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> 并且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带一个参数。</exception>
      <exception cref="T:System.InvalidOperationException">未定义 <paramref name="expression" />.Type 和 <paramref name="type" /> 之间的转换运算符。 - 或 - <paramref name="expression" />.Type 不能赋给 <paramref name="method" /> 所表示的方法的参数类型。 - 或 - <paramref name="method" /> 所表示的方法的返回类型不能赋给 <paramref name="type" />。 - 或 - <paramref name="expression" />.Type 或 <paramref name="type" /> 为可以为 null 的值类型，并且相应的不可以为 null 的值类型不分别等于 <paramref name="method" /> 所表示的方法的参数类型或返回类型。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个与 <paramref name="method" /> 说明相匹配的方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>创建一个具有指定跨度的 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的一个实例。</returns>
      <param name="document">表示源文件的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</param>
      <param name="startLine">此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始行。 必须大于 0。</param>
      <param name="startColumn">此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始列。 必须大于 0。</param>
      <param name="endLine">此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的结束行。 必须大于或等于起始行。</param>
      <param name="endColumn">此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的结束列。 如果结束行与起始行相同，则结束列必须大于或等于起始列。 任何情况下都必须大于 0。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示按 1 递减表达式值。</summary>
      <returns>一个表示已递减的表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要递减的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示按 1 递减表达式值。</summary>
      <returns>一个表示已递减的表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要递减的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <summary>创建一个 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定类型的 <see cref="T:System.Linq.Expressions.DefaultExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DefaultExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Default" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定类型。</returns>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示算术除法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义除法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示算术除法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。 可指定实现方法。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义除法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不进行溢出检查的除法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示不进行溢出检查的除法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示不进行溢出检查的除法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arguments">动态操作的参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arg0">动态操作的第一个参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
      <param name="arg2">动态操作的第三个参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
      <param name="arg2">动态操作的第三个参数。</param>
      <param name="arg3">动态操作的第四个参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arguments">动态操作的参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>在给定 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 作为第二个参数的情况下，创建一个 <see cref="T:System.Linq.Expressions.ElementInit" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 和 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.ElementInit" />。</returns>
      <param name="addMethod">要将 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arguments">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含要将 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> 或 <paramref name="arguments" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="addMethod" /> 表示的方法未命名为"Add"（不区分大小写）。 - 或 - <paramref name="addMethod" /> 表示的方法不是实例方法。 - 或 - <paramref name="arguments" /> 包含的元素数量与 <paramref name="addMethod" /> 所表示的方法的参数数量不同。 - 或 - <see cref="P:System.Linq.Expressions.Expression.Type" /> 的一个或多个元素的 <paramref name="arguments" /> 属性不能赋给 <paramref name="addMethod" /> 所表示的方法的相应参数的类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>在给定值数组作为第二个参数的情况下，创建一个 <see cref="T:System.Linq.Expressions.ElementInit" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 和 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.ElementInit" />。</returns>
      <param name="addMethod">要将 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arguments">要将 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> 或 <paramref name="arguments" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">addMethod 表示的方法未命名为"Add"（不区分大小写）。 - 或 - addMethod 表示的方法不是实例方法。 - 或 - arguments 包含的元素数量与 addMethod 所表示的方法的参数数量不同。 - 或 - <see cref="P:System.Linq.Expressions.Expression.Type" /> 的一个或多个元素的 <paramref name="arguments" /> 属性不能赋给 <paramref name="addMethod" /> 所表示的方法的相应参数的类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Empty">
      <summary>创建具有 <see cref="T:System.Void" /> 类型的空表达式。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DefaultExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Default" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <see cref="T:System.Void" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义相等运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>创建一个表示相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。 可指定实现方法。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />，并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">如果为 true，则设置 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 为 true；如果为 false，则设置 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 为 false。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义相等运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>通过对用户定义的类型使用 op_ExclusiveOr，创建一个表示按位 XOR 运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义 XOR 运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>通过对用户定义的类型使用 op_ExclusiveOr，创建一个表示按位 XOR 运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。 可指定实现方法。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义 XOR 运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>通过对用户定义的类型使用 op_ExclusiveOr，创建一个表示按位 XOR 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>通过对用户定义的类型使用 op_ExclusiveOr，创建一个表示按位 XOR 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>通过对用户定义的类型使用 op_ExclusiveOr，创建一个表示按位 XOR 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />，并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary>创建一个表示访问字段的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，并且其 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 和 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为指定值。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。 对于 static（在 Visual Basic 中为 Shared），<paramref name="expression" /> 必须为 null。</param>
      <param name="field">要将 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为与其相等的 <see cref="T:System.Reflection.FieldInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="field" /> 为 null。 - 或 - <paramref name="field" /> 表示的字段不为 static（在 Visual Basic 中不为 Shared），且 <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 不能赋给 <paramref name="field" /> 所表示的字段的声明类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary>在给定字段名称的情况下，创建一个表示访问此字段的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 属性设置为 <paramref name="expression" />，并且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为表示 <paramref name="fieldName" /> 所表示的字段的 <see cref="T:System.Reflection.FieldInfo" />。</returns>
      <param name="expression">一个 <see cref="T:System.Linq.Expressions.Expression" />，其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 中包含一个名为 <paramref name="fieldName" /> 的字段。 对于静态字段，这可以为 null。</param>
      <param name="fieldName">要访问的字段的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="fieldName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有在 <paramref name="expression" />.Type 或其基类型中定义名为 <paramref name="fieldName" /> 的字段。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>创建一个表示访问字段的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
      <param name="expression">字段的包含对象。 对于静态字段，这可以为 null。</param>
      <param name="type">包含字段的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="fieldName">要访问的字段。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary>创建一个 <see cref="T:System.Type" /> 对象，它表示具有特定类型参数的泛型 System.Action 委托类型。</summary>
      <returns>具有指定类型参数的 System.Action 委托的类型。</returns>
      <param name="typeArgs">包含一到十七个 <see cref="T:System.Type" /> 对象的数组，这些对象指定 System.Action 委托类型的类型参数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> 包含 16 个以上的元素。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <summary>获取一个 <see cref="P:System.Linq.Expressions.Expression.Type" /> 对象，它表示具有特定类型参数的泛型 System.Func 或 System.Action 委托类型。</summary>
      <returns>委托类型。</returns>
      <param name="typeArgs">委托的类型参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary>创建一个 <see cref="P:System.Linq.Expressions.Expression.Type" /> 对象，它表示具有特定类型参数的泛型 System.Func 委托类型。 最后一个类型参数指定已创建委托的返回类型。</summary>
      <returns>具有指定类型参数的 System.Func 委托的类型。</returns>
      <param name="typeArgs">包含一到十七个 <see cref="T:System.Type" /> 对象的数组，这些对象指定 System.Func 委托类型的类型参数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> 包含少于一个或多于十七个的元素。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <summary>创建一个表示“go to”语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Goto，并且其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为指定值，此外还有一个在跳转时将传递给目标标签的 null 值。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>创建一个表示“go to”语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。 可以指定在跳转时传递给标签的值。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Goto，并且其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">将在跳转时传递给关联标签的值。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个表示具有指定类型的“go to”语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。 可以指定在跳转时传递给标签的值。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Goto，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">将在跳转时传递给关联标签的值。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>创建一个表示具有指定类型的“go to”语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Goto，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为指定值，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 null 值。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示“大于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义"大于"运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>创建一个表示“大于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。 可指定实现方法。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />，并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">如果为 true，则设置 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 为 true；如果为 false，则设置 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 为 false。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义"大于"运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示“大于或等于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义"大于或等于"运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>创建一个表示“大于或等于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />，并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">如果为 true，则设置 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 为 true；如果为 false，则设置 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 为 false。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义"大于或等于"运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，它表示带 if 语句的条件块。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，并且其 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 属性设置为指定值。 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性设置为默认表达式，并且此方法返回的结果 <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 的类型为 <see cref="T:System.Void" />。</returns>
      <param name="test">要将 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifTrue">要将 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，它表示带 if 和 else 语句的条件块。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，并且其 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性设置为指定值。 此方法返回的结果 <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 的类型为 <see cref="T:System.Void" />。</returns>
      <param name="test">要将 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifTrue">要将 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifFalse">要将 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示按 1 递增表达式值。</summary>
      <returns>一个表示已递增的表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要递增的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示按 1 递增表达式值。</summary>
      <returns>一个表示已递增的表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要递增的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.InvocationExpression" />，它将委托或 lambda 表达式应用于一个参数表达式列表。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.InvocationExpression" />，它对提供的参数应用指定的委托或 lambda 表达式。</returns>
      <param name="expression">一个 <see cref="T:System.Linq.Expressions.Expression" />，它表示要应用的委托或 lambda 表达式。</param>
      <param name="arguments">一个包含 <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，这些对象表示要对其应用委托或 lambda 表达式的参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 不表示委托类型或 <see cref="T:System.Linq.Expressions.Expression`1" />。 - 或 - <paramref name="arguments" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不能赋给 <paramref name="expression" /> 所表示的委托的相应参数的类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> 没有包含与 <paramref name="expression" /> 所表示的委托的参数列表相同数量的元素。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.InvocationExpression" />，它将委托或 lambda 表达式应用于一个参数表达式列表。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.InvocationExpression" />，它对提供的参数应用指定的委托或 lambda 表达式。</returns>
      <param name="expression">一个 <see cref="T:System.Linq.Expressions.Expression" />，它表示要应用的委托或 lambda 表达式。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组，这些对象表示要对其应用委托或 lambda 表达式的参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 不表示委托类型或 <see cref="T:System.Linq.Expressions.Expression`1" />。 - 或 - <paramref name="arguments" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不能赋给 <paramref name="expression" /> 所表示的委托的相应参数的类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> 没有包含与 <paramref name="expression" /> 所表示的委托的参数列表相同数量的元素。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <summary>返回表达式的计算结果是否为 false。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的一个实例。</returns>
      <param name="expression">要计算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>返回表达式的计算结果是否为 false。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的一个实例。</returns>
      <param name="expression">要计算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <summary>返回表达式的计算结果是否为 true。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的一个实例。</returns>
      <param name="expression">要计算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>返回表达式的计算结果是否为 true。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的一个实例。</returns>
      <param name="expression">要计算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.LabelTarget" />，它表示具有 void 类型但没有名称的标签。</summary>
      <returns>新的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.LabelExpression" />，它表示不带默认值的标签。</summary>
      <returns>不带默认值的 <see cref="T:System.Linq.Expressions.LabelExpression" />。</returns>
      <param name="target">此 <see cref="T:System.Linq.Expressions.LabelExpression" /> 将关联的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.LabelExpression" />，它表示具有给定默认值的标签。</summary>
      <returns>具有给定默认值的 <see cref="T:System.Linq.Expressions.LabelExpression" />。</returns>
      <param name="target">此 <see cref="T:System.Linq.Expressions.LabelExpression" /> 将关联的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="defaultValue">当通过常规控制流到达标签时，此 <see cref="T:System.Linq.Expressions.LabelExpression" /> 的值。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.LabelTarget" />，它表示具有 void 类型和给定名称的标签。</summary>
      <returns>新的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
      <param name="name">标签的名称。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.LabelTarget" />，它表示具有给定类型的标签。</summary>
      <returns>新的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
      <param name="type">跳转到标签时传递的值的类型。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.LabelTarget" />，它表示具有给定类型和名称的标签。</summary>
      <returns>新的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
      <param name="type">跳转到标签时传递的值的类型。</param>
      <param name="name">标签的名称。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 并且 <see cref="P:System.Linq.Expressions. LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions. LambdaExpression.Parameters" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.Expression`1" />。</returns>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions. LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TDelegate">委托类型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 并且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.Expression`1" />。</returns>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">其中包含用于填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的数组。</param>
      <typeparam name="TDelegate">委托类型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">其中包含用于填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的数组。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。</returns>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TDelegate">一种委托类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 为 null。 - 或 - <paramref name="parameters" /> 中的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> 不是委托类型。 - 或 - <paramref name="body" />.Type 表示一种不能赋给 <paramref name="TDelegate" /> 的返回类型的类型。 - 或 - <paramref name="parameters" /> 没有包含与 <paramref name="TDelegate" /> 的参数列表相同数量的元素。 - 或 - <paramref name="parameters" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不可从 <paramref name="TDelegate" /> 的相应参数类型的类型赋值。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>通过先构造一个委托类型来创建一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。</returns>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="parameters">用于填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 为 null。 - 或 - <paramref name="parameters" /> 的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 包含 16 个以上的元素。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。</returns>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="parameters">用于填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的数组。</param>
      <typeparam name="TDelegate">一种委托类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 为 null。 - 或 - <paramref name="parameters" /> 中的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> 不是委托类型。 - 或 - <paramref name="body" />.Type 表示一种不能赋给 <paramref name="TDelegate" /> 的返回类型的类型。 - 或 - <paramref name="parameters" /> 没有包含与 <paramref name="TDelegate" /> 的参数列表相同数量的元素。 - 或 - <paramref name="parameters" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不可从 <paramref name="TDelegate" /> 的相应参数类型的类型赋值。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 并且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.Expression`1" />。</returns>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="name">lambda 的名称。 用于生成调试信息。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TDelegate">委托类型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="name">lambda 的名称。 用于发出调试信息。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="name">lambda 的名称。 用于发出调试信息。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 并且 <see cref="P:System.Linq.Expressions.Expression`1.Body" /> 和 <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.Expression`1" />。</returns>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.Expression`1.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="name">lambda 的名称。 用于生成调试信息。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TDelegate">委托类型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="delegateType">一个 <see cref="P:System.Linq.Expressions.Expression.Type" />，它表示 lambda 的委托签名。</param>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="delegateType">一个 <see cref="P:System.Linq.Expressions.Expression.Type" />，它表示 lambda 的委托签名。</param>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">其中包含用于填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的数组。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />。 如果委托类型在编译时未知，则可以使用它。</summary>
      <returns>一个表示 lambda 表达式的对象，该表达式的 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。</returns>
      <param name="delegateType">一个 <see cref="T:System.Type" />，它表示 lambda 的委托签名。</param>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> 或 <paramref name="body" /> 为 null。 - 或 - <paramref name="parameters" /> 中的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> 不表示委托类型。 - 或 - <paramref name="body" />.Type 表示一个类型，该类型不能赋给 <paramref name="delegateType" /> 所表示的委托类型的返回类型。 - 或 - <paramref name="parameters" /> 没有包含与 <paramref name="delegateType" /> 所表示的委托类型的参数列表相同数量的元素。 - 或 - <paramref name="parameters" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不可从 <paramref name="delegateType" /> 所表示的委托类型的相应参数类型的类型赋值。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>通过先构造一个委托类型来创建一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />。 如果委托类型在编译时未知，则可以使用它。</summary>
      <returns>一个表示 lambda 表达式的对象，该表达式的 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。</returns>
      <param name="delegateType">一个 <see cref="T:System.Type" />，它表示 lambda 的委托签名。</param>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="parameters">用于填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> 或 <paramref name="body" /> 为 null。 - 或 - <paramref name="parameters" /> 中的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> 不表示委托类型。 - 或 - <paramref name="body" />.Type 表示一个类型，该类型不能赋给 <paramref name="delegateType" /> 所表示的委托类型的返回类型。 - 或 - <paramref name="parameters" /> 没有包含与 <paramref name="delegateType" /> 所表示的委托类型的参数列表相同数量的元素。 - 或 - <paramref name="parameters" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不可从 <paramref name="delegateType" /> 所表示的委托类型的相应参数类型的类型赋值。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="delegateType">一个 <see cref="P:System.Linq.Expressions.Expression.Type" />，它表示 lambda 的委托签名。</param>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="name">lambda 的名称。 用于发出调试信息。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="delegateType">一个 <see cref="P:System.Linq.Expressions.Expression.Type" />，它表示 lambda 的委托签名。</param>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="name">lambda 的名称。 用于发出调试信息。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位左移运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义左移位运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位左移运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义左移位运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位左移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位左移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示按位左移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示“小于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义"小于"运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>创建一个表示“小于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />，并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">如果为 true，则设置 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 为 true；如果为 false，则设置 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 为 false。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义"小于"运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示“小于或等于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义"小于或等于"运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>创建一个表示“小于或等于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />，并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">如果为 true，则设置 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 为 true；如果为 false，则设置 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 为 false。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义"小于或等于"运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>创建一个其成员为字段或属性的 <see cref="T:System.Linq.Expressions.MemberListBinding" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，并且其 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 属性设置为指定值。</returns>
      <param name="member">一个 <see cref="T:System.Reflection.MemberInfo" />，表示要将 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为与其相等的字段或属性。</param>
      <param name="initializers">包含用来填充 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 集合的 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 为 null。 - 或 - <paramref name="initializers" /> 的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。 - 或 - <paramref name="member" /> 所表示的字段或属性的 <see cref="P:System.Reflection.FieldInfo.FieldType" /> 或 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 没有实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary>创建一个其成员为字段或属性的 <see cref="T:System.Linq.Expressions.MemberListBinding" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，并且其 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 属性设置为指定值。</returns>
      <param name="member">一个 <see cref="T:System.Reflection.MemberInfo" />，表示要将 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为与其相等的字段或属性。</param>
      <param name="initializers">用于填充 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 集合的 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 为 null。 - 或 - <paramref name="initializers" /> 的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。 - 或 - <paramref name="member" /> 所表示的字段或属性的 <see cref="P:System.Reflection.FieldInfo.FieldType" /> 或 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 没有实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>基于指定的属性访问器方法创建一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为表示在 <paramref name="propertyAccessor" /> 中访问的属性的 <see cref="T:System.Reflection.MemberInfo" />，并且 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 填充了 <paramref name="initializers" /> 的元素。</returns>
      <param name="propertyAccessor">一个表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="initializers">包含用来填充 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 集合的 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 为 null。 - 或 - <paramref name="initializers" /> 的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不表示属性访问器方法。 - 或 - <paramref name="propertyAccessor" /> 所表示的方法所访问的属性的 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 没有实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary>基于指定的属性访问器方法创建一个 <see cref="T:System.Linq.Expressions.MemberListBinding" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为表示在 <paramref name="propertyAccessor" /> 中访问的属性的 <see cref="T:System.Reflection.MemberInfo" />，并且 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 填充了 <paramref name="initializers" /> 的元素。</returns>
      <param name="propertyAccessor">一个表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="initializers">用于填充 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 集合的 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 为 null。 - 或 - <paramref name="initializers" /> 的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不表示属性访问器方法。 - 或 - <paramref name="propertyAccessor" /> 所表示的方法所访问的属性的 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 没有实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>创建一个使用指定 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象来初始化集合的 <see cref="T:System.Linq.Expressions.ListInitExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 属性设置为指定值。</returns>
      <param name="newExpression">要将 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="initializers">包含用来填充 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 集合的 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 为 null。 - 或 - <paramref name="initializers" /> 的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 没有实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个使用名为“Add”的方法将元素添加到集合中的 <see cref="T:System.Linq.Expressions.ListInitExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为指定值。</returns>
      <param name="newExpression">要将 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="initializers">其中包含用来填充 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 为 null。 - 或 - <paramref name="initializers" /> 的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 没有实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
      <exception cref="T:System.InvalidOperationException">没有在 <paramref name="newExpression" />.Type 或其基类型中声明任何名为"Add"（不区分大小写）的实例方法。 - 或 - <paramref name="newExpression" />.Type 或其基类型上的 add 方法不是正好带一个参数。 - 或 - <paramref name="initializers" /> 的第一个元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性所表示的类型不能赋给 <paramref name="newExpression" />.Type 或其基类型上的 add 方法的参数类型。 - 或 - <paramref name="newExpression" />.Type 和/或其基类型上存在多个名为"Add"（不区分大小写）的参数兼容的方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary>创建一个使用指定 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象来初始化集合的 <see cref="T:System.Linq.Expressions.ListInitExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 属性设置为指定值。</returns>
      <param name="newExpression">要将 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="initializers">用于填充 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 集合的 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 为 null。 - 或 - <paramref name="initializers" /> 的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 没有实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary>创建一个使用名为“Add”的方法将元素添加到集合中的 <see cref="T:System.Linq.Expressions.ListInitExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为指定值。</returns>
      <param name="newExpression">要将 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="initializers">用于填充 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 为 null。 - 或 - <paramref name="initializers" /> 的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 没有实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
      <exception cref="T:System.InvalidOperationException">没有在 <paramref name="newExpression" />.Type 或其基类型中声明任何名为"Add"（不区分大小写）的实例方法。 - 或 - <paramref name="newExpression" />.Type 或其基类型上的 add 方法不是正好带一个参数。 - 或 - <paramref name="initializers" /> 的第一个元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性所表示的类型不能赋给 <paramref name="newExpression" />.Type 或其基类型上的 add 方法的参数类型。 - 或 - <paramref name="newExpression" />.Type 和/或其基类型上存在多个名为"Add"（不区分大小写）的参数兼容的方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个使用指定方法将元素添加到集合中的 <see cref="T:System.Linq.Expressions.ListInitExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为指定值。</returns>
      <param name="newExpression">要将 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="addMethod">一个 <see cref="T:System.Reflection.MethodInfo" />，表示名为“Add”（不区分大小写），用于将元素添加到集合的实例方法。</param>
      <param name="initializers">其中包含用来填充 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 为 null。 - 或 - <paramref name="initializers" /> 的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 没有实现 <see cref="T:System.Collections.IEnumerable" />。 - 或 - <paramref name="addMethod" /> 不为 null，并且它不表示名为"Add"（不区分大小写）的正好带一个参数的实例方法。 - 或 - <paramref name="addMethod" /> 不为 null，并且 <see cref="P:System.Linq.Expressions.Expression.Type" /> 的一个或多个元素的 <paramref name="initializers" /> 属性所表示的类型不能赋给 <paramref name="addMethod" /> 所表示的方法的参数类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> 为 null，并且 <paramref name="newExpression" />.Type 或其基类型上不存在名为"Add"的带一个兼容类型的参数的任何实例方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>创建一个使用指定方法将元素添加到集合中的 <see cref="T:System.Linq.Expressions.ListInitExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为指定值。</returns>
      <param name="newExpression">要将 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="addMethod">一个 <see cref="T:System.Reflection.MethodInfo" />，表示带一个参数，用于将元素添加到集合中的实例方法。</param>
      <param name="initializers">用于填充 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 为 null。 - 或 - <paramref name="initializers" /> 的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 没有实现 <see cref="T:System.Collections.IEnumerable" />。 - 或 - <paramref name="addMethod" /> 不为 null，并且它不表示名为"Add"（不区分大小写）的正好带一个参数的实例方法。 - 或 - <paramref name="addMethod" /> 不为 null，并且 <see cref="P:System.Linq.Expressions.Expression.Type" /> 的一个或多个元素的 <paramref name="initializers" /> 属性所表示的类型不能赋给 <paramref name="addMethod" /> 所表示的方法的参数类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> 为 null，并且 <paramref name="newExpression" />.Type 或其基类型上不存在名为"Add"的带一个兼容类型的参数的任何实例方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <summary>创建具有给定主体的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
      <param name="body">循环体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <summary>创建具有给定主体和中断目标的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
      <param name="body">循环体。</param>
      <param name="break">循环体使用的中断目标。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <summary>创建具有给定主体的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
      <param name="body">循环体。</param>
      <param name="break">循环体使用的中断目标。</param>
      <param name="continue">循环体使用的继续目标。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>在给定左操作数和右操作数的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="binaryType">指定二元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="left">一个表示左操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">一个表示右操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> 与二元表达式节点不对应。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>在给定左操作数、右操作数和实现方法的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="binaryType">指定二元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="left">一个表示左操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">一个表示右操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">如果为 true，则设置 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 为 true；如果为 false，则设置 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 为 false。</param>
      <param name="method">一个指定实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> 与二元表达式节点不对应。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>在给定左操作数、右操作数、实现方法和类型转换函数的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="binaryType">指定二元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="left">一个表示左操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">一个表示右操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">如果为 true，则设置 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 为 true；如果为 false，则设置 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 为 false。</param>
      <param name="method">一个指定实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">一个表示类型转换函数的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。 只有在 <paramref name="binaryType" /> 为 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> 或复合赋值时，才使用此参数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> 与二元表达式节点不对应。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示具有指定元素的 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="type">此 <see cref="T:System.Linq.Expressions.CatchBlock" /> 将处理的 <see cref="T:System.Exception" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="variable">一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />，它表示对此处理程序捕获的 <see cref="T:System.Exception" /> 对象的引用。</param>
      <param name="body">catch 语句的主体。</param>
      <param name="filter">
        <see cref="T:System.Exception" /> 筛选器的主体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arguments">动态操作的参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和一个参数绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arg0">动态操作的参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和两个参数绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和三个参数绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
      <param name="arg2">动态操作的第三个参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和四个参数绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
      <param name="arg2">动态操作的第三个参数。</param>
      <param name="arg3">动态操作的第四个参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arguments">动态操作的参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，它表示指定的 <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> 的跳转。 也可以指定在跳转时传递给标签的值。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 <paramref name="kind" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。</returns>
      <param name="kind">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 的 <see cref="T:System.Linq.Expressions.GotoExpressionKind" />。</param>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">将在跳转时传递给关联标签的值。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.IndexExpression" />，它表示访问对象中的索引属性。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="instance">属性所属的对象。 如果属性为 static（在 Visual Basic 中为 shared），则它应为 null。</param>
      <param name="indexer">一个 <see cref="T:System.Linq.Expressions.Expression" />，它表示要编制索引的属性。</param>
      <param name="arguments">一个 IEnumerable&lt;Expression&gt;（在 Visual Basic 中为 IEnumerable (Of Expression)），其中包含将用于为属性编制索引的参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary>创建一个表示访问字段或属性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
      <param name="expression">一个表示成员所属对象的 <see cref="T:System.Linq.Expressions.Expression" />。 对于静态成员，这可以为 null。</param>
      <param name="member">描述要访问的字段或属性的 <see cref="T:System.Reflection.MemberInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="member" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <summary>创建一个表示具有指定元素的 try 块的 <see cref="T:System.Linq.Expressions.TryExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
      <param name="type">try 表达式的结果类型。 如果为 null，则 bodh 和所有处理程序必须具有相同的类型。</param>
      <param name="body">try 块的主体。</param>
      <param name="finally">finally 块的主体。 如果 try 块不具有关联的 finally 块，则传递 null。</param>
      <param name="fault">fault 块的主体。 如果 try 块不具有关联的 fault 块，则传递 null。</param>
      <param name="handlers">表示要与 try 块关联的 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" /> 的集合。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary>在给定操作数的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="unaryType">指定一元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="operand">一个表示操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">指定转换的目标类型的 <see cref="T:System.Type" />（如果不适用，则传递 null）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> 与一元表达式节点不对应。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>在给定操作数和实现方法的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="unaryType">指定一元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="operand">一个表示操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">指定转换的目标类型的 <see cref="T:System.Type" />（如果不适用，则传递 null）。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> 与一元表达式节点不对应。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>创建一个表示递归初始化某个字段或属性的成员的 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> 并且 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。</returns>
      <param name="member">要将 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MemberInfo" />。</param>
      <param name="bindings">包含用来填充 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 集合的 <see cref="T:System.Linq.Expressions.MemberBinding" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 或 <paramref name="bindings" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。 - 或 - <paramref name="bindings" /> 的元素的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性不表示 <paramref name="member" /> 所表示的字段或属性类型的成员。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>创建一个表示递归初始化某个字段或属性的成员的 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> 并且 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。</returns>
      <param name="member">要将 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MemberInfo" />。</param>
      <param name="bindings">用于填充 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 集合的 <see cref="T:System.Linq.Expressions.MemberBinding" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 或 <paramref name="bindings" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。 - 或 - <paramref name="bindings" /> 的元素的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性不表示 <paramref name="member" /> 所表示的字段或属性类型的成员。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>使用属性访问器方法创建一个表示对所访问的成员的成员进行递归初始化的 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为表示在 <paramref name="propertyAccessor" /> 中访问的属性的 <see cref="T:System.Reflection.PropertyInfo" />，并且 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 属性设置为指定值。</returns>
      <param name="propertyAccessor">表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="bindings">包含用来填充 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 集合的 <see cref="T:System.Linq.Expressions.MemberBinding" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 或 <paramref name="bindings" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不表示属性访问器方法。 - 或 - <paramref name="bindings" /> 的元素的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性不表示 <paramref name="propertyAccessor" /> 所表示的方法访问的属性类型的成员。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>使用属性访问器方法创建一个表示对所访问的成员的成员进行递归初始化的 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为表示在 <paramref name="propertyAccessor" /> 中访问的属性的 <see cref="T:System.Reflection.PropertyInfo" />，并且 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 属性设置为指定值。</returns>
      <param name="propertyAccessor">表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="bindings">用于填充 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 集合的 <see cref="T:System.Linq.Expressions.MemberBinding" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 或 <paramref name="bindings" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不表示属性访问器方法。 - 或 - <paramref name="bindings" /> 的元素的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性不表示 <paramref name="propertyAccessor" /> 所表示的方法访问的属性类型的成员。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>表示一个表达式，该表达式创建新对象并初始化该对象的一个属性。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> 并且 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.MemberInitExpression" />。</returns>
      <param name="newExpression">要将 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="bindings">其中包含用来填充 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 集合的 <see cref="T:System.Linq.Expressions.MemberBinding" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="bindings" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bindings" /> 的元素的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性不表示 <paramref name="newExpression" />.Type 所表示的类型的成员。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MemberInitExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> 并且 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.MemberInitExpression" />。</returns>
      <param name="newExpression">要将 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="bindings">用于填充 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 集合的 <see cref="T:System.Linq.Expressions.MemberBinding" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="bindings" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bindings" /> 的元素的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性不表示 <paramref name="newExpression" />.Type 所表示的类型的成员。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示算术余数运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义取模运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示算术余数运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义取模运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示余数赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示余数赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示余数赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不进行溢出检查的算术乘法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义乘法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示不进行溢出检查的算术乘法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义乘法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示不进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示不进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示进行溢出检查的算术乘法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义乘法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示进行溢出检查的算术乘法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义乘法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <summary>创建一个表示算术求反运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> 并且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="expression" />.Type 定义一元负运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示算术求反运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> 并且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带一个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="expression" />.Type 定义一元负运算符。 - 或 - <paramref name="expression" />.Type（如果它是可以为 null 的值类型，则取其相应的不可以为 null 的类型）不能赋给 <paramref name="method" /> 所表示的方法的参数类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <summary>创建一个表示进行溢出检查的算术求反运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> 并且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="expression" />.Type 定义一元负运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示进行溢出检查的算术求反运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。 可指定实现方法。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> 并且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带一个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="expression" />.Type 定义一元负运算符。 - 或 - <paramref name="expression" />.Type（如果它是可以为 null 的值类型，则取其相应的不可以为 null 的类型）不能赋给 <paramref name="method" /> 所表示的方法的参数类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <summary>创建一个表示调用不带参数的指定构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" /> 并且 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.NewExpression" />。</returns>
      <param name="constructor">要将 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 属性设置为与其相等的 <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="constructor" /> 表示的构造函数至少具有一个参数。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个表示调用带指定参数的指定构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" /> 并且 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.NewExpression" />。</returns>
      <param name="constructor">要将 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 属性设置为与其相等的 <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <param name="arguments">包含用来填充 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 为 null。 - 或 - <paramref name="arguments" /> 的一个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 参数包含的元素数量与 <paramref name="constructor" /> 所表示的构造函数的参数数量不同。 - 或 - <paramref name="arguments" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不能赋给 <paramref name="constructor" /> 所表示的构造函数的相应参数类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>创建一个表示调用带指定参数的指定构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />。 其中指定了访问构造函数初始化的字段的成员。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，并且其 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />、<see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 属性设置为指定值。</returns>
      <param name="constructor">要将 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 属性设置为与其相等的 <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <param name="arguments">包含用来填充 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="members">包含用来填充 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 集合的 <see cref="T:System.Reflection.MemberInfo" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 为 null。 - 或 - <paramref name="arguments" /> 的一个元素为 null。 - 或 - <paramref name="members" /> 的一个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 参数包含的元素数量与 <paramref name="constructor" /> 所表示的构造函数的参数数量不同。 - 或 - <paramref name="arguments" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不能赋给 <paramref name="constructor" /> 所表示的构造函数的相应参数类型。 - 或 - <paramref name="members" /> 参数没有包含与 <paramref name="arguments" /> 相同数量的元素。 - 或 - <paramref name="arguments" /> 的元素具有 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性，该属性表示不能赋给 <paramref name="members" /> 的相应元素所表示的成员类型的类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <summary>创建一个表示调用带指定参数的指定构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />。 将访问构造函数初始化字段的成员指定为数组。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，并且其 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />、<see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 属性设置为指定值。</returns>
      <param name="constructor">要将 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 属性设置为与其相等的 <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <param name="arguments">包含用来填充 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="members">用于填充 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 集合的 <see cref="T:System.Reflection.MemberInfo" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 为 null。 - 或 - <paramref name="arguments" /> 的一个元素为 null。 - 或 - <paramref name="members" /> 的一个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 参数包含的元素数量与 <paramref name="constructor" /> 所表示的构造函数的参数数量不同。 - 或 - <paramref name="arguments" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不能赋给 <paramref name="constructor" /> 所表示的构造函数的相应参数类型。 - 或 - <paramref name="members" /> 参数没有包含与 <paramref name="arguments" /> 相同数量的元素。 - 或 - <paramref name="arguments" /> 的元素具有 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性，该属性表示不能赋给 <paramref name="members" /> 的相应元素所表示的成员类型的类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <summary>创建一个表示调用带指定参数的指定构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" /> 并且 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.NewExpression" />。</returns>
      <param name="constructor">要将 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 属性设置为与其相等的 <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <param name="arguments">用于填充 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 为 null。 - 或 - <paramref name="arguments" /> 的一个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 的长度与 <paramref name="constructor" /> 表示的构造函数的参数数量正好相匹配。 - 或 - <paramref name="arguments" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不能赋给 <paramref name="constructor" /> 所表示的构造函数的相应参数类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
      <summary>创建一个表示调用指定类型的无参数构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，并且其 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 属性设置为 <see cref="T:System.Reflection.ConstructorInfo" />，这表示不带指定类型的参数的构造函数。</returns>
      <param name="type">一个具有不带参数的构造函数的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 所表示的类型不具有无参数构造函数。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个表示创建具有指定秩的数组的 <see cref="T:System.Linq.Expressions.NewArrayExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> 并且 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.NewArrayExpression" />。</returns>
      <param name="type">一个表示数组的元素类型的 <see cref="T:System.Type" />。</param>
      <param name="bounds">包含用来填充 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="bounds" /> 为 null。 - 或 - <paramref name="bounds" /> 的一个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bounds" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不表示整型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <summary>创建一个表示创建具有指定秩的数组的 <see cref="T:System.Linq.Expressions.NewArrayExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> 并且 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.NewArrayExpression" />。</returns>
      <param name="type">一个表示数组的元素类型的 <see cref="T:System.Type" />。</param>
      <param name="bounds">用于填充 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="bounds" /> 为 null。 - 或 - <paramref name="bounds" /> 的一个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bounds" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不表示整型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个表示创建一维数组并使用元素列表初始化该数组的 <see cref="T:System.Linq.Expressions.NewArrayExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> 并且 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.NewArrayExpression" />。</returns>
      <param name="type">一个表示数组的元素类型的 <see cref="T:System.Type" />。</param>
      <param name="initializers">包含用来填充 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="initializers" /> 为 null。 - 或 - <paramref name="initializers" /> 的一个元素为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="initializers" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性表示不能赋给 <paramref name="type" /> 所表示的类型的类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <summary>创建一个表示创建一维数组并使用元素列表初始化该数组的 <see cref="T:System.Linq.Expressions.NewArrayExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> 并且 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.NewArrayExpression" />。</returns>
      <param name="type">一个表示数组的元素类型的 <see cref="T:System.Type" />。</param>
      <param name="initializers">用于填充 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="initializers" /> 为 null。 - 或 - <paramref name="initializers" /> 的一个元素为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="initializers" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性表示不能赋给类型 <paramref name="type" /> 的类型。</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.NodeType">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ExpressionType" /> 值之一。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位求补运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> 并且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="expression" />.Type 定义一元 not 运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位求补运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。 可指定实现方法。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> 并且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带一个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="expression" />.Type 定义一元 not 运算符。 - 或 - <paramref name="expression" />.Type（如果它是可以为 null 的值类型，则取其相应的不可以为 null 的类型）不能赋给 <paramref name="method" /> 所表示的方法的参数类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义不相等运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>创建一个表示不相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />，并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">如果为 true，则设置 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 为 true；如果为 false，则设置 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 为 false。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义不相等运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
      <summary>返回表示二进制反码的表达式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的一个实例。</returns>
      <param name="expression">一个 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>返回表示二进制反码的表达式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的一个实例。</returns>
      <param name="expression">一个 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位 OR 运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义按位 OR 运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位 OR 运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义按位 OR 运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位 OR 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位 OR 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示按位 OR 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示仅在第一个操作数的计算结果为 false 时才计算第二个操作数的条件 OR 运算。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义按位 OR 运算符。 - 或 - <paramref name="left" />.Type 和 <paramref name="right" />.Type 不是同一布尔值类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示仅在第一个操作数的计算结果为 false 时才计算第二个操作数的条件 OR 运算。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义按位 OR 运算符。 - 或 - <paramref name="method" /> 为 null 并且 <paramref name="left" />.Type 和 <paramref name="right" />.Type 不是同一布尔值类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点，该节点可用于标识表达式树中的参数或变量。</summary>
      <returns>具有指定的名称和类型的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点。</returns>
      <param name="type">参数或变量的类型。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点，该节点可用于标识表达式树中的参数或变量。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 和 <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> 属性设置为指定值。</returns>
      <param name="type">参数或变量的类型。</param>
      <param name="name">仅用于调试或打印目的的参数或变量的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示将原始表达式递减 1 之后再进行表达式赋值。</summary>
      <returns>一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示将原始表达式递减 1 之后再进行表达式赋值。</summary>
      <returns>一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示将原始表达式递增 1 之后再进行表达式赋值。</summary>
      <returns>一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示将原始表达式递增 1 之后再进行表达式赋值。</summary>
      <returns>一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示对数进行幂运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义幂运算符。 - 或 - <paramref name="left" />.Type 和/或 <paramref name="right" />.Type 不为 <see cref="T:System.Double" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示对数进行幂运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义幂运算符。 - 或 - <paramref name="method" /> 为 null，并且 <paramref name="left" />.Type 和/或 <paramref name="right" />.Type 不为 <see cref="T:System.Double" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示对表达式求幂并将结果赋回给表达式。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示对表达式求幂并将结果赋回给表达式。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示对表达式求幂并将结果赋回给表达式。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它将表达式递减 1 并将结果赋回给表达式。</summary>
      <returns>一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它将表达式递减 1 并将结果赋回给表达式。</summary>
      <returns>一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它将表达式递增 1 并将结果赋回给表达式。</summary>
      <returns>一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它将表达式递增 1 并将结果赋回给表达式。</summary>
      <returns>一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>使用属性访问器方法创建一个表示访问属性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 属性设置为 <paramref name="expression" />，并且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为表示在 <paramref name="propertyAccessor" /> 中访问的属性的 <see cref="T:System.Reflection.PropertyInfo" />。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。 对于静态属性，这可以为 null。</param>
      <param name="propertyAccessor">表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 为 null。 - 或 - <paramref name="propertyAccessor" /> 所表示的方法不为 static（在 Visual Basic 中为 Shared），并且 <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 不能赋给 <paramref name="propertyAccessor" /> 所表示的方法的声明类型。 - 或 - <paramref name="propertyAccessor" /> 所表示的方法不为属性访问器方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <summary>创建一个表示访问属性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，并且其 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 和 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为指定值。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。 对于静态属性，这可以为 null。</param>
      <param name="property">要将 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为与其相等的 <see cref="T:System.Reflection.PropertyInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> 为 null。 - 或 - <paramref name="property" /> 所表示的属性不为 static（在 Visual Basic 中为 Shared），并且 <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 不能赋给 <paramref name="property" /> 所表示的属性的声明类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.IndexExpression" />，它表示对索引属性的访问。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="instance">属性所属的对象。 如果该属性为 static/shared，则此对象必须为 null。</param>
      <param name="indexer">表示要编制索引的属性的 <see cref="T:System.Reflection.PropertyInfo" />。</param>
      <param name="arguments">用于为属性编制索引的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.IndexExpression" />，它表示对索引属性的访问。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="instance">属性所属的对象。 如果该属性为 static/shared，则此对象必须为 null。</param>
      <param name="indexer">表示要编制索引的属性的 <see cref="T:System.Reflection.PropertyInfo" />。</param>
      <param name="arguments">用于为属性编制索引的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <summary>创建一个表示访问属性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 属性设置为 <paramref name="expression" />，并且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为表示 <paramref name="propertyName" /> 所表示的属性的 <see cref="T:System.Reflection.PropertyInfo" />。</returns>
      <param name="expression">一个 <see cref="T:System.Linq.Expressions.Expression" />，其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 包含一个名为 <paramref name="propertyName" /> 的属性。 对于静态属性，这可以为 null。</param>
      <param name="propertyName">要访问的属性的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="propertyName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有在 <paramref name="expression" />.Type 或其基类型中定义名为 <paramref name="propertyName" /> 的属性。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.IndexExpression" />，它表示对索引属性的访问。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="instance">属性所属的对象。 如果该属性为 static/shared，则此对象必须为 null。</param>
      <param name="propertyName">索引器的名称。</param>
      <param name="arguments">用于为属性编制索引的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>创建一个访问属性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
      <param name="expression">属性的包含对象。 对于静态属性，这可以为 null。</param>
      <param name="type">包含属性的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="propertyName">要访问的属性。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <summary>创建一个表示访问属性或字段的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 属性设置为 <paramref name="expression" />，并且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为表示 <paramref name="propertyOrFieldName" /> 所表示的属性或字段的 <see cref="T:System.Reflection.PropertyInfo" /> 或 <see cref="T:System.Reflection.FieldInfo" />。</returns>
      <param name="expression">一个 <see cref="T:System.Linq.Expressions.Expression" />，其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 包含一个名为 <paramref name="propertyOrFieldName" /> 的属性或字段。 对于静态成员，这可以为 null。</param>
      <param name="propertyOrFieldName">要访问的属性或字段的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="propertyOrFieldName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有在 <paramref name="expression" />.Type 或其基类型中定义名为 <paramref name="propertyOrFieldName" /> 的属性或字段。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <summary>创建一个表示具有类型 <see cref="T:System.Linq.Expressions.Expression" /> 的常量值的表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> 并且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Reduce">
      <summary>将此节点简化为更简单的表达式。 如果 CanReduce 返回 true，则它应返回有效的表达式。 此方法可以返回本身必须简化的另一个节点。</summary>
      <returns>已简化的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceAndCheck">
      <summary>将此节点简化为更简单的表达式。 如果 CanReduce 返回 true，则它应返回有效的表达式。 此方法可以返回本身必须简化的另一个节点。</summary>
      <returns>已简化的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceExtensions">
      <summary>将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。</summary>
      <returns>已简化的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示引用相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示引用不相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示重新引发异常。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示重新引发异常。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示重新引发具有给定类型的异常。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示重新引发异常。</returns>
      <param name="type">表达式的新 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
      <summary>创建一个表示 return 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Return，并且其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有一个在跳转时将传递给目标标签的 null 值。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 return 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。 可以指定在跳转时传递给标签的值。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Continue，并且其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">将在跳转时传递给关联标签的值。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个表示具有指定类型的 return 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。 可以指定在跳转时传递给标签的值。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Continue，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">将在跳转时传递给关联标签的值。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>创建一个表示具有指定类型的 return 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Return，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 null 值。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位右移运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义右移位运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位右移运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义右移位运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位右移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位右移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示按位右移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>创建 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的实例。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的实例，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />，并且其 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 属性设置为指定的值。</returns>
      <param name="variables">用于填充 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的集合。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
      <summary>创建 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的实例。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的实例，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />，并且其 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 属性设置为指定的值。</returns>
      <param name="variables">用于填充 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的数组。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不进行溢出检查的算术减法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义减法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示不进行溢出检查的算术减法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义减法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示不进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示不进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示进行溢出检查的算术减法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义减法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示进行溢出检查的算术减法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> 并且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义减法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>创建一个表示具有默认分支的 switch 语句的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="switchValue">要针对每个分支测试的值。</param>
      <param name="defaultBody">
        <paramref name="switchValue" /> 不匹配任何分支时的多分支选择的结果。</param>
      <param name="cases">此 switch 表达式的分支集。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>创建一个表示具有默认分支的 switch 语句的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="switchValue">要针对每个分支测试的值。</param>
      <param name="defaultBody">
        <paramref name="switchValue" /> 不匹配任何分支时的多分支选择的结果。</param>
      <param name="comparison">要使用的相等比较方法。</param>
      <param name="cases">此 switch 表达式的分支集。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>创建一个表示具有默认分支的 switch 语句的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="switchValue">要针对每个分支测试的值。</param>
      <param name="defaultBody">
        <paramref name="switchValue" /> 不匹配任何分支时的多分支选择的结果。</param>
      <param name="comparison">要使用的相等比较方法。</param>
      <param name="cases">此 switch 表达式的分支集。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>创建一个表示不带默认分支的 switch 语句的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="switchValue">要针对每个分支测试的值。</param>
      <param name="cases">此 switch 表达式的分支集。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>创建一个表示具有默认分支的 switch 语句的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="type">切换的结果类型。</param>
      <param name="switchValue">要针对每个分支测试的值。</param>
      <param name="defaultBody">
        <paramref name="switchValue" /> 不匹配任何分支时的多分支选择的结果。</param>
      <param name="comparison">要使用的相等比较方法。</param>
      <param name="cases">此 switch 表达式的分支集。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>创建一个表示具有默认分支的 switch 语句的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="type">切换的结果类型。</param>
      <param name="switchValue">要针对每个分支测试的值。</param>
      <param name="defaultBody">
        <paramref name="switchValue" /> 不匹配任何分支时的多分支选择的结果。</param>
      <param name="comparison">要使用的相等比较方法。</param>
      <param name="cases">此 switch 表达式的分支集。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建要在 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 对象中使用的 <see cref="T:System.Linq.Expressions.SwitchCase" /> 对象。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.SwitchCase" />。</returns>
      <param name="body">分支的主体。</param>
      <param name="testValues">分支的测试值。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>创建在 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 中使用的 <see cref="T:System.Linq.Expressions.SwitchCase" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.SwitchCase" />。</returns>
      <param name="body">分支的主体。</param>
      <param name="testValues">分支的测试值。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
      <summary>创建 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的实例。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 属性设置为指定值。</returns>
      <param name="fileName">要将 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 设置为与其相等的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
      <summary>创建 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的实例。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 和 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 属性设置为指定值。</returns>
      <param name="fileName">要将 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 设置为与其相等的 <see cref="T:System.String" />。</param>
      <param name="language">要将 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 设置为与其相等的 <see cref="T:System.Guid" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
      <summary>创建 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的实例。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 和 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> 属性设置为指定值。</returns>
      <param name="fileName">要将 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 设置为与其相等的 <see cref="T:System.String" />。</param>
      <param name="language">要将 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 设置为与其相等的 <see cref="T:System.Guid" />。</param>
      <param name="languageVendor">要将 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> 设置为与其相等的 <see cref="T:System.Guid" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>创建 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的实例。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> 和 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> 属性设置为指定值。</returns>
      <param name="fileName">要将 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 设置为与其相等的 <see cref="T:System.String" />。</param>
      <param name="language">要将 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 设置为与其相等的 <see cref="T:System.Guid" />。</param>
      <param name="languageVendor">要将 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> 设置为与其相等的 <see cref="T:System.Guid" />。</param>
      <param name="documentType">要将 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> 设置为与其相等的 <see cref="T:System.Guid" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示引发异常。</summary>
      <returns>一个表示异常的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="value">一个 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示引发具有给定类型的异常。</summary>
      <returns>一个表示异常的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="value">一个 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">表达式的新 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ToString">
      <summary>返回 <see cref="T:System.Linq.Expressions.Expression" /> 的文本化表示形式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 的文本化表示形式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>创建一个表示 try 块的 <see cref="T:System.Linq.Expressions.TryExpression" />，该 try 块包含任意数量的 catch 语句，但不包含 fault 和 finally 块。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
      <param name="body">try 块的主体。</param>
      <param name="handlers">包含零个或多个 <see cref="T:System.Linq.Expressions.CatchBlock" /> 表达式的数组，这些表达式表示要与 try 块关联的 catch 语句。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>创建一个表示 try 块的 <see cref="T:System.Linq.Expressions.TryExpression" />，该 try 块包含任意数量的 catch 语句和一个 finally 块。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
      <param name="body">try 块的主体。</param>
      <param name="finally">finally 块的主体。</param>
      <param name="handlers">包含零个或多个 <see cref="T:System.Linq.Expressions.CatchBlock" /> 表达式的数组，这些表达式表示要与 try 块关联的 catch 语句。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 try 块的 <see cref="T:System.Linq.Expressions.TryExpression" />，该 try 块包含一个 fault 块，但不包含 catch 语句。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
      <param name="body">try 块的主体。</param>
      <param name="fault">fault 块的主体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 try 块的 <see cref="T:System.Linq.Expressions.TryExpression" />，该 try 块包含一个 finally 块，但不包含 catch 语句。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
      <param name="body">try 块的主体。</param>
      <param name="finally">finally 块的主体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
      <summary>创建一个 <see cref="P:System.Linq.Expressions.Expression.Type" /> 对象，该对象表示具有特定类型参数的泛型 System.Action 委托类型。</summary>
      <returns>如果已为特定的 <paramref name="typeArgs" /> 创建泛型 System.Action 委托类型，则为 true；否则为 false。</returns>
      <param name="typeArgs">Type 对象的数组，这些对象指定 System.Action 委托类型的类型参数。</param>
      <param name="actionType">在此方法返回时，包含具有特定类型参数的泛型 System.Action 委托类型。 如果没有与 <paramref name="typeArgs" /> 匹配的泛型 System.Action 委托，则包含 null。此参数以未初始化状态传递。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
      <summary>创建一个 <see cref="P:System.Linq.Expressions.Expression.Type" /> 对象，它表示具有特定类型参数的泛型 System.Func 委托类型。 最后一个类型参数指定已创建委托的返回类型。</summary>
      <returns>如果已为特定的 <paramref name="typeArgs" /> 创建泛型 System.Func 委托类型，则为 true；否则为 false。</returns>
      <param name="typeArgs">Type 对象的数组，这些对象指定 System.Func 委托类型的类型参数。</param>
      <param name="funcType">在此方法返回时，包含具有特定类型参数的泛型 System.Func 委托类型。 如果没有与 <paramref name="typeArgs" /> 匹配的泛型 System.Func 委托，则包含 null。此参数以未初始化状态传递。</param>
    </member>
    <member name="P:System.Linq.Expressions.Expression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个表示显式引用或装箱转换的 <see cref="T:System.Linq.Expressions.UnaryExpression" />（如果转换失败，则提供 null）。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> 并且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个比较运行时类型标识的 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> 并且 <see cref="T:System.Linq.Expressions.Expression" /> 和 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> 属性设置为指定值。</returns>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> 并且 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 和 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> 属性设置为指定值。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <summary>创建一个表示一元正运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> 并且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="expression" />.Type 定义一元正运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示一元正运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> 并且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带一个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="expression" />.Type 定义一元正运算符。 - 或 - <paramref name="expression" />.Type（如果它是可以为 null 的值类型，则取其相应的不可以为 null 的类型）不能赋给 <paramref name="method" /> 所表示的方法的参数类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个表示显式取消装箱的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的一个实例。</returns>
      <param name="expression">要取消装箱的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">表达式的新 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点，该节点可用于标识表达式树中的参数或变量。</summary>
      <returns>具有指定的名称和类型的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点</returns>
      <param name="type">参数或变量的类型。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点，该节点可用于标识表达式树中的参数或变量。</summary>
      <returns>具有指定的名称和类型的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点。</returns>
      <param name="type">参数或变量的类型。</param>
      <param name="name">参数或变量的名称。 此名称仅用于调试或打印目的。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
      <summary>简化节点，然后对简化的表达式调用访问者委托。 该方法在节点不可简化时引发异常。</summary>
      <returns>要访问的表达式，或应在树中替换此表达式的表达式。</returns>
      <param name="visitor">
        <see cref="T:System.Func`2" /> 的一个实例。</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression`1">
      <summary>以表达式目录树的形式将强类型 lambda 表达式表示为数据结构。 此类不能被继承。</summary>
      <typeparam name="TDelegate">
        <see cref="T:System.Linq.Expressions.Expression`1" /> 表示的委托的类型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile">
      <summary>将表达式树描述的 lambda 表达式编译为可执行代码，并生成表示该 lambda 表达式的委托。</summary>
      <returns>一个 <paramref name="TDelegate" /> 类型的委托，它表示由 <see cref="T:System.Linq.Expressions.Expression`1" /> 描述的已编译的 lambda 表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>生成表示 lambda 表达式的委托。</summary>
      <returns>包含 lambda 的已编译版本的委托。</returns>
      <param name="debugInfoGenerator">编译器用于标记序列点并批注局部变量的调试信息生成器。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。 如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="body">结果的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性。</param>
      <param name="parameters">结果的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionType">
      <summary>描述表达式目录树的节点的节点类型。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Add">
      <summary>加法运算，如 a + b，针对数值操作数，不进行溢出检查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssign">
      <summary>加法复合赋值运算，如 (a += b)，针对数值操作数，不进行溢出检查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
      <summary>加法复合赋值运算，如 (a += b)，针对数值操作数，进行溢出检查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <summary>加法运算，如 (a + b)，针对数值操作数，进行溢出检查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.And">
      <summary>按位或逻辑 AND 运算，如 C# 中的 (a &amp; b) 和 Visual Basic 中的 (a And b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <summary>条件 AND 运算，它仅在第一个操作数的计算结果为 true 时才计算第二个操作数。 它与 C# 中的 (a &amp;&amp; b) 和 Visual Basic 中的 (a AndAlso b) 对应。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAssign">
      <summary>按位或逻辑 AND 复合赋值运算，如 C# 中的 (a &amp;= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <summary>一维数组中的索引运算，如 C# 中的 array[index] 或 Visual Basic 中的 array(index)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <summary>获取一维数组长度的运算，如 array.Length。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Assign">
      <summary>赋值运算，如 (a = b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Block">
      <summary>表达式块。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Call">
      <summary>方法调用，如在 obj.sampleMethod() 表达式中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <summary>表示 null 合并运算的节点，如 C# 中的 (a ?? b) 或 Visual Basic 中的 If(a, b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
      <summary>条件运算，如 C# 中的 a &gt; b ? a : b 或 Visual Basic 中的 If(a &gt; b, a, b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Constant">
      <summary>一个常量值。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Convert">
      <summary>强制转换或转换运算，如 C#中的 (SampleType)obj 或 Visual Basic 中的 CType(obj, SampleType)。 对于数值转换，如果转换后的值对于目标类型来说太大，这不会引发异常。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <summary>强制转换或转换运算，如 C#中的 (SampleType)obj 或 Visual Basic 中的 CType(obj, SampleType)。 对于数值转换，如果转换后的值与目标类型大小不符，则引发异常。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DebugInfo">
      <summary>调试信息。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Decrement">
      <summary>一元递减运算，如 C# 和 Visual Basic 中的 (a - 1)。 不应就地修改 a 对象。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Default">
      <summary>默认值。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Divide">
      <summary>除法运算，如 (a / b)，针对数值操作数。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DivideAssign">
      <summary>除法复合赋值运算，如 (a /= b)，针对数值操作数。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Dynamic">
      <summary>动态操作。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Equal">
      <summary>表示相等比较的节点，如 C# 中的 (a == b) 或 Visual Basic 中的 (a = b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <summary>按位或逻辑 XOR 运算，如 C# 中的 (a ^ b) 或 Visual Basic 中的 (a Xor b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
      <summary>按位或逻辑 XOR 复合赋值运算，如 C# 中的 (a ^= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Extension">
      <summary>扩展表达式。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Goto">
      <summary>“跳转”表达式，如 C# 中的 goto Label 或 Visual Basic 中的 GoTo Label。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <summary>“大于”比较，如 (a &gt; b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <summary>“大于或等于”比较，如 (a &gt;= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Increment">
      <summary>一元递增运算，如 C# 和 Visual Basic 中的 (a + 1)。 不应就地修改 a 对象。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Index">
      <summary>索引运算或访问使用参数的属性的运算。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
      <summary>调用委托或 lambda 表达式的运算，如 sampleDelegate.Invoke()。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsFalse">
      <summary>false 条件值。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsTrue">
      <summary>true 条件值。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Label">
      <summary>标签。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
      <summary>lambda 表达式，如 C# 中的 a =&gt; a + a 或 Visual Basic 中的 Function(a) a + a。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <summary>按位左移运算，如 (a &lt;&lt; b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
      <summary>按位左移复合赋值运算，如 (a &lt;&lt;= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
      <summary>“小于”比较，如 (a &lt; b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <summary>“小于或等于”比较，如 (a &lt;= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
      <summary>创建新的 <see cref="T:System.Collections.IEnumerable" /> 对象并从元素列表中初始化该对象的运算，如 C# 中的 new List&lt;SampleType&gt;(){ a, b, c } 或 Visual Basic 中的 Dim sampleList = { a, b, c }。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Loop">
      <summary>循环，如 for 或 while。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <summary>从字段或属性进行读取的运算，如 obj.SampleProperty。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <summary>创建新的对象并初始化其一个或多个成员的运算，如 C# 中的 new Point { X = 1, Y = 2 } 或 Visual Basic 中的 New Point With {.X = 1, .Y = 2}。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
      <summary>算术余数运算，如 C# 中的 (a % b) 或 Visual Basic 中的 (a Mod b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
      <summary>算术余数复合赋值运算，如 C# 中的 (a %= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
      <summary>乘法运算，如 (a * b)，针对数值操作数，不进行溢出检查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
      <summary>乘法复合赋值运算，如 (a *= b)，针对数值操作数，不进行溢出检查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
      <summary>乘法复合赋值运算，如 (a *= b)，针对数值操作数，进行溢出检查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <summary>乘法运算，如 (a * b)，针对数值操作数，进行溢出检查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Negate">
      <summary>算术求反运算，如 (-a)。 不应就地修改 a 对象。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <summary>算术求反运算，如 (-a)，进行溢出检查。 不应就地修改 a 对象。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.New">
      <summary>调用构造函数创建新对象的运算，如 new SampleType()。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <summary>创建新数组（其中每个维度的界限均已指定）的运算，如 C# 中的 new SampleType[dim1, dim2] 或 Visual Basic 中的 New SampleType(dim1, dim2)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <summary>创建新的一维数组并从元素列表中初始化该数组的运算，如 C# 中的 new SampleType[]{a, b, c} 或 Visual Basic 中的 New SampleType(){a, b, c}。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Not">
      <summary>按位求补运算或逻辑求反运算。 在 C# 中，它与整型的 (~a) 和布尔值的 (!a) 等效。 在 Visual Basic 中，它与 (Not a) 等效。 不应就地修改 a 对象。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <summary>不相等比较，如 C# 中的 (a != b) 或 Visual Basic 中的 (a &lt;&gt; b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OnesComplement">
      <summary>二进制反码运算，如 C# 中的 (~a)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Or">
      <summary>按位或逻辑 OR 运算，如 C# 中的 (a | b) 或 Visual Basic 中的 (a Or b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrAssign">
      <summary>按位或逻辑 OR 复合赋值运算，如 C# 中的 (a |= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
      <summary>短路条件 OR 运算，如 C# 中的 (a || b) 或 Visual Basic 中的 (a OrElse b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
      <summary>对在表达式上下文中定义的参数或变量的引用。 有关详细信息，请参阅 <see cref="T:System.Linq.Expressions.ParameterExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
      <summary>一元后缀递减，如 (a--)。 应就地修改 a 对象。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
      <summary>一元后缀递增，如 (a++)。 应就地修改 a 对象。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Power">
      <summary>对某个数字进行幂运算的数学运算，如 Visual Basic 中的 (a ^ b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PowerAssign">
      <summary>对某个数字进行幂运算的复合赋值运算，如 Visual Basic 中的 (a ^= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
      <summary>一元前缀递减，如 (--a)。 应就地修改 a 对象。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
      <summary>一元前缀递增，如 (++a)。 应就地修改 a 对象。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Quote">
      <summary>具有类型为 <see cref="T:System.Linq.Expressions.Expression" /> 的常量值的表达式。 <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> 节点可包含对参数的引用，这些参数在该节点表示的表达式的上下文中定义。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
      <summary>按位右移运算，如 (a &gt;&gt; b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
      <summary>按位右移复合赋值运算，如 (a &gt;&gt;= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
      <summary>运行时变量的列表。 有关详细信息，请参阅 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
      <summary>减法运算，如 (a - b)，针对数值操作数，不进行溢出检查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
      <summary>减法复合赋值运算，如 (a -= b)，针对数值操作数，不进行溢出检查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
      <summary>减法复合赋值运算，如 (a -= b)，针对数值操作数，进行溢出检查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <summary>算术减法运算，如 (a - b)，针对数值操作数，进行溢出检查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Switch">
      <summary>多分支选择运算，如 C# 中的 switch 或 Visual Basic 中的 Select Case。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Throw">
      <summary>引发异常的运算，如 throw new Exception()。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Try">
      <summary>try-catch 表达式。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <summary>显式引用或装箱转换，其中如果转换失败则提供 null，如 C# 中的 (obj as SampleType) 或 Visual Basic 中的 TryCast(obj, SampleType)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeEqual">
      <summary>确切类型测试。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <summary>类型测试，如 C# 中的 obj is SampleType 或 Visual Basic 中的 TypeOf obj is SampleType。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <summary>一元加法运算，如 (+a)。 预定义的一元加法运算的结果是操作数的值，但用户定义的实现可以产生特殊结果。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Unbox">
      <summary>取消装箱值类型运算，如 MSIL 中的 unbox 和 unbox.any 指令。</summary>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionVisitor">
      <summary>表示表达式树的访问者或重写者。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
      <summary>初始化 <see cref="T:System.Linq.Expressions.ExpressionVisitor" /> 的新实例。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
      <summary>将表达式列表调度到此类中更专用的访问方法之一。</summary>
      <returns>如果修改了任何一个元素，则为修改后的表达式列表；否则返回原始的表达式列表。</returns>
      <param name="nodes">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
      <summary>使用指定的元素访问者访问集合中的所有节点。</summary>
      <returns>如果修改了任何元素，则为修改后的节点列表；否则返回原始的节点列表。</returns>
      <param name="nodes">要访问的节点。</param>
      <param name="elementVisitor">一个委托，访问单个元素，还可以将它替换为新元素。</param>
      <typeparam name="T">节点的类型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
      <summary>将表达式调度到此类中更专用的访问方法之一。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
      <summary>访问表达式，将结果强制转换回原始的表达式类型。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="nodes">要访问的表达式。</param>
      <param name="callerName">调用方法的名称，用于报告更好的错误消息。</param>
      <typeparam name="T">表达式类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">此节点的访问方法返回不同的类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
      <summary>访问表达式，将结果强制转换回原始的表达式类型。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
      <param name="callerName">调用方法的名称，用于报告更好的错误消息。</param>
      <typeparam name="T">表达式类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">此节点的访问方法返回不同的类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.BlockExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <summary>访问 <see cref="T:System.Linq.Expressions.CatchBlock" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.ConstantExpression" />。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.DefaultExpression" />。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <summary>访问 <see cref="T:System.Linq.Expressions.ElementInit" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
      <summary>访问扩展表达式的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.GotoExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.IndexExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.InvocationExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.LabelExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
      <summary>访问 <see cref="T:System.Linq.Expressions.LabelTarget" />。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <summary>访问 <see cref="T:System.Linq.Expressions.Expression`1" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
      <typeparam name="T">委托的类型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.ListInitExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.LoopExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.MemberExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <summary>访问 <see cref="T:System.Linq.Expressions.MemberAssignment" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
      <summary>访问 <see cref="T:System.Linq.Expressions.MemberBinding" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <summary>访问 <see cref="T:System.Linq.Expressions.MemberListBinding" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <summary>访问 <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.NewExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.NewArrayExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.ParameterExpression" />。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <summary>访问 <see cref="T:System.Linq.Expressions.SwitchCase" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.TryExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpression">
      <summary>表示无条件跳转。 这包括 return 语句、break 和 continue 语句以及其他跳转。</summary>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Kind">
      <summary>“转到”表达式的种类。 仅供参考。</summary>
      <returns>表示“转到”表达式种类的 <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> 对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Target">
      <summary>此节点跳转到的目标标签。</summary>
      <returns>表示此节点的目标标签的 <see cref="T:System.Linq.Expressions.LabelTarget" /> 对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.GotoExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。 如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="target">结果的 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性。</param>
      <param name="value">结果的 <see cref="P:System.Linq.Expressions.GotoExpression.Value" /> 属性。</param>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Value">
      <summary>传递到目标的值或 null（如果目标类型为 System.Void）。</summary>
      <returns>表示传递到目标的值或 null 的 <see cref="T:System.Linq.Expressions.Expression" /> 对象。</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpressionKind">
      <summary>指定此 <see cref="T:System.Linq.Expressions.GotoExpression" /> 表示的跳转种类。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Break">
      <summary>一个表示 break 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Continue">
      <summary>一个表示 continue 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Goto">
      <summary>一个表示跳转到某个位置的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Return">
      <summary>一个表示 return 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="T:System.Linq.Expressions.IndexExpression">
      <summary>表示编制属性或数组的索引。</summary>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Arguments">
      <summary>获取将用于编制属性或数组索引的参数。</summary>
      <returns>包含将用于编制属性或数组索引的参数的只读集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Indexer">
      <summary>如果表达式表示索引属性，则获取属性的 <see cref="T:System.Reflection.PropertyInfo" />，否则返回 null。</summary>
      <returns>如果表达式表示索引属性，则为属性的 <see cref="T:System.Reflection.PropertyInfo" />，否则为 null。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Object">
      <summary>要编制索引的对象。</summary>
      <returns>表示要编制索引的对象的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.IndexExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。 如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="object">结果的 <see cref="P:System.Linq.Expressions.IndexExpression.Object" /> 属性。</param>
      <param name="arguments">结果的 <see cref="P:System.Linq.Expressions.IndexExpression.Arguments" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.InvocationExpression">
      <summary>表示将委托或 lambda 表达式应用于参数表达式列表的表达式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <summary>获取对其应用委托或 lambda 表达式的参数。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，表示对其应用委托的参数。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
      <summary>获取要应用的委托或 lambda 表达式。</summary>
      <returns>表示要应用的委托的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.NodeType">
      <summary>返回此表达式的节点类型。 扩展节点应在重写此方法时返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Type">
      <summary>获取此 <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.InvocationExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。 如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="expression">结果的 <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> 属性。</param>
      <param name="arguments">结果的 <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.LabelExpression">
      <summary>表示一个标签，可以将该标签放置在任何 <see cref="T:System.Linq.Expressions.Expression" /> 上下文中。 如果已跳转到该标签，则它将获取由对应的 <see cref="T:System.Linq.Expressions.GotoExpression" /> 提供的值。 否则，它接收 <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> 中的值。 如果 <see cref="T:System.Type" /> 等于 System.Void，则不应提供值。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.DefaultValue">
      <summary>通过常规控制流到达标签（例如，不跳转到标签）时 <see cref="T:System.Linq.Expressions.LabelExpression" /> 的值。</summary>
      <returns>Expression 对象，表示 <see cref="T:System.Linq.Expressions.LabelExpression" /> 的值。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Target">
      <summary>此标签与其关联的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</summary>
      <returns>此标签与其关联的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.LabelExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。 如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="target">结果的 <see cref="P:System.Linq.Expressions.LabelExpression.Target" /> 属性。</param>
      <param name="defaultValue">结果的 <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> 属性</param>
    </member>
    <member name="T:System.Linq.Expressions.LabelTarget">
      <summary>用于表示 <see cref="T:System.Linq.Expressions.GotoExpression" /> 的目标。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Name">
      <summary>获取标签的名称。</summary>
      <returns>标签的名称。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelTarget.ToString">
      <summary>返回表示当前 <see cref="T:System.Object" /> 的 <see cref="T:System.String" />。</summary>
      <returns>
        <see cref="T:System.String" />，表示当前的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Type">
      <summary>跳转到标签时传递的值的类型或 <see cref="T:System.Void" />（如果不应传递值）。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示跳转到标签时传递的值的类型或 <see cref="T:System.Void" />（如果不应传递值）</returns>
    </member>
    <member name="T:System.Linq.Expressions.LambdaExpression">
      <summary>描述一个 lambda 表达式。 这将捕获与 .NET 方法体类似的代码块。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Body">
      <summary>获取 lambda 表达式的主体。</summary>
      <returns>一个表示 lambda 表达式主体的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
      <summary>生成表示 lambda 表达式的委托。</summary>
      <returns>一个 <see cref="T:System.Delegate" />，它包含 lambda 表达式的已编译版本。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>生成表示 lambda 表达式的委托。</summary>
      <returns>包含 lambda 的已编译版本的委托。</returns>
      <param name="debugInfoGenerator">编译器用于标记序列点并批注局部变量的调试信息生成器。</param>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>将 lambda 编译到方法定义中。</summary>
      <param name="method">一个 <see cref="T:System.Reflection.Emit.MethodBuilder" />，将用于存放 lambda 的 IL。</param>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder,System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>将 lambda 编译到方法定义和自定义调试信息中。</summary>
      <param name="method">一个 <see cref="T:System.Reflection.Emit.MethodBuilder" />，将用于存放 lambda 的 IL。</param>
      <param name="debugInfoGenerator">编译器用于标记序列点并批注局部变量的调试信息生成器。</param>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Name">
      <summary>获取 lambda 表达式的名称。</summary>
      <returns>lambda 表达式的名称。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <summary>获取 lambda 表达式的参数。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，表示 lambda 表达式的参数。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.ReturnType">
      <summary>获取 lambda 表达式的返回类型。</summary>
      <returns>表示 lambda 表达式的类型的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.TailCall">
      <summary>获取一个值，该值指示是否将通过尾调用优化来编译 lambda 表达式。</summary>
      <returns>如果将通过尾调用优化来编译 lambda 表达式，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.LambdaExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ListInitExpression">
      <summary>表示包含集合初始值设定项的构造函数调用。</summary>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.CanReduce">
      <summary>获取一个值，该值指示是否可以减小此表达式树节点。</summary>
      <returns>如果可以简化节点，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <summary>获取用于初始化集合的元素初始值设定项。</summary>
      <returns>表示用于初始化集合的元素的 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <summary>获取包含对集合类型的构造函数的调用的表达式。</summary>
      <returns>表示对集合类型的构造函数的调用的 <see cref="T:System.Linq.Expressions.NewExpression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Reduce">
      <summary>将二进制表达式节点简化为更简单的表达式。</summary>
      <returns>已简化的表达式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.ListInitExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。 如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="newExpression">结果的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性。</param>
      <param name="initializers">结果的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.LoopExpression">
      <summary>表示无限循环。 可以使用“break”退出它。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Body">
      <summary>获取作为循环体的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <returns>作为循环体的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.BreakLabel">
      <summary>获取循环体用作 break 语句目标的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</summary>
      <returns>循环体用作 break 语句目标的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
      <summary>获取循环体用作 continue 语句目标的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</summary>
      <returns>循环体用作 continue 语句目标的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.NodeType">
      <summary>返回此表达式的节点类型。 扩展节点应在重写此方法时返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.LoopExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。 如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="breakLabel">结果的 <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" /> 属性。</param>
      <param name="continueLabel">结果的 <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" /> 属性。</param>
      <param name="body">结果的 <see cref="P:System.Linq.Expressions.LoopExpression.Body" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberAssignment">
      <summary>表示针对对象的字段或属性的赋值运算。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
      <summary>获取要分配给字段或属性的表达式。</summary>
      <returns>表示要分配给字段或属性的值的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。 如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="expression">结果的 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberBinding">
      <summary>提供一种基类，该基类派生表示绑定的类，这些绑定用于初始化新创建对象的成员。</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
      <summary>初始化 <see cref="T:System.Linq.Expressions.MemberBinding" /> 类的新实例。</summary>
      <param name="type">区分所表示的绑定类型的 <see cref="T:System.Linq.Expressions.MemberBindingType" />。</param>
      <param name="member">表示要初始化的字段或属性的 <see cref="T:System.Reflection.MemberInfo" />。</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
      <summary>获取所表示的绑定类型。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberBindingType" /> 值之一。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.Member">
      <summary>获取要初始化的字段或属性。</summary>
      <returns>表示要初始化的字段或属性的 <see cref="T:System.Reflection.MemberInfo" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.ToString">
      <summary>返回 <see cref="T:System.Linq.Expressions.MemberBinding" /> 的文本表示形式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberBinding" /> 的文本表示形式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBindingType">
      <summary>描述 <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 对象中使用的绑定类型。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <summary>一个绑定，它表示使用表达式的值来初始化成员。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <summary>一个绑定，它表示根据元素列表来初始化类型为 <see cref="T:System.Collections.IList" /> 或 <see cref="T:System.Collections.Generic.ICollection`1" /> 的成员。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <summary>一个绑定，它表示以递归方式来初始化某个成员的成员。</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberExpression">
      <summary>表示访问字段或属性。</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Expression">
      <summary>获取字段或属性的包含对象。</summary>
      <returns>表示字段或属性的包含对象的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Member">
      <summary>获取要访问的字段或属性。</summary>
      <returns>表示要访问的字段或属性的 <see cref="T:System.Reflection.MemberInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.NodeType">
      <summary>返回此 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。 如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="expression">结果的 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberInitExpression">
      <summary>表示调用构造函数并初始化新对象的一个或多个成员。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <summary>获取描述如何初始化新创建对象的成员的绑定。</summary>
      <returns>描述如何初始化成员的 <see cref="T:System.Linq.Expressions.MemberBinding" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
      <summary>获取一个值，该值指示是否可以减小此表达式树节点。</summary>
      <returns>如果可以简化节点，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <summary>获取表示构造函数调用的表达式。</summary>
      <returns>表示构造函数调用的 <see cref="T:System.Linq.Expressions.NewExpression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NodeType">
      <summary>返回此 Expression 的节点类型。 扩展节点应在重写此方法时返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Reduce">
      <summary>将 <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 简化为更简单的表达式。</summary>
      <returns>已简化的表达式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.MemberInitExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。 如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="newExpression">结果的 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 属性。</param>
      <param name="bindings">结果的 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberListBinding">
      <summary>表示初始化新创建对象的集合成员的元素。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <summary>获取用于初始化新创建对象的集合成员的元素初始值设定项。</summary>
      <returns>用来初始化集合成员的 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。 如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="initializers">结果的 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberMemberBinding">
      <summary>表示初始化新创建对象的成员的成员。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <summary>获取描述如何初始化某个成员的成员的绑定。</summary>
      <returns>描述如何初始化该成员的成员的 <see cref="T:System.Linq.Expressions.MemberBinding" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。 如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="bindings">结果的 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.MethodCallExpression">
      <summary>表示对静态方法或实例方法的调用。</summary>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <summary>获取表示已调用方法的参数的表达式集合。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，表示被调用方法的参数。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
      <summary>获取要调用的方法的 <see cref="T:System.Reflection.MethodInfo" />。</summary>
      <returns>表示被调用方法的 <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
      <summary>获取 <see cref="T:System.Linq.Expressions.Expression" />，对于实例方法调用，它表示实例，而对于静态方法调用，它表示 null。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression" />，表示方法的接收对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。 如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="object">结果的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 属性。</param>
      <param name="arguments">结果的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.NewArrayExpression">
      <summary>表示创建新数组并可能初始化该新数组的元素。</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <summary>如果 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性的值为 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />，则获取数组的界限；如果 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性的值为 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />，则获取用来初始化新数组的元素的值。</summary>
      <returns>表示数组的界限或初始化值的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.NewArrayExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。 如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="expressions">结果的 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.NewExpression">
      <summary>表示构造函数调用。</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Arguments">
      <summary>获取构造函数的参数。</summary>
      <returns>表示构造函数的参数的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Constructor">
      <summary>获取被调用的构造函数。</summary>
      <returns>表示被调用构造函数的 <see cref="T:System.Reflection.ConstructorInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Members">
      <summary>获取符合以下条件的成员：它们可以检索已使用构造函数参数进行初始化的字段的值。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 对象的集合，该对象表示可检索已使用构造函数参数进行初始化的字段值的成员。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.NewExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。 如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="arguments">结果的 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.ParameterExpression">
      <summary>表示命名的参数表达式。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.IsByRef">
      <summary>指示此 ParameterExpression 将被视为 ByRef 参数。</summary>
      <returns>如果此 ParameterExpression 是 ByRef 参数，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Name">
      <summary>获取参数或变量的名称。</summary>
      <returns>一个包含参数名的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.ParameterExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.RuntimeVariablesExpression">
      <summary>一个为变量提供运行时读/写权限的表达式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
      <summary>返回此 Expression 的节点类型。 扩展节点应在重写此方法时返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。 如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="variables">结果的 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 属性。</param>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
      <summary>为其提供运行时访问权限的变量或参数。</summary>
      <returns>包含将为其提供运行时访问权限的参数的只读集合。</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchCase">
      <summary>表示 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 的一个事例。</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.Body">
      <summary>获取此事例的主体。</summary>
      <returns>表示事例块主体的 <see cref="T:System.Linq.Expressions.Expression" /> 对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.TestValues">
      <summary>获取此事例的值。 当 <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> 与其中任一值匹配时，会选择此事例以便执行。</summary>
      <returns>此事例块的值的只读集合。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.ToString">
      <summary>返回表示当前 <see cref="T:System.Object" /> 的 <see cref="T:System.String" />。</summary>
      <returns>
        <see cref="T:System.String" />，表示当前的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。 如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="testValues">结果的 <see cref="P:System.Linq.Expressions.SwitchCase.TestValues" /> 属性。</param>
      <param name="body">结果的 <see cref="P:System.Linq.Expressions.SwitchCase.Body" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.SwitchExpression">
      <summary>表示一个控制表达式，该表达式通过将控制传递到 <see cref="T:System.Linq.Expressions.SwitchCase" /> 来处理多重选择。</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Cases">
      <summary>获取开关的 <see cref="T:System.Linq.Expressions.SwitchCase" /> 对象的集合。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.SwitchCase" /> 对象的集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Comparison">
      <summary>获取相等比较方法（如果有）。</summary>
      <returns>表示相等比较方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
      <summary>获取开关的测试。</summary>
      <returns>表示开关的测试的 <see cref="T:System.Linq.Expressions.Expression" /> 对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.NodeType">
      <summary>返回此 Expression 的节点类型。 扩展节点应在重写此方法时返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
      <summary>获取开关的测试。</summary>
      <returns>表示开关的测试的 <see cref="T:System.Linq.Expressions.Expression" /> 对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.SwitchExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。 如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="switchValue">结果的 <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> 属性。</param>
      <param name="cases">结果的 <see cref="P:System.Linq.Expressions.SwitchExpression.Cases" /> 属性。</param>
      <param name="defaultBody">结果的 <see cref="P:System.Linq.Expressions.SwitchExpression.DefaultBody" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.SymbolDocumentInfo">
      <summary>存储发出源文件的调试符号信息所需的信息，尤其是文件名和唯一语言标识符。</summary>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
      <summary>返回文档类型的唯一标识符（如果有）。 对于文本文件，默认为 GUID。</summary>
      <returns>文档类型的唯一标识符。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
      <summary>源文件名称。</summary>
      <returns>表示源文件名称的字符串。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
      <summary>返回语言的唯一标识符（如果有）。</summary>
      <returns>语言的唯一标识符</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
      <summary>返回语言供应商的唯一标识符（如果有）。</summary>
      <returns>语言供应商的唯一标识符。</returns>
    </member>
    <member name="T:System.Linq.Expressions.TryExpression">
      <summary>表示 try/catch/finally/fault 块。</summary>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Body">
      <summary>获取表示 try 块的主体的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <returns>表示 try 块的主体的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Fault">
      <summary>获取表示 fault 块的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <returns>表示 fault 块的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Finally">
      <summary>获取表示 finally 块的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <returns>表示 finally 块的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Handlers">
      <summary>获取与 try 块关联的 <see cref="T:System.Linq.Expressions.CatchBlock" /> 表达式的集合。</summary>
      <returns>与 try 块关联的 <see cref="T:System.Linq.Expressions.CatchBlock" /> 表达式的集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.TryExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。 如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="body">结果的 <see cref="P:System.Linq.Expressions.TryExpression.Body" /> 属性。</param>
      <param name="handlers">结果的 <see cref="P:System.Linq.Expressions.TryExpression.Handlers" /> 属性。</param>
      <param name="finally">结果的 <see cref="P:System.Linq.Expressions.TryExpression.Finally" /> 属性。</param>
      <param name="fault">结果的 <see cref="P:System.Linq.Expressions.TryExpression.Fault" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.TypeBinaryExpression">
      <summary>表示表达式和类型之间的操作。</summary>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <summary>获取类型测试操作的表达式操作数。</summary>
      <returns>表示类型测试操作的表达式操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
      <summary>返回此 Expression 的节点类型。 扩展节点应在重写此方法时返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Type">
      <summary>获取此 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <summary>获取类型测试操作的类型操作数。</summary>
      <returns>表示类型测试操作的类型操作数的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。 如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="expression">结果的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.UnaryExpression">
      <summary>表示包含一元运算符的表达式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.CanReduce">
      <summary>获取一个值，该值指示是否可以减小此表达式树节点。</summary>
      <returns>如果可以简化节点，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <summary>获取一个值，该值指示表达式目录树节点是否表示对运算符的提升调用。</summary>
      <returns>如果该节点表示提升调用，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <summary>获取一个值，该值指示表达式目录树节点是否表示对运算符（其返回类型提升为可以为 null 的类型）的提升调用。</summary>
      <returns>如果该运算符的返回类型提升为可以为 null 的类型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Method">
      <summary>获取一元运算的实现方法。</summary>
      <returns>表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
      <summary>获取一元运算的操作数。</summary>
      <returns>一个表示一元运算的操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Reduce">
      <summary>将表达式节点简化为更简单的表达式。</summary>
      <returns>已简化的表达式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.UnaryExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。 如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="operand">结果的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性。</param>
    </member>
    <member name="T:System.Management.Instrumentation.InstanceNotFoundException">
      <summary>引发的异常指示提供程序未返回任何实例。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstanceNotFoundException.#ctor">
      <summary>初始化 InstanceNotFoundException 类的一个新示例。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstanceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化信息和流上下文，初始化 InstanceNotFoundException 类的一个新实例。</summary>
      <param name="info">包含序列化异常所需的所有数据的 SerializationInfo。</param>
      <param name="context">StreamingContext，指示流的源和目标。</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstanceNotFoundException.#ctor(System.String)">
      <summary>使用设置为 message 的消息字符串初始化 InstanceNotFoundException 类的一个新实例。</summary>
      <param name="message">一个字符串，其中包含解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstanceNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和内部异常，初始化 InstanceNotFoundException 类的一个新实例。</summary>
      <param name="message">一个字符串，其中包含解释异常原因的错误消息。</param>
      <param name="innerException">导致引发当前异常的“Exception”。</param>
    </member>
    <member name="T:System.Management.Instrumentation.InstrumentationBaseException">
      <summary>表示与基提供程序相关的异常。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationBaseException.#ctor">
      <summary>初始化 <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" /> 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationBaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化信息初始化 <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化某个对象所需的数据。</param>
      <param name="context">指定序列化流的源和目的地的说明。</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationBaseException.#ctor(System.String)">
      <summary>使用描述异常的消息初始化 <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationBaseException.#ctor(System.String,System.Exception)">
      <summary>使用指定的字符串和异常初始化一个新 <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" /> 类。</summary>
      <param name="message">描述该异常的消息。</param>
      <param name="innerException">导致当前异常的异常实例。</param>
    </member>
    <member name="T:System.Management.Instrumentation.InstrumentationException">
      <summary>表示与提供程序相关的异常。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor">
      <summary>初始化 <see cref="T:System.Management.Instrumentation.InstrumentationException" /> 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor(System.Exception)">
      <summary>使用导致当前异常的 System.Exception 初始化一个新 <see cref="T:System.Management.Instrumentation.InstrumentationException" /> 类。</summary>
      <param name="innerException">导致当前异常的异常实例。</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化信息初始化 <see cref="T:System.Management.Instrumentation.InstrumentationException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化某个对象所需的数据。</param>
      <param name="context">指定序列化流的源和目的地的说明。</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor(System.String)">
      <summary>使用描述异常的消息初始化 <see cref="T:System.Management.Instrumentation.InstrumentationException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的字符串和异常初始化一个新 <see cref="T:System.Management.Instrumentation.InstrumentationException" /> 类。</summary>
      <param name="message">描述该异常的消息。</param>
      <param name="innerException">导致当前异常的异常实例。</param>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementBindAttribute">
      <summary>ManagementBind 特性指示一个方法用于返回与特定键值关联的 WMI 类。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementBindAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Management.ManagementBindAttribute" /> 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementBindAttribute.Schema">
      <summary>获取或设置一个值，该值定义用 ManagementEnumerator 特性标记的方法将输出的输出类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> 值，指示用 <see cref="ManagementBind" /> 特性标记的方法将输出的输出类型。</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementCommitAttribute">
      <summary>ManagementCommit 特性用于标记在需要通过一次原子操作设置一组可读/写的属性时调用的方法。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementCommitAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Management.ManagementCommitAttribute" /> 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementConfigurationAttribute">
      <summary>ManagementConfiguration 特性指示一个属性或字段表示可读/写的 WMI 属性。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementConfigurationAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Management.ManagementConfigurationAttribute" /> 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementConfigurationAttribute.Mode">
      <summary>获取或设置该属性的模式，该模式指定是否尽快应用对属性的更改或在何时调用提交方法。</summary>
      <returns>返回一个 <see cref="T:System.Management.Instrumentation.ManagementConfigurationType" />，它指示该 WMI 属性是使用 <see cref="F:System.Management.Instrumentation.ManagementConfigurationType.Apply" /> 模式，还是使用 <see cref="F:System.Management.Instrumentation.ManagementConfigurationType.OnCommit" /> 模式。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementConfigurationAttribute.Schema">
      <summary>获取或设置一个值，该值定义用 ManagementConfiguration 特性标记的属性将返回的输出类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> 值，表示用 ManagementConfiguration 特性标记的属性将返回的输出类型。</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementConfigurationType">
      <summary>表示可读/写属性的可能的提交行为。 它用作 <see cref="T:System.Management.Instrumentation.ManagementConfigurationAttribute" /> 特性的参数值。</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementConfigurationType.Apply">
      <summary>设置的值只有在调用 Commit 时才能生效。</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementConfigurationType.OnCommit">
      <summary>将立即应用已设置的值。</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementCreateAttribute">
      <summary>ManagementCreateAttribute 用于指示一个方法创建托管实体的一个新实例。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementCreateAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Management.ManagementCreateAttribute" /> 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementEntityAttribute">
      <summary>ManagementEntity 特性指示一个类提供通过 WMI 提供程序公开的管理信息。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementEntityAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Management.ManagementEntityAttribute" /> 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementEntityAttribute.External">
      <summary>获取或设置一个值，该值指定此类是否表示在当前程序集外部实现的提供程序中的 WMI 类。</summary>
      <returns>如果此类表示一个外部 WMI 类，则为布尔值 true；否则为 false。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementEntityAttribute.Name">
      <summary>获取或设置 WMI 类的名称。</summary>
      <returns>一个字符串，其中包含 WMI 类的名称。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementEntityAttribute.Singleton">
      <summary>指定关联的类是否表示单一实例 WMI 类。</summary>
      <returns>如果此类表示单一实例 WMI 类，则为布尔值 true；否则为 false。</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementEnumeratorAttribute">
      <summary>ManagementEnumerator 特性用于标记返回 WMI 类的所有实例的方法。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementEnumeratorAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Management.ManagementEnumeratorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementEnumeratorAttribute.Schema">
      <summary>获取或设置一个值，该值定义用 ManagementEnumerator 特性标记的方法将输出的输出类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> 值，指示用 <see cref="ManagementEnumerator" /> 特性标记的方法将输出的输出类型。</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementHostingModel">
      <summary>定义指定提供程序的承载模型的值。</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementHostingModel.Decoupled">
      <summary>将提供程序作为分离的提供程序激活。</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementHostingModel.LocalService">
      <summary>在当前正使用 LocalService 帐户运行的提供程序宿主进程中激活提供程序。</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementHostingModel.LocalSystem">
      <summary>在当前正使用 LocalSystem 帐户运行的提供程序宿主进程中激活提供程序。</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementHostingModel.NetworkService">
      <summary>在当前正使用 NetworkService 帐户运行的提供程序宿主进程中激活提供程序。</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementKeyAttribute">
      <summary>ManagementKey 特性用于标识 WMI 类的键属性。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementKeyAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Management.ManagementKeyAttribute" /> 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementMemberAttribute">
      <summary>此类由 WMI.NET 提供程序扩展框架使用。 它是适用于成员的所有管理特性的基类。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementMemberAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Management.ManagementMemberAttribute" /> 类的一个新实例。 这是默认构造函数。</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementMemberAttribute.Name">
      <summary>获取或设置管理特性的名称。</summary>
      <returns>返回一个表示管理特性名称的字符串。</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementNameAttribute">
      <summary>ManagementName 特性用于重写通过 WMI 类公开的名称。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementNameAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Management.ManagementNameAttribute" /> 类的新实例，它指定该类的 <see cref="P:System.Management.ManagementNameAttribute.Name" /> 属性。</summary>
      <param name="name">该对象的用户友好名称。</param>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementNameAttribute.Name">
      <summary>获取或设置对象的用户友好名称。 该对象可以是方法参数，也可以是用 ManagementProbe、ManagementKey 或 ManagementConfiguration 特性标记的属性。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，指示对象的用户友好名称。</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementNewInstanceAttribute">
      <summary>这是管理特性的基类，管理特性只具有运行时功能，而没有架构表示形式。 管理特性类 ManagementBindAttribute、ManagementCreateAttribute 和 ManagementEnumeratorAttribute 都是从此类派生的。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementNewInstanceAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Management.ManagementNewInstanceAttribute" /> 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementProbeAttribute">
      <summary>ManagementProbe 特性指示一个属性或字段表示只读的 WMI 属性。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementProbeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Management.ManagementProbeAttribute" /> 类的新实例。 这是该类的默认构造函数。</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementProbeAttribute.Schema">
      <summary>获取或设置一个值，该值定义用 ManagementProbe 特性标记的属性将输出的输出类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> 值，指示用 ManagementProbe 特性标记的属性将输出的输出类型。</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementReferenceAttribute">
      <summary>ManagementReferenceAttribute 用于将类成员、属性或方法参数标记为对其他管理对象或类的引用。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementReferenceAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Management.ManagementReferenceAttribute" /> 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementReferenceAttribute.Type">
      <summary>获取或设置该引用类型的名称。</summary>
      <returns>一个包含该引用类型的名称的字符串。</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementRemoveAttribute">
      <summary>ManagementRemoveAttribute 用于指示一个方法清理托管实体的实例。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementRemoveAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Management.ManagementRemoveAttribute" /> 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementRemoveAttribute.Schema">
      <summary>获取或设置一个值，该值定义用 ManagementRemove 特性标记的对象将输出的输出类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> 值，指示用 Remove 特性标记的对象将输出的输出类型。</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementTaskAttribute">
      <summary>ManagementTask 特性指示目标方法会实现 WMI 方法。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementTaskAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Management.ManagementTaskAttribute" /> 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementTaskAttribute.Schema">
      <summary>获取或设置一个值，该值定义用 ManagementTask 特性标记的方法将输出的输出类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> 值，指示用 ManagementTask 特性标记的方法将输出的输出类型。</returns>
    </member>
    <member name="T:System.Management.Instrumentation.WmiConfigurationAttribute">
      <summary>WmiConfiguration 特性指示程序集包含通过使用 WMI.NET 提供程序扩展模型实现 WMI 提供程序的代码。 此特性接受的参数可为实现的 WMI 提供程序建立高级配置。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.WmiConfigurationAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Management.WmiConfigurationAttribute" /> 类的新实例，该类指定 WMI 提供程序用于公开类的 WMI 命名空间。</summary>
      <param name="scope">提供程序将用于公开类的 WMI 命名空间。 例如“root\MyProviderNamespace”。</param>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.HostingGroup">
      <summary>获取或设置 WMI 提供程序的承载组。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，指示 WMI 提供程序的承载组。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.HostingModel">
      <summary>获取或设置 WMI 提供程序的承载模型。</summary>
      <returns>一个 <see cref="T:System.Management.Instrumentation.ManagementHostingModel" /> 值，指示 WMI 提供程序的承载模型。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.IdentifyLevel">
      <summary>获取或设置一个值，指定 WMI 提供程序是否可以模拟其调用方。 如果该值为 false，则说明提供程序无法模拟；如果该值为 true，则说明提供程序可以模拟。</summary>
      <returns>一个布尔值，指示提供程序是否可以模拟其调用方。 如果该值为 false，则说明提供程序无法模拟；如果该值为 true，则说明提供程序可以模拟。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.NamespaceSecurity">
      <summary>获取或设置一个安全描述符定义语言 (SDDL) 字符串，它指定提供程序用于公开管理对象的命名空间的安全描述符。</summary>
      <returns>一个 SDDL 字符串，表示提供程序用于公开管理对象的命名空间的安全描述符。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.Scope">
      <summary>获取或设置 WMI 提供程序用于公开类的 WMI 命名空间。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，指示 WMI 提供程序用于公开类的命名空间。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.SecurityRestriction">
      <summary>获取或设置 WMI 提供程序的安全描述符。 有关更多信息，请参见位于 http://www.msdn.com 上的 MSDN Online Library 中的“__Win32Provider”主题所介绍的 SecurityDescriptor 属性信息。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，其中包含 WMI 提供程序的安全描述符。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite">
      <summary>动态调用站点的基类。 此类型用作动态站点目标的参数类型。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite.Binder">
      <summary>负责在动态站点上绑定动态操作的类。</summary>
      <returns>负责绑定动态操作的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 对象。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite.Create(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>使用给定的委托类型和联编程序创建一个调用站点。</summary>
      <returns>新的调用站点。</returns>
      <param name="delegateType">调用站点的委托类型。</param>
      <param name="binder">调用站点的联编程序。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite`1">
      <summary>动态站点类型。</summary>
      <typeparam name="T">委托类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite`1.Create(System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>创建动态调用站点的实例，使用负责此调用站点上动态操作的运行时绑定的联编程序进行初始化。</summary>
      <returns>动态调用站点的新实例。</returns>
      <param name="binder">负责此调用站点上动态操作的运行时绑定的联编程序。</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.CallSite`1.Target">
      <summary>0 级缓存 - 基于站点历史记录专用的委托。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite`1.Update">
      <summary>更新委托。 在动态站点遇到缓存未命中时调用。</summary>
      <returns>更新委托。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteBinder">
      <summary>负责动态调用站点上动态操作的运行时绑定的类。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>对一组参数执行动态操作的运行时绑定。</summary>
      <returns>一个表达式，对动态操作参数执行测试；如果测试有效，则执行动态操作。 如果测试在动态操作的后续匹配项上失败，将再次调用 Bind 为新参数类型生成新的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
      <param name="args">动态操作的参数数组。</param>
      <param name="parameters">表示绑定进程中调用站点的参数的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 实例数组。</param>
      <param name="returnLabel">用于返回动态绑定的结果的 LabelTarget。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.BindDelegate``1(System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>提供低级别的运行时绑定支持。 类可以对此进行重写，并为规则的实现提供直接委托。 这样，就可以将规则保存到磁盘，使专用规则在运行时可用，或则提供不同的缓存策略。</summary>
      <returns>替换调用站点目标的新委托。</returns>
      <param name="site">为其执行绑定的调用站点。</param>
      <param name="args">联编程序的参数。</param>
      <typeparam name="T">调用站点的目标类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.CacheTarget``1(``0)">
      <summary>将一个目标添加到已知目标的缓存。 在调用 BindDelegate 生成新规则之前，将扫描已缓存的目标。</summary>
      <param name="target">要添加到缓存的目标委托。</param>
      <typeparam name="T">要添加的目标的类型。</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel">
      <summary>获取一个可用于导致绑定被更新的标签。 它指示表达式的绑定不再有效。 通常在动态对象的“版本”发生更改时使用它。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 对象，表示可用于触发绑定更新的标签。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteHelpers">
      <summary>包含 DLR 调用站点的帮助器方法的类。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame(System.Reflection.MethodBase)">
      <summary>检查 <see cref="T:System.Reflection.MethodBase" /> 是否由 DLR 在内部使用且不应显示在语言代码的堆栈上。</summary>
      <returns>如果输入 <see cref="T:System.Reflection.MethodBase" /> 由 DLR 在内部使用且不应显示在语言代码的堆栈上，则为 True。 否则为 false。</returns>
      <param name="mb">输入 <see cref="T:System.Reflection.MethodBase" /></param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteOps">
      <summary>创建和缓存绑定规则。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.AddRule``1(System.Runtime.CompilerServices.CallSite{``0},``0)">
      <summary>将一个规则添加到在动态调用站点上维护的缓存。</summary>
      <param name="site">动态调用站点的实例。</param>
      <param name="rule">调用站点规则的实例。</param>
      <typeparam name="T">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 的委托的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.Bind``1(System.Runtime.CompilerServices.CallSiteBinder,System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>基于参数使用新规则更新调用站点目标。</summary>
      <returns>新的调用站点目标。</returns>
      <param name="binder">调用站点的联编程序。</param>
      <param name="site">动态调用站点的实例。</param>
      <param name="args">调用站点的参数。</param>
      <typeparam name="T">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 的委托的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.ClearMatch(System.Runtime.CompilerServices.CallSite)">
      <summary>清除作出匹配的调用站点上的匹配标志。</summary>
      <param name="site">动态调用站点的实例。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker``1(System.Runtime.CompilerServices.CallSite{``0})">
      <summary>创建用于缓存查找的动态调用站点的实例。</summary>
      <returns>新的调用站点。</returns>
      <param name="site">动态调用站点的实例。</param>
      <typeparam name="T">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 的委托的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetCachedRules``1(System.Runtime.CompilerServices.RuleCache{``0})">
      <summary>在动态规则缓存中搜索适用于动态操作的规则。</summary>
      <returns>适用规则的集合。</returns>
      <param name="cache">缓存。</param>
      <typeparam name="T">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 的委托的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetMatch(System.Runtime.CompilerServices.CallSite)">
      <summary>检查已执行的规则是否匹配</summary>
      <returns>如果规则匹配，则为 true；否则为 false。</returns>
      <param name="site">动态调用站点的实例。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetRuleCache``1(System.Runtime.CompilerServices.CallSite{``0})">
      <summary>检索绑定规则缓存。</summary>
      <returns>缓存。</returns>
      <param name="site">动态调用站点的实例。</param>
      <typeparam name="T">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 的委托的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetRules``1(System.Runtime.CompilerServices.CallSite{``0})">
      <summary>从调用站点获取动态绑定规则。</summary>
      <returns>动态绑定规则的数组。</returns>
      <param name="site">动态调用站点的实例。</param>
      <typeparam name="T">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 的委托的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.MoveRule``1(System.Runtime.CompilerServices.RuleCache{``0},``0,System.Int32)">
      <summary>在缓存内移动绑定规则。</summary>
      <param name="cache">调用站点的规则缓存。</param>
      <param name="rule">调用站点规则的实例。</param>
      <param name="i">调用站点规则的索引。</param>
      <typeparam name="T">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 的委托的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.SetNotMatched(System.Runtime.CompilerServices.CallSite)">
      <summary>检查动态站点是否需要更新。</summary>
      <returns>如果规则不需要更新，则为 true；否则为 false。</returns>
      <param name="site">动态调用站点的实例。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.UpdateRules``1(System.Runtime.CompilerServices.CallSite{``0},System.Int32)">
      <summary>更新缓存中的规则。</summary>
      <param name="this">动态调用站点的实例。</param>
      <param name="matched">匹配的规则索引。</param>
      <typeparam name="T">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 的委托的类型。</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.Closure">
      <summary>表示动态生成方法的运行时状态。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.Closure.#ctor(System.Object[],System.Object[])">
      <summary>创建一个对象以存放动态生成的方法的状态。</summary>
      <param name="constants">方法使用的常量值。</param>
      <param name="locals">从父级上下文提升的局部变量。</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.Closure.Constants">
      <summary>表示不常用常量和由动态生成的方法引用的可在本地执行的表达式。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.Closure.Locals">
      <summary>表示从父级上下文提升的局部变量。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.DebugInfoGenerator">
      <summary>为表达式树中的 lambda 表达式生成调试信息。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.DebugInfoGenerator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.CreatePdbGenerator">
      <summary>创建程序数据库 (PDB) 符号生成器。</summary>
      <returns>PDB 符号生成器。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.MarkSequencePoint(System.Linq.Expressions.LambdaExpression,System.Int32,System.Linq.Expressions.DebugInfoExpression)">
      <summary>在 Microsoft 中间语言 (MSIL) 代码中标记序列点。</summary>
      <param name="method">生成的 lambda 表达式。</param>
      <param name="ilOffset">MSIL 代码中标记序列点的偏移量。</param>
      <param name="sequencePoint">对应于序列点的调试信息。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.DynamicAttribute">
      <summary>指示在成员上使用 <see cref="T:System.Object" /> 应被视为动态调度的类型。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor(System.Boolean[])">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> 类的新实例。</summary>
      <param name="transformFlags">指定在类型结构的前缀遍历中哪些 <see cref="T:System.Object" /> 匹配项应被视为动态调度的类型。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DynamicAttribute.TransformFlags">
      <summary>指定在类型结构的前缀遍历中哪些 <see cref="T:System.Object" /> 匹配项应被视为动态调度的类型。</summary>
      <returns>应被视为动态调度的类型的 <see cref="T:System.Object" /> 匹配项的列表。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExecutionScope">
      <summary>表示动态生成方法的运行时状态。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateDelegate(System.Int32,System.Object[])">
      <summary>创建一个可用于执行动态生成方法的委托。</summary>
      <returns>一个可执行动态生成的方法的 <see cref="T:System.Delegate" />。</returns>
      <param name="indexLambda">对象的索引，该对象存储有关动态方法的关联 lambda 表达式的信息。</param>
      <param name="locals">包含从父级上下文提升的局部变量的数组。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateHoistedLocals">
      <summary>创建用于存储提升的局部变量的数组。</summary>
      <returns>用于存储提升的局部变量的数组。</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Globals">
      <summary>表示不常用常量和由动态生成的方法引用的可在本地执行的表达式。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.IsolateExpression(System.Linq.Expressions.Expression,System.Object[])">
      <summary>通过将参数替换为其当前值，来释放外部参数引用的指定的表达式目录树。</summary>
      <returns>不包含外部参数引用的表达式目录树。</returns>
      <param name="expression">要释放的外部参数引用的表达式目录树。</param>
      <param name="locals">包含提升的局部变量的数组。</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Locals">
      <summary>表示从父级上下文提升的局部变量。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Parent">
      <summary>表示调用委托的执行范围。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IRuntimeVariables">
      <summary>表示运行时变量的值。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Count">
      <summary>获取运行时变量的计数。</summary>
      <returns>运行时变量的数目。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Item(System.Int32)">
      <summary>获取指定索引处运行时变量的值。</summary>
      <returns>运行时变量的值。</returns>
      <param name="index">要返回其值的运行时变量的从零开始的索引。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.IStrongBox">
      <summary>定义一个用于访问某个对象引用的值的属性。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.CompilerServices.IStrongBox.Value">
      <summary>获取或设置某个对象引用的值。</summary>
      <returns>该对象引用的值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1">
      <summary>只读集合的生成器。</summary>
      <typeparam name="T">集合元素的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor">
      <summary>构造 ReadOnlyCollectionBuilder。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>构造 ReadOnlyCollectionBuilder，复制给定集合的内容。</summary>
      <param name="collection">从其中复制元素的集合。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Int32)">
      <summary>构造具有给定初始容量的 ReadOnlyCollectionBuilder。 内容为空，但是在需要任何重新分配之前生成器将为给定数量的元素保留空间。</summary>
      <param name="capacity">初始容量。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Add(`0)">
      <summary>将某项添加到 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中。</summary>
      <param name="item">要添加到 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 的对象。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Capacity">
      <summary>获取和设置此 ReadOnlyCollectionBuilder 的容量。</summary>
      <returns>此 ReadOnlyCollectionBuilder. 的容量</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Clear">
      <summary>从 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中移除所有项。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Contains(`0)">
      <summary>确定 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 是否包含特定值</summary>
      <returns>如果在 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中找到该项，为 true；否则为 false。</returns>
      <param name="item">要在 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中查找的对象。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.CopyTo(`0[],System.Int32)">
      <summary>从特定的 <see cref="T:System.Array" /> 索引开始，将 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 的元素复制到 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">作为从 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 复制的元素的目标位置的一维 <see cref="T:System.Array" />。</param>
      <param name="arrayIndex">数组中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Count">
      <summary>返回 ReadOnlyCollectionBuilder 中元素的数目。</summary>
      <returns>ReadOnlyCollectionBuilder 中元素的数目。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.IndexOf(`0)">
      <summary>返回在生成器中给定值的第一个匹配项的索引。</summary>
      <returns>某个项的第一个匹配项的索引。</returns>
      <param name="item">要搜索的项。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Insert(System.Int32,`0)">
      <summary>将一个项插入指定索引处的 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />。</summary>
      <param name="index">从零开始的索引，应在该位置插入项。</param>
      <param name="item">要插入 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 的对象。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Item(System.Int32)">
      <summary>获取或设置位于指定索引处的元素。</summary>
      <returns>位于指定索引处的元素。</returns>
      <param name="index">要获得或设置的元素从零开始的索引。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Remove(`0)">
      <summary>从 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中移除特定对象的第一个匹配项。</summary>
      <returns>如果从 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中成功移除了项，则为 true；否则为 false。 如果在原始 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中找不到项，此方法也会返回 false。</returns>
      <param name="item">要从 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中移除的对象。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.RemoveAt(System.Int32)">
      <summary>移除指定索引处的 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse">
      <summary>将整个 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中元素的顺序反转。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse(System.Int32,System.Int32)">
      <summary>将指定范围中元素的顺序反转。</summary>
      <param name="index">要反转的范围的从零开始的起始索引。</param>
      <param name="count">要反转的范围内的元素数。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从指定的数组索引开始，将 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的元素复制到一个数组中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.Generic.ICollection`1" /> 复制的元素的目标数组的一维数组。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Add(System.Object)">
      <summary>将某项添加到 <see cref="T:System.Collections.IList" /> 中。</summary>
      <returns>新元素的插入位置。</returns>
      <param name="value">要添加到 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <returns>如果在 <see cref="T:System.Collections.IList" /> 中找到 <paramref name="item" />，则为 true；否则为 false。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中查找的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 中特定项的索引。</summary>
      <returns>如果在列表中找到，则为 <paramref name="item" /> 的索引；否则为 -1。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中定位的对象。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将一个项插入指定索引处的 <see cref="T:System.Collections.IList" />。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="item" />。</param>
      <param name="value">要插入 <see cref="T:System.Collections.IList" /> 的对象。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 具有固定大小，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置位于指定索引处的元素。</summary>
      <returns>位于指定索引处的元素。</returns>
      <param name="index">要获得或设置的元素从零开始的索引。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从 <see cref="T:System.Collections.IList" /> 中移除的对象。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToArray">
      <summary>将 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 的元素复制到新数组中。</summary>
      <returns>一个数组，它包含 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 的元素的副本。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToReadOnlyCollection">
      <summary>创建一个包含 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 的所有元素的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，避免将元素复制到新数组（如果可能）。 在创建 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 后重置 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的新实例。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuleCache`1">
      <summary>表示运行时绑定规则的缓存。</summary>
      <typeparam name="T">委托类型。</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeOps">
      <summary>包含从动态生成的方法调用的帮助器方法。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.CreateRuntimeVariables">
      <summary>创建一个可用于在运行时修改封闭式变量的接口。</summary>
      <returns>用于访问变量的接口。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.CreateRuntimeVariables(System.Object[],System.Int64[])">
      <summary>创建一个可用于在运行时修改封闭式变量的接口。</summary>
      <returns>用于访问变量的接口。</returns>
      <param name="data">结束数组。</param>
      <param name="indexes">在其中找到变量的结束数组中的索引数组。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoCheckVersion(System.Dynamic.ExpandoObject,System.Object)">
      <summary>检查 Expando 对象的版本。</summary>
      <returns>如果版本相等，则返回 true，否则返回 false。</returns>
      <param name="expando">Expando 对象。</param>
      <param name="version">要检查的版本。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoPromoteClass(System.Dynamic.ExpandoObject,System.Object,System.Object)">
      <summary>将 Expando 对象从一个类提升为新类。</summary>
      <param name="expando">Expando 对象。</param>
      <param name="oldClass">Expando 对象的旧类。</param>
      <param name="newClass">Expando 对象的新类。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoTryDeleteValue(System.Dynamic.ExpandoObject,System.Object,System.Int32,System.String,System.Boolean)">
      <summary>删除 expando 对象中某项的值。</summary>
      <returns>如果成功移除了项，则为 true；否则为 false。</returns>
      <param name="expando">Expando 对象。</param>
      <param name="indexClass">Expando 对象的类。</param>
      <param name="index">成员的索引。</param>
      <param name="name">成员的名称。</param>
      <param name="ignoreCase">如果在匹配名称时应忽略大小写，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoTryGetValue(System.Dynamic.ExpandoObject,System.Object,System.Int32,System.String,System.Boolean,System.Object@)">
      <summary>获取 expando 对象中某项的值。</summary>
      <returns>如果 expando 对象中存在该成员，则为 True；否则为 false。</returns>
      <param name="expando">Expando 对象。</param>
      <param name="indexClass">Expando 对象的类。</param>
      <param name="index">成员的索引。</param>
      <param name="name">成员的名称。</param>
      <param name="ignoreCase">如果在匹配名称时应忽略大小写，则为 true；否则为 false。</param>
      <param name="value">包含成员值的输出参数。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoTrySetValue(System.Dynamic.ExpandoObject,System.Object,System.Int32,System.Object,System.String,System.Boolean)">
      <summary>设置 expando 对象中某项的值。</summary>
      <returns>返回已设置值的成员的索引。</returns>
      <param name="expando">Expando 对象。</param>
      <param name="indexClass">Expando 对象的类。</param>
      <param name="index">成员的索引。</param>
      <param name="value">成员的值。</param>
      <param name="name">成员的名称。</param>
      <param name="ignoreCase">如果在匹配名称时应忽略大小写，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.MergeRuntimeVariables(System.Runtime.CompilerServices.IRuntimeVariables,System.Runtime.CompilerServices.IRuntimeVariables,System.Int32[])">
      <summary>组合两个运行时变量列表，并返回一个新列表。</summary>
      <returns>已合并的运行时变量。</returns>
      <param name="first">第一个列表。</param>
      <param name="second">第二个列表。</param>
      <param name="indexes">指示从哪个列表中获取变量的索引数组。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.Quote(System.Linq.Expressions.Expression,System.Object,System.Object[])">
      <summary>为提供的表达式树加引号。</summary>
      <returns>已加引号的表达式。</returns>
      <param name="expression">要加引号的表达式。</param>
      <param name="hoistedLocals">由编译器提供的已提升本地状态。</param>
      <param name="locals">实际的已提升本地值。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.StrongBox`1">
      <summary>保存对某个值的引用。</summary>
      <typeparam name="T">
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 引用的值的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor">
      <summary>初始化一个在引用调用中使用时可以接收值的新 StrongBox。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor(`0)">
      <summary>使用提供的值初始化 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 类的一个新实例。</summary>
      <param name="value">
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 将引用的值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.CompilerServices.StrongBox`1.System#Runtime#CompilerServices#IStrongBox#Value">
      <summary>获取或设置 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 引用的值。</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 引用的值。</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.StrongBox`1.Value">
      <summary>表示 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 引用的值。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAwareEventInfo">
      <summary>允许对事件处理程序进行后期绑定注册。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)">
      <summary>使用指定类型和该类型的事件名称来初始化 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 类的新实例。</summary>
      <param name="type">对象的类型。</param>
      <param name="eventName">有关 <paramref name="type" /> 的事件的名称。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary>将事件处理程序附加到 COM 对象。</summary>
      <param name="target">事件委托应绑定到的目标对象。</param>
      <param name="handler">事件委托。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes">
      <summary>获取此事件的属性。</summary>
      <returns>此事件的只读特性。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType">
      <summary>获取声明该成员的类。</summary>
      <returns>声明该成员的类的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
      <summary>获取用于将事件处理程序委托添加到事件源的方法。</summary>
      <returns>用于将事件处理程序委托添加到事件源的方法。</returns>
      <param name="nonPublic">true 表示返回非公共方法；否则为 false。</param>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> 为 true，表示用于添加事件处理程序委托的方法为非公共的，并且调用方无权对非公共方法进行反射。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
      <summary>在派生类中重写时，获取一个包含应用于此成员的所有自定义特性的数组。</summary>
      <returns>一个包含所有自定义特性的数组，如果未定义任何特性，则为一个包含零个元素的数组。</returns>
      <param name="inherit">搜索此成员的继承链以查找这些属性，则为 true；否则为 false。</param>
      <exception cref="T:System.InvalidOperationException">该成员属于加载到仅反射上下文的类型。 请参见如何：将程序集加载到仅反射上下文中。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义特性类型。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>在派生类中重写时，获取一个数组，该数组包含应用于此成员的指定类型的所有自定义特性。</summary>
      <returns>一个包含指定类型的所有自定义特性的数组，如果未定义任何特性，则为一个包含零个元素的数组。</returns>
      <param name="attributeType">要搜索的特性类型。 只能返回可分配给此类型的特性。</param>
      <param name="inherit">搜索此成员的继承链以查找这些属性，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">该成员属于加载到仅反射上下文的类型。 请参见如何：将程序集加载到仅反射上下文中</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义特性类型。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
      <summary>在派生类中重写时，返回引发该事件时调用的方法。</summary>
      <returns>引发该事件时调用的对象。</returns>
      <param name="nonPublic">true 表示返回非公共方法；否则为 false。</param>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> 为 true，表示用于添加事件处理程序委托的方法为非公共的，并且调用方无权对非公共方法进行反射。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
      <summary>在派生类中重写时，检索用于移除该事件的方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象。</summary>
      <returns>用于从事件源中移除事件处理程序委托的方法。</returns>
      <param name="nonPublic">true 表示返回非公共方法；否则为 false。</param>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> 为 true，表示用于添加事件处理程序委托的方法为非公共的，并且调用方无权对非公共方法进行反射。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
      <summary>指示是否对此成员应用指定特性的一个或多个实例。</summary>
      <returns>如果已对此成员应用指定特性，则为 true；否则为 false。</returns>
      <param name="attributeType">要搜索的特性类型。</param>
      <param name="inherit">搜索此成员的继承链以查找这些属性，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Name">
      <summary>获取当前成员的名称。</summary>
      <returns>此成员的名称。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.ReflectedType">
      <summary>获取用于初始化此实例的类对象。</summary>
      <returns>用于初始化当前对象的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>从 COM 对象分离事件处理程序。</summary>
      <param name="target">事件委托所绑定到的目标对象。</param>
      <param name="handler">事件委托。</param>
      <exception cref="T:System.InvalidOperationException">该事件没有公共的 remove 访问器。</exception>
      <exception cref="T:System.ArgumentException">传入的处理程序无法使用。</exception>
      <exception cref="T:System.Reflection.TargetException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获 <see cref="T:System.Exception" />。 <paramref name="target" /> 参数为 null 并且该事件不是静态的。 - 或 - 目标上没有声明 <see cref="T:System.Reflection.EventInfo" />。</exception>
      <exception cref="T:System.MethodAccessException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.MemberAccessException" />。 调用方无权访问该成员。</exception>
    </member>
    <member name="T:System.Security.ManifestKinds">
      <summary>表示签名信息适用的清单类型。</summary>
    </member>
    <member name="F:System.Security.ManifestKinds.Application">
      <summary>该清单适用于应用程序。</summary>
    </member>
    <member name="F:System.Security.ManifestKinds.ApplicationAndDeployment">
      <summary>该清单适用于部署和应用程序。 该清单是验证签名的默认值。</summary>
    </member>
    <member name="F:System.Security.ManifestKinds.Deployment">
      <summary>该清单仅适用于部署。</summary>
    </member>
    <member name="F:System.Security.ManifestKinds.None">
      <summary>该清单不属于任何特定类型。</summary>
    </member>
    <member name="T:System.Security.Cryptography.AesCryptoServiceProvider">
      <summary>使用高级加密标准 (AES) 算法的加密应用程序编程接口 (CAPI) 实现来执行对称加密和解密。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.AesCryptoServiceProvider" /> 类的新实例。</summary>
      <exception cref="T:System.PlatformNotSupportedException">不存在当前平台支持的密钥大小。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateDecryptor">
      <summary>使用当前的密钥和初始化向量 (IV) 创建对称 AES 解密器对象。</summary>
      <returns>对称 AES 解密器对象。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">当前密钥无效或缺失。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>使用指定的密钥和初始化向量 (IV) 创建对称 AES 解密器对象。</summary>
      <returns>对称 AES 解密器对象。</returns>
      <param name="key">用于对称算法的密钥。</param>
      <param name="iv">用于对称算法的初始化向量。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或 <paramref name="iv" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 无效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateEncryptor">
      <summary>使用当前的密钥和初始化向量 (IV) 创建对称 AES 加密器对象。</summary>
      <returns>对称 AES 加密器对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>使用指定的密钥和初始化向量 (IV) 创建对称加密器对象。</summary>
      <returns>对称 AES 加密器对象。</returns>
      <param name="key">用于对称算法的密钥。</param>
      <param name="iv">用于对称算法的初始化向量。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或 <paramref name="iv" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 无效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.GenerateIV">
      <summary>生成用于该算法的随机初始化向量 (IV)。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">未能生成初始化向量 (IV)。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.GenerateKey">
      <summary>生成用于该算法的随机密钥。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">未能生成密钥。</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.Key">
      <summary>获取或设置用于加密和解密的对称密钥。</summary>
      <returns>用于加密和解密的对称密钥。</returns>
      <exception cref="T:System.ArgumentNullException">密钥值为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密钥大小无效。</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.KeySize">
      <summary>获取或设置密钥的大小（以位为单位）。</summary>
      <returns>密钥的大小（以位为单位）。</returns>
    </member>
    <member name="T:System.Security.Cryptography.AesManaged">
      <summary>提供高级加密标准 (AES) 对称算法的托管实现。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.AesManaged" /> 类的新实例。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">已启用 FIPS 的 Windows 安全策略设置。</exception>
      <exception cref="T:System.InvalidOperationException">此实现不是 Windows 平台 FIPS 验证的加密算法的一部分。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor">
      <summary>使用当前的密钥和初始化向量 (IV) 创建对称解密器对象。</summary>
      <returns>对称解密器对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>使用指定的密钥和初始化向量 (IV) 创建对称解密器对象。</summary>
      <returns>对称解密器对象。</returns>
      <param name="key">用于对称算法的密钥。</param>
      <param name="iv">用于对称算法的初始化向量。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或 <paramref name="iv" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 无效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor">
      <summary>使用当前的密钥和初始化向量 (IV) 创建对称加密器对象。</summary>
      <returns>对称加密器对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>使用指定的密钥和初始化向量 (IV) 创建对称加密器对象。</summary>
      <returns>对称加密器对象。</returns>
      <param name="key">用于对称算法的密钥。</param>
      <param name="iv">用于对称算法的初始化向量。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或 <paramref name="iv" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 无效。</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.FeedbackSize">
      <summary>获取或设置用作反馈的位数。</summary>
      <returns>反馈大小（以位为单位）。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateIV">
      <summary>生成用于对称算法的随机初始化向量 (IV)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateKey">
      <summary>生成用于对称算法的随机密钥。</summary>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.IV">
      <summary>获取或设置用于对称算法的初始化向量 (IV)。</summary>
      <returns>用于对称算法的初始化向量。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Key">
      <summary>获取或设置用于对称算法的密钥。</summary>
      <returns>用于对称算法的密钥。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.KeySize">
      <summary>获取或设置用于对称算法的密钥大小（以位为单位）。</summary>
      <returns>用于对称算法的密钥大小（以位为单位）。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Mode">
      <summary>获取或设置对称算法的运算模式。</summary>
      <returns>枚举值之一，指定用于加密的分组加密模式。 默认值为 <see cref="F:System.Security.Cryptography.CipherMode.CBC" />。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="P:System.Security.Cryptography.AesManaged.Mode" /> 设置为 <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> 或 <see cref="F:System.Security.Cryptography.CipherMode.OFB" />。</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Padding">
      <summary>获取或设置对称算法中使用的填充模式。</summary>
      <returns>枚举值之一，指定要应用的填充类型。 默认值为 <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngAlgorithm">
      <summary>封装加密算法的名称。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 类的新实例。</summary>
      <param name="algorithm">要初始化的算法的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="algorithm" /> 参数的长度为 0（零）。</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Algorithm">
      <summary>获取当前 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象指定的算法名称。</summary>
      <returns>嵌入的算法名称。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP256">
      <summary>获取一个 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象，它指定使用 P-256 曲线的椭圆曲线 Diffie-Hellman (ECDH) 密钥交换算法。</summary>
      <returns>一个指定使用 P-256 曲线的 ECDH 算法的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP384">
      <summary>获取一个 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象，它指定使用 P-384 曲线的椭圆曲线 Diffie-Hellman (ECDH) 密钥交换算法。</summary>
      <returns>一个指定使用 P-384 曲线的 ECDH 算法的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP521">
      <summary>获取一个 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象，它指定使用 P-521 曲线的椭圆曲线 Diffie-Hellman (ECDH) 密钥交换算法。</summary>
      <returns>一个指定使用 P-521 曲线的 ECDH 算法的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP256">
      <summary>获取一个 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象，它指定使用 P-256 曲线的椭圆曲线数字签名算法 (ECDSA)。</summary>
      <returns>一个指定使用 P-256 曲线的 ECDSA 算法的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP384">
      <summary>获取一个 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象，它指定使用 P-384 曲线的椭圆曲线数字签名算法 (ECDSA)。</summary>
      <returns>一个指定使用 P-384 曲线的 ECDSA 算法的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP521">
      <summary>获取一个新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象，它指定使用 P-521 曲线的椭圆曲线数字签名算法 (ECDSA)。</summary>
      <returns>一个指定使用 P-521 曲线的 ECDSA 算法的对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.Equals(System.Object)">
      <summary>将指定的对象与当前 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象进行比较。</summary>
      <returns>如果 <paramref name="obj" /> 参数是一个指定与当前对象相同算法的 <see cref="T:System.Security.Cryptography.CngAlgorithm" />，则为 true；否则为 false。</returns>
      <param name="obj">一个要与当前 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象进行比较的对象。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.Equals(System.Security.Cryptography.CngAlgorithm)">
      <summary>将指定的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象与当前 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象进行比较。</summary>
      <returns>如果 <paramref name="other" /> 参数指定的算法与当前对象的算法相同，则为 true；否则为 false。</returns>
      <param name="other">一个要与当前 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象进行比较的对象。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.GetHashCode">
      <summary>为当前 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象中嵌入的算法名称生成一个哈希值。</summary>
      <returns>嵌入的算法名称的哈希值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.MD5">
      <summary>获取一个新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象，它指定消息摘要 5 (MD5) 哈希算法。</summary>
      <returns>一个指定 MD5 算法的对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.op_Equality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)">
      <summary>确定两个 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象是否指定了相同的算法名称。</summary>
      <returns>如果两个对象指定了相同的算法名称，则为 true；否则为 false。</returns>
      <param name="left">一个指定算法名称的对象。</param>
      <param name="right">要与 <paramref name="left" /> 参数标识的对象进行比较的另一个对象。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.op_Inequality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)">
      <summary>确定两个 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象是否未指定相同的算法。</summary>
      <returns>如果两个对象未指定相同的算法，则为 true；否则为 false。</returns>
      <param name="left">一个指定算法名称的对象。</param>
      <param name="right">要与 <paramref name="left" /> 参数标识的对象进行比较的另一个对象。</param>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha1">
      <summary>获取一个新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象，它指定安全哈希算法 1 (SHA-1) 算法。</summary>
      <returns>一个指定 SHA-1 算法的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha256">
      <summary>获取一个新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象，它指定安全哈希算法 256 (SHA-256) 算法。</summary>
      <returns>一个指定 SHA-256 算法的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha384">
      <summary>获取一个新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象，它指定安全哈希算法 384 (SHA-384) 算法。</summary>
      <returns>一个指定 SHA-384 算法的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha512">
      <summary>获取一个新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象，它指定安全哈希算法 512 (SHA-512) 算法。</summary>
      <returns>一个指定 SHA-512 算法的对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.ToString">
      <summary>获取当前 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象指定的算法的名称。</summary>
      <returns>嵌入的算法名称。</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngAlgorithmGroup">
      <summary>封装加密算法组的名称。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 类的新实例。</summary>
      <param name="algorithmGroup">要初始化的算法组的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithmGroup" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="algorithmGroup" /> 参数的长度为 0（零）。</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.AlgorithmGroup">
      <summary>获取当前 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象指定的算法组的名称。</summary>
      <returns>嵌入的算法组名称。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.DiffieHellman">
      <summary>获取一个指定 Diffie-Hellman 算法系列的 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 对象。</summary>
      <returns>一个指定 Diffie-Hellman 算法系列的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.Dsa">
      <summary>获取一个指定数字签名算法 (DSA) 算法系列的 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 对象。</summary>
      <returns>一个指定 DSA 算法系列的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman">
      <summary>获取一个指定椭圆曲线 Diffie-Hellman (ECDH) 算法系列的 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 对象。</summary>
      <returns>一个指定 ECDH 算法系列的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.ECDsa">
      <summary>获取一个指定椭圆曲线数字签名算法 (ECDSA) 算法系列的 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 对象。</summary>
      <returns>一个指定 ECDSA 算法系列的对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Object)">
      <summary>将指定的对象与当前的 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 对象进行比较。</summary>
      <returns>如果 <paramref name="obj" /> 参数是一个 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />，而且它指定的算法组与当前对象的算法组相同，则为 true；否则为 false。</returns>
      <param name="obj">要与当前的 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 对象进行比较的对象。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Security.Cryptography.CngAlgorithmGroup)">
      <summary>将指定的 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 对象与当前的 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 对象进行比较。</summary>
      <returns>如果 <paramref name="other" /> 参数指定的算法组与当前对象的算法组相同，则为 true；否则为 false。</returns>
      <param name="other">要与当前的 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 对象进行比较的对象。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.GetHashCode">
      <summary>为当前 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 对象中嵌入的算法组名称生成一个哈希值。</summary>
      <returns>嵌入的算法组名称的哈希值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.op_Equality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)">
      <summary>确定两个 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 对象指定的是否是同一算法组。</summary>
      <returns>如果两个对象指定的是同一算法组，则为 true；否则为 false。</returns>
      <param name="left">一个指定某一算法组的对象。</param>
      <param name="right">要与 <paramref name="left" /> 参数标识的对象进行比较的另一个对象。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.op_Inequality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)">
      <summary>确定两个 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 对象是否未指定同一算法组。</summary>
      <returns>如果两个对象指定的不是同一算法组，则为 true；否则为 false。</returns>
      <param name="left">一个指定某一算法组的对象。</param>
      <param name="right">要与 <paramref name="left" /> 参数标识的对象进行比较的另一个对象。</param>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.Rsa">
      <summary>获取一个指定 Rivest-Shamir-Adleman (RSA) 算法系列的 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 对象。</summary>
      <returns>一个指定 RSA 算法系列的对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.ToString">
      <summary>获取当前 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象指定的算法组的名称。</summary>
      <returns>嵌入的算法组名称。</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngExportPolicies">
      <summary>指定密钥的密钥导出策略。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowArchiving">
      <summary>私钥可以导出一次以用于存档。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowExport">
      <summary>私钥可以导出多次。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowPlaintextArchiving">
      <summary>私钥可以纯文本形式导出一次。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowPlaintextExport">
      <summary>私钥可以纯文本形式导出多次。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.None">
      <summary>未建立导出策略。 可以导出密钥，而无任何限制。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKey">
      <summary>定义与下一代加密技术 (CNG) 对象一起使用的密钥的核心功能。</summary>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.Algorithm">
      <summary>获取密钥所使用的算法。</summary>
      <returns>一个指定加密算法名称的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.AlgorithmGroup">
      <summary>获取密钥所使用的算法组。</summary>
      <returns>一个指定加密算法组名称的对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)">
      <summary>创建一个可以与指定算法一起使用的 <see cref="T:System.Security.Cryptography.CngKey" /> 对象。</summary>
      <returns>一个暂时的密钥。</returns>
      <param name="algorithm">将与密钥一起使用的算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系统不支持下一代加密技术 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)">
      <summary>创建一个已命名的 <see cref="T:System.Security.Cryptography.CngKey" /> 对象，该对象提供指定的算法。</summary>
      <returns>提供指定算法的持久或暂时的密钥。</returns>
      <param name="algorithm">将与密钥一起使用的算法。</param>
      <param name="keyName">密钥名称。 如果未提供名称，则密钥将不是持久的。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系统不支持下一代加密技术 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)">
      <summary>使用所提供的密钥创建参数，创建一个已命名的 <see cref="T:System.Security.Cryptography.CngKey" /> 对象，该对象提供指定的算法。</summary>
      <returns>提供指定算法的持久或暂时的密钥。</returns>
      <param name="algorithm">将与密钥一起使用的算法。</param>
      <param name="keyName">密钥名称。 如果未提供名称，则密钥将不是持久的。</param>
      <param name="creationParameters">一个指定方法的高级参数（包括 <see cref="T:System.Security.Cryptography.CngProvider" />）的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系统不支持下一代加密技术 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Delete">
      <summary>移除与对象相关联的密钥。</summary>
      <exception cref="T:System.ObjectDisposedException">尝试访问已删除的密钥。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Dispose">
      <summary>释放由 <see cref="T:System.Security.Cryptography.CngKey" /> 类的当前实例占用的所有资源。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Exists(System.String)">
      <summary>检查默认的密钥存储提供程序 (KSP) 中是否存在已命名的密钥。</summary>
      <returns>如果默认的 KSP 中存在该已命名的密钥，则为 true；否则为 false。</returns>
      <param name="keyName">密钥名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系统不支持下一代加密技术 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)">
      <summary>检查指定的密钥存储提供程序 (KSP) 中是否存在已命名的密钥。</summary>
      <returns>如果指定的提供程序中存在该已命名的密钥，则为 true；否则为 false。</returns>
      <param name="keyName">密钥名称。</param>
      <param name="provider">用于检查密钥的 KSP。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 或 <paramref name="provider" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系统不支持下一代加密技术 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
      <summary>根据指定的选项，检查指定的密钥存储提供程序 (KSP) 中是否存在已命名的密钥。</summary>
      <returns>如果指定的提供程序中存在该已命名的密钥，则为 true；否则为 false。</returns>
      <param name="keyName">密钥名称。</param>
      <param name="provider">用于搜索密钥的 KSP。</param>
      <param name="options">指定密钥打开选项的枚举值的按位组合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 或 <paramref name="provider" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系统不支持下一代加密技术 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>将密钥材料以指定的格式导出到 BLOB 中。</summary>
      <returns>一个包含指定格式的密钥材料的 BLOB。</returns>
      <param name="format">一个指定密钥 BLOB 格式的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。 通常情况下，<see cref="P:System.Security.Cryptography.CngKey.ExportPolicy" /> 不允许导出密钥。</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.ExportPolicy">
      <summary>获取密钥所使用的导出策略。</summary>
      <returns>一个指定密钥的导出策略的对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)">
      <summary>在给定名称和一组属性选项的情况下，获取一个属性。</summary>
      <returns>一个包含指定属性的原始值的对象。</returns>
      <param name="name">所需属性的名称。</param>
      <param name="options">指定已命名属性选项的枚举值的按位组合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.Handle">
      <summary>获取一个表示本机密钥 (NCRYPT_KEY_HANDLE) 的安全句柄。</summary>
      <returns>一个表示密钥的安全句柄。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)">
      <summary>检查密钥上是否存在指定的属性。</summary>
      <returns>如果找到指定的属性，则为 true；否则为 false。</returns>
      <param name="name">要检查的属性名称。</param>
      <param name="options">指定已命名属性选项的枚举值的按位组合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>通过将指定的密钥材料导入到默认的密钥存储提供程序 (KSP) 中和使用指定的格式创建一个新密钥。</summary>
      <returns>新密钥。</returns>
      <param name="keyBlob">一个包含密钥信息的数组。</param>
      <param name="format">一个指定 <paramref name="keyBlob" /> 数组格式的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyBlob" /> 或 <paramref name="format" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系统不支持下一代加密技术 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)">
      <summary>通过将指定的密钥材料导入到指定的密钥存储提供程序 (KSP) 中和使用指定的格式创建一个新密钥。</summary>
      <returns>新密钥。</returns>
      <param name="keyBlob">一个包含密钥信息的数组。</param>
      <param name="format">一个指定 <paramref name="keyBlob" /> 数组格式的对象。</param>
      <param name="provider">KSP。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyBlob" />、<paramref name="format" /> 或 <paramref name="provider" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系统不支持下一代加密技术 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.IsEphemeral">
      <summary>获取密钥的持久性状态。</summary>
      <returns>如果密钥是暂时的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.IsMachineKey">
      <summary>获取密钥的范围（计算机或用户）。</summary>
      <returns>如果密钥在计算机范围的基础上可用，则为 true；如果密钥只用于当前用户，则为 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.KeyName">
      <summary>获取密钥的名称。</summary>
      <returns>密钥的名称。 如果密钥是暂时的，则值为 null。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.KeySize">
      <summary>获取密钥的大小（以位为单位）。</summary>
      <returns>密钥的大小（以位为单位）。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.KeyUsage">
      <summary>获取密钥指定的加密操作。</summary>
      <returns>指定允许的密钥用法的枚举值的按位组合。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)">
      <summary>使用现有密钥的句柄创建 <see cref="T:System.Security.Cryptography.CngKey" /> 对象的一个实例。</summary>
      <returns>现有密钥。</returns>
      <param name="keyHandle">现有密钥的句柄。</param>
      <param name="keyHandleOpenOptions">指示 <paramref name="keyHandle" /> 是否表示暂时密钥或已命名密钥的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyHandle" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyHandle" /> 无效或格式不正确或已经被关闭。 如果密钥是由公共语言运行时 (CLR) 创建的暂时密钥，但未指定 <see cref="F:System.Security.Cryptography.CngKeyHandleOpenOptions.EphemeralKey" /> 值，也会引发此异常。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系统不支持下一代加密技术 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(System.String)">
      <summary>创建表示现有已命名密钥的 <see cref="T:System.Security.Cryptography.CngKey" /> 对象的一个实例。</summary>
      <returns>现有密钥。</returns>
      <param name="keyName">密钥的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系统不支持下一代加密技术 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)">
      <summary>使用指定的密钥存储提供程序 (KSP)，创建表示现有已命名密钥的 <see cref="T:System.Security.Cryptography.CngKey" /> 对象的一个实例。</summary>
      <returns>现有密钥。</returns>
      <param name="keyName">密钥的名称。</param>
      <param name="provider">包含密钥的 KSP。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 或 <paramref name="provider" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系统不支持下一代加密技术 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
      <summary>使用指定的密钥存储提供程序 (KSP) 和密钥打开选项，创建表示现有已命名密钥的 <see cref="T:System.Security.Cryptography.CngKey" /> 对象的一个实例。</summary>
      <returns>现有密钥。</returns>
      <param name="keyName">密钥的名称。</param>
      <param name="provider">包含密钥的 KSP。</param>
      <param name="openOptions">指定密钥打开选项的枚举值的按位组合，例如密钥从哪里打开（计算机或用户存储）和是否取消显示 UI 提示。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 或 <paramref name="provider" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系统不支持下一代加密技术 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.ParentWindowHandle">
      <summary>获取或设置窗口句柄 (HWND)，该句柄应该用于由访问密钥而产生的用户界面 (UI) 提示。</summary>
      <returns>密钥的父窗口句柄。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.Provider">
      <summary>获取托管密钥的密钥存储提供程序 (KSP)。</summary>
      <returns>托管密钥的 KSP。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.ProviderHandle">
      <summary>获取密钥存储提供程序 (KSP) 的一个本机句柄 (NCRYPT_PROV_HANDLE)。</summary>
      <returns>KSP 的一个句柄。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)">
      <summary>设置密钥的已命名属性。</summary>
      <param name="property">要设置的密钥属性。</param>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.UIPolicy">
      <summary>获取控制访问密钥时用户界面 (UI) 的参数。</summary>
      <returns>一个包含用于显示 UI 的配置参数的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.UniqueName">
      <summary>获取密钥的唯一名称。</summary>
      <returns>密钥的替换名称。 如果密钥是暂时的，则值为 null。</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyBlobFormat">
      <summary>指定与 Microsoft 下一代加密技术 (CNG) 对象一起使用的密钥 BLOB 格式。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.#ctor(System.String)">
      <summary>使用指定的格式初始化 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 类的一个新实例。</summary>
      <param name="format">要初始化的密钥 BLOB 格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="format" /> 参数的长度为 0（零）。</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob">
      <summary>获取一个 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象，它指定椭圆曲线加密法 (ECC) 密钥的私钥 BLOB。</summary>
      <returns>一个指定 ECC 私钥 BLOB 的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.EccPublicBlob">
      <summary>获取一个 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象，它指定椭圆曲线加密法 (ECC) 密钥的公钥 BLOB。</summary>
      <returns>一个指定 ECC 公钥 BLOB 的对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Object)">
      <summary>将指定的对象与当前 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象进行比较。</summary>
      <returns>如果 <paramref name="obj" /> 参数为指定了与当前对象相同的密钥 BLOB 格式的 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象，则为 true；否则为 false。</returns>
      <param name="obj">一个要与当前 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象进行比较的对象。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>将指定的 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象与当前 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象进行比较。</summary>
      <returns>如果 <paramref name="other" /> 参数指定的密钥 BLOB 格式与当前对象的相同，则为 true；否则为 false。</returns>
      <param name="other">一个要与当前 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象进行比较的对象。</param>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.Format">
      <summary>获取当前 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象指定的密钥 BLOB 格式的名称。</summary>
      <returns>嵌入的密钥 BLOB 格式名称。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.GenericPrivateBlob">
      <summary>获取一个指定泛型私钥 BLOB 的 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象。</summary>
      <returns>一个指定泛型私钥 BLOB 的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.GenericPublicBlob">
      <summary>获取一个指定泛型公钥 BLOB 的 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象。</summary>
      <returns>一个指定泛型公钥 BLOB 的对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.GetHashCode">
      <summary>为当前 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象中的嵌入密钥 BLOB 格式生成一个哈希值。</summary>
      <returns>嵌入的密钥 BLOB 格式的哈希值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.op_Equality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>确定两个 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象是否指定了相同的密钥 BLOB 格式。</summary>
      <returns>如果两个对象指定了相同的密钥 BLOB 格式，则为 true；否则为 false。</returns>
      <param name="left">一个指定密钥 BLOB 格式的对象。</param>
      <param name="right">第二个对象，该对象将与由 <paramref name="left" /> 参数标识的对象进行比较。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.op_Inequality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>确定两个 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象是否未指定相同的密钥 BLOB 格式。</summary>
      <returns>如果两个对象未指定相同的密钥 BLOB 格式，则为 true；否则为 false。</returns>
      <param name="left">一个指定密钥 BLOB 格式的对象。</param>
      <param name="right">第二个对象，该对象将与由 <paramref name="left" /> 参数标识的对象进行比较。</param>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob">
      <summary>获取一个指定不透明传输密钥 BLOB 的 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象。</summary>
      <returns>一个指定不透明传输密钥 BLOB 的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob">
      <summary>获取一个 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象，它指定私钥信息语法标准 (PKCS #8) 密钥 BLOB。</summary>
      <returns>一个指定 PKCS #8 私钥 BLOB 的对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.ToString">
      <summary>获取当前 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象指定的密钥 BLOB 格式的名称。</summary>
      <returns>嵌入的密钥 BLOB 格式名称。</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyCreationOptions">
      <summary>指定用于创建密钥的选项。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyCreationOptions.MachineKey">
      <summary>已创建计算机范围的密钥。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyCreationOptions.None">
      <summary>未使用任何密钥创建选项。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyCreationOptions.OverwriteExistingKey">
      <summary>密钥创建期间，现有密钥被覆盖。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyCreationParameters">
      <summary>包含密钥创建的高级属性。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyCreationParameters.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.CngKeyCreationParameters" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.ExportPolicy">
      <summary>获取或设置密钥导出策略。</summary>
      <returns>指定密钥导出策略的对象。 默认值为 null，该值指示已设置密钥存储提供程序的默认导出策略。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.KeyCreationOptions">
      <summary>获取或设置密钥创建选项。</summary>
      <returns>一个对象，指定正在创建的密钥的选项。 默认值为 null，该值指示已设置密钥存储提供程序的默认密钥创建选项。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.KeyUsage">
      <summary>获取或设置应用于当前密钥的加密操作。</summary>
      <returns>指定密钥用法的一个或多个枚举值的按位组合。 默认值为 null，该值指示已设置密钥存储提供程序的默认密钥用法。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.Parameters">
      <summary>可使用密钥创建完成之前设置的其他属性创建 <see cref="T:System.Security.Cryptography.CngKey" /> 对象。</summary>
      <returns>一个集合对象，该集合对象包含密钥创建期间必须在 <see cref="T:System.Security.Cryptography.CngKey" /> 对象上设置的所有其他参数。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.ParentWindowHandle">
      <summary>获取或设置窗口句柄，该句柄应用作由下一代加密技术 (CNG) 类创建的对话框的父窗口的句柄。</summary>
      <returns>用作 CNG 对话框的父窗口的 HWND。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.Provider">
      <summary>获取或设置在其中创建密钥的密钥存储提供程序 (KSP)。</summary>
      <returns>一个对象，该对象指定在其中创建新密钥的 KSP。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Security.Cryptography.CngKeyCreationParameters.Provider" /> 属性设置为 null 值。</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.UIPolicy">
      <summary>获取或设置有关创建或访问密钥时显示的用户界面的信息。</summary>
      <returns>一个对象，该对象包含有关创建或访问密钥时由下一代加密技术 (CNG) 类显示的用户界面的详细信息。 一个 null 值，该值指示已设置密钥存储提供程序的默认用户界面策略。</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyHandleOpenOptions">
      <summary>指定用于打开密钥句柄的选项。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyHandleOpenOptions.EphemeralKey">
      <summary>正在打开的密钥句柄会指定一个暂时的密钥。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyHandleOpenOptions.None">
      <summary>正在打开的密钥句柄不会指定一个暂时的密钥。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyOpenOptions">
      <summary>指定用于打开密钥的选项。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.MachineKey">
      <summary>计算机范围的密钥已打开。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.None">
      <summary>未指定任何密钥打开选项。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.Silent">
      <summary>已取消显示 UI 提示。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.UserKey">
      <summary>如果未指定 <see cref="F:System.Security.Cryptography.CngKeyOpenOptions.MachineKey" /> 值，则打开用户密钥。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyUsages">
      <summary>指定要与下一代加密技术 (CNG) 密钥一起使用的加密操作。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.AllUsages">
      <summary>密钥可用于所有目的。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.Decryption">
      <summary>密钥可用于加密和解密。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.KeyAgreement">
      <summary>密钥可用于机密协议生成和密钥交换。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.None">
      <summary>没有给密钥分配任何用法值。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.Signing">
      <summary>密钥可用于签名和验证。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngProperty">
      <summary>封装下一代加密技术 (CNG) 密钥或提供程序的属性。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.#ctor(System.String,System.Byte[],System.Security.Cryptography.CngPropertyOptions)">
      <summary>初始化 <see cref="T:System.Security.Cryptography.CngProperty" /> 类的新实例。</summary>
      <param name="name">要初始化的属性名。</param>
      <param name="value">要初始化的属性值。</param>
      <param name="options">指定如何存储属性的枚举值的按位组合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.Equals(System.Object)">
      <summary>将指定的对象与当前 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象进行比较。</summary>
      <returns>如果 <paramref name="obj" /> 参数是一个指定与当前对象相同属性的 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象，则为 true；否则为 false。</returns>
      <param name="obj">要与当前 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象进行比较的对象。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.Equals(System.Security.Cryptography.CngProperty)">
      <summary>将指定的 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象与当前 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象进行比较。</summary>
      <returns>如果 <paramref name="other" /> 参数表示与当前对象相同的属性，则为 true；否则为 false。</returns>
      <param name="other">要与当前 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象进行比较的对象。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.GetHashCode">
      <summary>生成当前 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象的哈希值。</summary>
      <returns>当前 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象的哈希值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.GetValue">
      <summary>获取由当前 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象指定的属性值。</summary>
      <returns>一个数组，表示属性中存储的值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProperty.Name">
      <summary>获取由当前 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象指定的属性名。</summary>
      <returns>在当前 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象中设置的属性名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.op_Equality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)">
      <summary>确定两个 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象是否指定相同的属性名、值和选项。</summary>
      <returns>如果两个对象指定相同的属性，则为 true；否则为 false。</returns>
      <param name="left">一个对象，指定下一代加密技术 (CNG) 密钥或提供程序的属性。</param>
      <param name="right">要与 <paramref name="left" /> 参数标识的对象进行比较的另一个对象。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.op_Inequality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)">
      <summary>确定两个 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象是否未指定相同的属性名、值和选项。</summary>
      <returns>如果两个对象未指定相同的属性，则为 true；否则为 false。</returns>
      <param name="left">一个对象，指定下一代加密技术 (CNG) 密钥或提供程序的属性。</param>
      <param name="right">要与 <paramref name="left" /> 参数标识的对象进行比较的另一个对象。</param>
    </member>
    <member name="P:System.Security.Cryptography.CngProperty.Options">
      <summary>获取由当前 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象指定的属性选项。</summary>
      <returns>一个对象，该对象指定在当前 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象中设置的选项。</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngPropertyCollection">
      <summary>提供下一代加密技术 (CNG) 属性的强类型集合。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngPropertyCollection.#ctor">
      <summary>初始化新的 <see cref="T:System.Security.Cryptography.CngPropertyCollection" /> 对象。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngPropertyOptions">
      <summary>指定下一代加密技术 (CNG) 密钥属性选项。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngPropertyOptions.CustomProperty">
      <summary>属性不是由 CNG 指定的。 使用此选项可避免将来的名称与 CNG 属性冲突。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngPropertyOptions.None">
      <summary>引用的属性没有任何选项。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngPropertyOptions.Persist">
      <summary>应保持属性。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngProvider">
      <summary>封装与下一代加密技术 (CNG) 对象一起使用的密钥存储提供程序 (KSP) 的名称。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Security.Cryptography.CngProvider" /> 类的新实例。</summary>
      <param name="provider">要初始化的密钥存储提供程序 (KSP) 的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="provider" /> 参数的长度为 0（零）。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.Equals(System.Object)">
      <summary>将指定的对象与当前的 <see cref="T:System.Security.Cryptography.CngProvider" /> 对象进行比较。</summary>
      <returns>如果 <paramref name="obj" /> 参数是一个指定与当前对象相同的密钥存储提供程序 (KSP) 的 <see cref="T:System.Security.Cryptography.CngProvider" />，则为 true；否则为 false。</returns>
      <param name="obj">要与当前 <see cref="T:System.Security.Cryptography.CngProvider" /> 对象进行比较的对象。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.Equals(System.Security.Cryptography.CngProvider)">
      <summary>将指定的 <see cref="T:System.Security.Cryptography.CngProvider" /> 对象与当前 <see cref="T:System.Security.Cryptography.CngProvider" /> 对象进行比较。</summary>
      <returns>如果 <paramref name="other" /> 参数指定与当前对象相同的密钥存储提供程序 (KSP)，则为 true；否则为 false。</returns>
      <param name="other">要与当前 <see cref="T:System.Security.Cryptography.CngProvider" /> 对象进行比较的对象。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.GetHashCode">
      <summary>生成一个嵌入在当前 <see cref="T:System.Security.Cryptography.CngProvider" /> 对象中的密钥存储提供程序 (KSP) 名称的哈希值。</summary>
      <returns>嵌入的 KSP 名称的哈希值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider">
      <summary>获取 <see cref="T:System.Security.Cryptography.CngProvider" /> 对象，该对象指定 Microsoft 智能卡密钥存储提供程序。</summary>
      <returns>一个对象，指定 Microsoft 智能卡密钥存储提供程序。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider">
      <summary>获取 <see cref="T:System.Security.Cryptography.CngProvider" /> 对象，该对象指定 Microsoft 软件密钥存储提供程序。</summary>
      <returns>一个对象，指定 Microsoft 软件密钥存储提供程序。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.op_Equality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)">
      <summary>确定两个 <see cref="T:System.Security.Cryptography.CngProvider" /> 对象是否指定相同的密钥存储提供程序 (KSP)。</summary>
      <returns>如果两个对象表示相同的 KSP，则为 true；否则为 false。</returns>
      <param name="left">指定 KSP 的对象。</param>
      <param name="right">要与 <paramref name="left" /> 参数标识的对象进行比较的另一个对象。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.op_Inequality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)">
      <summary>确定两个 <see cref="T:System.Security.Cryptography.CngProvider" /> 对象是否不表示相同的密钥存储提供程序 (KSP)。</summary>
      <returns>如果两个对象不表示相同的 KSP，则为 true；否则为 false。</returns>
      <param name="left">指定 KSP 的对象。</param>
      <param name="right">要与 <paramref name="left" /> 参数标识的对象进行比较的另一个对象。</param>
    </member>
    <member name="P:System.Security.Cryptography.CngProvider.Provider">
      <summary>获取当前 <see cref="T:System.Security.Cryptography.CngProvider" /> 对象指定的密钥存储提供程序 (KSP) 的名称。</summary>
      <returns>嵌入的 KSP 名称。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.ToString">
      <summary>获取当前 <see cref="T:System.Security.Cryptography.CngProvider" /> 对象指定的密钥存储提供程序 (KSP) 的名称。</summary>
      <returns>嵌入的 KSP 名称。</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngUIPolicy">
      <summary>为用户界面 (UI) 封装可选配置参数，当您访问受保护的密钥时，下一代加密技术 (CNG) 将显示这些配置参数。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels)">
      <summary>使用指定的保护级别初始化 <see cref="T:System.Security.Cryptography.CngUIPolicy" /> 类的一个新实例。</summary>
      <param name="protectionLevel">指定保护级别的枚举值的按位组合。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String)">
      <summary>使用指定的保护级别和友好名称初始化 <see cref="T:System.Security.Cryptography.CngUIPolicy" /> 类的一个新实例。</summary>
      <param name="protectionLevel">指定保护级别的枚举值的按位组合。</param>
      <param name="friendlyName">将在 UI 提示中使用的密钥的友好名称。 若要使用默认名称，请指定空字符串。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String)">
      <summary>使用指定的保护级别、友好名称和说明初始化 <see cref="T:System.Security.Cryptography.CngUIPolicy" /> 类的一个新实例。</summary>
      <param name="protectionLevel">指定保护级别的枚举值的按位组合。</param>
      <param name="friendlyName">将在 UI 提示中使用的密钥的友好名称。 若要使用默认名称，请指定空字符串。</param>
      <param name="description">密钥的全文本说明。 若要使用默认说明，请指定空字符串。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String,System.String)">
      <summary>使用指定的保护级别、友好名称、说明字符串和使用上下文初始化 <see cref="T:System.Security.Cryptography.CngUIPolicy" /> 类的一个新实例。</summary>
      <param name="protectionLevel">指定保护级别的枚举值的按位组合。</param>
      <param name="friendlyName">将在 UI 提示中使用的密钥的友好名称。 若要使用默认名称，请指定空字符串。</param>
      <param name="description">密钥的全文本说明。 若要使用默认说明，请指定空字符串。</param>
      <param name="useContext">对将如何使用密钥的说明。 若要使用默认说明，请指定空字符串。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String,System.String,System.String)">
      <summary>使用指定的保护级别、友好名称、说明字符串、使用上下文和标题初始化 <see cref="T:System.Security.Cryptography.CngUIPolicy" /> 类的一个新实例。</summary>
      <param name="protectionLevel">指定保护级别的枚举值的按位组合。</param>
      <param name="friendlyName">将在 UI 提示中使用的密钥的友好名称。 若要使用默认名称，请指定空字符串。</param>
      <param name="description">密钥的全文本说明。 若要使用默认说明，请指定空字符串。</param>
      <param name="useContext">对将如何使用密钥的说明。 若要使用默认说明，请指定空字符串。</param>
      <param name="creationTitle">提供 UI 提示的对话框的标题。 若要使用默认标题，请指定空字符串。</param>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.CreationTitle">
      <summary>获取由 UI 提示显示的标题。</summary>
      <returns>访问密钥时出现的对话框的标题。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.Description">
      <summary>获取由 UI 提示显示的说明字符串。</summary>
      <returns>访问密钥时出现的对话框的说明文本。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.FriendlyName">
      <summary>获取由 UI 提示显示的友好名称。</summary>
      <returns>用于在访问密钥时出现的对话框中描述密钥的友好名称。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.ProtectionLevel">
      <summary>获取密钥的 UI 保护级别。</summary>
      <returns>一个描述应用于密钥的 UI 保护级别的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.UseContext">
      <summary>获取对将如何使用密钥的说明。</summary>
      <returns>对将如何使用密钥的说明。</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngUIProtectionLevels">
      <summary>指定用户界面 (UI) 提示方案中密钥的保护级别。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngUIProtectionLevels.ForceHighProtection">
      <summary>每当密钥被访问时显示 UI 提示。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngUIProtectionLevels.None">
      <summary>密钥被访问时不显示 UI 提示。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngUIProtectionLevels.ProtectKey">
      <summary>在进程中密钥第一次被访问时显示 UI 提示。</summary>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellman">
      <summary>提供一个抽象基类，可以从它派生椭圆曲线 Diffie-Hellman (ECDH) 算法实现。 此类提供一个所有 ECDH 实现都必须支持的基本操作集。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create">
      <summary>创建椭圆曲线 Diffie-Hellman (ECDH) 算法的默认实现的一个新实例。</summary>
      <returns>此类的默认实现的一个新实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.String)">
      <summary>创建椭圆曲线 Diffie-Hellman (ECDH) 算法的指定实现的一个新实例。</summary>
      <returns>此类的指定实现的一个新实例。 如果指定的算法名称没有映射到 ECDH 实现，则此方法返回 null。</returns>
      <param name="algorithm">ECDH 算法实现的名称。 以下字符串指的是同一个实现，它是当前 .NET Framework 中支持的唯一实现。 - “ECDH” - “ECDiffieHellman” - “ECDiffieHellmanCng” -“System.Security.Cryptography.ECDiffieHellmanCng” 也可以提供自定义 ECDH 实现的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>在给定另一方公钥的情况下派生可以用作密钥的字节。</summary>
      <returns>来自与另一方的公钥进行密钥交换的密钥材料。</returns>
      <param name="otherPartyPublicKey">另一方的公钥。</param>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm">
      <summary>获取密钥交换算法的名称。</summary>
      <returns>密钥交换算法的名称。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.PublicKey">
      <summary>获取当前椭圆曲线 Diffie-Hellman (ECDH) 实例正在使用的公钥。</summary>
      <returns>此 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 实例正在使用的 ECDH 密钥对的公共部分。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm">
      <summary>获取签名算法的名称。</summary>
      <returns>始终为 null。</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanCng">
      <summary>提供椭圆曲线 Diffie-Hellman (ECDH) 算法的下一代加密技术 (CNG) 实现。 此类用于执行加密操作。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor">
      <summary>使用随机密钥对初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)">
      <summary>使用随机密钥对和指定的密钥大小初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 类的一个新实例。</summary>
      <param name="keySize">密钥大小。 有效的密钥大小为 256、384 和 521 位。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySize" /> 指定的长度无效。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系统不支持下一代加密技术 (CNG) 类。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>使用指定的 <see cref="T:System.Security.Cryptography.CngKey" /> 对象初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 类的新实例。</summary>
      <param name="key">将作为当前对象执行的加密操作的输入的密钥。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 未指定椭圆曲线 Diffie-Hellman (ECDH) 算法组。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系统不支持下一代加密技术 (CNG) 类。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)">
      <summary>在给定包含第二方公钥的 <see cref="T:System.Security.Cryptography.CngKey" /> 对象的情况下，派生从双方之间的机密协议生成的密钥材料。</summary>
      <returns>一个包含密钥材料的字节数组。 此信息从机密协议生成，机密协议是从当前对象的私钥和指定的公钥计算得到的。</returns>
      <param name="otherPartyPublicKey">一个对象，它包含来自密钥交换中另一方的椭圆曲线 Diffie-Hellman (ECDH) 密钥的公共部分。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 无效。 它的 <see cref="P:System.Security.Cryptography.CngKey.AlgorithmGroup" /> 属性未指定 <see cref="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman" />，或者其密钥大小与此实例的密钥大小不匹配。</exception>
      <exception cref="T:System.InvalidOperationException">此对象的 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" /> 属性指定了 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" /> 密钥派生函数，但 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> 或 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> 为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>在给定包含第二方公钥的 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 对象的情况下，派生从双方之间的机密协议生成的密钥材料。</summary>
      <returns>一个包含密钥材料的字节数组。 此信息从机密协议生成，机密协议是从当前对象的私钥和指定的公钥计算得到的。</returns>
      <param name="otherPartyPublicKey">密钥交换中另一方的公钥。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 不是 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 密钥。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)">
      <summary>在给定包含另一方公钥的 <see cref="T:System.Security.Cryptography.CngKey" /> 对象的情况下，获取双方之间生成的机密协议的句柄。</summary>
      <returns>一个机密协议的句柄。 此信息是从当前对象的私钥和指定的公钥计算得到的。</returns>
      <param name="otherPartyPublicKey">一个对象，它包含来自密钥交换中另一方的椭圆曲线 Diffie-Hellman (ECDH) 密钥的公共部分。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 不是 ECDH 密钥，或其大小不正确。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>在给定包含另一方公钥的 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 对象的情况下，获取双方之间生成的机密协议的句柄。</summary>
      <returns>一个机密协议的句柄。 此信息是从当前对象的私钥和指定的公钥计算得到的。</returns>
      <param name="otherPartyPublicKey">密钥交换中另一方的公钥。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 不是 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 密钥。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String)">
      <summary>此方法未实现。</summary>
      <param name="xmlString">要反序列化的基于 XML 的密钥信息。</param>
      <exception cref="T:System.NotImplementedException">未重写此实例的方法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>使用指定的格式反序列化 XML 字符串中的密钥信息。</summary>
      <param name="xml">要反序列化的基于 XML 的密钥信息。</param>
      <param name="format">枚举值之一，它指定 XML 字符串的格式。 当前接受的唯一格式为 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xml" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="xml" /> 的格式不正确。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> 指定的格式无效。 唯一接受的值为 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm">
      <summary>获取或设置生成密钥材料时要使用的哈希算法。</summary>
      <returns>一个指定哈希算法的对象。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey">
      <summary>获取或设置派生密钥材料时要使用的基于哈希的消息身份验证代码 (HMAC) 密钥。</summary>
      <returns>派生密钥材料时要使用的基于哈希的消息身份验证代码 (HMAC) 密钥。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.Key">
      <summary>指定当前对象用于加密操作的 <see cref="T:System.Security.Cryptography.CngKey" />。</summary>
      <returns>此对象用于执行加密操作的密钥对。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction">
      <summary>获取或设置 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 类的密钥派生函数。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction" /> 枚举值之一：<see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />、<see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" /> 或 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />。 默认值为 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">枚举值超出范围。</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.Label">
      <summary>获取或设置用于密钥派生的标签值。</summary>
      <returns>标签值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.PublicKey">
      <summary>获取另一个 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 对象可用来生成共享机密协议的公钥。</summary>
      <returns>与 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 对象的此实例关联的公钥。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend">
      <summary>获取或设置生成密钥材料时将追加到机密协议的值。</summary>
      <returns>追加到机密协议的值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend">
      <summary>获取或设置派生密钥材料时将添加到机密协议开头的值。</summary>
      <returns>密钥派生期间追加到机密协议开头的值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed">
      <summary>获取或设置派生密钥材料时将要使用的种子值。</summary>
      <returns>种子值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Boolean)">
      <summary>此方法未实现。</summary>
      <returns>不适用。</returns>
      <param name="includePrivateParameters">要包括私有参数，则为 true；否则为 false。</param>
      <exception cref="T:System.NotImplementedException">未重写此实例的方法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>使用指定的格式将密钥信息序列化为 XML 字符串。</summary>
      <returns>一个包含密钥信息的字符串对象，该密钥信息已根据请求的格式序列化为 XML 字符串。</returns>
      <param name="format">枚举值之一，它指定 XML 字符串的格式。 当前接受的唯一格式为 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> 指定的格式无效。 唯一接受的值为 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey">
      <summary>获取一个值，该值指示机密协议是否用作基于哈希的消息身份验证代码 (HMAC) 密钥以派生密钥材料。</summary>
      <returns>如果机密协议用作 HMAC 密钥以派生机密材料，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey">
      <summary>指定与 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 类一起使用的椭圆曲线 Diffie-Hellman (ECDH) 公钥。</summary>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.BlobFormat">
      <summary>获取 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 对象的密钥 BLOB 格式。</summary>
      <returns>表示密钥 BLOB 的格式。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.FromByteArray(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>根据指定的格式，将包含公钥的字节数组转换为 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 对象。</summary>
      <returns>一个包含 ECDH 公钥的对象，ECDH 公钥在字节数组中被序列化。</returns>
      <param name="publicKeyBlob">一个包含椭圆曲线 Diffie-Hellman (ECDH) 公钥的字节数组。</param>
      <param name="format">一个指定密钥 BLOB 格式的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="publicKeyBlob" /> 或 <paramref name="format" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="publicKeyBlob" /> 参数未包含 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 密钥。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.FromXmlString(System.String)">
      <summary>将 XML 字符串转换为 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 对象。</summary>
      <returns>一个包含 ECDH 公钥的对象，ECDH 公钥由给定的 XML 指定。</returns>
      <param name="xml">一个包含椭圆曲线 Diffie-Hellman (ECDH) 密钥的 XML 字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xml" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="xml" /> 参数未指定 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 密钥。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.Import">
      <summary>将 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 对象转换为 <see cref="T:System.Security.Cryptography.CngKey" /> 对象。</summary>
      <returns>一个包含由 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 对象表示的密钥的对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.ToXmlString">
      <summary>将 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 公钥序列化为 RFC 4050 格式的 XML 字符。</summary>
      <returns>一个包含已序列化的 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 公钥的 XML 字符串。</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction">
      <summary>指定密钥派生函数，<see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 类将使用此函数将机密协议转换为密钥材料。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash">
      <summary>哈希算法用于生成密钥材料。 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm" /> 属性指定要使用的算法的名称。 如果未指定算法名称，则将 <see cref="T:System.Security.Cryptography.SHA256" /> 用作默认算法。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac">
      <summary>基于散列的消息验证代码 (HMAC) 算法用于生成密钥材料。 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey" /> 属性指定要使用的密钥。 必须设置此属性或者必须将 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey" /> 属性设置为 true；否则使用 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" /> 时，会引发 <see cref="T:System.Security.Cryptography.CryptographicException" />。 如果同时设置了这两个属性，则将机密协议用作 HMAC 密钥。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls">
      <summary>传输层安全 (TLS) 协议用于生成密钥材料。 必须设置 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> 和 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> 属性；否则使用 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" /> 时，会引发 <see cref="T:System.Security.Cryptography.CryptographicException" />。</summary>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanPublicKey">
      <summary>提供所有 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 实现必须从中继承的抽象基类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.#ctor(System.Byte[])">
      <summary>初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 类的新实例。</summary>
      <param name="keyBlob">表示 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 对象的字节数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyBlob" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose">
      <summary>释放由 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 类的当前实例占用的所有资源。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose(System.Boolean)">
      <summary>释放 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 类使用的非托管资源，并可以选择释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToByteArray">
      <summary>将 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 密钥 BLOB 序列化为字节数组。</summary>
      <returns>一个字节数组，包含已序列化的椭圆曲线 Diffie-Hellman (ECDH) 公钥。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToXmlString">
      <summary>将 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 公钥序列化为 XML 字符串。</summary>
      <returns>一个 XML 字符串，该字符串包含已序列化的椭圆曲线 Diffie-Hellman (ECDH) 公钥。</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDsa">
      <summary>提供一个封装椭圆曲线数字签名算法 (ECDSA) 的抽象基类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.ECDsa" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create">
      <summary>创建椭圆曲线数字签名算法 (ECDSA) 的默认实现的一个新实例。</summary>
      <returns>此类的默认实现 (<see cref="T:System.Security.Cryptography.ECDsaCng" />) 的一个新实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.String)">
      <summary>创建椭圆曲线数字签名算法 (ECDSA) 的指定实现的一个新实例。</summary>
      <returns>此类的指定实现的一个新实例。 如果指定的算法名称没有映射到 ECDSA 实现，则此方法返回 null。</returns>
      <param name="algorithm">ECDSA 实现的名称。 以下字符串指的是同一个实现，它是当前 .NET Framework 中支持的唯一实现。 - “ECDsa” - “ECDsaCng” -“System.Security.Cryptography.ECDsaCng” 也可以提供自定义 ECDSA 实现的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm">
      <summary>获取密钥交换算法的名称。</summary>
      <returns>始终为 null。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.SignatureAlgorithm">
      <summary>获取签名算法的名称。</summary>
      <returns>字符串“ECDsa”。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[])">
      <summary>为指定的哈希值生成数字签名。</summary>
      <returns>包含用私钥加密的给定哈希值的数字签名。</returns>
      <param name="hash">正被签名的数据的哈希值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])">
      <summary>根据指定的哈希值验证数字签名。</summary>
      <returns>如果哈希值与解密的签名相等，则为 true；否则为 false。</returns>
      <param name="hash">数据块的哈希值。</param>
      <param name="signature">要验证的数字签名。</param>
    </member>
    <member name="T:System.Security.Cryptography.ECDsaCng">
      <summary>提供椭圆曲线数字签名算法 (ECDSA) 的下一代加密技术 (CNG) 实现。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor">
      <summary>使用随机密钥对初始化 <see cref="T:System.Security.Cryptography.ECDsaCng" /> 类的新实例。</summary>
      <exception cref="T:System.PlatformNotSupportedException">此系统不支持下一代加密技术 (CNG) 类。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)">
      <summary>使用指定的密钥大小初始化具有随机密钥对的 <see cref="T:System.Security.Cryptography.ECDsaCng" /> 类的新实例。</summary>
      <param name="keySize">密钥大小。 有效的密钥大小为 256、384 和 521 位。</param>
      <exception cref="T:System.PlatformNotSupportedException">此系统不支持下一代加密技术 (CNG) 类。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySize" /> 指定的长度无效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>使用指定的 <see cref="T:System.Security.Cryptography.CngKey" /> 对象初始化 <see cref="T:System.Security.Cryptography.ECDsaCng" /> 类的新实例。</summary>
      <param name="key">将作为当前对象执行的加密操作的输入的密钥。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 未指定椭圆曲线数字签名算法 (ECDSA) 组。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系统不支持下一代加密技术 (CNG) 类。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.FromXmlString(System.String)">
      <summary>此方法未实现。</summary>
      <param name="xmlString">要反序列化的基于 XML 的密钥信息。</param>
      <exception cref="T:System.NotImplementedException">未重写此实例的方法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>使用指定的格式反序列化 XML 字符串中的密钥信息。</summary>
      <param name="xml">要反序列化的基于 XML 的密钥信息。</param>
      <param name="format">枚举值之一，它指定 XML 字符串的格式。 当前接受的唯一格式为 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xml" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> 指定的格式无效。 唯一接受的值为 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDsaCng.HashAlgorithm">
      <summary>获取或设置签名和验证数据时要使用的哈希算法。</summary>
      <returns>一个指定哈希算法的对象。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDsaCng.Key">
      <summary>获取或设置签名和验证数据时要使用的密钥。</summary>
      <returns>指定密钥的对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignData(System.Byte[])">
      <summary>生成指定数据的签名。</summary>
      <returns>指定数据的数字签名。</returns>
      <param name="data">要签名的消息数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">与该实例关联的密钥信息没有私钥。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignData(System.Byte[],System.Int32,System.Int32)">
      <summary>从指定的偏移量开始生成指定长度的数据的数字签名。</summary>
      <returns>指定长度的数据的数字签名。</returns>
      <param name="data">要签名的消息数据。</param>
      <param name="offset">字符串中开始签名的位置。</param>
      <param name="count">紧跟在将要签名的 <paramref name="offset" /> 后的字符串长度（以字符为单位）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 或 <paramref name="offset" /> 导致读取超出数据字符串范围。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">与该实例关联的密钥信息没有私钥。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignData(System.IO.Stream)">
      <summary>通过读取数据流的末尾内容生成指定数据流的签名。</summary>
      <returns>指定的数据流的数字签名。</returns>
      <param name="data">要签名的数据流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">与该实例关联的密钥信息没有私钥。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])">
      <summary>生成指定的哈希值的签名。</summary>
      <returns>指定的哈希值的数字签名。</returns>
      <param name="hash">要签名的数据的哈希值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">与该实例关联的密钥信息没有私钥。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.ToXmlString(System.Boolean)">
      <summary>此方法未实现。</summary>
      <returns>不适用。</returns>
      <param name="includePrivateParameters">要包括私有参数，则为 true；否则为 false。</param>
      <exception cref="T:System.NotImplementedException">此方法未实现。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>使用指定的格式将密钥信息序列化为 XML 字符串。</summary>
      <returns>一个包含密钥信息的字符串对象，已根据所需的格式将其序列化为 XML 字符串。</returns>
      <param name="format">枚举值之一，它指定 XML 字符串的格式。 当前接受的唯一格式为 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> 指定的格式无效。 唯一接受的值为 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Byte[])">
      <summary>验证指定的数据的数字签名。</summary>
      <returns>如果签名有效，则为 true；否则为 false。</returns>
      <param name="data">已签名的数据。</param>
      <param name="signature">要验证的签名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="signature" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])">
      <summary>从指定的偏移量开始验证指定长度的数据的签名。</summary>
      <returns>如果签名有效，则为 true；否则为 false。</returns>
      <param name="data">已签名的数据。</param>
      <param name="offset">数据中已签名数据开始的位置。</param>
      <param name="count">紧跟在将要签名的 <paramref name="offset" /> 后的数据长度（以字符为单位）。</param>
      <param name="signature">要验证的签名。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 小于零。 - 或 - <paramref name="offset" /> 或 <paramref name="count" /> 大于在 <paramref name="data" /> 参数中传递的字节数组的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="signature" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyData(System.IO.Stream,System.Byte[])">
      <summary>通过读取数据流的末尾内容验证指定数据流的数字签名。</summary>
      <returns>如果签名有效，则为 true；否则为 false。</returns>
      <param name="data">已签名的数据流。</param>
      <param name="signature">要验证的签名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="signature" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])">
      <summary>根据指定的哈希值验证指定的数字签名。</summary>
      <returns>如果签名有效，则为 true；否则为 false。</returns>
      <param name="hash">要验证的数据的哈希值。</param>
      <param name="signature">要根据哈希值验证的数据的数字签名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 或 <paramref name="signature" /> 为 null。</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECKeyXmlFormat">
      <summary>为椭圆曲线密钥定义 XML 序列化格式。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050">
      <summary>“Using the Elliptic Curve Signature Algorithm (ECDSA) for XML Digital Signatures”（对 XML 数字签名使用椭圆曲线签名算法 (ECDSA)）中的“RFC 4050”中所描述的 XML 序列化格式。</summary>
    </member>
    <member name="T:System.Security.Cryptography.ManifestSignatureInformation">
      <summary>提供清单签名的相关信息。</summary>
    </member>
    <member name="P:System.Security.Cryptography.ManifestSignatureInformation.AuthenticodeSignature">
      <summary>获取清单的 Authenticode 签名信息。</summary>
      <returns>一个包含清单的 Authenticode 签名信息的 <see cref="T:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation" /> 对象，如果没有签名，则为 null。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ManifestSignatureInformation.Manifest">
      <summary>获取清单的类型。</summary>
      <returns>
        <see cref="T:System.Security.ManifestKinds" /> 值之一。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature">
      <summary>获取清单的强名称签名的详细信息。</summary>
      <returns>一个包含签名的 <see cref="P:System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature" /> 对象，如果没有强名称签名，则为 null。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext)">
      <summary>收集并验证有关属于指定激活上下文的清单的签名信息。</summary>
      <returns>一个集合，包含验证的每个清单的 <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" /> 对象。</returns>
      <param name="application">清单的激活上下文。 激活上下文属于某个应用程序并且包含多个清单。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="application" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext,System.Security.ManifestKinds)">
      <summary>收集并验证有关属于指定激活上下文和清单类型的清单的签名信息。</summary>
      <returns>一个集合，包含验证的每个清单的 <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" /> 对象。</returns>
      <param name="application">清单的激活上下文。 激活上下文属于某个应用程序并且包含多个清单。</param>
      <param name="manifests">清单的类型。 此参数指定要验证的激活上下文中的清单。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="application" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext,System.Security.ManifestKinds,System.Security.Cryptography.X509Certificates.X509RevocationFlag,System.Security.Cryptography.X509Certificates.X509RevocationMode)">
      <summary>收集并验证有关属于指定激活上下文和清单类型的清单的签名信息，并可以选择证书以进行吊销。</summary>
      <returns>一个集合，包含验证的每个清单的 <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" /> 对象。</returns>
      <param name="application">清单的应用程序上下文。 激活上下文属于某个应用程序并且包含多个清单。</param>
      <param name="manifests">清单的类型。 此参数指定要验证的激活上下文中的清单。</param>
      <param name="revocationFlag">指定链中要进行吊销检查的证书的枚举值之一。 默认值为 <see cref="F:System.Security.Cryptography.X509Certificates.X509RevocationFlag.ExcludeRoot" />。</param>
      <param name="revocationMode">确定 X.509 验证是否联机查找吊销列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="application" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">为 <paramref name="revocationFlag" /> 或 <paramref name="revocationMode" /> 参数指定的值无效。</exception>
    </member>
    <member name="T:System.Security.Cryptography.ManifestSignatureInformationCollection">
      <summary>表示 <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" /> 对象的只读集合。</summary>
    </member>
    <member name="T:System.Security.Cryptography.MD5Cng">
      <summary>提供 MD5（消息摘要 5）128 位哈希算法的 CNG（下一代加密技术）实现。</summary>
    </member>
    <member name="M:System.Security.Cryptography.MD5Cng.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.MD5Cng" /> 类的新实例。</summary>
      <exception cref="T:System.InvalidOperationException">此实现不是 Windows 平台 FIPS 验证的加密算法的一部分。</exception>
    </member>
    <member name="M:System.Security.Cryptography.MD5Cng.Initialize">
      <summary>初始化或重新初始化哈希算法的实例。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA1Cng">
      <summary>提供安全哈希算法 (SHA) 的下一代加密技术 (CNG) 实现。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Cng.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA1Cng" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Cng.Initialize">
      <summary>初始化或重新初始化哈希算法的实例。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA256Cng">
      <summary>为 256 位哈希值提供安全哈希算法 (SHA) 的下一代加密技术 (CNG) 实现。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Cng.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA256Cng" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Cng.Initialize">
      <summary>初始化或重新初始化哈希算法的实例。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA256CryptoServiceProvider">
      <summary>定义访问 <see cref="T:System.Security.Cryptography.SHA256" /> 算法的加密服务提供程序 (CSP) 实现的包装对象。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256CryptoServiceProvider.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA256CryptoServiceProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256CryptoServiceProvider.Initialize">
      <summary>初始化或重新初始化哈希算法的实例。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA384Cng">
      <summary>提供具有 384 位哈希值的安全哈希算法 (SHA) 的下一代加密技术 (CNG) 实现。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Cng.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA384Cng" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Cng.Initialize">
      <summary>初始化或重新初始化哈希算法的实例。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA384CryptoServiceProvider">
      <summary>定义访问 <see cref="T:System.Security.Cryptography.SHA384" /> 算法的加密服务提供程序 (CSP) 实现的包装对象。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384CryptoServiceProvider.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA384CryptoServiceProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384CryptoServiceProvider.Initialize">
      <summary>初始化或重新初始化哈希算法的实例。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA512Cng">
      <summary>提供使用 512 位哈希值的安全哈希算法 (SHA) 的下一代加密技术 (CNG) 实现。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Cng.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA512Cng" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Cng.Initialize">
      <summary>初始化或重新初始化哈希算法的实例。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA512CryptoServiceProvider">
      <summary>定义访问 <see cref="T:System.Security.Cryptography.SHA512" /> 算法的加密服务提供程序 (CSP) 实现的包装对象。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512CryptoServiceProvider.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA512CryptoServiceProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512CryptoServiceProvider.Initialize">
      <summary>初始化或重新初始化哈希算法的实例。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SignatureVerificationResult">
      <summary>指定签名验证的大部分结果代码。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.AssemblyIdentityMismatch">
      <summary>在清单的 /asm:assembly/asm:assemblyIdentity 节点中指定的程序集的标识与 /asm:assembly/ds:signature/ds:KeyInfo/msrel:RelData/r:license/r:grant/as:ManifestInformation/as:assemblyIdentity 节点的 Authenticode 签名中的程序集的标识不匹配。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.BadDigest">
      <summary>未验证对象的数字签名。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.BadSignatureFormat">
      <summary>签名格式无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.BasicConstraintsNotObserved">
      <summary>未观察到证书的基本约束扩展。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateExpired">
      <summary>证书已过期。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateExplicitlyDistrusted">
      <summary>证书已被显式标记为不受用户信任。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateMalformed">
      <summary>找不到证书，或某个重要字段（例如使用者或颁发者姓名）的值为空。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateNotExplicitlyTrusted">
      <summary>证书显式不受信任。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateRevoked">
      <summary>证书已吊销。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateUsageNotAllowed">
      <summary>证书不可用于签名和验证。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.ContainingSignatureInvalid">
      <summary>强名称签名不会在 <see cref="T:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation" /> 对象中进行验证。 因为强名称签名封装 Authenticode 签名，有人会使用他们选择的签名替换 Authenticode 签名。 为了避免出现这种情况，如果强名称没有验证，则返回此错误代码，因为替换部分强名称签名会使强名称签名无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CouldNotBuildChain">
      <summary>未能生成链。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.GenericTrustFailure">
      <summary>对证书的一般信任失败。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificateName">
      <summary>证书名称无效。 此名称既未包含在允许的列表中，也未被显式排除。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificatePolicy">
      <summary>证书的策略无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificateRole">
      <summary>证书的角色无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificateSignature">
      <summary>无法验证证书的签名。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificateUsage">
      <summary>证书的用法无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCountersignature">
      <summary>其中一个副署无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidSignerCertificate">
      <summary>消息的签署人的证书无效或找不到。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidTimePeriodNesting">
      <summary>颁发证书过期后颁发一个新证书。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidTimestamp">
      <summary>未能验证时间戳签名或证书，或者格式不正确。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.IssuerChainingError">
      <summary>所给证书的父证书没有颁发此子证书。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.MissingSignature">
      <summary>缺少签名。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.PathLengthConstraintViolated">
      <summary>违反了证书链的路径长度限定。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.PublicKeyTokenMismatch">
      <summary>/asm:assembly/asm:AssemblyIdentity 节点中清单标识的公钥令牌与用于签署清单的密钥的公钥令牌不匹配。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.PublisherMismatch">
      <summary>/asm:assembly/asmv2:publisherIdentity 的发布者姓名与签名证书的使用者姓名不匹配，或者相同的 publisherIdentity 节点的颁发者密钥哈希与签名证书的密钥哈希不匹配。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.RevocationCheckFailure">
      <summary>吊销检查失败。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.SystemError">
      <summary>验证信任关系时，系统层上出现了一个错误。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UnknownCriticalExtension">
      <summary>证书包含标记为关键的未知扩展名。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UnknownTrustProvider">
      <summary>证书有未知的信任提供程序。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UnknownVerificationAction">
      <summary>证书有未知的验证操作。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UntrustedCertificationAuthority">
      <summary>已正确处理证书链，但其中一个 CA 证书未受到策略提供程序的信任。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UntrustedRootCertificate">
      <summary>根证书不受信任。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UntrustedTestRootCertificate">
      <summary>测试根证书不受信任。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.Valid">
      <summary>证书验证结果有效。</summary>
    </member>
    <member name="T:System.Security.Cryptography.StrongNameSignatureInformation">
      <summary>保存清单的强名称签名信息。</summary>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.HashAlgorithm">
      <summary>获取用于计算强名称签名的哈希算法。</summary>
      <returns>用于计算强名称签名的哈希算法的名称。</returns>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.HResult">
      <summary>获取结果代码的 HRESULT 值。</summary>
      <returns>结果代码的 HRESULT 值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.IsValid">
      <summary>获取一个值，该值指示强名称签名是否有效。</summary>
      <returns>如果强名称签名有效，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.PublicKey">
      <summary>获取用于验证签名的公钥。</summary>
      <returns>用于验证签名的公钥。</returns>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.VerificationResult">
      <summary>获取验证强名称签名的结果。</summary>
      <returns>签名验证的结果代码。</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation">
      <summary>提供有关清单的 Authenticode 签名信息。</summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.Description">
      <summary>获取签名证书的说明。</summary>
      <returns>签名证书的说明。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.DescriptionUrl">
      <summary>获取签名证书的说明 URL。</summary>
      <returns>签名证书的说明 URL。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.HashAlgorithm">
      <summary>获取用于计算签名的哈希算法。</summary>
      <returns>用于计算签名的哈希算法。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.HResult">
      <summary>通过验证签名获取 HRESULT 值。</summary>
      <returns>通过验证签名的 HRESULT 值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.SignatureChain">
      <summary>获取用于验证 Authenticode 签名的证书链。</summary>
      <returns>包含证书链的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.SigningCertificate">
      <summary>获取已为清单签名的证书。</summary>
      <returns>表示证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.Timestamp">
      <summary>获取应用于 Authenticode 签名的时间戳。</summary>
      <returns>包含签名时间戳的 <see cref="T:System.Security.Cryptography.X509Certificates.TimestampInformation" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.TrustStatus">
      <summary>获取 Authenticode 签名的可信度。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.TrustStatus" /> 值之一。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.VerificationResult">
      <summary>获取验证 Authenticode 签名的结果。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.SignatureVerificationResult" /> 值之一。</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.TimestampInformation">
      <summary>提供有关时间戳的详细信息，时间戳应用于清单的 Authenticode 签名。</summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.HashAlgorithm">
      <summary>获取用于计算时间戳签名的哈希算法。</summary>
      <returns>用于计算时间戳签名的哈希算法。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.HResult">
      <summary>获取 HRESULT 值，该值是通过验证签名产生的。</summary>
      <returns>通过验证签名产生的 HRESULT 值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.IsValid">
      <summary>获取一个值，该值指示签名的时间戳是否有效。</summary>
      <returns>如果时间戳有效，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.SignatureChain">
      <summary>获取用于验证签名的时间戳的证书链。</summary>
      <returns>表示证书链的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.SigningCertificate">
      <summary>获取已对时间戳签名的证书。</summary>
      <returns>表示证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.Timestamp">
      <summary>获取应用于签名的时间戳。</summary>
      <returns>一个表示时间戳的 <see cref="T:System.DateTime" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.VerificationResult">
      <summary>获取验证时间戳签名的结果。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.SignatureVerificationResult" /> 值之一。</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.TrustStatus">
      <summary>标识分配给清单签名的可信度级别。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.TrustStatus.KnownIdentity">
      <summary>该标识已知并且签名有效。 有效的 Authenticode 签名提供标识。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.TrustStatus.Trusted">
      <summary>签名有效并且是由明确可信的发行者创建的。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.TrustStatus.UnknownIdentity">
      <summary>该标识未知并且签名无效。 因为签名未经验证，所以无法确定标识。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.TrustStatus.Untrusted">
      <summary>签名由明确不可信发布者创建。</summary>
    </member>
    <member name="T:System.Threading.LockRecursionPolicy">
      <summary>指定同一个线程是否可以多次进入一个锁定状态。</summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.NoRecursion">
      <summary>如果线程尝试以递归方式进入锁定状态，将引发异常。 某些类可能会在此设置生效时允许使用特定的递归方式。</summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.SupportsRecursion">
      <summary>线程可以采用递归方式进入锁定状态。 某些类可能会限制此功能。</summary>
    </member>
    <member name="T:System.Threading.ReaderWriterLockSlim">
      <summary>表示用于管理资源访问的锁定状态，可实现多线程读取或进行独占式写入访问。</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor">
      <summary>使用默认属性值初始化 <see cref="T:System.Threading.ReaderWriterLockSlim" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor(System.Threading.LockRecursionPolicy)">
      <summary>初始化 <see cref="T:System.Threading.ReaderWriterLockSlim" /> 类的新实例，从而指定锁定递归策略。</summary>
      <param name="recursionPolicy">枚举值之一，用于指定锁定递归策略。</param>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.CurrentReadCount">
      <summary>获取已进入读取模式锁定状态的独有线程的总数。</summary>
      <returns>已进入读取模式锁定状态的独有线程的数量。</returns>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.Dispose">
      <summary>释放由 <see cref="T:System.Threading.ReaderWriterLockSlim" /> 类的当前实例占用的所有资源。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterReadLock">
      <summary>尝试进入读取模式锁定状态。</summary>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性为 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，而且当前线程已进入读取模式。 - 或 - 递归数将超出计数器的容量。 此限制数值很大，因此任何情况下应用程序都不应遇到此情况。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock">
      <summary>尝试进入可升级模式锁定状态。</summary>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性为 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，而且当前线程已进入任意模式的锁定状态。 - 或 - 当前线程已进入读取模式，因此尝试进入可升级模式将有可能导致死锁。 - 或 - 递归数将超出计数器的容量。 此限制数值很大，因此任何情况下应用程序都不应遇到此情况。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterWriteLock">
      <summary>尝试进入写入模式锁定状态。</summary>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性为 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，而且当前线程已进入任意模式的锁定状态。 - 或 - 当前线程已进入读取模式，因此尝试进入写入模式锁定状态将有可能导致死锁。 - 或 - 递归数将超出计数器的容量。 此限制数值很大，因此任何情况下应用程序都不应遇到此情况。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitReadLock">
      <summary>减少读取模式的递归计数，并在生成的计数为 0（零）时退出读取模式。</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">当前线程未进入读取模式锁定状态。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock">
      <summary>减少可升级模式的递归计数，并在生成的计数为 0（零）时退出可升级模式。</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">当前线程未进入可升级模式锁定状态。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitWriteLock">
      <summary>减少写入模式的递归计数，并在生成的计数为 0（零）时退出写入模式。</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">当前线程未进入写入模式锁定状态。</exception>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsReadLockHeld">
      <summary>获取一个值，该值指示当前线程是否已进入读取模式的锁定状态。</summary>
      <returns>如果当前线程已进入读取模式，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld">
      <summary>获取一个值，该值指示当前线程是否已进入可升级模式的锁定状态。</summary>
      <returns>如果当前线程已进入可升级模式，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld">
      <summary>获取一个值，该值指示当前线程是否已进入写入模式的锁定状态。</summary>
      <returns>如果当前线程已进入写入模式，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy">
      <summary>获取一个值，该值指示当前 <see cref="T:System.Threading.ReaderWriterLockSlim" /> 对象的递归策略。</summary>
      <returns>枚举值之一，用于指定锁定递归策略。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveReadCount">
      <summary>获取当前线程进入读取模式锁定状态的次数，用于指示递归。</summary>
      <returns>如果当前线程未进入读取模式，则为 0（零）；如果线程已进入读取模式但却不是以递归方式进入的，则为 1；或者如果线程已经以递归方式进入锁定模式 n - 1 次，则为 n。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount">
      <summary>获取当前线程进入可升级模式锁定状态的次数，用于指示递归。</summary>
      <returns>如果当前线程没有进入可升级模式，则为 0；如果线程已进入可升级模式却不是以递归方式进入的，则为 1；或者如果线程已经以递归方式进入可升级模式 n - 1 次，则为 n。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveWriteCount">
      <summary>获取当前线程进入写入模式锁定状态的次数，用于指示递归。</summary>
      <returns>如果当前线程没有进入写入模式，则为 0；如果线程已进入写入模式却不是以递归方式进入的，则为 1；或者如果线程已经以递归方式进入写入模式 n - 1 次，则为 n。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)">
      <summary>尝试进入读取模式锁定状态，可以选择整数超时时间。</summary>
      <returns>如果调用线程已进入读取模式，则为 true；否则为 false。</returns>
      <param name="millisecondsTimeout">等待的毫秒数；或为 -1 (<see cref="F:System.Threading.Timeout.Infinite" />)，表示无限期等待。</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性为 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，而且当前线程已进入锁定状态。 - 或 - 递归数将超出计数器的容量。 此限制数值很大，因此任何情况下应用程序都不应遇到此情况。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 的值为负，但不等于 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，这是唯一允许使用的负值。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.TimeSpan)">
      <summary>尝试进入读取模式锁定状态，可以选择超时时间。</summary>
      <returns>如果调用线程已进入读取模式，则为 true；否则为 false。</returns>
      <param name="timeout">等待的间隔；或为 -1 毫秒，表示无限期等待。</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性为 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，而且当前线程已进入锁定状态。 - 或 - 递归数将超出计数器的容量。 此限制数值很大，因此任何情况下应用程序都不应遇到此情况。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 的值为负，但不等于 -1 毫秒，这是唯一允许使用的负值。 - 或 - <paramref name="timeout" /> 的值大于 <see cref="F:System.Int32.MaxValue" /> 毫秒。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)">
      <summary>尝试进入可升级模式锁定状态，可以选择超时时间。</summary>
      <returns>如果调用线程已进入可升级模式，则为 true；否则为 false。</returns>
      <param name="millisecondsTimeout">等待的毫秒数；或为 -1 (<see cref="F:System.Threading.Timeout.Infinite" />)，表示无限期等待。</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性为 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，而且当前线程已进入锁定状态。 - 或 - 初始状态下，当前线程进入读取模式锁定状态，因此尝试进入可升级模式将有可能导致死锁。 - 或 - 递归数将超出计数器的容量。 此限制数值很大，因此任何情况下应用程序都不应遇到此情况。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 的值为负，但不等于 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，这是唯一允许使用的负值。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.TimeSpan)">
      <summary>尝试进入可升级模式锁定状态，可以选择超时时间。</summary>
      <returns>如果调用线程已进入可升级模式，则为 true；否则为 false。</returns>
      <param name="timeout">等待的间隔；或为 -1 毫秒，表示无限期等待。</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性为 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，而且当前线程已进入锁定状态。 - 或 - 初始状态下，当前线程进入读取模式锁定状态，因此尝试进入可升级模式将有可能导致死锁。 - 或 - 递归数将超出计数器的容量。 此限制数值很大，因此任何情况下应用程序都不应遇到此情况。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 的值为负，但不等于 -1 毫秒，这是唯一允许使用的负值。 - 或 - <paramref name="timeout" /> 的值大于 <see cref="F:System.Int32.MaxValue" /> 毫秒。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)">
      <summary>尝试进入写入模式锁定状态，可以选择超时时间。</summary>
      <returns>如果调用线程已进入写入模式，则为 true；否则为 false。</returns>
      <param name="millisecondsTimeout">等待的毫秒数；或为 -1 (<see cref="F:System.Threading.Timeout.Infinite" />)，表示无限期等待。</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性为 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，而且当前线程已进入锁定状态。 - 或 - 初始状态下，当前线程进入读取模式锁定状态，因此尝试进入写入模式将有可能导致死锁。 - 或 - 递归数将超出计数器的容量。 此限制数值很大，因此任何情况下应用程序都不应遇到此情况。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 的值为负，但不等于 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，这是唯一允许使用的负值。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.TimeSpan)">
      <summary>尝试进入写入模式锁定状态，可以选择超时时间。</summary>
      <returns>如果调用线程已进入写入模式，则为 true；否则为 false。</returns>
      <param name="timeout">等待的间隔；或为 -1 毫秒，表示无限期等待。</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性为 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，而且当前线程已进入锁定状态。 - 或 - 初始状态下，当前线程进入读取模式锁定状态，因此尝试进入写入模式将有可能导致死锁。 - 或 - 递归数将超出计数器的容量。 此限制数值很大，因此任何情况下应用程序都不应遇到此情况。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 的值为负，但不等于 -1 毫秒，这是唯一允许使用的负值。 - 或 - <paramref name="timeout" /> 的值大于 <see cref="F:System.Int32.MaxValue" /> 毫秒。</exception>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount">
      <summary>获取等待进入读取模式锁定状态的线程总数。</summary>
      <returns>等待进入读取模式的线程总数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount">
      <summary>获取等待进入可升级模式锁定状态的线程总数。</summary>
      <returns>等待进入可升级模式的线程总数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount">
      <summary>获取等待进入写入模式锁定状态的线程总数。</summary>
      <returns>等待进入写入模式的线程总数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Threading.Tasks.TaskExtensions">
      <summary>提供一组用于处理特定类型的 <see cref="T:System.Threading.Tasks.Task" /> 实例的静态方法（在 Visual Basic 中为共享方法）。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
      <summary>创建一个表示 <see cref="T:System.Threading.Tasks.Task" /> 的异步操作的代理 Task&lt;Task&lt;T&gt;&gt; (C#) or Task (Of Task(Of T)) (Visual Basic)。</summary>
      <returns>一个 <see cref="T:System.Threading.Tasks.Task" /> 它表示所提供的 Task&lt;Task&lt;T&gt;&gt; (C#) 或 Task (Of Task(Of T)) (Visual Basic) 的异步运算。</returns>
      <param name="task">要解包的 Task&lt;Task&lt;T&gt;&gt; (C#) 或者 Task (Of Task(Of T)) (Visual Basic)。</param>
      <typeparam name="TResult">任务结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> 参数为 null 时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
      <summary>创建一个表示 <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)" /> 的异步操作的代理 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>表示所提供的 System.Threading.Tasks.Task(Of Task) 的异步操作的 Task。</returns>
      <param name="task">要解包的 Task&lt;Task&gt; (C#) 或者 Task (Of Task) (Visual Basic)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> 参数为 null 时引发的异常。</exception>
    </member>
  </members>
</doc>