<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.DataSetExtensions</name>
  </assembly>
  <members>
    <member name="T:System.Data.DataRowComparer">
      <summary>返回 <see cref="T:System.Data.DataRowComparer`1" /> 类的单一实例。</summary>
    </member>
    <member name="P:System.Data.DataRowComparer.Default">
      <summary>获取 <see cref="T:System.Data.DataRowComparer`1" /> 的单一实例。 此属性是只读的。</summary>
      <returns>
        <see cref="T:System.Data.DataRowComparer`1" /> 的一个实例。</returns>
    </member>
    <member name="T:System.Data.DataRowComparer`1">
      <summary>通过使用基于值的比较来比较两个 <see cref="T:System.Data.DataRow" /> 对象是否等值。</summary>
      <typeparam name="TRow">要进行比较的对象的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
    </member>
    <member name="P:System.Data.DataRowComparer`1.Default">
      <summary>获取 <see cref="T:System.Data.DataRowComparer`1" /> 的单一实例。 此属性是只读的。</summary>
      <returns>
        <see cref="T:System.Data.DataRowComparer`1" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Data.DataRowComparer`1.Equals(`0,`0)">
      <summary>通过使用基于值的逐列比较来比较两个 <see cref="T:System.Data.DataRow" /> 对象。</summary>
      <returns>如果两个 <see cref="T:System.Data.DataRow" /> 对象具有相等的列值有序集，则为 true；否则为  false。</returns>
      <param name="leftRow">要比较的第一个 <see cref="T:System.Data.DataRow" /> 对象。</param>
      <param name="rightRow">要比较的第二个 <see cref="T:System.Data.DataRow" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">两个源 <see cref="T:System.Data.DataRow" /> 对象之一或全部为 null。</exception>
    </member>
    <member name="M:System.Data.DataRowComparer`1.GetHashCode(`0)">
      <summary>返回指定 <see cref="T:System.Data.DataRow" /> 对象的哈希代码。</summary>
      <returns>表示该行的哈希代码的 <see cref="T:System.Int32" /> 值。</returns>
      <param name="row">要从中计算哈希代码的 <see cref="T:System.Data.DataRow" />。</param>
      <exception cref="T:System.ArgumentException">源 <see cref="T:System.Data.DataRow" /> 对象不属于 <see cref="T:System.Data.DataTable" />。</exception>
      <exception cref="T:System.ArgumentNullException">源 <see cref="T:System.Data.DataRow" /> 对象为 null。</exception>
    </member>
    <member name="T:System.Data.DataRowExtensions">
      <summary>定义 <see cref="T:System.Data.DataRow" /> 类的扩展方法。 这是一个静态类。</summary>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn)">
      <summary>提供对指定行中的每个列值的强类型访问。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn)" /> 方法还支持可以为 null 的类型。</summary>
      <returns>由 <paramref name="column" /> 指定的 <see cref="T:System.Data.DataColumn" /> 的值，类型为 <paramref name="T" />。</returns>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> 输入，作为扩展方法的 this 实例。</param>
      <param name="column">输入 <see cref="T:System.Data.DataColumn" /> 对象，指定要返回其值的列。</param>
      <typeparam name="T">指定列的返回类型的泛型形参。</typeparam>
      <exception cref="T:System.InvalidCastException">基础列的值类型未能强制转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="column" /> 指定的列不会出现在包含 <see cref="T:System.Data.DataRow" /> 的 <see cref="T:System.Data.DataTable" /> 中。</exception>
      <exception cref="T:System.NullReferenceException">将 null 值赋给了不可以为 null 的类型。</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
      <summary>提供对指定行中的每个列值的强类型访问。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)" /> 方法还支持可以为 null 的类型。</summary>
      <returns>由 <paramref name="column" /> 和 <paramref name="version" /> 指定的 <see cref="T:System.Data.DataColumn" /> 的值，类型为 <paramref name="T" />。</returns>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> 输入，作为扩展方法的 this 实例。</param>
      <param name="column">输入 <see cref="T:System.Data.DataColumn" /> 对象，指定要返回其值的列。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 枚举，指定要返回的列值的版本，如 Current 或 Original 版本。</param>
      <typeparam name="T">指定列的返回类型的泛型形参。</typeparam>
      <exception cref="T:System.InvalidCastException">基础列的值类型未能强制转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="column" /> 指定的列不存在于包含 <see cref="T:System.Data.DataRow" /> 的 <see cref="T:System.Data.DataTable" /> 中。</exception>
      <exception cref="T:System.NullReferenceException">将 null 值赋给了不可以为 null 的类型。</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32)">
      <summary>提供对指定行中的每个列值的强类型访问。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32)" /> 方法还支持可以为 null 的类型。</summary>
      <returns>由 <paramref name="columnIndex" /> 指定的 <see cref="T:System.Data.DataColumn" /> 的值，类型为 <paramref name="T" />。</returns>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> 输入，作为扩展方法的 this 实例。</param>
      <param name="columnIndex">列索引。</param>
      <typeparam name="T">指定列的返回类型的泛型形参。</typeparam>
      <exception cref="T:System.InvalidCastException">基础列的值类型未能强制转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 指定的列不存在于包含 <see cref="T:System.Data.DataRow" /> 的 <see cref="T:System.Data.DataTable" /> 中。</exception>
      <exception cref="T:System.NullReferenceException">将 null 值赋给了不可以为 null 的类型。</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
      <summary>提供对指定行中的每个列值的强类型访问。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)" /> 方法还支持可以为 null 的类型。</summary>
      <returns>由 <paramref name="ordinal" /> 和 <paramref name="version" /> 指定的 <see cref="T:System.Data.DataColumn" /> 的值，类型为 <paramref name="T" />。</returns>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> 输入，作为扩展方法的 this 实例。</param>
      <param name="columnIndex">要返回其值的列的从零开始的序号。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 枚举，指定要返回的列值的版本，如 Current 或 Original 版本。</param>
      <typeparam name="T">指定列的返回类型的泛型形参。</typeparam>
      <exception cref="T:System.InvalidCastException">基础列的值类型未能强制转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 指定的列不存在于包含 <see cref="T:System.Data.DataRow" /> 的 <see cref="T:System.Data.DataTable" /> 中。</exception>
      <exception cref="T:System.NullReferenceException">将 null 值赋给了不可以为 null 的类型。</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String)">
      <summary>提供对指定行中的每个列值的强类型访问。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String)" /> 方法还支持可以为 null 的类型。</summary>
      <returns>由 <paramref name="columnName" /> 指定的 <see cref="T:System.Data.DataColumn" /> 的值，类型为 <paramref name="T" />。</returns>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> 输入，作为扩展方法的 this 实例。</param>
      <param name="columnName">要返回其值的列的名称。</param>
      <typeparam name="T">指定列的返回类型的泛型形参。</typeparam>
      <exception cref="T:System.InvalidCastException">基础列的值类型未能强制转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnName" /> 指定的列不会出现在包含 <see cref="T:System.Data.DataRow" /> 的 <see cref="T:System.Data.DataTable" /> 中。</exception>
      <exception cref="T:System.NullReferenceException">将 null 值赋给了不可以为 null 的类型。</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
      <summary>提供对指定行中的每个列值的强类型访问。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String,System.Data.DataRowVersion)" /> 方法还支持可以为 null 的类型。</summary>
      <returns>由 <paramref name="columnName" /> 和 <paramref name="version" /> 指定的 <see cref="T:System.Data.DataColumn" /> 的值，类型为 <paramref name="T" />。</returns>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> 输入，作为扩展方法的 this 实例。</param>
      <param name="columnName">要返回其值的列的名称。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 枚举，指定要返回的列值的版本，如 Current 或 Original 版本。</param>
      <typeparam name="T">指定列的返回类型的泛型形参。</typeparam>
      <exception cref="T:System.InvalidCastException">基础列的值类型未能强制转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnName" /> 指定的列不存在于包含 <see cref="T:System.Data.DataRow" /> 的 <see cref="T:System.Data.DataTable" /> 中。</exception>
      <exception cref="T:System.NullReferenceException">将 null 值赋给了不可以为 null 的类型。</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Data.DataColumn,``0)">
      <summary>为 <see cref="T:System.Data.DataRow" /> 中的指定列设置一个新值。 <see cref="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Data.DataColumn,``0)" /> 方法还支持可以为 null 的类型。</summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> 输入，作为扩展方法的 this 实例。</param>
      <param name="column">输入 <see cref="T:System.Data.DataColumn" /> 指定要检索的行值。</param>
      <param name="value">指定列的新行值，类型为 <paramref name="T" />。</param>
      <typeparam name="T">指定列的值类型的泛型形参。</typeparam>
      <exception cref="T:System.ArgumentException">无法找到由 <paramref name="column" /> 指定的列。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 为 null。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试对已删除的行设置值时发生。</exception>
      <exception cref="T:System.InvalidCastException">基础列的值类型未能强制转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Int32,``0)">
      <summary>为在其上调用此方法的 <see cref="T:System.Data.DataRow" /> 中的指定列设置一个新值。 <see cref="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Int32,``0)" /> 方法还支持可以为 null 的类型。</summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> 输入，作为扩展方法的 this 实例。</param>
      <param name="columnIndex">要设置其值的列的从零开始的序号。</param>
      <param name="value">指定列的新行值，类型为 <paramref name="T" />。</param>
      <typeparam name="T">指定列的值类型的泛型形参。</typeparam>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试对已删除的行设置值时发生。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 参数超出范围。</exception>
      <exception cref="T:System.InvalidCastException">基础列的值类型无法强制转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.String,``0)">
      <summary>为 <see cref="T:System.Data.DataRow" /> 中的指定列设置一个新值。 <see cref="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.String,``0)" /> 方法还支持可以为 null 的类型。</summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> 输入，作为扩展方法的 this 实例。</param>
      <param name="columnName">要设置其值的列的名称。</param>
      <param name="value">指定列的新行值，类型为 <paramref name="T" />。</param>
      <typeparam name="T">指定列的值类型的泛型形参。</typeparam>
      <exception cref="T:System.ArgumentException">无法找到由 <paramref name="columnName" /> 指定的列。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试对已删除的行设置值时发生。</exception>
      <exception cref="T:System.InvalidCastException">基础列的值类型未能强制转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
    </member>
    <member name="T:System.Data.DataTableExtensions">
      <summary>定义 <see cref="T:System.Data.DataTable" /> 类的扩展方法。 <see cref="T:System.Data.DataTableExtensions" /> 是一个静态类。</summary>
    </member>
    <member name="M:System.Data.DataTableExtensions.AsDataView(System.Data.DataTable)">
      <summary>创建并返回支持 LINQ 的 <see cref="T:System.Data.DataView" /> 对象。</summary>
      <returns>支持 LINQ 的 <see cref="T:System.Data.DataView" /> 对象。</returns>
      <param name="table">从中创建支持 LINQ 的 <see cref="T:System.Data.DataView" /> 的源 <see cref="T:System.Data.DataTable" />。</param>
    </member>
    <member name="M:System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0})">
      <summary>创建并返回一个支持 LINQ 的 <see cref="T:System.Data.DataView" /> 对象，该对象表示 LINQ to DataSet 查询。</summary>
      <returns>支持 LINQ 的 <see cref="T:System.Data.DataView" /> 对象。</returns>
      <param name="source">从中创建支持 LINQ 的 <see cref="T:System.Data.DataView" /> 的源 LINQ to DataSet 查询。</param>
      <typeparam name="T">源序列中的对象的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
    </member>
    <member name="M:System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable)">
      <summary>返回一个 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象，其泛型参数 <paramref name="T" /> 为 <see cref="T:System.Data.DataRow" />。 此对象可用在 LINQ 表达式或方法查询中。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象，其泛型参数 <paramref name="T" /> 为 <see cref="T:System.Data.DataRow" />。</returns>
      <param name="source">可枚举的源 <see cref="T:System.Data.DataTable" />。</param>
      <exception cref="T:System.ArgumentNullException">源 <see cref="T:System.Data.DataTable" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>在给定其泛型参数 <paramref name="T" /> 为 <see cref="T:System.Data.DataRow" /> 的输入 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象的情况下，返回包含 <see cref="T:System.Data.DataRow" /> 对象副本的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>一个 <see cref="T:System.Data.DataTable" />，其中包含作为 <see cref="T:System.Data.DataRow" /> 对象的类型的输入序列。</returns>
      <param name="source">源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列。</param>
      <typeparam name="T">源序列中的对象的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <exception cref="T:System.ArgumentNullException">源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列为 null，因此无法创建新表。</exception>
      <exception cref="T:System.InvalidOperationException">源序列中的 <see cref="T:System.Data.DataRow" /> 的状态为 <see cref="F:System.Data.DataRowState.Deleted" />。 源序列不包含任何 <see cref="T:System.Data.DataRow" /> 对象。 源序列中的 <see cref="T:System.Data.DataRow" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)">
      <summary>在给定其泛型参数 <paramref name="T" /> 为 <see cref="T:System.Data.DataRow" /> 的输入 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象的情况下，将 <see cref="T:System.Data.DataRow" /> 对象复制到指定的 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="source">源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列。</param>
      <param name="table">目标 <see cref="T:System.Data.DataTable" />。</param>
      <param name="options">
        <see cref="T:System.Data.LoadOption" /> 枚举，用于指定 <see cref="T:System.Data.DataTable" /> 加载选项。</param>
      <typeparam name="T">源序列中的对象的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <exception cref="T:System.ArgumentException">复制的 <see cref="T:System.Data.DataRow" /> 对象不符合目标 <see cref="T:System.Data.DataTable" /> 的架构。</exception>
      <exception cref="T:System.ArgumentNullException">源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列为 null，或者目标 <see cref="T:System.Data.DataTable" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">源序列中的 <see cref="T:System.Data.DataRow" /> 的状态为 <see cref="F:System.Data.DataRowState.Deleted" />。 源序列不包含任何 <see cref="T:System.Data.DataRow" /> 对象。 源序列中的 <see cref="T:System.Data.DataRow" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
      <summary>在给定其泛型参数 <paramref name="T" /> 为 <see cref="T:System.Data.DataRow" /> 的输入 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象的情况下，将 <see cref="T:System.Data.DataRow" /> 对象复制到指定的 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="source">源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列。</param>
      <param name="table">目标 <see cref="T:System.Data.DataTable" />。</param>
      <param name="options">
        <see cref="T:System.Data.LoadOption" /> 枚举，用于指定 <see cref="T:System.Data.DataTable" /> 加载选项。</param>
      <param name="errorHandler">
        <see cref="T:System.Data.FillErrorEventHandler" /> 委托，表示将处理错误的方法。</param>
      <typeparam name="T">源序列中的对象的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <exception cref="T:System.ArgumentException">复制的 <see cref="T:System.Data.DataRow" /> 对象不符合目标 <see cref="T:System.Data.DataTable" /> 的架构。</exception>
      <exception cref="T:System.ArgumentNullException">源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列为 null，或者目标 <see cref="T:System.Data.DataTable" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">源序列中的 <see cref="T:System.Data.DataRow" /> 的状态为 <see cref="F:System.Data.DataRowState.Deleted" />。 - 或 - 源序列不包含任何 <see cref="T:System.Data.DataRow" /> 对象。 - 或 - 源序列中的 <see cref="T:System.Data.DataRow" /> 为 null。</exception>
    </member>
    <member name="T:System.Data.EnumerableRowCollection">
      <summary>表示从 LINQ to DataSet 查询返回的 <see cref="T:System.Data.DataRow" /> 对象的集合。 此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Data.EnumerableRowCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回 <see cref="T:System.Data.DataRow" /> 对象集合的枚举数。 此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。</summary>
      <returns>一个可用于遍历 <see cref="T:System.Data.DataRow" /> 对象的集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="T:System.Data.EnumerableRowCollection`1">
      <summary>表示从查询返回的 <see cref="T:System.Data.DataRow" /> 对象的集合。 此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。</summary>
      <typeparam name="TRow">源序列中的对象的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
    </member>
    <member name="M:System.Data.EnumerableRowCollection`1.GetEnumerator">
      <summary>返回包含的行对象集合的枚举数。 此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。</summary>
      <returns>一个强类型 <see cref="T:System.Collections.Generic.IEnumerator`1" />，可用于遍历 <paramref name="TRow" /> 对象的集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.EnumerableRowCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回 <see cref="T:System.Data.DataRow" /> 对象集合的枚举数。 此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。</summary>
      <returns>一个可用于遍历 <see cref="T:System.Data.DataRow" /> 对象的集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="T:System.Data.EnumerableRowCollectionExtensions">
      <summary>包含数据行集合类的扩展方法。 此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.Cast``1(System.Data.EnumerableRowCollection)">
      <summary>将 <see cref="T:System.Data.EnumerableRowCollection" /> 的元素转换为指定的类型。 此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。</summary>
      <returns>一个 <see cref="T:System.Data.EnumerableRowCollection" />，包含已转换为指定类型的源序列的每个元素。</returns>
      <param name="source">包含要转换的元素的 <see cref="T:System.Data.EnumerableRowCollection" />。</param>
      <typeparam name="TResult">源中的元素要转换成的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidCastException">序列中的元素不能强制转换为 <paramref name="TResult" /> 类型。</exception>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.OrderBy``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>按指定键升序排序 <see cref="T:System.Data.EnumerableRowCollection" /> 的行。 此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。</summary>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其元素按指定键排序。</returns>
      <param name="source">包含要排序的 <see cref="T:System.Data.DataRow" /> 元素的 <see cref="T:System.Data.EnumerableRowCollection" />。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.OrderBy``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>按指定键和比较器升序排序 <see cref="T:System.Data.EnumerableRowCollection" /> 的行。 此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。</summary>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其元素按指定键和比较器排序。</returns>
      <param name="source">包含要排序的 <see cref="T:System.Data.DataRow" /> 元素的 <see cref="T:System.Data.EnumerableRowCollection" />。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.OrderByDescending``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>按指定键降序排序 <see cref="T:System.Data.EnumerableRowCollection" /> 的行。 此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。</summary>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其元素按指定键排序。</returns>
      <param name="source">包含要排序的 <see cref="T:System.Data.DataRow" /> 元素的 <see cref="T:System.Data.EnumerableRowCollection" />。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.OrderByDescending``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>按指定键和比较器降序排序 <see cref="T:System.Data.EnumerableRowCollection" /> 的行。 此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。</summary>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其元素按指定键和比较器排序。</returns>
      <param name="source">包含要排序的 <see cref="T:System.Data.DataRow" /> 元素的 <see cref="T:System.Data.EnumerableRowCollection" />。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.Select``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>将 <see cref="T:System.Data.EnumerableRowCollection`1" /> 中的每个元素投影到新窗体。 此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。</summary>
      <returns>一个 <see cref="T:System.Data.EnumerableRowCollection`1" />，其元素为对 <paramref name="source" /> 的每个元素调用转换函数的结果。</returns>
      <param name="source">一个 <see cref="T:System.Data.EnumerableRowCollection`1" />，其中包含要对其调用转换函数的 <see cref="T:System.Data.DataRow" /> 元素。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="S">
        <paramref name="TRow" /> 将转换成的类型。</typeparam>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.ThenBy``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>根据指定键按升序对 <see cref="T:System.Data.EnumerableRowCollection" /> 的行进行次要排序。 此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。</summary>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其元素按指定键排序。</returns>
      <param name="source">包含要排序的 <see cref="T:System.Data.DataRow" /> 元素的 <see cref="T:System.Data.EnumerableRowCollection" />。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.ThenBy``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>根据指定键和比较器按升序对 <see cref="T:System.Data.EnumerableRowCollection" /> 的行进行次要排序。 此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。</summary>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其元素按指定键和比较器排序。</returns>
      <param name="source">包含要排序的 <see cref="T:System.Data.DataRow" /> 元素的 <see cref="T:System.Data.EnumerableRowCollection" />。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.ThenByDescending``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>根据指定键按降序对 <see cref="T:System.Data.EnumerableRowCollection" /> 的行进行次要排序。 此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。</summary>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其元素按指定键排序。</returns>
      <param name="source">包含要排序的 <see cref="T:System.Data.DataRow" /> 元素的 <see cref="T:System.Data.EnumerableRowCollection" />。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.ThenByDescending``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>根据指定键和比较器按降序对 <see cref="T:System.Data.EnumerableRowCollection" /> 的行进行次要排序。 此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。</summary>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其元素按指定键和比较器排序。</returns>
      <param name="source">包含要排序的 <see cref="T:System.Data.DataRow" /> 元素的 <see cref="T:System.Data.EnumerableRowCollection" />。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.Where``1(System.Data.EnumerableRowCollection{``0},System.Func{``0,System.Boolean})">
      <summary>按指定谓词筛选行序列。 此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。</summary>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其中包含输入序列中满足该条件的行。</returns>
      <param name="source">包含要筛选的 <see cref="T:System.Data.DataRow" /> 元素的 <see cref="T:System.Data.EnumerableRowCollection" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
    </member>
    <member name="T:System.Data.OrderedEnumerableRowCollection`1">
      <summary>此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。 表示从查询返回的经过排序的 <see cref="T:System.Data.DataRow" /> 对象的集合。</summary>
      <typeparam name="TRow">源序列中的对象的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
    </member>
    <member name="T:System.Data.TypedTableBase`1">
      <summary>此类型用作通过 Visual Studio 和 XSD.exe .NET Framework 工具生成的类型化 <see cref="T:System.Data.DataTable" /> 对象的基类，不应从代码中直接使用。</summary>
      <typeparam name="T">由表表示的源序列中的对象的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
    </member>
    <member name="M:System.Data.TypedTableBase`1.#ctor">
      <summary>初始化新的 <see cref="T:System.Data.TypedTableBase'1" />。 此方法支持通过 Visual Studio 和 XSD.exe .NET Framework 工具生成的类型化 <see cref="T:System.Data.DataTable" /> 对象。 不应直接从代码中使用此类型。</summary>
    </member>
    <member name="M:System.Data.TypedTableBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化新的 <see cref="T:System.Data.TypedTableBase'1" />。 此方法支持通过 Visual Studio 和 XSD.exe .NET Framework 工具生成的类型化 <see cref="T:System.Data.DataTable" /> 对象。 此方法不应从代码直接使用。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含用于构造对象的数据。</param>
      <param name="context">要进行反序列化的对象的流上下文。</param>
    </member>
    <member name="M:System.Data.TypedTableBase`1.Cast``1">
      <summary>将 <see cref="T:System.Data.TypedTableBase'1" /> 的元素转换为指定的类型。 此方法支持通过 Visual Studio 和 XSD.exe .NET Framework 工具生成类型化 <see cref="T:System.Data.DataTable" /> 对象。 此方法不应从代码直接使用。</summary>
      <returns>一个 <see cref="T:System.Data.EnumerableRowCollection" />，包含已转换为指定类型的源序列的每个元素。</returns>
      <typeparam name="TResult">
      </typeparam>
    </member>
    <member name="M:System.Data.TypedTableBase`1.GetEnumerator">
      <summary>返回类型化 <see cref="T:System.Data.DataRow" /> 的枚举数。 此方法支持通过 Visual Studio 和 XSD.exe .NET Framework 工具生成的类型化 <see cref="T:System.Data.DataTable" /> 对象。 此方法不应从代码直接使用。</summary>
      <returns>实现 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 接口的对象。</returns>
    </member>
    <member name="M:System.Data.TypedTableBase`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回类型化 <see cref="T:System.Data.DataRow" /> 的枚举数。 此方法支持通过 Visual Studio 和 XSD.exe .NET Framework 工具生成的类型化 <see cref="T:System.Data.DataTable" /> 对象。 此方法不应从代码直接使用。</summary>
      <returns>实现 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 接口的对象。</returns>
    </member>
    <member name="T:System.Data.TypedTableBaseExtensions">
      <summary>包含 <see cref="T:System.Data.TypedTableBase`1" /> 类的扩展方法。</summary>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.AsEnumerable``1(System.Data.TypedTableBase{``0})">
      <summary>枚举 <see cref="T:System.Data.TypedTableBase`1" /> 的数据行元素并返回一个 <see cref="T:System.Data.EnumerableRowCollection`1" /> 对象，其中泛型参数 <paramref name="T" /> 为 <see cref="T:System.Data.DataRow" />。 此对象可用在 LINQ 表达式或方法查询中。</summary>
      <returns>一个 <see cref="T:System.Data.EnumerableRowCollection`1" /> 对象，其泛型参数 <paramref name="T" /> 为 <see cref="T:System.Data.DataRow" />。</returns>
      <param name="source">可枚举的源 <see cref="T:System.Data.TypedTableBase`1" />。</param>
      <typeparam name="TRow">源中的元素要转换成的类型。</typeparam>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.ElementAtOrDefault``1(System.Data.TypedTableBase{``0},System.Int32)">
      <summary>返回序列中指定行处的元素；如果行超出范围，则返回默认值。</summary>
      <returns>序列中指定行处的元素。</returns>
      <param name="source">要从中返回元素的可枚举对象。</param>
      <param name="index">要检索的从零开始的元素索引。</param>
      <typeparam name="TRow">数组或行的类型。</typeparam>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.OrderBy``2(System.Data.TypedTableBase{``0},System.Func{``0,``1})">
      <summary>按指定键升序排序 <see cref="T:System.Data.TypedTableBase`1" /> 的行。</summary>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其元素按指定键排序。</returns>
      <param name="source">一个 <see cref="T:System.Data.TypedTableBase`1" />，其中包含要排序的 <see cref="T:System.Data.DataRow" /> 元素。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.OrderBy``2(System.Data.TypedTableBase{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>按指定键和比较器升序排序 <see cref="T:System.Data.TypedTableBase`1" /> 的行。</summary>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其元素按指定键和比较器排序。</returns>
      <param name="source">一个 <see cref="T:System.Data.TypedTableBase`1" />，其中包含要排序的 <see cref="T:System.Data.DataRow" /> 元素。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.OrderByDescending``2(System.Data.TypedTableBase{``0},System.Func{``0,``1})">
      <summary>按指定键降序排序 <see cref="T:System.Data.TypedTableBase`1" /> 的行。</summary>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其元素按指定键排序。</returns>
      <param name="source">一个 <see cref="T:System.Data.TypedTableBase`1" />，其中包含要排序的 <see cref="T:System.Data.DataRow" /> 元素。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.OrderByDescending``2(System.Data.TypedTableBase{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>按指定键和比较器降序排序 <see cref="T:System.Data.TypedTableBase`1" /> 的行。</summary>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其元素按指定键和比较器排序。</returns>
      <param name="source">一个 <see cref="T:System.Data.TypedTableBase`1" />，其中包含要排序的 <see cref="T:System.Data.DataRow" /> 元素。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.Select``2(System.Data.TypedTableBase{``0},System.Func{``0,``1})">
      <summary>将 <see cref="T:System.Data.TypedTableBase`1" /> 中的每个元素投影到新窗体。</summary>
      <returns>一个 <see cref="T:System.Data.EnumerableRowCollection`1" />，其元素是对 <paramref name="source" /> 的每个元素调用转换函数的结果。</returns>
      <param name="source">一个 <see cref="T:System.Data.TypedTableBase`1" />，其中包含要对其调用转换函数的 <see cref="T:System.Data.DataRow" /> 元素。</param>
      <param name="selector">要应用于每个元素的转换函数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="S">
      </typeparam>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.Where``1(System.Data.TypedTableBase{``0},System.Func{``0,System.Boolean})">
      <summary>按指定谓词筛选行序列。</summary>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其中包含输入序列中满足该条件的行。</returns>
      <param name="source">一个 <see cref="T:System.Data.TypedTableBase`1" />，其中包含要筛选的 <see cref="T:System.Data.DataRow" /> 元素。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型 <see cref="T:System.Data.DataRow" />。</typeparam>
    </member>
  </members>
</doc>