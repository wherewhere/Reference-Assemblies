<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.EnterpriseServices</name>
  </assembly>
  <members>
    <member name="T:System.EnterpriseServices.AccessChecksLevelOption">
      <summary>为应用程序指定访问检查级别，检查可以只在进程级别，也可以在包括组件、接口和方法级别的所有级别。</summary>
    </member>
    <member name="F:System.EnterpriseServices.AccessChecksLevelOption.Application">
      <summary>仅在进程级别启用访问检查。 在组件、接口或方法级别不进行访问检查。</summary>
    </member>
    <member name="F:System.EnterpriseServices.AccessChecksLevelOption.ApplicationComponent">
      <summary>在应用程序调用的每一个级别启用访问检查。</summary>
    </member>
    <member name="T:System.EnterpriseServices.ActivationOption">
      <summary>指定在应用程序中激活已维护的组件的方式。</summary>
    </member>
    <member name="F:System.EnterpriseServices.ActivationOption.Library">
      <summary>指定在创建者的进程中激活标记的应用程序中的已维护的组件。</summary>
    </member>
    <member name="F:System.EnterpriseServices.ActivationOption.Server">
      <summary>指定在系统提供的进程中激活标记的应用程序中的已维护的组件。</summary>
    </member>
    <member name="T:System.EnterpriseServices.Activity">
      <summary>创建一个活动以同步或异步批处理工作，该工作可使用 COM+ 服务而无需创建 COM+ 组件。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Activity.#ctor(System.EnterpriseServices.ServiceConfig)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.Activity" /> 类的新实例。</summary>
      <param name="cfg">一个包含要使用的服务的配置信息的 <see cref="T:System.EnterpriseServices.ServiceConfig" />。</param>
      <exception cref="T:System.PlatformNotSupportedException">当前平台不支持 <see cref="T:System.EnterpriseServices.Activity" />。</exception>
    </member>
    <member name="M:System.EnterpriseServices.Activity.AsynchronousCall(System.EnterpriseServices.IServiceCall)">
      <summary>异步运行指定用户定义的批处理工作。</summary>
      <param name="serviceCall">一个用于实现批处理工作的 <see cref="T:System.EnterpriseServices.IServiceCall" /> 对象。</param>
    </member>
    <member name="M:System.EnterpriseServices.Activity.BindToCurrentThread">
      <summary>将用户定义的工作绑定到当前线程。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Activity.SynchronousCall(System.EnterpriseServices.IServiceCall)">
      <summary>同步运行指定用户定义的批处理工作。</summary>
      <param name="serviceCall">一个用于实现批处理工作的 <see cref="T:System.EnterpriseServices.IServiceCall" /> 对象。</param>
    </member>
    <member name="M:System.EnterpriseServices.Activity.UnbindFromThread">
      <summary>在批处理工作正在运行的线程上，取消绑定由 <see cref="M:System.EnterpriseServices.Activity.SynchronousCall(System.EnterpriseServices.IServiceCall)" /> 或 <see cref="M:System.EnterpriseServices.Activity.AsynchronousCall(System.EnterpriseServices.IServiceCall)" /> 方法提交的批处理工作。</summary>
    </member>
    <member name="T:System.EnterpriseServices.ApplicationAccessControlAttribute">
      <summary>为包含 <see cref="T:System.EnterpriseServices.ServicedComponent" /> 类的程序集指定访问控制。</summary>
    </member>
    <member name="M:System.EnterpriseServices.ApplicationAccessControlAttribute.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.ApplicationAccessControlAttribute" /> 类的新实例，启用 COM+ 安全配置。</summary>
    </member>
    <member name="M:System.EnterpriseServices.ApplicationAccessControlAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.ApplicationAccessControlAttribute" /> 类的新实例并设置 <see cref="P:System.EnterpriseServices.ApplicationAccessControlAttribute.Value" /> 属性以指示是否启用 COM 安全配置。</summary>
      <param name="val">若要允许安全配置，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.EnterpriseServices.ApplicationAccessControlAttribute.AccessChecksLevel">
      <summary>获取访问检查级别或将访问检查级别设置为进程级别或组件级别。</summary>
      <returns>
        <see cref="T:System.EnterpriseServices.AccessChecksLevelOption" /> 值之一。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ApplicationAccessControlAttribute.Authentication">
      <summary>获取或设置远程过程调用 (RPC) 身份验证级别。</summary>
      <returns>
        <see cref="T:System.EnterpriseServices.AuthenticationOption" /> 值之一。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ApplicationAccessControlAttribute.ImpersonationLevel">
      <summary>获取或设置模拟级别，该级别允许调用该应用程序的目标。</summary>
      <returns>
        <see cref="T:System.EnterpriseServices.ImpersonationLevelOption" /> 值之一。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ApplicationAccessControlAttribute.Value">
      <summary>获取或设置一个值，该值指示是否启用 COM+ 安全配置。</summary>
      <returns>如果启用 COM+ 安全配置，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.EnterpriseServices.ApplicationActivationAttribute">
      <summary>指定程序集中的组件是在创建者的进程中运行还是在系统进程中运行。</summary>
    </member>
    <member name="M:System.EnterpriseServices.ApplicationActivationAttribute.#ctor(System.EnterpriseServices.ActivationOption)">
      <summary>设置指定的 <see cref="T:System.EnterpriseServices.ActivationOption" /> 值初始化 <see cref="T:System.EnterpriseServices.ApplicationActivationAttribute" /> 类的新实例。</summary>
      <param name="opt">
        <see cref="T:System.EnterpriseServices.ActivationOption" /> 值之一。</param>
    </member>
    <member name="P:System.EnterpriseServices.ApplicationActivationAttribute.SoapMailbox">
      <summary>该属性在当前版本中不受支持。</summary>
      <returns>该属性在当前版本中不受支持。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ApplicationActivationAttribute.SoapVRoot">
      <summary>获取或设置一个值，该值表示 COM+ 应用程序在 Web 上的虚拟根。</summary>
      <returns>COM+ 应用程序在 Web 上的虚拟根。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ApplicationActivationAttribute.Value">
      <summary>获取指定的 <see cref="T:System.EnterpriseServices.ActivationOption" /> 值。</summary>
      <returns>
        <see cref="T:System.EnterpriseServices.ActivationOption" /> 值之一，可以是 Library 或 Server。</returns>
    </member>
    <member name="T:System.EnterpriseServices.ApplicationIDAttribute">
      <summary>为该程序集指定应用程序 ID（作为 GUID）。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.ApplicationIDAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.ApplicationIDAttribute" /> 类的新实例，该类指定表示 COM+ 应用程序的应用程序 ID 的 GUID。</summary>
      <param name="guid">与 COM+ 应用程序关联的 GUID。</param>
    </member>
    <member name="P:System.EnterpriseServices.ApplicationIDAttribute.Value">
      <summary>获取 COM+ 应用程序的 GUID。</summary>
      <returns>表示 COM+ 应用程序的 GUID。</returns>
    </member>
    <member name="T:System.EnterpriseServices.ApplicationNameAttribute">
      <summary>指定将用于程序集中组件安装的 COM+ 应用程序的名称。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.ApplicationNameAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.ApplicationNameAttribute" /> 类的新实例，指定将用于组件安装的 COM+ 应用程序的名称。</summary>
      <param name="name">COM+ 应用程序的名称。</param>
    </member>
    <member name="P:System.EnterpriseServices.ApplicationNameAttribute.Value">
      <summary>获取一个值，该值指示在程序集中包含组件的 COM+ 应用程序的名称。</summary>
      <returns>COM+ 应用程序的名称。</returns>
    </member>
    <member name="T:System.EnterpriseServices.ApplicationQueuingAttribute">
      <summary>为标记的程序集启用队列支持，并启用应用程序从“消息队列”队列读取方法调用。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.ApplicationQueuingAttribute.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.ApplicationQueuingAttribute" /> 类的新实例，并且为程序集启用队列支持以及初始化 <see cref="P:System.EnterpriseServices.ApplicationQueuingAttribute.Enabled" />、<see cref="P:System.EnterpriseServices.ApplicationQueuingAttribute.QueueListenerEnabled" /> 和 <see cref="P:System.EnterpriseServices.ApplicationQueuingAttribute.MaxListenerThreads" />。</summary>
    </member>
    <member name="P:System.EnterpriseServices.ApplicationQueuingAttribute.Enabled">
      <summary>获取或设置一个值，该值指示是否启用队列支持。</summary>
      <returns>如果启用队列支持，则为 true；否则为 false。 构造函数设置的默认值是 true。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ApplicationQueuingAttribute.MaxListenerThreads">
      <summary>获取或设置用于从队列提取消息并激活相应组件的线程的数目。</summary>
      <returns>用于处理到达队列中的消息的线程的最大数目。 默认值为零。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ApplicationQueuingAttribute.QueueListenerEnabled">
      <summary>获取或设置一个值，该值指示应用程序是否将从客户端接受已排队的组件调用。</summary>
      <returns>如果应用程序接受已排队的组件调用，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.EnterpriseServices.AuthenticationOption">
      <summary>指定远程过程调用 (RPC) 身份验证机制。 只在当 <see cref="T:System.EnterpriseServices.ActivationOption" /> 设置为 Server 时适用。</summary>
    </member>
    <member name="F:System.EnterpriseServices.AuthenticationOption.Call">
      <summary>在每一调用的开始时验证凭据。</summary>
    </member>
    <member name="F:System.EnterpriseServices.AuthenticationOption.Connect">
      <summary>只在进行连接时验证凭据。</summary>
    </member>
    <member name="F:System.EnterpriseServices.AuthenticationOption.Default">
      <summary>将默认的身份验证级别用于指定的身份验证服务。 在 COM+ 中，此设置由 LocalComputer 集合中的 DefaultAuthenticationLevel 属性提供。</summary>
    </member>
    <member name="F:System.EnterpriseServices.AuthenticationOption.Integrity">
      <summary>验证凭据并验证在转换中没有修改任何调用数据。</summary>
    </member>
    <member name="F:System.EnterpriseServices.AuthenticationOption.None">
      <summary>不进行身份验证。</summary>
    </member>
    <member name="F:System.EnterpriseServices.AuthenticationOption.Packet">
      <summary>验证凭据并验证接收了所有调用数据。</summary>
    </member>
    <member name="F:System.EnterpriseServices.AuthenticationOption.Privacy">
      <summary>验证凭据并加密数据包，其中包括数据以及发送方的标识和签名。</summary>
    </member>
    <member name="T:System.EnterpriseServices.AutoCompleteAttribute">
      <summary>将特性化方法标记为 AutoComplete 对象。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.AutoCompleteAttribute.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.AutoCompleteAttribute" /> 类的新实例，并指定如果事务成功完成应用程序应自动调用 <see cref="M:System.EnterpriseServices.ContextUtil.SetComplete" />。</summary>
    </member>
    <member name="M:System.EnterpriseServices.AutoCompleteAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.AutoCompleteAttribute" /> 类的新实例，并指定是否启用 COM+ AutoComplete。</summary>
      <param name="val">若要在 COM+ 对象中启用 AutoComplete，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.EnterpriseServices.AutoCompleteAttribute.Value">
      <summary>获取一个值，该值指示 COM+ 中 AutoComplete 选项的设置。</summary>
      <returns>如果在 COM+ 中启用 AutoComplete，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="T:System.EnterpriseServices.BindingOption">
      <summary>指示是否将由 <see cref="T:System.EnterpriseServices.Activity" /> 提交的所有工作仅绑定到一个单线程单元 (STA)。 此枚举对多线程单元 (MTA) 不起作用。</summary>
    </member>
    <member name="F:System.EnterpriseServices.BindingOption.BindingToPoolThread">
      <summary>该活动提交的工作被绑定到单个 STA。</summary>
    </member>
    <member name="F:System.EnterpriseServices.BindingOption.NoBinding">
      <summary>该活动提交的工作未被绑定到单个 STA。</summary>
    </member>
    <member name="T:System.EnterpriseServices.BOID">
      <summary>表示与事务关联的工作单元。 该结构用于 <see cref="T:System.EnterpriseServices.XACTTRANSINFO" /> 中。</summary>
    </member>
    <member name="F:System.EnterpriseServices.BOID.rgb">
      <summary>表示包含数据的数组。</summary>
    </member>
    <member name="T:System.EnterpriseServices.BYOT">
      <summary>包装 COM+ ByotServerEx 类以及 COM+ DTC 接口 ICreateWithTransactionEx 和 ICreateWithTipTransactionEx。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.BYOT.CreateWithTipTransaction(System.String,System.Type)">
      <summary>使用事务 Internet 协议 (TIP) 创建在手动事务内登记的对象。</summary>
      <returns>请求的事务。</returns>
      <param name="url">指定事务的 TIP URL。</param>
      <param name="t">类型。</param>
    </member>
    <member name="M:System.EnterpriseServices.BYOT.CreateWithTransaction(System.Object,System.Type)">
      <summary>创建在手动事务内登记的对象。</summary>
      <returns>请求的事务。</returns>
      <param name="transaction">指定事务的 <see cref="T:System.EnterpriseServices.ITransaction" /> 或 <see cref="T:System.Transactions.Transaction" /> 对象。</param>
      <param name="t">指定的类型。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.ComponentAccessControlAttribute">
      <summary>在对组件的调用上启用安全检查。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.ComponentAccessControlAttribute.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.ComponentAccessControlAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.EnterpriseServices.ComponentAccessControlAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.ComponentAccessControlAttribute" /> 类的一个新实例，并设置 <see cref="P:System.EnterpriseServices.ComponentAccessControlAttribute.Value" /> 属性以指示是否启用 COM+ 安全配置。</summary>
      <param name="val">若要在对组件的调用上启用安全检查，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.EnterpriseServices.ComponentAccessControlAttribute.Value">
      <summary>获取一个值，该值指示是否在对组件的调用上启用安全检查。</summary>
      <returns>如果启用安全检查，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.EnterpriseServices.COMTIIntrinsicsAttribute">
      <summary>使您可以将上下文属性从 COM 事务集成器 (COMTI) 传递到 COM+ 上下文中。</summary>
    </member>
    <member name="M:System.EnterpriseServices.COMTIIntrinsicsAttribute.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.COMTIIntrinsicsAttribute" /> 类的新实例，并将 <see cref="P:System.EnterpriseServices.COMTIIntrinsicsAttribute.Value" /> 属性设置为 true。</summary>
    </member>
    <member name="M:System.EnterpriseServices.COMTIIntrinsicsAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.COMTIIntrinsicsAttribute" /> 类的新实例，并启用 <see cref="P:System.EnterpriseServices.COMTIIntrinsicsAttribute.Value" /> 属性的设置。</summary>
      <param name="val">如果 COMTI 上下文属性传递到 COM+ 上下文中，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.EnterpriseServices.COMTIIntrinsicsAttribute.Value">
      <summary>获取一个值，该值指示 COM 事务集成器 (COMTI) 上下文属性是否已传递到 COM+ 上下文中。</summary>
      <returns>如果 COMTI 上下文属性传递到 COM+ 上下文中，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="T:System.EnterpriseServices.ConstructionEnabledAttribute">
      <summary>启用 COM+ 对象结构支持。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.ConstructionEnabledAttribute.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.ConstructionEnabledAttribute" /> 类的新实例并初始化 <see cref="P:System.EnterpriseServices.ConstructionEnabledAttribute.Enabled" /> 和 <see cref="P:System.EnterpriseServices.ConstructionEnabledAttribute.Default" /> 的默认设置。</summary>
    </member>
    <member name="M:System.EnterpriseServices.ConstructionEnabledAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.ConstructionEnabledAttribute" /> 类的新实例，并将 <see cref="P:System.EnterpriseServices.ConstructionEnabledAttribute.Enabled" /> 设置为指定值。</summary>
      <param name="val">若要启用 COM+ 对象结构支持，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.EnterpriseServices.ConstructionEnabledAttribute.Default">
      <summary>获取或设置构造函数字符串的默认值。</summary>
      <returns>将用作默认构造函数字符串的值。 默认值为空字符串 ("")。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ConstructionEnabledAttribute.Enabled">
      <summary>获取或设置一个值，该值指示是否启用 COM+ 对象结构支持。</summary>
      <returns>如果启用 COM+ 对象结构支持，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="T:System.EnterpriseServices.ContextUtil">
      <summary>获取有关 COM+ 对象上下文的信息。 此类不能被继承。</summary>
    </member>
    <member name="P:System.EnterpriseServices.ContextUtil.ActivityId">
      <summary>获取一个 GUID，它表示包含组件的活动。</summary>
      <returns>如果当前上下文是某个活动的一部分，则为该活动的 GUID；否则为 GUID_NULL。</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">没有可用的 COM+ 上下文。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此平台不是 Windows 2000 或更高版本。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.EnterpriseServices.ContextUtil.ApplicationId">
      <summary>获取当前应用程序的 GUID。</summary>
      <returns>当前应用程序的 GUID。</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">没有可用的 COM+ 上下文。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此平台不是 Windows XP 或更高版本。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.EnterpriseServices.ContextUtil.ApplicationInstanceId">
      <summary>获取当前应用程序实例的 GUID。</summary>
      <returns>当前应用程序实例的 GUID。</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">没有可用的 COM+ 上下文。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此平台不是 Windows XP 或更高版本。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.EnterpriseServices.ContextUtil.ContextId">
      <summary>获取当前上下文的 GUID。</summary>
      <returns>当前上下文的 GUID。</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">没有可用的 COM+ 上下文。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此平台不是 Windows 2000 或更高版本。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.EnterpriseServices.ContextUtil.DeactivateOnReturn">
      <summary>获取或设置 COM+ 上下文中的 done 位。</summary>
      <returns>如果该方法返回时将停用此对象，则为 true；否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">没有可用的 COM+ 上下文。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此平台不是 Windows 2000 或更高版本。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.ContextUtil.DisableCommit">
      <summary>在 COM+ 上下文中将 consistent 位和 done 位设置为 false。</summary>
      <exception cref="T:System.Runtime.InteropServices.COMException">没有 COM+ 上下文可用。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.ContextUtil.EnableCommit">
      <summary>在 COM+ 上下文中将 consistent 位设置为 true，并将 done 位设置为 false。</summary>
      <exception cref="T:System.Runtime.InteropServices.COMException">没有 COM+ 上下文可用。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.ContextUtil.GetNamedProperty(System.String)">
      <summary>从 COM+ 上下文返回命名的属性。</summary>
      <returns>上下文的命名的属性。</returns>
      <param name="name">请求的属性的名称。</param>
      <exception cref="T:System.Runtime.InteropServices.COMException">没有可用的 COM+ 上下文。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此平台不是 Windows 2000 或更高版本。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.ContextUtil.IsCallerInRole(System.String)">
      <summary>确定调用方是否属于指定角色。</summary>
      <returns>如果调用方属于指定角色，则为 true；否则为 false。</returns>
      <param name="role">要检查的角色的名称。</param>
      <exception cref="T:System.Runtime.InteropServices.COMException">没有可用的 COM+ 上下文。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.ContextUtil.IsDefaultContext">
      <summary>确定已维护的组件在默认上下文中是否激活。 在默认上下文中激活那些没有 COM+ 目录信息的已维护组件。</summary>
      <returns>如果在默认上下文中激活已维护组件，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ContextUtil.IsInTransaction">
      <summary>获取一个值，该值指示当前上下文是否为事务性上下文。</summary>
      <returns>如果当前上下文是事务性的，则为 true；否则为 false。</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">没有可用的 COM+ 上下文。</exception>
    </member>
    <member name="P:System.EnterpriseServices.ContextUtil.IsSecurityEnabled">
      <summary>获取一个值，该值指示基于角色的安全性在当前上下文中是否处于活动状态。</summary>
      <returns>如果当前上下文启用了安全性，则为 true；否则为 false。</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">没有可用的 COM+ 上下文。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.EnterpriseServices.ContextUtil.MyTransactionVote">
      <summary>获取或设置 COM+ 上下文中的 consistent 位。</summary>
      <returns>
        <see cref="T:System.EnterpriseServices.TransactionVote" /> 值之一，可以是 Commit 或 Abort。</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">没有可用的 COM+ 上下文。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此平台不是 Windows 2000 或更高版本。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.EnterpriseServices.ContextUtil.PartitionId">
      <summary>获取当前分区的 GUID。</summary>
      <returns>当前分区的 GUID。</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">没有可用的 COM+ 上下文。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此平台不是 Windows XP 或更高版本。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.ContextUtil.SetAbort">
      <summary>在 COM+ 上下文中将 consistent 位设置为 false，并将 done 位设置为 true。</summary>
      <exception cref="T:System.Runtime.InteropServices.COMException">没有可用的 COM+ 上下文。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.ContextUtil.SetComplete">
      <summary>在 COM+ 上下文中设置 consistent 位，并将 done 位设置为 true。</summary>
      <exception cref="T:System.Runtime.InteropServices.COMException">没有可用的 COM+ 上下文。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.ContextUtil.SetNamedProperty(System.String,System.Object)">
      <summary>设置 COM+ 上下文的命名属性。</summary>
      <param name="name">要设置的属性的名称。</param>
      <param name="value">表示要设置的属性值的对象。</param>
      <exception cref="T:System.Runtime.InteropServices.COMException">没有可用的 COM+ 上下文。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此平台不是 Windows 2000 或更高版本。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.EnterpriseServices.ContextUtil.SystemTransaction">
      <summary>获取当前事务上下文。</summary>
      <returns>表示当前事务上下文的 <see cref="T:System.Transactions.Transaction" />。</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">没有可用的 COM+ 上下文。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此平台不是 Windows 2000 或更高版本。</exception>
    </member>
    <member name="P:System.EnterpriseServices.ContextUtil.Transaction">
      <summary>获取描述当前 COM+ DTC 事务的对象。</summary>
      <returns>表示当前事务的对象。</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">没有可用的 COM+ 上下文。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此平台不是 Windows 2000 或更高版本。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.EnterpriseServices.ContextUtil.TransactionId">
      <summary>获取当前 COM+ DTC 事务的 GUID。</summary>
      <returns>一个 GUID，表示当前 COM+ DTC 事务（如果存在该事务）。</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">没有可用的 COM+ 上下文。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此平台不是 Windows 2000 或更高版本。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.DescriptionAttribute">
      <summary>设置有关程序集（应用程序）、组件、方法或接口的说明。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.DescriptionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.DescriptionAttribute" /> 类的新实例。</summary>
      <param name="desc">有关程序集（应用程序）、组件、方法或接口的说明。</param>
    </member>
    <member name="T:System.EnterpriseServices.EventClassAttribute">
      <summary>将特性化类标记为事件类。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.EventClassAttribute.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.EventClassAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.EnterpriseServices.EventClassAttribute.AllowInprocSubscribers">
      <summary>获取或设置一个值，该值指示是否可以在发行者的进程中激活订户。</summary>
      <returns>如果可在发行者的进程中激活订户，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.EnterpriseServices.EventClassAttribute.FireInParallel">
      <summary>获取或设置一个值，该值指示是否同时将事件传递给订户。</summary>
      <returns>如果同时将事件传送给订户，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.EnterpriseServices.EventClassAttribute.PublisherFilter">
      <summary>获取或设置事件方法的发行者筛选器。</summary>
      <returns>发行者筛选器。</returns>
    </member>
    <member name="T:System.EnterpriseServices.EventTrackingEnabledAttribute">
      <summary>为组件启用事件跟踪。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.EventTrackingEnabledAttribute.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.EventTrackingEnabledAttribute" /> 类的新实例，并启用事件跟踪。</summary>
    </member>
    <member name="M:System.EnterpriseServices.EventTrackingEnabledAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.EventTrackingEnabledAttribute" /> 类的新实例，并可以选择禁用事件跟踪。</summary>
      <param name="val">若要启用事件跟踪，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.EnterpriseServices.EventTrackingEnabledAttribute.Value">
      <summary>获取 <see cref="P:System.EnterpriseServices.EventTrackingEnabledAttribute.Value" /> 属性的值，该值指示是否启用跟踪。</summary>
      <returns>如果启用跟踪，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="T:System.EnterpriseServices.ExceptionClassAttribute">
      <summary>设置排队类的排队异常类。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.ExceptionClassAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.ExceptionClassAttribute" /> 类的新实例。</summary>
      <param name="name">用于在消息被路由到死信队列之前由播放机激活并播放的异常类的名称。</param>
    </member>
    <member name="P:System.EnterpriseServices.ExceptionClassAttribute.Value">
      <summary>获取用于在消息被路由到死信队列之前由播放机激活并播放的异常类的名称。</summary>
      <returns>用于在消息被路由到死信队列之前由播放机激活并播放的异常类的名称。</returns>
    </member>
    <member name="T:System.EnterpriseServices.IAsyncErrorNotify">
      <summary>在由 <see cref="T:System.EnterpriseServices.Activity" /> 对象提交的异步批处理工作上实现错误捕获。</summary>
    </member>
    <member name="M:System.EnterpriseServices.IAsyncErrorNotify.OnError(System.Int32)">
      <summary>处理异步批处理工作的错误。</summary>
      <param name="hresult">批处理工作正在异步运行时发生的错误的 HRESULT。</param>
    </member>
    <member name="T:System.EnterpriseServices.IISIntrinsicsAttribute">
      <summary>启用从 <see cref="M:System.EnterpriseServices.ContextUtil.GetNamedProperty(System.String)" /> 对 ASP 内部值的访问。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.IISIntrinsicsAttribute.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.IISIntrinsicsAttribute" /> 类的新实例，并且启用对 ASP 内部值的访问。</summary>
    </member>
    <member name="M:System.EnterpriseServices.IISIntrinsicsAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.IISIntrinsicsAttribute" /> 类的新实例，并且可以选择禁用对 ASP 内部值的访问。</summary>
      <param name="val">若要启用对 ASP 内部值的访问，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.EnterpriseServices.IISIntrinsicsAttribute.Value">
      <summary>获取一个值，该值指示是否启用对 ASP 内部值的访问。</summary>
      <returns>如果启用了访问，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="T:System.EnterpriseServices.ImpersonationLevelOption">
      <summary>指定调用服务器应用程序的目标时允许的模拟级别。</summary>
    </member>
    <member name="F:System.EnterpriseServices.ImpersonationLevelOption.Anonymous">
      <summary>客户端对于服务器而言是匿名的。 服务器进程可以模拟客户端，但模拟标记不包含与客户端有关的任何信息。</summary>
    </member>
    <member name="F:System.EnterpriseServices.ImpersonationLevelOption.Default">
      <summary>将默认的模拟级别用于指定的身份验证服务。 在 COM+ 中，此设置由 LocalComputer 集合中的 DefaultImpersonationLevel 属性提供。</summary>
    </member>
    <member name="F:System.EnterpriseServices.ImpersonationLevelOption.Delegate">
      <summary>功能最强大的模拟级别。 如果选择了该级别，则服务器（无论是本地的还是远程的）可以在代表客户端的同时模拟客户端的安全上下文。</summary>
    </member>
    <member name="F:System.EnterpriseServices.ImpersonationLevelOption.Identify">
      <summary>系统默认级别。 服务器可以获取客户端的标识，并且服务器可以模拟客户端以进行 ACL 检查。</summary>
    </member>
    <member name="F:System.EnterpriseServices.ImpersonationLevelOption.Impersonate">
      <summary>服务器可以在代表客户端的同时模拟客户端的安全上下文。 服务器可以访问作为客户端的本地资源。</summary>
    </member>
    <member name="T:System.EnterpriseServices.InheritanceOption">
      <summary>指示基于当前上下文或基于 <see cref="T:System.EnterpriseServices.ServiceConfig" /> 中的信息创建新的上下文。</summary>
    </member>
    <member name="F:System.EnterpriseServices.InheritanceOption.Ignore">
      <summary>新上下文从默认上下文创建。</summary>
    </member>
    <member name="F:System.EnterpriseServices.InheritanceOption.Inherit">
      <summary>新上下文从现有上下文创建。 <see cref="F:System.EnterpriseServices.InheritanceOption.Inherit" /> 是 <see cref="P:System.EnterpriseServices.ServiceConfig.Inheritance" /> 的默认值。</summary>
    </member>
    <member name="T:System.EnterpriseServices.InstallationFlags">
      <summary>与 <see cref="T:System.EnterpriseServices.RegistrationHelper" /> 类一起使用的标志。</summary>
    </member>
    <member name="F:System.EnterpriseServices.InstallationFlags.Configure">
      <summary>不应使用。</summary>
    </member>
    <member name="F:System.EnterpriseServices.InstallationFlags.ConfigureComponentsOnly">
      <summary>仅配置组件，不配置方法或接口。</summary>
    </member>
    <member name="F:System.EnterpriseServices.InstallationFlags.CreateTargetApplication">
      <summary>创建目标应用程序。 如果目标已经存在，则出错。</summary>
    </member>
    <member name="F:System.EnterpriseServices.InstallationFlags.Default">
      <summary>执行默认安装，在此类安装中会执行配置、安装和注册步骤，并假设应用程序已存在。</summary>
    </member>
    <member name="F:System.EnterpriseServices.InstallationFlags.ExpectExistingTypeLib">
      <summary>不导出类型库；可以通过生成的或提供的类型库名称找到类型库。</summary>
    </member>
    <member name="F:System.EnterpriseServices.InstallationFlags.FindOrCreateTargetApplication">
      <summary>如果应用程序不存在，则创建应用程序；否则使用现有的应用程序。</summary>
    </member>
    <member name="F:System.EnterpriseServices.InstallationFlags.Install">
      <summary>不应使用。</summary>
    </member>
    <member name="F:System.EnterpriseServices.InstallationFlags.ReconfigureExistingApplication">
      <summary>如果使用现有的应用程序，请确保此应用程序的属性与程序集中的属性匹配。</summary>
    </member>
    <member name="F:System.EnterpriseServices.InstallationFlags.Register">
      <summary>不应使用。</summary>
    </member>
    <member name="F:System.EnterpriseServices.InstallationFlags.ReportWarningsToConsole">
      <summary>当遇到警报文字时，将其写入控制台。</summary>
    </member>
    <member name="T:System.EnterpriseServices.InterfaceQueuingAttribute">
      <summary>为标记的接口启用队列支持。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.InterfaceQueuingAttribute.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.InterfaceQueuingAttribute" /> 类的新实例，并将 <see cref="P:System.EnterpriseServices.InterfaceQueuingAttribute.Enabled" /> 和 <see cref="P:System.EnterpriseServices.InterfaceQueuingAttribute.Interface" /> 属性设置为其默认值。</summary>
    </member>
    <member name="M:System.EnterpriseServices.InterfaceQueuingAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.InterfaceQueuingAttribute" /> 类的新实例，并可以选择禁用队列支持。</summary>
      <param name="enabled">若要启用队列支持，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.EnterpriseServices.InterfaceQueuingAttribute.Enabled">
      <summary>获取或设置一个值，该值指示是否启用队列支持。</summary>
      <returns>如果启用队列支持，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.EnterpriseServices.InterfaceQueuingAttribute.Interface">
      <summary>获取或设置在其上启用队列的接口的名称。</summary>
      <returns>在其上启用队列的接口的名称。</returns>
    </member>
    <member name="T:System.EnterpriseServices.IPlaybackControl">
      <summary>“消息队列”传送机制的服务器端播放错误和客户端失败的异常处理中的“排队组件”中的函数。</summary>
    </member>
    <member name="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry">
      <summary>通知客户端异常处理组件，消息队列将消息发送至服务器的所有尝试均被拒绝，消息终止于客户端的 Xact 死信队列。</summary>
    </member>
    <member name="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry">
      <summary>通知服务器端异常类实现，所有将被推迟的激活播放至服务器的尝试均已失败，该消息将被移至其最终静止队列。</summary>
    </member>
    <member name="T:System.EnterpriseServices.IProcessInitControl">
      <summary>支持为 <see cref="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)" /> 方法设置超时。</summary>
    </member>
    <member name="M:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout(System.Int32)">
      <summary>设置在 <see cref="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)" /> 方法超时之前剩余的秒数。</summary>
      <param name="dwSecondsRemaining">剩余的时间（秒），超过此时间之后，方法启动超时。</param>
    </member>
    <member name="T:System.EnterpriseServices.IProcessInitializer">
      <summary>支持 COM 组件启动或关闭时可调用的方法。</summary>
    </member>
    <member name="M:System.EnterpriseServices.IProcessInitializer.Shutdown">
      <summary>执行关闭操作。 关闭 Dllhost.exe 时被调用。</summary>
    </member>
    <member name="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)">
      <summary>在启动时执行初始化。 启动 Dllhost.exe 时被调用。</summary>
      <param name="punkProcessControl">在 Microsoft Windows XP 中，一个指向 IUnknown COM 组件启动接口的指针。 在 Microsoft Windows 2000 中，该参数始终为 null。</param>
    </member>
    <member name="T:System.EnterpriseServices.IRegistrationHelper">
      <summary>在 COM+ 目录中安装并配置程序集。</summary>
    </member>
    <member name="M:System.EnterpriseServices.IRegistrationHelper.InstallAssembly(System.String,System.String@,System.String@,System.EnterpriseServices.InstallationFlags)">
      <summary>将程序集安装到 COM+ 目录中。</summary>
      <param name="assembly">作为文件的程序集名称或者全局程序集缓存 (GAC) 中的程序集的强名称。</param>
      <param name="application">应用程序参数可以是 null。 如果确实是该设置，则基于程序集的名称或 ApplicationName 特性自动生成应用程序的名称。 如果应用程序包含 ApplicationID 特性，则此特性优先。</param>
      <param name="tlb">输出类型库 (TLB) 文件的名称；如果应由注册帮助器生成该名称，则为包含 null 的字符串。 在调用完成后，所用的实际名称将放置在该参数中。</param>
      <param name="installFlags">在枚举中指定的安装选项。</param>
    </member>
    <member name="M:System.EnterpriseServices.IRegistrationHelper.UninstallAssembly(System.String,System.String)">
      <summary>从 COM+ 目录卸载程序集。</summary>
      <param name="assembly">作为文件的程序集名称或者全局程序集缓存 (GAC) 中的程序集的强名称。</param>
      <param name="application">COM+ 应用程序的名称。</param>
    </member>
    <member name="T:System.EnterpriseServices.IRemoteDispatch">
      <summary>由 <see cref="T:System.EnterpriseServices.ServicedComponent" /> 类实现，以确定是将远程方法调用的 <see cref="T:System.EnterpriseServices.AutoCompleteAttribute" /> 类特性设置为 true 还是设置为 false。</summary>
    </member>
    <member name="M:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone(System.String)">
      <summary>确保在 COM+ 上下文中，<see cref="T:System.EnterpriseServices.ServicedComponent" /> 类对象的 done 位在远程方法调用后设置为 true。</summary>
      <returns>一个字符串，由实现 <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /> 接口的响应对象转换而成。</returns>
      <param name="s">一个字符串，它将转换为实现 <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> 接口的请求对象。</param>
    </member>
    <member name="M:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone(System.String)">
      <summary>不确保在 COM+ 上下文中，<see cref="T:System.EnterpriseServices.ServicedComponent" /> 类对象的 done 位在远程方法调用后设置为 true。</summary>
      <returns>一个字符串，它由实现 <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /> 接口的响应对象转换而成。</returns>
      <param name="s">一个字符串，它将转换为实现 <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> 接口的请求对象。</param>
    </member>
    <member name="T:System.EnterpriseServices.IServiceCall">
      <summary>实现通过由 <see cref="T:System.EnterpriseServices.Activity" /> 创建的活动提交的批处理工作。</summary>
    </member>
    <member name="M:System.EnterpriseServices.IServiceCall.OnCall">
      <summary>开始执行在此方法中实现的批处理工作。</summary>
    </member>
    <member name="T:System.EnterpriseServices.IServicedComponentInfo">
      <summary>由 <see cref="T:System.EnterpriseServices.ServicedComponent" /> 类实现，用于通过 <see cref="M:System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(System.Int32@,System.String[]@)" /> 方法获取关于组件的信息。</summary>
    </member>
    <member name="M:System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(System.Int32@,System.String[]@)">
      <summary>获取关于 <see cref="T:System.EnterpriseServices.ServicedComponent" /> 类实例的某些信息。</summary>
      <param name="infoMask">一个位掩码，其中：0x00000001 为服务组件进程 ID 的键，0x00000002 为应用程序域 ID 的键，0x00000004 为服务组件远程 URI 的键。</param>
      <param name="infoArray">一个字符串数组，可以依次包含以下任一项或全部项：服务组件的进程 ID、应用程序域 ID 以及服务组件的远程 URI。</param>
    </member>
    <member name="T:System.EnterpriseServices.ITransaction">
      <summary>与分布式事务协调器 (DTC) ITransaction 接口对应，并且受通过 <see cref="P:System.EnterpriseServices.ContextUtil.Transaction" /> 获取的对象的支持。</summary>
    </member>
    <member name="M:System.EnterpriseServices.ITransaction.Abort(System.EnterpriseServices.BOID@,System.Int32,System.Int32)">
      <summary>中止事务。</summary>
      <param name="pboidReason">一个可选的 <see cref="T:System.EnterpriseServices.BOID" />，指示事务被中止的原因。 该参数可以是 null，指示不提供任何有关中止的原因。</param>
      <param name="fRetaining">必须为 false。</param>
      <param name="fAsync">当 <paramref name="fAsync" /> 是 true 时，执行异步中止并且调用方必须使用 ITransactionOutcomeEvents 了解事务的结果。</param>
    </member>
    <member name="M:System.EnterpriseServices.ITransaction.Commit(System.Int32,System.Int32,System.Int32)">
      <summary>提交事务。</summary>
      <param name="fRetaining">必须为 false。</param>
      <param name="grfTC">从 OLE DB 枚举 XACTTC 中获取的值。</param>
      <param name="grfRM">必须为零。</param>
    </member>
    <member name="M:System.EnterpriseServices.ITransaction.GetTransactionInfo(System.EnterpriseServices.XACTTRANSINFO@)">
      <summary>返回有关事务对象的信息。</summary>
      <param name="pinfo">指向将接收有关事务信息的调用方分配的 <see cref="T:System.EnterpriseServices.XACTTRANSINFO" /> 结构。 不得是 null。</param>
    </member>
    <member name="T:System.EnterpriseServices.JustInTimeActivationAttribute">
      <summary>打开或关闭实时 (JIT) 激活。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.JustInTimeActivationAttribute.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.JustInTimeActivationAttribute" /> 类的新实例。 默认的构造函数启用实时 (JIT) 激活。</summary>
    </member>
    <member name="M:System.EnterpriseServices.JustInTimeActivationAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.JustInTimeActivationAttribute" /> 类的新实例，并可以选择通过将 false 作为参数传递允许禁用实时 (JIT) 激活。</summary>
      <param name="val">若要启用 JIT 激活，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.EnterpriseServices.JustInTimeActivationAttribute.Value">
      <summary>获取 <see cref="T:System.EnterpriseServices.JustInTimeActivationAttribute" /> 设置的值。</summary>
      <returns>如果启用 JIT 激活，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="T:System.EnterpriseServices.LoadBalancingSupportedAttribute">
      <summary>如果在服务器上安装并启用了组件负载平衡服务，则确定组件是否加入负载平衡。</summary>
    </member>
    <member name="M:System.EnterpriseServices.LoadBalancingSupportedAttribute.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.LoadBalancingSupportedAttribute" /> 类的新实例，并指定负载平衡支持。</summary>
    </member>
    <member name="M:System.EnterpriseServices.LoadBalancingSupportedAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.LoadBalancingSupportedAttribute" /> 类的新实例，并可以选择禁用负载平衡支持。</summary>
      <param name="val">若要启用负载平衡支持，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.EnterpriseServices.LoadBalancingSupportedAttribute.Value">
      <summary>获取一个值，该值指示是否启用负载平衡支持。</summary>
      <returns>如果启用负载平衡支持，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="T:System.EnterpriseServices.MustRunInClientContextAttribute">
      <summary>如有可能，强制在创建者的上下文中创建特性化的对象。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.MustRunInClientContextAttribute.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.MustRunInClientContextAttribute" /> 类的新实例，并要求在创建者的上下文中创建对象。</summary>
    </member>
    <member name="M:System.EnterpriseServices.MustRunInClientContextAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.MustRunInClientContextAttribute" /> 类的新实例，并可以选择不在创建者的上下文中创建该对象。</summary>
      <param name="val">若要在创建者的上下文中创建该对象，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.EnterpriseServices.MustRunInClientContextAttribute.Value">
      <summary>获取一个值，该值指示是否在创建者的上下文中创建特性化对象。</summary>
      <returns>如果要在创建者的上下文中创建该对象，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="T:System.EnterpriseServices.ObjectPoolingAttribute">
      <summary>启用和配置用于组件的对象池。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.ObjectPoolingAttribute.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.ObjectPoolingAttribute" /> 类的新实例并将 <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.Enabled" />、<see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.MaxPoolSize" />、<see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.MinPoolSize" /> 和 <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.CreationTimeout" /> 属性设置为其默认值。</summary>
    </member>
    <member name="M:System.EnterpriseServices.ObjectPoolingAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.ObjectPoolingAttribute" /> 类的新实例并设置 <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.Enabled" /> 属性。</summary>
      <param name="enable">如果启用对象池，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.EnterpriseServices.ObjectPoolingAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.ObjectPoolingAttribute" /> 类的新实例并设置 <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.Enabled" />、<see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.MaxPoolSize" /> 和 <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.MinPoolSize" /> 属性。</summary>
      <param name="enable">如果启用对象池，则为 true；否则为 false。</param>
      <param name="minPoolSize">最小池大小。</param>
      <param name="maxPoolSize">最大池大小。</param>
    </member>
    <member name="M:System.EnterpriseServices.ObjectPoolingAttribute.#ctor(System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.ObjectPoolingAttribute" /> 类的新实例并设置 <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.MaxPoolSize" /> 和 <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.MinPoolSize" /> 属性。</summary>
      <param name="minPoolSize">最小池大小。</param>
      <param name="maxPoolSize">最大池大小。</param>
    </member>
    <member name="M:System.EnterpriseServices.ObjectPoolingAttribute.AfterSaveChanges(System.Collections.Hashtable)">
      <summary>在 COM+ 目录中安装并配置程序集时，由 .NET Framework 基础结构在内部调用。</summary>
      <returns>如果该方法已发生更改，则为 true。</returns>
      <param name="info">一个哈希表，包含由内部键引用的内部对象。</param>
    </member>
    <member name="M:System.EnterpriseServices.ObjectPoolingAttribute.Apply(System.Collections.Hashtable)">
      <summary>将 <see cref="T:System.EnterpriseServices.ObjectPoolingAttribute" /> 类特性应用到某个服务组件时，由 .NET Framework 基础结构在内部调用。</summary>
      <returns>如果该方法已发生更改，则为 true。</returns>
      <param name="info">一个哈希表，包含应用了对象池属性且由内部键引用的内部对象。</param>
    </member>
    <member name="P:System.EnterpriseServices.ObjectPoolingAttribute.CreationTimeout">
      <summary>获取或设置在引发异常前等待对象可用于池中的时间长度。 该值以毫秒为单位。</summary>
      <returns>以毫秒为单位的超时值。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ObjectPoolingAttribute.Enabled">
      <summary>获取或设置一个值，该值指示是否启用对象池。</summary>
      <returns>如果启用对象池，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="M:System.EnterpriseServices.ObjectPoolingAttribute.IsValidTarget(System.String)">
      <summary>在 COM+ 目录中安装并配置程序集时，由 .NET Framework 基础结构在内部调用。</summary>
      <returns>如果该特性已应用到服务组件类，则为 true。</returns>
      <param name="s">由 .NET Framework 基础结构生成的字符串，通过检查它查找指示服务组件的特殊值。</param>
    </member>
    <member name="P:System.EnterpriseServices.ObjectPoolingAttribute.MaxPoolSize">
      <summary>获取或设置表示池的最大大小的值。</summary>
      <returns>池中对象的最大数目。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ObjectPoolingAttribute.MinPoolSize">
      <summary>获取或设置表示池的最小大小的值。</summary>
      <returns>池中对象的最小数目。</returns>
    </member>
    <member name="T:System.EnterpriseServices.PartitionOption">
      <summary>指示要在其中运行 COM+ 分区的上下文。</summary>
    </member>
    <member name="F:System.EnterpriseServices.PartitionOption.Ignore">
      <summary>包含的上下文运行于“全局分区”中。 当 <see cref="P:System.EnterpriseServices.ServiceConfig.Inheritance" /> 设置为 <see cref="F:System.EnterpriseServices.InheritanceOption.Ignore" /> 时，<see cref="F:System.EnterpriseServices.PartitionOption.Ignore" /> 为 <see cref="P:System.EnterpriseServices.ServiceConfig.PartitionOption" /> 的默认设置。</summary>
    </member>
    <member name="F:System.EnterpriseServices.PartitionOption.Inherit">
      <summary>包含的上下文运行于当前的包含 COM+ 分区中。 当 <see cref="P:System.EnterpriseServices.ServiceConfig.Inheritance" /> 设置为 <see cref="F:System.EnterpriseServices.InheritanceOption.Inherit" /> 时，此为 <see cref="P:System.EnterpriseServices.ServiceConfig.PartitionOption" /> 的默认设置。</summary>
    </member>
    <member name="F:System.EnterpriseServices.PartitionOption.New">
      <summary>包含的上下文运行于与当前包含分区不同的 COM+ 分区中。</summary>
    </member>
    <member name="T:System.EnterpriseServices.PrivateComponentAttribute">
      <summary>将组件标识为专用组件，专用组件仅对同一应用程序中的组件而言是可见的并只可由同一应用程序中的组件激活。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.PrivateComponentAttribute.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.PrivateComponentAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.EnterpriseServices.PropertyLockMode">
      <summary>指定在共享的属性组管理器中访问共享属性的模式。</summary>
    </member>
    <member name="F:System.EnterpriseServices.PropertyLockMode.Method">
      <summary>锁定共享属性组中的所有属性以供调用方以独占方式使用，只要正执行该调用方的当前方法。</summary>
    </member>
    <member name="F:System.EnterpriseServices.PropertyLockMode.SetGet">
      <summary>在获取或设置期间锁定一个属性，确保对共享属性的每一获取或设置操作都是原子操作。</summary>
    </member>
    <member name="T:System.EnterpriseServices.PropertyReleaseMode">
      <summary>为新的共享属性组中的属性指定释放模式。</summary>
    </member>
    <member name="F:System.EnterpriseServices.PropertyReleaseMode.Process">
      <summary>在终止在其中创建属性组的进程之前，不损坏该属性组。</summary>
    </member>
    <member name="F:System.EnterpriseServices.PropertyReleaseMode.Standard">
      <summary>在所有客户端都已释放其对属性组的引用之后，将自动损坏该属性组。 这是默认的 COM 模式。</summary>
    </member>
    <member name="T:System.EnterpriseServices.RegistrationConfig">
      <summary>为将程序集安装到 COM+ 目录中提供配置信息。</summary>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationConfig.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.RegistrationConfig" /> 类的新实例。</summary>
    </member>
    <member name="P:System.EnterpriseServices.RegistrationConfig.Application">
      <summary>获取或设置要在其中安装程序集的 COM+ 应用程序的名称。</summary>
      <returns>要在其中安装程序集的 COM+ 应用程序的名称。</returns>
    </member>
    <member name="P:System.EnterpriseServices.RegistrationConfig.ApplicationRootDirectory">
      <summary>获取或设置应用程序的根目录的名称。</summary>
      <returns>应用程序的根目录的名称。</returns>
    </member>
    <member name="P:System.EnterpriseServices.RegistrationConfig.AssemblyFile">
      <summary>获取或设置要安装的程序集的文件名。</summary>
      <returns>要安装的程序集的文件名。</returns>
    </member>
    <member name="P:System.EnterpriseServices.RegistrationConfig.InstallationFlags">
      <summary>获取或设置一个标志，该标志指示如何安装程序集。</summary>
      <returns>
        <see cref="T:System.EnterpriseServices.InstallationFlags" /> 值之一。</returns>
    </member>
    <member name="P:System.EnterpriseServices.RegistrationConfig.Partition">
      <summary>获取或设置 COM+ 分区的名称。</summary>
      <returns>COM+ 分区的名称。</returns>
    </member>
    <member name="P:System.EnterpriseServices.RegistrationConfig.TypeLibrary">
      <summary>获取或设置输出类型库导出程序 (Tlbexp.exe) 文件的名称。</summary>
      <returns>输出类型库导出程序 (Tlbexp.exe) 文件的名称。</returns>
    </member>
    <member name="T:System.EnterpriseServices.RegistrationErrorInfo">
      <summary>检索与多个 COM+ 对象相关的方法有关的扩展错误信息。 这还包括安装、导入和导出 COM+ 应用程序和组件的方法。 此类不能被继承。</summary>
    </member>
    <member name="P:System.EnterpriseServices.RegistrationErrorInfo.ErrorCode">
      <summary>获取对象或文件的错误代码。</summary>
      <returns>对象或文件的错误代码。</returns>
    </member>
    <member name="P:System.EnterpriseServices.RegistrationErrorInfo.ErrorString">
      <summary>获取 <see cref="P:System.EnterpriseServices.RegistrationErrorInfo.ErrorCode" /> 的说明。</summary>
      <returns>
        <see cref="P:System.EnterpriseServices.RegistrationErrorInfo.ErrorCode" /> 的说明。</returns>
    </member>
    <member name="P:System.EnterpriseServices.RegistrationErrorInfo.MajorRef">
      <summary>如果适用，获取导致该错误的对象的键值。</summary>
      <returns>如果适用，导致该错误的对象的键值。</returns>
    </member>
    <member name="P:System.EnterpriseServices.RegistrationErrorInfo.MinorRef">
      <summary>获取导致错误的项的精确说明，例如属性名。</summary>
      <returns>导致错误的项的精确说明，例如属性名。 如果发生多个错误，或者它不适用，则 <see cref="P:System.EnterpriseServices.RegistrationErrorInfo.MinorRef" /> 返回字符串“&lt;无效&gt;”（&lt;Invalid&gt;）。</returns>
    </member>
    <member name="P:System.EnterpriseServices.RegistrationErrorInfo.Name">
      <summary>获取导致错误的对象或文件的名称。</summary>
      <returns>导致错误的对象或文件的名称。</returns>
    </member>
    <member name="T:System.EnterpriseServices.RegistrationException">
      <summary>检测到注册错误时所引发的异常。</summary>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationException.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.RegistrationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.EnterpriseServices.RegistrationException" /> 类的新实例。</summary>
      <param name="msg">当发生异常时向客户端显示的消息。</param>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationException.#ctor(System.String,System.Exception)">
      <summary>用指定的错误信息和嵌套异常初始化 <see cref="T:System.EnterpriseServices.RegistrationException" /> 类的一个新实例。</summary>
      <param name="msg">当发生异常时向客户端显示的消息。</param>
      <param name="inner">嵌套异常。</param>
    </member>
    <member name="P:System.EnterpriseServices.RegistrationException.ErrorInfo">
      <summary>获取描述注册错误的 <see cref="T:System.EnterpriseServices.RegistrationErrorInfo" /> 对象的数组。</summary>
      <returns>
        <see cref="T:System.EnterpriseServices.RegistrationErrorInfo" /> 对象的数组。</returns>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用 <see cref="T:System.EnterpriseServices.RegistrationErrorInfo" /> 中的错误信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">包含序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="ctx">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="info" /> 参数为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.RegistrationHelper">
      <summary>在 COM+ 目录中安装并配置程序集。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelper.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.RegistrationHelper" /> 类的新实例。</summary>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelper.InstallAssembly(System.String,System.String@,System.String,System.String@,System.EnterpriseServices.InstallationFlags)">
      <summary>在 COM+ 应用程序中安装命名的程序集。</summary>
      <param name="assembly">要安装的程序集的文件名。</param>
      <param name="application">安装到的 COM+ 应用程序的名称。 此参数可以为 null。 如果参数为 null 并且程序集包含 <see cref="T:System.EnterpriseServices.ApplicationNameAttribute" />，则使用该特性。 否则，会根据程序集的名称生成应用程序的名称，然后返回应用程序的名称。</param>
      <param name="partition">分区的名称。 此参数可以为 null。</param>
      <param name="tlb">输出类型库导出程序 (Tlbexp.exe) 文件的名称；如果要求注册帮助器生成该名称，则为包含 null 的字符串。 调用完成后将所用的实际名称放在此参数中。</param>
      <param name="installFlags">
        <see cref="T:System.EnterpriseServices.InstallationFlags" /> 值的按位组合。</param>
      <exception cref="T:System.EnterpriseServices.RegistrationException">输入程序集没有强名称。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelper.InstallAssembly(System.String,System.String@,System.String@,System.EnterpriseServices.InstallationFlags)">
      <summary>在 COM+ 应用程序中安装命名的程序集。</summary>
      <param name="assembly">要安装的程序集的文件名。</param>
      <param name="application">安装到的 COM+ 应用程序的名称。 此参数可以为 null。 如果参数为 null 并且程序集包含 <see cref="T:System.EnterpriseServices.ApplicationNameAttribute" />，则使用该特性。 否则，会根据程序集的名称生成应用程序的名称，然后返回应用程序的名称。</param>
      <param name="tlb">输出类型库导出程序 (Tlbexp.exe) 文件的名称；如果要求注册帮助器生成该名称，则为包含 null 的字符串。 调用完成后将所用的实际名称放在此参数中。</param>
      <param name="installFlags">
        <see cref="T:System.EnterpriseServices.InstallationFlags" /> 值的按位组合。</param>
      <exception cref="T:System.EnterpriseServices.RegistrationException">输入程序集没有强名称。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelper.InstallAssemblyFromConfig(System.EnterpriseServices.RegistrationConfig@)">
      <summary>在 COM+ 应用程序中安装命名的程序集。</summary>
      <param name="regConfig">标识要安装的程序集的 <see cref="T:System.EnterpriseServices.RegistrationConfig" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelper.UninstallAssembly(System.String,System.String)">
      <summary>从给定应用程序卸载程序集。</summary>
      <param name="assembly">要卸载的程序集的文件名。</param>
      <param name="application">如果此名称不为 null，则它是包含程序集中的组件的应用程序的名称。</param>
      <exception cref="T:System.EnterpriseServices.RegistrationException">输入程序集没有强名称。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelper.UninstallAssembly(System.String,System.String,System.String)">
      <summary>从给定应用程序卸载程序集。</summary>
      <param name="assembly">要卸载的程序集的文件名。</param>
      <param name="application">如果此名称不为 null，则它是包含程序集中的组件的应用程序的名称。</param>
      <param name="partition">分区的名称。 此参数可以为 null。</param>
      <exception cref="T:System.EnterpriseServices.RegistrationException">输入程序集没有强名称。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelper.UninstallAssemblyFromConfig(System.EnterpriseServices.RegistrationConfig@)">
      <summary>从给定应用程序卸载程序集。</summary>
      <param name="regConfig">标识要卸载的程序集的 <see cref="T:System.EnterpriseServices.RegistrationConfig" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.RegistrationHelperTx">
      <summary>在维护新建立的事务时，由 .NET Framework 基础结构用来在 COM+ 目录中安装并配置程序集。</summary>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelperTx.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.RegistrationHelperTx" /> 类的新实例。</summary>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelperTx.InstallAssembly(System.String,System.String@,System.String,System.String@,System.EnterpriseServices.InstallationFlags,System.Object)">
      <summary>使用事务性语义在 COM+ 目录中安装命名的程序集。</summary>
      <param name="assembly">要安装的程序集的文件名。</param>
      <param name="application">要安装的 COM+ 应用程序的名称或者包含 null 的字符串。</param>
      <param name="partition">或者是分区的名称，或者是 null。</param>
      <param name="tlb">输出类型库导出程序 (Tlbexp.exe) 文件的名称，或者是 null。</param>
      <param name="installFlags">安装标志值的按位组合。</param>
      <param name="sync">由基础结构生成的同步对象，该对象可以等待，直到在 COM+ 目录中配置了指定的程序集为止。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelperTx.InstallAssembly(System.String,System.String@,System.String@,System.EnterpriseServices.InstallationFlags,System.Object)">
      <summary>使用事务性语义在 COM+ 目录中安装命名的程序集。</summary>
      <param name="assembly">要安装的程序集的文件名。</param>
      <param name="application">要安装的 COM+ 应用程序的名称，或者是 null。</param>
      <param name="tlb">输出类型库导出程序 (Tlbexp.exe) 文件的名称，或者是 null。</param>
      <param name="installFlags">安装标志值的按位组合。</param>
      <param name="sync">由基础结构生成的同步对象，该对象可以等待，直到在 COM+ 目录中配置了指定的程序集为止。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelperTx.InstallAssemblyFromConfig(System.EnterpriseServices.RegistrationConfig@,System.Object)">
      <summary>使用事务性语义在 COM+ 目录中安装指定的程序集。</summary>
      <param name="regConfig">有关在 COM+ 目录中安装程序集的配置信息。</param>
      <param name="sync">由基础结构生成的同步对象，该对象可以等待，直到在 COM+ 目录中配置了指定的程序集为止。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelperTx.IsInTransaction">
      <summary>获取一个值，该值指示 <see cref="T:System.EnterpriseServices.RegistrationHelperTx" /> 类实例的当前上下文是否为事务性的。</summary>
      <returns>如果 <see cref="T:System.EnterpriseServices.RegistrationHelperTx" /> 类实例的当前上下文是事务性的，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelperTx.UninstallAssembly(System.String,System.String,System.Object)">
      <summary>使用事务性语义从 COM+ 应用程序卸载程序集。</summary>
      <param name="assembly">要卸载的程序集的文件名。</param>
      <param name="application">或者是包含程序集中组件的 COM+ 应用程序的名称，或者是 null。</param>
      <param name="sync">由基础结构生成的同步对象，该对象可以等待，直到卸载了指定的程序集为止。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelperTx.UninstallAssembly(System.String,System.String,System.String,System.Object)">
      <summary>使用事务性语义从 COM+ 应用程序卸载程序集。</summary>
      <param name="assembly">要卸载的程序集的文件名。</param>
      <param name="application">或者是包含程序集中组件的 COM+ 应用程序的名称，或者是 null。</param>
      <param name="partition">或者是分区的名称，或者是 null。</param>
      <param name="sync">由基础结构生成的同步对象，该对象可以等待，直到卸载了指定的程序集为止。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelperTx.UninstallAssemblyFromConfig(System.EnterpriseServices.RegistrationConfig@,System.Object)">
      <summary>使用事务性语义从 COM+ 应用程序中卸载指定的程序集。</summary>
      <param name="regConfig">指定要从应用程序中卸载的程序集的配置信息。</param>
      <param name="sync">由基础结构生成的同步对象，该对象可以等待，直到卸载了指定的程序集为止。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.ResourcePool">
      <summary>在当前事务中存储对象。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.ResourcePool.#ctor(System.EnterpriseServices.ResourcePool.TransactionEndDelegate)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.ResourcePool" /> 类的新实例。</summary>
      <param name="cb">一个 <see cref="T:System.EnterpriseServices.ResourcePool.TransactionEndDelegate" />，在完成事务后调用它。 当前在事务中存储的所有项都通过委托交回给用户。</param>
    </member>
    <member name="M:System.EnterpriseServices.ResourcePool.GetResource">
      <summary>从当前事务获取资源。</summary>
      <returns>资源对象。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.ResourcePool.PutResource(System.Object)">
      <summary>将资源添加到当前事务。</summary>
      <returns>如果资源对象被添加到池中，则为 true；否则为 false。</returns>
      <param name="resource">要添加的资源。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.ResourcePool.TransactionEndDelegate">
      <summary>表示处理事务结束的方法。</summary>
      <param name="resource">传递回委托的对象。</param>
    </member>
    <member name="T:System.EnterpriseServices.SecureMethodAttribute">
      <summary>确保在使用安全服务时，结构通过接口为类中的一个方法或每一方法进行调用。 类需要使用接口以使用安全服务。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.SecureMethodAttribute.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.SecureMethodAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.EnterpriseServices.SecurityCallContext">
      <summary>描述调用方链，该链最终导致当前方法调用。</summary>
    </member>
    <member name="P:System.EnterpriseServices.SecurityCallContext.Callers">
      <summary>获取一个描述调用方的 <see cref="T:System.EnterpriseServices.SecurityCallers" /> 对象。</summary>
      <returns>描述调用方的 <see cref="T:System.EnterpriseServices.SecurityCallers" /> 对象。</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">没有安全上下文。</exception>
    </member>
    <member name="P:System.EnterpriseServices.SecurityCallContext.CurrentCall">
      <summary>获取一个描述安全调用上下文的 <see cref="T:System.EnterpriseServices.SecurityCallContext" /> 对象。</summary>
      <returns>描述安全调用上下文的 <see cref="T:System.EnterpriseServices.SecurityCallContext" /> 对象。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.EnterpriseServices.SecurityCallContext.DirectCaller">
      <summary>获取一个 <see cref="T:System.EnterpriseServices.SecurityIdentity" /> 对象，该对象描述此方法的直接调用方。</summary>
      <returns>一个 <see cref="T:System.EnterpriseServices.SecurityIdentity" /> 值。</returns>
    </member>
    <member name="M:System.EnterpriseServices.SecurityCallContext.IsCallerInRole(System.String)">
      <summary>验证直接调用方是指定的角色的成员。</summary>
      <returns>如果直接调用方是指定的角色的成员，则为 true；否则为 false。</returns>
      <param name="role">指定的角色。</param>
    </member>
    <member name="P:System.EnterpriseServices.SecurityCallContext.IsSecurityEnabled">
      <summary>确定是否在当前上下文中启用安全检查。</summary>
      <returns>如果在当前上下文中启用安全检查，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.EnterpriseServices.SecurityCallContext.IsUserInRole(System.String,System.String)">
      <summary>验证指定的用户属于指定的角色。</summary>
      <returns>如果指定的用户是指定的角色的成员，则为 true；否则为 false。</returns>
      <param name="user">指定的用户。</param>
      <param name="role">指定的角色。</param>
    </member>
    <member name="P:System.EnterpriseServices.SecurityCallContext.MinAuthenticationLevel">
      <summary>从 COM+ 中的 ISecurityCallContext 集合获取 MinAuthenticationLevel 值。</summary>
      <returns>来自 COM+ 中的 ISecurityCallContext 集合的 MinAuthenticationLevel 值。</returns>
    </member>
    <member name="P:System.EnterpriseServices.SecurityCallContext.NumCallers">
      <summary>从 COM+ 中的 ISecurityCallContext 集合获取 NumCallers 值。</summary>
      <returns>来自 COM+ 中的 ISecurityCallContext 集合的 NumCallers 值。</returns>
    </member>
    <member name="P:System.EnterpriseServices.SecurityCallContext.OriginalCaller">
      <summary>获取一个描述原始调用方的 <see cref="T:System.EnterpriseServices.SecurityIdentity" />。</summary>
      <returns>
        <see cref="T:System.EnterpriseServices.SecurityIdentity" /> 值之一。</returns>
    </member>
    <member name="T:System.EnterpriseServices.SecurityCallers">
      <summary>提供当前调用链中标识的已排序的集合。</summary>
    </member>
    <member name="P:System.EnterpriseServices.SecurityCallers.Count">
      <summary>获取链中调用方的数目。</summary>
      <returns>链中调用方的数目。</returns>
    </member>
    <member name="M:System.EnterpriseServices.SecurityCallers.GetEnumerator">
      <summary>检索对象的枚举接口。</summary>
      <returns>ISecurityCallersColl 集合的枚举数接口。</returns>
    </member>
    <member name="P:System.EnterpriseServices.SecurityCallers.Item(System.Int32)">
      <summary>获取指定的 <see cref="T:System.EnterpriseServices.SecurityIdentity" /> 项。</summary>
      <returns>
        <see cref="T:System.EnterpriseServices.SecurityIdentity" /> 对象。</returns>
      <param name="idx">要使用索引号访问的项。</param>
    </member>
    <member name="T:System.EnterpriseServices.SecurityIdentity">
      <summary>包含与 COM+ 调用链中的标识有关的信息。</summary>
    </member>
    <member name="P:System.EnterpriseServices.SecurityIdentity.AccountName">
      <summary>获取由该标识描述的用户的名称。</summary>
      <returns>由该标识描述的用户的名称。</returns>
    </member>
    <member name="P:System.EnterpriseServices.SecurityIdentity.AuthenticationLevel">
      <summary>获取由该标识描述的用户的身份验证级别。</summary>
      <returns>
        <see cref="T:System.EnterpriseServices.AuthenticationOption" /> 值之一。</returns>
    </member>
    <member name="P:System.EnterpriseServices.SecurityIdentity.AuthenticationService">
      <summary>获取由该标识描述的身份验证服务。</summary>
      <returns>由该标识描述的身份验证服务。</returns>
    </member>
    <member name="P:System.EnterpriseServices.SecurityIdentity.ImpersonationLevel">
      <summary>获取由该标识描述的用户的模拟级别。</summary>
      <returns>一个 <see cref="T:System.EnterpriseServices.ImpersonationLevelOption" /> 值。</returns>
    </member>
    <member name="T:System.EnterpriseServices.SecurityRoleAttribute">
      <summary>为应用程序或组件配置角色。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.SecurityRoleAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.SecurityRoleAttribute" /> 类的新实例并设置 <see cref="P:System.EnterpriseServices.SecurityRoleAttribute.Role" /> 属性。</summary>
      <param name="role">应用程序、组件、接口或方法的安全角色。</param>
    </member>
    <member name="M:System.EnterpriseServices.SecurityRoleAttribute.#ctor(System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.SecurityRoleAttribute" /> 类的新实例并设置 <see cref="P:System.EnterpriseServices.SecurityRoleAttribute.Role" /> 和 <see cref="P:System.EnterpriseServices.SecurityRoleAttribute.SetEveryoneAccess" /> 属性。</summary>
      <param name="role">应用程序、组件、接口或方法的安全角色。</param>
      <param name="everyone">若要要求新创建的角色具有作为用户添加的“Everyone”用户组，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.EnterpriseServices.SecurityRoleAttribute.Description">
      <summary>获取或设置角色说明。</summary>
      <returns>角色的说明。</returns>
    </member>
    <member name="P:System.EnterpriseServices.SecurityRoleAttribute.Role">
      <summary>获取或设置安全角色。</summary>
      <returns>安全角色应用于应用程序、组件、接口或方法。</returns>
    </member>
    <member name="P:System.EnterpriseServices.SecurityRoleAttribute.SetEveryoneAccess">
      <summary>设置一个值，该值指示是否将“Everyone”用户组作为用户添加。</summary>
      <returns>若要要求新创建的角色具有作为用户添加的“Everyone”用户组（不修改已存在于应用程序上的角色），则为 true；否则为 false，以取消将“Everyone”用户组作为用户添加。</returns>
    </member>
    <member name="T:System.EnterpriseServices.ServiceConfig">
      <summary>指定并配置在调用 <see cref="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" /> 或创建 <see cref="T:System.EnterpriseServices.Activity" /> 时进入的域中将处于活动状态的服务。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.ServiceConfig.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.ServiceConfig" /> 类的新实例，并设置属性来配置所需服务。</summary>
      <exception cref="T:System.PlatformNotSupportedException">当前平台不支持 <see cref="T:System.EnterpriseServices.ServiceConfig" />。</exception>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.Binding">
      <summary>获取或设置绑定选项，该选项指示是否将该活动提交的所有工作仅绑定到一个单线程单元 (STA)。</summary>
      <returns>
        <see cref="T:System.EnterpriseServices.BindingOption" /> 值之一。 默认值为 <see cref="F:System.EnterpriseServices.BindingOption.NoBinding" />。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.BringYourOwnSystemTransaction">
      <summary>获取或设置一个 <see cref="T:System.Transactions.Transaction" />，它表示一个为运行 <see cref="T:System.EnterpriseServices.ServiceConfig" /> 标识的事务而提供设置的现有事务。</summary>
      <returns>
        <see cref="T:System.Transactions.Transaction" />。 默认值为 null。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.BringYourOwnTransaction">
      <summary>获取或设置一个 <see cref="T:System.EnterpriseServices.ITransaction" />，它表示一个为运行 <see cref="T:System.EnterpriseServices.ServiceConfig" /> 标识的事务而提供设置的现有事务。</summary>
      <returns>一个 <see cref="T:System.EnterpriseServices.ITransaction" />。 默认值为 null。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.COMTIIntrinsicsEnabled">
      <summary>获取或设置一个值，该值指示是否启用 COM 事务集成器 (COMTI) 内部对象。</summary>
      <returns>如果启用 COMTI intrinsics 对象，则为 true，否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.IISIntrinsicsEnabled">
      <summary>获取或设置一个值，该值指示是否启用 Internet 信息服务 (IIS) 内部对象。</summary>
      <returns>如果启用 IIS intrinsics，则为 true，否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.Inheritance">
      <summary>获取或设置一个值，该值指示是基于当前上下文构造新的上下文，还是仅基于 <see cref="T:System.EnterpriseServices.ServiceConfig" /> 中的信息创建新的上下文。</summary>
      <returns>
        <see cref="T:System.EnterpriseServices.InheritanceOption" /> 值之一。 默认值为 <see cref="F:System.EnterpriseServices.InheritanceOption.Inherit" />。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.IsolationLevel">
      <summary>获取或设置事务的隔离级别。</summary>
      <returns>
        <see cref="T:System.EnterpriseServices.TransactionIsolationLevel" /> 值之一。 默认值为 <see cref="F:System.EnterpriseServices.TransactionIsolationLevel.Any" />。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.PartitionId">
      <summary>获取或设置要使用的 COM+ 分区的 GUID。</summary>
      <returns>要使用的分区的 GUID。 默认值为一个零 GUID。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.PartitionOption">
      <summary>获取或设置一个值，该值指示如何针对包含的工作使用分区。</summary>
      <returns>
        <see cref="T:System.EnterpriseServices.PartitionOption" /> 值之一。 默认值为 <see cref="F:System.EnterpriseServices.PartitionOption.Ignore" />。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.SxsDirectory">
      <summary>获取或设置被包含工作的并行 (Side-by-Side) 程序集的目录。</summary>
      <returns>并行 (Side-by-Side) 程序集目录的名称。 默认值为 null。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.SxsName">
      <summary>获取或设置包含工作的并行 (Side-by-Side) 程序集的文件名。</summary>
      <returns>并行 (Side-by-Side) 程序集的文件名。 默认值为 null。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.SxsOption">
      <summary>获取或设置一个值，该值指示如何配置并行程序集。</summary>
      <returns>
        <see cref="T:System.EnterpriseServices.SxsOption" /> 值之一。 默认值为 <see cref="F:System.EnterpriseServices.SxsOption.Ignore" />。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.Synchronization">
      <summary>获取或设置一个值，该值指示组件请求的自动同步的类型。</summary>
      <returns>
        <see cref="T:System.EnterpriseServices.SynchronizationOption" /> 值之一。 默认值为 <see cref="F:System.EnterpriseServices.SynchronizationOption.Disabled" />。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.ThreadPool">
      <summary>获取或设置一个值，该值指示运行由该活动提交的工作的线程池。</summary>
      <returns>
        <see cref="T:System.EnterpriseServices.ThreadPoolOption" /> 值之一。 默认值为 <see cref="F:System.EnterpriseServices.ThreadPoolOption.None" />。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.TipUrl">
      <summary>获取或设置事务 Internet 协议 (TIP) URL，该 URL 允许在现有事务中运行被包含的代码。</summary>
      <returns>一个 TIP URL。 默认值为 null。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.TrackingAppName">
      <summary>获取或设置一个文本字符串，该文本字符串对应于报告跟踪程序信息时使用的应用程序 ID。</summary>
      <returns>报告跟踪程序信息时使用的应用程序 ID。 默认值为 null。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.TrackingComponentName">
      <summary>获取或设置一个文本字符串，该文本字符串对应于报告跟踪程序信息时使用的上下文名称。</summary>
      <returns>报告跟踪程序信息时使用的上下文名称。 默认值为 null。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.TrackingEnabled">
      <summary>获取或设置一个值，该值指示是否启用跟踪。</summary>
      <returns>如果启用跟踪，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.Transaction">
      <summary>获取或设置一个值，该值指示如何在包含的工作中使用事务。</summary>
      <returns>
        <see cref="T:System.EnterpriseServices.TransactionOption" /> 值之一。 默认值为 <see cref="F:System.EnterpriseServices.TransactionOption.Disabled" />。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.TransactionDescription">
      <summary>获取或设置显示事务统计时所用的名称。</summary>
      <returns>显示事务统计时所用的名称。 默认值为 null。</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.TransactionTimeout">
      <summary>获取或设置新事务的事务超时。</summary>
      <returns>以秒为单位的事务超时。</returns>
    </member>
    <member name="T:System.EnterpriseServices.ServicedComponent">
      <summary>表示使用 COM+ 服务的所有类的基类。</summary>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponent.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.ServicedComponent" /> 类的新实例。</summary>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponent.Activate">
      <summary>当从池创建或分配对象时，由基础结构调用。 重写此方法以将自定义初始化代码添加到对象中。</summary>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponent.CanBePooled">
      <summary>在将对象放回到池中之前结构调用该方法。 重写此方法以决定是否将对象放回到池中。</summary>
      <returns>如果已维护的组件可被放入池中，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponent.Construct(System.String)">
      <summary>恰好在调用构造函数后由基础结构调用，并且在构造函数字符串中传递。 重写该方法以使用结构字符串值。</summary>
      <param name="s">结构字符串。</param>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponent.Deactivate">
      <summary>当对象即将停用时由基础结构调用。 重写该方法以在使用实时 (JIT) 编译代码或对象池时向对象添加自定义终止代码。</summary>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponent.Dispose">
      <summary>释放由 <see cref="T:System.EnterpriseServices.ServicedComponent" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.EnterpriseServices.ServicedComponent" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；否则为 false，这仅释放非托管资源。</param>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponent.DisposeObject(System.EnterpriseServices.ServicedComponent)">
      <summary>完成对象并移除关联的 COM+ 引用。</summary>
      <param name="sc">要释放的对象。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlThread" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchAutoDone(System.String)">
      <summary>确保在 COM+ 上下文中，<see cref="T:System.EnterpriseServices.ServicedComponent" /> 类对象的 done 位在远程方法调用后设置为 true。</summary>
      <returns>一个字符串，由实现 <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /> 接口的响应对象转换而成。</returns>
      <param name="s">一个字符串，它将转换为实现 <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> 接口的请求对象。</param>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchNotAutoDone(System.String)">
      <summary>不确保在 COM+ 上下文中，<see cref="T:System.EnterpriseServices.ServicedComponent" /> 类对象的 done 位在远程方法调用后设置为 true。</summary>
      <returns>一个字符串，它由实现 <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /> 接口的响应对象转换而成。</returns>
      <param name="s">一个字符串，它将转换为实现 <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> 接口的请求对象。</param>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IServicedComponentInfo#GetComponentInfo(System.Int32@,System.String[]@)">
      <summary>获取 <see cref="T:System.EnterpriseServices.ServicedComponent" /> 类实例的相关信息。</summary>
      <param name="infoMask">一个位掩码，其中：0x00000001 为服务组件进程 ID 的键，0x00000002 为应用程序域 ID 的键，0x00000004 为服务组件远程 URI 的键。</param>
      <param name="infoArray">一个字符串数组，可以依次包含以下任一项或全部项：服务组件的进程 ID、应用程序域 ID 以及服务组件的远程 URI。</param>
    </member>
    <member name="T:System.EnterpriseServices.ServicedComponentException">
      <summary>在已维护的组件中检测到错误时引发的异常。</summary>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponentException.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.ServicedComponentException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponentException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.EnterpriseServices.ServicedComponentException" /> 类的新实例。</summary>
      <param name="message">当发生异常时向客户端显示的消息。</param>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponentException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.ServicedComponentException" /> 类的新实例。</summary>
      <param name="message">当发生异常时向客户端显示的消息。</param>
      <param name="innerException">引发当前异常的 <see cref="P:System.Exception.InnerException" />（如果有的话）。</param>
    </member>
    <member name="T:System.EnterpriseServices.ServiceDomain">
      <summary>允许由 <see cref="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" /> 和 <see cref="M:System.EnterpriseServices.ServiceDomain.Leave" /> 标识的代码段在其自身的上下文中运行，其行为如同在此上下文中创建的对象上调用的方法。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)">
      <summary>创建由 <see cref="T:System.EnterpriseServices.ServiceConfig" /> 对象指定的上下文，并将其推至上下文堆栈，使之成为当前上下文。</summary>
      <param name="cfg">一个 <see cref="T:System.EnterpriseServices.ServiceConfig" />，它包含要在包含代码中使用的服务的配置信息。</param>
      <exception cref="T:System.PlatformNotSupportedException">当前平台不支持 <see cref="T:System.EnterpriseServices.ServiceConfig" />。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.ServiceDomain.Leave">
      <summary>触发服务器端的策略，随后触发客户端的策略，如同一个方法调用正在返回。 然后，当前上下文被弹出上下文堆栈，调用 <see cref="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" /> 时正在运行的上下文成为当前的上下文。</summary>
      <returns>
        <see cref="T:System.EnterpriseServices.TransactionStatus" /> 值之一。</returns>
      <exception cref="T:System.PlatformNotSupportedException">当前平台不支持 <see cref="T:System.EnterpriseServices.ServiceConfig" />。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.SharedProperty">
      <summary>访问共享属性。 此类不能被继承。</summary>
    </member>
    <member name="P:System.EnterpriseServices.SharedProperty.Value">
      <summary>获取或设置共享属性的值。</summary>
      <returns>共享属性的值。</returns>
    </member>
    <member name="T:System.EnterpriseServices.SharedPropertyGroup">
      <summary>表示共享属性的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.SharedPropertyGroup.CreateProperty(System.String,System.Boolean@)">
      <summary>创建具有给定名称的属性。</summary>
      <returns>请求的 <see cref="T:System.EnterpriseServices.SharedProperty" />。</returns>
      <param name="name">新属性的名称。</param>
      <param name="fExists">确定该属性是否存在。 如果该属性存在，则在返回时设置为 true。</param>
    </member>
    <member name="M:System.EnterpriseServices.SharedPropertyGroup.CreatePropertyByPosition(System.Int32,System.Boolean@)">
      <summary>创建处于给定位置的属性。</summary>
      <returns>请求的 <see cref="T:System.EnterpriseServices.SharedProperty" />。</returns>
      <param name="position">新属性的索引</param>
      <param name="fExists">确定该属性是否存在。 如果该属性存在，则在返回时设置为 true。</param>
    </member>
    <member name="M:System.EnterpriseServices.SharedPropertyGroup.Property(System.String)">
      <summary>返回具有给定名称的属性。</summary>
      <returns>请求的 <see cref="T:System.EnterpriseServices.SharedProperty" />。</returns>
      <param name="name">请求的属性的名称。</param>
    </member>
    <member name="M:System.EnterpriseServices.SharedPropertyGroup.PropertyByPosition(System.Int32)">
      <summary>返回处于给定位置的属性。</summary>
      <returns>请求的 <see cref="T:System.EnterpriseServices.SharedProperty" />。</returns>
      <param name="position">该属性的索引。</param>
    </member>
    <member name="T:System.EnterpriseServices.SharedPropertyGroupManager">
      <summary>控制对共享属性组的访问。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.SharedPropertyGroupManager.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.SharedPropertyGroupManager" /> 类的新实例。</summary>
    </member>
    <member name="M:System.EnterpriseServices.SharedPropertyGroupManager.CreatePropertyGroup(System.String,System.EnterpriseServices.PropertyLockMode@,System.EnterpriseServices.PropertyReleaseMode@,System.Boolean@)">
      <summary>通过给定的信息查找或创建属性组。</summary>
      <returns>请求的 <see cref="T:System.EnterpriseServices.SharedPropertyGroup" />。</returns>
      <param name="name">请求的属性的名称。</param>
      <param name="dwIsoMode">
        <see cref="T:System.EnterpriseServices.PropertyLockMode" /> 值之一。 有关更多信息，请参见备注部分。</param>
      <param name="dwRelMode">
        <see cref="T:System.EnterpriseServices.PropertyReleaseMode" /> 值之一。 有关更多信息，请参见备注部分。</param>
      <param name="fExist">当此方法返回时，如果该属性已经存在则包含 true；如果调用创建了该属性则为 false。</param>
    </member>
    <member name="M:System.EnterpriseServices.SharedPropertyGroupManager.GetEnumerator">
      <summary>检索集合的枚举接口。</summary>
      <returns>该集合的枚举数接口。</returns>
    </member>
    <member name="M:System.EnterpriseServices.SharedPropertyGroupManager.Group(System.String)">
      <summary>查找具有给定名称的属性组。</summary>
      <returns>请求的 <see cref="T:System.EnterpriseServices.SharedPropertyGroup" />。</returns>
      <param name="name">请求的属性的名称。</param>
    </member>
    <member name="T:System.EnterpriseServices.SxsOption">
      <summary>指示如何为 <see cref="T:System.EnterpriseServices.ServiceConfig" /> 配置并行 (Side-by-Side) 程序集。</summary>
    </member>
    <member name="F:System.EnterpriseServices.SxsOption.Ignore">
      <summary>在包含的上下文中未使用并行程序集。 当 <see cref="P:System.EnterpriseServices.ServiceConfig.Inheritance" /> 设置为 <see cref="F:System.EnterpriseServices.InheritanceOption.Ignore" /> 时，<see cref="F:System.EnterpriseServices.SxsOption.Ignore" /> 为 <see cref="P:System.EnterpriseServices.ServiceConfig.SxsOption" /> 的默认设置。</summary>
    </member>
    <member name="F:System.EnterpriseServices.SxsOption.Inherit">
      <summary>使用了所包含的上下文的当前并行程序集。 当 <see cref="P:System.EnterpriseServices.ServiceConfig.Inheritance" /> 设置为 <see cref="F:System.EnterpriseServices.InheritanceOption.Inherit" /> 时，<see cref="F:System.EnterpriseServices.SxsOption.Inherit" /> 为 <see cref="P:System.EnterpriseServices.ServiceConfig.SxsOption" /> 的默认设置。</summary>
    </member>
    <member name="F:System.EnterpriseServices.SxsOption.New">
      <summary>已为包含的上下文创建了新的并行 (Side-by-Side) 程序集。</summary>
    </member>
    <member name="T:System.EnterpriseServices.SynchronizationAttribute">
      <summary>设置组件的同步值。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.SynchronizationAttribute.#ctor">
      <summary>使用默认 <see cref="T:System.EnterpriseServices.SynchronizationOption" /> 初始化 <see cref="T:System.EnterpriseServices.SynchronizationAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.EnterpriseServices.SynchronizationAttribute.#ctor(System.EnterpriseServices.SynchronizationOption)">
      <summary>用指定的 <see cref="T:System.EnterpriseServices.SynchronizationOption" /> 初始化 <see cref="T:System.EnterpriseServices.SynchronizationAttribute" /> 类的新实例。</summary>
      <param name="val">
        <see cref="T:System.EnterpriseServices.SynchronizationOption" /> 值之一。</param>
    </member>
    <member name="P:System.EnterpriseServices.SynchronizationAttribute.Value">
      <summary>获取 <see cref="P:System.EnterpriseServices.SynchronizationAttribute.Value" /> 属性的当前设置。</summary>
      <returns>
        <see cref="T:System.EnterpriseServices.SynchronizationOption" /> 值之一。 默认值为 Required。</returns>
    </member>
    <member name="T:System.EnterpriseServices.SynchronizationOption">
      <summary>指定组件请求的自动同步的类型。</summary>
    </member>
    <member name="F:System.EnterpriseServices.SynchronizationOption.Disabled">
      <summary>COM+ 在确定对象的上下文时忽略组件的同步要求。</summary>
    </member>
    <member name="F:System.EnterpriseServices.SynchronizationOption.NotSupported">
      <summary>具有该值的对象永远不加入同步，而与其调用方的状态无关。 此设置仅适用于不使用实时 (JIT) 激活的非事务性组件。</summary>
    </member>
    <member name="F:System.EnterpriseServices.SynchronizationOption.Required">
      <summary>确保从该组件创建的所有对象都是同步的。</summary>
    </member>
    <member name="F:System.EnterpriseServices.SynchronizationOption.RequiresNew">
      <summary>具有该值的对象必须加入新同步，在其中 COM+ 管理上下文和单元，这些上下文和单元代表涉及调用的所有组件。</summary>
    </member>
    <member name="F:System.EnterpriseServices.SynchronizationOption.Supported">
      <summary>具有该值的对象加入同步（如果它存在）。</summary>
    </member>
    <member name="T:System.EnterpriseServices.ThreadPoolOption">
      <summary>指示该工作（由 <see cref="T:System.EnterpriseServices.Activity" /> 提交）当前正在哪一个线程池中运行。</summary>
    </member>
    <member name="F:System.EnterpriseServices.ThreadPoolOption.Inherit">
      <summary>线程池单元的类型与使用的调用方线程单元的类型相同。</summary>
    </member>
    <member name="F:System.EnterpriseServices.ThreadPoolOption.MTA">
      <summary>使用了多线程单元 (MTA)。</summary>
    </member>
    <member name="F:System.EnterpriseServices.ThreadPoolOption.None">
      <summary>未使用线程池。 如果使用该值来配置传递给 <see cref="T:System.EnterpriseServices.Activity" /> 的 <see cref="T:System.EnterpriseServices.ServiceConfig" />，则将引发异常。</summary>
    </member>
    <member name="F:System.EnterpriseServices.ThreadPoolOption.STA">
      <summary>正在使用单线程单元 (STA)。</summary>
    </member>
    <member name="T:System.EnterpriseServices.TransactionAttribute">
      <summary>指定可用于特性化对象的事务的类型。 允许值是 <see cref="T:System.EnterpriseServices.TransactionOption" /> 枚举的成员。</summary>
    </member>
    <member name="M:System.EnterpriseServices.TransactionAttribute.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.TransactionAttribute" /> 类的新实例，并且将组件的请求的事务类型设置为 <see cref="F:System.EnterpriseServices.TransactionOption.Required" />。</summary>
    </member>
    <member name="M:System.EnterpriseServices.TransactionAttribute.#ctor(System.EnterpriseServices.TransactionOption)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.TransactionAttribute" /> 类的新实例，并且指定事务类型。</summary>
      <param name="val">指定的事务类型，一个 <see cref="T:System.EnterpriseServices.TransactionOption" /> 值。</param>
    </member>
    <member name="P:System.EnterpriseServices.TransactionAttribute.Isolation">
      <summary>获取或设置事务隔离级别。</summary>
      <returns>
        <see cref="T:System.EnterpriseServices.TransactionIsolationLevel" /> 值之一。</returns>
    </member>
    <member name="P:System.EnterpriseServices.TransactionAttribute.Timeout">
      <summary>获取或设置该事务的超时。</summary>
      <returns>以秒为单位的事务超时。</returns>
    </member>
    <member name="P:System.EnterpriseServices.TransactionAttribute.Value">
      <summary>获取事务的 <see cref="T:System.EnterpriseServices.TransactionOption" /> 值，并且可以选择禁用事务服务。</summary>
      <returns>指定的事务类型，一个 <see cref="T:System.EnterpriseServices.TransactionOption" /> 值。</returns>
    </member>
    <member name="T:System.EnterpriseServices.TransactionIsolationLevel">
      <summary>指定 <see cref="T:System.EnterpriseServices.TransactionAttribute" /> 的值。</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionIsolationLevel.Any">
      <summary>组件的隔离级别是从调用组件的隔离级别获得的。 如果组件是根组件，则使用的隔离级别为 <see cref="F:System.EnterpriseServices.TransactionIsolationLevel.Serializable" />。</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionIsolationLevel.ReadCommitted">
      <summary>在读取数据时保持共享锁以避免读取已修改的数据，但在事务结束前这些数据可能已更改，因此会导致不可重复的读取或幻像数据。</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionIsolationLevel.ReadUncommitted">
      <summary>发出共享锁定并允许非独占方式的锁定。</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionIsolationLevel.RepeatableRead">
      <summary>在查询中使用的所有数据上放置锁，以防止其他用户更新这些数据。 这防止了不可重复的读取，但仍有可能产生幻像行。</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionIsolationLevel.Serializable">
      <summary>在完成事务前防止更新或插入。</summary>
    </member>
    <member name="T:System.EnterpriseServices.TransactionOption">
      <summary>指定组件请求的自动事务类型。</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionOption.Disabled">
      <summary>忽略当前上下文中的任何事务。</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionOption.NotSupported">
      <summary>使用非受控事务在上下文中创建组件。</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionOption.Required">
      <summary>如果事务存在，则共享该事务；如有必要，则创建新事务。</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionOption.RequiresNew">
      <summary>使用新事务创建组件，而与当前上下文的状态无关。</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionOption.Supported">
      <summary>如果事务存在，则共享该事务。</summary>
    </member>
    <member name="T:System.EnterpriseServices.TransactionStatus">
      <summary>指示事务状态。</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionStatus.Aborted">
      <summary>该事务被中止。</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionStatus.Aborting">
      <summary>事务正在中止。</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionStatus.Commited">
      <summary>事务已提交。</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionStatus.LocallyOk">
      <summary>事务未提交，也未中止。</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionStatus.NoTransaction">
      <summary>当前没有通过 <see cref="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" /> 使用的事务。</summary>
    </member>
    <member name="T:System.EnterpriseServices.TransactionVote">
      <summary>指定事务结果决定所允许的值。</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionVote.Abort">
      <summary>中止当前事务。</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionVote.Commit">
      <summary>提交当前事务。</summary>
    </member>
    <member name="T:System.EnterpriseServices.XACTTRANSINFO">
      <summary>表示在 <see cref="T:System.EnterpriseServices.ITransaction" /> 接口中使用的结构。</summary>
    </member>
    <member name="F:System.EnterpriseServices.XACTTRANSINFO.grfRMSupported">
      <summary>指定零。 该字段被保留。</summary>
    </member>
    <member name="F:System.EnterpriseServices.XACTTRANSINFO.grfRMSupportedRetaining">
      <summary>指定零。 该字段被保留。</summary>
    </member>
    <member name="F:System.EnterpriseServices.XACTTRANSINFO.grfTCSupported">
      <summary>表示一个位屏蔽，指示此事务实现支持哪些 grfTC 标志。</summary>
    </member>
    <member name="F:System.EnterpriseServices.XACTTRANSINFO.grfTCSupportedRetaining">
      <summary>指定零。 该字段被保留。</summary>
    </member>
    <member name="F:System.EnterpriseServices.XACTTRANSINFO.isoFlags">
      <summary>指定零。 该字段被保留。</summary>
    </member>
    <member name="F:System.EnterpriseServices.XACTTRANSINFO.isoLevel">
      <summary>表示与此事务对象关联的隔离级别。 ISOLATIONLEVEL_UNSPECIFIED 指示未指定任何隔离级别。</summary>
    </member>
    <member name="F:System.EnterpriseServices.XACTTRANSINFO.uow">
      <summary>表示与此事务关联的工作单元。</summary>
    </member>
    <member name="T:System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute">
      <summary>在标记的应用程序上启用补偿资源管理器 (CRM)。</summary>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute" /> 类的新实例，并将 <see cref="P:System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute.Value" /> 属性设置为 true。</summary>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute" /> 类的新实例，并可以选择将 <see cref="P:System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute.Value" /> 属性设置为 false。</summary>
      <param name="val">若要启用补偿资源管理器 (CRM)，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute.Value">
      <summary>在标记的应用程序上启用或禁用补偿资源管理器 (CRM)。</summary>
      <returns>如果启用了 CRM，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="T:System.EnterpriseServices.CompensatingResourceManager.Clerk">
      <summary>将事务性操作的记录写入日志。</summary>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Clerk.#ctor(System.String,System.String,System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.CompensatingResourceManager.Clerk" /> 类的新实例。</summary>
      <param name="compensator">补偿器的名称。</param>
      <param name="description">补偿器的说明。</param>
      <param name="flags">
        <see cref="T:System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions" /> 值的按位组合。</param>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Clerk.#ctor(System.Type,System.String,System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions)">
      <summary>初始化 <see cref="T:System.EnterpriseServices.CompensatingResourceManager.Clerk" /> 类的新实例。</summary>
      <param name="compensator">一个表示补偿器的类型。</param>
      <param name="description">补偿器的说明。</param>
      <param name="flags">
        <see cref="T:System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions" /> 值的按位组合。</param>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Clerk.ForceLog">
      <summary>强制将所有日志记录存入磁盘。</summary>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Clerk.ForceTransactionToAbort">
      <summary>对事务执行立即中断调用。</summary>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Clerk.ForgetLogRecord">
      <summary>不传递该接口的此实例已写入的最后的日志记录。</summary>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.Clerk.LogRecordCount">
      <summary>获取日志记录的数目。</summary>
      <returns>日志记录的数目。</returns>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.Clerk.TransactionUOW">
      <summary>获取表示事务工作单元 (UOW) 的值。</summary>
      <returns>表示 UOW 的 GUID。</returns>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Clerk.WriteLogRecord(System.Object)">
      <summary>将未结构化的日志记录写入日志。</summary>
      <param name="record">要写入日志的日志记录。</param>
    </member>
    <member name="T:System.EnterpriseServices.CompensatingResourceManager.ClerkInfo">
      <summary>包含描述活动补偿资源管理器 (CRM) Clerk 对象的信息。</summary>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.ClerkInfo.ActivityId">
      <summary>获取当前补偿资源管理器 (CRM) 运作器的活动 ID。</summary>
      <returns>获取当前补偿资源管理器 (CRM) 运作器的活动 ID。</returns>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.ClerkInfo.Clerk">
      <summary>获取当前 Clerk 的 <see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown" />。</summary>
      <returns>当前 Clerk 的 <see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown" />。</returns>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.ClerkInfo.Compensator">
      <summary>获取当前 CRM Clerk 的补偿资源管理器 (CRM) 补偿器的 ProgId。</summary>
      <returns>当前 CRM Clerk 的 CRM 补偿器的 ProgId。</returns>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.ClerkInfo.Description">
      <summary>获取当前 CRM Clerk 的补偿资源管理器 (CRM) 补偿器的说明。 该说明字符串是由 ICrmLogControl::RegisterCompensator 方法提供的字符串。</summary>
      <returns>当前 CRM Clerk 的 CRM 补偿器的说明。</returns>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.ClerkInfo.InstanceId">
      <summary>获取当前补偿资源管理器 (CRM) Clerk 的实例类 ID (CLSID)。</summary>
      <returns>当前 CRM Clerk 的实例 CLSID。</returns>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.ClerkInfo.TransactionUOW">
      <summary>获取当前补偿资源管理器 (CRM) Clerk 的事务的工作单元 (UOW)。</summary>
      <returns>当前 CRM Clerk 的事务的 UOW。</returns>
    </member>
    <member name="T:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor">
      <summary>包含进程中所有处于活动状态的 Clerk 的快照。</summary>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor" /> 类的新实例。</summary>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor.Count">
      <summary>获取补偿资源管理器 (CRM) 监视器集合中 Clerk 监视器的计数。</summary>
      <returns>CRM 监视器集合中 Clerk 监视器的数目。</returns>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor.GetEnumerator">
      <summary>返回补偿资源管理器 (CRM) 监视器集合中 Clerk 的枚举。</summary>
      <returns>描述集合中 Clerk 的枚举数。</returns>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor.Item(System.Int32)">
      <summary>获取此 <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor" /> 的 <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ClerkInfo" /> 对象。</summary>
      <returns>此 <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor" /> 的 <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ClerkInfo" /> 对象。</returns>
      <param name="index">标识 <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor" /> 的整数索引。</param>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor.Item(System.String)">
      <summary>获取此 <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor" /> 的 <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ClerkInfo" /> 对象。</summary>
      <returns>此 <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor" /> 的 <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ClerkInfo" /> 对象。</returns>
      <param name="index">标识 <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor" /> 的数值索引。</param>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor.Populate">
      <summary>获取 Clerk 集合对象，该对象是 Clerk 的当前状态的快照。</summary>
    </member>
    <member name="T:System.EnterpriseServices.CompensatingResourceManager.Compensator">
      <summary>表示所有补偿资源管理器 (CRM) 补偿器的基类。</summary>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.CompensatingResourceManager.Compensator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.AbortRecord(System.EnterpriseServices.CompensatingResourceManager.LogRecord)">
      <summary>在中断阶段期间将日志记录传递到补偿资源管理器 (CRM) 补偿器。</summary>
      <returns>如果应忘记传递的记录，为 true；否则为 false。</returns>
      <param name="rec">要传递的日志记录。</param>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.BeginAbort(System.Boolean)">
      <summary>通知补偿资源管理器 (CRM) 补偿器事务完成的中断阶段，并且通知即将传递记录。</summary>
      <param name="fRecovery">若要开始中断阶段，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.BeginCommit(System.Boolean)">
      <summary>通知补偿资源管理器 (CRM) 补偿器事务完成的提交阶段，并且通知即将传递记录。</summary>
      <param name="fRecovery">若要开始提交阶段，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.BeginPrepare">
      <summary>通知补偿资源管理器 (CRM) 补偿器事务完成的准备阶段，并且通知即将传递记录。</summary>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.Compensator.Clerk">
      <summary>获取一个值，该值表示补偿资源管理器 (CRM) <see cref="T:System.EnterpriseServices.CompensatingResourceManager.Clerk" /> 对象。</summary>
      <returns>
        <see cref="T:System.EnterpriseServices.CompensatingResourceManager.Clerk" /> 对象。</returns>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.CommitRecord(System.EnterpriseServices.CompensatingResourceManager.LogRecord)">
      <summary>在提交阶段期间以前向顺序传递日志记录。</summary>
      <returns>如果应忘记传递的记录，为 true；否则为 false。</returns>
      <param name="rec">要转发的日志记录。</param>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.EndAbort">
      <summary>通知补偿资源管理器 (CRM) 补偿器在中断阶段期间已接收所有可用日志记录。</summary>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.EndCommit">
      <summary>通知补偿资源管理器 (CRM) 补偿器在提交阶段期间已传递所有可用日志记录。</summary>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.EndPrepare">
      <summary>通知补偿资源管理器 (CRM) 补偿器在准备阶段期间已具有所有可用日志记录。</summary>
      <returns>如果成功，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.PrepareRecord(System.EnterpriseServices.CompensatingResourceManager.LogRecord)">
      <summary>在准备阶段期间以前向顺序传递日志记录。</summary>
      <returns>如果应忘记传递的记录，为 true；否则为 false。</returns>
      <param name="rec">要转发的日志记录。</param>
    </member>
    <member name="T:System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions">
      <summary>指定一些标志，这些标志控制补偿资源管理器 (CRM) 补偿器应接收事务完成的哪些阶段，并且这些标志控制如果有问题的事务在尝试恢复后问题仍未解决则恢复是否应失败。</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions.AbortPhase">
      <summary>表示中断阶段。</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions.AllPhases">
      <summary>表示所有阶段。</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions.CommitPhase">
      <summary>表示提交阶段。</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions.FailIfInDoubtsRemain">
      <summary>如果有问题的事务在尝试恢复后问题仍未解决则失败。</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions.PreparePhase">
      <summary>表示准备阶段。</summary>
    </member>
    <member name="T:System.EnterpriseServices.CompensatingResourceManager.LogRecord">
      <summary>表示作为 COM+ CrmLogRecordRead 结构传递的未结构化的日志记录。 此类不能被继承。</summary>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.LogRecord.Flags">
      <summary>获取一个值，该值指示何时写入日志记录。</summary>
      <returns>一个 <see cref="T:System.EnterpriseServices.CompensatingResourceManager.LogRecordFlags" /> 值的按位组合，它提供有关何时写入该记录的信息。</returns>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.LogRecord.Record">
      <summary>获取日志记录用户数据。</summary>
      <returns>包含用户数据的单个 BLOB。</returns>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.LogRecord.Sequence">
      <summary>日志记录的序列号。</summary>
      <returns>一个整数值，指定日志记录的序列号。</returns>
    </member>
    <member name="T:System.EnterpriseServices.CompensatingResourceManager.LogRecordFlags">
      <summary>描述补偿资源管理器 (CRM) 日志记录的来源。</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.LogRecordFlags.ForgetTarget">
      <summary>指示应忘记已传递的记录。</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.LogRecordFlags.ReplayInProgress">
      <summary>当重播正在进行时写入日志记录。</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.LogRecordFlags.WrittenDuringAbort">
      <summary>在中止期间写入日志记录。</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.LogRecordFlags.WrittenDuringCommit">
      <summary>在提交期间写入日志记录。</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.LogRecordFlags.WrittenDuringPrepare">
      <summary>在准备期间写入日志记录。</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.LogRecordFlags.WrittenDuringReplay">
      <summary>在重播期间写入日志记录。</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.LogRecordFlags.WrittenDurringRecovery">
      <summary>在恢复期间写入日志记录。</summary>
    </member>
    <member name="T:System.EnterpriseServices.CompensatingResourceManager.TransactionState">
      <summary>指定当前补偿资源管理器 (CRM) 事务的状态。</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.TransactionState.Aborted">
      <summary>该事务被中止。</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.TransactionState.Active">
      <summary>该事务处于活动状态。</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.TransactionState.Committed">
      <summary>该事务被提交。</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.TransactionState.Indoubt">
      <summary>该事务是有问题的。</summary>
    </member>
    <member name="T:System.EnterpriseServices.Internal.AppDomainHelper">
      <summary>切换到应将对象绑定到的特定应用程序域，并回调给定函数。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.AppDomainHelper.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.Internal.AppDomainHelper" /> 类的新实例。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.AppDomainHelper.Finalize">
      <summary>在通过垃圾回收将 <see cref="T:System.ComponentModel.Component" /> 回收之前，释放非托管资源并执行其他清理操作。</summary>
    </member>
    <member name="T:System.EnterpriseServices.Internal.AssemblyLocator">
      <summary>定位程序集并返回该程序集的模块的信息。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.AssemblyLocator.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.Internal.AssemblyLocator" /> 类的新实例。</summary>
    </member>
    <member name="T:System.EnterpriseServices.Internal.ClientRemotingConfig">
      <summary>定义一个静态 <see cref="M:System.EnterpriseServices.Internal.ClientRemotingConfig.Write(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" /> 方法，该方法创建适合于客户端类型库的客户端远程处理配置文件。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ClientRemotingConfig.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.Internal.ClientRemotingConfig" /> 类的新实例。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ClientRemotingConfig.Write(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>在启用 SOAP 的 COM+ 应用程序中创建适合于客户端类型库的客户端远程处理配置文件。</summary>
      <returns>如果成功创建了客户端远程处理配置文件，则为 true；否则为 false。</returns>
      <param name="DestinationDirectory">用于创建配置文件的文件夹。</param>
      <param name="VRoot">虚拟根目录的名称。</param>
      <param name="BaseUrl">包含虚拟根目录的基 URL。</param>
      <param name="AssemblyName">包含与类型库对应的公共语言运行时 (CLR) 元数据的程序集的显示名称。</param>
      <param name="TypeName">包含与类型库对应的 CLR 元数据的程序集的完全限定名。</param>
      <param name="ProgId">类的编程标识符。</param>
      <param name="Mode">激活模式。</param>
      <param name="Transport">未使用。 为此参数指定 null。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="RemotingConfiguration" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.Internal.ClrObjectFactory">
      <summary>从客户端激活启用 SOAP 的 COM+ 应用程序代理。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ClrObjectFactory.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.Internal.ClrObjectFactory" /> 类的新实例。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ClrObjectFactory.CreateFromAssembly(System.String,System.String,System.String)">
      <summary>使用程序集的配置文件，通过 .NET 远程处理激活远程程序集。</summary>
      <returns>表示此类型的 <see cref="T:System.Object" /> 实例，其区域性、参数以及绑定和激活特性均设置为 null；如果找不到 <paramref name="TypeName" /> 参数，将设置为 null。</returns>
      <param name="AssemblyName">要激活的程序集的名称。</param>
      <param name="TypeName">要激活的类型的名称。</param>
      <param name="Mode">未使用。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">类没有注册。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, RemotingConfiguration" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ClrObjectFactory.CreateFromMailbox(System.String,System.String)">
      <summary>使用远程程序集的邮箱，通过 .NET 远程处理激活远程程序集。 目前尚未实现；如果调用，将引发 <see cref="T:System.Runtime.InteropServices.COMException" />。</summary>
      <returns>调用此方法会引发异常。</returns>
      <param name="Mailbox">Web 服务上的邮箱。</param>
      <param name="Mode">未使用。</param>
      <exception cref="T:System.Runtime.InteropServices.COMException">简单邮件传输协议 (SMTP) 尚未实现。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ClrObjectFactory.CreateFromVroot(System.String,System.String)">
      <summary>使用远程程序集的虚拟根 URL，通过 .NET 远程处理激活远程程序集。</summary>
      <returns>表示此类型的 <see cref="T:System.Object" /> 实例，其区域性、参数以及绑定和激活特性均设置为 null；如果找不到 <paramref name="VrootUrl" /> 参数标识的程序集，将设置为 null。</returns>
      <param name="VrootUrl">要激活的对象的虚拟根目录 URL。</param>
      <param name="Mode">未使用。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">未能打开线程标记。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ClrObjectFactory.CreateFromWsdl(System.String,System.String)">
      <summary>使用 XML Web services 的 Web 服务描述语言 (WSDL)，通过 .NET 远程处理激活远程程序集。</summary>
      <returns>表示此类型的 <see cref="T:System.Object" /> 实例，其区域性、参数、绑定以及激活特性都设置为 null；如果未找到 <paramref name="WsdlUrl" /> 参数标识的程序集，则设置为 null。</returns>
      <param name="WsdlUrl">Web 服务的 WSDL URL。</param>
      <param name="Mode">未使用。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">未能打开线程标记。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.Internal.ComManagedImportUtil">
      <summary>标识和安装 COM+ 目录中的组件。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ComManagedImportUtil.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.Internal.ComManagedImportUtil" /> 类的新实例。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ComManagedImportUtil.GetComponentInfo(System.String,System.String@,System.String@)">
      <summary>从程序集中获取组件信息。</summary>
      <param name="assemblyPath">程序集的路径。</param>
      <param name="numComponents">此方法返回时，此参数包含程序集中的组件的数目。</param>
      <param name="componentInfo">此方法返回时，此参数包含有关这些组件的信息。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyPath" /> 为空字符串，只包含空白，或者包含 <see cref="F:System.IO.Path.InvalidPathChars" /> 定义的一个或多个无效字符。 - 或 - 系统未能检索绝对路径。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所需的权限。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyPath" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="assemblyPath" /> 包含冒号（“:”）。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。 例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ComManagedImportUtil.InstallAssembly(System.String,System.String,System.String)">
      <summary>将程序集安装到 COM+ 应用程序。</summary>
      <param name="asmpath">程序集的路径。</param>
      <param name="parname">COM+ 分区名称。</param>
      <param name="appname">COM+ 应用程序名称。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <exception cref="T:System.EnterpriseServices.RegistrationException">输入程序集没有强名称。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.Internal.ComSoapPublishError">
      <summary>在 COM+ 应用程序中发布启用 SOAP 的服务时使用的错误处理程序。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ComSoapPublishError.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.Internal.ComSoapPublishError" /> 类的新实例。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ComSoapPublishError.Report(System.String)">
      <summary>将在 COM+ 应用程序中发布启用 SOAP 的 COM 接口时遇到的错误写入事件日志中。</summary>
      <param name="s">要写入事件日志的错误信息。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.Internal.GenerateMetadata">
      <summary>生成 COM+ 组件的公共语言运行时 (CLR) 元数据。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.GenerateMetadata.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.Internal.GenerateMetadata" /> 类的新实例。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.GenerateMetadata.Generate(System.String,System.String)">
      <summary>生成或定位一个程序集，该程序集包含指定类型库所表示的 COM+ 组件的公共语言运行时 (CLR) 元数据。</summary>
      <returns>生成的程序集的名称；如果输入无效，则为一个空字符串。</returns>
      <param name="strSrcTypeLib">类型库的名称，将为该类型库生成一个程序集。</param>
      <param name="outPath">将在其中生成程序集或定位现有程序集的文件夹。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.GenerateMetadata.GenerateMetaData(System.String,System.String,System.Byte[],System.Reflection.StrongNameKeyPair)">
      <summary>生成或定位一个程序集，该程序集包含指定类型库所表示的 COM+ 组件的公共语言运行时 (CLR) 元数据；使用强名称密钥对来对程序集进行签名；然后将该程序集安装在全局程序集缓存中。</summary>
      <returns>生成的程序集的名称；如果输入无效，则为一个空字符串。</returns>
      <param name="strSrcTypeLib">类型库的名称，将为该类型库生成一个程序集。</param>
      <param name="outPath">将在其中生成程序集或定位现有程序集的文件夹。</param>
      <param name="PublicKey">用于将类型库信息导入程序集的公钥。</param>
      <param name="KeyPair">用于对生成的程序集进行签名的强名称密钥对。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.GenerateMetadata.GenerateSigned(System.String,System.String,System.Boolean,System.String@)">
      <summary>生成或定位一个程序集，该程序集包含指定类型库所表示的 COM+ 组件的公共语言运行时 (CLR) 元数据；使用强名称密钥对来对程序集进行签名；然后将该程序集安装在全局程序集缓存中。</summary>
      <returns>生成的程序集的名称；如果输入无效，则为一个空字符串。</returns>
      <param name="strSrcTypeLib">类型库的名称，将为该类型库生成一个程序集。</param>
      <param name="outPath">将在其中生成程序集或定位现有程序集的文件夹。</param>
      <param name="InstallGac">已忽略。</param>
      <param name="Error">一个可写入错误信息的字符串。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.GenerateMetadata.SearchPath(System.String,System.String,System.String,System.Int32,System.String,System.Int32[])">
      <summary>在指定路径搜索指定文件。</summary>
      <returns>如果搜索成功，返回值的长度是复制到 <paramref name="buffer" /> 的字符串的长度。 如果搜索失败，则返回值为 0。</returns>
      <param name="path">要在其中搜索文件的路径。</param>
      <param name="fileName">要搜索的文件的名称。</param>
      <param name="extension">搜索文件时要添加到文件名的扩展名。</param>
      <param name="numBufferChars">接收有效路径和文件名的缓冲区的大小。</param>
      <param name="buffer">接收找到的文件的路径和文件名的缓冲区。</param>
      <param name="filePart">接收地址的变量，该地址的内容是有效路径和文件名的最后一个组成部分。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.Internal.IClrObjectFactory">
      <summary>从客户端激活启用 SOAP 的 COM+ 应用程序代理。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IClrObjectFactory.CreateFromAssembly(System.String,System.String,System.String)">
      <summary>使用程序集的配置文件，通过 .NET 远程处理激活远程程序集。</summary>
      <returns>表示此类型的 <see cref="T:System.Object" /> 实例，其区域性、参数、绑定和激活特性都设置为 null；如果没有找到 <paramref name="type" /> 参数，则设置为 null。</returns>
      <param name="assembly">要激活的程序集的名称。</param>
      <param name="type">要激活的类型的名称。</param>
      <param name="mode">未使用。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">类没有注册。</exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IClrObjectFactory.CreateFromMailbox(System.String,System.String)">
      <summary>使用远程程序集的邮箱，通过 .NET 远程处理激活远程程序集。 目前尚未实现；如果调用，将引发 <see cref="T:System.Runtime.InteropServices.COMException" />。</summary>
      <returns>调用此方法会引发异常。</returns>
      <param name="Mailbox">Web 服务上的邮箱。</param>
      <param name="Mode">未使用。</param>
      <exception cref="T:System.Runtime.InteropServices.COMException">简单邮件传输协议 (SMTP) 尚未实现。</exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IClrObjectFactory.CreateFromVroot(System.String,System.String)">
      <summary>使用远程程序集的虚拟根 URL，通过 .NET 远程处理激活远程程序集。</summary>
      <returns>表示此类型的 <see cref="T:System.Object" /> 实例，其区域性、参数以及绑定和激活特性均设置为 null；如果找不到 <paramref name="VrootUrl" /> 参数标识的程序集，将设置为 null。</returns>
      <param name="VrootUrl">远程对象的虚拟根目录 URL。</param>
      <param name="Mode">未使用。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">未能打开线程标记。</exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IClrObjectFactory.CreateFromWsdl(System.String,System.String)">
      <summary>使用 XML Web services 的 Web 服务描述语言 (WSDL)，通过 .NET 远程处理激活远程程序集。</summary>
      <returns>表示此类型的 <see cref="T:System.Object" /> 实例，其区域性、参数、绑定以及激活特性都设置为 null；如果未找到 <paramref name="WsdlUrl" /> 参数标识的程序集，则设置为 null。</returns>
      <param name="WsdlUrl">Web 服务的 WSDL URL。</param>
      <param name="Mode">未使用。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">未能打开线程标记。</exception>
    </member>
    <member name="T:System.EnterpriseServices.Internal.IComManagedImportUtil">
      <summary>标识和安装 COM+ 目录中的组件。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComManagedImportUtil.GetComponentInfo(System.String,System.String@,System.String@)">
      <summary>从程序集中获取组件信息。</summary>
      <param name="assemblyPath">程序集的路径。</param>
      <param name="numComponents">此方法返回时，此参数包含程序集中的组件的数目。</param>
      <param name="componentInfo">此方法返回时，此参数包含有关这些组件的信息。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyPath" /> 为空字符串 ("")，只包含空格，或者包含 <see cref="F:System.IO.Path.InvalidPathChars" /> 中所定义的一个或多个无效字符。 - 或 - 系统未能检索绝对路径。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所需的权限。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyPath" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="assemblyPath" /> 包含冒号（“:”）。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。 例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComManagedImportUtil.InstallAssembly(System.String,System.String,System.String)">
      <summary>将程序集安装到 COM+ 应用程序。</summary>
      <param name="filename">程序集的路径。</param>
      <param name="parname">COM+ 分区名称。</param>
      <param name="appname">COM+ 应用程序名称。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <exception cref="T:System.EnterpriseServices.RegistrationException">输入程序集没有强名称。</exception>
    </member>
    <member name="T:System.EnterpriseServices.Internal.IComSoapIISVRoot">
      <summary>用于创建和删除 Internet 信息服务 (IIS) 6.0 虚拟根目录的接口定义。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapIISVRoot.Create(System.String,System.String,System.String,System.String@)">
      <summary>创建 Internet 信息服务 (IIS) 虚拟根目录。</summary>
      <param name="RootWeb">根 Web 服务器。</param>
      <param name="PhysicalDirectory">虚拟根目录的物理路径，它对应 <see cref="M:System.EnterpriseServices.Internal.IComSoapPublisher.CreateVirtualRoot(System.String,System.String,System.String@,System.String@,System.String@,System.String@)" /> 方法中的 <paramref name="PhysicalPath" />。</param>
      <param name="VirtualDirectory">虚拟根目录的名称，它对应 <see cref="M:System.EnterpriseServices.Internal.IComSoapPublisher.CreateVirtualRoot(System.String,System.String,System.String@,System.String@,System.String@,System.String@)" /> 方法中的 <paramref name="VirtualRoot" />。</param>
      <param name="Error">一个可写入错误信息的字符串。</param>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapIISVRoot.Delete(System.String,System.String,System.String,System.String@)">
      <summary>删除 Internet 信息服务 (IIS) 虚拟根目录。</summary>
      <param name="RootWeb">根 Web 服务器。</param>
      <param name="PhysicalDirectory">虚拟根目录的物理路径。</param>
      <param name="VirtualDirectory">虚拟根目录的名称。</param>
      <param name="Error">一个可写入错误信息的字符串。</param>
    </member>
    <member name="T:System.EnterpriseServices.Internal.IComSoapMetadata">
      <summary>指定为 COM+ 组件生成公共语言运行时 (CLR) 元数据的方法。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapMetadata.Generate(System.String,System.String)">
      <summary>生成一个程序集，该程序集包含指定类型库所表示的 COM+ 组件的公共语言运行时 (CLR) 元数据。</summary>
      <returns>生成的程序集的名称。</returns>
      <param name="SrcTypeLibFileName">类型库的名称，将为该类型库生成一个程序集。</param>
      <param name="OutPath">将在其中生成程序集的文件夹。</param>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapMetadata.GenerateSigned(System.String,System.String,System.Boolean,System.String@)">
      <summary>生成一个程序集，该程序集包含指定类型库所表示的 COM+ 组件的公共语言运行时 (CLR) 元数据；使用强名称密钥对来对程序集进行签名；然后将该程序集安装在全局程序集缓存中。</summary>
      <returns>生成的程序集的名称。</returns>
      <param name="SrcTypeLibFileName">类型库的名称，将为该类型库生成一个程序集。</param>
      <param name="OutPath">将在其中生成程序集的文件夹。</param>
      <param name="InstallGac">一个标志，指示是否将程序集安装在全局程序集缓存中。</param>
      <param name="Error">一个可写入错误信息的字符串。</param>
    </member>
    <member name="T:System.EnterpriseServices.Internal.IComSoapPublisher">
      <summary>为启用 SOAP 的 COM+ 应用程序发布 COM 接口。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapPublisher.CreateMailBox(System.String,System.String,System.String@,System.String@,System.String@,System.String@)">
      <summary>在指定的 URL 处，创建启用 SOAP 的 COM+ 应用程序邮箱。 没有完全实现。</summary>
      <param name="RootMailServer">根邮件服务器的 URL。</param>
      <param name="MailBox">要创建的邮箱。</param>
      <param name="SmtpName">此方法返回时，此参数包含该邮箱所在的简单邮件传输协议 (SMTP) 服务器的名称。</param>
      <param name="Domain">此方法返回时，此参数包含 SMTP 服务器的域。</param>
      <param name="PhysicalPath">此方法返回时，此参数包含邮箱的文件系统路径。</param>
      <param name="Error">此方法返回时，此参数包含错误信息（如果遇到了问题）。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapPublisher.CreateVirtualRoot(System.String,System.String,System.String@,System.String@,System.String@,System.String@)">
      <summary>创建启用 SOAP 的 COM+ 应用程序虚拟根目录。</summary>
      <param name="Operation">要执行的操作。</param>
      <param name="FullUrl">虚拟根目录的完整 URL 地址。</param>
      <param name="BaseUrl">此方法返回时，此参数包含基 URL 地址。</param>
      <param name="VirtualRoot">此方法返回时，此参数包含虚拟根目录的名称。</param>
      <param name="PhysicalPath">此方法返回时，此参数包含虚拟根目录的文件路径。</param>
      <param name="Error">此方法返回时，此参数包含错误信息（如果遇到了问题）。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。 - 或 - 调用方没有访问域名系统 (DNS) 信息的权限。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="FullUrl" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">解析本地主机名时遇到错误。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="FullUrl" /> 为空。 - 或 - <paramref name="FullUrl" /> 中指定的方案无效。 - 或 - <paramref name="FullUrl" /> 包含两个以上的连续斜杠。 - 或 - <paramref name="FullUrl" /> 中指定的密码无效。 - 或 - <paramref name="FullUrl" /> 中指定的主机名无效。 - 或 - <paramref name="FullUrl" /> 中指定的文件名无效。</exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapPublisher.DeleteMailBox(System.String,System.String,System.String@)">
      <summary>删除指定 URL 上启用 SOAP 的 COM+ 应用程序邮箱。 没有完全实现。</summary>
      <param name="RootMailServer">根邮件服务器的 URL。</param>
      <param name="MailBox">要删除的邮箱。</param>
      <param name="Error">此方法返回时，此参数包含错误信息（如果遇到了问题）。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapPublisher.DeleteVirtualRoot(System.String,System.String,System.String@)">
      <summary>删除启用 SOAP 的 COM+ 应用程序虚拟根目录。 没有完全实现。</summary>
      <param name="RootWebServer">根 Web 服务器。</param>
      <param name="FullUrl">虚拟根目录的完整 URL 地址。</param>
      <param name="Error">此方法返回时，此参数包含错误信息（如果遇到了问题）。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapPublisher.GacInstall(System.String)">
      <summary>将程序集安装在全局程序集缓存中。</summary>
      <param name="AssemblyPath">程序集的文件系统路径。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapPublisher.GacRemove(System.String)">
      <summary>从全局程序集缓存中移除程序集。</summary>
      <param name="AssemblyPath">程序集的文件系统路径。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="AssemblyPath" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="AssemblyPath" /> 为空。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="AssemblyPath" />。</exception>
      <exception cref="T:System.IO.FileLoadException">用两个不同的证据将一个程序集或模块加载了两次。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="AssemblyPath" /> 不是有效程序集。</exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapPublisher.GetAssemblyNameForCache(System.String,System.String@)">
      <summary>返回 SoapCache 目录中生成的强名称签名程序集的完整路径。</summary>
      <param name="TypeLibPath">包含类型库的文件的路径。</param>
      <param name="CachePath">此方法返回时，此参数包含 SoapCache 目录中的代理程序集的完整路径。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="TypeLibPath" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.ArgumentException">文件名为空，只包含空白，或包含无效字符。</exception>
      <exception cref="T:System.UnauthorizedAccessException">对 <paramref name="TypeLibPath" /> 的访问被拒绝。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。 例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="TypeLibPath" /> 字符串中间有一个冒号 (:)。</exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapPublisher.GetTypeNameFromProgId(System.String,System.String)">
      <summary>在程序集上反射，并返回与 ProgID 匹配的类型名。</summary>
      <returns>与 ProgID 匹配的类型名。</returns>
      <param name="AssemblyPath">程序集的文件系统路径。</param>
      <param name="ProgId">类的编程标识符。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapPublisher.ProcessClientTlb(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)">
      <summary>处理客户端类型库，在客户端上创建配置文件。</summary>
      <param name="ProgId">类的编程标识符。</param>
      <param name="SrcTlbPath">包含类型库的文件的路径。</param>
      <param name="PhysicalPath">Web 应用程序目录。</param>
      <param name="VRoot">虚拟根目录的名称。</param>
      <param name="BaseUrl">包含虚拟根目录的基 URL。</param>
      <param name="Mode">激活模式。</param>
      <param name="Transport">未使用。 为此参数指定 null。</param>
      <param name="AssemblyName">此方法返回时，此参数包含程序集的显示名称。</param>
      <param name="TypeName">此方法返回时，此参数包含程序集的完全限定类型名称。</param>
      <param name="Error">此方法返回时，此参数包含错误信息（如果遇到了问题）。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapPublisher.ProcessServerTlb(System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)">
      <summary>处理服务器类型库，从而向 Web.config 和 Default.disco 文件中添加或删除组件项。 必要时生成代理。</summary>
      <param name="ProgId">类的编程标识符。</param>
      <param name="SrcTlbPath">包含类型库的文件的路径。</param>
      <param name="PhysicalPath">Web 应用程序目录。</param>
      <param name="Operation">要执行的操作。</param>
      <param name="AssemblyName">此方法返回时，此参数包含程序集的显示名称。</param>
      <param name="TypeName">此方法返回时，此参数包含程序集的完全限定类型名称。</param>
      <param name="Error">此方法返回时，此参数包含错误信息（如果遇到了问题）。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <exception cref="T:System.EnterpriseServices.ServicedComponentException">
        <paramref name="SrcTlbPath" /> 参数引用了 scrobj.dll；因此，不支持通过 SOAP 发布脚本组件。</exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapPublisher.RegisterAssembly(System.String)">
      <summary>为 COM 互操作注册程序集。</summary>
      <param name="AssemblyPath">程序集的文件系统路径。</param>
      <exception cref="T:System.EnterpriseServices.RegistrationException">输入程序集没有强名称。</exception>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。 - 或 - 在没有所需 <see cref="T:System.Net.WebPermission" /> 的情况下，指定了不以“file://”开始的基本代码。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="AssemblyPath" /> 为 null。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="AssemblyPath" /> 或者未指定文件扩展名。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="AssemblyPath" /> 不是有效程序集。</exception>
      <exception cref="T:System.IO.FileLoadException">用两个不同的证据将一个程序集或模块加载了两次，或者程序集的名称比 MAX_PATH 字符长。</exception>
      <exception cref="T:System.InvalidOperationException">用 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> 标记的方法不是 static 方法。 - 或 - 在层次结构的给定级别有多个用 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> 标记的方法。 - 或 - 用 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> 标记的方法的签名无效。</exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapPublisher.UnRegisterAssembly(System.String)">
      <summary>注销 COM 互操作程序集。</summary>
      <param name="AssemblyPath">程序集的文件系统路径。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。 - 或 - 在没有所需 <see cref="T:System.Net.WebPermission" /> 的情况下，指定了不以“file://”开始的基本代码。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="AssemblyPath" /> 为 null。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="AssemblyPath" /> 或者未指定文件扩展名。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="AssemblyPath" /> 不是有效程序集。</exception>
      <exception cref="T:System.IO.FileLoadException">用两个不同的证据将一个程序集或模块加载了两次，或者程序集的名称比 MAX_PATH 字符长。</exception>
      <exception cref="T:System.InvalidOperationException">用 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> 标记的方法不是 static 方法。 - 或 - 在层次结构的给定级别有多个用 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> 标记的方法。 - 或 - 用 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> 标记的方法的签名无效。</exception>
    </member>
    <member name="T:System.EnterpriseServices.Internal.IISVirtualRoot">
      <summary>创建和删除 Internet 信息服务 (IIS) 6.0 虚拟根目录。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IISVirtualRoot.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.Internal.IISVirtualRoot" /> 类的新实例。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IISVirtualRoot.Create(System.String,System.String,System.String,System.String@)">
      <summary>创建 Internet 信息服务 (IIS) 虚拟根目录。</summary>
      <param name="RootWeb">一个具有值 "IIS://localhost/W3SVC/1/ROOT" 的字符串，表示根 Web 服务器。</param>
      <param name="inPhysicalDirectory">虚拟根目录的物理路径，它对应 <see cref="M:System.EnterpriseServices.Internal.Publish.CreateVirtualRoot(System.String,System.String,System.String@,System.String@,System.String@,System.String@)" /> 方法中的 <paramref name="PhysicalPath" />。</param>
      <param name="VirtualDirectory">虚拟根目录的名称，它对应 <see cref="M:System.EnterpriseServices.Internal.Publish.CreateVirtualRoot(System.String,System.String,System.String@,System.String@,System.String@,System.String@)" /> 中的 <paramref name="VirtualRoot" />。</param>
      <param name="Error">一个可写入错误信息的字符串。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.DirectoryServices.DirectoryServicesPermission, System.DirectoryServices, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IISVirtualRoot.Delete(System.String,System.String,System.String,System.String@)">
      <summary>删除 Internet 信息服务 (IIS) 虚拟根目录。</summary>
      <param name="RootWeb">根 Web 服务器，由 <see cref="M:System.EnterpriseServices.Internal.IComSoapPublisher.DeleteVirtualRoot(System.String,System.String,System.String@)" /> 方法中的 <paramref name="RootWebServer" /> 指定。</param>
      <param name="PhysicalDirectory">虚拟根目录的物理路径。</param>
      <param name="VirtualDirectory">虚拟根目录的名称。</param>
      <param name="Error">一个可写入错误信息的字符串。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.DirectoryServices.DirectoryServicesPermission, System.DirectoryServices, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.Internal.IServerWebConfig">
      <summary>为启用 SOAP 的 COM+ 应用程序创建 Web.config 文件，然后在该文件中为要在应用程序中发布的 COM 接口添加组件项。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IServerWebConfig.AddElement(System.String,System.String,System.String,System.String,System.String,System.String@)">
      <summary>在 Web.config 文件中为要在启用 SOAP 的 COM+ 应用程序中发布的 COM 接口添加 XML 元素。</summary>
      <param name="FilePath">现有 Web.config 文件的路径。</param>
      <param name="AssemblyName">包含要添加的类型的程序集的名称。</param>
      <param name="TypeName">要添加的类型的名称。</param>
      <param name="ProgId">要添加的类型的编程标识符。</param>
      <param name="Mode">一个字符串常数，它与 <see cref="T:System.Runtime.Remoting.WellKnownObjectMode" /> 枚举中的一个成员的名称对应，该成员名称指示如何激活已知对象。</param>
      <param name="Error">一个可写入错误信息的字符串。</param>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IServerWebConfig.Create(System.String,System.String,System.String@)">
      <summary>为启用 SOAP 的 COM+ 应用程序创建 Web.config 文件，以便准备在该文件中为要发布的 COM 接口添加 XML 元素。</summary>
      <param name="FilePath">用于创建配置文件的文件夹。</param>
      <param name="FileRootName">可以添加 config 扩展名的字符串值（例如，Web.config 的该字符串值为 Web）。</param>
      <param name="Error">一个可写入错误信息的字符串。</param>
    </member>
    <member name="T:System.EnterpriseServices.Internal.ISoapClientImport">
      <summary>导入经过身份验证的、加密的 SOAP 客户端代理。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ISoapClientImport.ProcessClientTlbEx(System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>创建 .NET 远程处理客户端配置文件，该文件包括安全和身份验证选项。</summary>
      <param name="progId">类的编程标识符。 如果是空字符串 ("")，此方法将不执行任何操作就返回。</param>
      <param name="virtualRoot">虚拟根目录的名称。</param>
      <param name="baseUrl">包含虚拟根目录的基 URL。</param>
      <param name="authentication">要使用的 ASP.NET 身份验证的类型。</param>
      <param name="assemblyName">程序集的名称。</param>
      <param name="typeName">类型名称。</param>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="T:System.EnterpriseServices.Internal.ISoapServerTlb">
      <summary>处理服务器上的经过身份验证的、加密的 SOAP 组件。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ISoapServerTlb.AddServerTlb(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@)">
      <summary>根据安全选项，将服务器类型库的项添加到 Web.config 和 Default.disco 文件中，并在必要时生成代理。</summary>
      <param name="progId">类的编程标识符。</param>
      <param name="classId">类型库的类标识符 (CLSID)。</param>
      <param name="interfaceId">类型库的 IID。</param>
      <param name="srcTlbPath">包含类型库的文件的路径。</param>
      <param name="rootWebServer">根 Web 服务器。</param>
      <param name="baseUrl">包含虚拟根目录的基 URL。</param>
      <param name="virtualRoot">虚拟根目录的名称。</param>
      <param name="clientActivated">如果激活了客户端，为 true；否则为 false。</param>
      <param name="wellKnown">如果已知，为 true；否则为 false。</param>
      <param name="discoFile">如果是发现文件，为 true；否则为 false。</param>
      <param name="operation">要执行的操作。 指定“delete”或空字符串。</param>
      <param name="assemblyName">此方法返回时，包含程序集的名称。</param>
      <param name="typeName">此方法返回时，包含程序集的类型。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <exception cref="T:System.PlatformNotSupportedException">SOAP 实用工具不可用。</exception>
      <exception cref="T:System.EnterpriseServices.ServicedComponentException">获取系统目录的调用失败。</exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ISoapServerTlb.DeleteServerTlb(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>从 Web.config 和 Default.disco 文件中移除服务器类型库的项，具体由安全选项确定。</summary>
      <param name="progId">类的编程标识符。</param>
      <param name="classId">类型库的类标识符 (CLSID)。</param>
      <param name="interfaceId">类型库的 IID。</param>
      <param name="srcTlbPath">包含类型库的文件的路径。</param>
      <param name="rootWebServer">根 Web 服务器。</param>
      <param name="baseUrl">包含虚拟根目录的基 URL。</param>
      <param name="virtualRoot">虚拟根目录的名称。</param>
      <param name="operation">未使用。 为此参数指定 null。</param>
      <param name="assemblyName">程序集的名称。</param>
      <param name="typeName">程序集的类型。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <exception cref="T:System.PlatformNotSupportedException">SOAP 实用工具不可用。</exception>
    </member>
    <member name="T:System.EnterpriseServices.Internal.ISoapServerVRoot">
      <summary>在服务器上发布经过身份验证的加密 SOAP 虚拟根目录。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ISoapServerVRoot.CreateVirtualRootEx(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)">
      <summary>用安全选项创建一个 SOAP 虚拟根目录。</summary>
      <param name="rootWebServer">根 Web 服务器。</param>
      <param name="inBaseUrl">包含虚拟根目录的基 URL。</param>
      <param name="inVirtualRoot">虚拟根目录的名称。</param>
      <param name="homePage">如果要设置 EnableDefaultDoc 属性，为 true；否则为 false。</param>
      <param name="discoFile">如果要创建默认发现文件，为 true；如果不创建任何发现文件，则为 false。 如果为 false，而 Default.disco 文件存在，将删除该文件。</param>
      <param name="secureSockets">如果要求 SSL 加密，为 true；否则为 false。</param>
      <param name="authentication">如果不使用任何身份验证（匿名用户），应指定“匿名”。 否则，应指定空字符串。</param>
      <param name="operation">未使用。 为此参数指定 null。</param>
      <param name="baseUrl">此方法返回时，此参数包含基 URL。</param>
      <param name="virtualRoot">此方法返回时，此参数包含虚拟根目录的名称。</param>
      <param name="physicalPath">此方法返回时，此参数包含虚拟根目录的磁盘地址。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <exception cref="T:System.PlatformNotSupportedException">SOAP 实用工具不可用。</exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ISoapServerVRoot.DeleteVirtualRootEx(System.String,System.String,System.String)">
      <summary>删除虚拟根目录。 没有完全实现。</summary>
      <param name="rootWebServer">根 Web 服务器。</param>
      <param name="baseUrl">包含虚拟根目录的基 URL。</param>
      <param name="virtualRoot">虚拟根目录的名称。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <exception cref="T:System.PlatformNotSupportedException">SOAP 实用工具不可用。</exception>
      <exception cref="T:System.EnterpriseServices.ServicedComponentException">标识系统目录的调用失败。</exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ISoapServerVRoot.GetVirtualRootStatus(System.String,System.String,System.String,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
      <summary>返回现有 SOAP 虚拟根目录的安全状态。</summary>
      <param name="rootWebServer">根 Web 服务器。</param>
      <param name="inBaseUrl">包含虚拟根目录的基 URL。</param>
      <param name="inVirtualRoot">虚拟根目录的名称。</param>
      <param name="exists">此方法返回时，如果虚拟目录存在，此参数将包含 true；否则将包含 false。</param>
      <param name="secureSockets">此方法返回时，如果要求 SSL 加密，此参数将包含 true；否则将包含 false。</param>
      <param name="windowsAuth">此方法返回时，如果设置了 Windows 身份验证，此参数将包含 true；否则将包含 false。</param>
      <param name="anonymous">此方法返回时，如果未设置身份验证（匿名用户），此参数将包含 true；否则将包含 false。</param>
      <param name="homePage">此方法返回时，如果设置了虚拟根目录的 EnableDefaultDoc 属性，此参数将包含 true；否则将包含 false。</param>
      <param name="discoFile">此方法返回时，如果 Default.disco 文件存在，此参数将包含 true；否则将包含 false。</param>
      <param name="physicalPath">此方法返回时，此参数包含虚拟根目录的磁盘地址。</param>
      <param name="baseUrl">此方法返回时，此参数包含基 URL。</param>
      <param name="virtualRoot">此方法返回时，此参数包含虚拟根目录的名称。</param>
    </member>
    <member name="T:System.EnterpriseServices.Internal.ISoapUtility">
      <summary>提供一些实用工具，以便支持由服务器导出启用 SOAP 的 COM+ 应用程序代理，以及由客户端导入这些代理。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ISoapUtility.GetServerBinPath(System.String,System.String,System.String,System.String@)">
      <summary>返回 SOAP 虚拟根目录下 bin 目录的路径。</summary>
      <param name="rootWebServer">根 Web 服务器。</param>
      <param name="inBaseUrl">基 URL 地址。</param>
      <param name="inVirtualRoot">虚拟根目录的名称。</param>
      <param name="binPath">此方法返回时，此参数包含 SOAP 虚拟根 bin 目录的文件路径。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <exception cref="T:System.PlatformNotSupportedException">SOAP 实用工具不可用。</exception>
      <exception cref="T:System.EnterpriseServices.ServicedComponentException">获取系统目录的调用失败。</exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ISoapUtility.GetServerPhysicalPath(System.String,System.String,System.String,System.String@)">
      <summary>返回 SOAP 虚拟根目录的路径。</summary>
      <param name="rootWebServer">根 Web 服务器。</param>
      <param name="inBaseUrl">基 URL 地址。</param>
      <param name="inVirtualRoot">虚拟根目录的名称。</param>
      <param name="physicalPath">此方法返回时，此参数包含 SOAP 虚拟根目录的文件路径。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <exception cref="T:System.PlatformNotSupportedException">SOAP 实用工具不可用。</exception>
      <exception cref="T:System.EnterpriseServices.ServicedComponentException">获取系统目录的调用失败。</exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ISoapUtility.Present">
      <summary>确定是否存在经过身份验证的、加密的 SOAP 接口。</summary>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <exception cref="T:System.PlatformNotSupportedException">SOAP 实用工具不可用。</exception>
    </member>
    <member name="T:System.EnterpriseServices.Internal.Publish">
      <summary>为启用 SOAP 的 COM+ 应用程序发布 COM 接口。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.Internal.Publish" /> 类的新实例。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.CreateMailBox(System.String,System.String,System.String@,System.String@,System.String@,System.String@)">
      <summary>在指定的 URL 处，创建启用 SOAP 的 COM+ 应用程序邮箱。 没有完全实现。</summary>
      <param name="RootMailServer">根邮件服务器的 URL。</param>
      <param name="MailBox">要创建的邮箱。</param>
      <param name="SmtpName">此方法返回时，此参数包含该邮箱所在的简单邮件传输协议 (SMTP) 服务器的名称。</param>
      <param name="Domain">此方法返回时，此参数包含 SMTP 服务器的域。</param>
      <param name="PhysicalPath">此方法返回时，此参数包含邮箱的文件系统路径。</param>
      <param name="Error">此方法返回时，此参数包含错误信息（如果遇到了问题）。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.CreateVirtualRoot(System.String,System.String,System.String@,System.String@,System.String@,System.String@)">
      <summary>创建启用 SOAP 的 COM+ 应用程序虚拟根目录。</summary>
      <param name="Operation">要执行的操作。</param>
      <param name="FullUrl">虚拟根目录的完整 URL 地址。</param>
      <param name="BaseUrl">此方法返回时，此参数包含基 URL 地址。</param>
      <param name="VirtualRoot">此方法返回时，此参数包含虚拟根目录的名称。</param>
      <param name="PhysicalPath">此方法返回时，此参数包含虚拟根目录的文件路径。</param>
      <param name="Error">此方法返回时，此参数包含错误信息（如果遇到了问题）。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。 - 或 - 调用方没有访问 DNS 信息的权限。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="FullUrl" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">解析本地主机名时遇到错误。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="FullUrl" /> 为空。 - 或 - <paramref name="FullUrl" /> 中指定的方案无效。 - 或 - <paramref name="FullUrl" /> 包含两个以上的连续斜杠。 - 或 - <paramref name="FullUrl" /> 中指定的密码无效。 - 或 - <paramref name="FullUrl" /> 中指定的主机名无效。 - 或 - <paramref name="FullUrl" /> 中指定的文件名无效。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, RemotingConfiguration" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.DirectoryServices.DirectoryServicesPermission, System.DirectoryServices, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.DeleteMailBox(System.String,System.String,System.String@)">
      <summary>删除指定 URL 上启用 SOAP 的 COM+ 应用程序邮箱。 没有完全实现。</summary>
      <param name="RootMailServer">根邮件服务器的 URL。</param>
      <param name="MailBox">要删除的邮箱。</param>
      <param name="Error">此方法返回时，此参数包含错误信息（如果遇到了问题）。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.DeleteVirtualRoot(System.String,System.String,System.String@)">
      <summary>删除启用 SOAP 的 COM+ 应用程序虚拟根目录。 没有完全实现。</summary>
      <param name="RootWebServer">根 Web 服务器。</param>
      <param name="FullUrl">虚拟根目录的完整 URL 地址。</param>
      <param name="Error">此方法返回时，此参数包含错误信息（如果遇到了问题）。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.GacInstall(System.String)">
      <summary>将程序集安装在全局程序集缓存中。</summary>
      <param name="AssemblyPath">程序集的文件系统路径。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.GacRemove(System.String)">
      <summary>从全局程序集缓存中移除程序集。</summary>
      <param name="AssemblyPath">程序集的文件系统路径。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。 - 或 - 调用方不具备路径发现权限。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="AssemblyPath" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="AssemblyPath" /> 为空。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="AssemblyPath" />。</exception>
      <exception cref="T:System.IO.FileLoadException">用两个不同的证据将一个程序集或模块加载了两次。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="AssemblyPath" /> 不是有效程序集。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlAppDomain" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.GetAssemblyNameForCache(System.String,System.String@)">
      <summary>返回 SoapCache 目录中生成的强名称签名程序集的完整路径。</summary>
      <param name="TypeLibPath">包含类型库的文件的路径。</param>
      <param name="CachePath">此方法返回时，此参数包含 SoapCache 目录的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="TypeLibPath" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.ArgumentException">文件名为空，只包含空白，或包含无效字符。</exception>
      <exception cref="T:System.UnauthorizedAccessException">对 <paramref name="TypeLibPath" /> 的访问被拒绝。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。 例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="TypeLibPath" /> 字符串中间有一个冒号 (:)。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.GetClientPhysicalPath(System.Boolean)">
      <summary>返回存储客户端配置文件的目录的路径。</summary>
      <returns>包含配置文件的目录的路径。</returns>
      <param name="CreateDir">如果要创建目录，应设置为 true；如果只返回路径但不创建目录，则应设置为 false。</param>
      <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.GetTypeNameFromProgId(System.String,System.String)">
      <summary>在程序集上反射，并返回与 ProgID 匹配的类型名。</summary>
      <returns>与 ProgID 匹配的类型名。</returns>
      <param name="AssemblyPath">程序集的文件系统路径。</param>
      <param name="ProgId">类的编程标识符。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlAppDomain" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.ParseUrl(System.String,System.String@,System.String@)">
      <summary>分析 URL 并返回基 URL 和虚拟根目录部分。</summary>
      <param name="FullUrl">虚拟根目录的完整 URL 地址。</param>
      <param name="BaseUrl">此方法返回时，此参数包含基 URL 地址。</param>
      <param name="VirtualRoot">此方法返回时，此参数包含虚拟根目录的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="FullUrl" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">解析本地主机名时遇到错误。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有访问 DNS 信息的权限。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="FullUrl" /> 为空。 - 或 - <paramref name="FullUrl" /> 中指定的方案无效。 - 或 - <paramref name="FullUrl" /> 包含太多斜杠。 - 或 - <paramref name="FullUrl" /> 中指定的密码无效。 - 或 - <paramref name="FullUrl" /> 中指定的主机名无效。 - 或 - <paramref name="FullUrl" /> 中指定的文件名无效。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.ProcessClientTlb(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)">
      <summary>处理客户端类型库，在客户端上创建配置文件。</summary>
      <param name="ProgId">类的编程标识符。</param>
      <param name="SrcTlbPath">包含类型库的文件的路径。</param>
      <param name="PhysicalPath">Web 应用程序目录。</param>
      <param name="VRoot">虚拟根目录的名称。</param>
      <param name="BaseUrl">包含虚拟根目录的基 URL。</param>
      <param name="Mode">激活模式。</param>
      <param name="Transport">未使用。 为此参数指定 null。</param>
      <param name="AssemblyName">此方法返回时，此参数包含程序集的显示名称。</param>
      <param name="TypeName">此方法返回时，此参数包含程序集的完全限定类型名称。</param>
      <param name="Error">此方法返回时，此参数包含错误信息（如果遇到了问题）。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlAppDomain, RemotingConfiguration" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.ProcessServerTlb(System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)">
      <summary>处理服务器类型库，从而向 Web.config 和 Default.disco 文件中添加或删除组件项。 必要时生成代理。</summary>
      <param name="ProgId">类的编程标识符。</param>
      <param name="SrcTlbPath">包含类型库的文件的路径。</param>
      <param name="PhysicalPath">Web 应用程序目录。</param>
      <param name="Operation">要执行的操作。</param>
      <param name="strAssemblyName">此方法返回时，此参数包含程序集的显示名称。</param>
      <param name="TypeName">此方法返回时，此参数包含程序集的完全限定类型名称。</param>
      <param name="Error">此方法返回时，此参数包含错误信息（如果遇到了问题）。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <exception cref="T:System.EnterpriseServices.ServicedComponentException">
        <paramref name="SrcTlbPath" /> 参数引用了 scrobj.dll；因此，不支持通过 SOAP 发布脚本组件。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlAppDomain, RemotingConfiguration" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.RegisterAssembly(System.String)">
      <summary>为 COM 互操作注册程序集。</summary>
      <param name="AssemblyPath">程序集的文件系统路径。</param>
      <exception cref="T:System.EnterpriseServices.RegistrationException">输入程序集没有强名称。</exception>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。 - 或 - 在没有所需 <see cref="T:System.Net.WebPermission" /> 的情况下，指定了不以“file://”开始的基本代码。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="AssemblyPath" /> 为 null。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="AssemblyPath" />，或者未指定文件扩展名。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="AssemblyPath" /> 不是有效程序集。</exception>
      <exception cref="T:System.IO.FileLoadException">用两个不同的证据将一个程序集或模块加载了两次，或者程序集的名称比 MAX_PATH 字符长。</exception>
      <exception cref="T:System.InvalidOperationException">用 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> 标记的方法不是 static 方法。 - 或 - 在层次结构的给定级别有多个用 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> 标记的方法。 - 或 - 用 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> 标记的方法的签名无效。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.UnRegisterAssembly(System.String)">
      <summary>注销 COM 互操作程序集。</summary>
      <param name="AssemblyPath">程序集的文件系统路径。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。 - 或 - 在没有所需 <see cref="T:System.Net.WebPermission" /> 的情况下，指定了不以“file://”开始的基本代码。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="AssemblyPath" /> 为 null。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="AssemblyPath" /> 或者未指定文件扩展名。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="AssemblyPath" /> 不是有效程序集。</exception>
      <exception cref="T:System.IO.FileLoadException">用两个不同的证据将一个程序集或模块加载了两次，或者程序集的名称比 MAX_PATH 字符长。</exception>
      <exception cref="T:System.InvalidOperationException">用 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> 标记的方法不是 static 方法。 - 或 - 在层次结构的给定级别有多个用 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> 标记的方法。 - 或 - 用 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> 标记的方法的签名无效。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.Internal.ServerWebConfig">
      <summary>为启用 SOAP 的 COM+ 应用程序创建 Web.config 文件。 还可以在该文件中为要在应用程序中发布的 COM 接口添加组件项。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ServerWebConfig.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.Internal.ServerWebConfig" /> 类的新实例。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ServerWebConfig.AddElement(System.String,System.String,System.String,System.String,System.String,System.String@)">
      <summary>在 Web.config 文件中为要在启用 SOAP 的 COM+ 应用程序中发布的 COM 接口添加 XML 元素。</summary>
      <param name="FilePath">现有 Web.config 文件的路径。</param>
      <param name="AssemblyName">包含要添加的类型的程序集的名称。</param>
      <param name="TypeName">要添加的类型的名称。</param>
      <param name="ProgId">要添加的类型的编程标识符。</param>
      <param name="WkoMode">一个字符串常数，它与 <see cref="T:System.Runtime.Remoting.WellKnownObjectMode" /> 枚举中的一个成员的名称对应，该成员名称指示如何激活已知对象。</param>
      <param name="Error">一个可写入错误信息的字符串。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, RemotingConfiguration" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ServerWebConfig.Create(System.String,System.String,System.String@)">
      <summary>为启用 SOAP 的 COM+ 应用程序创建 Web.config 文件，以便准备在该文件中为要发布的 COM 接口添加 XML 元素。</summary>
      <param name="FilePath">将在其中创建配置文件的文件夹。</param>
      <param name="FilePrefix">字符串值“Web”，将在它的后面添加 config 扩展名。</param>
      <param name="Error">一个可写入错误信息的字符串。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, RemotingConfiguration" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.Internal.SoapClientImport">
      <summary>导入经过身份验证的、加密的 SOAP 客户端代理。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.SoapClientImport.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.Internal.SoapClientImport" /> 类的新实例。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.SoapClientImport.ProcessClientTlbEx(System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>创建 .NET 远程处理客户端配置文件，该文件包括安全和身份验证选项。</summary>
      <param name="progId">类的编程标识符。 如果是空字符串 ("")，此方法将不执行任何操作就返回。</param>
      <param name="virtualRoot">虚拟根目录的名称。</param>
      <param name="baseUrl">包含虚拟根目录的基 URL。</param>
      <param name="authentication">要使用的 ASP.NET 身份验证的类型。</param>
      <param name="assemblyName">程序集的名称。</param>
      <param name="typeName">类型名称。</param>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.Internal.SoapServerTlb">
      <summary>处理服务器上的经过身份验证的、加密的 SOAP 组件。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.SoapServerTlb.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.Internal.SoapServerTlb" /> 类的新实例。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.SoapServerTlb.AddServerTlb(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@)">
      <summary>根据安全选项，将服务器类型库的项添加到 Web.config 和 Default.disco 文件中，并在必要时生成代理。</summary>
      <param name="progId">类的编程标识符。</param>
      <param name="classId">类型库的类标识符 (CLSID)。</param>
      <param name="interfaceId">类型库的 IID。</param>
      <param name="srcTlbPath">包含类型库的文件的路径。</param>
      <param name="rootWebServer">根 Web 服务器。</param>
      <param name="inBaseUrl">包含虚拟根目录的基 URL。</param>
      <param name="inVirtualRoot">虚拟根目录的名称。</param>
      <param name="clientActivated">如果激活了客户端，为 true；否则为 false。</param>
      <param name="wellKnown">如果已知，为 true；否则为 false。</param>
      <param name="discoFile">如果是发现文件，为 true；否则为 false。</param>
      <param name="operation">要执行的操作。 指定“delete”或空字符串。</param>
      <param name="strAssemblyName">此方法返回时，包含程序集的名称。</param>
      <param name="typeName">此方法返回时，包含程序集的类型。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <exception cref="T:System.PlatformNotSupportedException">SOAP 实用工具不可用。</exception>
      <exception cref="T:System.EnterpriseServices.ServicedComponentException">获取系统目录的调用失败。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlAppDomain, RemotingConfiguration" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.SoapServerTlb.DeleteServerTlb(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>从 Web.config 和 Default.disco 文件中移除服务器类型库的项，具体由安全选项确定。</summary>
      <param name="progId">类的编程标识符。</param>
      <param name="classId">类型库的类标识符 (CLSID)。</param>
      <param name="interfaceId">类型库的 IID。</param>
      <param name="srcTlbPath">包含类型库的文件的路径。</param>
      <param name="rootWebServer">根 Web 服务器。</param>
      <param name="baseUrl">包含虚拟根目录的基 URL。</param>
      <param name="virtualRoot">虚拟根目录的名称。</param>
      <param name="operation">未使用。 为此参数指定 null。</param>
      <param name="assemblyName">程序集的名称。</param>
      <param name="typeName">程序集的类型。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <exception cref="T:System.PlatformNotSupportedException">SOAP 实用工具不可用。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlAppDomain, RemotingConfiguration" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.Internal.SoapServerVRoot">
      <summary>在服务器上发布经过身份验证的加密 SOAP 虚拟根目录。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.SoapServerVRoot.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.Internal.SoapServerVRoot" /> 类的新实例。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.SoapServerVRoot.CreateVirtualRootEx(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)">
      <summary>用安全选项创建一个 SOAP 虚拟根目录。</summary>
      <param name="rootWebServer">根 Web 服务器。 默认值为“IIS://localhost/W3SVC/1/ROOT”。</param>
      <param name="inBaseUrl">包含虚拟根目录的基 URL。</param>
      <param name="inVirtualRoot">虚拟根目录的名称。</param>
      <param name="homePage">主页的 URL。</param>
      <param name="discoFile">如果要创建默认发现文件，为 true；如果不创建任何发现文件，则为 false。 如果为 false，而 Default.disco 文件存在，将删除该文件。</param>
      <param name="secureSockets">如果要求 SSL 加密，为 true；否则为 false。</param>
      <param name="authentication">如果不使用任何身份验证（匿名用户），应指定“匿名”。 否则，应指定空字符串。</param>
      <param name="operation">未使用。 为此参数指定 null。</param>
      <param name="baseUrl">此方法返回时，此参数包含基 URL。</param>
      <param name="virtualRoot">此方法返回时，此参数包含虚拟根目录的名称。</param>
      <param name="physicalPath">此方法返回时，此参数包含虚拟根目录的磁盘地址。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <exception cref="T:System.PlatformNotSupportedException">SOAP 实用工具不可用。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, RemotingConfiguration" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.DirectoryServices.DirectoryServicesPermission, System.DirectoryServices, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.SoapServerVRoot.DeleteVirtualRootEx(System.String,System.String,System.String)">
      <summary>删除虚拟根目录。 没有完全实现。</summary>
      <param name="rootWebServer">根 Web 服务器。 默认值为“IIS://localhost/W3SVC/1/ROOT”。</param>
      <param name="inBaseUrl">包含虚拟根目录的基 URL。</param>
      <param name="inVirtualRoot">虚拟根目录的名称。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <exception cref="T:System.PlatformNotSupportedException">SOAP 实用工具不可用。</exception>
      <exception cref="T:System.EnterpriseServices.ServicedComponentException">获取系统目录的调用失败。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.SoapServerVRoot.GetVirtualRootStatus(System.String,System.String,System.String,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
      <summary>返回现有 SOAP 虚拟根目录的安全状态。</summary>
      <param name="RootWebServer">根 Web 服务器。 默认值为“IIS://localhost/W3SVC/1/ROOT”。</param>
      <param name="inBaseUrl">包含虚拟根目录的基 URL。</param>
      <param name="inVirtualRoot">虚拟根目录的名称。</param>
      <param name="Exists">此方法返回时，如果虚拟目录存在，此参数将包含 true；否则将包含 false。</param>
      <param name="SSL">此方法返回时，如果要求 SSL 加密，此参数将包含 true；否则将包含 false。</param>
      <param name="WindowsAuth">此方法返回时，如果设置了 Windows 身份验证，此参数将包含 true；否则将包含 false。</param>
      <param name="Anonymous">此方法返回时，如果未设置身份验证（匿名用户），此参数将包含 true；否则将包含 false。</param>
      <param name="HomePage">此方法返回时，如果设置了虚拟根目录的 EnableDefaultDoc 属性，此参数将包含 true；否则将包含 false。</param>
      <param name="DiscoFile">此方法返回时，如果 Default.disco 文件存在，此参数将包含 true；否则将包含 false。</param>
      <param name="PhysicalPath">此方法返回时，此参数包含虚拟根目录的磁盘地址。</param>
      <param name="BaseUrl">此方法返回时，此参数包含基 URL。</param>
      <param name="VirtualRoot">此方法返回时，此参数包含虚拟根目录的名称。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.DirectoryServices.DirectoryServicesPermission, System.DirectoryServices, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.Internal.SoapUtility">
      <summary>提供一些实用工具，以便支持由服务器导出启用 SOAP 的 COM+ 应用程序代理，以及由客户端导入这些代理。 此类不能被继承。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.SoapUtility.#ctor">
      <summary>初始化 <see cref="T:System.EnterpriseServices.Internal.SoapUtility" /> 类的新实例。</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.SoapUtility.GetServerBinPath(System.String,System.String,System.String,System.String@)">
      <summary>返回 SOAP bin 目录的路径。</summary>
      <param name="rootWebServer">根 Web 服务器。</param>
      <param name="inBaseUrl">基 URL 地址。</param>
      <param name="inVirtualRoot">虚拟根目录的名称。</param>
      <param name="binPath">此方法返回时，此参数包含 SOAP 虚拟根 bin 目录的文件路径。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <exception cref="T:System.PlatformNotSupportedException">SOAP 实用工具不可用。</exception>
      <exception cref="T:System.EnterpriseServices.ServicedComponentException">获取系统目录的调用失败。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.SoapUtility.GetServerPhysicalPath(System.String,System.String,System.String,System.String@)">
      <summary>返回 SOAP 虚拟根目录的路径。</summary>
      <param name="rootWebServer">根 Web 服务器。</param>
      <param name="inBaseUrl">基 URL 地址。</param>
      <param name="inVirtualRoot">虚拟根目录的名称。</param>
      <param name="physicalPath">此方法返回时，此参数包含 SOAP 虚拟根目录的文件路径。</param>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <exception cref="T:System.PlatformNotSupportedException">SOAP 实用工具不可用。</exception>
      <exception cref="T:System.EnterpriseServices.ServicedComponentException">获取系统目录的调用失败。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.SoapUtility.Present">
      <summary>确定是否存在经过身份验证的、加密的 SOAP 接口。</summary>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方无权访问非托管代码。</exception>
      <exception cref="T:System.PlatformNotSupportedException">SOAP 实用工具不可用。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
  </members>
</doc>