<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Configuration</name>
  </assembly>
  <members>
    <member name="T:System.Configuration.AppSettingsSection">
      <summary>为 appSettings 配置节提供配置系统支持。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Configuration.AppSettingsSection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.AppSettingsSection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Configuration.AppSettingsSection.File">
      <summary>获取或设置一个配置文件，该配置文件提供附加设置或重写在 appSettings 元素中指定的设置。</summary>
      <returns>提供附加设置或重写在 appSettings 元素中指定的设置的配置文件。</returns>
    </member>
    <member name="P:System.Configuration.AppSettingsSection.Settings">
      <summary>获取包含应用程序设置的键/值对集合。</summary>
      <returns>包含配置文件应用程序设置的键/值对的集合。</returns>
    </member>
    <member name="T:System.Configuration.CallbackValidator">
      <summary>提供对对象的动态验证。</summary>
    </member>
    <member name="M:System.Configuration.CallbackValidator.#ctor(System.Type,System.Configuration.ValidatorCallback)">
      <summary>初始化 <see cref="T:System.Configuration.CallbackValidator" /> 类的新实例。</summary>
      <param name="type">将要验证的对象的类型。</param>
      <param name="callback">用作委托的 <see cref="T:System.Configuration.ValidatorCallback" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type " />为 null。</exception>
    </member>
    <member name="M:System.Configuration.CallbackValidator.CanValidate(System.Type)">
      <summary>确定是否可以验证该对象的类型。</summary>
      <returns>如果 type 参数与创建 <see cref="T:System.Configuration.CallbackValidator" /> 的实例时用作第一个参数的类型匹配，则为 true；否则为 false。</returns>
      <param name="type">对象的类型。</param>
    </member>
    <member name="M:System.Configuration.CallbackValidator.Validate(System.Object)">
      <summary>确定对象的值是否有效。</summary>
      <param name="value">对象的值。</param>
    </member>
    <member name="T:System.Configuration.CallbackValidatorAttribute">
      <summary>指定用于代码验证的 <see cref="T:System.Configuration.CallbackValidator" /> 对象。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Configuration.CallbackValidatorAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.CallbackValidatorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Configuration.CallbackValidatorAttribute.CallbackMethodName">
      <summary>获取或设置回调方法的名称。</summary>
      <returns>要调用的方法的名称。</returns>
    </member>
    <member name="P:System.Configuration.CallbackValidatorAttribute.Type">
      <summary>获取或设置验证程序的类型。</summary>
      <returns>当前验证程序特性实例的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Configuration.CallbackValidatorAttribute.ValidatorInstance">
      <summary>获取验证程序实例。</summary>
      <returns>当前的 <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Configuration.CallbackValidatorAttribute.Type" /> 属性的值为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Configuration.CallbackValidatorAttribute.CallbackMethodName" /> 属性未设置为带有一个对象参数的公共静态 void 方法。</exception>
    </member>
    <member name="T:System.Configuration.CommaDelimitedStringCollection">
      <summary>表示以逗号分隔的字符串元素的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.#ctor">
      <summary>创建 <see cref="T:System.Configuration.CommaDelimitedStringCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.Add(System.String)">
      <summary>向以逗号分隔的集合添加一个字符串。</summary>
      <param name="value">一个字符串值。</param>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.AddRange(System.String[])">
      <summary>将字符串数组中的所有字符串添加到集合中。</summary>
      <param name="range">要添加到集合中的字符串数组。</param>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.Clear">
      <summary>清除集合。</summary>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.Clone">
      <summary>创建集合的一个副本。</summary>
      <returns>
        <see cref="T:System.Configuration.CommaDelimitedStringCollection" /> 的副本。</returns>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.Insert(System.Int32,System.String)">
      <summary>将一个字符串元素添加到集合中的指定索引位置。</summary>
      <param name="index">集合中将添加新元素的索引位置。</param>
      <param name="value">要添加到集合中的新元素的值。</param>
    </member>
    <member name="P:System.Configuration.CommaDelimitedStringCollection.IsModified">
      <summary>获取一个值，该值指示集合是否已修改。</summary>
      <returns>如果 <see cref="T:System.Configuration.CommaDelimitedStringCollection" /> 已修改，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.CommaDelimitedStringCollection.IsReadOnly">
      <summary>获取一个值，该值指示集合对象是否为只读。</summary>
      <returns>如果 <see cref="T:System.Configuration.CommaDelimitedStringCollection" /> 中指定的字符串元素是只读的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.CommaDelimitedStringCollection.Item(System.Int32)">
      <summary>根据索引获取或设置集合中的字符串元素。</summary>
      <returns>集合中的字符串元素。</returns>
      <param name="index">集合中字符串元素的索引。</param>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.Remove(System.String)">
      <summary>从集合中移除一个字符串元素。</summary>
      <param name="value">要移除的字符串。</param>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.SetReadOnly">
      <summary>将集合对象设置为只读。</summary>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.ToString">
      <summary>返回对象的字符串表示形式。</summary>
      <returns>对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Configuration.CommaDelimitedStringCollectionConverter">
      <summary>将以逗号分隔的字符串值和 <see cref="T:System.Configuration.CommaDelimitedStringCollection" /> 对象相互转换。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollectionConverter.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.CommaDelimitedStringCollectionConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将 <see cref="T:System.String" /> 对象转换为 <see cref="T:System.Configuration.CommaDelimitedStringCollection" /> 对象。</summary>
      <returns>包含转换后的值的 <see cref="T:System.Configuration.CommaDelimitedStringCollection" />。</returns>
      <param name="ctx">用于类型转换的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="ci">在转换过程中使用的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="data">要转换的以逗号分隔的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将 <see cref="T:System.Configuration.CommaDelimitedStringCollection" /> 对象转换为 <see cref="T:System.String" /> 对象。</summary>
      <returns>表示转换后的 <paramref name="value" /> 参数的 <see cref="T:System.String" />，该参数为 <see cref="T:System.Configuration.CommaDelimitedStringCollection" />。</returns>
      <param name="ctx">用于类型转换的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="ci">在转换过程中使用的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的值。</param>
      <param name="type">转换类型。</param>
    </member>
    <member name="T:System.Configuration.Configuration">
      <summary>表示适用于特定计算机、应用程序或资源的配置文件。 此类不能被继承。</summary>
    </member>
    <member name="P:System.Configuration.Configuration.AppSettings">
      <summary>获得应用于此 <see cref="T:System.Configuration.Configuration" /> 对象的 <see cref="T:System.Configuration.AppSettingsSection" /> 对象配置节。</summary>
      <returns>一个 <see cref="T:System.Configuration.AppSettingsSection" /> 对象，该对象表示应用于此 <see cref="T:System.Configuration.Configuration" /> 对象 appSettings 配置节。</returns>
    </member>
    <member name="P:System.Configuration.Configuration.AssemblyStringTransformer">
      <summary>指定一个函数委托，该函数委托用于转换配置文件中的程序集字符串。</summary>
      <returns>一个用于转换类型字符串的委托。 默认值为 null。</returns>
    </member>
    <member name="P:System.Configuration.Configuration.ConnectionStrings">
      <summary>获取应用于此 <see cref="T:System.Configuration.Configuration" /> 对象的 <see cref="T:System.Configuration.ConnectionStringsSection" /> 配置节对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConnectionStringsSection" /> 配置节对象，该对象表示应用于此 <see cref="T:System.Configuration.Configuration" /> 对象的 connectionStrings 配置节。</returns>
    </member>
    <member name="P:System.Configuration.Configuration.EvaluationContext">
      <summary>获取 <see cref="T:System.Configuration.Configuration" /> 对象的 <see cref="T:System.Configuration.ContextInformation" /> 对象。</summary>
      <returns>
        <see cref="T:System.Configuration.Configuration" /> 对象的 <see cref="T:System.Configuration.ContextInformation" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.Configuration.FilePath">
      <summary>获取由 <see cref="T:System.Configuration.Configuration" /> 对象表示的配置文件的物理路径。</summary>
      <returns>由此 <see cref="T:System.Configuration.Configuration" /> 对象表示的配置文件的物理路径。</returns>
    </member>
    <member name="M:System.Configuration.Configuration.GetSection(System.String)">
      <summary>返回指定的 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。</summary>
      <returns>指定的 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。</returns>
      <param name="sectionName">要返回的节的路径。</param>
    </member>
    <member name="M:System.Configuration.Configuration.GetSectionGroup(System.String)">
      <summary>获取指定的 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。</summary>
      <returns>指定的 <see cref="T:System.Configuration.ConfigurationSectionGroup" />。</returns>
      <param name="sectionGroupName">要返回的 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 的路径名称。</param>
    </member>
    <member name="P:System.Configuration.Configuration.HasFile">
      <summary>获取一个值，该值指示由此 <see cref="T:System.Configuration.Configuration" /> 对象表示的资源是否存在相应的文件。</summary>
      <returns>如果该配置文件存在，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.Configuration.Configuration.Locations">
      <summary>获取此 <see cref="T:System.Configuration.Configuration" /> 对象内定义的位置。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationLocationCollection" />，它包含此 <see cref="T:System.Configuration.Configuration" /> 对象内定义的位置。</returns>
    </member>
    <member name="P:System.Configuration.Configuration.NamespaceDeclared">
      <summary>获取或设置一个值，该值指示配置文件是否具有 XML 命名空间。</summary>
      <returns>如果配置文件有 XML 命名空间，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.Configuration.RootSectionGroup">
      <summary>获取此 <see cref="T:System.Configuration.Configuration" /> 对象的根 <see cref="T:System.Configuration.ConfigurationSectionGroup" />。</summary>
      <returns>此 <see cref="T:System.Configuration.Configuration" /> 对象的根节组。</returns>
    </member>
    <member name="M:System.Configuration.Configuration.Save">
      <summary>将包含在此 <see cref="T:System.Configuration.Configuration" /> 对象中的配置设置写入到当前的 XML 配置文件中。</summary>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">未能对该配置文件执行写入操作。 - 或 - 配置文件已更改。</exception>
    </member>
    <member name="M:System.Configuration.Configuration.Save(System.Configuration.ConfigurationSaveMode)">
      <summary>将包含在此 <see cref="T:System.Configuration.Configuration" /> 对象中的配置设置写入到当前的 XML 配置文件中。</summary>
      <param name="saveMode">一个 <see cref="T:System.Configuration.ConfigurationSaveMode" /> 值，该值用于确定要保存的属性值。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">未能对该配置文件执行写入操作。 - 或 - 配置文件已更改。</exception>
    </member>
    <member name="M:System.Configuration.Configuration.Save(System.Configuration.ConfigurationSaveMode,System.Boolean)">
      <summary>将包含在此 <see cref="T:System.Configuration.Configuration" /> 对象中的配置设置写入到当前的 XML 配置文件中。</summary>
      <param name="saveMode">一个 <see cref="T:System.Configuration.ConfigurationSaveMode" /> 值，该值用于确定要保存的属性值。</param>
      <param name="forceSaveAll">如果在未修改配置的情况下保存配置，则为 true；否则，为 false。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">未能对该配置文件执行写入操作。 - 或 - 配置文件已更改。</exception>
    </member>
    <member name="M:System.Configuration.Configuration.SaveAs(System.String)">
      <summary>将包含在此 <see cref="T:System.Configuration.Configuration" /> 对象中的配置设置写入到指定的 XML 配置文件中。</summary>
      <param name="filename">要将配置文件保存到的路径和文件名。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">未能对该配置文件执行写入操作。 - 或 - 配置文件已更改。</exception>
    </member>
    <member name="M:System.Configuration.Configuration.SaveAs(System.String,System.Configuration.ConfigurationSaveMode)">
      <summary>将包含在此 <see cref="T:System.Configuration.Configuration" /> 对象中的配置设置写入到指定的 XML 配置文件中。</summary>
      <param name="filename">要将配置文件保存到的路径和文件名。</param>
      <param name="saveMode">一个 <see cref="T:System.Configuration.ConfigurationSaveMode" /> 值，该值用于确定要保存的属性值。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">未能对该配置文件执行写入操作。 - 或 - 配置文件已更改。</exception>
    </member>
    <member name="M:System.Configuration.Configuration.SaveAs(System.String,System.Configuration.ConfigurationSaveMode,System.Boolean)">
      <summary>将包含在此 <see cref="T:System.Configuration.Configuration" /> 对象中的配置设置写入到指定的 XML 配置文件中。</summary>
      <param name="filename">要将配置文件保存到的路径和文件名。</param>
      <param name="saveMode">一个 <see cref="T:System.Configuration.ConfigurationSaveMode" /> 值，该值用于确定要保存的属性值。</param>
      <param name="forceSaveAll">如果在未修改配置的情况下保存配置，则为 true；否则，为 false。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="filename" /> 为空或空字符串 ("")。</exception>
    </member>
    <member name="P:System.Configuration.Configuration.SectionGroups">
      <summary>获取由此配置定义的节组的集合。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> 集合，该集合表示此 <see cref="T:System.Configuration.Configuration" /> 对象的节组集合。</returns>
    </member>
    <member name="P:System.Configuration.Configuration.Sections">
      <summary>获取此 <see cref="T:System.Configuration.Configuration" /> 对象定义的节的集合。</summary>
      <returns>此 <see cref="T:System.Configuration.Configuration" /> 对象定义的节的集合。</returns>
    </member>
    <member name="P:System.Configuration.Configuration.TargetFramework">
      <summary>在将当前版本之前的某个版本作为目标时，指定 .NET Framework 的目标版本。</summary>
      <returns>.NET Framework 的目标版本的名称。 默认值为 null，它指示将当前版本作为目标。</returns>
    </member>
    <member name="P:System.Configuration.Configuration.TypeStringTransformer">
      <summary>指定一个函数委托，该函数委托用于转换配置文件中的类型字符串。</summary>
      <returns>一个用于转换类型字符串的委托。 默认值为 null。</returns>
    </member>
    <member name="T:System.Configuration.ConfigurationAllowDefinition">
      <summary>指定配置文件层次结构中的位置，在其中可设置或重写 <see cref="T:System.Configuration.ConfigurationSection" /> 对象中包含的属性。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationAllowDefinition.Everywhere">
      <summary>
        <see cref="T:System.Configuration.ConfigurationSection" /> 可以在任何位置定义。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationAllowDefinition.MachineOnly">
      <summary>
        <see cref="T:System.Configuration.ConfigurationSection" /> 只能在 Machine.config 文件中定义。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationAllowDefinition.MachineToApplication">
      <summary>
        <see cref="T:System.Configuration.ConfigurationSection" /> 可以在 Machine.config 文件中定义，或在计算机级别的 Web.config 文件（与 Machine.config 处于相同的目录）中定义，或在顶级应用程序 Web.config 文件（在虚拟根目录中）中定义，但不能在虚拟根目录的子目录中定义。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationAllowDefinition.MachineToWebRoot">
      <summary>
        <see cref="T:System.Configuration.ConfigurationSection" /> 可以在 Machine.config 文件中定义，也可以在 计算机级别的 Web.config 文件（与 Machine.config 处于相同的目录）中定义，但不能在应用程序 Web.config 文件中定义。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationAllowExeDefinition">
      <summary>指定配置文件层次结构中的位置，在其中可设置或重写 <see cref="T:System.Configuration.ConfigurationSection" /> 对象中包含的属性。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationAllowExeDefinition.MachineOnly">
      <summary>
        <see cref="T:System.Configuration.ConfigurationSection" /> 只能在 Machine.config 文件中定义。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationAllowExeDefinition.MachineToApplication">
      <summary>可在 Machine.config 文件或客户端应用程序目录中的 Exe.config 文件中定义 <see cref="T:System.Configuration.ConfigurationSection" />。 这是默认值。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationAllowExeDefinition.MachineToLocalUser">
      <summary>可在 Machine.config 文件、客户端应用程序目录中的 Exe.config 文件、漫游用户目录中的 User.config 文件或本地用户目录中的 User.config 文件中定义 <see cref="T:System.Configuration.ConfigurationSection" />。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationAllowExeDefinition.MachineToRoamingUser">
      <summary>可在 Machine.config 文件、客户端应用程序目录中的 Exe.config 文件或漫游用户目录中的 User.config 文件中定义 <see cref="T:System.Configuration.ConfigurationSection" />。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationCollectionAttribute">
      <summary>以声明的方式指示 .NET Framework 创建配置元素集合的实例。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationCollectionAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationCollectionAttribute" /> 类的新实例。</summary>
      <param name="itemType">要创建的属性集合的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="itemType" /> 为 null。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationCollectionAttribute.AddItemName">
      <summary>获取或设置 &lt;add&gt; 配置元素的名称。</summary>
      <returns>替换配置项的标准名“add”的名称。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationCollectionAttribute.ClearItemsName">
      <summary>获取或设置 &lt;clear&gt; 配置元素的名称。</summary>
      <returns>替换配置项的标准名“clear”的名称。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationCollectionAttribute.CollectionType">
      <summary>获取或设置 <see cref="T:System.Configuration.ConfigurationCollectionAttribute" /> 特性的类型。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationCollectionAttribute" /> 的类型。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationCollectionAttribute.ItemType">
      <summary>获取集合元素的类型。</summary>
      <returns>集合元素的类型。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationCollectionAttribute.RemoveItemName">
      <summary>获取或设置 &lt;remove&gt; 配置元素的名称。</summary>
      <returns>替换配置元素的标准名“remove”的名称。</returns>
    </member>
    <member name="T:System.Configuration.ConfigurationConverterBase">
      <summary>配置转换器类型的基类。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationConverterBase.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationConverterBase" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationConverterBase.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否允许此转换。</summary>
      <returns>如果允许转换，则为 true；否则为 false。</returns>
      <param name="ctx">用于类型转换的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 对象。</param>
      <param name="type">要转换的源 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationConverterBase.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否允许此转换。</summary>
      <returns>如果允许转换，则为 true；否则为 false。</returns>
      <param name="ctx">用于类型转换的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 对象。</param>
      <param name="type">要转换到的类型。</param>
    </member>
    <member name="T:System.Configuration.ConfigurationElement">
      <summary>表示配置文件中的配置元素。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.CurrentConfiguration">
      <summary>获取对顶级 <see cref="T:System.Configuration.Configuration" /> 实例的引用，该实例表示当前 <see cref="T:System.Configuration.ConfigurationElement" /> 实例所属的配置层次结构。</summary>
      <returns>当前 <see cref="T:System.Configuration.ConfigurationElement" /> 实例所属的顶级 <see cref="T:System.Configuration.Configuration" /> 实例。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
      <summary>读取配置文件中的 XML。</summary>
      <param name="reader">在配置文件中进行读取操作的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="serializeCollectionKey">为 true，则只序列化集合的键属性；否则为 false。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">要读取的元素被锁定。 - 或 - 无法识别当前节点的特性。 - 或 - 无法确定当前节点的锁定状态。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.ElementInformation">
      <summary>获取包含 <see cref="T:System.Configuration.ConfigurationElement" /> 对象的不可自定义的信息和功能的 <see cref="T:System.Configuration.ElementInformation" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ElementInformation" />，包含 <see cref="T:System.Configuration.ConfigurationElement" /> 的不可自定义的信息和功能。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.ElementProperty">
      <summary>获取本身表示 <see cref="T:System.Configuration.ConfigurationElement" /> 对象的 <see cref="T:System.Configuration.ConfigurationElementProperty" /> 对象。</summary>
      <returns>表示 <see cref="T:System.Configuration.ConfigurationElement" /> 本身的 <see cref="T:System.Configuration.ConfigurationElementProperty" />。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.Equals(System.Object)">
      <summary>将当前的 <see cref="T:System.Configuration.ConfigurationElement" /> 实例与指定的对象进行比较。</summary>
      <returns>如果要比较的对象等于当前的 <see cref="T:System.Configuration.ConfigurationElement" /> 实例，则为 true；否则为 false。 默认值为 false。</returns>
      <param name="compareTo">要比较的对象。</param>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.EvaluationContext">
      <summary>获取 <see cref="T:System.Configuration.ConfigurationElement" /> 对象的 <see cref="T:System.Configuration.ContextInformation" /> 对象。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationElement" /> 的 <see cref="T:System.Configuration.ContextInformation" />。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">当前元素未关联上下文。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.GetHashCode">
      <summary>获取一个唯一值，表示当前 <see cref="T:System.Configuration.ConfigurationElement" /> 实例。</summary>
      <returns>一个唯一值，表示当前 <see cref="T:System.Configuration.ConfigurationElement" /> 实例。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)">
      <summary>返回指定程序集名称的转换版本。</summary>
      <returns>程序集名称的转换版本。 如果没有可用的转换器，则返回的 <paramref name="assemblyName" /> 参数值保持不变。 如果没有可用的转换器，则 <see cref="P:System.Configuration.Configuration.TypeStringTransformer" /> 属性为 null。</returns>
      <param name="assemblyName">程序集的名称。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)">
      <summary>返回指定类型名称的转换版本。</summary>
      <returns>指定类型名称的转换版本。 如果没有可用的转换器，则返回的 <paramref name="typeName" /> 参数值保持不变。 如果没有可用的转换器，则 <see cref="P:System.Configuration.Configuration.TypeStringTransformer" /> 属性为 null。</returns>
      <param name="typeName">类型名称。</param>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.HasContext">
      <summary>获取一个值，该值指示 <see cref="P:System.Configuration.ConfigurationElement.CurrentConfiguration" /> 属性是否为 null。</summary>
      <returns>false，如果 <see cref="P:System.Configuration.ConfigurationElement.CurrentConfiguration" /> 属性为 null；否则为 true。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.Init">
      <summary>将 <see cref="T:System.Configuration.ConfigurationElement" /> 对象设置为其初始状态。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.InitializeDefault">
      <summary>用于初始化 <see cref="T:System.Configuration.ConfigurationElement" /> 对象的默认值集。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.IsModified">
      <summary>指示此配置元素自上次被保存或加载后，直到在派生类中被实现时，是否已经更改。</summary>
      <returns>如果元素已修改，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Configuration.ConfigurationElement" /> 对象是否为只读。</summary>
      <returns>如果 <see cref="T:System.Configuration.ConfigurationElement" /> 对象为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)">
      <summary>获取或设置此配置元素的属性或特性。</summary>
      <returns>指定的属性、特性或子元素。</returns>
      <param name="prop">要访问的属性。</param>
      <exception cref="T:System.Configuration.ConfigurationException">
        <paramref name="prop" /> 为 null 或不存在于元素中。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="prop" /> 为只读或被锁定。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.Item(System.String)">
      <summary>获取或设置此配置元素的属性、特性或子元素。</summary>
      <returns>指定的属性、特性或子元素。</returns>
      <param name="propertyName">要访问的 <see cref="T:System.Configuration.ConfigurationProperty" /> 的名称。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="prop" /> 为只读或被锁定。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)">
      <summary>将此 <see cref="T:System.Configuration.ConfigurationElement" /> 对象以及所有子元素中无效属性的错误添加到传递的列表中。</summary>
      <param name="errorList">实现 <see cref="T:System.Collections.IList" /> 接口的对象。</param>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.LockAllAttributesExcept">
      <summary>获取被锁定的特性的集合。</summary>
      <returns>该元素被锁定的特性（属性）的 <see cref="T:System.Configuration.ConfigurationLockCollection" />。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.LockAllElementsExcept">
      <summary>获取被锁定的元素的集合。</summary>
      <returns>被锁定的元素的 <see cref="T:System.Configuration.ConfigurationLockCollection" />。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.LockAttributes">
      <summary>获取被锁定的特性的集合。</summary>
      <returns>该元素被锁定的特性（属性）的 <see cref="T:System.Configuration.ConfigurationLockCollection" />。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.LockElements">
      <summary>获取被锁定的元素的集合。</summary>
      <returns>被锁定的元素的 <see cref="T:System.Configuration.ConfigurationLockCollection" />。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.LockItem">
      <summary>获取或设置一个值，该值指示是否已锁定该元素。</summary>
      <returns>如果元素被锁定，则为 true；否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">元素已被锁定在更高的配置级别。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
      <summary>获取一个值，该值指示反序列化过程中是否遇到未知特性。</summary>
      <returns>如果反序列化过程中遇到未知特性，则为 true；否则为 false。</returns>
      <param name="name">无法识别的特性的名称。</param>
      <param name="value">无法识别的特性的值。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
      <summary>获取一个值，该值指示反序列化过程中是否遇到未知元素。</summary>
      <returns>如果反序列化过程中遇到未知元素，则为 true；否则为 false。</returns>
      <param name="elementName">未知的子元素的名称。</param>
      <param name="reader">用于反序列化的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">通过 <paramref name="elementName" /> 标识的元素被锁定。 - 或 - 元素的一个或多个特性被锁定。 - 或 - 无法识别 <paramref name="elementName" />，或者元素有无法识别的特性。 - 或 - 元素的某布尔值特性包含无效值。 - 或 - 对属性执行过多次反序列化尝试。 - 或 - 尝试对非元素有效成员的属性进行反序列化。 - 或 - 元素不能包含 CDATA 或文本元素。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)">
      <summary>未找到所需属性时引发异常。</summary>
      <returns>无。</returns>
      <param name="name">未找到的必需特性的名称。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">在所有情况下。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.PostDeserialize">
      <summary>反序列化后调用。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)">
      <summary>序列化前调用。</summary>
      <param name="writer">将用于对 <see cref="T:System.Configuration.ConfigurationElement" /> 执行序列化的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.Properties">
      <summary>获取属性的集合。</summary>
      <returns>元素属性的 <see cref="T:System.Configuration.ConfigurationPropertyCollection" />。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)">
      <summary>重置 <see cref="T:System.Configuration.ConfigurationElement" /> 对象的内部状态，包括锁和属性集合。</summary>
      <param name="parentElement">配置元素的父节点。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.ResetModified">
      <summary>在派生类中实现时，将 <see cref="M:System.Configuration.ConfigurationElement.IsModified" /> 方法的值重置为 false。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)">
      <summary>当在派生类中实现后，将此配置元素的内容写入配置文件。</summary>
      <returns>如果任何数据被实际序列化，则为 true；否则为 false。</returns>
      <param name="writer">写入配置文件的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="serializeCollectionKey">为 true，则只序列化集合的键属性；否则为 false。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">当前特性被锁定在更高的配置级别。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)">
      <summary>当在派生类中实现后，将此配置元素的外部标记写入配置文件。</summary>
      <returns>如果写入成功，则为 true；否则为 false。</returns>
      <param name="writer">写入配置文件的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="elementName">要写入的 <see cref="T:System.Configuration.ConfigurationElement" /> 的名称。</param>
      <exception cref="T:System.Exception">该元素包含多个子元素。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)">
      <summary>将属性设置为指定值。</summary>
      <param name="prop">要设置的元素属性。</param>
      <param name="value">要赋给属性的值。</param>
      <param name="ignoreLocks">如果对属性的锁定应该被忽略，则为 true；否则为 false。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">如果元素是只读的，或者 <paramref name="ignoreLocks" /> 为 true 但不能忽略锁定，将引发此异常。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.SetReadOnly">
      <summary>设置 <see cref="T:System.Configuration.ConfigurationElement" /> 对象及所有子元素的 <see cref="M:System.Configuration.ConfigurationElement.IsReadOnly" /> 属性。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
      <summary>修改 <see cref="T:System.Configuration.ConfigurationElement" /> 对象以移除所有将不被保存的值。</summary>
      <param name="sourceElement">当前级别上包含属性的合并视图的 <see cref="T:System.Configuration.ConfigurationElement" />。</param>
      <param name="parentElement">父级 <see cref="T:System.Configuration.ConfigurationElement" /> 或 null（如果为顶层）。</param>
      <param name="saveMode">用于确定要包括哪些属性值的 <see cref="T:System.Configuration.ConfigurationSaveMode" />。</param>
    </member>
    <member name="T:System.Configuration.ConfigurationElementCollection">
      <summary>表示包含一个子元素集合的配置元素。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.#ctor(System.Collections.IComparer)">
      <summary>创建 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 类的新实例。</summary>
      <param name="comparer">要使用的 <see cref="T:System.Collections.IComparer" /> 比较器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.AddElementName">
      <summary>在派生的类中重写时，获取或设置 <see cref="T:System.Configuration.ConfigurationElement" /> 的名称，以便在 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 中与添加操作关联。</summary>
      <returns>元素的名称。</returns>
      <exception cref="T:System.ArgumentException">选定值以保留前缀“config”或“lock”开头。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseAdd(System.Configuration.ConfigurationElement)">
      <summary>向 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 添加配置元素。</summary>
      <param name="element">要相加的 <see cref="T:System.Configuration.ConfigurationElement" />。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseAdd(System.Configuration.ConfigurationElement,System.Boolean)">
      <summary>向配置元素集合添加配置元素。</summary>
      <param name="element">要相加的 <see cref="T:System.Configuration.ConfigurationElement" />。</param>
      <param name="throwIfExists">true 表示如果指定的 <see cref="T:System.Configuration.ConfigurationElement" /> 已包含在 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 中则引发异常；否则为 false。</param>
      <exception cref="T:System.Exception">要添加的 <see cref="T:System.Configuration.ConfigurationElement" /> 已存在于 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 中，并且 <paramref name="throwIfExists" /> 参数为 true。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseAdd(System.Int32,System.Configuration.ConfigurationElement)">
      <summary>向配置元素集合添加配置元素。</summary>
      <param name="index">要添加指定 <see cref="T:System.Configuration.ConfigurationElement" /> 的索引位置。</param>
      <param name="element">要相加的 <see cref="T:System.Configuration.ConfigurationElement" />。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseClear">
      <summary>从集合中移除所有配置元素对象。</summary>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置是只读的。 - 或 - 集合项已在更高级别的配置中锁定。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseGet(System.Int32)">
      <summary>获取位于指定索引位置的配置元素。</summary>
      <returns>位于指定索引处的 <see cref="T:System.Configuration.ConfigurationElement" />。</returns>
      <param name="index">要返回的 <see cref="T:System.Configuration.ConfigurationElement" /> 的索引位置。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="index" /> 小于 0。 - 或 - 指定的 <paramref name="index" /> 处没有 <see cref="T:System.Configuration.ConfigurationElement" />。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseGet(System.Object)">
      <summary>返回具有指定键的配置元素。</summary>
      <returns>具有指定键的 <see cref="T:System.Configuration.ConfigurationElement" />；否则为 null。</returns>
      <param name="key">要返回的元素的键。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseGetAllKeys">
      <summary>返回 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 中包含的所有配置元素的键数组。</summary>
      <returns>一个数组，包含 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 中包含的所有 <see cref="T:System.Configuration.ConfigurationElement" /> 对象的键。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseGetKey(System.Int32)">
      <summary>获取位于指定索引位置的 <see cref="T:System.Configuration.ConfigurationElement" /> 的键。</summary>
      <returns>指定 <see cref="T:System.Configuration.ConfigurationElement" /> 的键。</returns>
      <param name="index">
        <see cref="T:System.Configuration.ConfigurationElement" /> 的索引位置。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="index" /> 小于 0。 - 或 - 指定的 <paramref name="index" /> 处没有 <see cref="T:System.Configuration.ConfigurationElement" />。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseIndexOf(System.Configuration.ConfigurationElement)">
      <summary>获取指定的 <see cref="T:System.Configuration.ConfigurationElement" /> 的索引。</summary>
      <returns>指定 <see cref="T:System.Configuration.ConfigurationElement" /> 的索引；否则为 -1。</returns>
      <param name="element">指定索引位置的 <see cref="T:System.Configuration.ConfigurationElement" />。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseIsRemoved(System.Object)">
      <summary>指示是否已从 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 中移除具有指定键的 <see cref="T:System.Configuration.ConfigurationElement" />。</summary>
      <returns>如果已移除具有指定键的 <see cref="T:System.Configuration.ConfigurationElement" />，则为 true；否则为 false。 默认值为 false。</returns>
      <param name="key">要检查的元素的键。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseRemove(System.Object)">
      <summary>从集合中移除 <see cref="T:System.Configuration.ConfigurationElement" />。</summary>
      <param name="key">要移除的 <see cref="T:System.Configuration.ConfigurationElement" /> 的键。</param>
      <exception cref="T:System.Exception">集合中不存在具有指定键的 <see cref="T:System.Configuration.ConfigurationElement" />，该元素已被移除，或者由于该元素的 <see cref="P:System.Configuration.ConfigurationProperty.Type" /> 值不是 <see cref="F:System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMap" />，因此无法移除该元素。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseRemoveAt(System.Int32)">
      <summary>移除位于指定索引位置的 <see cref="T:System.Configuration.ConfigurationElement" />。</summary>
      <param name="index">要移除的 <see cref="T:System.Configuration.ConfigurationElement" /> 的索引位置。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置是只读的。 - 或 - <paramref name="index" /> 小于 0 或大于集合中的 <see cref="T:System.Configuration.ConfigurationElement" /> 对象数。 - 或 - <see cref="T:System.Configuration.ConfigurationElement" /> 对象已移除。 - 或 - <see cref="T:System.Configuration.ConfigurationElement" /> 对象的值已在更高级别锁定。 - 或 - <see cref="T:System.Configuration.ConfigurationElement" /> 对象被继承。 - 或 - <see cref="T:System.Configuration.ConfigurationElement" /> 对象的 <see cref="P:System.Configuration.ConfigurationProperty.Type" /> 的值不是 <see cref="F:System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMap" /> 或 <see cref="F:System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMapAlternate" />。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.ClearElementName">
      <summary>在派生的类中重写时，获取或设置 <see cref="T:System.Configuration.ConfigurationElement" /> 的名称，以便在 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 中与清除操作关联。</summary>
      <returns>元素的名称。</returns>
      <exception cref="T:System.ArgumentException">选定值以保留前缀“config”或“lock”开头。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.CollectionType">
      <summary>获取 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 的类型。</summary>
      <returns>此集合的 <see cref="T:System.Configuration.ConfigurationElementCollectionType" />。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.CopyTo(System.Configuration.ConfigurationElement[],System.Int32)">
      <summary>将 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 的内容复制到数组。</summary>
      <param name="array">
        <see cref="T:System.Configuration.ConfigurationElementCollection" /> 的内容要复制到的数组。</param>
      <param name="index">开始复制的索引位置。</param>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.Count">
      <summary>获取集合中的元素数。</summary>
      <returns>集合中的元素数。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.CreateNewElement">
      <summary>当在派生的类中重写时，创建一个新的 <see cref="T:System.Configuration.ConfigurationElement" />。</summary>
      <returns>新创建的 <see cref="T:System.Configuration.ConfigurationElement" />。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.CreateNewElement(System.String)">
      <summary>在派生的类中重写时，创建新的 <see cref="T:System.Configuration.ConfigurationElement" />。</summary>
      <returns>具有指定名称的新 <see cref="T:System.Configuration.ConfigurationElement" />。</returns>
      <param name="elementName">要创建的 <see cref="T:System.Configuration.ConfigurationElement" /> 的名称。</param>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.ElementName">
      <summary>获取在派生的类中重写时用于标识配置文件中此元素集合的名称。</summary>
      <returns>集合的名称；否则为空字符串。 默认值为空字符串。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.EmitClear">
      <summary>获取或设置一个值，该值指定是否已清除集合。</summary>
      <returns>如果已清除集合，则为 true；否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置是只读的。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.Equals(System.Object)">
      <summary>将 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 与指定的对象进行比较。</summary>
      <returns>如果要与之比较的对象等同于当前的 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 实例，则为 true；否则为 false。 默认值为 false。</returns>
      <param name="compareTo">要比较的对象。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
      <summary>在派生类中重写时获取指定配置元素的元素键。</summary>
      <returns>一个 <see cref="T:System.Object" />，用作指定 <see cref="T:System.Configuration.ConfigurationElement" /> 的键。</returns>
      <param name="element">要为其返回键的 <see cref="T:System.Configuration.ConfigurationElement" />。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.GetEnumerator">
      <summary>获取用于循环访问 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>用于循环访问 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.GetHashCode">
      <summary>获取表示 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 实例的唯一值。</summary>
      <returns>表示 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 当前实例的唯一值。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.IsElementName(System.String)">
      <summary>指示指定的 <see cref="T:System.Configuration.ConfigurationElement" /> 是否存在于 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 中。</summary>
      <returns>如果集合中存在该元素，则为 true；否则为 false。 默认值为 false。</returns>
      <param name="elementName">要验证的元素的名称。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.IsElementRemovable(System.Configuration.ConfigurationElement)">
      <summary>指示是否可从 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 中移除指定 <see cref="T:System.Configuration.ConfigurationElement" />。</summary>
      <returns>如果可从此 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 中移除指定的 <see cref="T:System.Configuration.ConfigurationElement" />，则为 true；否则为 false。 默认值为 true。</returns>
      <param name="element">要检查的元素。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.IsModified">
      <summary>在派生的类中重写时，指示从最后一次保存或加载此 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 后是否对其进行了修改。</summary>
      <returns>true 如果已修改任何包含的项；否则为false</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.IsReadOnly">
      <summary>指示 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 对象是否为只读的。</summary>
      <returns>如果 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 对象为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否同步。</summary>
      <returns>如果对 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 的访问是同步的，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
      <summary>导致配置系统引发异常。</summary>
      <returns>如果成功完成对无法识别的元素的反序列化，则为 true；否则为 false。 默认值为 false。</returns>
      <param name="elementName">无法识别的元素的名称。</param>
      <param name="reader">从配置文件中读取 XML 的输入流。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="elementName" /> 中指定的元素为 &lt;clear&gt; 元素。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementName" /> 以保留前缀“config”或“lock”开头。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.RemoveElementName">
      <summary>在派生的类中重写时，获取或设置 <see cref="T:System.Configuration.ConfigurationElement" /> 的名称，以便在 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 中与移除操作关联。</summary>
      <returns>元素的名称。</returns>
      <exception cref="T:System.ArgumentException">选定值以保留前缀“config”或“lock”开头。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.Reset(System.Configuration.ConfigurationElement)">
      <summary>在派生的类中重写时，将 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 重置为其未被修改时的状态。</summary>
      <param name="parentElement">表示集合父元素（如果有）的 <see cref="T:System.Configuration.ConfigurationElement" />；否则为 null。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.ResetModified">
      <summary>在派生的类中重写时，将 <see cref="M:System.Configuration.ConfigurationElementCollection.IsModified" /> 属性的值重置为 false。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.SerializeElement(System.Xml.XmlWriter,System.Boolean)">
      <summary>在派生的类中重写时，将配置数据写入配置文件中的 XML 元素。</summary>
      <returns>如果已将 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 成功写入配置文件，则为 true。</returns>
      <param name="writer">将 XML 写入配置文件的输出流。</param>
      <param name="serializeCollectionKey">若序列化集合键，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentException">集合中的某个元素被添加或替换，并以保留前缀“config”或“lock”开头。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.SetReadOnly">
      <summary>为 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 对象和所有子元素设置 <see cref="M:System.Configuration.ConfigurationElementCollection.IsReadOnly" /> 属性。</summary>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.SyncRoot">
      <summary>获取用于同步对 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 的访问的对象。</summary>
      <returns>用于同步对 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 复制到数组。</summary>
      <param name="arr">此 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 要复制到的数组。</param>
      <param name="index">开始复制的索引位置。</param>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.ThrowOnDuplicate">
      <summary>获取一个值，该值指示尝试向 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 添加重复的 <see cref="T:System.Configuration.ConfigurationElement" /> 是否会导致引发异常。</summary>
      <returns>如果尝试向此 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 添加重复的 <see cref="T:System.Configuration.ConfigurationElement" /> 会导致引发异常，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
      <summary>反转将配置层次结构的不同级别配置的信息合并在一起的效果</summary>
      <param name="sourceElement">当前级别上包含属性的合并视图的 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</param>
      <param name="parentElement">当前元素的父 <see cref="T:System.Configuration.ConfigurationElement" /> 对象；如果当前元素为顶层，则为 null。</param>
      <param name="saveMode">一个 <see cref="T:System.Configuration.ConfigurationSaveMode" /> 枚举值，该值可确定要包含哪些属性值。</param>
    </member>
    <member name="T:System.Configuration.ConfigurationElementCollectionType">
      <summary>指定 <see cref="T:System.Configuration.ConfigurationElementCollectionType" /> 对象的类型。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMap">
      <summary>
        <see cref="T:System.Configuration.ConfigurationElementCollection" /> 的默认类型。 此类型的集合包含可在配置文件的层次结构中进行合并的元素。 在这类层次结构的任何特定级别中，均可使用 add、remove 和 clear 指令修改任何继承的属性和指定新的属性。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMapAlternate">
      <summary>除了使 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 对象对其内容进行排序以将继承的元素排列在最后外，此类型与 <see cref="F:System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMap" /> 相同。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationElementCollectionType.BasicMap">
      <summary>此类型的集合包含应用于指定的级别（由这些元素指定）和所有子级别的元素。 子级别不能修改由此类型的父元素指定的属性。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate">
      <summary>除了使 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 对象对其内容进行排序以将继承的元素排列在最后外，此类型与 <see cref="F:System.Configuration.ConfigurationElementCollectionType.BasicMap" /> 相同。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationElementProperty">
      <summary>指定配置元素的属性。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElementProperty.#ctor(System.Configuration.ConfigurationValidatorBase)">
      <summary>使用所提供的参数初始化 <see cref="T:System.Configuration.ConfigurationElementProperty" /> 类的新实例。</summary>
      <param name="validator">
        <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="validator" /> 为 null。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationElementProperty.Validator">
      <summary>获取用于验证 <see cref="T:System.Configuration.ConfigurationElementProperty" /> 对象的 <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 对象。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 对象。</returns>
    </member>
    <member name="T:System.Configuration.ConfigurationErrorsException">
      <summary>当前的值不是 <see cref="P:System.Web.Configuration.PagesSection.EnableSessionState" /> 值之一。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 类的新实例。</summary>
      <param name="info">包含要反序列化的信息的对象。</param>
      <param name="context">有关源或目标的上下文信息。</param>
      <exception cref="T:System.InvalidOperationException">当前类型不是 <see cref="T:System.Configuration.ConfigurationException" /> 或 <see cref="T:System.Configuration.ConfigurationErrorsException" />。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 类的新实例。</summary>
      <param name="message">描述引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常的原因的消息。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 类的新实例。</summary>
      <param name="message">描述引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常的原因的消息。</param>
      <param name="inner">导致引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常的异常。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.String,System.Exception,System.String,System.Int32)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 类的新实例。</summary>
      <param name="message">描述引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常的原因的消息。</param>
      <param name="inner">导致引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常的内部异常。</param>
      <param name="filename">导致引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常的配置文件的路径。</param>
      <param name="line">配置文件中引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常处的行号。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.String,System.Exception,System.Xml.XmlNode)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 类的新实例。</summary>
      <param name="message">描述引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常的原因的消息。</param>
      <param name="inner">导致引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常的内部异常。</param>
      <param name="node">导致引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常的 <see cref="T:System.Xml.XmlNode" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.String,System.Exception,System.Xml.XmlReader)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 类的新实例。</summary>
      <param name="message">描述引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常的原因的消息。</param>
      <param name="inner">导致引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常的内部异常。</param>
      <param name="reader">导致引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常的 <see cref="T:System.Xml.XmlReader" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.String,System.String,System.Int32)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 类的新实例。</summary>
      <param name="message">描述引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常的原因的消息。</param>
      <param name="filename">导致引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常的配置文件的路径。</param>
      <param name="line">配置文件中引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常处的行号。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.String,System.Xml.XmlNode)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 类的新实例。</summary>
      <param name="message">描述引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常的原因的消息。</param>
      <param name="node">导致引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常的 <see cref="T:System.Xml.XmlNode" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.String,System.Xml.XmlReader)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 类的新实例。</summary>
      <param name="message">描述引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常的原因的消息。</param>
      <param name="reader">导致引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常的 <see cref="T:System.Xml.XmlReader" /> 对象。</param>
    </member>
    <member name="P:System.Configuration.ConfigurationErrorsException.BareMessage">
      <summary>获取对引发此配置异常的原因的说明。</summary>
      <returns>对引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 的原因的说明。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationErrorsException.Errors">
      <summary>获取详细描述引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常的原因的错误集合。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 对象，包含标识引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常的原因的错误。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationErrorsException.Filename">
      <summary>获取导致引发此配置异常的配置文件的路径。</summary>
      <returns>导致引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 的配置文件的路径。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.GetFilename(System.Xml.XmlNode)">
      <summary>获取引发此配置异常时从中加载内部 <see cref="T:System.Xml.XmlNode" /> 对象的配置文件的路径。</summary>
      <returns>引发此配置异常时从中加载内部 <see cref="T:System.Xml.XmlNode" /> 对象的配置文件的路径。</returns>
      <param name="node">导致引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常的 <see cref="T:System.Xml.XmlNode" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.GetFilename(System.Xml.XmlReader)">
      <summary>获取引发此配置异常时内部 <see cref="T:System.Xml.XmlReader" /> 正在读取的配置文件的路径。</summary>
      <returns>发生异常时内部 <see cref="T:System.Xml.XmlReader" /> 对象正在访问的配置文件的路径。</returns>
      <param name="reader">导致引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常的 <see cref="T:System.Xml.XmlReader" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.GetLineNumber(System.Xml.XmlNode)">
      <summary>获取引发此配置异常时内部 <see cref="T:System.Xml.XmlNode" /> 对象所表示的配置文件中的行号。</summary>
      <returns>获取配置文件中的行号，该配置文件包含引发此配置异常时正在分析的 <see cref="T:System.Xml.XmlNode" /> 对象。</returns>
      <param name="node">导致引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常的 <see cref="T:System.Xml.XmlNode" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.GetLineNumber(System.Xml.XmlReader)">
      <summary>获取引发此配置异常时内部 <see cref="T:System.Xml.XmlReader" /> 对象正在处理的配置文件中的行号。</summary>
      <returns>发生异常时 <see cref="T:System.Xml.XmlReader" /> 对象正在访问的配置文件中的行号。</returns>
      <param name="reader">导致引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常的 <see cref="T:System.Xml.XmlReader" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用发生此配置异常处的文件名和行号设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">包含要序列化的信息的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="P:System.Configuration.ConfigurationErrorsException.Line">
      <summary>获取配置文件中引发此配置异常处的行号。</summary>
      <returns>配置文件中引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常处的行号。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationErrorsException.Message">
      <summary>获取对引发此配置异常的原因的补充说明。</summary>
      <returns>对引发此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 异常的原因的补充说明。</returns>
    </member>
    <member name="T:System.Configuration.ConfigurationFileMap">
      <summary>为计算机配置文件定义配置文件映射。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationFileMap.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationFileMap" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationFileMap.#ctor(System.String)">
      <summary>基于提供的参数初始化 <see cref="T:System.Configuration.ConfigurationFileMap" /> 类的新实例。</summary>
      <param name="machineConfigFilename">计算机配置文件的名称。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationFileMap.Clone">
      <summary>创建现有 <see cref="T:System.Configuration.ConfigurationFileMap" /> 对象的副本。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationFileMap" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationFileMap.MachineConfigFilename">
      <summary>获取或设置计算机配置文件的名称。</summary>
      <returns>计算机配置文件名。</returns>
    </member>
    <member name="T:System.Configuration.ConfigurationLocation">
      <summary>表示配置文件中的 location 元素。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationLocation.OpenConfiguration">
      <summary>创建 Configuration 对象的实例。</summary>
      <returns>Configuration 对象。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationLocation.Path">
      <summary>获取配置设置由此 <see cref="T:System.Configuration.ConfigurationLocation" /> 对象表示的资源的相对路径。</summary>
      <returns>资源的相对路径，该资源的配置设置由此 <see cref="T:System.Configuration.ConfigurationLocation" /> 表示。</returns>
    </member>
    <member name="T:System.Configuration.ConfigurationLocationCollection">
      <summary>包含 <see cref="T:System.Configuration.ConfigurationLocationCollection" /> 对象的集合。</summary>
    </member>
    <member name="P:System.Configuration.ConfigurationLocationCollection.Item(System.Int32)">
      <summary>获取位于指定索引位置的 <see cref="T:System.Configuration.ConfigurationLocationCollection" /> 对象。</summary>
      <returns>位于指定索引处的 <see cref="T:System.Configuration.ConfigurationLocationCollection" />。</returns>
      <param name="index">要返回的 <see cref="T:System.Configuration.ConfigurationLocationCollection" /> 的索引位置。</param>
    </member>
    <member name="T:System.Configuration.ConfigurationLockCollection">
      <summary>包含锁定的配置对象的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.Add(System.String)">
      <summary>通过将配置对象添加到集合来锁定该配置对象。</summary>
      <param name="name">配置对象的名称。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">在 <paramref name="name" /> 与集合中现有的配置对象不匹配时发生。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationLockCollection.AttributeList">
      <summary>获取集合中包含的配置对象的列表。</summary>
      <returns>一个以逗号分隔的字符串，它列出集合中的锁定配置对象。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.Clear">
      <summary>清除集合中的所有的配置对象。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.Contains(System.String)">
      <summary>验证是否锁定了某个特定的配置对象。</summary>
      <returns>如果 <see cref="T:System.Configuration.ConfigurationLockCollection" /> 包含指定的配置对象，则为 true；否则为 false。</returns>
      <param name="name">要验证的配置对象的名称。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.CopyTo(System.String[],System.Int32)">
      <summary>从目标数组的指定索引处开始，将整个 <see cref="T:System.Configuration.ConfigurationLockCollection" /> 集合复制到兼容的一维 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一个一维的 <see cref="T:System.Array" />，它是从 <see cref="T:System.Configuration.ConfigurationLockCollection" /> 复制的元素的目标数组。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
    </member>
    <member name="P:System.Configuration.ConfigurationLockCollection.Count">
      <summary>获取集合中包含的锁定配置对象的数目。</summary>
      <returns>集合中包含的锁定配置对象的数目。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.GetEnumerator">
      <summary>获取 <see cref="T:System.Collections.IEnumerator" /> 对象，此对象用于循环访问此 <see cref="T:System.Configuration.ConfigurationLockCollection" /> 集合。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationLockCollection.HasParentElements">
      <summary>获取一个值，该值指定锁定对象的集合是否具有父元素。</summary>
      <returns>如果此 <see cref="T:System.Configuration.ConfigurationLockCollection" /> 集合具有父元素，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationLockCollection.IsModified">
      <summary>获取一个值，该值指定是否已修改集合。</summary>
      <returns>如果此 <see cref="T:System.Configuration.ConfigurationLockCollection" /> 集合已修改，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.IsReadOnly(System.String)">
      <summary>验证某个特定的配置对象是否为只读。</summary>
      <returns>如果 <see cref="T:System.Configuration.ConfigurationLockCollection" /> 集合中指定的配置对象为只读，则为 true；否则为 false。</returns>
      <param name="name">要验证的配置对象的名称。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">指定的配置对象不在集合中。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationLockCollection.IsSynchronized">
      <summary>获取一个值，该值指定该集合是否已同步。</summary>
      <returns>如果此 <see cref="T:System.Configuration.ConfigurationLockCollection" /> 集合已同步，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.Remove(System.String)">
      <summary>从集合中移除配置对象。</summary>
      <param name="name">配置对象的名称。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">在 <paramref name="name" /> 与集合中现有的配置对象不匹配时发生。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.SetFromList(System.String)">
      <summary>根据所提供的列表锁定一组配置对象。</summary>
      <param name="attributeList">一个以逗号分隔的字符串。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">在 <paramref name="attributeList" /> 参数中的某一项不是有效的可锁定配置特性时发生。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationLockCollection.SyncRoot">
      <summary>获取一个对象，该对象用于同步对此 <see cref="T:System.Configuration.ConfigurationLockCollection" /> 集合的访问。</summary>
      <returns>用于同步对此 <see cref="T:System.Configuration.ConfigurationLockCollection" /> 集合的访问的对象。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从目标数组的指定索引处开始，将整个 <see cref="T:System.Configuration.ConfigurationLockCollection" /> 集合复制到兼容的一维 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一个一维的 <see cref="T:System.Array" />，它是从 <see cref="T:System.Configuration.ConfigurationLockCollection" /> 集合复制的元素的目标数组。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
    </member>
    <member name="T:System.Configuration.ConfigurationManager">
      <summary>提供对客户端应用程序配置文件的访问。 此类不能被继承。</summary>
    </member>
    <member name="P:System.Configuration.ConfigurationManager.AppSettings">
      <summary>获取当前应用程序默认配置的 <see cref="T:System.Configuration.AppSettingsSection" /> 数据。</summary>
      <returns>返回一个 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 对象，该对象包含当前应用程序默认配置的 <see cref="T:System.Configuration.AppSettingsSection" /> 对象的内容。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">未能使用应用程序设置数据检索 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 对象。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationManager.ConnectionStrings">
      <summary>获取当前应用程序默认配置的 <see cref="T:System.Configuration.ConnectionStringsSection" /> 数据。</summary>
      <returns>返回一个 <see cref="T:System.Configuration.ConnectionStringSettingsCollection" /> 对象，该对象包含当前应用程序默认配置的 <see cref="T:System.Configuration.ConnectionStringsSection" /> 对象的内容。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">未能检索 <see cref="T:System.Configuration.ConnectionStringSettingsCollection" /> 对象。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationManager.GetSection(System.String)">
      <summary>检索当前应用程序默认配置的指定配置节。</summary>
      <returns>指定的 <see cref="T:System.Configuration.ConfigurationSection" /> 对象，或者，如果该节不存在，则为 null。</returns>
      <param name="sectionName">配置节的路径和名称。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">未能加载配置文件。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationManager.OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)">
      <summary>将当前应用程序的配置文件作为 <see cref="T:System.Configuration.Configuration" /> 对象打开。</summary>
      <returns>
        <see cref="T:System.Configuration.Configuration" /> 对象。</returns>
      <param name="userLevel">要打开配置的 <see cref="T:System.Configuration.ConfigurationUserLevel" />。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">未能加载配置文件。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationManager.OpenExeConfiguration(System.String)">
      <summary>将指定的客户端配置文件作为 <see cref="T:System.Configuration.Configuration" /> 对象打开。</summary>
      <returns>
        <see cref="T:System.Configuration.Configuration" /> 对象。</returns>
      <param name="exePath">可执行 (exe) 文件的路径。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">未能加载配置文件。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationManager.OpenMachineConfiguration">
      <summary>将当前计算机上的计算机配置文件作为 <see cref="T:System.Configuration.Configuration" /> 对象打开。</summary>
      <returns>
        <see cref="T:System.Configuration.Configuration" /> 对象。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">未能加载配置文件。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)">
      <summary>可将指定的客户端配置文件作为使用指定文件映射和用户级别的 <see cref="T:System.Configuration.Configuration" /> 对象打开。</summary>
      <returns>配置对象。</returns>
      <param name="fileMap">一个 <see cref="T:System.Configuration.ExeConfigurationFileMap" /> 对象，该对象引用代替应用程序的默认配置文件使用的配置文件。</param>
      <param name="userLevel">要打开配置的 <see cref="T:System.Configuration.ConfigurationUserLevel" /> 对象。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">未能加载配置文件。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.Boolean)">
      <summary>可将指定的客户端配置文件作为使用指定文件映射、用户级别和预加载选项的 <see cref="T:System.Configuration.Configuration" /> 对象打开。</summary>
      <returns>配置对象。</returns>
      <param name="fileMap">一个 <see cref="T:System.Configuration.ExeConfigurationFileMap" /> 对象，该对象引用代替应用程序的默认配置文件使用的配置文件。</param>
      <param name="userLevel">要打开配置的 <see cref="T:System.Configuration.ConfigurationUserLevel" /> 对象。</param>
      <param name="preLoad">如果预加载所有部分团队和部分，则为 true；否则为 false。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">未能加载配置文件。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)">
      <summary>将计算机配置文件作为使用指定文件映射的 <see cref="T:System.Configuration.Configuration" /> 对象打开。</summary>
      <returns>
        <see cref="T:System.Configuration.Configuration" /> 对象。</returns>
      <param name="fileMap">一个 <see cref="T:System.Configuration.ExeConfigurationFileMap" /> 对象，该对象引用代替应用程序的默认配置文件使用的配置文件。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">未能加载配置文件。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationManager.RefreshSection(System.String)">
      <summary>刷新命名节，这样在下次检索它时将从磁盘重新读取它。</summary>
      <param name="sectionName">要刷新的节的配置节名称或配置路径和节名称。</param>
    </member>
    <member name="T:System.Configuration.ConfigurationPermission">
      <summary>提供允许方法或类访问配置文件的权限结构。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationPermission" /> 类的新实例。</summary>
      <param name="state">要授予的权限级别。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 的值不是 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />，也不是 <see cref="F:System.Security.Permissions.PermissionState.None" />。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.Copy">
      <summary>返回具有相同权限级别的新的 <see cref="T:System.Configuration.ConfigurationPermission" /> 对象。</summary>
      <returns>具有相同权限级别的新的 <see cref="T:System.Configuration.ConfigurationPermission" />。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 读取权限状态值。</summary>
      <param name="securityElement">从中读取权限状态的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">给定 <paramref name="securityElement" /> 的 <see cref="P:System.Security.SecurityElement.Tag" /> 不等于“IPermission”。</exception>
      <exception cref="T:System.ArgumentException">给定 <paramref name="securityElement" /> 的 <see cref="P:System.Security.SecurityElement.Tag" /> 不等于“IPermission”。</exception>
      <exception cref="T:System.ArgumentException">给定 <paramref name="securityElement" /> 的 <see cref="P:System.Security.SecurityElement.Tag" /> 不等于“IPermission”。</exception>
      <exception cref="T:System.ArgumentException">给定 <paramref name="securityElement" /> 的 <see cref="P:System.Security.SecurityElement.Tag" /> 不等于“IPermission”。</exception>
      <exception cref="T:System.ArgumentException">给定 <paramref name="securityElement" /> 的 <see cref="P:System.Security.SecurityElement.Tag" /> 不等于“IPermission”。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.Intersect(System.Security.IPermission)">
      <summary>返回 <see cref="T:System.Configuration.ConfigurationPermission" /> 对象与实现 <see cref="T:System.Security.IPermission" /> 接口的给定对象的逻辑交集。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationPermission" /> 与实现 <see cref="T:System.Security.IPermission" /> 的给定对象的逻辑交集。</returns>
      <param name="target">包含用于执行交集的权限的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 的类型不是 <see cref="T:System.Configuration.ConfigurationPermission" />。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>将 <see cref="T:System.Configuration.ConfigurationPermission" /> 对象与实现 <see cref="T:System.Security.IPermission" /> 接口的对象进行比较。</summary>
      <returns>如果权限状态相等，则为 true；否则为 false。</returns>
      <param name="target">要比较的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 的类型不是 <see cref="T:System.Configuration.ConfigurationPermission" />。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.IsUnrestricted">
      <summary>指示 <see cref="T:System.Configuration.ConfigurationPermission" /> 对象的权限状态是否为 <see cref="T:System.Security.Permissions.PermissionState" /> 枚举的 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> 值。</summary>
      <returns>如果 <see cref="T:System.Configuration.ConfigurationPermission" /> 的权限状态是 <see cref="T:System.Security.Permissions.PermissionState" /> 的 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> 值，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.ToXml">
      <summary>返回一个 <see cref="T:System.Security.SecurityElement" /> 对象，其特性值取决于当前 <see cref="T:System.Configuration.ConfigurationPermission" /> 对象。</summary>
      <returns>
        <see cref="T:System.Security.SecurityElement" />，其特性值取决于当前 <see cref="T:System.Configuration.ConfigurationPermission" />。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.Union(System.Security.IPermission)">
      <summary>返回 <see cref="T:System.Configuration.ConfigurationPermission" /> 对象与实现 <see cref="T:System.Security.IPermission" /> 接口的对象的逻辑并集。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationPermission" /> 与实现 <see cref="T:System.Security.IPermission" /> 的对象的逻辑并集。</returns>
      <param name="target">用于执行该并集的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 的类型不是 <see cref="T:System.Configuration.ConfigurationPermission" />。</exception>
    </member>
    <member name="T:System.Configuration.ConfigurationPermissionAttribute">
      <summary>创建一个 <see cref="T:System.Configuration.ConfigurationPermission" /> 对象，该对象授予或拒绝访问配置文件节的标记了的目标权限。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 的枚举成员表示的安全操作。 确定特性的权限状态。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationPermissionAttribute.CreatePermission">
      <summary>创建和返回实现 <see cref="T:System.Security.IPermission" /> 接口的对象。</summary>
      <returns>返回实现 <see cref="T:System.Security.IPermission" /> 的对象。</returns>
    </member>
    <member name="T:System.Configuration.ConfigurationProperty">
      <summary>表示配置元素的一个特性或子级。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationProperty.#ctor(System.String,System.Type)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationProperty" /> 类的新实例。</summary>
      <param name="name">配置实体的名称。</param>
      <param name="type">配置实体的类型。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationProperty.#ctor(System.String,System.Type,System.Object)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationProperty" /> 类的新实例。</summary>
      <param name="name">配置实体的名称。</param>
      <param name="type">配置实体的类型。</param>
      <param name="defaultValue">配置实体的默认值。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationProperty.#ctor(System.String,System.Type,System.Object,System.ComponentModel.TypeConverter,System.Configuration.ConfigurationValidatorBase,System.Configuration.ConfigurationPropertyOptions)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationProperty" /> 类的新实例。</summary>
      <param name="name">配置实体的名称。</param>
      <param name="type">配置实体的类型。</param>
      <param name="defaultValue">配置实体的默认值。</param>
      <param name="typeConverter">要应用的转换器类型。</param>
      <param name="validator">要使用的验证程序。</param>
      <param name="options">
        <see cref="T:System.Configuration.ConfigurationPropertyOptions" /> 枚举值之一。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationProperty.#ctor(System.String,System.Type,System.Object,System.ComponentModel.TypeConverter,System.Configuration.ConfigurationValidatorBase,System.Configuration.ConfigurationPropertyOptions,System.String)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationProperty" /> 类的新实例。</summary>
      <param name="name">配置实体的名称。</param>
      <param name="type">配置实体的类型。</param>
      <param name="defaultValue">配置实体的默认值。</param>
      <param name="typeConverter">要应用的转换器类型。</param>
      <param name="validator">要使用的验证程序。</param>
      <param name="options">
        <see cref="T:System.Configuration.ConfigurationPropertyOptions" /> 枚举值之一。</param>
      <param name="description">配置实体的说明。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationProperty.#ctor(System.String,System.Type,System.Object,System.Configuration.ConfigurationPropertyOptions)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationProperty" /> 类的新实例。</summary>
      <param name="name">配置实体的名称。</param>
      <param name="type">配置实体的类型。</param>
      <param name="defaultValue">配置实体的默认值。</param>
      <param name="options">
        <see cref="T:System.Configuration.ConfigurationPropertyOptions" /> 枚举值之一。</param>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.Converter">
      <summary>获取 <see cref="T:System.ComponentModel.TypeConverter" />，该转换器用于将此 <see cref="T:System.Configuration.ConfigurationProperty" /> 转换为便于写入配置文件的 XML 表示形式。</summary>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> 用于将此 <see cref="T:System.Configuration.ConfigurationProperty" /> 转换为便于写入配置文件的 XML 表示形式。</returns>
      <exception cref="T:System.Exception">此 <see cref="T:System.Configuration.ConfigurationProperty" /> 无法转换。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.DefaultValue">
      <summary>获取此 <see cref="T:System.Configuration.ConfigurationProperty" /> 属性的默认值。</summary>
      <returns>可被强制转换为 <see cref="P:System.Configuration.ConfigurationProperty.Type" /> 属性所指定类型的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.Description">
      <summary>获取与 <see cref="T:System.Configuration.ConfigurationProperty" /> 关联的说明。</summary>
      <returns>描述属性的 string 值。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.IsAssemblyStringTransformationRequired">
      <summary>指示在针对早期版本的 .NET Framework 序列化配置属性时，是否需要转换该属性的程序集名称。</summary>
      <returns>如果该属性需要转换程序集名称，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.IsDefaultCollection">
      <summary>获取一个值，该值指示属性是否为默认的元素集合。</summary>
      <returns>如果属性是元素的默认集合，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.IsKey">
      <summary>获取一个值，该值指示此 <see cref="T:System.Configuration.ConfigurationProperty" /> 是否为 <see cref="T:System.Configuration.ConfigurationElement" /> 包含对象的键。</summary>
      <returns>如果此 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象是包含元素的键，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.IsRequired">
      <summary>获取一个值，该值指示此 <see cref="T:System.Configuration.ConfigurationProperty" /> 是否为必需的。</summary>
      <returns>如果 <see cref="T:System.Configuration.ConfigurationProperty" /> 是必需的，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.IsTypeStringTransformationRequired">
      <summary>指示在针对早期版本的 .NET Framework 序列化配置属性时，是否需要转换该属性的类型名称。</summary>
      <returns>如果该属性需要转换类型名称，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.IsVersionCheckRequired">
      <summary>指示进行序列化时是否应查询配置属性的父配置节，以确定是否应将配置属性序列化到 XML 中。</summary>
      <returns>如果应查询父配置节，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.Name">
      <summary>获取此 <see cref="T:System.Configuration.ConfigurationProperty" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationProperty" /> 的名称。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.Type">
      <summary>获取此 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象的类型。</summary>
      <returns>一个表示此 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象的类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.Validator">
      <summary>获取 <see cref="T:System.Configuration.ConfigurationValidatorAttribute" />，它用于验证此 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象。</summary>
      <returns>用于验证此 <see cref="T:System.Configuration.ConfigurationProperty" /> 的 <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 验证程序。</returns>
    </member>
    <member name="T:System.Configuration.ConfigurationPropertyAttribute">
      <summary>以声明方式指示 .NET Framework，以实例化配置属性。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationPropertyAttribute" /> 类的新实例。</summary>
      <param name="name">已定义 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象的名称。</param>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyAttribute.DefaultValue">
      <summary>获取或设置经过修饰的属性的默认值。</summary>
      <returns>表示经过修饰的配置元素属性默认值的对象。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyAttribute.IsDefaultCollection">
      <summary>获取或设置一个值，指示此属性集合是否为经过修饰的配置属性的默认属性集合。</summary>
      <returns>如果该属性表示元素的默认集合，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyAttribute.IsKey">
      <summary>获取或设置一个值，该值指示此属性是否是该经过修饰的元素属性的 Key 属性。</summary>
      <returns>如果此属性是该集合中元素的 Key 属性，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyAttribute.IsRequired">
      <summary>获取或设置一个值，指示经过修饰的元素属性是否是必需的。</summary>
      <returns>如果该属性是必需的，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyAttribute.Name">
      <summary>获取经过修饰的配置元素属性的名称。</summary>
      <returns>经过修饰的配置元素属性的名称。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyAttribute.Options">
      <summary>为经过修饰的配置元素属性获取或设置 <see cref="T:System.Configuration.ConfigurationPropertyOptions" />。</summary>
      <returns>与该属性相关的 <see cref="T:System.Configuration.ConfigurationPropertyOptions" /> 枚举值之一。</returns>
    </member>
    <member name="T:System.Configuration.ConfigurationPropertyCollection">
      <summary>表示配置元素属性的集合。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyCollection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyCollection.Add(System.Configuration.ConfigurationProperty)">
      <summary>将配置属性添加到集合。</summary>
      <param name="property">要添加的 <see cref="T:System.Configuration.ConfigurationProperty" />。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyCollection.Clear">
      <summary>从集合中移除所有配置属性对象。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyCollection.Contains(System.String)">
      <summary>指定此集合中是否包含配置属性。</summary>
      <returns>如果指定的 <see cref="T:System.Configuration.ConfigurationProperty" /> 包含在集合中，则为 true；否则为 false。</returns>
      <param name="name">要进行验证的 <see cref="T:System.Configuration.ConfigurationProperty" /> 的标识符。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyCollection.CopyTo(System.Configuration.ConfigurationProperty[],System.Int32)">
      <summary>将此 ConfigurationPropertyCollection 复制到数组。</summary>
      <param name="array">要复制到的数组。</param>
      <param name="index">开始复制的索引位置。</param>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyCollection.Count">
      <summary>获取集合中的属性数。</summary>
      <returns>集合中的属性数。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyCollection.GetEnumerator">
      <summary>在将 <see cref="T:System.Collections.IEnumerator" /> 对象应用于集合时获取该对象。</summary>
      <returns>应用于集合时的 <see cref="T:System.Collections.IEnumerator" /> 对象</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyCollection.IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否为同步的（线程安全）。</summary>
      <returns>如果对 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 的访问是同步的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyCollection.Item(System.String)">
      <summary>获取具有指定名称的集合项。</summary>
      <returns>具有指定 <paramref name="name" /> 的 <see cref="T:System.Configuration.ConfigurationProperty" />。</returns>
      <param name="name">要返回的 <see cref="T:System.Configuration.ConfigurationProperty" />。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyCollection.Remove(System.String)">
      <summary>从集合中移除配置属性。</summary>
      <returns>如果移除了指定的 <see cref="T:System.Configuration.ConfigurationProperty" />，则为 true；否则为 false。</returns>
      <param name="name">要移除的 <see cref="T:System.Configuration.ConfigurationProperty" />。</param>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyCollection.SyncRoot">
      <summary>获取用于同步对集合的访问的对象。</summary>
      <returns>用于同步对集合的访问的对象。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将此集合复制到数组。</summary>
      <param name="array">要复制到的数组。</param>
      <param name="index">开始复制的索引位置。</param>
    </member>
    <member name="T:System.Configuration.ConfigurationPropertyOptions">
      <summary>指定要应用于属性的选项。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationPropertyOptions.IsAssemblyStringTransformationRequired">
      <summary>指示在针对早期版本的 .NET Framework 序列化配置属性时，是否需要转换该属性的程序集名称。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationPropertyOptions.IsDefaultCollection">
      <summary>指示该属性为默认集合。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationPropertyOptions.IsKey">
      <summary>指示该属性为集合键。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationPropertyOptions.IsRequired">
      <summary>指示该属性是必需的。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationPropertyOptions.IsTypeStringTransformationRequired">
      <summary>指示在针对早期版本的 .NET Framework 序列化配置属性时，是否需要转换该属性的类型名称。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationPropertyOptions.IsVersionCheckRequired">
      <summary>指示进行序列化时是否应查询配置属性的父配置节，以确定是否应将配置属性序列化到 XML 中。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationPropertyOptions.None">
      <summary>指示没有应用于该属性的选项。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationSaveMode">
      <summary>确定写出到配置文件的属性。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationSaveMode.Full">
      <summary>将所有属性都写出到配置文件。 这在创建信息配置文件时或将配置值从一台计算机移动到另一台计算机时最有用。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationSaveMode.Minimal">
      <summary>仅将不同于继承值的属性写出到配置文件。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationSaveMode.Modified">
      <summary>仅将修改的属性写出到配置文件，即使值和继承值相同。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationSection">
      <summary>表示配置文件中的节。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationSection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.DeserializeSection(System.Xml.XmlReader)">
      <summary>读取配置文件中的 XML。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 对象，它从配置文件进行读取。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="reader" /> 在配置文件中找不到元素。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.GetRuntimeObject">
      <summary>在派生的类中重写时返回自定义对象。</summary>
      <returns>表示节的对象。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.IsModified">
      <summary>指示自上次在派生类中实现此配置元素时保存或加载以来是否对其进行过修改。</summary>
      <returns>如果元素已修改，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.ResetModified">
      <summary>在派生类中实现时，将 <see cref="M:System.Configuration.ConfigurationElement.IsModified" /> 方法的值重置为 false。</summary>
    </member>
    <member name="P:System.Configuration.ConfigurationSection.SectionInformation">
      <summary>获取一个 <see cref="T:System.Configuration.SectionInformation" /> 对象，该对象包含 <see cref="T:System.Configuration.ConfigurationSection" /> 对象的不可自定义的信息和功能。</summary>
      <returns>一个 <see cref="T:System.Configuration.SectionInformation" />，包含 <see cref="T:System.Configuration.ConfigurationSection" /> 的不可自定义的信息和功能。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.SerializeSection(System.Configuration.ConfigurationElement,System.String,System.Configuration.ConfigurationSaveMode)">
      <summary>创建一个包含 <see cref="T:System.Configuration.ConfigurationSection" /> 对象的分离视图的 XML 字符串，作为单独的节写入到文件中。</summary>
      <returns>XML 字符串，包含 <see cref="T:System.Configuration.ConfigurationSection" /> 对象的分离视图。</returns>
      <param name="parentElement">要在执行分离时充当父对象的 <see cref="T:System.Configuration.ConfigurationElement" /> 实例。</param>
      <param name="name">要创建的节的名称。</param>
      <param name="saveMode">写入到字符串中时要使用的 <see cref="T:System.Configuration.ConfigurationSaveMode" /> 实例。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.ShouldSerializeElementInTargetVersion(System.Configuration.ConfigurationElement,System.String,System.Runtime.Versioning.FrameworkName)">
      <summary>指示在为 .NET Framework 的指定目标版本序列化配置对象层次结构时，是否应序列化指定元素。</summary>
      <returns>如果应序列化 <paramref name="element" />，则为 true；否则为 false。</returns>
      <param name="element">作为候选序列化对象的 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</param>
      <param name="elementName">
        <see cref="T:System.Configuration.ConfigurationElement" /> 对象出现在 XML 中的名称。</param>
      <param name="targetFramework">.NET Framework 的目标版本。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.ShouldSerializePropertyInTargetVersion(System.Configuration.ConfigurationProperty,System.String,System.Runtime.Versioning.FrameworkName,System.Configuration.ConfigurationElement)">
      <summary>指示在为指定目标版本的 .NET Framework 序列化配置对象层次结构时，是否应序列化指定属性。</summary>
      <returns>如果应序列化 <paramref name="property" />，则为 true；否则为 false。</returns>
      <param name="property">作为候选序列化对象的 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象。</param>
      <param name="propertyName">
        <see cref="T:System.Configuration.ConfigurationProperty" /> 对象出现在 XML 中的名称。</param>
      <param name="targetFramework">.NET Framework 的目标版本。</param>
      <param name="parentConfigurationElement">属性的父元素。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.ShouldSerializeSectionInTargetVersion(System.Runtime.Versioning.FrameworkName)">
      <summary>指示在为指定目标版本的 .NET Framework 序列化配置对象层次结构时，是否应序列化当前的 <see cref="T:System.Configuration.ConfigurationSection" /> 实例。</summary>
      <returns>如果应序列化当前节，则为 true；否则为 false。</returns>
      <param name="targetFramework">.NET Framework 的目标版本。</param>
    </member>
    <member name="T:System.Configuration.ConfigurationSectionCollection">
      <summary>表示配置文件中的相关节的集合。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.Add(System.String,System.Configuration.ConfigurationSection)">
      <summary>向 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象中添加 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。</summary>
      <param name="name">要添加的节的名称。</param>
      <param name="section">要添加的节。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.Clear">
      <summary>清除此 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.CopyTo(System.Configuration.ConfigurationSection[],System.Int32)">
      <summary>将此 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象复制到数组。</summary>
      <param name="array">要向其复制 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象的数组。</param>
      <param name="index">开始复制的索引位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="array" /> 的长度小于 <see cref="P:System.Configuration.ConfigurationSectionCollection.Count" /> 加上 <paramref name="index" /> 的值。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionCollection.Count">
      <summary>获取此 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象中的节数。</summary>
      <returns>一个整数，表示集合中的节数。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.Get(System.Int32)">
      <summary>获取此 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象中包含的指定 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。</summary>
      <returns>位于指定索引处的 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。</returns>
      <param name="index">要返回的 <see cref="T:System.Configuration.ConfigurationSection" /> 对象的索引。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.Get(System.String)">
      <summary>获取此 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象中包含的指定 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。</summary>
      <returns>具有指定名称的 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。</returns>
      <param name="name">要返回的 <see cref="T:System.Configuration.ConfigurationSection" /> 对象的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 为空或空字符串 ("")。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.GetEnumerator">
      <summary>获取一个可循环访问此 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象的枚举数。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" />，可用于循环访问此 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.GetKey(System.Int32)">
      <summary>获取此 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象中包含的指定 <see cref="T:System.Configuration.ConfigurationSection" /> 对象的键。</summary>
      <returns>位于指定索引处的 <see cref="T:System.Configuration.ConfigurationSection" /> 对象的键。</returns>
      <param name="index">要返回其键的 <see cref="T:System.Configuration.ConfigurationSection" /> 对象的索引。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>由系统在序列化期间使用。</summary>
      <param name="info">适用的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">适用的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。</param>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionCollection.Item(System.Int32)">
      <summary>获取指定的 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。</summary>
      <returns>位于指定索引处的 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。</returns>
      <param name="index">要返回的 <see cref="T:System.Configuration.ConfigurationSection" /> 对象的索引。</param>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionCollection.Item(System.String)">
      <summary>获取指定的 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。</summary>
      <returns>具有指定名称的 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。</returns>
      <param name="name">要返回的 <see cref="T:System.Configuration.ConfigurationSection" /> 对象的名称。</param>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionCollection.Keys">
      <summary>获取此 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象中包含的所有 <see cref="T:System.Configuration.ConfigurationSection" /> 对象的键。</summary>
      <returns>一个 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 对象，包含此集合中所有节的键。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.Remove(System.String)">
      <summary>从此 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象中移除指定的 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。</summary>
      <param name="name">要移除的节的名称。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.RemoveAt(System.Int32)">
      <summary>从此 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象中移除指定的 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。</summary>
      <param name="index">要移除的节的索引。</param>
    </member>
    <member name="T:System.Configuration.ConfigurationSectionGroup">
      <summary>表示配置文件中的一组相关节。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroup.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroup.ForceDeclaration">
      <summary>强制声明此 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroup.ForceDeclaration(System.Boolean)">
      <summary>强制声明此 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。</summary>
      <param name="force">如果必须将 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象写入文件，则为 true；否则为 false。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象是根节组。 - 或 - <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象包含位置。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroup.IsDeclarationRequired">
      <summary>获取一个值，指示是否需要声明此 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。</summary>
      <returns>如果需要声明此 <see cref="T:System.Configuration.ConfigurationSectionGroup" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroup.IsDeclared">
      <summary>获取一个值，指示是否已声明此 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。</summary>
      <returns>如果已声明此 <see cref="T:System.Configuration.ConfigurationSectionGroup" />，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroup.Name">
      <summary>获取此 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象的名称属性。</summary>
      <returns>此 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象的名称属性。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroup.SectionGroupName">
      <summary>获取与此 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 关联的节组名称。</summary>
      <returns>此 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象的节组名称。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroup.SectionGroups">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> 对象，其中包含作为此 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象的子对象的所有 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> 对象，其中包含作为此 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象的子对象的所有 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroup.Sections">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象，其中包含此 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象中的所有 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象，其中包含此 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象中的所有 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroup.ShouldSerializeSectionGroupInTargetVersion(System.Runtime.Versioning.FrameworkName)">
      <summary>指示在为指定目标版本的 .NET Framework 序列化配置对象层次结构时是否应序列化当前的 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 实例。</summary>
      <returns>如果应序列化当前节组，则为 true；否则为 false。</returns>
      <param name="targetFramework">.NET Framework 的目标版本。</param>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroup.Type">
      <summary>获取或设置此 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象的类型。</summary>
      <returns>此 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象的类型。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象是根节组。 - 或 - <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象包含位置。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">节或组已在其他级别定义。</exception>
    </member>
    <member name="T:System.Configuration.ConfigurationSectionGroupCollection">
      <summary>表示 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象的集合。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.Add(System.String,System.Configuration.ConfigurationSectionGroup)">
      <summary>向此 <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> 对象中添加 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。</summary>
      <param name="name">要添加的 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象的名称。</param>
      <param name="sectionGroup">要添加的 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.Clear">
      <summary>清除集合。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.CopyTo(System.Configuration.ConfigurationSectionGroup[],System.Int32)">
      <summary>将此 <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> 对象复制到数组。</summary>
      <param name="array">要向其复制对象的数组。</param>
      <param name="index">开始复制的索引位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="array" /> 的长度小于 <see cref="P:System.Configuration.ConfigurationSectionGroupCollection.Count" /> 加上 <paramref name="index" /> 的值。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroupCollection.Count">
      <summary>获取集合中的节组数目。</summary>
      <returns>一个整数，表示集合中的节组数。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.Get(System.Int32)">
      <summary>获取包含在集合中的指定 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。</summary>
      <returns>位于指定索引处的 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。</returns>
      <param name="index">要返回的 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象的索引。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.Get(System.String)">
      <summary>从集合中获取指定的 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。</summary>
      <returns>具有指定名称的 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。</returns>
      <param name="name">要返回的 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 为空或空字符串 ("")。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.GetEnumerator">
      <summary>获取可以循环访问 <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> 对象的枚举数。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" />，可用于循环访问 <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> 对象。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.GetKey(System.Int32)">
      <summary>获取此 <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> 对象中包含的指定 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象的键。</summary>
      <returns>位于指定索引处的 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象的键。</returns>
      <param name="index">要返回其键的节组的索引。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>由系统在序列化期间使用。</summary>
      <param name="info">适用的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">适用的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。</param>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroupCollection.Item(System.Int32)">
      <summary>获取 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象，该对象的索引从集合中指定。</summary>
      <returns>位于指定索引处的 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。 在 C# 中，此属性是 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 类的索引器。</returns>
      <param name="index">要返回的 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象的索引。</param>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroupCollection.Item(System.String)">
      <summary>获取 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象，该对象的名称从集合中指定。</summary>
      <returns>具有指定名称的 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。 在 C# 中，此属性是 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 类的索引器。</returns>
      <param name="name">要返回的 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象的名称。</param>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroupCollection.Keys">
      <summary>获取此 <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> 对象中包含的所有 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象的键。</summary>
      <returns>一个 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 对象，包含了此集合中所有节组的名称。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.Remove(System.String)">
      <summary>移除 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象，该对象的名称从此 <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> 对象指定。</summary>
      <param name="name">要移除的节组的名称。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.RemoveAt(System.Int32)">
      <summary>移除 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象，该对象的索引从此 <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> 对象指定。</summary>
      <param name="index">要移除的节组的索引。</param>
    </member>
    <member name="T:System.Configuration.ConfigurationUserLevel">
      <summary>用于指定将由 Configuration 对象表示的配置文件。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationUserLevel.None">
      <summary>获取应用于所有用户的 <see cref="T:System.Configuration.Configuration" />。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationUserLevel.PerUserRoaming">
      <summary>获取应用于当前用户的漫游 <see cref="T:System.Configuration.Configuration" />。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationUserLevel.PerUserRoamingAndLocal">
      <summary>获取应用于当前用户的本地 <see cref="T:System.Configuration.Configuration" />。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationValidatorAttribute">
      <summary>用作 <see cref="N:System.Configuration" /> 验证程序特性类型的基类。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationValidatorAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationValidatorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationValidatorAttribute.#ctor(System.Type)">
      <summary>使用指定的验证程序类型初始化 <see cref="T:System.Configuration.ConfigurationValidatorAttribute" /> 类的新实例。</summary>
      <param name="validator">创建 <see cref="T:System.Configuration.ConfigurationValidatorAttribute" /> 的实例时使用的验证程序类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="validator" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="validator" /> 不从 <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 派生。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationValidatorAttribute.ValidatorInstance">
      <summary>获取验证程序特性实例。</summary>
      <returns>当前 <see cref="T:System.Configuration.ConfigurationValidatorBase" />。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationValidatorAttribute.ValidatorType">
      <summary>获取验证程序特性的类型。</summary>
      <returns>当前验证程序特性实例的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Configuration.ConfigurationValidatorBase">
      <summary>作为基类，用于派生验证类，以便验证对象的值。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationValidatorBase.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 类的实例。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationValidatorBase.CanValidate(System.Type)">
      <summary>根据类型确定对象是否可验证。</summary>
      <returns>如果 <paramref name="type" /> 参数值与所需的 type 相匹配，则为 true；否则为 false。</returns>
      <param name="type">对象类型。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationValidatorBase.Validate(System.Object)">
      <summary>确定对象的值是否有效。</summary>
      <param name="value">对象值。</param>
    </member>
    <member name="T:System.Configuration.ConnectionStringSettings">
      <summary>表示连接字符串配置文件节中的单个命名连接字符串。</summary>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettings.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConnectionStringSettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettings.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Configuration.ConnectionStringSettings" /> 类的新实例。</summary>
      <param name="name">连接字符串的名称。</param>
      <param name="connectionString">连接字符串。</param>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettings.#ctor(System.String,System.String,System.String)">
      <summary>初始化 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象的新实例。</summary>
      <param name="name">连接字符串的名称。</param>
      <param name="connectionString">连接字符串。</param>
      <param name="providerName">与连接字符串一起使用的提供程序的名称。</param>
    </member>
    <member name="P:System.Configuration.ConnectionStringSettings.ConnectionString">
      <summary>获取或设置连接字符串。</summary>
      <returns>赋给 <see cref="P:System.Configuration.ConnectionStringSettings.ConnectionString" /> 属性的字符串值。</returns>
    </member>
    <member name="P:System.Configuration.ConnectionStringSettings.Name">
      <summary>获取或设置 <see cref="T:System.Configuration.ConnectionStringSettings" /> 名称。</summary>
      <returns>赋给 <see cref="P:System.Configuration.ConnectionStringSettings.Name" /> 属性的字符串值。</returns>
    </member>
    <member name="P:System.Configuration.ConnectionStringSettings.ProviderName">
      <summary>获取或设置提供程序名称属性。</summary>
      <returns>获取或设置 <see cref="P:System.Configuration.ConnectionStringSettings.ProviderName" /> 属性。</returns>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettings.ToString">
      <summary>返回对象的字符串表示形式。</summary>
      <returns>对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Configuration.ConnectionStringSettingsCollection">
      <summary>包含 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象的集合。</summary>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettingsCollection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConnectionStringSettingsCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettingsCollection.Add(System.Configuration.ConnectionStringSettings)">
      <summary>将 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象添加到集合中。</summary>
      <param name="settings">要添加到集合中的 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettingsCollection.Clear">
      <summary>从集合中移除所有 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象。</summary>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettingsCollection.IndexOf(System.Configuration.ConnectionStringSettings)">
      <summary>返回传递的 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象的集合索引。</summary>
      <returns>指定的 <see cref="T:System.Configuration.ConnectionStringSettingsCollection" /> 对象的集合索引。</returns>
      <param name="settings">集合中的 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象。</param>
    </member>
    <member name="P:System.Configuration.ConnectionStringSettingsCollection.Item(System.Int32)">
      <summary>获取或设置位于集合中指定索引处的连接字符串。</summary>
      <returns>位于指定索引处的 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象。</returns>
      <param name="index">集合中 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象的索引。</param>
    </member>
    <member name="P:System.Configuration.ConnectionStringSettingsCollection.Item(System.String)">
      <summary>获取或设置集合中具有指定名称的 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象。</summary>
      <returns>具有指定名称的 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象；否则为 null。</returns>
      <param name="name">集合中 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象的名称。</param>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettingsCollection.Remove(System.Configuration.ConnectionStringSettings)">
      <summary>从集合中移除指定的 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象。</summary>
      <param name="settings">集合中的 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettingsCollection.Remove(System.String)">
      <summary>从集合中移除指定的 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象。</summary>
      <param name="name">集合中 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象的名称。</param>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettingsCollection.RemoveAt(System.Int32)">
      <summary>移除集合中指定索引处的 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象。</summary>
      <param name="index">集合中 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象的索引。</param>
    </member>
    <member name="T:System.Configuration.ConnectionStringsSection">
      <summary>对连接字符串配置文件节进行编程访问。</summary>
    </member>
    <member name="M:System.Configuration.ConnectionStringsSection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConnectionStringsSection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Configuration.ConnectionStringsSection.ConnectionStrings">
      <summary>获取 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象的 <see cref="T:System.Configuration.ConnectionStringSettingsCollection" /> 集合。</summary>
      <returns>
        <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象的 <see cref="T:System.Configuration.ConnectionStringSettingsCollection" /> 集合。</returns>
    </member>
    <member name="T:System.Configuration.ContextInformation">
      <summary>封装与 <see cref="T:System.Configuration.ConfigurationElement" /> 对象关联的上下文信息。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Configuration.ContextInformation.GetSection(System.String)">
      <summary>提供一个包含基于指定节名称的配置节信息的对象。</summary>
      <returns>一个包含配置中的指定节的对象。</returns>
      <param name="sectionName">配置节的名称。</param>
    </member>
    <member name="P:System.Configuration.ContextInformation.HostingContext">
      <summary>获取正在计算配置属性的环境的上下文。</summary>
      <returns>一个对象，指定正在计算配置属性的环境。</returns>
    </member>
    <member name="P:System.Configuration.ContextInformation.IsMachineLevel">
      <summary>获取一个值，该值指定是否正在计算机配置级别计算配置属性。</summary>
      <returns>如果正在计算机配置级别计算配置属性，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Configuration.DefaultSection">
      <summary>表示公开配置节的 XML 以进行读写访问的基本配置节处理程序。</summary>
    </member>
    <member name="M:System.Configuration.DefaultSection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.DefaultSection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Configuration.DefaultValidator">
      <summary>提供对象验证。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Configuration.DefaultValidator.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.DefaultValidator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.DefaultValidator.CanValidate(System.Type)">
      <summary>根据类型确定是否可以验证对象。</summary>
      <returns>对所有验证的类型均为 true。</returns>
      <param name="type">对象类型。</param>
    </member>
    <member name="M:System.Configuration.DefaultValidator.Validate(System.Object)">
      <summary>确定对象的值是否有效。</summary>
      <param name="value">对象值。</param>
    </member>
    <member name="T:System.Configuration.DpapiProtectedConfigurationProvider">
      <summary>提供一个使用 Windows 数据保护 API (DPAPI) 来加密和解密配置数据的 <see cref="T:System.Configuration.ProtectedConfigurationProvider" />。</summary>
    </member>
    <member name="M:System.Configuration.DpapiProtectedConfigurationProvider.#ctor">
      <summary>使用默认设置初始化 <see cref="T:System.Configuration.DpapiProtectedConfigurationProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.DpapiProtectedConfigurationProvider.Decrypt(System.Xml.XmlNode)">
      <summary>对传递的 <see cref="T:System.Xml.XmlNode" /> 对象进行解密。</summary>
      <returns>已解密的 <see cref="T:System.Xml.XmlNode" /> 对象。</returns>
      <param name="encryptedNode">要解密的 <see cref="T:System.Xml.XmlNode" /> 对象。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="encryptedNode" /> 既未将 <see cref="P:System.Xml.XmlNode.Name" /> 设置为“EncryptedData”，也未将 <see cref="T:System.Xml.XmlNodeType" /> 设置为 <see cref="F:System.Xml.XmlNodeType.Element" />。 - 或 - <paramref name="encryptedNode" /> 没有带有名为“CipherValue”的子节点的“CipherData”子节点。 - 或 - 名为“CipherData”的子节点为空节点。</exception>
    </member>
    <member name="M:System.Configuration.DpapiProtectedConfigurationProvider.Encrypt(System.Xml.XmlNode)">
      <summary>对传递的 <see cref="T:System.Xml.XmlNode" /> 对象进行加密。</summary>
      <returns>已加密的 <see cref="T:System.Xml.XmlNode" /> 对象。</returns>
      <param name="node">要加密的 <see cref="T:System.Xml.XmlNode" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.DpapiProtectedConfigurationProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>使用默认设置初始化提供程序。</summary>
      <param name="name">要为对象使用的提供程序名称。</param>
      <param name="configurationValues">初始化对象时要使用的值的 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 集合。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="configurationValues" /> 包含无法识别的配置设置。</exception>
    </member>
    <member name="P:System.Configuration.DpapiProtectedConfigurationProvider.UseMachineProtection">
      <summary>获取一个值，该值用于指示 <see cref="T:System.Configuration.DpapiProtectedConfigurationProvider" /> 对象是在使用特定于计算机的保护，还是在使用特定于用户帐户的保护。</summary>
      <returns>如果 <see cref="T:System.Configuration.DpapiProtectedConfigurationProvider" /> 在使用特定于计算机的保护，则为 true，如果它在使用特定于用户帐户的保护，则为 false。</returns>
    </member>
    <member name="T:System.Configuration.ElementInformation">
      <summary>包含有关配置中的个别元素的元信息。 此类不能被继承。</summary>
    </member>
    <member name="P:System.Configuration.ElementInformation.Errors">
      <summary>获取关联的元素和子元素的错误</summary>
      <returns>包含关联的元素和子元素的错误的集合</returns>
    </member>
    <member name="P:System.Configuration.ElementInformation.IsCollection">
      <summary>获取一个值，该值指示关联的 <see cref="T:System.Configuration.ConfigurationElement" /> 对象是否是 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 集合。</summary>
      <returns>如果关联的 <see cref="T:System.Configuration.ConfigurationElement" /> 对象是 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 集合，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.ElementInformation.IsLocked">
      <summary>获取一个值，该值指示是否可以修改关联的 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>如果不能修改关联的 <see cref="T:System.Configuration.ConfigurationElement" /> 对象，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.ElementInformation.IsPresent">
      <summary>获取一个值，该值指示关联的 <see cref="T:System.Configuration.ConfigurationElement" /> 对象是否位于配置文件中。</summary>
      <returns>如果关联的 <see cref="T:System.Configuration.ConfigurationElement" /> 对象位于配置文件中，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.ElementInformation.LineNumber">
      <summary>获取配置文件中定义关联的 <see cref="T:System.Configuration.ConfigurationElement" /> 对象的行号。</summary>
      <returns>配置文件中定义关联的 <see cref="T:System.Configuration.ConfigurationElement" /> 对象的行号。</returns>
    </member>
    <member name="P:System.Configuration.ElementInformation.Properties">
      <summary>获取关联的 <see cref="T:System.Configuration.ConfigurationElement" /> 对象中的 <see cref="T:System.Configuration.PropertyInformationCollection" /> 属性集合。</summary>
      <returns>关联的 <see cref="T:System.Configuration.ConfigurationElement" /> 对象中的 <see cref="T:System.Configuration.PropertyInformationCollection" /> 属性集合。</returns>
    </member>
    <member name="P:System.Configuration.ElementInformation.Source">
      <summary>获取产生关联的 <see cref="T:System.Configuration.ConfigurationElement" /> 对象的源文件。</summary>
      <returns>产生关联的 <see cref="T:System.Configuration.ConfigurationElement" /> 对象的源文件。</returns>
    </member>
    <member name="P:System.Configuration.ElementInformation.Type">
      <summary>获取关联的 <see cref="T:System.Configuration.ConfigurationElement" /> 对象的类型。</summary>
      <returns>关联的 <see cref="T:System.Configuration.ConfigurationElement" /> 对象的类型。</returns>
    </member>
    <member name="P:System.Configuration.ElementInformation.Validator">
      <summary>获取用于验证关联的 <see cref="T:System.Configuration.ConfigurationElement" /> 对象的对象。</summary>
      <returns>用于验证关联的 <see cref="T:System.Configuration.ConfigurationElement" /> 对象的对象。</returns>
    </member>
    <member name="T:System.Configuration.ExeConfigurationFileMap">
      <summary>定义 .exe 应用程序的配置文件映射。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Configuration.ExeConfigurationFileMap.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ExeConfigurationFileMap" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ExeConfigurationFileMap.#ctor(System.String)">
      <summary>使用指定的计算机配置文件名初始化 <see cref="T:System.Configuration.ExeConfigurationFileMap" /> 类的新实例。</summary>
      <param name="machineConfigFileName">包括完整物理路径（例如，c:\Windows\Microsoft.NET\Framework\v2.0.50727\CONFIG\machine.config）的计算机配置文件的名称。</param>
    </member>
    <member name="M:System.Configuration.ExeConfigurationFileMap.Clone">
      <summary>创建现有 <see cref="T:System.Configuration.ExeConfigurationFileMap" /> 对象的副本。</summary>
      <returns>
        <see cref="T:System.Configuration.ExeConfigurationFileMap" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.ExeConfigurationFileMap.ExeConfigFilename">
      <summary>获取或设置配置文件的名称。</summary>
      <returns>配置文件名称。</returns>
    </member>
    <member name="P:System.Configuration.ExeConfigurationFileMap.LocalUserConfigFilename">
      <summary>获取或设置配置文件的名称（针对本地用户）。</summary>
      <returns>配置文件名称。</returns>
    </member>
    <member name="P:System.Configuration.ExeConfigurationFileMap.RoamingUserConfigFilename">
      <summary>获取或设置配置文件的名称（针对漫游用户）。</summary>
      <returns>配置文件名称。</returns>
    </member>
    <member name="T:System.Configuration.ExeContext">
      <summary>管理当前应用程序的路径上下文。 此类不能被继承。</summary>
    </member>
    <member name="P:System.Configuration.ExeContext.ExePath">
      <summary>获取应用程序的当前路径。</summary>
      <returns>包含当前路径的字符串值。</returns>
    </member>
    <member name="P:System.Configuration.ExeContext.UserLevel">
      <summary>获取一个对象，该对象表示当前应用程序的路径级别。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationUserLevel" /> 对象，表示当前应用程序的路径级别。</returns>
    </member>
    <member name="T:System.Configuration.GenericEnumConverter">
      <summary>在字符串和枚举类型之间进行转换。</summary>
    </member>
    <member name="M:System.Configuration.GenericEnumConverter.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Configuration.GenericEnumConverter" /> 类的新实例。</summary>
      <param name="typeEnum">要转换的枚举类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeEnum" /> 为 null。</exception>
    </member>
    <member name="M:System.Configuration.GenericEnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Enum" /> 类型。</summary>
      <returns>
        <see cref="T:System.Enum" /> 类型，表示 <paramref name="data" /> 参数。</returns>
      <param name="ctx">用于类型转换的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 对象。</param>
      <param name="ci">转换期间使用的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
      <param name="data">要转换的 <see cref="T:System.String" /> 对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="data" /> 为空或空字符串 ("")。 - 或 - <paramref name="data" /> 以数值型字符开头。 - 或 - <paramref name="data" /> 包含空白。</exception>
    </member>
    <member name="M:System.Configuration.GenericEnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将 <see cref="T:System.Enum" /> 类型转换为 <see cref="T:System.String" /> 值。</summary>
      <returns>表示 <paramref name="value" /> 参数的 <see cref="T:System.String" />。</returns>
      <param name="ctx">用于类型转换的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 对象。</param>
      <param name="ci">转换期间使用的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
      <param name="value">要转换成的值。</param>
      <param name="type">要转换到的类型。</param>
    </member>
    <member name="T:System.Configuration.IgnoreSection">
      <summary>为不是由 <see cref="N:System.Configuration" /> 类型处理的配置节提供包装类型定义。</summary>
    </member>
    <member name="M:System.Configuration.IgnoreSection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.IgnoreSection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Configuration.InfiniteIntConverter">
      <summary>在字符串和标准无限或整数值之间转换。</summary>
    </member>
    <member name="M:System.Configuration.InfiniteIntConverter.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.InfiniteIntConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.InfiniteIntConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Int32" />。</summary>
      <returns>如果 <paramref name="data" /> 参数为 <see cref="T:System.String" />“infinite”，则为 <see cref="F:System.Int32.MaxValue" />；否则，<see cref="T:System.Int32" /> 表示 <paramref name="data" /> 参数整数值。</returns>
      <param name="ctx">用于类型转换的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 对象。</param>
      <param name="ci">转换期间使用的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
      <param name="data">要转换的 <see cref="T:System.String" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.InfiniteIntConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将 <see cref="T:System.Int32" /> 转换为 <see cref="T:System.String" />。</summary>
      <returns>如果 <paramref name="value" /> 为 <see cref="F:System.Int32.MaxValue" />，则为 <see cref="T:System.String" />“infinite”；否则，<see cref="T:System.String" /> 表示 <paramref name="value" /> 参数。</returns>
      <param name="ctx">用于类型转换的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 对象。</param>
      <param name="ci">转换期间使用的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
      <param name="value">要转换成的值。</param>
      <param name="type">要转换到的类型。</param>
    </member>
    <member name="T:System.Configuration.InfiniteTimeSpanConverter">
      <summary>在字符串和标准无限 <see cref="T:System.TimeSpan" /> 值之间转换。</summary>
    </member>
    <member name="M:System.Configuration.InfiniteTimeSpanConverter.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.InfiniteTimeSpanConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.InfiniteTimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.TimeSpan" />。</summary>
      <returns>如果 <paramref name="data" /> 参数是 <see cref="T:System.String" /> infinite，则为 <see cref="F:System.TimeSpan.MaxValue" />，否则为以分钟表示 <paramref name="data" /> 参数的 <see cref="T:System.TimeSpan" />。</returns>
      <param name="ctx">用于类型转换的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 对象。</param>
      <param name="ci">转换期间使用的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
      <param name="data">要转换的 <see cref="T:System.String" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.InfiniteTimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将 <see cref="T:System.TimeSpan" /> 转换为 <see cref="T:System.String" />。</summary>
      <returns>如果 <paramref name="value" /> 参数是 <see cref="F:System.TimeSpan.MaxValue" />，则为 <see cref="T:System.String" />“infinite”；否则为以分钟表示 <paramref name="value" /> 参数的 <see cref="T:System.String" />。</returns>
      <param name="ctx">用于类型转换的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 对象。</param>
      <param name="ci">对象转换期间使用的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的值。</param>
      <param name="type">转换类型。</param>
    </member>
    <member name="T:System.Configuration.IntegerValidator">
      <summary>对 <see cref="T:System.Int32" /> 值进行验证。</summary>
    </member>
    <member name="M:System.Configuration.IntegerValidator.#ctor(System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Configuration.IntegerValidator" /> 类的新实例。</summary>
      <param name="minValue">指定最小值的 <see cref="T:System.Int32" /> 对象。</param>
      <param name="maxValue">指定最大值的 <see cref="T:System.Int32" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.IntegerValidator.#ctor(System.Int32,System.Int32,System.Boolean)">
      <summary>初始化 <see cref="T:System.Configuration.IntegerValidator" /> 类的新实例。</summary>
      <param name="minValue">指定最小值的 <see cref="T:System.Int32" /> 对象。</param>
      <param name="maxValue">指定最大值的 <see cref="T:System.Int32" /> 对象。</param>
      <param name="rangeIsExclusive">若指定验证范围是独占的，则为 true。 非独占意味着要验证的值必须在指定范围内；独占意味着要验证的值必须小于最小值或大于最大值。</param>
    </member>
    <member name="M:System.Configuration.IntegerValidator.#ctor(System.Int32,System.Int32,System.Boolean,System.Int32)">
      <summary>初始化 <see cref="T:System.Configuration.IntegerValidator" /> 类的新实例。</summary>
      <param name="minValue">一个 <see cref="T:System.Int32" /> 对象，指定整数值的最小长度。</param>
      <param name="maxValue">一个 <see cref="T:System.Int32" /> 对象，指定整数值的最大长度。</param>
      <param name="rangeIsExclusive">一个 <see cref="T:System.Boolean" /> 值，指定验证范围是否独占。</param>
      <param name="resolution">一个 <see cref="T:System.Int32" /> 对象，指定必须匹配的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="resolution" /> 小于 0。 - 或 - <paramref name="minValue" /> 大于 <paramref name="maxValue" />。</exception>
    </member>
    <member name="M:System.Configuration.IntegerValidator.CanValidate(System.Type)">
      <summary>确定是否可以验证该对象的类型。</summary>
      <returns>如果 <paramref name="type" /> 参数与 <see cref="T:System.Int32" /> 值相匹配，则为 true；否则为 false。</returns>
      <param name="type">对象的类型。</param>
    </member>
    <member name="M:System.Configuration.IntegerValidator.Validate(System.Object)">
      <summary>确定对象的值是否有效。</summary>
      <param name="value">要验证的值。</param>
    </member>
    <member name="T:System.Configuration.IntegerValidatorAttribute">
      <summary>以声明的方式指示 .NET Framework 对配置属性执行整数验证。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Configuration.IntegerValidatorAttribute.#ctor">
      <summary>创建 <see cref="T:System.Configuration.IntegerValidatorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Configuration.IntegerValidatorAttribute.ExcludeRange">
      <summary>获取或设置一个值，指示在 <see cref="P:System.Configuration.IntegerValidatorAttribute.MinValue" /> 和 <see cref="P:System.Configuration.IntegerValidatorAttribute.MaxValue" /> 属性值定义的范围内是包含还是排除整数。</summary>
      <returns>如果必须排除值，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Configuration.IntegerValidatorAttribute.MaxValue">
      <summary>获取或设置属性允许的最大值。</summary>
      <returns>一个整数，指示允许的最大值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">选定值小于 <see cref="P:System.Configuration.IntegerValidatorAttribute.MinValue" />。</exception>
    </member>
    <member name="P:System.Configuration.IntegerValidatorAttribute.MinValue">
      <summary>获取或设置属性允许的最小值。</summary>
      <returns>一个整数，指示允许的最小值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">选定值大于 <see cref="P:System.Configuration.IntegerValidatorAttribute.MaxValue" />。</exception>
    </member>
    <member name="P:System.Configuration.IntegerValidatorAttribute.ValidatorInstance">
      <summary>获取 <see cref="T:System.Configuration.IntegerValidator" /> 类的实例。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 验证程序实例。</returns>
    </member>
    <member name="T:System.Configuration.KeyValueConfigurationCollection">
      <summary>包含 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 对象的集合。</summary>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationCollection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.KeyValueConfigurationCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationCollection.Add(System.Configuration.KeyValueConfigurationElement)">
      <summary>根据提供的参数向集合中添加一个 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 对象。</summary>
      <param name="keyValue">
        <see cref="T:System.Configuration.KeyValueConfigurationElement" />。</param>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationCollection.Add(System.String,System.String)">
      <summary>根据提供的参数向集合中添加一个 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 对象。</summary>
      <param name="key">指定 key 的字符串。</param>
      <param name="value">指定值的字符串。</param>
    </member>
    <member name="P:System.Configuration.KeyValueConfigurationCollection.AllKeys">
      <summary>获取 <see cref="T:System.Configuration.KeyValueConfigurationCollection" /> 集合中包含的所有项的键。</summary>
      <returns>字符串数组。</returns>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationCollection.Clear">
      <summary>清除 <see cref="T:System.Configuration.KeyValueConfigurationCollection" /> 集合。</summary>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationCollection.CreateNewElement">
      <summary>当在派生类中重写时，<see cref="M:System.Configuration.KeyValueConfigurationCollection.CreateNewElement" /> 方法会创建一个新的 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 对象。</summary>
      <returns>新创建的 <see cref="T:System.Configuration.KeyValueConfigurationElement" />。</returns>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationCollection.GetElementKey(System.Configuration.ConfigurationElement)">
      <summary>在派生类中重写时获取指定配置元素的元素键。</summary>
      <returns>一个对象，用作指定的 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 的键。</returns>
      <param name="element">键应返回到的 <see cref="T:System.Configuration.KeyValueConfigurationElement" />。</param>
    </member>
    <member name="P:System.Configuration.KeyValueConfigurationCollection.Item(System.String)">
      <summary>根据提供的参数获取 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 对象。</summary>
      <returns>配置元素；如果集合中不存在该键，则为 null。</returns>
      <param name="key">集合中包含的 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 的键。</param>
    </member>
    <member name="P:System.Configuration.KeyValueConfigurationCollection.Properties">
      <summary>获取配置属性的集合。</summary>
      <returns>配置属性的集合。</returns>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationCollection.Remove(System.String)">
      <summary>从集合中移除 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 对象。</summary>
      <param name="key">指定 <paramref name="key" /> 的字符串。</param>
    </member>
    <member name="P:System.Configuration.KeyValueConfigurationCollection.ThrowOnDuplicate">
      <summary>获取一个值，该值指示尝试向 <see cref="T:System.Configuration.KeyValueConfigurationCollection" /> 集合中添加重复的 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 对象是否会导致引发异常。</summary>
      <returns>如果尝试向 <see cref="T:System.Configuration.KeyValueConfigurationCollection" /> 中添加重复的 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 会导致引发异常，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Configuration.KeyValueConfigurationElement">
      <summary>表示包含键/值对的配置元素。</summary>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationElement.#ctor(System.String,System.String)">
      <summary>基于提供的参数初始化 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 类的新实例。</summary>
      <param name="key">
        <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 的键。</param>
      <param name="value">
        <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 的值。</param>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationElement.Init">
      <summary>将 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 对象设置为其初始状态。</summary>
    </member>
    <member name="P:System.Configuration.KeyValueConfigurationElement.Key">
      <summary>获取 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 对象的键。</summary>
      <returns>
        <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 的键。</returns>
    </member>
    <member name="P:System.Configuration.KeyValueConfigurationElement.Properties">
      <summary>获取属性的集合。</summary>
      <returns>元素属性的 <see cref="T:System.Configuration.ConfigurationPropertyCollection" />。</returns>
    </member>
    <member name="P:System.Configuration.KeyValueConfigurationElement.Value">
      <summary>获取或设置 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 对象的值。</summary>
      <returns>
        <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 的值。</returns>
    </member>
    <member name="T:System.Configuration.LongValidator">
      <summary>对 <see cref="T:System.Int64" /> 值进行验证。</summary>
    </member>
    <member name="M:System.Configuration.LongValidator.#ctor(System.Int64,System.Int64)">
      <summary>初始化 <see cref="T:System.Configuration.LongValidator" /> 类的新实例。</summary>
      <param name="minValue">一个 <see cref="T:System.Int64" /> 值，指定 long 值的最小长度。</param>
      <param name="maxValue">一个 <see cref="T:System.Int64" /> 值，指定 long 值的最大长度。</param>
    </member>
    <member name="M:System.Configuration.LongValidator.#ctor(System.Int64,System.Int64,System.Boolean)">
      <summary>初始化 <see cref="T:System.Configuration.LongValidator" /> 类的新实例。</summary>
      <param name="minValue">一个 <see cref="T:System.Int64" /> 值，指定 long 值的最小长度。</param>
      <param name="maxValue">一个 <see cref="T:System.Int64" /> 值，指定 long 值的最大长度。</param>
      <param name="rangeIsExclusive">一个 <see cref="T:System.Boolean" /> 值，指定验证范围是否独占。</param>
    </member>
    <member name="M:System.Configuration.LongValidator.#ctor(System.Int64,System.Int64,System.Boolean,System.Int64)">
      <summary>初始化 <see cref="T:System.Configuration.LongValidator" /> 类的新实例。</summary>
      <param name="minValue">一个 <see cref="T:System.Int64" /> 值，指定 long 值的最小长度。</param>
      <param name="maxValue">一个 <see cref="T:System.Int64" /> 值，指定 long 值的最大长度。</param>
      <param name="rangeIsExclusive">一个 <see cref="T:System.Boolean" /> 值，指定验证范围是否独占。</param>
      <param name="resolution">一个 <see cref="T:System.Int64" /> 值，指定必须匹配的特定值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="resolution" /> 等于或小于 0。 - 或 - <paramref name="maxValue" /> 小于 <paramref name="minValue" />。</exception>
    </member>
    <member name="M:System.Configuration.LongValidator.CanValidate(System.Type)">
      <summary>确定是否可以验证该对象的类型。</summary>
      <returns>如果 <paramref name="type" /> 参数与 <see cref="T:System.Int64" /> 值相匹配，则为 true；否则为 false。</returns>
      <param name="type">对象的类型。</param>
    </member>
    <member name="M:System.Configuration.LongValidator.Validate(System.Object)">
      <summary>确定对象的值是否有效。</summary>
      <param name="value">对象的值。</param>
    </member>
    <member name="T:System.Configuration.LongValidatorAttribute">
      <summary>以声明的方式指示 .NET Framework 对配置属性执行长整型验证。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Configuration.LongValidatorAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.LongValidatorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Configuration.LongValidatorAttribute.ExcludeRange">
      <summary>获取或设置一个值，指示在 <see cref="P:System.Configuration.LongValidatorAttribute.MinValue" /> 和 <see cref="P:System.Configuration.LongValidatorAttribute.MaxValue" /> 属性值定义的范围内是包含还是排除整数。</summary>
      <returns>如果必须排除值，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Configuration.LongValidatorAttribute.MaxValue">
      <summary>获取或设置属性允许的最大值。</summary>
      <returns>一个长整型数，指示允许的最大值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">选定值小于 <see cref="P:System.Configuration.LongValidatorAttribute.MinValue" />。</exception>
    </member>
    <member name="P:System.Configuration.LongValidatorAttribute.MinValue">
      <summary>获取或设置属性允许的最小值。</summary>
      <returns>一个整数，指示允许的最小值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">选定值大于 <see cref="P:System.Configuration.LongValidatorAttribute.MaxValue" />。</exception>
    </member>
    <member name="P:System.Configuration.LongValidatorAttribute.ValidatorInstance">
      <summary>获取 <see cref="T:System.Configuration.LongValidator" /> 类的实例。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 验证程序实例。</returns>
    </member>
    <member name="T:System.Configuration.NameValueConfigurationCollection">
      <summary>包含 <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Configuration.NameValueConfigurationCollection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.NameValueConfigurationCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.NameValueConfigurationCollection.Add(System.Configuration.NameValueConfigurationElement)">
      <summary>将 <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象添加到集合中。</summary>
      <param name="nameValue">一个 <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象。</param>
    </member>
    <member name="P:System.Configuration.NameValueConfigurationCollection.AllKeys">
      <summary>获取 <see cref="T:System.Configuration.NameValueConfigurationCollection" /> 中包含的所有项的键。</summary>
      <returns>字符串数组。</returns>
    </member>
    <member name="M:System.Configuration.NameValueConfigurationCollection.Clear">
      <summary>清除 <see cref="T:System.Configuration.NameValueConfigurationCollection" />。</summary>
    </member>
    <member name="P:System.Configuration.NameValueConfigurationCollection.Item(System.String)">
      <summary>基于所提供的参数，获取或设置 <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象。</summary>
      <returns>
        <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象。</returns>
      <param name="name">集合中包含的 <see cref="T:System.Configuration.NameValueConfigurationElement" /> 的名称。</param>
    </member>
    <member name="M:System.Configuration.NameValueConfigurationCollection.Remove(System.Configuration.NameValueConfigurationElement)">
      <summary>基于所提供的参数，从集合中移除 <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象。</summary>
      <param name="nameValue">
        <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.NameValueConfigurationCollection.Remove(System.String)">
      <summary>基于所提供的参数，从集合中移除 <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象。</summary>
      <param name="name">
        <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象的名称。</param>
    </member>
    <member name="T:System.Configuration.NameValueConfigurationElement">
      <summary>包含 <see cref="T:System.String" /> 名称和 <see cref="T:System.String" /> 值的配置元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Configuration.NameValueConfigurationElement.#ctor(System.String,System.String)">
      <summary>使用所提供的参数初始化 <see cref="T:System.Configuration.NameValueConfigurationElement" /> 类的新实例。</summary>
      <param name="name">
        <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象的名称。</param>
      <param name="value">
        <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象的值。</param>
    </member>
    <member name="P:System.Configuration.NameValueConfigurationElement.Name">
      <summary>获取 <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象的名称。</summary>
      <returns>
        <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象的名称。</returns>
    </member>
    <member name="P:System.Configuration.NameValueConfigurationElement.Value">
      <summary>获取或设置 <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象的值。</summary>
      <returns>
        <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象的值。</returns>
    </member>
    <member name="T:System.Configuration.OverrideMode">
      <summary>为子目录中的配置元素指定配置元素重写行为。</summary>
    </member>
    <member name="F:System.Configuration.OverrideMode.Allow">
      <summary>元素或组的配置设置可由子目录中的配置设置重写。</summary>
    </member>
    <member name="F:System.Configuration.OverrideMode.Deny">
      <summary>元素或组的配置设置不能由子目录中的配置设置重写。</summary>
    </member>
    <member name="F:System.Configuration.OverrideMode.Inherit">
      <summary>如果得到当前配置元素或组的父元素的显式允许，则元素或组的配置设置将由子目录中的配置设置重写。 可通过使用 OverrideMode 特性来指定重写权限。</summary>
    </member>
    <member name="T:System.Configuration.PositiveTimeSpanValidator">
      <summary>对 <see cref="T:System.TimeSpan" /> 对象进行验证。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Configuration.PositiveTimeSpanValidator.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.PositiveTimeSpanValidator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.PositiveTimeSpanValidator.CanValidate(System.Type)">
      <summary>确定是否可验证该对象类型。</summary>
      <returns>如果 <paramref name="type" /> 参数与 <see cref="T:System.TimeSpan" /> 对象匹配，则为 true；否则为 false。</returns>
      <param name="type">对象类型。</param>
    </member>
    <member name="M:System.Configuration.PositiveTimeSpanValidator.Validate(System.Object)">
      <summary>确定对象的值是否有效。</summary>
      <param name="value">对象的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">无法将 <paramref name="value" /> 解析为正 <see cref="T:System.TimeSpan" /> 值。</exception>
    </member>
    <member name="T:System.Configuration.PositiveTimeSpanValidatorAttribute">
      <summary>以声明的方式指示 .NET Framework 对配置属性执行时间验证。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Configuration.PositiveTimeSpanValidatorAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.PositiveTimeSpanValidatorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Configuration.PositiveTimeSpanValidatorAttribute.ValidatorInstance">
      <summary>获取 <see cref="T:System.Configuration.PositiveTimeSpanValidator" /> 类的实例。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 验证程序实例。</returns>
    </member>
    <member name="T:System.Configuration.PropertyInformation">
      <summary>包含配置中的个别属性的元数据信息。 无法继承此类型。</summary>
    </member>
    <member name="P:System.Configuration.PropertyInformation.Converter">
      <summary>获取与配置特性相关的 <see cref="T:System.ComponentModel.TypeConverter" /> 对象。</summary>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.DefaultValue">
      <summary>获取一个对象，该对象包含与配置特性相关的默认值。</summary>
      <returns>一个对象，包含配置特性的默认值。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.Description">
      <summary>获取与配置特性相对应的对象的说明。</summary>
      <returns>配置特性的说明。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.IsKey">
      <summary>获取指定配置特性是否为键的值。</summary>
      <returns>如果配置特性为键，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.IsLocked">
      <summary>获取指定配置特性是否锁定的值。</summary>
      <returns>如果 <see cref="T:System.Configuration.PropertyInformation" /> 对象是锁定的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.IsModified">
      <summary>获取指定配置特性是否已修改的值。</summary>
      <returns>如果 <see cref="T:System.Configuration.PropertyInformation" /> 对象已修改，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.IsRequired">
      <summary>获取指定是否需要配置特性的值。</summary>
      <returns>如果 <see cref="T:System.Configuration.PropertyInformation" /> 对象是必需的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.LineNumber">
      <summary>获取与配置特性相关的配置文件中的行号。</summary>
      <returns>配置文件的行号。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.Name">
      <summary>获取与配置特性相对应的对象的名称。</summary>
      <returns>
        <see cref="T:System.Configuration.PropertyInformation" /> 对象的名称。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.Source">
      <summary>获取与配置特性相对应的源文件。</summary>
      <returns>
        <see cref="T:System.Configuration.PropertyInformation" /> 对象的源文件。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.Type">
      <summary>获取与配置特性相对应的对象的 <see cref="T:System.Type" />。</summary>
      <returns>
        <see cref="T:System.Configuration.PropertyInformation" /> 对象的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.Validator">
      <summary>获取与配置特性相关的 <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 对象。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.Value">
      <summary>获取或设置包含与配置特性相关的值的对象。</summary>
      <returns>包含 <see cref="T:System.Configuration.PropertyInformation" /> 对象的值的对象。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.ValueOrigin">
      <summary>获取与配置特性相关的 <see cref="T:System.Configuration.PropertyValueOrigin" /> 对象。</summary>
      <returns>
        <see cref="T:System.Configuration.PropertyValueOrigin" /> 对象。</returns>
    </member>
    <member name="T:System.Configuration.PropertyInformationCollection">
      <summary>包含 <see cref="T:System.Configuration.PropertyInformation" /> 对象的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Configuration.PropertyInformationCollection.CopyTo(System.Configuration.PropertyInformation[],System.Int32)">
      <summary>从目标数组的指定索引处开始，将整个 <see cref="T:System.Configuration.PropertyInformationCollection" /> 集合复制到兼容的一维 <see cref="T:System.Array" />。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，是从 <see cref="T:System.Configuration.PropertyInformationCollection" /> 集合复制的元素的目标。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="array" /> 的 <see cref="P:System.Array.Length" /> 属性小于 <see cref="P:System.Collections.Specialized.NameObjectCollectionBase.Count" /> + <paramref name="index" />。</exception>
    </member>
    <member name="M:System.Configuration.PropertyInformationCollection.GetEnumerator">
      <summary>获取 <see cref="T:System.Collections.IEnumerator" /> 对象，此对象用于循环访问此 <see cref="T:System.Configuration.PropertyInformationCollection" /> 集合。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 对象，用于循环访问此 <see cref="T:System.Configuration.PropertyInformationCollection" />。</returns>
    </member>
    <member name="M:System.Configuration.PropertyInformationCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化 <see cref="T:System.Configuration.PropertyInformationCollection" /> 实例所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，该对象包含序列化 <see cref="T:System.Configuration.PropertyInformationCollection" /> 实例所需的信息。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，该对象包含与 <see cref="T:System.Configuration.PropertyInformationCollection" /> 实例关联的序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="P:System.Configuration.PropertyInformationCollection.Item(System.String)">
      <summary>根据指定的属性名，获取集合中的 <see cref="T:System.Configuration.PropertyInformation" /> 对象。</summary>
      <returns>
        <see cref="T:System.Configuration.PropertyInformation" /> 对象。</returns>
      <param name="propertyName">在 <see cref="T:System.Configuration.PropertyInformationCollection" /> 对象中包含的配置特性的名称 对象。</param>
    </member>
    <member name="T:System.Configuration.PropertyValueOrigin">
      <summary>指定配置层次结构中的级别，在此级别上产生配置属性值。</summary>
    </member>
    <member name="F:System.Configuration.PropertyValueOrigin.Default">
      <summary>配置属性值来源于 <see cref="P:System.Configuration.ConfigurationProperty.DefaultValue" /> 属性。</summary>
    </member>
    <member name="F:System.Configuration.PropertyValueOrigin.Inherited">
      <summary>从配置中的父级继承配置属性值。</summary>
    </member>
    <member name="F:System.Configuration.PropertyValueOrigin.SetHere">
      <summary>在层次结构的当前级别上定义配置属性值。</summary>
    </member>
    <member name="T:System.Configuration.ProtectedConfiguration">
      <summary>为当前应用程序的配置文件提供对受保护配置提供程序的访问。</summary>
    </member>
    <member name="F:System.Configuration.ProtectedConfiguration.DataProtectionProviderName">
      <summary>数据保护提供程序的名称。</summary>
    </member>
    <member name="P:System.Configuration.ProtectedConfiguration.DefaultProvider">
      <summary>获取默认受保护配置提供程序的名称。</summary>
      <returns>默认受保护配置提供程序的名称。</returns>
    </member>
    <member name="F:System.Configuration.ProtectedConfiguration.ProtectedDataSectionName">
      <summary>受保护的数据节的名称。</summary>
    </member>
    <member name="P:System.Configuration.ProtectedConfiguration.Providers">
      <summary>获取安装的受保护配置提供程序的集合。</summary>
      <returns>安装的 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象的 <see cref="T:System.Configuration.ProtectedConfigurationProviderCollection" /> 集合。</returns>
    </member>
    <member name="F:System.Configuration.ProtectedConfiguration.RsaProviderName">
      <summary>RSA 提供程序的名称。</summary>
    </member>
    <member name="T:System.Configuration.ProtectedConfigurationProvider">
      <summary>为加密和解密受保护的配置数据而创建提供程序的基类。</summary>
    </member>
    <member name="M:System.Configuration.ProtectedConfigurationProvider.#ctor">
      <summary>使用默认设置初始化 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ProtectedConfigurationProvider.Decrypt(System.Xml.XmlNode)">
      <summary>解密从配置文件传递的 <see cref="T:System.Xml.XmlNode" /> 对象。</summary>
      <returns>包含已解密数据的 <see cref="T:System.Xml.XmlNode" /> 对象。</returns>
      <param name="encryptedNode">要解密的 <see cref="T:System.Xml.XmlNode" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.ProtectedConfigurationProvider.Encrypt(System.Xml.XmlNode)">
      <summary>加密从配置文件传递的 <see cref="T:System.Xml.XmlNode" /> 对象。</summary>
      <returns>包含已加密数据的 <see cref="T:System.Xml.XmlNode" /> 对象。</returns>
      <param name="node">要加密的 <see cref="T:System.Xml.XmlNode" /> 对象。</param>
    </member>
    <member name="T:System.Configuration.ProtectedConfigurationProviderCollection">
      <summary>提供 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象的集合。</summary>
    </member>
    <member name="M:System.Configuration.ProtectedConfigurationProviderCollection.#ctor">
      <summary>使用默认设置初始化 <see cref="T:System.Configuration.ProtectedConfigurationProviderCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ProtectedConfigurationProviderCollection.Add(System.Configuration.Provider.ProviderBase)">
      <summary>将 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象添加到集合中。</summary>
      <param name="provider">要添加到集合中的 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="provider" /> 不是 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象。</exception>
      <exception cref="T:System.Configuration.ConfigurationException">此集合中已存在要添加的 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象。 - 或 - 该集合为只读。</exception>
    </member>
    <member name="P:System.Configuration.ProtectedConfigurationProviderCollection.Item(System.String)">
      <summary>获取集合中具有指定名称的 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象。</summary>
      <returns>具有指定名称的 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象，如果不存在具有该名称的对象，则为 null。</returns>
      <param name="name">集合中 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象的名称。</param>
    </member>
    <member name="T:System.Configuration.ProtectedConfigurationSection">
      <summary>提供对 configProtectedData 配置节的编程访问。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Configuration.ProtectedConfigurationSection.#ctor">
      <summary>使用默认设置初始化 <see cref="T:System.Configuration.ProtectedConfigurationSection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Configuration.ProtectedConfigurationSection.DefaultProvider">
      <summary>获取或设置 <see cref="P:System.Configuration.ProtectedConfigurationSection.Providers" /> 集合属性中默认的 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象的名称。</summary>
      <returns>
        <see cref="P:System.Configuration.ProtectedConfigurationSection.Providers" /> 集合属性中默认的 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象的名称。</returns>
    </member>
    <member name="P:System.Configuration.ProtectedConfigurationSection.Providers">
      <summary>获取所有参与的配置文件中所有 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象的 <see cref="T:System.Configuration.ProviderSettingsCollection" /> 集合。</summary>
      <returns>所有参与的配置文件中所有 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象的 <see cref="T:System.Configuration.ProviderSettingsCollection" /> 集合。</returns>
    </member>
    <member name="T:System.Configuration.ProtectedProviderSettings">
      <summary>表示一组为 &lt;configProtectedData&gt; 配置节配置提供程序的配置元素。</summary>
    </member>
    <member name="M:System.Configuration.ProtectedProviderSettings.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ProtectedProviderSettings" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Configuration.ProtectedProviderSettings.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 集合，该集合表示受保护配置数据的提供程序的属性。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationPropertyCollection" />，表示受保护配置数据的提供程序的属性。</returns>
    </member>
    <member name="P:System.Configuration.ProtectedProviderSettings.Providers">
      <summary>获取 <see cref="T:System.Configuration.ProviderSettings" /> 对象的集合，这些对象表示受保护配置数据的提供程序的属性。</summary>
      <returns>
        <see cref="T:System.Configuration.ProviderSettings" /> 对象的集合，这些对象表示受保护配置数据的提供程序的属性。</returns>
    </member>
    <member name="T:System.Configuration.ProviderSettings">
      <summary>表示与提供程序关联的配置元素。</summary>
    </member>
    <member name="M:System.Configuration.ProviderSettings.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ProviderSettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ProviderSettings.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Configuration.ProviderSettings" /> 类的新实例。</summary>
      <param name="name">要为其配置设置的提供程序的名称。</param>
      <param name="type">要为其配置设置的提供程序的类型。</param>
    </member>
    <member name="P:System.Configuration.ProviderSettings.Name">
      <summary>获取或设置由此类配置的提供程序的名称。</summary>
      <returns>提供程序的名称。</returns>
    </member>
    <member name="P:System.Configuration.ProviderSettings.Parameters">
      <summary>获取提供程序的用户定义参数的集合。</summary>
      <returns>提供程序的参数的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</returns>
    </member>
    <member name="P:System.Configuration.ProviderSettings.Type">
      <summary>获取或设置由此类配置的提供程序的类型。</summary>
      <returns>由此 <see cref="T:System.Configuration.ProviderSettings" /> 实例配置的提供程序类型的完全限定命名空间和类名。</returns>
    </member>
    <member name="T:System.Configuration.ProviderSettingsCollection">
      <summary>表示 <see cref="T:System.Configuration.ProviderSettings" /> 对象的集合。</summary>
    </member>
    <member name="M:System.Configuration.ProviderSettingsCollection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ProviderSettingsCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ProviderSettingsCollection.Add(System.Configuration.ProviderSettings)">
      <summary>将 <see cref="T:System.Configuration.ProviderSettings" /> 对象添加到集合中。</summary>
      <param name="provider">要添加的 <see cref="T:System.Configuration.ProviderSettings" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.ProviderSettingsCollection.Clear">
      <summary>清除集合。</summary>
    </member>
    <member name="P:System.Configuration.ProviderSettingsCollection.Item(System.Int32)">
      <summary>获取或设置 <see cref="T:System.Configuration.ProviderSettingsCollection" /> 集合中指定索引处的值。</summary>
      <returns>指定的 <see cref="T:System.Configuration.ProviderSettings" />。</returns>
      <param name="index">要返回的 <see cref="T:System.Configuration.ProviderSettings" /> 的索引。</param>
    </member>
    <member name="P:System.Configuration.ProviderSettingsCollection.Item(System.String)">
      <summary>获取集合中的项。</summary>
      <returns>集合中包含的 <see cref="T:System.Configuration.ProviderSettings" /> 对象。</returns>
      <param name="key">对集合中的 <see cref="T:System.Configuration.ProviderSettings" /> 对象的字符串引用。</param>
    </member>
    <member name="M:System.Configuration.ProviderSettingsCollection.Remove(System.String)">
      <summary>移除集合中的一个元素。</summary>
      <param name="name">要移除的 <see cref="T:System.Configuration.ProviderSettings" /> 对象的名称。</param>
    </member>
    <member name="T:System.Configuration.RegexStringValidator">
      <summary>根据正则表达式提供的规则提供字符串验证。</summary>
    </member>
    <member name="M:System.Configuration.RegexStringValidator.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Configuration.RegexStringValidator" /> 类的新实例。</summary>
      <param name="regex">指定正则表达式的字符串。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="regex" /> 为 null 或空字符串 ("")。</exception>
    </member>
    <member name="M:System.Configuration.RegexStringValidator.CanValidate(System.Type)">
      <summary>确定是否可以验证该对象的类型。</summary>
      <returns>如果 <paramref name="type" /> 参数与字符串匹配，则为 true；否则为 false。</returns>
      <param name="type">对象的类型。</param>
    </member>
    <member name="M:System.Configuration.RegexStringValidator.Validate(System.Object)">
      <summary>确定对象的值是否有效。</summary>
      <param name="value">对象的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不符合 <see cref="T:System.Text.RegularExpressions.Regex" /> 类的参数的要求。</exception>
    </member>
    <member name="T:System.Configuration.RegexStringValidatorAttribute">
      <summary>以声明方式指示 .NET Framework 使用正则表达式在配置属性中执行字符串验证。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Configuration.RegexStringValidatorAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Configuration.RegexStringValidatorAttribute" /> 对象的新实例。</summary>
      <param name="regex">用于正则表达式验证的字符串。</param>
    </member>
    <member name="P:System.Configuration.RegexStringValidatorAttribute.Regex">
      <summary>获取用于执行正则表达式验证的字符串。</summary>
      <returns>包含正则表达式的字符串，其中的正则表达式用于筛选分配给经过修饰的配置元素属性的字符串。</returns>
    </member>
    <member name="P:System.Configuration.RegexStringValidatorAttribute.ValidatorInstance">
      <summary>获取 <see cref="T:System.Configuration.RegexStringValidator" /> 类的实例。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 验证程序实例。</returns>
    </member>
    <member name="T:System.Configuration.RsaProtectedConfigurationProvider">
      <summary>提供使用 RSA 加密对配置数据进行加密和解密的 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 实例。</summary>
    </member>
    <member name="M:System.Configuration.RsaProtectedConfigurationProvider.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.RsaProtectedConfigurationProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.RsaProtectedConfigurationProvider.AddKey(System.Int32,System.Boolean)">
      <summary>将密钥添加到 RSA 密钥容器中。</summary>
      <param name="keySize">要添加的密钥的大小。</param>
      <param name="exportable">若指示密钥可以导出，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.Configuration.RsaProtectedConfigurationProvider.CspProviderName">
      <summary>获取 Windows 加密 API（加密 API）加密服务提供程序 (CSP) 的名称。</summary>
      <returns>CryptoAPI 加密服务提供程序的名称。</returns>
    </member>
    <member name="M:System.Configuration.RsaProtectedConfigurationProvider.Decrypt(System.Xml.XmlNode)">
      <summary>解密传递给它的 XML 节点。</summary>
      <returns>包含已解密数据的 <see cref="T:System.Xml.XmlNode" /> 对象。</returns>
      <param name="encryptedNode">要进行解密的 <see cref="T:System.Xml.XmlNode" />。</param>
    </member>
    <member name="M:System.Configuration.RsaProtectedConfigurationProvider.DeleteKey">
      <summary>从 RSA 密钥容器中移除密钥。</summary>
    </member>
    <member name="M:System.Configuration.RsaProtectedConfigurationProvider.Encrypt(System.Xml.XmlNode)">
      <summary>加密传递给它的 XML 节点。</summary>
      <returns>已加密的 <see cref="T:System.Xml.XmlNode" /> 对象。</returns>
      <param name="node">要进行加密的 <see cref="T:System.Xml.XmlNode" />。</param>
    </member>
    <member name="M:System.Configuration.RsaProtectedConfigurationProvider.ExportKey(System.String,System.Boolean)">
      <summary>从密钥容器中导出 RSA 密钥。</summary>
      <param name="xmlFileName">要将密钥导出到的文件的名称和路径。</param>
      <param name="includePrivateParameters">若指示将导出专用参数，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars" /> 定义的无效字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。 例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。</exception>
      <exception cref="T:System.IO.IOException">打开文件时发生错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> 指定了一个只读文件。 - 或 - 在当前平台上不支持此操作。 - 或 - <paramref name="path" /> 指定了一个目录。 - 或 - 调用方没有所要求的权限。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="path" /> 中指定的文件。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 的格式无效。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.Configuration.RsaProtectedConfigurationProvider.ImportKey(System.String,System.Boolean)">
      <summary>将 RSA 密钥导入到密钥容器中。</summary>
      <param name="xmlFileName">从中导入密钥的文件的名称和路径。</param>
      <param name="exportable">若指示密钥可以导出，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars" /> 定义的无效字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。 例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。</exception>
      <exception cref="T:System.IO.IOException">打开文件时发生错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> 指定了一个只写文件。 - 或 - 在当前平台上不支持此操作。 - 或 - <paramref name="path" /> 指定了一个目录。 - 或 - 调用方没有所要求的权限。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="path" /> 中指定的文件。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 的格式无效。</exception>
    </member>
    <member name="M:System.Configuration.RsaProtectedConfigurationProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>使用默认设置初始化提供程序。</summary>
      <param name="name">要为对象使用的提供程序名称。</param>
      <param name="configurationValues">初始化对象时要使用的值的 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 集合。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="configurationValues" /> 包含一个或多个无法识别的值。</exception>
    </member>
    <member name="P:System.Configuration.RsaProtectedConfigurationProvider.KeyContainerName">
      <summary>获取密钥容器的名称。</summary>
      <returns>密钥容器的名称。</returns>
    </member>
    <member name="P:System.Configuration.RsaProtectedConfigurationProvider.RsaPublicKey">
      <summary>获取提供程序使用的公钥。</summary>
      <returns>包含提供程序所使用的公钥的 <see cref="T:System.Security.Cryptography.RSAParameters" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.RsaProtectedConfigurationProvider.UseMachineContainer">
      <summary>获取一个值，该值指示 <see cref="T:System.Configuration.RsaProtectedConfigurationProvider" /> 对象是否正在使用计算机密钥容器。</summary>
      <returns>如果 <see cref="T:System.Configuration.RsaProtectedConfigurationProvider" /> 对象正在使用计算机密钥容器，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.RsaProtectedConfigurationProvider.UseOAEP">
      <summary>获取一个值，该值指示提供程序是否正在使用最优不对称加密填充 (OAEP) 密钥交换数据。</summary>
      <returns>如果 <see cref="T:System.Configuration.RsaProtectedConfigurationProvider" /> 对象正在使用最优不对称加密填充 (OAEP) 密钥交换数据，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Configuration.SectionInformation">
      <summary>包含有关配置层次结构中单个节的元数据。 此类不能被继承。</summary>
    </member>
    <member name="P:System.Configuration.SectionInformation.AllowDefinition">
      <summary>获取或设置一个值，指示配置文件层次结构中可以定义关联配置节的位置。</summary>
      <returns>一个值，指示配置文件层次结构中可以声明关联 <see cref="T:System.Configuration.ConfigurationSection" /> 对象的位置。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">选定值与某个已定义的值冲突。</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.AllowExeDefinition">
      <summary>获取或设置一个值，指示配置文件层次结构中可以声明关联配置节的位置。</summary>
      <returns>一个值，指示配置文件层次结构中可为 .exe 文件声明关联 <see cref="T:System.Configuration.ConfigurationSection" /> 对象的位置。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">选定值与某个已定义的值冲突。</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.AllowLocation">
      <summary>获取或设置一个值，指示配置节是否允许 location 特性。</summary>
      <returns>如果允许 location 特性，则为 true；否则为 false。 默认值为 true。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">选定值与某个已定义的值冲突。</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.AllowOverride">
      <summary>获取或设置一个值，指示较低级别配置文件是否可以重写关联的配置节。</summary>
      <returns>如果可以重写该节，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.ConfigSource">
      <summary>获取或设置包含文件的名称，关联配置节在其中定义（如果存在这样一个文件）。</summary>
      <returns>包含文件的名称，关联的 <see cref="T:System.Configuration.ConfigurationSection" /> 在其中定义（如果存在这样一个文件）；否则为空字符串 ("")。</returns>
    </member>
    <member name="M:System.Configuration.SectionInformation.ForceDeclaration">
      <summary>强制关联的配置节出现在配置文件中。</summary>
    </member>
    <member name="M:System.Configuration.SectionInformation.ForceDeclaration(System.Boolean)">
      <summary>强制关联的配置节出现在配置文件中，或者从配置文件中移除现有节。</summary>
      <param name="force">如果应将关联的节写入配置文件，则为 true；否则为 false。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="force" /> 为 true，且关联的节无法导出到子配置文件，或者该节未声明。</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.ForceSave">
      <summary>获取或设置一个值，指示是否将保存关联的配置节（即使它未被修改）。</summary>
      <returns>如果将保存关联的 <see cref="T:System.Configuration.ConfigurationSection" /> 对象（即使它未被修改），则为 true；否则为 false。 默认值为 false。 如果保存配置文件（即使没有修改），则 ASP.NET 将重新启动应用程序。</returns>
    </member>
    <member name="M:System.Configuration.SectionInformation.GetParentSection">
      <summary>获取配置节，其中包含与此对象关联的配置节。</summary>
      <returns>配置节，其中包含与此 <see cref="T:System.Configuration.SectionInformation" /> 对象关联的 <see cref="T:System.Configuration.ConfigurationSection" />。</returns>
      <exception cref="T:System.InvalidOperationException">该方法是从父节调用。</exception>
    </member>
    <member name="M:System.Configuration.SectionInformation.GetRawXml">
      <summary>返回一个 XML 节点对象，表示关联的配置节对象。</summary>
      <returns>此配置节的 XML 表示形式。</returns>
      <exception cref="T:System.InvalidOperationException">此配置对象已锁定，无法进行编辑。</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.InheritInChildApplications">
      <summary>获取或设置一个值，该值指示在关联配置节中指定的设置是否由驻留在相关应用程序子目录中的应用程序继承。</summary>
      <returns>如果此 <see cref="T:System.Configuration.ConfigurationSection" /> 对象中指定的设置是由子应用程序继承的，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.IsDeclarationRequired">
      <summary>获取一个值，该值指示是否必须在配置文件中声明该配置节。</summary>
      <returns>如果必须在配置文件中声明关联的 <see cref="T:System.Configuration.ConfigurationSection" /> 对象，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.IsDeclared">
      <summary>获取一个值，指示是否已在配置文件中声明了关联的配置节。</summary>
      <returns>如果此 <see cref="T:System.Configuration.ConfigurationSection" /> 已在配置文件中声明，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.IsLocked">
      <summary>获取一个值，指示关联的配置节是否被锁定。</summary>
      <returns>如果该节被锁定，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.IsProtected">
      <summary>获取一个值，指示关联的配置节是否受保护。</summary>
      <returns>如果此 <see cref="T:System.Configuration.ConfigurationSection" /> 已被保护，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.Name">
      <summary>获取关联配置节的名称。</summary>
      <returns>配置节的完整名称。</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.OverrideMode">
      <summary>获取或设置 <see cref="T:System.Configuration.OverrideMode" /> 枚举值，该枚举值指定子配置文件是否可以重写关联的配置节。</summary>
      <returns>
        <see cref="T:System.Configuration.OverrideMode" /> 枚举值之一。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">尝试更改 <see cref="P:System.Configuration.SectionInformation.AllowOverride" /> 和 <see cref="P:System.Configuration.SectionInformation.OverrideMode" /> 属性，出于兼容性原因，不支持这种更改。</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.OverrideModeDefault">
      <summary>获取或设置一个值，该值指定子配置文件对配置节的默认重写行为。</summary>
      <returns>
        <see cref="T:System.Configuration.OverrideMode" /> 枚举值之一。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">在父配置节中指定重写行为。</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.OverrideModeEffective">
      <summary>获取配置节的重写行为，而该行为反过来基于子配置文件是否可锁定该配置节。</summary>
      <returns>
        <see cref="T:System.Configuration.OverrideMode" /> 枚举值之一。</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.ProtectionProvider">
      <summary>获取关联配置节的受保护的配置提供程序。</summary>
      <returns>此 <see cref="T:System.Configuration.ConfigurationSection" /> 对象受保护的配置提供程序。</returns>
    </member>
    <member name="M:System.Configuration.SectionInformation.ProtectSection(System.String)">
      <summary>标记配置节，进行保护。</summary>
      <param name="protectionProvider">要使用的保护提供程序的名称。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Configuration.SectionInformation.AllowLocation" /> 属性设置为 false。 - 或 - 目标节已是受保护的数据节。</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.RequirePermission">
      <summary>获取一个值，指示关联的配置节是否需要访问权限。</summary>
      <returns>如果将 requirePermission 特性设置为 true，则为 true；否则为 false。 默认值为 true。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">选定值与某个已定义的值冲突。</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.RestartOnExternalChanges">
      <summary>获取或设置一个值，指定对外部配置包含文件进行更改后是否需要重新启动应用程序。</summary>
      <returns>如果对外部配置包含文件进行更改后需要重新启动应用程序，则为 true；否则为 false。 默认值为 true。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">选定值与某个已定义的值冲突。</exception>
    </member>
    <member name="M:System.Configuration.SectionInformation.RevertToParent">
      <summary>导致关联的配置节从其父节继承所有值。</summary>
      <exception cref="T:System.InvalidOperationException">只有在编辑模式下才能调用此方法。</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.SectionName">
      <summary>获取关联配置节的名称。</summary>
      <returns>关联的 <see cref="T:System.Configuration.ConfigurationSection" /> 对象的名称。</returns>
    </member>
    <member name="M:System.Configuration.SectionInformation.SetRawXml(System.String)">
      <summary>在配置文件内，将该对象设置为关联配置节的 XML 表示形式。</summary>
      <param name="rawXml">要使用的 XML。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rawXml" /> 为 null。</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.Type">
      <summary>获取或设置该节的类名称。</summary>
      <returns>与此 <see cref="T:System.Configuration.ConfigurationSection" /> 节关联的类的名称。</returns>
      <exception cref="T:System.ArgumentException">选定值为 null 或空字符串 ("")。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">选定值与某个已定义的值冲突。</exception>
    </member>
    <member name="M:System.Configuration.SectionInformation.UnprotectSection">
      <summary>从关联的配置节中移除受保护的配置加密。</summary>
    </member>
    <member name="T:System.Configuration.StringValidator">
      <summary>对字符串进行验证。</summary>
    </member>
    <member name="M:System.Configuration.StringValidator.#ctor(System.Int32)">
      <summary>使用所提供的参数初始化 <see cref="T:System.Configuration.StringValidator" /> 类的新实例。</summary>
      <param name="minLength">一个整数，指定字符串值的最小长度。</param>
    </member>
    <member name="M:System.Configuration.StringValidator.#ctor(System.Int32,System.Int32)">
      <summary>使用所提供的参数初始化 <see cref="T:System.Configuration.StringValidator" /> 类的新实例。</summary>
      <param name="minLength">一个整数，指定字符串值的最小长度。</param>
      <param name="maxLength">一个整数，指定字符串值的最大长度。</param>
    </member>
    <member name="M:System.Configuration.StringValidator.#ctor(System.Int32,System.Int32,System.String)">
      <summary>使用所提供的参数初始化 <see cref="T:System.Configuration.StringValidator" /> 类的新实例。</summary>
      <param name="minLength">一个整数，指定字符串值的最小长度。</param>
      <param name="maxLength">一个整数，指定字符串值的最大长度。</param>
      <param name="invalidCharacters">一个表示无效字符的字符串。</param>
    </member>
    <member name="M:System.Configuration.StringValidator.CanValidate(System.Type)">
      <summary>根据类型确定对象是否可验证。</summary>
      <returns>如果 <paramref name="type" /> 参数与字符串匹配，则为 true；否则为 false。</returns>
      <param name="type">对象类型。</param>
    </member>
    <member name="M:System.Configuration.StringValidator.Validate(System.Object)">
      <summary>确定对象的值是否有效。</summary>
      <param name="value">对象值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 小于构造函数中定义的 <paramref name="minValue" /> 或大于构造函数中定义的 <paramref name="maxValue" />。 - 或 - <paramref name="value" /> 包含无效字符。</exception>
    </member>
    <member name="T:System.Configuration.StringValidatorAttribute">
      <summary>以声明的方式指示 .NET Framework 对配置属性执行字符串验证。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Configuration.StringValidatorAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.StringValidatorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Configuration.StringValidatorAttribute.InvalidCharacters">
      <summary>获取或设置属性的无效字符。</summary>
      <returns>包含属性不允许的字符集的字符串。</returns>
    </member>
    <member name="P:System.Configuration.StringValidatorAttribute.MaxLength">
      <summary>获取或设置分配给属性的字符串允许的最大长度。</summary>
      <returns>一个整数，指示分配给属性的字符串允许的最大长度。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">选定值小于 <see cref="P:System.Configuration.StringValidatorAttribute.MinLength" />。</exception>
    </member>
    <member name="P:System.Configuration.StringValidatorAttribute.MinLength">
      <summary>获取或设置分配给属性的字符串允许的最小值。</summary>
      <returns>一个整数，指示分配给属性的字符串允许的最小长度。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">选定值大于 <see cref="P:System.Configuration.StringValidatorAttribute.MaxLength" />。</exception>
    </member>
    <member name="P:System.Configuration.StringValidatorAttribute.ValidatorInstance">
      <summary>获取 <see cref="T:System.Configuration.StringValidator" /> 类的实例。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 验证程序实例中的当前 <see cref="T:System.Configuration.StringValidator" /> 设置。</returns>
    </member>
    <member name="T:System.Configuration.SubclassTypeValidator">
      <summary>验证一个对象是否是指定类型的派生类。</summary>
    </member>
    <member name="M:System.Configuration.SubclassTypeValidator.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Configuration.SubclassTypeValidator" /> 类的新实例。</summary>
      <param name="baseClass">作为验证依据的基类。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseClass" /> 为 null。</exception>
    </member>
    <member name="M:System.Configuration.SubclassTypeValidator.CanValidate(System.Type)">
      <summary>根据类型确定对象是否可验证。</summary>
      <returns>如果 <paramref name="type" /> 参数与可验证类型匹配，则为 true；否则为 false。</returns>
      <param name="type">对象类型。</param>
    </member>
    <member name="M:System.Configuration.SubclassTypeValidator.Validate(System.Object)">
      <summary>确定对象的值是否有效。</summary>
      <param name="value">对象值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不属于可以从构造函数中定义的 <paramref name="baseClass" /> 中派生的 <see cref="T:System.Type" />。</exception>
    </member>
    <member name="T:System.Configuration.SubclassTypeValidatorAttribute">
      <summary>以声明方式指示 .NET Framework 对配置属性执行验证。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Configuration.SubclassTypeValidatorAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Configuration.SubclassTypeValidatorAttribute" /> 类的新实例。</summary>
      <param name="baseClass">基类类型。</param>
    </member>
    <member name="P:System.Configuration.SubclassTypeValidatorAttribute.BaseClass">
      <summary>获取所验证的对象的基类型。</summary>
      <returns>所验证的对象的基类型。</returns>
    </member>
    <member name="P:System.Configuration.SubclassTypeValidatorAttribute.ValidatorInstance">
      <summary>获取验证程序特性实例。</summary>
      <returns>当前的 <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 实例。</returns>
    </member>
    <member name="T:System.Configuration.TimeSpanMinutesConverter">
      <summary>转换以分钟表示的时间跨度。</summary>
    </member>
    <member name="M:System.Configuration.TimeSpanMinutesConverter.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.TimeSpanMinutesConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.TimeSpanMinutesConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.TimeSpan" />。</summary>
      <returns>以分钟表示 <paramref name="data" /> 参数的 <see cref="T:System.TimeSpan" />。</returns>
      <param name="ctx">用于类型转换的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 对象。</param>
      <param name="ci">转换期间使用的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
      <param name="data">要转换的 <see cref="T:System.String" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.TimeSpanMinutesConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将 <see cref="T:System.TimeSpan" /> 转换为 <see cref="T:System.String" />。</summary>
      <returns>以分钟表示 <paramref name="value" /> 参数的 <see cref="T:System.String" />。</returns>
      <param name="ctx">用于类型转换的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 对象。</param>
      <param name="ci">转换期间使用的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
      <param name="value">要转换成的值。</param>
      <param name="type">要转换到的类型。</param>
    </member>
    <member name="T:System.Configuration.TimeSpanMinutesOrInfiniteConverter">
      <summary>转换以分钟表示（或作为标准的无限时间跨度）的 <see cref="T:System.TimeSpan" />。</summary>
    </member>
    <member name="M:System.Configuration.TimeSpanMinutesOrInfiniteConverter.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.TimeSpanMinutesOrInfiniteConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.TimeSpanMinutesOrInfiniteConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.TimeSpan" />。</summary>
      <returns>如果 <paramref name="data" /> 参数为 <see cref="T:System.String" />“无限”，则为 <see cref="F:System.TimeSpan.MaxValue" />；否则为以分钟表示 <paramref name="data" /> 参数的 <see cref="T:System.TimeSpan" />。</returns>
      <param name="ctx">用于类型转换的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 对象。</param>
      <param name="ci">转换期间使用的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
      <param name="data">要转换的 <see cref="T:System.String" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.TimeSpanMinutesOrInfiniteConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将 <see cref="T:System.TimeSpan" /> 转换为 <see cref="T:System.String" />。</summary>
      <returns>如果 <paramref name="value" /> 参数是 <see cref="F:System.TimeSpan.MaxValue" />，则为 <see cref="T:System.String" />“infinite”；否则为以分钟表示 <paramref name="value" /> 参数的 <see cref="T:System.String" />。</returns>
      <param name="ctx">用于类型转换的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 对象。</param>
      <param name="ci">转换期间使用的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
      <param name="value">要转换的值。</param>
      <param name="type">转换类型。</param>
    </member>
    <member name="T:System.Configuration.TimeSpanSecondsConverter">
      <summary>转换以秒表示的时间跨度。</summary>
    </member>
    <member name="M:System.Configuration.TimeSpanSecondsConverter.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.TimeSpanSecondsConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.TimeSpanSecondsConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.TimeSpan" />。</summary>
      <returns>以秒表示 <paramref name="data" /> 参数的 <see cref="T:System.TimeSpan" />。</returns>
      <param name="ctx">用于类型转换的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 对象。</param>
      <param name="ci">转换期间使用的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
      <param name="data">要转换的 <see cref="T:System.String" /> 对象。</param>
      <exception cref="T:System.ArgumentException">无法将 <paramref name="data" /> 分析为整数值。</exception>
    </member>
    <member name="M:System.Configuration.TimeSpanSecondsConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将 <see cref="T:System.TimeSpan" /> 转换为 <see cref="T:System.String" />。</summary>
      <returns>以分钟表示 <paramref name="value" /> 参数的 <see cref="T:System.String" />。</returns>
      <param name="ctx">用于类型转换的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 对象。</param>
      <param name="ci">转换期间使用的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
      <param name="value">要转换成的值。</param>
      <param name="type">要转换到的类型。</param>
    </member>
    <member name="T:System.Configuration.TimeSpanSecondsOrInfiniteConverter">
      <summary>转换以秒表示的 <see cref="T:System.TimeSpan" />，或将其转换为标准的无限时间跨度。</summary>
    </member>
    <member name="M:System.Configuration.TimeSpanSecondsOrInfiniteConverter.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.TimeSpanSecondsOrInfiniteConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.TimeSpanSecondsOrInfiniteConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.TimeSpan" />。</summary>
      <returns>如果 <paramref name="data" /> 参数是 <see cref="T:System.String" />“infinite”，则为 <see cref="F:System.TimeSpan.MaxValue" />；否则为以秒表示 <paramref name="data" /> 参数的 <see cref="T:System.TimeSpan" />。</returns>
      <param name="ctx">用于类型转换的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 对象。</param>
      <param name="ci">转换期间使用的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
      <param name="data">要转换的 <see cref="T:System.String" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.TimeSpanSecondsOrInfiniteConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将 <see cref="T:System.TimeSpan" /> 转换为 <see cref="T:System.String" />.</summary>
      <returns>如果 <paramref name="value" /> 参数是 <see cref="F:System.TimeSpan.MaxValue" />，则为 <see cref="T:System.String" />“infinite”；否则为以秒表示 <paramref name="value" /> 参数的 <see cref="T:System.String" />。</returns>
      <param name="ctx">用于类型转换的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 对象。</param>
      <param name="ci">转换期间使用的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
      <param name="value">要转换的值。</param>
      <param name="type">转换类型。</param>
    </member>
    <member name="T:System.Configuration.TimeSpanValidator">
      <summary>对 <see cref="T:System.TimeSpan" /> 对象进行验证。</summary>
    </member>
    <member name="M:System.Configuration.TimeSpanValidator.#ctor(System.TimeSpan,System.TimeSpan)">
      <summary>使用所提供的参数初始化 <see cref="T:System.Configuration.TimeSpanValidator" /> 类的新实例。</summary>
      <param name="minValue">
        <see cref="T:System.TimeSpan" /> 对象，指定通过验证所允许的最早时间。</param>
      <param name="maxValue">
        <see cref="T:System.TimeSpan" /> 对象，指定通过验证所允许的最晚时间。</param>
    </member>
    <member name="M:System.Configuration.TimeSpanValidator.#ctor(System.TimeSpan,System.TimeSpan,System.Boolean)">
      <summary>使用所提供的参数初始化 <see cref="T:System.Configuration.TimeSpanValidator" /> 类的新实例。</summary>
      <param name="minValue">
        <see cref="T:System.TimeSpan" /> 对象，指定通过验证所允许的最早时间。</param>
      <param name="maxValue">
        <see cref="T:System.TimeSpan" /> 对象，指定通过验证所允许的最晚时间。</param>
      <param name="rangeIsExclusive">一个 <see cref="T:System.Boolean" /> 值，指定验证范围是否独占。</param>
    </member>
    <member name="M:System.Configuration.TimeSpanValidator.#ctor(System.TimeSpan,System.TimeSpan,System.Boolean,System.Int64)">
      <summary>使用所提供的参数初始化 <see cref="T:System.Configuration.TimeSpanValidator" /> 类的新实例。</summary>
      <param name="minValue">
        <see cref="T:System.TimeSpan" /> 对象，指定通过验证所允许的最早时间。</param>
      <param name="maxValue">
        <see cref="T:System.TimeSpan" /> 对象，指定通过验证所允许的最晚时间。</param>
      <param name="rangeIsExclusive">一个 <see cref="T:System.Boolean" /> 值，指定验证范围是否独占。</param>
      <param name="resolutionInSeconds">指定秒数的 <see cref="T:System.Int64" /> 值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="resolutionInSeconds" /> 小于 0。 - 或 - <paramref name="minValue" /> 大于 <paramref name="maxValue" />。</exception>
    </member>
    <member name="M:System.Configuration.TimeSpanValidator.CanValidate(System.Type)">
      <summary>确定是否可以验证该对象的类型。</summary>
      <returns>如果 <paramref name="type" /> 参数与 <see cref="T:System.TimeSpan" /> 值匹配，则为 true；否则为 false。</returns>
      <param name="type">对象的类型。</param>
    </member>
    <member name="M:System.Configuration.TimeSpanValidator.Validate(System.Object)">
      <summary>确定对象的值是否有效。</summary>
      <param name="value">对象的值。</param>
    </member>
    <member name="T:System.Configuration.TimeSpanValidatorAttribute">
      <summary>以声明的方式指示 .NET Framework 对配置属性执行时间验证。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Configuration.TimeSpanValidatorAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.TimeSpanValidatorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Configuration.TimeSpanValidatorAttribute.ExcludeRange">
      <summary>获取或设置一个值，指示在 <see cref="P:System.Configuration.TimeSpanValidatorAttribute.MinValueString" /> 和 <see cref="P:System.Configuration.TimeSpanValidatorAttribute.MaxValueString" /> 所定义的范围内是包含还是排除整数。</summary>
      <returns>如果必须排除值，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Configuration.TimeSpanValidatorAttribute.MaxValue">
      <summary>获取 <see cref="T:System.TimeSpan" /> 的绝对最大值。</summary>
      <returns>允许的最大 <see cref="T:System.TimeSpan" /> 值。</returns>
    </member>
    <member name="P:System.Configuration.TimeSpanValidatorAttribute.MaxValueString">
      <summary>获取或设置 <see cref="T:System.TimeSpan" /> 的相对最大值。</summary>
      <returns>允许的最大 <see cref="T:System.TimeSpan" /> 值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">选定值小于 <see cref="P:System.Configuration.TimeSpanValidatorAttribute.MinValue" />。</exception>
    </member>
    <member name="P:System.Configuration.TimeSpanValidatorAttribute.MinValue">
      <summary>获取 <see cref="T:System.TimeSpan" /> 的绝对最小值。</summary>
      <returns>允许的最小 <see cref="T:System.TimeSpan" /> 值。</returns>
    </member>
    <member name="P:System.Configuration.TimeSpanValidatorAttribute.MinValueString">
      <summary>获取或设置 <see cref="T:System.TimeSpan" /> 的相对最小值。</summary>
      <returns>允许的最小 <see cref="T:System.TimeSpan" /> 值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">选定值大于 <see cref="P:System.Configuration.TimeSpanValidatorAttribute.MaxValue" />。</exception>
    </member>
    <member name="F:System.Configuration.TimeSpanValidatorAttribute.TimeSpanMaxValue">
      <summary>获取允许的绝对最大值。</summary>
    </member>
    <member name="F:System.Configuration.TimeSpanValidatorAttribute.TimeSpanMinValue">
      <summary>获取允许的绝对最小值。</summary>
    </member>
    <member name="P:System.Configuration.TimeSpanValidatorAttribute.ValidatorInstance">
      <summary>获取 <see cref="T:System.Configuration.TimeSpanValidator" /> 类的实例。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 验证程序实例。</returns>
    </member>
    <member name="T:System.Configuration.TypeNameConverter">
      <summary>在类型和字符串值之间转换。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Configuration.TypeNameConverter.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.TypeNameConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.TypeNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将 <see cref="T:System.String" /> 对象转换为 <see cref="T:System.Type" /> 对象。</summary>
      <returns>表示 <paramref name="data" /> 参数的 <see cref="T:System.Type" />。</returns>
      <param name="ctx">用于类型转换的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 对象。</param>
      <param name="ci">转换期间使用的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
      <param name="data">要转换的 <see cref="T:System.String" /> 对象。</param>
      <exception cref="T:System.ArgumentException">无法解析 <see cref="T:System.Type" /> 值。</exception>
    </member>
    <member name="M:System.Configuration.TypeNameConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将 <see cref="T:System.Type" /> 对象转换为 <see cref="T:System.String" /> 对象。</summary>
      <returns>表示 <paramref name="value" /> 参数的 <see cref="T:System.String" />。</returns>
      <param name="ctx">用于类型转换的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 对象。</param>
      <param name="ci">转换期间使用的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
      <param name="value">要转换成的值。</param>
      <param name="type">要转换到的类型。</param>
    </member>
    <member name="T:System.Configuration.ValidatorCallback">
      <summary>表示验证一个对象后要调用的方法。</summary>
      <param name="value">回调方法。</param>
    </member>
    <member name="T:System.Configuration.WhiteSpaceTrimStringConverter">
      <summary>将字符串转换为它的规范化格式。</summary>
    </member>
    <member name="M:System.Configuration.WhiteSpaceTrimStringConverter.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.WhiteSpaceTrimStringConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.WhiteSpaceTrimStringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将 <see cref="T:System.String" /> 转换为规范化形式。</summary>
      <returns>一个表示转换后的值的对象。</returns>
      <param name="ctx">用于类型转换的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 对象。</param>
      <param name="ci">转换期间使用的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
      <param name="data">要转换的 <see cref="T:System.String" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.WhiteSpaceTrimStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将 <see cref="T:System.String" /> 转换为规范化形式。</summary>
      <returns>一个表示转换后的值的对象。</returns>
      <param name="ctx">用于类型转换的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 对象。</param>
      <param name="ci">转换期间使用的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
      <param name="value">要转换成的值。</param>
      <param name="type">要转换到的类型。</param>
    </member>
    <member name="T:System.Configuration.Internal.DelegatingConfigHost">
      <summary>将 <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> 接口的所有成员委托给主机的另一个实例。</summary>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.Internal.DelegatingConfigHost" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.CreateConfigurationContext(System.String,System.String)">
      <summary>创建新的配置上下文。</summary>
      <returns>表示新配置上下文的 <see cref="T:System.Object" />。</returns>
      <param name="configPath">表示配置文件路径的字符串。</param>
      <param name="locationSubPath">表示位置子路径的字符串。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.CreateDeprecatedConfigContext(System.String)">
      <summary>创建已否决的配置上下文。</summary>
      <returns>表示已否决配置上下文的 <see cref="T:System.Object" />。</returns>
      <param name="configPath">表示配置文件路径的字符串。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.DecryptSection(System.String,System.Configuration.ProtectedConfigurationProvider,System.Configuration.ProtectedConfigurationSection)">
      <summary>对已加密的配置节进行解密。</summary>
      <returns>表示已解密的配置节的字符串。</returns>
      <param name="encryptedXml">配置文件中已加密的节。</param>
      <param name="protectionProvider">
        <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象。</param>
      <param name="protectedConfigSection">
        <see cref="T:System.Configuration.ProtectedConfigurationSection" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.DeleteStream(System.String)">
      <summary>删除在配置文件上执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象。</summary>
      <param name="streamName">对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.EncryptSection(System.String,System.Configuration.ProtectedConfigurationProvider,System.Configuration.ProtectedConfigurationSection)">
      <summary>对配置对象的节进行加密。</summary>
      <returns>表示配置对象的已加密节的字符串。</returns>
      <param name="clearTextXml">未加密的配置节。</param>
      <param name="protectionProvider">
        <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象。</param>
      <param name="protectedConfigSection">
        <see cref="T:System.Configuration.ProtectedConfigurationSection" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.GetConfigPathFromLocationSubPath(System.String,System.String)">
      <summary>返回基于位置子路径的配置路径。</summary>
      <returns>表示配置路径的字符串。</returns>
      <param name="configPath">表示配置文件路径的字符串。</param>
      <param name="locationSubPath">表示位置子路径的字符串。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.GetConfigType(System.String,System.Boolean)">
      <summary>返回表示配置类型的 <see cref="T:System.Type" />。</summary>
      <returns>一个 <see cref="T:System.Type" />，表示配置的类型。</returns>
      <param name="typeName">表示配置类型的字符串。</param>
      <param name="throwOnError">如果遇到错误时应引发异常，则为 true；如果遇到错误时不应引发异常，则为 false。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.GetConfigTypeName(System.Type)">
      <summary>返回表示配置对象的类型名称的字符串。</summary>
      <returns>表示配置对象的类型名称的字符串。</returns>
      <param name="t">
        <see cref="T:System.Type" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.GetRestrictedPermissions(System.Configuration.Internal.IInternalConfigRecord,System.Security.PermissionSet@,System.Boolean@)">
      <summary>如果在主机对象内可用，则设置指定的权限集。</summary>
      <param name="configRecord">
        <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> 对象。</param>
      <param name="permissionSet">
        <see cref="T:System.Security.PermissionSet" /> 对象。</param>
      <param name="isHostReady">如果主机已完成初始化，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.GetStreamName(System.String)">
      <summary>返回对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</summary>
      <returns>一个字符串，表示对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</returns>
      <param name="configPath">表示配置文件路径的字符串。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.GetStreamNameForConfigSource(System.String,System.String)">
      <summary>返回对配置源执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</summary>
      <returns>一个字符串，表示在配置源上执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</returns>
      <param name="streamName">对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</param>
      <param name="configSource">表示配置源的字符串。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.GetStreamVersion(System.String)">
      <summary>返回一个 <see cref="P:System.Diagnostics.FileVersionInfo.FileVersion" /> 对象，该对象表示在配置文件上执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的版本。</summary>
      <returns>一个 <see cref="P:System.Diagnostics.FileVersionInfo.FileVersion" /> 对象，表示在配置文件上执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的版本。</returns>
      <param name="streamName">对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</param>
    </member>
    <member name="P:System.Configuration.Internal.DelegatingConfigHost.Host">
      <summary>获取或设置 <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> 对象。</summary>
      <returns>
        <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> 对象。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.Impersonate">
      <summary>指示主机进行模拟并返回 .NET Framework 内部所需的 <see cref="T:System.IDisposable" /> 对象。</summary>
      <returns>一个 <see cref="T:System.IDisposable" /> 值。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.Init(System.Configuration.Internal.IInternalConfigRoot,System.Object[])">
      <summary>初始化配置主机。</summary>
      <param name="configRoot">
        <see cref="T:System.Configuration.Internal.IInternalConfigRoot" /> 对象。</param>
      <param name="hostInitParams">一个参数对象，包含用于初始化配置主机的值。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.InitForConfiguration(System.String@,System.String@,System.String@,System.Configuration.Internal.IInternalConfigRoot,System.Object[])">
      <summary>初始化配置的主机。</summary>
      <param name="locationSubPath">一个字符串，表示位置子路径（按引用传递）。</param>
      <param name="configPath">表示配置文件路径的字符串。</param>
      <param name="locationConfigPath">位置配置路径。</param>
      <param name="configRoot">配置根元素。</param>
      <param name="hostInitConfigurationParams">表示用于初始化主机的参数的参数对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsAboveApplication(System.String)">
      <summary>返回一个值，该值指示配置是否位于配置层次结构中的应用程序配置之上。</summary>
      <returns>如果配置处于配置层次结构中的应用程序配置之上，则为 true；否则为 false。</returns>
      <param name="configPath">表示配置文件路径的字符串。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsConfigRecordRequired(System.String)">
      <summary>返回一个值，该值指示主机配置初始化是否需要配置记录。</summary>
      <returns>如果主机配置初始化需要配置记录，则为 true；否则为 false。</returns>
      <param name="configPath">表示配置文件路径的字符串。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsDefinitionAllowed(System.String,System.Configuration.ConfigurationAllowDefinition,System.Configuration.ConfigurationAllowExeDefinition)">
      <summary>限制或允许主机配置中的定义。</summary>
      <returns>如果主机配置中定义的授予或限制成功，则为 true；否则为 false。</returns>
      <param name="configPath">表示配置文件路径的字符串。</param>
      <param name="allowDefinition">
        <see cref="T:System.Configuration.ConfigurationAllowDefinition" /> 对象。</param>
      <param name="allowExeDefinition">
        <see cref="T:System.Configuration.ConfigurationAllowExeDefinition" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsFile(System.String)">
      <summary>返回一个值，指示由 <see cref="T:System.IO.Stream" /> 对象用于读取配置文件的文件路径是否为有效路径。</summary>
      <returns>如果由 <see cref="T:System.IO.Stream" /> 对象用于读取配置文件的路径是有效路径，则为 true；否则为 false。</returns>
      <param name="streamName">对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsFullTrustSectionWithoutAptcaAllowed(System.Configuration.Internal.IInternalConfigRecord)">
      <summary>返回一个值，它指示配置节是否需要完全受信任的代码访问安全级别，并且不允许 <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> 特性禁用隐式链接请求。</summary>
      <returns>如果配置节需要完全受信任的代码访问安全级别并且不允许 <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> 特性禁用隐式链接请求，则为 true；否则为 false。</returns>
      <param name="configRecord">
        <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsInitDelayed(System.Configuration.Internal.IInternalConfigRecord)">
      <summary>返回一个值，它指示配置对象初始化是否被视为延迟。</summary>
      <returns>如果配置对象初始化被视为延迟，则为 true；否则为 false。</returns>
      <param name="configRecord">
        <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsLocationApplicable(System.String)">
      <summary>返回一个值，它指示配置对象是否支持位置标记。</summary>
      <returns>如果配置对象支持位置标记，则为 true；否则为 false。</returns>
      <param name="configPath">表示配置文件路径的字符串。</param>
    </member>
    <member name="P:System.Configuration.Internal.DelegatingConfigHost.IsRemote">
      <summary>获取一个值，指示配置是否为远程配置。</summary>
      <returns>如果配置为远程配置，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsSecondaryRoot(System.String)">
      <summary>返回一个值，它指示配置路径是否指向应将其内容视为根的配置节点。</summary>
      <returns>如果配置路径指向应将其内容视为根的配置节点，则为 true；否则为 false。</returns>
      <param name="configPath">表示配置文件路径的字符串。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsTrustedConfigPath(System.String)">
      <summary>返回一个指示配置路径是否受信任的值。</summary>
      <returns>如果配置路径受信任，则为 true；否则为 false。</returns>
      <param name="configPath">表示配置文件路径的字符串。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.OpenStreamForRead(System.String)">
      <summary>打开一个 <see cref="T:System.IO.Stream" /> 对象，以便读取配置文件。</summary>
      <returns>返回由 <paramref name="streamName" /> 指定的 <see cref="T:System.IO.Stream" /> 对象。</returns>
      <param name="streamName">对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.OpenStreamForRead(System.String,System.Boolean)">
      <summary>打开一个 <see cref="T:System.IO.Stream" /> 对象，以便读取配置文件。</summary>
      <returns>返回由 <paramref name="streamName" /> 指定的 <see cref="T:System.IO.Stream" /> 对象。</returns>
      <param name="streamName">对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</param>
      <param name="assertPermissions">如果断言权限，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.OpenStreamForWrite(System.String,System.String,System.Object@)">
      <summary>打开一个 <see cref="T:System.IO.Stream" /> 对象，以便写入配置文件或写入用于生成配置文件的临时文件。 允许将 <see cref="T:System.IO.Stream" /> 对象指定为模板，以便复制文件特性。</summary>
      <returns>
        <see cref="T:System.IO.Stream" /> 对象。</returns>
      <param name="streamName">对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</param>
      <param name="templateStreamName">`<see cref="T:System.IO.Stream" /> 对象的名称，从该对象复制文件特性作为模板。</param>
      <param name="writeContext">
        <see cref="T:System.IO.Stream" /> 对象的写上下文（按引用传递）。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.OpenStreamForWrite(System.String,System.String,System.Object@,System.Boolean)">
      <summary>打开一个 <see cref="T:System.IO.Stream" /> 对象，以便写入配置文件。 允许将 <see cref="T:System.IO.Stream" /> 对象指定为模板，以便复制文件特性。</summary>
      <returns>返回由 <paramref name="streamName" /> 参数指定的 <see cref="T:System.IO.Stream" /> 对象。</returns>
      <param name="streamName">对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</param>
      <param name="templateStreamName">`<see cref="T:System.IO.Stream" /> 对象的名称，从该对象复制文件特性作为模板。</param>
      <param name="writeContext">对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的写上下文（按引用传递）。</param>
      <param name="assertPermissions">如果断言权限，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.PrefetchAll(System.String,System.String)">
      <summary>返回一个值，它指示是否可由指定的 <see cref="T:System.IO.Stream" /> 对象读取整个配置文件。</summary>
      <returns>如果由 <paramref name="streamName" /> 指定的 <see cref="T:System.IO.Stream" /> 对象可以读取整个配置文件，则为 true；否则为 false。</returns>
      <param name="configPath">表示配置文件路径的字符串。</param>
      <param name="streamName">对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.PrefetchSection(System.String,System.String)">
      <summary>指示 <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> 对象读取其关联配置文件的指定节。</summary>
      <returns>如果 <see cref="T:System.IO.Stream" /> 对象可读取由 <paramref name="sectionGroupName" /> 和 <paramref name="sectionName" /> 指定的配置文件节，则为 true；否则为 false。</returns>
      <param name="sectionGroupName">一个字符串，表示配置文件中节组的名称。</param>
      <param name="sectionName">一个字符串，表示配置文件中节的名称。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.RequireCompleteInit(System.Configuration.Internal.IInternalConfigRecord)">
      <summary>指示新配置记录需要完全初始化。</summary>
      <param name="configRecord">
        <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.StartMonitoringStreamForChanges(System.String,System.Configuration.Internal.StreamChangeCallback)">
      <summary>指示主机监视配置文件中关联 <see cref="T:System.IO.Stream" /> 对象的更改。</summary>
      <returns>一个 <see cref="T:System.Object" /> 实例，包含更改的配置设置。</returns>
      <param name="streamName">对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</param>
      <param name="callback">一个 <see cref="T:System.Configuration.Internal.StreamChangeCallback" /> 对象，它用于接收返回的表示配置文件中的更改的数据。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.StopMonitoringStreamForChanges(System.String,System.Configuration.Internal.StreamChangeCallback)">
      <summary>指示主机对象停止监视配置文件中关联 <see cref="T:System.IO.Stream" /> 对象的更改。</summary>
      <param name="streamName">对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</param>
      <param name="callback">
        <see cref="T:System.Configuration.Internal.StreamChangeCallback" /> 对象。</param>
    </member>
    <member name="P:System.Configuration.Internal.DelegatingConfigHost.SupportsChangeNotifications">
      <summary>获取一个值，它指示主机配置是否支持更改通知。</summary>
      <returns>如果主机支持更改通知，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.Internal.DelegatingConfigHost.SupportsLocation">
      <summary>获取一个值，它指示主机配置是否支持位置标记。</summary>
      <returns>如果主机支持位置标记，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.Internal.DelegatingConfigHost.SupportsPath">
      <summary>获取一个值，它指示主机配置是否具有路径支持。</summary>
      <returns>如果主机配置具有路径支持，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.Internal.DelegatingConfigHost.SupportsRefresh">
      <summary>获取一个值，它指示主机配置是否支持刷新。</summary>
      <returns>如果主机配置支持刷新，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.VerifyDefinitionAllowed(System.String,System.Configuration.ConfigurationAllowDefinition,System.Configuration.ConfigurationAllowExeDefinition,System.Configuration.Internal.IConfigErrorInfo)">
      <summary>验证是否允许对配置记录使用配置定义。</summary>
      <param name="configPath">表示配置文件路径的字符串。</param>
      <param name="allowDefinition">
        <see cref="P:System.Configuration.SectionInformation.AllowDefinition" /> 对象。</param>
      <param name="allowExeDefinition">一个 <see cref="T:System.Configuration.ConfigurationAllowExeDefinition" /> 对象</param>
      <param name="errorInfo">
        <see cref="T:System.Configuration.Internal.IConfigErrorInfo" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.WriteCompleted(System.String,System.Boolean,System.Object)">
      <summary>指示已完成所有写入配置文件操作。</summary>
      <param name="streamName">对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</param>
      <param name="success">如果已成功完成对配置文件的写入，则为 true；否则为 false。</param>
      <param name="writeContext">对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的写上下文。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.WriteCompleted(System.String,System.Boolean,System.Object,System.Boolean)">
      <summary>指示已完成所有写入配置文件操作，并指定是否应断言权限。</summary>
      <param name="streamName">对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</param>
      <param name="success">true 指示已成功完成写入操作；否则为 false。</param>
      <param name="writeContext">对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的写上下文。</param>
      <param name="assertPermissions">如果断言权限，则为 true；否则为 false。</param>
    </member>
    <member name="T:System.Configuration.Internal.IConfigErrorInfo">
      <summary>定义 .NET Framework 用于支持创建错误配置记录的接口。</summary>
    </member>
    <member name="P:System.Configuration.Internal.IConfigErrorInfo.Filename">
      <summary>获取一个字符串，指定与配置详细信息相关的文件名。</summary>
      <returns>一个字符串，指定文件名。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigErrorInfo.LineNumber">
      <summary>获取一个整数，指定与配置详细信息相关的行号。</summary>
      <returns>一个整数，指定行号。</returns>
    </member>
    <member name="T:System.Configuration.Internal.IConfigSystem">
      <summary>定义 .NET Framework 用于支持初始化配置属性的接口。</summary>
    </member>
    <member name="P:System.Configuration.Internal.IConfigSystem.Host">
      <summary>获取配置主机。</summary>
      <returns>
        <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> 对象，.NET Framework 使用它来初始化应用程序配置属性。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IConfigSystem.Init(System.Type,System.Object[])">
      <summary>初始化配置对象。</summary>
      <param name="typeConfigHost">配置主机的类型。</param>
      <param name="hostInitParams">配置主机参数数组。</param>
    </member>
    <member name="P:System.Configuration.Internal.IConfigSystem.Root">
      <summary>获取配置层次结构的根。</summary>
      <returns>
        <see cref="T:System.Configuration.Internal.IInternalConfigRoot" /> 对象。</returns>
    </member>
    <member name="T:System.Configuration.Internal.IConfigurationManagerHelper">
      <summary>定义 .NET Framework 用于支持配置管理的接口。</summary>
    </member>
    <member name="M:System.Configuration.Internal.IConfigurationManagerHelper.EnsureNetConfigLoaded">
      <summary>确保已加载网络配置。</summary>
    </member>
    <member name="T:System.Configuration.Internal.IConfigurationManagerInternal">
      <summary>定义 .NET Framework 用于初始化配置属性的接口。</summary>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.ApplicationConfigUri">
      <summary>获取与应用程序路径相关的配置文件名称。</summary>
      <returns>一个字符串值，表示配置文件名称。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.ExeLocalConfigDirectory">
      <summary>根据入口程序集获取应用程序的本地配置目录。</summary>
      <returns>一个字符串，表示本地配置目录。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.ExeLocalConfigPath">
      <summary>根据入口程序集获取应用程序的本地配置路径。</summary>
      <returns>一个字符串值，表示应用程序的本地配置路径。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.ExeProductName">
      <summary>根据入口程序集获取应用程序的产品名称。</summary>
      <returns>一个字符串值，表示应用程序的产品名称。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.ExeProductVersion">
      <summary>根据入口程序集获取应用程序的产品版本。</summary>
      <returns>一个字符串值，表示应用程序的产品版本。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.ExeRoamingConfigDirectory">
      <summary>根据入口程序集获取应用程序的漫游配置目录。</summary>
      <returns>一个字符串值，表示应用程序的漫游配置目录。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.ExeRoamingConfigPath">
      <summary>根据应用程序的入口程序集获取漫游用户的配置路径。</summary>
      <returns>一个字符串值，表示漫游用户的配置路径。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.MachineConfigPath">
      <summary>获取 Machine.config 文件的配置路径。</summary>
      <returns>一个字符串值，表示 Machine.config 文件的路径。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.SetConfigurationSystemInProgress">
      <summary>获取表示配置系统状态的值。</summary>
      <returns>如果正在初始化配置系统，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.SupportsUserConfig">
      <summary>获取一个值，指定是否支持用户配置设置。</summary>
      <returns>如果配置系统支持用户配置设置，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.UserConfigFilename">
      <summary>获取用于存储用户配置设置的文件的名称。</summary>
      <returns>一个字符串，指定用于存储用户配置的文件的名称。</returns>
    </member>
    <member name="T:System.Configuration.Internal.IInternalConfigClientHost">
      <summary>定义允许内部 .NET Framework 基础结构对配置进行自定义的接口。</summary>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigClientHost.GetExeConfigPath">
      <summary>返回应用程序配置文件的路径。</summary>
      <returns>表示应用程序配置文件路径的字符串。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigClientHost.GetLocalUserConfigPath">
      <summary>返回一个表示已知的本地用户配置文件路径的字符串。</summary>
      <returns>表示已知的本地用户配置文件路径的字符串。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigClientHost.GetRoamingUserConfigPath">
      <summary>返回一个表示已知的漫游用户配置文件路径的字符串。</summary>
      <returns>表示已知的漫游用户配置文件路径的字符串。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigClientHost.IsExeConfig(System.String)">
      <summary>返回一个值，指示配置文件路径是否与当前已知的应用程序配置文件路径相同。</summary>
      <returns>如果表示配置路径的字符串与应用程序配置文件的路径相同，则为 true；如果表示配置路径的字符串与应用程序配置文件的路径不同，则为 false。</returns>
      <param name="configPath">表示应用程序配置文件路径的字符串。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigClientHost.IsLocalUserConfig(System.String)">
      <summary>返回一个值，指示配置文件路径是否与当前已知的本地用户的配置文件路径相同。</summary>
      <returns>如果表示配置路径的字符串与已知的本地用户配置文件的路径相同，则为 true；否则为 false。</returns>
      <param name="configPath">表示应用程序配置文件路径的字符串。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigClientHost.IsRoamingUserConfig(System.String)">
      <summary>返回一个值，以指示配置文件路径是否与当前已知的漫游用户的配置文件路径相同。</summary>
      <returns>如果表示配置路径的字符串与已知的漫游用户配置文件的路径相同，则为 true；否则为 false。</returns>
      <param name="configPath">表示应用程序配置文件路径的字符串。</param>
    </member>
    <member name="T:System.Configuration.Internal.IInternalConfigConfigurationFactory">
      <summary>定义内部设计时 API 用于创建 <see cref="T:System.Configuration.Configuration" /> 对象的接口。</summary>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigConfigurationFactory.Create(System.Type,System.Object[])">
      <summary>创建并初始化一个 <see cref="T:System.Configuration.Configuration" /> 对象。</summary>
      <returns>
        <see cref="T:System.Configuration.Configuration" /> 对象。</returns>
      <param name="typeConfigHost">要创建的 <see cref="T:System.Configuration.Configuration" /> 对象的 <see cref="T:System.Type" />。</param>
      <param name="hostInitConfigurationParams">一个 <see cref="T:System.Object" /> 参数数组，包含要应用于已创建的 <see cref="T:System.Configuration.Configuration" /> 对象的参数。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigConfigurationFactory.NormalizeLocationSubPath(System.String,System.Configuration.Internal.IConfigErrorInfo)">
      <summary>正常化配置文件的路径的位置子路径。</summary>
      <returns>一个正常化的子路径字符串。</returns>
      <param name="subPath">表示配置文件的路径的字符串。</param>
      <param name="errorInfo">
        <see cref="T:System.Configuration.Internal.IConfigErrorInfo" /> 的一个实例或 null。</param>
    </member>
    <member name="T:System.Configuration.Internal.IInternalConfigHost">
      <summary>定义由内部 .NET 结构用于初始化应用程序配置属性的接口。</summary>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.CreateConfigurationContext(System.String,System.String)">
      <summary>创建并返回应用程序配置的 <see cref="T:System.Configuration.ConfigurationElement" /> 的上下文对象。</summary>
      <returns>应用程序配置的 <see cref="T:System.Configuration.ConfigurationElement" /> 对象的上下文对象。</returns>
      <param name="configPath">表示应用程序配置文件路径的字符串。</param>
      <param name="locationSubPath">表示配置元素子路径位置的字符串。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.CreateDeprecatedConfigContext(System.String)">
      <summary>创建并返回应用程序配置的已否决的上下文对象。</summary>
      <returns>应用程序配置的已否决的上下文对象。</returns>
      <param name="configPath">表示应用程序配置文件路径的字符串。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.DecryptSection(System.String,System.Configuration.ProtectedConfigurationProvider,System.Configuration.ProtectedConfigurationSection)">
      <summary>对加密配置节解密，并将其作为字符串返回。</summary>
      <returns>字符串形式的解密的配置节。</returns>
      <param name="encryptedXml">表示配置节的加密 XML 字符串。</param>
      <param name="protectionProvider">
        <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象。</param>
      <param name="protectedConfigSection">
        <see cref="T:System.Configuration.ProtectedConfigurationSection" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.DeleteStream(System.String)">
      <summary>删除对应用程序配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象。</summary>
      <param name="streamName">一个字符串，它表示对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.EncryptSection(System.String,System.Configuration.ProtectedConfigurationProvider,System.Configuration.ProtectedConfigurationSection)">
      <summary>对配置节进行加密，并将其作为字符串返回。</summary>
      <returns>以字符串形式表示的加密配置节。</returns>
      <param name="clearTextXml">表示要加密的配置节的 XML 字符串。</param>
      <param name="protectionProvider">
        <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象。</param>
      <param name="protectedConfigSection">
        <see cref="T:System.Configuration.ProtectedConfigurationSection" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.GetConfigPathFromLocationSubPath(System.String,System.String)">
      <summary>根据位置子路径返回应用程序配置文件的完整路径。</summary>
      <returns>表示应用程序配置文件完整路径的字符串。</returns>
      <param name="configPath">表示应用程序配置文件路径的字符串。</param>
      <param name="locationSubPath">配置文件的子路径位置。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.GetConfigType(System.String,System.Boolean)">
      <summary>返回表示配置对象类型的 <see cref="T:System.Type" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Type" /> 对象，它表示配置对象的类型。</returns>
      <param name="typeName">类型名称</param>
      <param name="throwOnError">true 以在出错时引发异常；否则，false</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.GetConfigTypeName(System.Type)">
      <summary>从表示配置类型的 <see cref="T:System.Type" /> 对象返回一个表示类型名称的字符串。</summary>
      <returns>表示配置类型的 <see cref="T:System.Type" /> 对象中表示类型名称的字符串。</returns>
      <param name="t">
        <see cref="T:System.Type" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.GetRestrictedPermissions(System.Configuration.Internal.IInternalConfigRecord,System.Security.PermissionSet@,System.Boolean@)">
      <summary>将配置与 <see cref="T:System.Security.PermissionSet" /> 对象关联。</summary>
      <param name="configRecord">
        <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> 对象。</param>
      <param name="permissionSet">要与配置关联的 <see cref="T:System.Security.PermissionSet" /> 对象。</param>
      <param name="isHostReady">如果指示配置宿主已完成关联权限的生成，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.GetStreamName(System.String)">
      <summary>返回一个字符串，它表示与对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象关联的配置文件名称。</summary>
      <returns>一个字符串，它表示与对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 关联的配置文件名称。</returns>
      <param name="configPath">表示应用程序配置文件路径的字符串。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.GetStreamNameForConfigSource(System.String,System.String)">
      <summary>返回一个字符串，它表示与对远程配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象关联的配置文件名称。</summary>
      <returns>一个字符串，它表示与对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象关联的配置文件名称。</returns>
      <param name="streamName">一个字符串，它表示与对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象关联的配置文件名称。</param>
      <param name="configSource">表示远程配置文件路径的字符串。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.GetStreamVersion(System.String)">
      <summary>返回与配置文件关联的 <see cref="T:System.IO.Stream" /> 对象的版本。</summary>
      <returns>与配置文件关联的 <see cref="T:System.IO.Stream" /> 对象的版本。</returns>
      <param name="streamName">一个字符串，它表示对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.Impersonate">
      <summary>指示宿主模拟并返回内部 .NET 结构要求的 <see cref="T:System.IDisposable" /> 对象。</summary>
      <returns>一个 <see cref="T:System.IDisposable" /> 值。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.Init(System.Configuration.Internal.IInternalConfigRoot,System.Object[])">
      <summary>初始化配置宿主。</summary>
      <param name="configRoot">配置根对象。</param>
      <param name="hostInitParams">包含用于初始化配置宿主的值的参数对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.InitForConfiguration(System.String@,System.String@,System.String@,System.Configuration.Internal.IInternalConfigRoot,System.Object[])">
      <summary>初始化配置对象。</summary>
      <param name="locationSubPath">配置文件的子路径位置。</param>
      <param name="configPath">表示应用程序配置文件路径的字符串。</param>
      <param name="locationConfigPath">表示配置路径位置的字符串。</param>
      <param name="configRoot">
        <see cref="T:System.Configuration.Internal.IInternalConfigRoot" /> 对象。</param>
      <param name="hostInitConfigurationParams">包含用于初始化配置宿主的值的参数对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsAboveApplication(System.String)">
      <summary>返回一个值，它指示配置文件在配置层次结构中所处的级别是否比应用程序配置高。</summary>
      <returns>如果配置文件在配置层次结构中所处的级别比应用程序配置高，则为 true；否则为 false。</returns>
      <param name="configPath">表示应用程序配置文件路径的字符串。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsConfigRecordRequired(System.String)">
      <summary>返回一个值，指示子配置路径是否需要子记录。</summary>
      <returns>如果子配置路径需要子记录，则为 true；否则为 false。</returns>
      <param name="configPath">表示应用程序配置文件路径的字符串。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsDefinitionAllowed(System.String,System.Configuration.ConfigurationAllowDefinition,System.Configuration.ConfigurationAllowExeDefinition)">
      <summary>确定是否允许应用程序配置对象具有不同的 <see cref="T:System.Type" /> 定义。</summary>
      <returns>如果允许应用程序配置对象具有不同的 <see cref="T:System.Type" /> 定义，则为 true；否则为 false。</returns>
      <param name="configPath">表示应用程序配置文件路径的字符串。</param>
      <param name="allowDefinition">
        <see cref="T:System.Configuration.ConfigurationAllowDefinition" /> 对象。</param>
      <param name="allowExeDefinition">
        <see cref="T:System.Configuration.ConfigurationAllowExeDefinition" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsFile(System.String)">
      <summary>返回一个值，指示由 <see cref="T:System.IO.Stream" /> 对象用于读取配置文件的文件路径是否为有效路径。</summary>
      <returns>如果由 <see cref="T:System.IO.Stream" /> 对象用于读取配置文件的路径是有效路径，则为 true；否则为 false。</returns>
      <param name="streamName">一个字符串，它表示对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsFullTrustSectionWithoutAptcaAllowed(System.Configuration.Internal.IInternalConfigRecord)">
      <summary>返回一个值，它指示配置节是否需要完全受信任的代码访问安全级别，并且不允许 <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> 特性禁用隐式链接请求。</summary>
      <returns>如果配置节需要完全受信任的代码访问安全级别并且不允许 <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> 特性禁用隐式链接请求，则为 true；否则为 false。</returns>
      <param name="configRecord">
        <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsInitDelayed(System.Configuration.Internal.IInternalConfigRecord)">
      <summary>返回一个值，它指示配置对象初始化是否被视为延迟。</summary>
      <returns>如果配置对象初始化被视为延迟，则为 true；否则为 false。</returns>
      <param name="configRecord">
        <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsLocationApplicable(System.String)">
      <summary>返回一个值，它指示配置对象是否支持位置标记。</summary>
      <returns>如果配置对象支持位置标记，则为 true；否则为 false。</returns>
      <param name="configPath">表示应用程序配置文件路径的字符串。</param>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigHost.IsRemote">
      <summary>返回一个值，该值指示配置是否为远程配置。</summary>
      <returns>如果配置为远程配置，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsSecondaryRoot(System.String)">
      <summary>返回一个值，它指示配置路径是否指向应将其内容视为根的配置节点。</summary>
      <returns>如果配置路径指向应将其内容视为根的配置节点，则为 true；否则为 false。</returns>
      <param name="configPath">表示应用程序配置文件路径的字符串。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsTrustedConfigPath(System.String)">
      <summary>返回一个指示配置路径是否受信任的值。</summary>
      <returns>如果配置路径受信任，则为 true；否则为 false。</returns>
      <param name="configPath">表示应用程序配置文件路径的字符串。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.OpenStreamForRead(System.String)">
      <summary>打开一个 <see cref="T:System.IO.Stream" />，以便读取配置文件。</summary>
      <returns>
        <see cref="T:System.IO.Stream" /> 对象。</returns>
      <param name="streamName">一个字符串，它表示对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.OpenStreamForRead(System.String,System.Boolean)">
      <summary>打开一个 <see cref="T:System.IO.Stream" /> 对象，以便读取配置文件。</summary>
      <returns>返回由 <paramref name="streamName" /> 指定的 <see cref="T:System.IO.Stream" /> 对象。</returns>
      <param name="streamName">一个字符串，它表示对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</param>
      <param name="assertPermissions">如果断言权限，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.OpenStreamForWrite(System.String,System.String,System.Object@)">
      <summary>打开一个 <see cref="T:System.IO.Stream" /> 对象，以便写入配置文件或写入用于生成配置文件的临时文件。 允许将 <see cref="T:System.IO.Stream" /> 对象指定为模板，以便复制文件特性。</summary>
      <returns>
        <see cref="T:System.IO.Stream" /> 对象。</returns>
      <param name="streamName">一个字符串，它表示对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</param>
      <param name="templateStreamName">`<see cref="T:System.IO.Stream" /> 对象的名称，从该对象复制文件特性作为模板。</param>
      <param name="writeContext">
        <see cref="T:System.IO.Stream" /> 对象的写上下文。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.OpenStreamForWrite(System.String,System.String,System.Object@,System.Boolean)">
      <summary>打开一个 <see cref="T:System.IO.Stream" /> 对象，以便写入配置文件。 允许将 <see cref="T:System.IO.Stream" /> 对象指定为模板，以便复制文件特性。</summary>
      <returns>返回由 <paramref name="streamName" /> 指定的 <see cref="T:System.IO.Stream" /> 对象。</returns>
      <param name="streamName">一个字符串，它表示对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</param>
      <param name="templateStreamName">要将其中的文件特性复制为模板的 <see cref="T:System.IO.Stream" /> 的名称。</param>
      <param name="writeContext">对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的写上下文。</param>
      <param name="assertPermissions">如果断言权限，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.PrefetchAll(System.String,System.String)">
      <summary>返回一个值，它指示是否可由指定的 <see cref="T:System.IO.Stream" /> 对象读取整个配置文件。</summary>
      <returns>如果由 <paramref name="streamName" /> 指定的 <see cref="T:System.IO.Stream" /> 对象可以读取整个配置文件，则为 true；否则为 false。</returns>
      <param name="configPath">表示应用程序配置文件路径的字符串。</param>
      <param name="streamName">一个字符串，它表示对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.PrefetchSection(System.String,System.String)">
      <summary>指示 <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> 对象读取其关联配置文件的指定节。</summary>
      <returns>如果 <see cref="T:System.IO.Stream" /> 对象可读取由 <paramref name="sectionGroupName" /> 和 <paramref name="sectionName" /> 指定的配置文件节，则为 true；否则为 false。</returns>
      <param name="sectionGroupName">表示配置文件节组标识名的字符串。</param>
      <param name="sectionName">表示配置文件节标识名的字符串。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.RequireCompleteInit(System.Configuration.Internal.IInternalConfigRecord)">
      <summary>指示新的配置记录需要完整的初始化。</summary>
      <param name="configRecord">
        <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.StartMonitoringStreamForChanges(System.String,System.Configuration.Internal.StreamChangeCallback)">
      <summary>指示 <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> 对象对关联的 <see cref="T:System.IO.Stream" /> 对象进行监视，以了解配置文件的更改情况。</summary>
      <returns>包含更改的配置设置的 <see cref="T:System.Object" />。</returns>
      <param name="streamName">一个字符串，它表示对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</param>
      <param name="callback">一个 <see cref="T:System.Configuration.Internal.StreamChangeCallback" /> 对象，它用于接收返回的表示配置文件中的更改的数据。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.StopMonitoringStreamForChanges(System.String,System.Configuration.Internal.StreamChangeCallback)">
      <summary>指示 <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> 对象停止为了解配置文件的更改情况而对关联的 <see cref="T:System.IO.Stream" /> 对象进行的监视。</summary>
      <param name="streamName">一个字符串，它表示对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</param>
      <param name="callback">
        <see cref="T:System.Configuration.Internal.StreamChangeCallback" /> 对象。</param>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigHost.SupportsChangeNotifications">
      <summary>返回一个值，它指示宿主配置是否支持更改通知。</summary>
      <returns>如果配置支持更改通知，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigHost.SupportsLocation">
      <summary>返回一个值，它指示宿主配置是否支持位置标记。</summary>
      <returns>如果配置支持位置标记，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigHost.SupportsPath">
      <summary>返回一个值，它指示宿主配置是否支持路径标记。</summary>
      <returns>如果配置支持路径标记，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigHost.SupportsRefresh">
      <summary>返回一个值，它指示宿主配置是否支持配置刷新。</summary>
      <returns>如果配置支持配置刷新，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.VerifyDefinitionAllowed(System.String,System.Configuration.ConfigurationAllowDefinition,System.Configuration.ConfigurationAllowExeDefinition,System.Configuration.Internal.IConfigErrorInfo)">
      <summary>验证是否允许对配置记录使用配置定义。</summary>
      <param name="configPath">表示应用程序配置文件路径的字符串。</param>
      <param name="allowDefinition">
        <see cref="P:System.Configuration.SectionInformation.AllowDefinition" /> 对象。</param>
      <param name="allowExeDefinition">一个 <see cref="T:System.Configuration.ConfigurationAllowExeDefinition" /> 对象</param>
      <param name="errorInfo">
        <see cref="T:System.Configuration.Internal.IConfigErrorInfo" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.WriteCompleted(System.String,System.Boolean,System.Object)">
      <summary>指示已完成所有写入配置文件操作。</summary>
      <param name="streamName">一个字符串，它表示对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</param>
      <param name="success">如果已成功完成写入配置文件操作，则为 true；否则为 false。</param>
      <param name="writeContext">对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的写上下文。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.WriteCompleted(System.String,System.Boolean,System.Object,System.Boolean)">
      <summary>指示已完成所有写入配置文件操作，并指定是否应断言权限。</summary>
      <param name="streamName">一个字符串，它表示对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</param>
      <param name="success">如果指示已成功完成写入操作，则为 true；否则为 false。</param>
      <param name="writeContext">对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的写上下文。</param>
      <param name="assertPermissions">如果断言权限，则为 true；否则为 false。</param>
    </member>
    <member name="T:System.Configuration.Internal.IInternalConfigRecord">
      <summary>定义内部 .NET 结构用于支持创建新配置记录的接口。</summary>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigRecord.ConfigPath">
      <summary>获取表示配置文件路径的字符串。</summary>
      <returns>表示配置文件路径的字符串。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRecord.GetLkgSection(System.String)">
      <summary>返回一个对象，该对象表示最后所知的好的 (LKG) 配置的一个配置节。</summary>
      <returns>一个 <see cref="T:System.Object" /> 实例，表示 <paramref name="configKey" /> 指定的最后所知的好的配置节。</returns>
      <param name="configKey">表示配置节的键的字符串。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRecord.GetSection(System.String)">
      <summary>返回一个 <see cref="T:System.Object" /> 实例，该实例表示配置文件的一个节。</summary>
      <returns>一个 <see cref="T:System.Object" /> 实例，表示配置文件的一个节。</returns>
      <param name="configKey">表示配置节的键的字符串。</param>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigRecord.HasInitErrors">
      <summary>返回一个值，该值指示在配置对象的初始化期间是否发生了错误。</summary>
      <returns>如果在配置对象的初始化期间发生了错误，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRecord.RefreshSection(System.String)">
      <summary>导致配置对象的指定节被重新初始化。</summary>
      <param name="configKey">一个字符串，表示要刷新的配置节的键。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRecord.Remove">
      <summary>移除配置记录。</summary>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigRecord.StreamName">
      <summary>返回对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</summary>
      <returns>一个字符串，表示对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRecord.ThrowIfInitErrors">
      <summary>向配置对象授予权限，使其在初始化期间发生错误时引发异常。</summary>
    </member>
    <member name="T:System.Configuration.Internal.IInternalConfigRoot">
      <summary>定义由内部 .NET 结构用于支持配置根对象的接口。</summary>
    </member>
    <member name="E:System.Configuration.Internal.IInternalConfigRoot.ConfigChanged">
      <summary>表示处理 <see cref="T:System.Configuration.Internal.IInternalConfigRoot" /> 对象的 <see cref="E:System.Configuration.Internal.IInternalConfigRoot.ConfigChanged" /> 事件的方法。</summary>
    </member>
    <member name="E:System.Configuration.Internal.IInternalConfigRoot.ConfigRemoved">
      <summary>表示处理 <see cref="T:System.Configuration.Internal.IInternalConfigRoot" /> 对象的 <see cref="E:System.Configuration.Internal.IInternalConfigRoot.ConfigRemoved" /> 事件的方法。</summary>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRoot.GetConfigRecord(System.String)">
      <summary>返回一个 <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> 对象，表示由配置路径指定的配置。</summary>
      <returns>一个 <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> 对象，表示由 <paramref name="configPath" /> 指定的配置。</returns>
      <param name="configPath">表示配置文件路径的字符串。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRoot.GetSection(System.String,System.String)">
      <summary>返回一个 <see cref="T:System.Object" />，表示配置文件某一节中的数据。</summary>
      <returns>一个 <see cref="T:System.Object" />，表示配置文件某一节中的数据。</returns>
      <param name="section">表示配置文件某一节的字符串。</param>
      <param name="configPath">表示配置文件路径的字符串。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRoot.GetUniqueConfigPath(System.String)">
      <summary>返回一个值，它表示具有配置数据的最近配置上级的文件路径。</summary>
      <returns>返回一个字符串，它表示具有配置数据的最近配置上级的文件路径。</returns>
      <param name="configPath">配置文件的路径。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRoot.GetUniqueConfigRecord(System.String)">
      <summary>返回一个 <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> 对象，表示给定配置路径的唯一配置记录。</summary>
      <returns>一个 <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> 对象，表示给定配置路径的唯一配置记录。</returns>
      <param name="configPath">配置文件的路径。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRoot.Init(System.Configuration.Internal.IInternalConfigHost,System.Boolean)">
      <summary>初始化配置对象。</summary>
      <param name="host">
        <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> 对象。</param>
      <param name="isDesignTime">如果在设计时，则为 true；如果在运行时，则为 false。</param>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigRoot.IsDesignTime">
      <summary>返回一个值，它指示配置是否为设计时配置。</summary>
      <returns>如果配置是设计时配置，则为 true；如果配置不是设计时配置，则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRoot.RemoveConfig(System.String)">
      <summary>查找并移除给定配置路径的配置记录及其所有子级。</summary>
      <param name="configPath">配置文件的路径。</param>
    </member>
    <member name="T:System.Configuration.Internal.IInternalConfigSettingsFactory">
      <summary>定义配置系统用于设置 <see cref="T:System.Configuration.ConfigurationSettings" /> 类的接口。</summary>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigSettingsFactory.CompleteInit">
      <summary>指示已完成配置系统的初始化。</summary>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigSettingsFactory.SetConfigurationSystem(System.Configuration.Internal.IInternalConfigSystem,System.Boolean)">
      <summary>为配置系统提供特定于 ASP.NET 的分层配置设置和扩展。</summary>
      <param name="internalConfigSystem">
        <see cref="T:System.Configuration.Internal.IInternalConfigSystem" /> 对象，由 <see cref="T:System.Configuration.ConfigurationSettings" /> 类使用。</param>
      <param name="initComplete">如果配置系统的初始化过程已完成，则为 true；否则为 false。</param>
    </member>
    <member name="T:System.Configuration.Internal.IInternalConfigSystem">
      <summary>定义 .NET Framework 用于初始化应用程序配置属性的接口。</summary>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigSystem.GetSection(System.String)">
      <summary>根据指定的键返回配置对象。</summary>
      <returns>配置对象。</returns>
      <param name="configKey">配置键值。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigSystem.RefreshConfig(System.String)">
      <summary>根据指定的节名称刷新配置系统。</summary>
      <param name="sectionName">配置节的名称。</param>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigSystem.SupportsUserConfig">
      <summary>获取一个值，指示是否支持用户配置。</summary>
      <returns>如果支持用户配置，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Configuration.Internal.InternalConfigEventArgs">
      <summary>定义一个类，允许 .NET Framework 基础结构为配置事件指定事件参数。</summary>
    </member>
    <member name="M:System.Configuration.Internal.InternalConfigEventArgs.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Configuration.Internal.InternalConfigEventArgs" /> 类的新实例。</summary>
      <param name="configPath">配置路径。</param>
    </member>
    <member name="P:System.Configuration.Internal.InternalConfigEventArgs.ConfigPath">
      <summary>获取或设置与 <see cref="T:System.Configuration.Internal.InternalConfigEventArgs" /> 对象相关的配置路径。</summary>
      <returns>一个字符串值，指定配置路径。</returns>
    </member>
    <member name="T:System.Configuration.Internal.InternalConfigEventHandler">
      <summary>定义 .NET Framework 基础结构用于支持配置事件的类。</summary>
      <param name="sender">事件的源对象。</param>
      <param name="e">配置事件参数。</param>
    </member>
    <member name="T:System.Configuration.Internal.StreamChangeCallback">
      <summary>表示当监视的流发生改变时主机要调用的方法。</summary>
      <param name="streamName">对配置文件执行 I/O 任务的 <see cref="T:System.IO.Stream" /> 对象的名称。</param>
    </member>
    <member name="T:System.Configuration.Provider.ProviderBase">
      <summary>提供了针对可扩展的提供程序模型的基实现。</summary>
    </member>
    <member name="M:System.Configuration.Provider.ProviderBase.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.Provider.ProviderBase" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Configuration.Provider.ProviderBase.Description">
      <summary>获取一条简短的易懂描述，它适合在管理工具或其他用户界面 (UI) 中显示。</summary>
      <returns>简短的易懂描述，适合在管理工具或其他 UI 中显示。</returns>
    </member>
    <member name="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>初始化提供程序。</summary>
      <param name="name">该提供程序的友好名称。</param>
      <param name="config">名称/值对的集合，表示在配置中为该提供程序指定的、提供程序特定的特性。</param>
      <exception cref="T:System.ArgumentNullException">提供程序的名称是 null。</exception>
      <exception cref="T:System.ArgumentException">提供程序的名称长度为零。</exception>
      <exception cref="T:System.InvalidOperationException">提供程序初始化完成后，将尝试调用该提供程序上的 <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />。</exception>
    </member>
    <member name="P:System.Configuration.Provider.ProviderBase.Name">
      <summary>获得一个友好名称，用于在配置过程中引用提供程序。</summary>
      <returns>用于在配置过程中引用提供程序的友好名称。</returns>
    </member>
    <member name="T:System.Configuration.Provider.ProviderCollection">
      <summary>表示从 <see cref="T:System.Configuration.Provider.ProviderBase" /> 继承的提供程序对象的集合。</summary>
    </member>
    <member name="M:System.Configuration.Provider.ProviderCollection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.Provider.ProviderCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.Provider.ProviderCollection.Add(System.Configuration.Provider.ProviderBase)">
      <summary>向集合中添加提供程序。</summary>
      <param name="provider">要添加的提供程序。</param>
      <exception cref="T:System.NotSupportedException">该集合为只读。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="provider" /> 的 <see cref="P:System.Configuration.Provider.ProviderBase.Name" /> 为 null。 - 或 - <paramref name="provider" /> 的 <see cref="P:System.Configuration.Provider.ProviderBase.Name" /> 的长度小于 1。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Configuration.Provider.ProviderCollection.Clear">
      <summary>从集合中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">集合被设置为只读。</exception>
    </member>
    <member name="M:System.Configuration.Provider.ProviderCollection.CopyTo(System.Configuration.Provider.ProviderBase[],System.Int32)">
      <summary>从指定索引处开始，将集合中的内容复制到给定数组。</summary>
      <param name="array">要将集合的元素复制到的数组。</param>
      <param name="index">集合项的索引，在此索引处开始进行复制。</param>
    </member>
    <member name="P:System.Configuration.Provider.ProviderCollection.Count">
      <summary>获取集合中提供程序的数目。</summary>
      <returns>集合中提供程序的数目。</returns>
    </member>
    <member name="M:System.Configuration.Provider.ProviderCollection.GetEnumerator">
      <summary>返回一个对象，该对象实现 <see cref="T:System.Collections.IEnumerator" /> 接口以循环访问集合。</summary>
      <returns>实现 <see cref="T:System.Collections.IEnumerator" /> 以循环访问集合的对象。</returns>
    </member>
    <member name="P:System.Configuration.Provider.ProviderCollection.IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否为同步的（线程安全）。</summary>
      <returns>所有情况下均为 false。</returns>
    </member>
    <member name="P:System.Configuration.Provider.ProviderCollection.Item(System.String)">
      <summary>获取具有指定名称的提供程序。</summary>
      <returns>具有指定名称的提供程序。</returns>
      <param name="name">标识提供程序的键。</param>
    </member>
    <member name="M:System.Configuration.Provider.ProviderCollection.Remove(System.String)">
      <summary>从集合中移除提供程序。</summary>
      <param name="name">要移除的提供程序的名称。</param>
      <exception cref="T:System.NotSupportedException">集合已被设置为只读。</exception>
    </member>
    <member name="M:System.Configuration.Provider.ProviderCollection.SetReadOnly">
      <summary>将集合设置为只读。</summary>
    </member>
    <member name="P:System.Configuration.Provider.ProviderCollection.SyncRoot">
      <summary>获取当前对象。</summary>
      <returns>当前对象。</returns>
    </member>
    <member name="M:System.Configuration.Provider.ProviderCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的数组索引开始，将 <see cref="T:System.Configuration.Provider.ProviderCollection" /> 的元素复制到一个数组中。</summary>
      <param name="array">要将集合的元素复制到的数组。</param>
      <param name="index">数组索引，从该索引处开始复制集合中的提供程序实例。</param>
    </member>
    <member name="T:System.Configuration.Provider.ProviderException">
      <summary>当发生配置提供程序错误时引发的异常。 如果提供程序内发生的内部错误没有映射到其他已存在的异常类，则提供程序也使用此异常类来引发异常。</summary>
    </member>
    <member name="M:System.Configuration.Provider.ProviderException.#ctor">
      <summary>创建 <see cref="T:System.Configuration.Provider.ProviderException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.Provider.ProviderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>创建 <see cref="T:System.Configuration.Provider.ProviderException" /> 类的新实例。</summary>
      <param name="info">包含要反序列化的信息的对象。</param>
      <param name="context">有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Configuration.Provider.ProviderException.#ctor(System.String)">
      <summary>创建 <see cref="T:System.Configuration.Provider.ProviderException" /> 类的新实例。</summary>
      <param name="message">描述引发该 <see cref="T:System.Configuration.Provider.ProviderException" /> 的原因的消息。</param>
    </member>
    <member name="M:System.Configuration.Provider.ProviderException.#ctor(System.String,System.Exception)">
      <summary>创建 <see cref="T:System.Configuration.Provider.ProviderException" /> 类的新实例。</summary>
      <param name="message">描述引发该 <see cref="T:System.Configuration.Provider.ProviderException" /> 的原因的消息。</param>
      <param name="innerException">导致引发此 <see cref="T:System.Configuration.Provider.ProviderException" /> 的异常。</param>
    </member>
  </members>
</doc>