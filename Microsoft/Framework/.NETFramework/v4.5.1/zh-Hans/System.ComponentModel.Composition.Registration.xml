<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.Composition.Registration</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.Composition.Registration.ExportBuilder">
      <summary>表示基于规则的导出的配置信息。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ExportBuilder.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Registration.ExportBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ExportBuilder.AddMetadata(System.String,System.Func{System.Type,System.Object})">
      <summary>指定要添加到导出的元数据键/值对。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="name">元数据密钥。</param>
      <param name="itemFunc">一个获取类型并返回元数据的函数。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ExportBuilder.AddMetadata(System.String,System.Object)">
      <summary>指定要添加到导出的元数据键/值对。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="name">元数据密钥。</param>
      <param name="value">元数据的值。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ExportBuilder.AsContractName(System.String)">
      <summary>指定应在给定协定名称下的导出。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="contractName">协定名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contractName" /> 是空字符串。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ExportBuilder.AsContractType``1">
      <summary>指定导出是否应使用给定协定类型。</summary>
      <returns>允许链接的当前对象。</returns>
      <typeparam name="T">要使用的协定的类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ExportBuilder.AsContractType(System.Type)">
      <summary>指定导出是否应使用给定协定类型。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="type">要使用的协定类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ExportBuilder.Inherited">
      <summary>指定应继承的此导出。</summary>
      <returns>允许链接的当前对象。</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Registration.ImportBuilder">
      <summary>表示基于规则的导入的配置信息。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ImportBuilder.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Registration.ImportBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ImportBuilder.AllowDefault">
      <summary>指定应允许默认值的导入。</summary>
      <returns>允许链接的当前对象。</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ImportBuilder.AllowRecomposition">
      <summary>指定应重新组合的导入。</summary>
      <returns>允许链接的当前对象。</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ImportBuilder.AsContractName(System.String)">
      <summary>指定应在给定协定名称下的导入。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="contractName">协定名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contractName" /> 是空字符串。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ImportBuilder.AsContractType``1">
      <summary>指定导入是否应使用给定协定类型。</summary>
      <returns>允许链接的当前对象。</returns>
      <typeparam name="T">要使用的协定的类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ImportBuilder.AsContractType(System.Type)">
      <summary>指定导入是否应使用给定协定类型。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="type">要使用的协定类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ImportBuilder.AsMany(System.Boolean)">
      <summary>指定导入的基数。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="isMany">指定多个导入，则为 true；指定单个导入，则为 false。 默认值为 true。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ImportBuilder.RequiredCreationPolicy(System.ComponentModel.Composition.CreationPolicy)">
      <summary>指定导入需要的创建策略。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="requiredCreationPolicy">导入需要的创建策略。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ImportBuilder.Source(System.ComponentModel.Composition.ImportSource)">
      <summary>指定可满足此导入范围的值。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="source">指定一个值可能满足此导入范围。</param>
    </member>
    <member name="T:System.ComponentModel.Composition.Registration.ParameterImportBuilder">
      <summary>表示配置，用于基于规则的构造函数参数导入。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ParameterImportBuilder.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Registration.ParameterImportBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ParameterImportBuilder.Import``1">
      <summary>定义指定参数作为一个导入的参数。</summary>
      <returns>但此方法应只引用并未调用默认的<paramref name="T" /></returns>
      <typeparam name="T">要定义的参数的类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ParameterImportBuilder.Import``1(System.Action{System.ComponentModel.Composition.Registration.ImportBuilder})">
      <summary>定义指定参数作为具有指定配置导入的参数。</summary>
      <returns>但此方法应只引用并未调用默认的<paramref name="T" /></returns>
      <param name="configure">一个包含导入的参数的配置信息的对象。</param>
      <typeparam name="T">要定义的参数的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="configure" /> 为 null。</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Registration.PartBuilder">
      <summary>表示规则，其装饰一组匹配类型，这些类型具有 Managed Extensibility Framework (MEF) 属性。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.AddMetadata(System.String,System.Func{System.Type,System.Object})">
      <summary>向类型匹配添加元数据。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="name">元数据密钥。</param>
      <param name="itemFunc">返回元数据值的函数，给定的目标类型。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.AddMetadata(System.String,System.Object)">
      <summary>向类型匹配添加元数据。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="name">元数据密钥。</param>
      <param name="value">元数据的值。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.Export">
      <summary>指定应导出的匹配类型。</summary>
      <returns>允许链接的当前对象。</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.Export``1">
      <summary>使用指定的协定类型，指定应导出的匹配类型。</summary>
      <returns>允许链接的当前对象。</returns>
      <typeparam name="T">此协定的类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.Export(System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})">
      <summary>指定应导出的匹配类型，并为结果导出提供配置信息。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="exportConfiguration">一个包含有关导出的配置信息的的对象。 默认值为 null。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.Export``1(System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})">
      <summary>通过使用指定协定类型指定应导出的匹配类型，并为结果导出提供配置信息。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="exportConfiguration">一个包含有关导出的配置信息的的对象。 默认值为 null。</param>
      <typeparam name="T">此协定的类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.ExportInterfaces">
      <summary>指定所有应导出的匹配类型的接口。</summary>
      <returns>允许链接的当前对象。</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.ExportInterfaces(System.Predicate{System.Type})">
      <summary>在应导出的匹配类型指定一组接口。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="interfaceFilter">指定接口集的谓语。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="interfaceFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.ExportInterfaces(System.Predicate{System.Type},System.Action{System.Type,System.ComponentModel.Composition.Registration.ExportBuilder})">
      <summary>在应导出的匹配类型指定一组接口，并为结果导出提供配置信息。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="interfaceFilter">指定接口集的谓语。</param>
      <param name="exportConfiguration">一个包含有关导出的配置信息的的对象。 默认值为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="interfaceFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties``1(System.Predicate{System.Reflection.PropertyInfo})">
      <summary>使用指定的协定类型，在导出匹配的类型指定一组属性。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="propertyFilter">指定属性集的谓语。</param>
      <typeparam name="T">此协定的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties(System.Predicate{System.Reflection.PropertyInfo})">
      <summary>在匹配类型上指定一组应导出的属性。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="propertyFilter">指定属性集的谓语。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ExportBuilder})">
      <summary>在应导出的匹配类型指定一组属性，并为这些导出提供配置信息。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="propertyFilter">指定属性集的谓语。</param>
      <param name="exportConfiguration">一个包含有关导出的配置信息的的对象。 默认值为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties``1(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ExportBuilder})">
      <summary>通过使用指定协定类型在应被导出的匹配类型上指定一组属性，并为结果导出提供配置信息。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="propertyFilter">指定属性集的谓语。</param>
      <param name="exportConfiguration">一个包含有关导出的配置信息的的对象。 默认值为 null。</param>
      <typeparam name="T">此协定的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties``1(System.Predicate{System.Reflection.PropertyInfo})">
      <summary>使用指定的协定类型，在应标记为导入的匹配类型上指定一组属性。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="propertyFilter">指定属性集的谓语。</param>
      <typeparam name="T">此协定的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties(System.Predicate{System.Reflection.PropertyInfo})">
      <summary>在应导入的匹配类型上指定一组属性。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="propertyFilter">指定属性集的谓语。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties``1(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ImportBuilder})">
      <summary>通过使用指定协定类型在应标记为导入的匹配类型上指定一组属性，并为结果导入提供配置信息。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="propertyFilter">指定属性集的谓语。</param>
      <param name="importConfiguration">一个包含有关导入的配置信息的的对象。 默认值为 null。</param>
      <typeparam name="T">此协定的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ImportBuilder})">
      <summary>在应标记为导入的匹配类型上指定一组属性，并为结果导入提供配置信息。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="propertyFilter">指定属性集的谓语。</param>
      <param name="importConfiguration">一个包含有关导入的配置信息的的对象。 默认值为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.SelectConstructor(System.Func{System.Reflection.ConstructorInfo[],System.Reflection.ConstructorInfo})">
      <summary>指定应用作个导入的构造函数匹配类型的构造函数。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="constructorFilter">从构造函数集中选择一个构造函数的函数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructorFilter" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="constructorFilter" /> 返回 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="constructorFilter" /> 返回一个不与目标类型关联的构造函数。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.SelectConstructor(System.Func{System.Reflection.ConstructorInfo[],System.Reflection.ConstructorInfo},System.Action{System.Reflection.ParameterInfo,System.ComponentModel.Composition.Registration.ImportBuilder})">
      <summary>指定应用作导入构造函数匹配类型的构造函数，并为结果导入提供配置信息。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="constructorFilter">从构造函数集中选择一个构造函数的函数。</param>
      <param name="importConfiguration">一个包含导入构造函数的配置信息的对象。 默认值为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructorFilter" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="constructorFilter" /> 返回 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="constructorFilter" /> 返回一个不与目标类型关联的构造函数。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.SetCreationPolicy(System.ComponentModel.Composition.CreationPolicy)">
      <summary>指定匹配类型的创建策略。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="creationPolicy">创建策略。</param>
    </member>
    <member name="T:System.ComponentModel.Composition.Registration.PartBuilder`1">
      <summary>扩展 <see cref="T:System.ComponentModel.Composition.Registration.PartBuilder" /> 类，以允许使用表达式选择成员。</summary>
      <typeparam name="T">目标的类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder`1.ExportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
      <summary>指定应导出为指定的协定类型的属性。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="propertyFilter">生成对目标属性的引用的表达式。</param>
      <typeparam name="TContract">协定的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder`1.ExportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
      <summary>指定属性应导出。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="propertyFilter">生成对目标属性的引用的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder`1.ExportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})">
      <summary>指定应导出作为指定的协定类型的属性，并为结果导出提供配置信息。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="propertyFilter">生成对目标属性的引用的表达式。</param>
      <param name="exportConfiguration">一个包含有关导出的配置信息的的对象。 默认值为 null。</param>
      <typeparam name="TContract">协定的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder`1.ExportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})">
      <summary>指定应导出的属性，并为结果导出提供配置信息。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="propertyFilter">生成对目标属性的引用的表达式。</param>
      <param name="exportConfiguration">一个包含有关导出的配置信息的的对象。 默认值为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder`1.ImportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
      <summary>使用协定名称指定应导入的属性。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="propertyFilter">生成对目标属性的引用的表达式。</param>
      <typeparam name="TContract">要使用的协定类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder`1.ImportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
      <summary>指定属性应导入。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="propertyFilter">生成对目标属性的引用的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder`1.ImportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.ComponentModel.Composition.Registration.ImportBuilder})">
      <summary>使用指定的协定名称指定应导入的属性，并为结果导入提供配置信息。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="propertyFilter">生成对目标属性的引用的表达式。</param>
      <param name="importConfiguration">一个包含有关导入的配置信息的的对象。 默认值为 null。</param>
      <typeparam name="TContract">要使用的协定名称。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder`1.ImportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.ComponentModel.Composition.Registration.ImportBuilder})">
      <summary>指定应导入的属性，并为结果导入提供配置信息。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="propertyFilter">生成对目标属性的引用的表达式。</param>
      <param name="importConfiguration">一个包含有关导入的配置信息的的对象。 默认值为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder`1.SelectConstructor(System.Linq.Expressions.Expression{System.Func{System.ComponentModel.Composition.Registration.ParameterImportBuilder,`0}})">
      <summary>指定应用作导入的构造函数匹配类型的构造函数。</summary>
      <returns>允许链接的当前对象。</returns>
      <param name="constructorFilter">通过使用所需的构造函数构造 <paramref name="T" /> 的表达式。 它只用于引用，而不是实际调用。</param>
    </member>
    <member name="T:System.ComponentModel.Composition.Registration.RegistrationBuilder">
      <summary>表示反射上下文，其有相关的协定，描述了规则，该规则用于修饰具有 Managed Extensibility Framework (MEF) 属性的条目。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.RegistrationBuilder.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Registration.RegistrationBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType``1">
      <summary>获取委托规则适用于所有类型对所指定的谓语的强类型的对象。</summary>
      <returns>表示该规则的强类型对象。</returns>
      <typeparam name="T">类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType(System.Type)">
      <summary>获取表示适用于指定类型的规则的对象。</summary>
      <returns>表示规则的对象。</returns>
      <param name="type">类型。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom``1">
      <summary>获取委托规则适用于所有类型实现了指定类型，但是，不适用于一个指定类型的强类型的对象。</summary>
      <returns>表示该规则的强类型对象。</returns>
      <typeparam name="T">类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom(System.Type)">
      <summary>获取表示实现指定所有类型，但其不适用于指定类型的规则的对象。</summary>
      <returns>表示规则的对象。</returns>
      <param name="type">类型。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching(System.Predicate{System.Type})">
      <summary>获取表示适用于匹配指定谓词的所有类型的规则的对象。</summary>
      <returns>表示规则的对象。</returns>
      <param name="typeFilter">要匹配的谓词。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching``1(System.Predicate{System.Type})">
      <summary>获取委托规则适用于所有类型对所指定的谓语的强类型的对象。</summary>
      <returns>表示该规则的强类型对象。</returns>
      <param name="typeFilter">要匹配的谓词。</param>
      <typeparam name="T">要返回的 <see cref="T:System.ComponentModel.Composition.Registration.PartBuilder'1" /> 对象的类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})">
      <summary>为在此反应上下文中指定的成员提供自定义特性的列表。</summary>
      <returns>表示此反射上下文中指定的成员的自定义特性的集合。</returns>
      <param name="member">将返回的自定义特性成员。</param>
      <param name="declaredAttributes">在其当前上下文中的成员特性的集合。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})">
      <summary>为在此反应上下文中指定的参数提供自定义特性的列表。</summary>
      <returns>表示此反射上下文中指定的参数的自定义特性的集合。</returns>
      <param name="parameter">其自定义属性将返回的参数。</param>
      <param name="declaredAttributes">在其当前上下文中的参数特性的集合。</param>
    </member>
  </members>
</doc>