<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.Build</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Build.Construction.ElementLocation">
      <summary>在文件中的 XML 节点的位置。  通过 MSBuild API 对项目 XML 的进行的任何编辑都将使该 XML 中的位置失效，除非重新加载该 XML。</summary>
    </member>
    <member name="M:Microsoft.Build.Construction.ElementLocation.#ctor">
      <summary>初始化 <see cref="T:Microsoft.Build.Construction.ElementLocation" /> 类的新实例。</summary>
    </member>
    <member name="P:Microsoft.Build.Construction.ElementLocation.Column">
      <summary>在其文件中存在的该元素的列号。  第一列编号为 1。  零指示一个“未知位置”。</summary>
      <returns>返回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ElementLocation.Equals(System.Object)">
      <summary>重写 Equals 以使相同字段表示相等对象。</summary>
      <returns>如果对象相等，则返回 true；否则返回 false。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ElementLocation.File">
      <summary>该特定元素的源文件。 它可能不同于 ProjectFile，例如，如果它是导入的部分或源自于目标文件。  如果未知，则返回空字符串。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ElementLocation.GetHashCode">
      <summary>获取合理的哈希代码。</summary>
      <returns>返回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ElementLocation.Line">
      <summary>在其文件中存在的该元素的行号。  第一行编号为 1。  零指示一个“未知位置”。</summary>
      <returns>返回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ElementLocation.LocationString">
      <summary>进入消息的适用于替换的形式的位置。  示例:”c:\dir\proj.csproj (12,34)“调用此示例创建并形成一新的字符串。  只有在极少情况下位置应进入信息内部。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ElementLocation.ToString">
      <summary>元素定位。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:Microsoft.Build.Construction.ProjectChooseElement">
      <summary>表示 MSBuild 项目中的 Choose 元素 (MSBuild)。</summary>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectChooseElement.Condition">
      <summary>获取一个不存在的条件，该条件隐式为真。</summary>
      <returns>返回一个 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectChooseElement.ConditionLocation">
      <summary>此构造函数不允许这些情况，因此不应调用它。</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectChooseElement.OtherwiseElement">
      <summary>获取任何 Otherwise 元素 (MSBuild) 子级。</summary>
      <returns>返回任何 Otherwise 子级。 如果不存在任何 Otherwise 子级，则返回 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectChooseElement.WhenElements">
      <summary>获取所有 When 元素 (MSBuild) 子级。</summary>
      <returns>返回所有 When 子级。 始终至少有一个 When 子级。</returns>
    </member>
    <member name="T:Microsoft.Build.Construction.ProjectElement">
      <summary>MSBuild 构造对象模型元素的抽象基类。</summary>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectElement.AllParents">
      <summary>此元素的所有父元素（直至 ProjectRootElement）。  如果这是 ProjectRootElement，则 None。  如果还没有附加到一个父级，则没有。</summary>
      <returns>返回可枚举所有父元素的枚举器。 没有父元素，如果对象元素是 ProjectRootElement 或者还没有附加到一个父级元素。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectElement.Condition">
      <summary>获取或设置 Condition 值。  它将返回条件特性合法的空字符串 IFF ，但它不存在或者没有值。  它将返回该元素条件特性非法的 null IFF。  如果要设置的值为空，则移除该特性。  如果设置条件不适用于那些元素，派生类引发 <see cref="T:System.InvalidOperationException" /> 是可能的。</summary>
      <returns>返回 Condition 特性的值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectElement.ConditionLocation">
      <summary>此元素“条件”特性的位置（如果有）。  如果没有这样的属性，则返回 null。</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectElement.ContainingProject">
      <summary>包含该 XML 的 ProjectRootElement(可以导入) 。  不能为 null。</summary>
      <returns>返回包含此项目的项目根容器。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectElement.Label">
      <summary>获取或设置 Label 值。  如果该特性不存在，则返回空字符串。  如果要设置的值为空，则移除该特性。</summary>
      <returns>返回标签。 如果标签不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectElement.LabelLocation">
      <summary>此元素“标签”特性的位置（如果有）。  如果没有这样的属性，则返回 null。</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectElement.Location">
      <summary>对应的 Xml 元素的位置。  自最后保存后，如果文件没有保存或文件已被编辑，则可能不正确。  在未保存编辑的情况下，位置仅包含到元素源自的文件的路径。</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectElement.NextSibling">
      <summary>下一个同级元素。  可能为 null。</summary>
      <returns>返回此项目元素的下一个同级元素。 如果不存在下一个同级元素，则返回 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectElement.Parent">
      <summary>如果是 ProjectRootElement，则为 null。  如果还没有附加到一个父级，则为 Null。</summary>
      <returns>返回包含此项目的项目元素容器。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectElement.PreviousSibling">
      <summary>上一个同级元素。  可能为 null。</summary>
      <returns>返回此项目元素的上一个同级元素。 如果不存在上一个同级元素，则返回 null。</returns>
    </member>
    <member name="T:Microsoft.Build.Construction.ProjectElementContainer">
      <summary>为项目元素提供抽象容器类。</summary>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectElementContainer.AllChildren">
      <summary>获取可枚举所有子元素的递归的深度优先的枚举器。</summary>
      <returns>返回可枚举所有子元素的递归的深度优先的枚举器。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectElementContainer.AppendChild(Microsoft.Build.Construction.ProjectElement)">
      <summary>将 <paramref name="child" /> 元素追加为此项目容器的最后一个子级。</summary>
      <param name="child">要追加的项目元素。</param>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectElementContainer.Children">
      <summary>获取所有子元素。</summary>
      <returns>返回所有子元素。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectElementContainer.ChildrenReversed">
      <summary>获取所有子元素（从最后一个子级开始）。</summary>
      <returns>返回所有子元素（从最后一个子级开始）。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectElementContainer.Count">
      <summary>获取子元素的数量。</summary>
      <returns>返回子元素的数量。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectElementContainer.FirstChild">
      <summary>获取第一个子元素。</summary>
      <returns>返回第一个子元素。 如果不存在子元素，则返回 null。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectElementContainer.InsertAfterChild(Microsoft.Build.Construction.ProjectElement,Microsoft.Build.Construction.ProjectElement)">
      <summary>在 <paramref name="reference" /> 元素之后插入 <paramref name="child" /> 元素。</summary>
      <param name="child">要插入的项目元素。</param>
      <param name="reference">要在其后面插入元素的项目元素。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectElementContainer.InsertBeforeChild(Microsoft.Build.Construction.ProjectElement,Microsoft.Build.Construction.ProjectElement)">
      <summary>在 <paramref name="reference" /> 元素之前插入 <paramref name="child" /> 元素。</summary>
      <param name="child">要插入的项目元素。</param>
      <param name="reference">要在其前面插入元素的项目元素。</param>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectElementContainer.LastChild">
      <summary>获取最后一个子元素。</summary>
      <returns>返回最后一个子元素。 如果不存在子元素，则返回 null。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectElementContainer.PrependChild(Microsoft.Build.Construction.ProjectElement)">
      <summary>将 <paramref name="child" /> 预置为此项目容器的第一个子级。</summary>
      <param name="child">要预置的项目元素。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectElementContainer.RemoveAllChildren">
      <summary>从此项目容器中移除所有子级（如果有的话）。</summary>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectElementContainer.RemoveChild(Microsoft.Build.Construction.ProjectElement)">
      <summary>从此项目容器中移除 <paramref name="child" /> 元素。</summary>
      <param name="child">要移除的项目元素。</param>
    </member>
    <member name="T:Microsoft.Build.Construction.ProjectExtensionsElement">
      <summary>表示 MSBuild 项目中的 ProjectExtensions 元素 (MSBuild)元素。 项目扩展可以包含任意 XML 内容。</summary>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectExtensionsElement.Condition">
      <summary>获取一个不存在的条件，该条件隐式为真。</summary>
      <returns>返回一个 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectExtensionsElement.ConditionLocation">
      <summary>此构造函数不允许这些情况，因此不应调用它。</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectExtensionsElement.Content">
      <summary>获取或设置此对象扩展的任意 XML 内容。</summary>
      <returns>返回此对象扩展的任意 XML 内容。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectExtensionsElement.Item(System.String)">
      <summary>获取或设置具有给定 <paramref name="name" /> 参数的第一个子元素的内容。</summary>
      <returns>返回元素的内容。</returns>
      <param name="name">子元素的名称。</param>
    </member>
    <member name="T:Microsoft.Build.Construction.ProjectImportElement">
      <summary>表示 MSBuild 项目中的 Import 元素 (MSBuild)。</summary>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectImportElement.Project">
      <summary>获取或设置 Project 特性。</summary>
      <returns>返回 Project 特性的值。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectImportElement.ProjectLocation">
      <summary>项目特性的位置</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="T:Microsoft.Build.Construction.ProjectImportGroupElement">
      <summary>表示 MSBuild 项目中的 ImportGroup 元素。</summary>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectImportGroupElement.AddImport(System.String)">
      <summary>在此导入组中的最后一个导入的后面添加一个新导入。</summary>
      <returns>返回新的导入。</returns>
      <param name="project">要导入的项目。</param>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectImportGroupElement.Imports">
      <summary>获取此项目导入中的所有属性。</summary>
      <returns>返回此项目导入中的所有属性。</returns>
    </member>
    <member name="T:Microsoft.Build.Construction.ProjectItemDefinitionElement">
      <summary>表示 MSBuild 项目中的 ItemDefinition 元素。</summary>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectItemDefinitionElement.AddMetadata(System.String,System.String)">
      <summary>向此项定义添加元数据。 将元数据追加到任何现有元数据。</summary>
      <returns>返回已修改的元数据。</returns>
      <param name="name">元数据的名称。</param>
      <param name="unevaluatedValue">要添加的元数据。</param>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectItemDefinitionElement.ItemType">
      <summary>获取项定义元素名称。</summary>
      <returns>返回项定义元素名称。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectItemDefinitionElement.Metadata">
      <summary>获取所有子元数据定义。</summary>
      <returns>返回所有子元数据定义。</returns>
    </member>
    <member name="T:Microsoft.Build.Construction.ProjectItemDefinitionGroupElement">
      <summary>表示 MSBuild 项目中的 ItemDefinitionGroup 元素 (MSBuild)。</summary>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectItemDefinitionGroupElement.AddItemDefinition(System.String)">
      <summary>在此项定义组中的最后一个子级后添加一个新项定义。</summary>
      <returns>返回新项定义。</returns>
      <param name="itemType">要添加的项的元素名称。</param>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectItemDefinitionGroupElement.ItemDefinitions">
      <summary>获取所有子项定义。</summary>
      <returns>返回所有子项定义。</returns>
    </member>
    <member name="T:Microsoft.Build.Construction.ProjectItemElement">
      <summary>表示 MSBuild 项目中的 Item 元素 (MSBuild)。</summary>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectItemElement.AddMetadata(System.String,System.String)">
      <summary>向此项添加元数据。 将元数据追加到任何现有元数据。</summary>
      <returns>返回已修改的元数据。</returns>
      <param name="name">元数据的名称。</param>
      <param name="unevaluatedValue">要添加的元数据。</param>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectItemElement.Exclude">
      <summary>获取或设置 Exclude 特性值。</summary>
      <returns>返回 Exclude 特性值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectItemElement.ExcludeLocation">
      <summary>排除特性的位置</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectItemElement.HasMetadata">
      <summary>确定此项是否具有任何子元数据元素。</summary>
      <returns>如果此项具有子元数据元素，则返回 true；否则返回 false。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectItemElement.Include">
      <summary>获取或设置 Include 特性值。</summary>
      <returns>返回 Include 特性值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectItemElement.IncludeLocation">
      <summary>包含特性的位置</summary>
      <returns>返回 Include 的位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectItemElement.ItemType">
      <summary>获取项元素的类型。</summary>
      <returns>返回项元素类型。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectItemElement.KeepDuplicates">
      <summary>获取或设置 KeepDuplicates 值。</summary>
      <returns>如果不存在，则返回 KeepMetadata 的值或返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectItemElement.KeepDuplicatesLocation">
      <summary>获取或设置 KeepDuplicates 特性（如有）的位置，如果有。</summary>
      <returns>返回 KeepDuplicates 特性的位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectItemElement.KeepMetadata">
      <summary>获取或设置 KeepMetadata 特性值。</summary>
      <returns>如果不存在，则返回 KeepMetadata 特性值或返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectItemElement.KeepMetadataLocation">
      <summary>获取或设置 KeepMetadata 特性（如有）的位置，如果有。</summary>
      <returns>返回 KeepMetadata 的位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectItemElement.Metadata">
      <summary>获取所有子元数据。</summary>
      <returns>返回所有子元数据。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectItemElement.Remove">
      <summary>获取或设置 Remove 特性值。</summary>
      <returns>返回 Remove 特性值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectItemElement.RemoveLocation">
      <summary>移除特性的位置</summary>
      <returns>返回移除特性的位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectItemElement.RemoveMetadata">
      <summary>获取或设置 RemoveMetadata 特性。</summary>
      <returns>返回 KeepMetadata 的值，或者在不存在时返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectItemElement.RemoveMetadataLocation">
      <summary>获取或设置 RemoveMetadata 特性（如有）的位置，如果有。</summary>
      <returns>返回 RemoveMetadata 特性的位置。</returns>
    </member>
    <member name="T:Microsoft.Build.Construction.ProjectItemGroupElement">
      <summary>表示 MSBuild 项目中的 ItemGroup 元素 (MSBuild)。</summary>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectItemGroupElement.AddItem(System.String,System.String)">
      <summary>将新项添加到项组中。 项首先按项元素名称排序，然后按 Include 特性排序。</summary>
      <returns>返回新项元素。</returns>
      <param name="itemType">要添加的项的项元素名称。</param>
      <param name="include">要添加的项的 Include 特性。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectItemGroupElement.AddItem(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
      <summary>将具有元数据的新项添加到项组中。 项首先按项元素名称排序，然后按 Include 特性排序。</summary>
      <returns>返回新项元素。</returns>
      <param name="itemType">要添加的项的项元素名称。</param>
      <param name="include">要添加的项的 Include 特性。</param>
      <param name="metadata">要添加的元数据。</param>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectItemGroupElement.Items">
      <summary>获取所有子项。</summary>
      <returns>返回所有子项。</returns>
    </member>
    <member name="T:Microsoft.Build.Construction.ProjectMetadataElement">
      <summary>表示 MSBuild 项目中的 Metadata 元素。</summary>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectMetadataElement.Name">
      <summary>获取元数据名称。</summary>
      <returns>返回元数据名称。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectMetadataElement.Value">
      <summary>获取或设置未计算的元数据值。</summary>
      <returns>返回未计算的元数据值。 如果值未初始化，则返回空字符串。</returns>
    </member>
    <member name="T:Microsoft.Build.Construction.ProjectOnErrorElement">
      <summary>表示 MSBuild 项目中的 OnError 元素 (MSBuild)。</summary>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectOnErrorElement.ExecuteTargetsAttribute">
      <summary>获取或设置 ExecuteTargets 特性的值。</summary>
      <returns>返回 ExecuteTargets 特性的值。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectOnErrorElement.ExecuteTargetsLocation">
      <summary>此元素 "ExecuteTargets" 特性的位置（如果有）。  如果没有这样的属性，则返回 null。</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="T:Microsoft.Build.Construction.ProjectOtherwiseElement">
      <summary>表示 MSBuild 项目中的 Otherwise 元素 (MSBuild)。</summary>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectOtherwiseElement.ChooseElements">
      <summary>获取所有子 Choose 元素。</summary>
      <returns>返回所有子 Choose 元素。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectOtherwiseElement.Condition">
      <summary>获取一个不存在的条件，该条件隐式为真。</summary>
      <returns>返回一个 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectOtherwiseElement.ConditionLocation">
      <summary>此构造函数不允许这些情况，因此不应调用它。</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectOtherwiseElement.ItemGroups">
      <summary>获取所有子项组。</summary>
      <returns>返回所有子项组。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectOtherwiseElement.PropertyGroups">
      <summary>获取所有子属性组。</summary>
      <returns>返回所有子属性组。</returns>
    </member>
    <member name="T:Microsoft.Build.Construction.ProjectOutputElement">
      <summary>表示 MSBuild 项目中的 Output 元素 (MSBuild)。</summary>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectOutputElement.IsOutputItem">
      <summary>确定此输出元素是否表示一个输出项而不是一个输出属性。</summary>
      <returns>如果此输出元素表示一个输出项，则返回 true；否则返回 false。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectOutputElement.IsOutputProperty">
      <summary>确定此输出元素是否表示一个输出属性而不是一个输出项。</summary>
      <returns>如果此输出元素表示一个输出属性，则返回 true；否则返回 false。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectOutputElement.ItemType">
      <summary>获取或设置 ItemType 特性值。</summary>
      <returns>获取或设置 ItemType 特性值。如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectOutputElement.ItemTypeLocation">
      <summary>项类型特性的位置（如果有）。</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectOutputElement.PropertyName">
      <summary>获取或设置 PropertyName 特性值。</summary>
      <returns>获取或设置 PropertyName 特性值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectOutputElement.PropertyNameLocation">
      <summary>属性名称特性的位置（如果有）。</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectOutputElement.TaskParameter">
      <summary>获取或设置 TaskParameter 特性值。</summary>
      <returns>获取或设置 TaskParameter 特性值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectOutputElement.TaskParameterLocation">
      <summary>任务参数特性的位置</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="T:Microsoft.Build.Construction.ProjectPropertyElement">
      <summary>表示 MSBuild 项目中的 Property 元素。</summary>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectPropertyElement.Name">
      <summary>获取属性名称。</summary>
      <returns>返回属性名称。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectPropertyElement.Value">
      <summary>获取或设置未计算的属性值。</summary>
      <returns>返回未计算的属性值。 如果值未初始化，则返回空字符串。</returns>
    </member>
    <member name="T:Microsoft.Build.Construction.ProjectPropertyGroupElement">
      <summary>表示 MSBuild 项目中的 PropertyGroup 元素。</summary>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectPropertyGroupElement.AddProperty(System.String,System.String)">
      <summary>将新属性追加到属性组。</summary>
      <returns>返回新属性。</returns>
      <param name="name">属性名称。</param>
      <param name="unevaluatedValue">属性值。</param>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectPropertyGroupElement.Properties">
      <summary>获取所有子属性。</summary>
      <returns>返回所有子属性。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectPropertyGroupElement.PropertiesReversed">
      <summary>获取所有子属性（从最后一个子级开始）。</summary>
      <returns>返回所有子属性（从最后一个子级开始）。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectPropertyGroupElement.SetProperty(System.String,System.String)">
      <summary>更新属性组中给定属性的值。</summary>
      <returns>返回更新的属性。</returns>
      <param name="name">要更新的属性的名称。</param>
      <param name="unevaluatedValue">新的属性值。</param>
    </member>
    <member name="T:Microsoft.Build.Construction.ProjectRootElement">
      <summary>表示一个 MSBuild 项目、一个目标文件或任何其他符合 MSBuild 项目文件架构的文件。 通过此类及其相关类，可以读写完整的 MSBuild 项目或目标文件。</summary>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.AddImport(System.String)">
      <summary>向此项目中添加一个项目导入。</summary>
      <returns>返回添加的项目导入。</returns>
      <param name="project">要导入的项目。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.AddImportGroup">
      <summary>在此项目的末尾创建一个导入组。</summary>
      <returns>返回在此项目的末尾创建的导入组。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.AddItem(System.String,System.String)">
      <summary>向此项目中添加项。</summary>
      <returns>返回添加的项。</returns>
      <param name="itemType">要添加的项的项类型。</param>
      <param name="include">要添加的项的 Include 值。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.AddItem(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
      <summary>向此项目中添加包含元数据的项。</summary>
      <returns>返回添加的项。</returns>
      <param name="itemType">要添加的项的项类型。</param>
      <param name="include">要添加的项的 Include 值。</param>
      <param name="metadata">要添加的元数据。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.AddItemDefinition(System.String)">
      <summary>向此项目中添加项定义。</summary>
      <returns>返回添加的项定义。</returns>
      <param name="itemType">要添加的项定义的项类型。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.AddItemDefinitionGroup">
      <summary>向此项目中添加项定义组。</summary>
      <returns>返回添加的项定义组。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.AddItemGroup">
      <summary>创建一个项组并将其添加到此项目中。</summary>
      <returns>返回添加的项组。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.AddProperty(System.String,System.String)">
      <summary>在此项目中更新或添加属性。</summary>
      <returns>返回已更新或添加的属性。</returns>
      <param name="name">要更新或添加的属性的名称。</param>
      <param name="value">要更新或添加的属性的值。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.AddPropertyGroup">
      <summary>在此项目中添加新属性组。</summary>
      <returns>返回添加的属性组。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.AddTarget(System.String)">
      <summary>向项目中添加目标。</summary>
      <returns>返回添加的目标。</returns>
      <param name="name">要添加的目标的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.AddUsingTask(System.String,System.String,System.String)">
      <summary>向项目中添加 UsingTask 元素 (MSBuild)。</summary>
      <returns>返回添加的 UsingTask 元素。</returns>
      <param name="name">任务名。</param>
      <param name="assemblyFile">程序集的文件路径。</param>
      <param name="assemblyName">要加载的程序集的名称。</param>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.ChooseElements">
      <summary>获取此项目中的所有子 Choose 元素 (MSBuild)。</summary>
      <returns>返回所有子 Choose 元素。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.Condition">
      <summary>获取 NULL，因为此元素的条件特性不存在，而且不存在的条件隐式为 true。</summary>
      <returns>返回一个 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.ConditionLocation">
      <summary>不要使用。 条件特性为不存在的 <see cref="T:Microsoft.Build.Construction.ProjectRootElement" />。 获取引发内部错误。</summary>
      <returns>引发内部错误并返回 null。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.Create">
      <summary>创建并初始化一个内存中的空 ProjectRootElement 实例，并将其添加到全局项目集合中。</summary>
      <returns>返回新的项目根。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.Create(Microsoft.Build.Evaluation.ProjectCollection)">
      <summary>创建并初始化一个内存中的空 ProjectRootElement 实例，并将其添加到指定的项目集合中。</summary>
      <returns>返回新的项目根。</returns>
      <param name="projectCollection">要添加到的项目集合。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.Create(System.String)">
      <summary>创建并初始化一个内存中的空 ProjectRootElement 实例，并将其添加到全局项目集合中。 利用在指定文件路径找到的数据初始化新的项目根。</summary>
      <returns>返回新的项目根。</returns>
      <param name="path">指向用于初始化的数据的文件路径。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.Create(System.String,Microsoft.Build.Evaluation.ProjectCollection)">
      <summary>创建并初始化一个内存中的空 ProjectRootElement 实例，并将其添加到指定的项目集合中。 利用在指定文件路径找到的数据初始化新的项目根。</summary>
      <returns>返回新的项目根。</returns>
      <param name="path">指向用于初始化的数据的文件路径。</param>
      <param name="projectCollection">要添加到的项目集合。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.Create(System.Xml.XmlReader)">
      <summary>创建并初始化一个内存中的空 ProjectRootElement 实例，并将其添加到全局项目集合中。 利用从指定 XmlReader 读取的数据初始化新的项目根。</summary>
      <returns>返回新的项目根。</returns>
      <param name="xmlReader">用于初始化的 XML 读取器。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.Create(System.Xml.XmlReader,Microsoft.Build.Evaluation.ProjectCollection)">
      <summary>创建并初始化一个内存中的空 ProjectRootElement 实例，并将其添加到指定的项目集合中。 利用从指定 XmlReader 读取的数据初始化新的项目根。</summary>
      <returns>返回新的项目根。</returns>
      <param name="xmlReader">用于初始化的 XML 读取器。</param>
      <param name="projectCollection">要添加到的项目集合。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.CreateChooseElement">
      <summary>创建一个 Choose 元素 (MSBuild)。</summary>
      <returns>
        <see cref="ChoseElement" /> 类。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.CreateImportElement(System.String)">
      <summary>创建一个 Import 元素 (MSBuild)。</summary>
      <returns>返回创建的 Import 元素。</returns>
      <param name="project">要导入的项目。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.CreateImportGroupElement">
      <summary>创建一个导入组。</summary>
      <returns>返回导入组。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.CreateItemDefinitionElement(System.String)">
      <summary>创建一个项定义。</summary>
      <returns>返回该项定义。</returns>
      <param name="itemType">该项定义的项类型。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.CreateItemDefinitionGroupElement">
      <summary>创建一个项定义组。</summary>
      <returns>返回该项定义组。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.CreateItemElement(System.String)">
      <summary>创建一个项。</summary>
      <returns>返回该项。</returns>
      <param name="itemType">该项的项类型。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.CreateItemElement(System.String,System.String)">
      <summary>创建一个具有指定的 Include 值的项。</summary>
      <returns>返回该项。</returns>
      <param name="itemType">该项的项类型。</param>
      <param name="include">该项的 Include 值。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.CreateItemGroupElement">
      <summary>创建一个项组。</summary>
      <returns>返回该项组。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.CreateMetadataElement(System.String)">
      <summary>创建一个具有指定名称的元数据节点。</summary>
      <returns>返回该元数据节点。</returns>
      <param name="name">元数据的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.CreateMetadataElement(System.String,System.String)">
      <summary>创建一个具有指定名称和值的元数据节点。</summary>
      <returns>返回元数据元素。</returns>
      <param name="name">元数据的名称。</param>
      <param name="unevaluatedValue">元数据的值。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.CreateOnErrorElement(System.String)">
      <summary>创建一个 OnError 元素 (MSBuild)。</summary>
      <returns>返回 OnError 元素。</returns>
      <param name="executeTargets">任务失败时要执行的目标。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.CreateOtherwiseElement">
      <summary>创建一个 Otherwise 元素 (MSBuild)。 调用方必须将其添加到项目中的选项位置。</summary>
      <returns>返回 Otherwise 元素。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.CreateOutputElement(System.String,System.String,System.String)">
      <summary>创建一个 Output 元素 (MSBuild)。</summary>
      <returns>返回 Output 元素。</returns>
      <param name="taskParameter">任务输出参数的名称。</param>
      <param name="itemType">接收任务的输出参数值的项。</param>
      <param name="propertyName">接收任务输出参数值的属性。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.CreateProjectExtensionsElement">
      <summary>创建一个 ProjectExtensions 元素 (MSBuild)。</summary>
      <returns>返回 ProjectExtensions 元素。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.CreatePropertyElement(System.String)">
      <summary>创建一个属性。</summary>
      <returns>返回该属性。</returns>
      <param name="name">属性的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.CreatePropertyGroupElement">
      <summary>创建一个属性组。</summary>
      <returns>返回该属性组。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.CreateTargetElement(System.String)">
      <summary>创建一个目标。</summary>
      <returns>返回该目标。</returns>
      <param name="name">目标的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.CreateTaskElement(System.String)">
      <summary>创建一个任务。</summary>
      <returns>返回该任务。</returns>
      <param name="name">任务的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.CreateUsingTaskBodyElement(System.String,System.String)">
      <summary>创建将由 UsingTask 元素 (MSBuild) 引用的任务。</summary>
      <returns>返回该任务。</returns>
      <param name="evaluate">要计算的字符串。</param>
      <param name="body">要添加的主体。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.CreateUsingTaskElement(System.String,System.String,System.String)">
      <summary>向项目中添加 UsingTask 元素 (MSBuild)。</summary>
      <returns>返回 UsingTask 元素。</returns>
      <param name="taskName">任务名。</param>
      <param name="assemblyFile">程序集的文件路径。</param>
      <param name="assemblyName">要加载的程序集的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.CreateUsingTaskElement(System.String,System.String,System.String,System.String,System.String)">
      <summary>向项目中添加 UsingTask 元素 (MSBuild)。</summary>
      <returns>返回 UsingTask 元素。</returns>
      <param name="taskName">任务名。</param>
      <param name="assemblyFile">程序集的文件路径。</param>
      <param name="assemblyName">要加载的程序集的名称。</param>
      <param name="runtime">可选运行时说明符。</param>
      <param name="architecture">可选结构说明符。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.CreateUsingTaskParameterElement(System.String,System.String,System.String,System.String)">
      <summary>创建一个要在 UsingTask 元素 (MSBuild) 参数组中使用的参数。</summary>
      <returns>返回该参数。</returns>
      <param name="name">UsingTask元素的名称。</param>
      <param name="output">将来自任务的输出存储在项目文件中。</param>
      <param name="required">用户定义的任务参数，包含作为它的值的参数值。</param>
      <param name="parameterType">参数的类型。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.CreateUsingTaskParameterGroupElement">
      <summary>创建 UsingTask 元素 (MSBuild)的参数组。</summary>
      <returns>返回该参数组。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.CreateWhenElement(System.String)">
      <summary>获取具有指定 Condition 特性的 When 元素 (MSBuild)。</summary>
      <returns>返回 When 元素。</returns>
      <param name="condition">Condition 特性的值。</param>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.DefaultTargets">
      <summary>获取或设置 DefaultTargets 特性的值。</summary>
      <returns>返回 DefaultTargets 特性的值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.DefaultTargetsLocation">
      <summary>此元素 DefaultTargets 特性的位置（如果有）。</summary>
      <returns>返回 DefaultTargets 特性位置。 如果没有这样的属性，则返回 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.DirectoryPath">
      <summary>获取项目文件的目录路径。</summary>
      <returns>返回目录路径，该路径决不会为 null。 如果未从磁盘加载该项目，则返回加载该项目时的当前目录。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.Encoding">
      <summary>指定保存项目文件时将使用的字符编码。</summary>
      <returns>返回保存项目文件时将使用的字符编码。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.FullPath">
      <summary>获取项目文件的完整路径。</summary>
      <returns>返回项目文件的完整路径。 如果未从磁盘加载该项目，则返回 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.HasUnsavedChanges">
      <summary>确定该项目自上一次加载或保存后是否已进行过修改。</summary>
      <returns>如果该项目已经过修改，则返回 true；否则返回 false。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.ImportGroups">
      <summary>获取此项目中的所有子导入组。</summary>
      <returns>返回此项目中的所有子导入组。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.ImportGroupsReversed">
      <summary>获取此项目中的所有子导入组（从最后一个组开始）。</summary>
      <returns>返回此项目中的所有子导入组（从最后一个组开始）。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.Imports">
      <summary>获取此项目中的所有子导入元素。</summary>
      <returns>获取此项目中的所有子导入元素。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.InitialTargets">
      <summary>获取或设置 InitialTargets 特性的值。</summary>
      <returns>返回 InitialTargets 特性值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.InitialTargetsLocation">
      <summary>此元素 InitialTargets 特性的位置（如果有）。</summary>
      <returns>返回 InitialTargets 特性位置。 如果没有这样的属性，则返回 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.ItemDefinitionGroups">
      <summary>获取此项目中的所有子项定义组。</summary>
      <returns>返回此项目中的所有子项定义组。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.ItemDefinitionGroupsReversed">
      <summary>获取此项目中的所有子项定义组（从最后一个组开始）。</summary>
      <returns>返回此项目中的所有子项定义组（从最后一个组开始）。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.ItemDefinitions">
      <summary>获取此项目中所有项定义组中的所有子项定义。</summary>
      <returns>获取此项目中所有项定义组中的所有子项定义。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.ItemGroups">
      <summary>获取此项目中的所有子项组。</summary>
      <returns>返回此项目中的所有子项组。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.ItemGroupsReversed">
      <summary>获取此项目中存在的所有子项组（从最后一个组开始）。</summary>
      <returns>返回此项目中存在的所有子项组（从最后一个组开始）。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.Items">
      <summary>获取此项目中的所有子项。</summary>
      <returns>返回此项目中的所有子项（即使这些子项包含在 Choose 元素中）。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.LastWriteTimeWhenRead">
      <summary>获取项目文件的上次写入时间。</summary>
      <returns>获取项目文件的上次写入时间。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.Open(System.String)">
      <summary>通过从指定文件路径加载数据，初始化全局项目集合中的项目根。</summary>
      <returns>返回已初始化的项目根。</returns>
      <param name="path">指向数据的文件路径。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.Open(System.String,Microsoft.Build.Evaluation.ProjectCollection)">
      <summary>通过从指定文件路径加载数据，初始化指定项目集合中的项目根。</summary>
      <returns>返回已初始化的项目根。</returns>
      <param name="path">指向数据的文件路径。</param>
      <param name="projectCollection">包含要初始化的项目的项目集合。</param>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.ProjectFileLocation">
      <summary>给定文件的位置，其中没有任何特定内容。 如果未对文件命名一个名称，此为空的位置。 这是没有位置的合理情况。</summary>
      <returns>返回发起文件的位置或空位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.Properties">
      <summary>获取此项目中的所有子属性。</summary>
      <returns>返回此项目中的所有子属性（即使这些子属性包含在 Choose 元素中）。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.PropertyGroups">
      <summary>获取此项目中的所有子属性组。</summary>
      <returns>返回此项目中的所有子属性组。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.PropertyGroupsReversed">
      <summary>获取此项目中存在的所有子属性组（从最后一个组开始）。</summary>
      <returns>返回此项目中存在的所有子属性组（从最后一个组开始）。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.RawXml">
      <summary>获取表示此项目的 XML 内容。</summary>
      <returns>以字符串的形式返回表示此项目的 XML 内容。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.Save">
      <summary>将项目保存到文件系统（如果项目已修改）。</summary>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.Save(System.IO.TextWriter)">
      <summary>将项目保存到指定的文本编写器（无论项目是否已修改）。</summary>
      <param name="writer">要将项目写入到的文本编写器。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.Save(System.String)">
      <summary>保存项目（如果项目已修改或存储文件路径已更改）。</summary>
      <param name="path">存储项目的文件路径。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.Save(System.String,System.Text.Encoding)">
      <summary>保存项目（如果项目已修改或存储文件路径已更改）。 使用指定的字符编码。</summary>
      <param name="path">存储项目的文件路径。</param>
      <param name="encoding">用于保存项目的字符编码。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.Save(System.Text.Encoding)">
      <summary>使用指定的字符编码保存项目（如果项目已修改）。</summary>
      <param name="saveEncoding">用于保存项目的字符编码。</param>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.Targets">
      <summary>获取此项目中的所有子目标。</summary>
      <returns>返回此项目中的所有子目标。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.TimeLastChanged">
      <summary>获取上次修改此项目的时间。</summary>
      <returns>返回上次修改此项目的时间。 如果此项目自创建或加载之后没有经过修改，则返回 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.ToolsVersion">
      <summary>获取或设置 ToolsVersion 特性的值。</summary>
      <returns>返回 ToolsVersion 特性值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.ToolsVersionLocation">
      <summary>此元素 ToolsVersion 特性的位置（如果有）。</summary>
      <returns>返回 ToolsVersion 特性的位置。 如果没有这样的属性，则返回 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.TreatAsLocalProperty">
      <summary>获取或设置 TreatAsLocalProperty 特性的值。</summary>
      <returns>返回 TreatAsLocalProperty 特性值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.TreatAsLocalPropertyLocation">
      <summary>此元素 TreatAsLocalProperty 特性的位置（如果有）。</summary>
      <returns>返回 TreatAsLocalProperty 特性的位置。 如果没有这样的属性，则返回 null。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.TryOpen(System.String)">
      <summary>获取从指定文件路径加载到内存中的全局项目集合中的项目根，如果该项目根当前不在内存中，则为 null。</summary>
      <returns>返回项目根。 如果未从指定文件路径加载项目到内存中，则返回 null。</returns>
      <param name="path">ProjectRootElement 的路径，不能为 null。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectRootElement.TryOpen(System.String,Microsoft.Build.Evaluation.ProjectCollection)">
      <summary>获取从指定文件路径加载到内存中的指定项目集合中的项目根，如果该项目根当前不在内存中，则为 null。</summary>
      <returns>返回项目根。 如果未从指定文件路径加载项目到内存中，则返回 null。</returns>
      <param name="path">ProjectRootElement 的路径，不能为 null。</param>
      <param name="projectCollection">要在其中搜索项目根的项目集合。</param>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.UsingTasks">
      <summary>获取此项目中的所有子 UsingTask 元素 (MSBuild)。</summary>
      <returns>返回此项目中的所有子 UsingTask 元素。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectRootElement.Version">
      <summary>获取此对象的版本号。</summary>
      <returns>返回此对象的版本号。</returns>
    </member>
    <member name="T:Microsoft.Build.Construction.ProjectTargetElement">
      <summary>表示 MSBuild 项目中的 Target 元素 (MSBuild)。</summary>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectTargetElement.AddItemGroup">
      <summary>在最后一个子级后添加项组。</summary>
      <returns>返回添加的项组。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectTargetElement.AddPropertyGroup">
      <summary>在最后一个子级后添加属性组。</summary>
      <returns>返回添加的属性组。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectTargetElement.AddTask(System.String)">
      <summary>在此目标中的任何现有任务后添加任务。</summary>
      <returns>返回添加的任务。</returns>
      <param name="taskName">要添加的任务的名称。</param>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTargetElement.AfterTargets">
      <summary>获取或设置 AfterTargets 特性值。</summary>
      <returns>返回 AfterTargets 特性值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTargetElement.AfterTargetsLocation">
      <summary>AfterTargets 特性的位置</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTargetElement.BeforeTargets">
      <summary>获取或设置 BeforeTargets 特性值。</summary>
      <returns>返回 BeforeTargets 特性值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTargetElement.BeforeTargetsLocation">
      <summary>BeforeTargets 特性的位置</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTargetElement.DependsOnTargets">
      <summary>设置或获取 DependsOnTargets 特性值。如果该特性不存在，则返回空字符串。 如果要设置的值为空，则移除该特性。</summary>
      <returns>返回 DependsOnTargets 特性值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTargetElement.DependsOnTargetsLocation">
      <summary>DependsOnTargets 特性的位置</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTargetElement.Inputs">
      <summary>获取或设置 Inputs 特性值。如果该特性不存在，则返回空字符串。 如果要设置的值为空，则移除该特性。</summary>
      <returns>返回 Inputs 特性值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTargetElement.InputsLocation">
      <summary>输入特性的位置</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTargetElement.ItemGroups">
      <summary>获取所有子项组</summary>
      <returns>返回所有子项组。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTargetElement.KeepDuplicateOutputs">
      <summary>设置或获取 TrimDuplicateOutputs 特性值。</summary>
      <returns>返回 TrimDuplicateOutputs 特性值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTargetElement.KeepDuplicateOutputsLocation">
      <summary>TrimDuplicateOutputs 特性的位置</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTargetElement.Name">
      <summary>获取或设置此目标的名称。</summary>
      <returns>返回此目标的名称。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTargetElement.NameLocation">
      <summary>名称特性的位置</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTargetElement.OnErrors">
      <summary>获取所有子 OnError 元素 (MSBuild)。</summary>
      <returns>返回所有子 OnError 元素。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTargetElement.Outputs">
      <summary>获取或设置 Outputs 特性值。如果该特性不存在，则返回空字符串。 如果要设置的值为空，则移除该特性。</summary>
      <returns>返回 Outputs 特性值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTargetElement.OutputsLocation">
      <summary>输出特性的位置</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTargetElement.PropertyGroups">
      <summary>获取所有子属性组。</summary>
      <returns>返回所有子属性组。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTargetElement.Returns">
      <summary>获取或设置 Returns 特性值。</summary>
      <returns>返回 Returns 特性值；如果该特性不存在，则返回 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTargetElement.ReturnsLocation">
      <summary>返回特性的位置</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTargetElement.Tasks">
      <summary>获取所有子任务。</summary>
      <returns>返回所有子任务。</returns>
    </member>
    <member name="T:Microsoft.Build.Construction.ProjectTaskElement">
      <summary>表示 MSBuild 项目中的 Task 元素 (MSBuild)。</summary>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectTaskElement.AddOutputItem(System.String,System.String)">
      <summary>在最后一个子级后添加 Output 项。</summary>
      <returns>返回添加的 Output 项。</returns>
      <param name="taskParameter">将输出到该项的任务的名称。</param>
      <param name="itemType">其值将设置为任务的输出的新项的项类型。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectTaskElement.AddOutputItem(System.String,System.String,System.String)">
      <summary>在最后一个子级后向此任务添加一个条件 Output 项。</summary>
      <returns>返回添加的条件 Output 项。</returns>
      <param name="taskParameter">参数的名称。</param>
      <param name="itemType">该项的项类型。</param>
      <param name="condition">参数的条件。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectTaskElement.AddOutputProperty(System.String,System.String)">
      <summary>在最后一个子级后向此任务添加一个 Output 属性。</summary>
      <returns>返回添加的 Output 属性。</returns>
      <param name="taskParameter">参数的名称。</param>
      <param name="propertyName">属性的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectTaskElement.AddOutputProperty(System.String,System.String,System.String)">
      <summary>在最后一个子级后向此任务添加一个条件 Output 属性。</summary>
      <returns>返回添加的条件 Output 属性。</returns>
      <param name="taskParameter">参数的名称。</param>
      <param name="propertyName">属性的名称。</param>
      <param name="condition">属性的条件。</param>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTaskElement.ContinueOnError">
      <summary>获取或设置 ContinueOnError 特性值。</summary>
      <returns>返回 ContinueOnError 特性值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTaskElement.ContinueOnErrorLocation">
      <summary>此元素 "ContinueOnError" 特性的位置（如果有）。  如果没有这样的属性，则返回 null。</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectTaskElement.GetParameter(System.String)">
      <summary>获取具有指定名称的参数的值。</summary>
      <returns>返回具有指定名称的参数的值。 如果任务中没有该名称的参数，则返回一个空字符串。</returns>
      <param name="name">参数的名称。</param>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTaskElement.MSBuildArchitecture">
      <summary>获取或设置任务的架构值。  如果该特性不存在，则返回空字符串。  如果要设置的值为空，则移除该特性。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTaskElement.MSBuildArchitectureLocation">
      <summary>此元素 "MSBuildArchitecture" 特性的位置（如果有）。  如果没有这样的属性，则返回 null。</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTaskElement.MSBuildRuntime">
      <summary>获取或设置任务的运行值。  如果该特性不存在，则返回空字符串。  如果要设置的值为空，则移除该特性。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTaskElement.MSBuildRuntimeLocation">
      <summary>此元素 "MSBuildRuntime" 特性的位置（如果有）。  如果没有这样的属性，则返回 null。</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTaskElement.Name">
      <summary>获取此任务的名称。</summary>
      <returns>返回此任务的名称。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTaskElement.Outputs">
      <summary>获取所有 Output 元素 (MSBuild)子级。</summary>
      <returns>返回所有 Output 元素子级。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTaskElement.ParameterLocations">
      <summary>任务对应的参数位置的可枚举。  Condition 和 ContinueOnError 特性具有自己的属性，不在此集合中。  如果参数仅按大小写区分，将仅返回最后一个参数。  主机始终可以通过使用 RemoveAllParameters () 删除其他参数。</summary>
      <returns>返回 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectTaskElement.Parameters">
      <summary>获取此任务的所有未计算参数。</summary>
      <returns>返回此任务的所有未计算参数。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectTaskElement.RemoveAllParameters">
      <summary>从任务中移除所有参数。 不会移除任何 ContinueOnError 和/或 Condition 特性。</summary>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectTaskElement.RemoveParameter(System.String)">
      <summary>移除此任务上具有指定名称的任何参数。 如果任务中没有该名称的参数，则不执行任何操作。</summary>
      <param name="name">要移除的参数的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectTaskElement.SetParameter(System.String,System.String)">
      <summary>在此任务中更新或添加参数。</summary>
      <param name="name">要更新或添加的参数的名称。</param>
      <param name="unevaluatedValue">参数值。</param>
    </member>
    <member name="T:Microsoft.Build.Construction.ProjectUsingTaskBodyElement">
      <summary>表示内联任务的正文。</summary>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskBodyElement.Condition">
      <summary>获取 NULL，因为此元素的条件特性不存在，而且不存在的条件隐式为 true。</summary>
      <returns>返回一个 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskBodyElement.ConditionLocation">
      <summary>不要使用。 “条件”特性为不存在的 <see cref="T:Microsoft.Build.Construction.ProjectUsingTaskBodyElement" />。 获取引发内部错误。</summary>
      <returns>引发内部错误并返回 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskBodyElement.Evaluate">
      <summary>获取 Evaluate 特性的值。</summary>
      <returns>返回 Evaluate 特性的值，该值可以为“true”或“false”。 如果该特性不存在，则返回“true”。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskBodyElement.EvaluateLocation">
      <summary>此元素“评估”特性的位置（如果有）。</summary>
      <returns>返回评估特性位置。 如果不存在这样的属性，返回元素的位置，而不是默认特性的位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskBodyElement.TaskBody">
      <summary>获取或设置此内联任务的内容的未计算值。</summary>
      <returns>返回此内联任务的未计算的内部 XML 内容。 如果内联任务正文不存在，则返回空字符串。</returns>
    </member>
    <member name="T:Microsoft.Build.Construction.ProjectUsingTaskElement">
      <summary>表示 MSBuild 项目中的 UsingTask 元素 (MSBuild)元素。 UsingTask 元素可用于内联任务和预编译的任务。</summary>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectUsingTaskElement.AddParameterGroup">
      <summary>将新的 ParameterGroup 元素添加到此内联任务。</summary>
      <returns>返回新参数组。</returns>
    </member>
    <member name="M:Microsoft.Build.Construction.ProjectUsingTaskElement.AddUsingTaskBody(System.String,System.String)">
      <summary>将新的 TaskBody 元素添加到此内联任务。</summary>
      <returns>返回新的任务正文。</returns>
      <param name="evaluate">一个标志，如果此标志为 true，则扩展任务正文中的项和属性值。 此标志默认为 true。</param>
      <param name="taskBody">字符串形式的任务正文。</param>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskElement.Architecture">
      <summary>获取或设置此内联任务的 Architecture 特性。</summary>
      <returns>返回体系结构特性的值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskElement.ArchitectureLocation">
      <summary>此元素体系结构特性的位置（如果有）。</summary>
      <returns>返回体系结构特性位置。 如果没有这样的属性，则返回 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskElement.AssemblyFile">
      <summary>获取 AssemblyFile 特性的值，该特性选择要加载的程序集的名称。</summary>
      <returns>返回 AssemblyFile 特性的值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskElement.AssemblyFileLocation">
      <summary>此元素 AssemblyFile 特性的位置（如果有）。</summary>
      <returns>返回 AssemblyFile 特性位置。 如果没有这样的属性，则返回 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskElement.AssemblyName">
      <summary>获取或设置 AssemblyName 特性的值。</summary>
      <returns>返回 AssemblyName 特性的值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskElement.AssemblyNameLocation">
      <summary>此元素 AssemblyName 特性的位置（如果有）。</summary>
      <returns>返回 AssemblyName 特性位置。 如果没有这样的属性，则返回 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskElement.ParameterGroup">
      <summary>获取此内联任务的任何 ParameterGroup 元素。</summary>
      <returns>返回该参数组。 如果不存在参数组，则返回 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskElement.Runtime">
      <summary>获取或设置此内联任务的运行时特性。</summary>
      <returns>返回“运行时”特性的值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskElement.RuntimeLocation">
      <summary>此元素“运行时”特性的位置（如果有）。</summary>
      <returns>返回 Runtime 特性位置。 如果没有这样的属性，则返回 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskElement.TaskBody">
      <summary>获取此内联任务的内部 XML 内容。</summary>
      <returns>返回此内联任务的内部 XML 内容。 如果不存在正文，则返回 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskElement.TaskFactory">
      <summary>获取或设置此内联任务的 TaskFactory 特性的值。</summary>
      <returns>返回 TaskFactory 特性的值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskElement.TaskFactoryLocation">
      <summary>此元素 TaskFactory 特性的位置（如果有）。</summary>
      <returns>返回 TaskFactory 特性的值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskElement.TaskName">
      <summary>获取或设置 TaskName 特性的值。</summary>
      <returns>返回 TaskName 特性的值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskElement.TaskNameLocation">
      <summary>此元素 TaskName 特性的位置（如果有）。</summary>
      <returns>返回 TaskName 特性的值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="T:Microsoft.Build.Construction.ProjectUsingTaskParameterElement">
      <summary>表示内联任务的参数。</summary>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskParameterElement.Condition">
      <summary>获取一个不存在的条件，该条件隐式为真。</summary>
      <returns>返回一个 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskParameterElement.ConditionLocation">
      <summary>不要使用。 条件特性为不存在的组件。 获取引发内部错误。</summary>
      <returns>引发内部错误并返回 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskParameterElement.Name">
      <summary>获取或设置此内联任务的参数的名称。</summary>
      <returns>返回此参数的名称。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskParameterElement.Output">
      <summary>获取或设置此内联任务的可选的 Output 特性。</summary>
      <returns>返回 Output 特性的值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskParameterElement.OutputLocation">
      <summary>此元素“输出”特性的位置（如果有）。</summary>
      <returns>返回输出特性位置。 如果不存在这样的属性，返回元素的位置，而不是默认特性的位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskParameterElement.ParameterType">
      <summary>获取或设置此内联任务的 Type 特性。</summary>
      <returns>返回 Type 特性的值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskParameterElement.ParameterTypeLocation">
      <summary>此元素 ParameterType 特性的位置（如果有）。</summary>
      <returns>返回 ParameterType 特性位置。 如果不存在这样的属性，返回元素的位置，而不是默认特性的位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskParameterElement.Required">
      <summary>获取或设置 Required 特性。</summary>
      <returns>返回 Required 特性的值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectUsingTaskParameterElement.RequiredLocation">
      <summary>此元素“所需”特性的位置（如果有）。</summary>
      <returns>返回所需特性位置。 如果不存在这样的属性，返回元素的位置，而不是默认特性的位置。</returns>
    </member>
    <member name="T:Microsoft.Build.Construction.ProjectWhenElement">
      <summary>表示 MSBuild 项目中的 When 元素 (MSBuild)。</summary>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectWhenElement.ChooseElements">
      <summary>获取所有子 Choose 元素 (MSBuild)。</summary>
      <returns>返回所有子 Choose 元素。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectWhenElement.ItemGroups">
      <summary>获取所有子项组。</summary>
      <returns>返回所有子项组。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.ProjectWhenElement.PropertyGroups">
      <summary>获取所有子属性组。</summary>
      <returns>返回所有子属性组。</returns>
    </member>
    <member name="T:Microsoft.Build.Construction.UsingTaskParameterGroupElement">
      <summary>表示内联任务的 ParameterGroup。</summary>
    </member>
    <member name="M:Microsoft.Build.Construction.UsingTaskParameterGroupElement.AddParameter(System.String)">
      <summary>向此属性组添加一个参数。</summary>
      <returns>新参数。</returns>
      <param name="name">要添加的参数的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Construction.UsingTaskParameterGroupElement.AddParameter(System.String,System.String,System.String,System.String)">
      <summary>使用给定的名称、类型和特性，将一个参数添加到此参数组。</summary>
      <returns>返回新参数。</returns>
      <param name="name">要添加的参数的名称。</param>
      <param name="output">Output 特性的值。</param>
      <param name="required">Required 特性的值。</param>
      <param name="parameterType">参数的类型。</param>
    </member>
    <member name="P:Microsoft.Build.Construction.UsingTaskParameterGroupElement.Condition">
      <summary>获取一个不存在的条件，该条件隐式为真。</summary>
      <returns>返回一个 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.UsingTaskParameterGroupElement.ConditionLocation">
      <summary>此构造函数不允许这些情况，因此不应调用它。</summary>
      <returns>引发内部错误并返回 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Construction.UsingTaskParameterGroupElement.Parameters">
      <summary>获取此参数组的所有参数。</summary>
      <returns>返回所有参数。</returns>
    </member>
    <member name="T:Microsoft.Build.Debugging.DebuggerManager">
      <summary>用于支持调试状态机的管理器。</summary>
    </member>
    <member name="T:Microsoft.Build.Debugging.DebuggerManager.IslandThread">
      <summary>在专用辅助线程上执行数据岛。 然后辅助线程的物理调用堆栈映射到解释器的虚拟调用堆栈。</summary>
    </member>
    <member name="M:Microsoft.Build.Debugging.DebuggerManager.IslandThread.IslandWorker(Microsoft.Build.Debugging.DebuggerManager.IslandThread)">
      <summary>从数据岛调用的专用入口点。 必须是公共的，以便数据岛可以调用它。 在调试器辅助线程上调用。</summary>
      <param name="controller">调用入口点的线程。</param>
    </member>
    <member name="M:Microsoft.Build.Debugging.DebuggerManager.IslandThread.System#IDisposable#Dispose">
      <summary>释放由 <see cref="T:Microsoft.Build.Debugging.DebuggerManager.IslandThread" /> 类的当前实例占用的所有资源。</summary>
    </member>
    <member name="T:Microsoft.Build.Evaluation.Project">
      <summary>表示具有设计时语义的项目。 此类可加载项目文件、编辑项和属性，并可生成项目。</summary>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.#ctor">
      <summary>使用全局项目集合的全局属性和默认工具版本构造一个空项目。</summary>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement)">
      <summary>使用给定的项目根和全局项目集合的全局属性以及默认工具版本，构造一个空项目并对其进行计算。</summary>
      <param name="xml">要用于计算的 ProjectRootElement。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
      <summary>使用给定的项目根以及给定的全局属性和给定的工具版本，构造一个空项目并对其进行计算。</summary>
      <param name="xml">要用于计算的项目根。</param>
      <param name="globalProperties">要计算的全局属性。 可以为 null，在此情况下，将使用包含项目集合的全局属性。</param>
      <param name="toolsVersion">用于计算的工具版本。 可能为 null。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)">
      <summary>使用给定的项目根以及给定的全局属性和给定的工具版本，构造一个项目并对其进行计算。</summary>
      <param name="xml">要用于计算的项目根。</param>
      <param name="globalProperties">要计算的全局属性。 可以为 null，在此情况下，将使用包含项目集合的全局属性。</param>
      <param name="toolsVersion">用于计算的工具版本。 可能为 null。</param>
      <param name="projectCollection">将项目添加到的项目集合。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)">
      <summary>使用给定的项目根以及给定的全局属性、给定的工具版本和给定的加载设置，构造一个空项目并对其进行计算。</summary>
      <param name="xml">要用于计算的项目根。</param>
      <param name="globalProperties">要计算的全局属性。 可以为 null，在此情况下，将使用包含项目集合的全局属性。</param>
      <param name="toolsVersion">用于计算的工具版本。 可能为 null。</param>
      <param name="projectCollection">将项目添加到的项目集合。 不能为 null。</param>
      <param name="loadSettings">要用于计算的加载设置。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)">
      <summary>使用给定的项目根以及给定的全局属性、工具和子工具集版本、项目集合、和加载设置，构造一个项目并对其进行计算。</summary>
      <param name="xml">要用于计算的项目根。</param>
      <param name="globalProperties">要计算的全局属性。 可以为 null，在此情况下，将使用包含项目集合的全局属性。</param>
      <param name="toolsVersion">用于计算的工具版本。 可能为 null。</param>
      <param name="subToolsetVersion">用于评估的子工具集版本。 可能为 null。</param>
      <param name="projectCollection">将项目添加到的项目集合。 不能为 null。</param>
      <param name="loadSettings">要用于计算的加载设置。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Evaluation.ProjectCollection)">
      <summary>使用给定项目集合的全局属性和默认工具版本构造一个空项目。</summary>
      <param name="projectCollection">要将新项目添加到的项目集合。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)">
      <summary>使用给定的项目集合以及给定的全局属性和给定的工具版本，构造一个要进行计算的空项目。</summary>
      <param name="globalProperties">要计算的全局属性。 可以为 null，在此情况下，将使用包含项目集合的全局属性。</param>
      <param name="toolsVersion">用于计算项目的工具版本。 可能为 null。</param>
      <param name="projectCollection">要将新项目添加到的项目集合。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.#ctor(System.String)">
      <summary>利用给定的源项目文件以及全局项目集合的全局属性和默认工具版本，构造一个项目并对其进行计算。</summary>
      <param name="projectFile">要计算的源项目文件。</param>
      <exception cref="T:Microsoft.Build.Exceptions.InvalidProjectFileException">如果计算失败。</exception>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
      <summary>利用给定的源项目文件以及给定的全局属性和给定的工具版本，构造一个项目并对其进行计算。</summary>
      <param name="projectFile">要计算的源项目文件的路径。</param>
      <param name="globalProperties">要计算的全局属性。 可以为 null，在此情况下，将使用包含项目集合的全局属性。</param>
      <param name="toolsVersion">用于计算的工具版本。 可能为 null。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)">
      <summary>利用给定的源项目文件以及给定的全局属性和给定的工具版本，构造一个项目并对其进行计算。</summary>
      <param name="projectFile">要计算的源项目文件的路径。</param>
      <param name="globalProperties">全局属性。 可能为 null。</param>
      <param name="toolsVersion">工具版本。 可能为 null。</param>
      <param name="projectCollection">将项目添加到的项目集合。 不能为 null。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)">
      <summary>利用给定的源项目文件以及给定的全局属性、给定的工具版本和给定的加载设置，构造一个项目并对其进行计算。</summary>
      <param name="projectFile">要计算的源项目文件的路径。</param>
      <param name="globalProperties">要计算的全局属性。 可以为 null，在此情况下，将使用包含项目集合的全局属性。</param>
      <param name="toolsVersion">工具版本。 可能为 null。</param>
      <param name="projectCollection">将项目添加到的项目集合。 不能为 null。</param>
      <param name="loadSettings">要用于计算的加载设置。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)">
      <summary>利用给定的源项目文件以及给定的全局属性、工具和子工具集版本、项目集合、和加载设置，构造一个项目并对其进行计算。</summary>
      <param name="projectFile">要计算的源项目文件的路径。</param>
      <param name="globalProperties">要计算的全局属性。 可以为 null，在此情况下，将使用包含项目集合的全局属性。</param>
      <param name="toolsVersion">工具版本。 可能为 null。</param>
      <param name="subToolsetVersion">子工具集版本。 可能为 null。</param>
      <param name="projectCollection">将项目添加到的项目集合。 不能为 null。</param>
      <param name="loadSettings">要用于计算的加载设置。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader)">
      <summary>构造一个项目，并计算来自给定的 XML 读取器的源代码。 将使用全局项目集合的全局属性和默认工具版本计算源代码。</summary>
      <param name="xmlReader">从中读取项目源代码的 Xml 读取器。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
      <summary>构造一个项目，并计算来自给定的 XML 读取器的源代码。 将使用给定的全局属性和给定的工具版本计算源代码。</summary>
      <param name="xmlReader">从中读取项目源代码的 Xml 读取器。</param>
      <param name="globalProperties">要计算的全局属性。 可以为 null，在此情况下，将使用包含项目集合的全局属性。</param>
      <param name="toolsVersion">用于计算的工具版本。 可能为 null。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)">
      <summary>构造一个项目，并计算来自给定的 XML 读取器的源代码。 将使用给定的全局属性和给定的工具版本计算源代码。</summary>
      <param name="xmlReader">从中读取项目源代码的 Xml 读取器。</param>
      <param name="globalProperties">要计算的全局属性。 可以为 null，在此情况下，将使用包含项目集合的全局属性。</param>
      <param name="toolsVersion">用于计算的工具版本。 可能为 null。</param>
      <param name="projectCollection">将项目添加到的项目集合。 不能为 null。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)">
      <summary>构造一个项目，并计算来自给定的 XML 读取器的源代码。 将使用给定的全局属性和给定的工具版本计算源代码。</summary>
      <param name="xmlReader">从中读取项目源代码的 Xml 读取器。</param>
      <param name="globalProperties">要计算的全局属性。 可以为 null，在此情况下，将使用包含项目集合的全局属性。</param>
      <param name="toolsVersion">用于计算的工具版本。 可能为 null。</param>
      <param name="projectCollection">将项目添加到的项目集合。 不能为 null。</param>
      <param name="loadSettings">要用于计算的加载设置。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)">
      <summary>构造一个项目，并计算来自给定的 XML 读取器的源代码。 使用给定全局属性、工具和子工具集版本、项目集合和加载设置来计算源代码。</summary>
      <param name="xmlReader">从中读取项目源代码的 Xml 读取器。</param>
      <param name="globalProperties">要计算的全局属性。 可以为 null，在此情况下，将使用包含项目集合的全局属性。</param>
      <param name="toolsVersion">用于计算的工具版本。 可能为 null。</param>
      <param name="subToolsetVersion">用于评估的子工具集版本。 可能为 null。</param>
      <param name="projectCollection">将项目添加到的项目集合。 不能为 null。</param>
      <param name="loadSettings">要用于计算的加载设置。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.AddItem(System.String,System.String)">
      <summary>向项目中添加不包含元数据的项。</summary>
      <returns>返回添加的项。</returns>
      <param name="itemType">所添加的项的项类型。</param>
      <param name="unevaluatedInclude">要添加的项的 Include 特性。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.AddItem(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
      <summary>向项目中添加包含给定元数据的项。</summary>
      <returns>返回添加的项。</returns>
      <param name="itemType">所添加的项的项类型。</param>
      <param name="unevaluatedInclude">要添加的项的 Include 特性。</param>
      <param name="metadata">所添加的项的元数据。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.AddItemFast(System.String,System.String)">
      <summary>向项目中添加不包含元数据的项。将不会尝试查看现有的通配符是否已匹配新项，除非它是项组中的第一项。也不会尝试将新项放置到相似项的附近。</summary>
      <returns>返回所添加的项目项的列表。</returns>
      <param name="itemType">要添加的项类型。</param>
      <param name="unevaluatedInclude">要添加到该项的未计算 Include 特性。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.AddItemFast(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
      <summary>向此项目中添加包含元数据的项。 元数据可能为 null，以指示没有元数据。 将不会尝试查看现有的通配符是否已匹配新项，除非它是项组中的第一项。 也不会尝试将新项放置到相似项的附近。</summary>
      <returns>返回所添加的项目项的列表。</returns>
      <param name="itemType">要添加的项类型。</param>
      <param name="unevaluatedInclude">要添加到该项的未计算 Include 特性。</param>
      <param name="metadata">要添加的元数据。</param>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Project.AllEvaluatedItemDefinitionMetadata">
      <summary>获取在计算过程中遇到的所有项定义元数据。</summary>
      <returns>返回在计算过程中遇到的所有项定义元数据。 这不包括其条件计算结果不为 true 的任何元素，也不包括自上次计算以后添加的任何项定义元数据。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Project.AllEvaluatedItems">
      <summary>获取可枚举在计算过程中遇到的所有项的枚举器。 在进行第三轮计算时读取这些项。</summary>
      <returns>返回可枚举在计算过程中遇到的所有项的枚举器。 在进行第三轮计算时读取这些项。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Project.AllEvaluatedProperties">
      <summary>获取在计算过程中遇到的所有属性。</summary>
      <returns>返回在计算过程中遇到的所有属性。 这不包括其条件计算结果不为 true 的任何属性，也不包括自上次计算以后添加的任何属性。</returns>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.Build">
      <summary>使用默认目标生成此项目。</summary>
      <returns>如果成功，则返回 true；否则返回 false。</returns>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.Build(Microsoft.Build.Framework.ILogger)">
      <summary>使用默认目标和给定记录器生成此项目。</summary>
      <returns>如果成功，则返回 true；否则返回 false。</returns>
      <param name="logger">要在生成期间使用的记录器。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})">
      <summary>使用默认目标和给定记录器生成此项目。</summary>
      <returns>如果成功，则返回 true；否则返回 false。</returns>
      <param name="loggers">一个可枚举要在生成过程中使用的所有记录器的枚举器。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})">
      <summary>使用默认目标以及给定记录器和远程记录器生成此项目。</summary>
      <returns>如果成功，则返回 true；否则返回 false。</returns>
      <param name="loggers">要在生成期间使用的记录器。</param>
      <param name="remoteLoggers">要在生成期间使用的远程记录器。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.Build(System.String)">
      <summary>生成此项目（生成给定目标）。</summary>
      <returns>如果成功，则返回 true；否则返回 false。</returns>
      <param name="target">要生成的目标。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})">
      <summary>生成此项目（生成给定目标并使用给定记录器）。</summary>
      <returns>如果成功，则返回 true；否则返回 false。</returns>
      <param name="target">要生成的目标。</param>
      <param name="loggers">要在生成期间使用的记录器。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})">
      <summary>生成此项目（生成给定目标并使用给定记录器和远程记录器）。</summary>
      <returns>如果成功，则返回 true；否则返回 false。</returns>
      <param name="target">要生成的目标。</param>
      <param name="loggers">要在生成期间使用的记录器。</param>
      <param name="remoteLoggers">要在生成期间使用的远程记录器。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.Build(System.String[])">
      <summary>生成此项目（生成给定目标）。</summary>
      <returns>如果成功，则返回 true；否则返回 false。</returns>
      <param name="targets">要生成的目标数组。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})">
      <summary>生成此项目（生成给定目标并使用给定记录器）。</summary>
      <returns>如果成功，则返回 true；否则返回 false。</returns>
      <param name="targets">要生成的目标。</param>
      <param name="loggers">要在生成期间使用的记录器。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})">
      <summary>生成此项目（生成给定目标并使用给定记录器和远程记录器）。</summary>
      <returns>如果成功，则返回 true；否则返回 false。</returns>
      <param name="targets">要生成的目标。</param>
      <param name="loggers">要在生成期间使用的记录器。</param>
      <param name="remoteLoggers">要在生成期间使用的远程记录器。</param>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Project.ConditionedProperties">
      <summary>获取某些属性的可能值的集合，这些属性用于计算有关属性、属性组、导入和时间的条件。</summary>
      <returns>返回某些属性的可能值的集合，这些属性用于计算有关属性、属性组、导入和时间的条件。 该集合采用规范格式。 条目的名称是要计算的属性的名称，值是可能的属性值的列表。</returns>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.CreateProjectInstance">
      <summary>基于此项目创建一个项目实例，但将此项目与创建的项目实例完全断开连接。</summary>
      <returns>返回该项目实例。</returns>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.CreateProjectInstance(Microsoft.Build.Execution.ProjectInstanceSettings)">
      <summary>基于此项目创建一个项目实例，但将此项目与创建的项目实例完全断开连接。</summary>
      <returns>返回该项目实例。</returns>
      <param name="settings">确定所创建的项目实例是否为不可变的，以及该实例是否包含查找表以提高性能。</param>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Project.DirectoryPath">
      <summary>获取此项目的根目录。</summary>
      <returns>返回此项目的根目录。 根目录从不会是 null；内存中项目使用在项目加载时的当前目录。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Project.DisableMarkDirty">
      <summary>获取或设置一个标志，该标志确定是否临时禁用 <see cref="M:Microsoft.Build.Evaluation.Project.MarkDirty" />。 例如，可以通过此标记来设置全局属性，而不必将项目标记为已更新（从而导致重新计算）。</summary>
      <returns>返回一个标志，该标志确定是否临时禁用 MarkDirty。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Project.EvaluationCounter">
      <summary>获取一个数值，在每次重新计算项目时，该数值会递增。</summary>
      <returns>返回递增值。</returns>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.ExpandString(System.String)">
      <summary>通过扩展项和属性，计算给定的字符串。 计算字符串时将其视为位于项目文件的最末尾。</summary>
      <returns>返回计算的字符串。</returns>
      <param name="unexpandedValue">要计算的字符串。</param>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Project.FullPath">
      <summary>获取或设置项目源文件的完整路径。</summary>
      <returns>返回项目源文件的完整路径。 如果未从磁盘加载项目，则返回空字符串。</returns>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItem)">
      <summary>获取所提供的项的 Include 特性的值，该值是计算得到的且经过了转义。</summary>
      <returns>返回所提供的项的 Include 特性的值，该值是计算得到的且经过了转义。</returns>
      <param name="item">要计算和转义的项。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItemDefinition)">
      <summary>获取所提供的项定义的 Include 特性的值，该值是计算得到的且经过了转义。</summary>
      <returns>返回 Include 特性的值。</returns>
      <param name="item">要计算和转义的项定义。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.GetItems(System.String)">
      <summary>获取项目中的给定项类型的所有项。 如果不存在任何给定项类型的项，则返回一个空列表。 使用 AddItem 或 RemoveItem 修改此项目中的项。</summary>
      <returns>返回项目中的给定项类型的所有项。 如果不存在具有给定项名称的项，则返回空列表。</returns>
      <param name="itemType">要检索的项类型。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.GetItemsByEvaluatedInclude(System.String)">
      <summary>获取具有给定的计算 Include 特性的所有项。</summary>
      <returns>返回具有给定的计算 Include 特性的所有项。</returns>
      <param name="evaluatedInclude">计算的 Include 特性。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.GetItemsIgnoringCondition(System.String)">
      <summary>获取项目中的给定类型的所有项（不管其 Condition 特性的计算结果是否为 true）。 这是一个只读列表：可使用 AddItem 或 RemoveItem 修改此项目中的项。</summary>
      <returns>返回项目中的给定类型的所有项（不管其 Condition 特性的计算结果是否为 true）。</returns>
      <param name="itemType">要检索的项类型。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.GetLogicalProject">
      <summary>获取可枚举“逻辑项目”中的所有元素的枚举器。 逻辑项目定义为从单个 MSBuild 文件获得的未计算项目，该 MSBuild 文件是通过将原始 MSBuild 项目清单文件的所有导入的文本内联得到的。</summary>
      <returns>返回可枚举“逻辑项目”中的所有元素的枚举器。</returns>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectItem,System.String)">
      <summary>获取所提供的项中具有提供的名称的元数据的转义值。</summary>
      <returns>获取所提供的项中具有提供的名称的元数据的转义值。</returns>
      <param name="item">要转义其元数据的项。</param>
      <param name="name">要转义的元数据的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectItemDefinition,System.String)">
      <summary>获取所提供的项定义上具有提供的名称的元数据的转义值。</summary>
      <returns>返回所提供的项定义上具有提供的名称的元数据的转义值。</returns>
      <param name="item">要转义其元数据的项定义。</param>
      <param name="name">要转义的元数据的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectMetadata)">
      <summary>获取所提供的元数据的转义值。</summary>
      <returns>获取所提供的元数据的转义值。</returns>
      <param name="metadatum">要转义的元数据。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.GetProperty(System.String)">
      <summary>获取项目中具有指定名称的任何属性。</summary>
      <returns>返回项目中具有指定名称的任何属性。 如果不存在该名称的属性，则返回 null。</returns>
      <param name="name">要检索的属性的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.GetPropertyValue(System.String)">
      <summary>获取此项目中的给定属性的值。</summary>
      <returns>返回此项目中的给定属性的值。 如果不存在该名称的属性，则返回空字符串。 在返回字符串之前将转换转义序列。</returns>
      <param name="name">要检索其值的属性的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.GetPropertyValueEscaped(Microsoft.Build.Evaluation.ProjectProperty)">
      <summary>获取所提供的属性的转义值。</summary>
      <returns>返回所提供的属性的转义值。</returns>
      <param name="property">要转义的属性。</param>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Project.GlobalProperties">
      <summary>获取用于计算此项目的全局属性的字典。</summary>
      <returns>返回用于计算此项目的全局属性的字典。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Project.Imports">
      <summary>获取参与此项目计算的所有文件的列表。</summary>
      <returns>返回参与此项目计算的所有文件的列表。 每项的名称是导致导入对应文件的 Import 元素。 每项的值是导入的项目的项目根。 将不包括其 Condition 特性的计算结果为 false 的 Import 元素。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Project.ImportsIncludingDuplicates">
      <summary>获取重复导入的列表（如果多次导入某个导入文件）。 但是，在计算中仅使用第一个导入。</summary>
      <returns>返回重复导入的列表。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Project.IsBuildEnabled">
      <summary>获取或设置一个属性，该属性选择是否可以生成此项目的目标和任务。</summary>
      <returns>如果可以生成此项目的目标和任务，则返回 true；否则返回 false。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Project.IsDirty">
      <summary>获取一个属性，该属性指示此项目是否已修改以致于必须重新计算。</summary>
      <returns>返回一个属性，该属性指示此项目是否已修改以致于必须重新计算。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Project.ItemDefinitions">
      <summary>获取此项目中的项定义的字典（按项类型组织条目）。</summary>
      <returns>返回此项目中的项定义的字典（按项类型组织条目）。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Project.Items">
      <summary>获取可枚举此项目中的所有项（在项类型组中排序）的枚举器。</summary>
      <returns>返回可枚举此项目中的所有项（在项类型组中排序）的枚举器。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Project.ItemsIgnoringCondition">
      <summary>获取可枚举此项目中的所有项（在项类型组中排序）的枚举器。</summary>
      <returns>返回可枚举此项目中的所有项（在项类型组中排序）的枚举器，其中包括其条件计算结果为 false 的项或其条件计算结果为 false 的项组中包含的项。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Project.ItemTypes">
      <summary>获取可枚举此项目中的所有项类型的枚举器。</summary>
      <returns>返回可枚举此项目中的所有项类型的枚举器。 这是一个有序集合。</returns>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.MarkDirty">
      <summary>将此项目标记为已修改。</summary>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Project.ProjectCollection">
      <summary>获取包含此项目的项目集合。</summary>
      <returns>返回包含此项目的项目集合，返回值决不会为 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Project.ProjectFileLocation">
      <summary>给定文件的位置，其中没有任何特定内容。 如果未对文件命名一个名称，此为空的位置。 这是没有位置的合理情况。</summary>
      <returns>返回发起文件的位置或空位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Project.Properties">
      <summary>获取可枚举此项目中的所有属性的枚举器。 这是一个无序集合。</summary>
      <returns>返回可枚举此项目中的所有属性的枚举器。 由于属性按其出现的顺序进行计算，因此这是一个无序集合。</returns>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary">
      <summary>重新计算项目以合并任何更改。</summary>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.RemoveGlobalProperty(System.String)">
      <summary>移除一个全局属性，并将项目标记为已修改。</summary>
      <returns>如果设置了全局属性的值，则返回 true。</returns>
      <param name="name">要移除的全局属性的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.RemoveItem(Microsoft.Build.Evaluation.ProjectItem)">
      <summary>从项目中移除一个项。 要移除的项必须存在于项目中，并且不得源自于导入的文件。</summary>
      <returns>如果该项存在于此计算的项目中，则返回 true；否则返回 false。 此方法通常会返回 true，原因是，如果请求的项不存在，则此方法会引发异常。 不过，如果该项仅存在于 ItemsIgnoringCondition 集合中，则此方法将返回 false。</returns>
      <param name="item">要移除的项。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.RemoveItems(System.Collections.Generic.IEnumerable{Microsoft.Build.Evaluation.ProjectItem})">
      <summary>移除项目中的所有给定项，除非它们源自于导入的项目。</summary>
      <param name="items">要移除的项。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.RemoveProperty(Microsoft.Build.Evaluation.ProjectProperty)">
      <summary>从项目中移除一个属性。 要移除的属性必须存在于项目中，并且不得源自于导入的文件。</summary>
      <returns>如果该属性存在于此计算的项目中，则返回 true；否则返回 false。</returns>
      <param name="property">要移除的属性。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.Save">
      <summary>使用默认的字符编码将项目保存到文件系统上（如果项目已修改）。</summary>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.Save(System.IO.TextWriter)">
      <summary>将项目保存到提供的文本编写器（无论项目是否已修改）。 使用文本编写器的字符编码，并将项目标记为未修改。</summary>
      <param name="writer">要将项目保存到的文本编写器。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.Save(System.String)">
      <summary>使用默认的字符编码将项目保存到文件系统上（如果项目已修改或项目源代码的路径已修改）。</summary>
      <param name="path">项目源代码的路径。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.Save(System.String,System.Text.Encoding)">
      <summary>使用给定的字符编码将项目保存到文件系统上（如果项目已修改或项目源代码的路径已修改）。</summary>
      <param name="path">项目源代码的路径。</param>
      <param name="encoding">用于保存项目的字符编码。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.Save(System.Text.Encoding)">
      <summary>使用给定的字符编码将项目保存到文件系统上（如果项目已修改）。</summary>
      <param name="encoding">用于保存项目的字符编码。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.SaveLogicalProject(System.IO.TextWriter)">
      <summary>保存“逻辑”或“预处理”项目文件，该文件包括所有导入的文件，就如同这些文件构成了单个文件一样。</summary>
      <param name="writer">用于保存项目文件的编写器。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.SetGlobalProperty(System.String,System.String)">
      <summary>在计算项目之后设置一个全局属性。 如果值发生更改，则将项目标记为需要重新计算。</summary>
      <returns>如果值发生更改，则返回 true，否则返回 false。</returns>
      <param name="name">要设置的全局属性的名称。</param>
      <param name="escapedValue">全局属性的新值。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Project.SetProperty(System.String,System.String)">
      <summary>在项目中设置或添加一个具有给定名称和值的属性。 如果存在同名属性，但它不是源自于导入的文件，则覆盖该属性的值。</summary>
      <returns>返回该属性。</returns>
      <param name="name">要设置的属性的名称。</param>
      <param name="unevaluatedValue">属性的新的未计算值。</param>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Project.SkipEvaluation">
      <summary>获取或设置一个标志，该标志确定是否临时禁用 ReevaluateIfNecessary。 当宿主希望对项目进行大量读写操作并希望临时牺牲准确性以换取性能，则可以使用此标志。</summary>
      <returns>返回一个标志，该标志确定是否临时禁用 ReevaluateIfNecessary。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Project.SubToolsetVersion">
      <summary>获取 SubToolsetVersion 特性的值（如果有的话）。 此值结合 TolsVersion 特性的值确定此项目的工具集属性。</summary>
      <returns>返回 SubToolsetVersion 特性值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Project.Targets">
      <summary>获取此项目中的所有目标的字典（按目标名称组织条目）。</summary>
      <returns>返回此项目中的所有目标的字典（按目标名称组织条目）。 此集合中不包括重写的目标。 此字典为只读。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Project.ToolsVersion">
      <summary>获取计算此项目所使用的工具版本（如果有的话）。</summary>
      <returns>获取计算此项目所使用的工具版本（如果有的话）。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Project.Xml">
      <summary>获取与此项目关联的根目录。 决不会为 null。</summary>
      <returns>返回与此项目关联的根项目，返回值决不会为 null。</returns>
    </member>
    <member name="T:Microsoft.Build.Evaluation.ProjectChangedEventArgs">
      <summary>
        <see cref="E:Microsoft.Build.Evaluation.ProjectCollection.ProjectCollectionChanged" /> 事件的事件参数。</summary>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectChangedEventArgs.Project">
      <summary>获取已标记为未更新的项目。</summary>
      <returns>决不会为 null。</returns>
    </member>
    <member name="T:Microsoft.Build.Evaluation.ProjectCollection">
      <summary>封装一组相关项目及其工具集、默认的全局属性集以及生成这些项目应使用的记录器。 此类的一个全局版本将用作默认的项目集合。</summary>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.#ctor">
      <summary>创建一个没有全局属性或记录器的项目集合。 将利用配置文件和注册表初始化项目集合工具集。</summary>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.#ctor(Microsoft.Build.Evaluation.ToolsetDefinitionLocations)">
      <summary>创建一个没有全局属性或记录器的项目集合。 将利用给定位置中的工具集初始化项目集合工具集。</summary>
      <param name="toolsetLocations">要从其中加载工具集的位置。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>实例化一个项目集合，该项目集合包含指定的全局属性但没有记录器，并从配置文件和注册表中读取工具集信息。</summary>
      <param name="globalProperties">要使用的默认全局属性。 可能为 null。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},Microsoft.Build.Evaluation.ToolsetDefinitionLocations)">
      <summary>实例化一个项目集合，该项目集合包含指定的全局属性和记录器，并使用指定的工具集位置。</summary>
      <param name="globalProperties">要使用的默认全局属性。 可能为 null。</param>
      <param name="loggers">要注册的记录器。 可能为 null。</param>
      <param name="toolsetDefinitionLocations">要从其中加载工具集的位置。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord},Microsoft.Build.Evaluation.ToolsetDefinitionLocations,System.Int32,System.Boolean)">
      <summary>创建一个具有指定的全局属性、记录器、节点计数和 onlyLogCriticalEvents 值的项目集合。 将利用给定位置中的工具集初始化项目集合工具集。</summary>
      <param name="globalProperties">要使用的默认全局属性。 可能为 null。</param>
      <param name="loggers">要注册的记录器。 可能为 null，此时改为指定给任何生成。</param>
      <param name="remoteLoggers">要注册的任何远程记录器。 可能为 null，此时改为指定给任何生成。</param>
      <param name="toolsetDefinitionLocations">要从其中加载工具集的位置。</param>
      <param name="maxNodeCount">要用于生成的节点的最大数量。</param>
      <param name="onlyLogCriticalEvents">如果设置为 true，则仅记录关键事件。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.AddToolset(Microsoft.Build.Evaluation.Toolset)">
      <summary>向项目集合中添加新的工具集。 使用相同的工具版本替换任何现有工具集。</summary>
      <param name="toolset">要添加的工具集。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.ContainsToolset(System.String)">
      <summary>确定是否为给定的工具版本定义了工具集。</summary>
      <returns>如果为给定的工具版本定义了工具集，则返回 true；否则返回 false。</returns>
      <param name="toolsVersion">要搜索的工具版本。</param>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectCollection.Count">
      <summary>获取当前加载到此集合中的项目的数量。</summary>
      <returns>返回当前加载到此集合中的项目的数量。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectCollection.DefaultToolsVersion">
      <summary>获取此项目集合的默认工具版本。</summary>
      <returns>返回此项目集合的默认工具版本（始终会定义此版本）。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectCollection.DisableMarkDirty">
      <summary>获取或设置一个标志，该标志确定是否对此集合中的项目临时禁用 <see cref="M:Microsoft.Build.Evaluation.Project.MarkDirty" />。 例如，可以通过此标记来设置全局属性，而不必将项目标记为已更新（从而导致重新计算）。</summary>
      <returns>返回一个标志，该标志确定是否临时禁用 MarkDirty。</returns>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.Dispose">
      <summary>释放托管资源和非托管资源。当主机不再需要该项目集合时调用。</summary>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.Dispose(System.Boolean)">
      <summary>释放托管资源和非托管资源。当主机不再需要该项目集合时调用。 关闭该项目集合拥有的任何记录服务，并释放记录器线程。</summary>
      <param name="disposing">如果为 true，则释放托管资源和非托管资源；否则仅释放非托管资源。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.Escape(System.String)">
      <summary>将字符串中的特殊字符转换为 MSBuild 转义格式。</summary>
      <returns>返回转换的字符串。</returns>
      <param name="unescapedString">要转换的字符串。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.GetGlobalProperty(System.String)">
      <summary>获取该项目集合的任何具有指定名称的全局属性。</summary>
      <returns>返回该项目集合的任何具有指定名称的全局属性；否则返回 null。</returns>
      <param name="name">要检索的属性的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.GetLoadedProjects(System.String)">
      <summary>获取其项目路径与给定路径相匹配的所有项目。</summary>
      <returns>返回其项目路径与给定路径相匹配的所有项目。</returns>
      <param name="fullPath">要匹配的项目文件的路径。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.GetToolset(System.String)">
      <summary>获取具有指定的工具版本的工具集。</summary>
      <returns>返回具有指定的工具版本的工具集。 如果不存在与此工具版本相匹配的工具集，则返回 null。</returns>
      <param name="toolsVersion">要匹配的工具版本。</param>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectCollection.GlobalProjectCollection">
      <summary>获取全局项目集合对象。</summary>
      <returns>返回全局项目集合对象。 这是一个没有全局属性或记录器的单一实例项目集合。 将从配置文件和注册表获取工具集信息。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectCollection.GlobalProperties">
      <summary>获取此集合中的所有项目的只读默认全局属性。</summary>
      <returns>返回此集合中的所有项目的只读默认全局属性。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectCollection.HostServices">
      <summary>获取或设置一个对象，在生成项目集合中包含的项目的过程中，该对象将为各个任务提供主机服务。</summary>
      <returns>返回主机服务对象。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectCollection.IsBuildEnabled">
      <summary>获取或设置一个属性，该属性在默认情况下选择是否可以生成项目集合中的项目的目标和任务。</summary>
      <returns>获取或设置一个属性，该属性在默认情况下选择是否可以生成此项目集合中的项目的目标和任务。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectCollection.LoadedProjects">
      <summary>获取当前加载到此集合中的所有项目。</summary>
      <returns>返回当前加载到此集合中的所有项目。</returns>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.LoadProject(System.String)">
      <summary>利用给定的项目文件中的源代码计算一个项目。 将使用此项目集合的全局属性和工具版本来计算源代码。</summary>
      <returns>如果已经利用给定的项目文件计算集合中的一个现有项目，则返回该现有项目。 否则，将创建并计算一个新项目，将其添加到项目集合中，然后返回此项目。</returns>
      <param name="fileName">要计算的项目文件。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.LoadProject(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
      <summary>利用从给定的项目文件读取的源代码计算一个项目。 将使用给定的全局属性和工具版本计算源代码。</summary>
      <returns>如果已经利用给定的项目文件以及给定的全局属性和工具版本计算集合中的一个现有项目，则返回该现有项目。 否则，将创建并计算一个新项目，将其添加到项目集合中，然后返回此项目。</returns>
      <param name="fileName">要计算的项目文件。</param>
      <param name="globalProperties">要使用的全局属性。 可能为 null，在此情况下，将使用包含项目集合的全局属性。</param>
      <param name="toolsVersion">工具版本。 可能为 null。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.LoadProject(System.String,System.String)">
      <summary>利用从给定的项目文件读取的源代码计算一个项目。 将使用此项目集合的全局属性和给定的工具版本来计算源代码。</summary>
      <returns>如果已经利用给定的项目文件和给定的工具版本计算集合中的一个现有项目，则返回该现有项目。 否则，将创建并计算一个新项目，将其添加到项目集合中，然后返回此项目。</returns>
      <param name="fileName">要计算的项目文件。</param>
      <param name="toolsVersion">要使用的工具版本。 可能为 null。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.LoadProject(System.Xml.XmlReader)">
      <summary>利用从给定的 XML 读取器读取的源代码计算一个项目。 将使用此项目集合的全局属性和工具版本来计算源代码。</summary>
      <returns>返回新项目。</returns>
      <param name="xmlReader">从中读取项目源代码的 Xml 读取器。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.LoadProject(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
      <summary>利用从给定的 XML 读取器读取的源代码计算一个项目。 将使用给定的全局属性和工具版本计算源代码。</summary>
      <returns>返回新项目。</returns>
      <param name="xmlReader">从中读取项目的 Xml 读取器。</param>
      <param name="globalProperties">要使用的全局属性。 可以为 null，在此情况下，将使用包含项目集合的全局属性。</param>
      <param name="toolsVersion">工具版本。 可能为 null。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.LoadProject(System.Xml.XmlReader,System.String)">
      <summary>利用从给定的 XML 读取器读取的源代码计算一个项目。 将使用此项目集合的全局属性和给定的工具版本来计算源代码。</summary>
      <returns>返回新项目。</returns>
      <param name="xmlReader">从中读取项目源代码的 Xml 读取器。</param>
      <param name="toolsVersion">要使用的工具版本。 可能为 null。</param>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectCollection.Loggers">
      <summary>获取此集合中的项目可用于其生成的所有记录器。</summary>
      <returns>返回此集合中的项目可用于其生成的所有记录器。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectCollection.OnlyLogCriticalEvents">
      <summary>获取或设置一个开关，该开关确定是否仅记录关键事件，例如警告和错误。</summary>
      <returns>如果仅记录关键事件（例如警告和错误），则为 true；否则为 false。</returns>
    </member>
    <member name="E:Microsoft.Build.Evaluation.ProjectCollection.ProjectAdded">
      <summary>当项目添加到项目集合 ProjectRootElementCache 时的事件引发。</summary>
    </member>
    <member name="E:Microsoft.Build.Evaluation.ProjectCollection.ProjectChanged">
      <summary>当直接更改该事例包含的 <see cref="T:Microsoft.Build.Evaluation.Project" /> 时引发。</summary>
    </member>
    <member name="E:Microsoft.Build.Evaluation.ProjectCollection.ProjectCollectionChanged">
      <summary>当该实例上的状态更改时引发。</summary>
    </member>
    <member name="E:Microsoft.Build.Evaluation.ProjectCollection.ProjectXmlChanged">
      <summary>当更改该事例包含的 <see cref="T:Microsoft.Build.Construction.ProjectRootElement" /> 时引发。</summary>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.RegisterForwardingLoggers(System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})">
      <summary>向用于此集合中的项目生成的远程记录器的集合添加给定的远程记录器。</summary>
      <param name="remoteLoggers">要添加的远程记录器。 可能为 null。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.RegisterLogger(Microsoft.Build.Framework.ILogger)">
      <summary>向用于此集合中的项目生成的记录器集合添加给定的记录器。</summary>
      <param name="logger">要添加的记录器。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.RegisterLoggers(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})">
      <summary>向用于此集合中的项目生成的记录器集合添加给定的记录器。</summary>
      <param name="loggers">要添加的记录器。 可能为 null。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.RemoveAllToolsets">
      <summary>从项目集合中移除所有工具集。</summary>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.RemoveGlobalProperty(System.String)">
      <summary>从默认全局属性集中移除一个全局属性。</summary>
      <returns>如果在移除之前存在该全局属性，则返回 true；否则返回 false。</returns>
      <param name="name">要移除的默认全局属性的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.RemoveToolset(System.String)">
      <summary>从项目集合中移除一个工具集。</summary>
      <returns>如果在移除之前存在该工具集，则返回 true；否则返回 false。</returns>
      <param name="toolsVersion">要移除的工具集。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.SetGlobalProperty(System.String,System.String)">
      <summary>设置默认全局属性集中的一个属性的值。</summary>
      <param name="name">要添加或设置的默认全局属性的名称。</param>
      <param name="value">默认全局属性的新值。</param>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectCollection.SkipEvaluation">
      <summary>获取或设置一个标志，该标志确定是否对此集合中的项目临时禁用 ReevaluateIfNecessary。 当主机希望对项目进行大量读写操作并希望临时牺牲准确性以换取性能，则可以使用此标志。</summary>
      <returns>返回一个标志，该标志确定是否临时禁用 ReevaluateIfNecessary。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectCollection.ToolsetLocations">
      <summary>获取用于查找工具集的位置。</summary>
      <returns>返回用于查找工具集的位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectCollection.Toolsets">
      <summary>获取可用于此项目集合的工具集。</summary>
      <returns>返回可用于此项目集合的工具集。</returns>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.TryUnloadProject(Microsoft.Build.Construction.ProjectRootElement)">
      <summary>从集合中移除项目的尝试。</summary>
      <returns>如果该项目已卸载，则返回 true。</returns>
      <param name="projectRootElement">要卸载的项目的根元素。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.Unescape(System.String)">
      <summary>将字符串中的转义字符转换为具有特殊意义的 MSBuild 字符。</summary>
      <returns>返回转换的字符串。</returns>
      <param name="escapedString">要转换的字符串。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.UnloadAllProjects">
      <summary>移除此项目集合中的所有项目。</summary>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.UnloadProject(Microsoft.Build.Construction.ProjectRootElement)">
      <summary>从项目根缓存中移除项目根元素。</summary>
      <param name="projectRootElement">要卸载的项目根元素。</param>
      <exception cref="T:System.InvalidOperationException">如果加载的项目或其导入内容仍在使用要卸载的项目根元素，则引发此异常。</exception>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.UnloadProject(Microsoft.Build.Evaluation.Project)">
      <summary>从项目集合中移除给定的项目。</summary>
      <param name="project">要移除的项目。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.UnregisterAllLoggers">
      <summary>移除由此集合中的项目生成使用的记录器集合中的所有记录器。</summary>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectCollection.Version">
      <summary>获取包含 MSBuild 引擎的程序集文件的文件版本。</summary>
      <returns>返回包含 MSBuild 引擎的程序集文件的文件版本。</returns>
    </member>
    <member name="T:Microsoft.Build.Evaluation.ProjectCollection.ProjectAddedEventHandler">
      <summary>亚接受其中项目已添加到项目集合的处理程序</summary>
    </member>
    <member name="T:Microsoft.Build.Evaluation.ProjectCollection.ProjectAddedToProjectCollectionEventArgs">
      <summary>提供信息，设计哪些项目添加至P <see cref="T:Microsoft.Build.Evaluation.ProjectCollection" /> 项目集合。</summary>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectCollection.ProjectAddedToProjectCollectionEventArgs.#ctor(Microsoft.Build.Construction.ProjectRootElement)">
      <summary>添加到项目几何的根元素。</summary>
      <param name="element">添加到项目几何的根元素。</param>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectCollection.ProjectAddedToProjectCollectionEventArgs.ProjectRootElement">
      <summary>添加到项目集合的根元素。</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ProjectRootElement" />。</returns>
    </member>
    <member name="T:Microsoft.Build.Evaluation.ProjectCollectionChangedEventArgs">
      <summary>
        <see cref="E:Microsoft.Build.Evaluation.ProjectCollection.ProjectCollectionChanged" /> 事件的事件参数。</summary>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectCollectionChangedEventArgs.Changed">
      <summary>获取 <see cref="T:Microsoft.Build.Evaluation.ProjectCollection" /> 所发生的更改类型。</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Evaluation.ProjectCollectionChangedState" />。</returns>
    </member>
    <member name="T:Microsoft.Build.Evaluation.ProjectCollectionChangedState">
      <summary>属性或其他可变状态与  <see cref="T:Microsoft.Build.Evaluation.ProjectCollection" /> 项目集合相关。</summary>
    </member>
    <member name="F:Microsoft.Build.Evaluation.ProjectCollectionChangedState.DefaultToolsVersion">
      <summary>
        <see cref="P:Microsoft.Build.Evaluation.ProjectCollection.DefaultToolsVersion" /> 属性更改了。</summary>
    </member>
    <member name="F:Microsoft.Build.Evaluation.ProjectCollectionChangedState.DisableMarkDirty">
      <summary>
        <see cref="P:Microsoft.Build.Evaluation.ProjectCollection.DisableMarkDirty" /> 属性更改了。</summary>
    </member>
    <member name="F:Microsoft.Build.Evaluation.ProjectCollectionChangedState.GlobalProperties">
      <summary>全局属性改变。</summary>
    </member>
    <member name="F:Microsoft.Build.Evaluation.ProjectCollectionChangedState.HostServices">
      <summary>
        <see cref="P:Microsoft.Build.Evaluation.ProjectCollection.HostServices" /> 属性更改了。</summary>
    </member>
    <member name="F:Microsoft.Build.Evaluation.ProjectCollectionChangedState.IsBuildEnabled">
      <summary>
        <see cref="P:Microsoft.Build.Evaluation.ProjectCollection.IsBuildEnabled" /> 属性更改了。</summary>
    </member>
    <member name="F:Microsoft.Build.Evaluation.ProjectCollectionChangedState.Loggers">
      <summary>已更改的记录器。</summary>
    </member>
    <member name="F:Microsoft.Build.Evaluation.ProjectCollectionChangedState.OnlyLogCriticalEvents">
      <summary>
        <see cref="P:Microsoft.Build.Evaluation.ProjectCollection.OnlyLogCriticalEvents" /> 属性更改了。</summary>
    </member>
    <member name="F:Microsoft.Build.Evaluation.ProjectCollectionChangedState.SkipEvaluation">
      <summary>
        <see cref="P:Microsoft.Build.Evaluation.ProjectCollection.SkipEvaluation" /> 属性更改了。</summary>
    </member>
    <member name="F:Microsoft.Build.Evaluation.ProjectCollectionChangedState.Toolsets">
      <summary>改变的工具集。</summary>
    </member>
    <member name="T:Microsoft.Build.Evaluation.ProjectItem">
      <summary>表示计算的设计时项目项。</summary>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectItem.DirectMetadata">
      <summary>获取可枚举所有项元数据的枚举器。</summary>
      <returns>返回可枚举所有项元数据的枚举器，返回值决不会为 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectItem.DirectMetadataCount">
      <summary>获取此项的元数据的计数。</summary>
      <returns>返回此项的元数据的计数。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectItem.EvaluatedInclude">
      <summary>获取 Include 特性的计算值。</summary>
      <returns>返回 Include 特性的计算值。</returns>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectItem.GetMetadata(System.String)">
      <summary>获取此项的给定元数据的计算值。</summary>
      <returns>获取此项的给定元数据的计算值。 如果不存在具有给定名称的元数据，则返回 null。</returns>
      <param name="name">要检索其值的元数据的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectItem.GetMetadataValue(System.String)">
      <summary>获取此项的给定元数据（包括源自于项定义的元数据）的计算值。</summary>
      <returns>返回此项的给定元数据（包括源自于项定义的元数据）的计算值。 如果不存在具有给定名称的元数据，则返回空字符串。</returns>
      <param name="name">要检索其值的元数据的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectItem.HasMetadata(System.String)">
      <summary>确定在此项上是否定义了具有给定名称的元数据。</summary>
      <returns>如果在此项上定义了具有给定名称的元数据，则返回 true；否则返回 false。</returns>
      <param name="name">要搜索的元数据的名称。</param>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectItem.IsImported">
      <summary>确定此项是否源自于一个导入的文件。</summary>
      <returns>如果此项源自于一个导入的文件，则返回 true；否则返回 false。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectItem.ItemType">
      <summary>获取或设置此项的类型。</summary>
      <returns>返回项类型。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectItem.Metadata">
      <summary>获取此项的所有元数据（包括源自于项定义的元数据）。</summary>
      <returns>返回此项的所有元数据（包括源自于项定义的元数据）。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectItem.MetadataCount">
      <summary>获取此项的元数据（包括源自于项定义的任何元数据和任何内置元数据）的计数。</summary>
      <returns>返回此项的元数据（包括源自于项定义的任何元数据和任何内置元数据）的计数。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectItem.Project">
      <summary>获取包含此项目项的项目。</summary>
      <returns>返回包含此项目项的项目。</returns>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectItem.RemoveMetadata(System.String)">
      <summary>移除任何具有给定名称的元数据。</summary>
      <returns>如果在移除前存在具有给定名称的元数据，则返回 true；否则返回 false。</returns>
      <param name="name">要移除的元数据的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectItem.Rename(System.String)">
      <summary>将该项重命名为给定的名称。</summary>
      <param name="name">该项的新名称。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectItem.SetMetadataValue(System.String,System.String)">
      <summary>将具有给定名称和未计算值的元数据添加到该项。</summary>
      <returns>返回新的元数据。 如果已存在具有给定名称的元数据，则返回此元数据。</returns>
      <param name="name">要添加的元数据的名称。</param>
      <param name="unevaluatedValue">要添加的元数据的未计算值。</param>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectItem.UnevaluatedInclude">
      <summary>获取或设置 Include 特性的未计算值。</summary>
      <returns>返回 Include 特性的未计算值。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectItem.Xml">
      <summary>获取与此项关联的项元素。</summary>
      <returns>返回与此项关联的项元素，返回值决不会为 null。</returns>
    </member>
    <member name="T:Microsoft.Build.Evaluation.ProjectItemDefinition">
      <summary>表示一个特定项类型的计算的项定义。</summary>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectItemDefinition.GetMetadata(System.String)">
      <summary>获取项定义中任何具有给定名称的元数据。</summary>
      <returns>获取项定义中任何具有给定名称的元数据。 如果不存在具有该名称的元数据，则返回 null。</returns>
      <param name="name">要检索的元数据的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectItemDefinition.GetMetadataValue(System.String)">
      <summary>获取具有指定名称的项中的任何元数据的值。</summary>
      <returns>返回具有指定名称的项中的任何元数据的值；否则返回 null。</returns>
      <param name="name">要检索其元数据值的项的名称。</param>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectItemDefinition.ItemType">
      <summary>获取此项定义的项类型。</summary>
      <returns>返回此项定义的项类型。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectItemDefinition.Metadata">
      <summary>获取可枚举项定义的所有元数据的枚举器。</summary>
      <returns>返回可枚举项定义的所有元数据的枚举器。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectItemDefinition.MetadataCount">
      <summary>获取项定义上的元数据的计数。</summary>
      <returns>返回项定义上的元数据的计数。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectItemDefinition.Project">
      <summary>获取包含此项定义的项目。</summary>
      <returns>返回包含此项定义的项目，返回值决不会为 null。</returns>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectItemDefinition.SetMetadataValue(System.String,System.String)">
      <summary>设置项定义中的给定元数据的值。</summary>
      <returns>返回具有给定名称的元数据。</returns>
      <param name="name">要设置的元数据的名称。</param>
      <param name="unevaluatedValue">元数据的新的未计算值。</param>
    </member>
    <member name="T:Microsoft.Build.Evaluation.ProjectLoadSettings">
      <summary>用于控制项目加载的标志。</summary>
    </member>
    <member name="F:Microsoft.Build.Evaluation.ProjectLoadSettings.Default">
      <summary>正常加载。 这是默认设置。</summary>
    </member>
    <member name="F:Microsoft.Build.Evaluation.ProjectLoadSettings.IgnoreMissingImports">
      <summary>计算项目时忽略不存在的目标文件。</summary>
    </member>
    <member name="F:Microsoft.Build.Evaluation.ProjectLoadSettings.RecordDuplicateButNotCircularImports">
      <summary>指示应记录导入（包括 ImportsIncludingDuplicates 属性上的重复导入，但不包括循环导入）</summary>
    </member>
    <member name="F:Microsoft.Build.Evaluation.ProjectLoadSettings.RejectCircularImports">
      <summary>指示如检测到任何循环导入，将引发异常</summary>
    </member>
    <member name="T:Microsoft.Build.Evaluation.ProjectMetadata">
      <summary>表示计算的设计时元数据。</summary>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectMetadata.ConditionLocation">
      <summary>此条件特性的位置。</summary>
      <returns>返回条件特性位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectMetadata.EvaluatedValue">
      <summary>获取计算的元数据值。</summary>
      <returns>返回计算的元数据值，该值决不会为 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectMetadata.IsImported">
      <summary>确定元数据是否源自于一个导入的文件。</summary>
      <returns>如果元数据源自于一个导入的文件，则返回 true；否则返回 false。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectMetadata.ItemType">
      <summary>获取用作容器的项定义或项的项类型。</summary>
      <returns>返回用作容器的项定义或项的项类型。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectMetadata.Location">
      <summary>元素的位置。</summary>
      <returns>返回元素位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectMetadata.Name">
      <summary>获取元数据的名称。</summary>
      <returns>返回元数据的名称。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectMetadata.Predecessor">
      <summary>获取在计算期间由此元数据重写的（某个项定义或项中的）最后一个元数据。</summary>
      <returns>返回其值在计算期间由此元数据重写的（某个项定义或项中的）最后一个元数据。 如果未重写元数据，则返回 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectMetadata.Project">
      <summary>获取包含此元数据的项目。</summary>
      <returns>返回包含此元数据的项目，返回值决不会为 null。</returns>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectMetadata.System#IEquatable{T}#Equals(Microsoft.Build.Evaluation.ProjectMetadata)">
      <summary>比较此项目元数据与给定的项目元数据是否相等。</summary>
      <returns>如果项目元数据相等，则返回 true；否则返回 false。</returns>
      <param name="other">要比较的项目元数据。</param>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectMetadata.UnevaluatedValue">
      <summary>获取或设置未计算的元数据值。</summary>
      <returns>返回未计算的元数据值。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectMetadata.Xml">
      <summary>获取相关的项目元数据元素。</summary>
      <returns>返回相关的项目元数据元素，返回值决不会为 null。</returns>
    </member>
    <member name="T:Microsoft.Build.Evaluation.ProjectProperty">
      <summary>表示计算的设计时属性。</summary>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectProperty.EvaluatedValue">
      <summary>获取计算的属性值。</summary>
      <returns>返回计算的属性值，该值决不会为 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectProperty.IsEnvironmentProperty">
      <summary>确定该属性是否源自于环境变量。</summary>
      <returns>如果该属性源自于一个环境变量，则返回 true；否则返回 false。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectProperty.IsGlobalProperty">
      <summary>确定该属性是否为全局属性。</summary>
      <returns>如果该属性为全局属性，则返回 true；否则返回 false。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectProperty.IsImported">
      <summary>确定该属性是否源自于一个导入的文件。</summary>
      <returns>如果该属性源自于一个导入的文件，而不是源自于一个环境变量、全局属性或保留属性，则返回 true； 否则返回 false。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectProperty.IsReservedProperty">
      <summary>确定该属性是否为保留属性（例如“MSBuildProjectFile”）。</summary>
      <returns>如果该属性为保留属性，则返回 true；否则返回 false。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectProperty.Name">
      <summary>获取属性的名称。</summary>
      <returns>返回属性的名称。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectProperty.Predecessor">
      <summary>获取在计算期间由此属性重写的最后一个属性。</summary>
      <returns>返回其值在计算期间由此属性重写的最后一个属性。 如果未重写此属性，则返回 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectProperty.Project">
      <summary>获取包含此属性的项目。</summary>
      <returns>返回包含此属性的项目，返回值决不会为 null。</returns>
    </member>
    <member name="M:Microsoft.Build.Evaluation.ProjectProperty.System#IEquatable{T}#Equals(Microsoft.Build.Evaluation.ProjectProperty)">
      <summary>比较此项目属性与给定的项目属性是否相等。</summary>
      <returns>如果项目属性相等，则返回 true；否则返回 false。</returns>
      <param name="other">要比较的项目属性。</param>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectProperty.UnevaluatedValue">
      <summary>获取或设置未计算的属性值。</summary>
      <returns>返回未计算的属性值。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectProperty.Xml">
      <summary>获取相关的属性元素。 支持 XML 属性。 只有在此属性为全局属性、环境属性或内置属性时，才为 null。</summary>
      <returns>返回相关的属性元素。 如果此属性是一个全局属性或保留属性，或者源自于一个环境变量，则返回 null。</returns>
    </member>
    <member name="T:Microsoft.Build.Evaluation.ProjectXmlChangedEventArgs">
      <summary>
        <see cref="E:Microsoft.Build.Evaluation.ProjectCollection.ProjectCollectionChanged" /> 事件的事件参数。</summary>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectXmlChangedEventArgs.ProjectXml">
      <summary>获取刚更改的项目根元素。</summary>
      <returns>决不会为 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ProjectXmlChangedEventArgs.Reason">
      <summary>获取更改的原因。</summary>
      <returns>可能为 null。</returns>
    </member>
    <member name="T:Microsoft.Build.Evaluation.ResolvedImport">
      <summary>在计算的项目中封装导入的项目的 ProjectImportElement 和 ProjectRootElement 之间的导入关系。</summary>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ResolvedImport.ImportedProject">
      <summary>获取导入的项目之一。</summary>
      <returns>返回表示导入的项目的 <see cref="T:Microsoft.Build.Construction.ProjectRootElement" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ResolvedImport.ImportingElement">
      <summary>获取执行导入的元素。</summary>
      <returns>返回一个表示执行导入的元素的 <see cref="T:Microsoft.Build.Construction.ProjectImportElement" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.ResolvedImport.IsImported">
      <summary>获取确定导入的元素是否为自行导入的标志。</summary>
      <returns>如果该元素已导入，则返回 true；否则返回 false。</returns>
    </member>
    <member name="T:Microsoft.Build.Evaluation.SubToolset">
      <summary>表示与特殊的子工具集对应的一组属性的聚合。</summary>
    </member>
    <member name="P:Microsoft.Build.Evaluation.SubToolset.Properties">
      <summary>获取与此特定子工具集对应的属性。</summary>
      <returns>返回对应于此特定子工具集的属性。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.SubToolset.SubToolsetVersion">
      <summary>获取与此子工具集对应的 Visual Studio 版本。</summary>
      <returns>返回包含此子工具集的 Visual Studio 版本的字符串。</returns>
    </member>
    <member name="T:Microsoft.Build.Evaluation.Toolset">
      <summary>表示工具版本（例如“2.0”）、“2.0”）、工具路径以及可选的关联属性集的聚合。</summary>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Toolset.#ctor(System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,System.String)">
      <summary>创建一个具有给定的工具版本和工具路径的工具集。 将从给定的项目集合中获取全局属性、保留属性和环境属性。</summary>
      <param name="toolsVersion">工具集的名称</param>
      <param name="toolsPath">指向此工具集的任务和目标的路径</param>
      <param name="projectCollection">要从其中获取属性的项目集合。</param>
      <param name="msbuildOverrideTasksPath">用于搜索 msbuild 重写任务文件的路径。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Toolset.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.Build.Evaluation.ProjectCollection,System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Evaluation.SubToolset},System.String)">
      <summary>创建一个具有给定的工具版本和工具路径的工具集。 将从给定的项目集合中获取全局属性、保留属性和环境属性。</summary>
      <param name="toolsVersion">工具集的名称。</param>
      <param name="toolsPath">指向此工具集的任务和目标的路径。</param>
      <param name="buildProperties">应与工具集关联的属性。  可能为 null，在此情况下，将使用一个空属性组。</param>
      <param name="projectCollection">要从其中获取属性的项目集合。</param>
      <param name="subToolsets">要添加的工具集关联的子工具集。</param>
      <param name="msbuildOverrideTasksPath">用于搜索 msbuild 重写任务文件的路径。 要添加的工具集关联的子工具集。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Toolset.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.Build.Evaluation.ProjectCollection,System.String)">
      <summary>创建一个具有给定的工具版本、工具路径和生成属性的工具集。 将从给定的项目集合中获取全局属性、保留属性和环境属性。</summary>
      <param name="toolsVersion">工具集的名称</param>
      <param name="toolsPath">指向此工具集的任务和目标的路径</param>
      <param name="buildProperties">应与工具集关联的属性。  可能为 null，在此情况下，将使用一个空属性组。</param>
      <param name="projectCollection">要从其中获取属性的项目集合。</param>
      <param name="msbuildOverrideTasksPath">用于搜索 msbuild 重写任务文件的路径。</param>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Toolset.DefaultSubToolsetVersion">
      <summary>获取此工具集的默认子工具集版本。</summary>
      <returns>返回默认子工具集版本。</returns>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Toolset.GenerateSubToolsetVersion">
      <summary>创建将与此工具集一起使用的子工具集版本。</summary>
      <returns>返回将与此工具集一起使用的子工具集版本。</returns>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Toolset.GenerateSubToolsetVersion(System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
      <summary>创建将与此工具集一起使用的子工具集版本。</summary>
      <returns>返回子工具集版本。</returns>
      <param name="overrideGlobalProperties">设置全局属性以用以创建子工具集版本。 可能为 null。</param>
      <param name="solutionVersion">使用创建子工具集版本的解决方案版本。</param>
    </member>
    <member name="M:Microsoft.Build.Evaluation.Toolset.GetProperty(System.String,System.String)">
      <summary>获取给定属性名称和子工具集版本指定的属性。</summary>
      <returns>如果找到指定的属性，则返回该属性，否则返回 null。</returns>
      <param name="propertyName">属性的名称。</param>
      <param name="subToolsetVersion">子工具集的子工具集版本。 可能为 null。</param>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Toolset.Properties">
      <summary>获取与工具集关联的可选属性。</summary>
      <returns>返回与工具集关联的可选属性。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Toolset.SubToolsets">
      <summary>获取与此工具集关联的子工具集。</summary>
      <returns>返回子工具集的集合。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Toolset.ToolsPath">
      <summary>获取指向此工具集的任务和目标的路径。</summary>
      <returns>返回指向此工具集的任务和目标的路径。</returns>
    </member>
    <member name="P:Microsoft.Build.Evaluation.Toolset.ToolsVersion">
      <summary>获取此工具集的名称。</summary>
      <returns>返回此工具集的名称。</returns>
    </member>
    <member name="T:Microsoft.Build.Evaluation.ToolsetDefinitionLocations">
      <summary>用于控制工具集初始化的标志。</summary>
    </member>
    <member name="F:Microsoft.Build.Evaluation.ToolsetDefinitionLocations.ConfigurationFile">
      <summary>从 exe 配置文件读取工具集信息。</summary>
    </member>
    <member name="F:Microsoft.Build.Evaluation.ToolsetDefinitionLocations.None">
      <summary>不从任何外部位置读取工具集信息。</summary>
    </member>
    <member name="F:Microsoft.Build.Evaluation.ToolsetDefinitionLocations.Registry">
      <summary>从注册表 (HKLM\Software\Microsoft\MSBuild\ToolsVersions) 读取工具集信息。</summary>
    </member>
    <member name="T:Microsoft.Build.Exceptions.BuildAbortedException">
      <summary>一个表示因请求而中止生成的情形的异常，这与因另一种错误异常而导致的随意关闭完全不同。</summary>
    </member>
    <member name="M:Microsoft.Build.Exceptions.BuildAbortedException.#ctor">
      <summary>创建 BuildAborted 异常。</summary>
    </member>
    <member name="M:Microsoft.Build.Exceptions.BuildAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用于（反）序列化的受保护的构造函数。</summary>
      <param name="info">错误信息。</param>
      <param name="context">错误上下文。</param>
    </member>
    <member name="M:Microsoft.Build.Exceptions.BuildAbortedException.#ctor(System.String)">
      <summary>创建 BuildAborted 异常。</summary>
      <param name="message">错误消息。</param>
    </member>
    <member name="M:Microsoft.Build.Exceptions.BuildAbortedException.#ctor(System.String,System.Exception)">
      <summary>使用附加的其他消息和内部异常构造 BuildAbortedException。</summary>
      <param name="message">错误消息。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="P:Microsoft.Build.Exceptions.BuildAbortedException.ErrorCode">
      <summary>获取与异常消息关联的错误代码（如果有的话）。</summary>
      <returns>以字符串的形式返回错误代码；如果不存在错误代码，则返回 null。</returns>
    </member>
    <member name="M:Microsoft.Build.Exceptions.BuildAbortedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>ISerializable 方法，由于 Exception 实现此接口，因此必须重写此方法。</summary>
      <param name="info">错误信息。</param>
      <param name="context">错误上下文。</param>
    </member>
    <member name="T:Microsoft.Build.Exceptions.InternalLoggerException">
      <summary>此异常用于包装来自记录器的未经处理的异常。 此异常将中止生成，并且只能由 MSBuild 引擎引发。</summary>
    </member>
    <member name="M:Microsoft.Build.Exceptions.InternalLoggerException.#ctor">
      <summary>默认构造函数。</summary>
      <exception cref="T:System.InvalidOperationException">运算无效。</exception>
    </member>
    <member name="M:Microsoft.Build.Exceptions.InternalLoggerException.#ctor(System.String)">
      <summary>使用指定的错误消息创建此异常的实例。</summary>
      <param name="message">错误消息。</param>
      <exception cref="T:System.InvalidOperationException">运算无效。</exception>
    </member>
    <member name="M:Microsoft.Build.Exceptions.InternalLoggerException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和内部异常创建此异常的实例。</summary>
      <param name="message">错误消息。</param>
      <param name="innerException">内部异常。</param>
      <exception cref="T:System.InvalidOperationException">运算无效。</exception>
    </member>
    <member name="P:Microsoft.Build.Exceptions.InternalLoggerException.BuildEventArgs">
      <summary>获取所记录的生成事件详细信息（如果有的话）。</summary>
      <returns>生成事件参数或 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Exceptions.InternalLoggerException.ErrorCode">
      <summary>获取与此异常的消息（而非内部异常）关联的错误代码。</summary>
      <returns>错误代码字符串。</returns>
    </member>
    <member name="M:Microsoft.Build.Exceptions.InternalLoggerException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>在 Exception 实现此接口后必须重写的 ISerializable 方法。只要向此类添加新成员，就需要更新此方法。</summary>
      <param name="info">错误信息。</param>
      <param name="context">错误上下文。</param>
    </member>
    <member name="P:Microsoft.Build.Exceptions.InternalLoggerException.HelpKeyword">
      <summary>获取宿主 IDE 的与此错误关联的 F1 帮助关键字。</summary>
      <returns>关键字字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Exceptions.InternalLoggerException.InitializationException">
      <summary>如果在记录器初始化过程中发生异常，则为 true。</summary>
    </member>
    <member name="T:Microsoft.Build.Exceptions.InvalidProjectFileException">
      <summary>当用户的 XML 项目文件出现问题时，会引发此异常。 该问题可能是语义问题也可能是语法问题。 语法问题应属于通常由 XSD 验证导致的一类问题（如果它是由项目编写器执行的）。</summary>
    </member>
    <member name="M:Microsoft.Build.Exceptions.InvalidProjectFileException.#ctor">
      <summary>默认构造函数。</summary>
    </member>
    <member name="M:Microsoft.Build.Exceptions.InvalidProjectFileException.#ctor(System.String)">
      <summary>使用指定的错误消息创建此异常的实例。</summary>
      <param name="message">错误消息。</param>
    </member>
    <member name="M:Microsoft.Build.Exceptions.InvalidProjectFileException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和内部异常创建此异常的实例。</summary>
      <param name="message">错误消息。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="M:Microsoft.Build.Exceptions.InvalidProjectFileException.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
      <summary>使用丰富的错误信息创建此异常的实例。</summary>
      <param name="projectFile">无效的项目文件（可以为空字符串）。</param>
      <param name="lineNumber">项目中的无效行号（如果不可用，则设置为零）。</param>
      <param name="columnNumber">项目中的无效列号（如果不可用，则设置为零）。</param>
      <param name="endLineNumber">项目中的无效行范围的结尾（如果不可用，则设置为零）。</param>
      <param name="endColumnNumber">项目中的无效列范围的结尾（如果不可用，则设置为零）。</param>
      <param name="message">异常的错误消息。</param>
      <param name="errorSubcategory">描述错误的错误子类别（可以为 null）。</param>
      <param name="errorCode">错误代码（可以为 null）。</param>
      <param name="helpKeyword">宿主 IDE 的 F1 帮助关键字（可以为 null）。</param>
    </member>
    <member name="P:Microsoft.Build.Exceptions.InvalidProjectFileException.BaseMessage">
      <summary>获取不包括项目文件的异常消息。</summary>
      <returns>仅错误消息字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Exceptions.InvalidProjectFileException.ColumnNumber">
      <summary>获取项目中的无效列号（如果有的话）。</summary>
      <returns>无效列号，或者零。</returns>
    </member>
    <member name="P:Microsoft.Build.Exceptions.InvalidProjectFileException.EndColumnNumber">
      <summary>获取项目中的无效列范围的最后一个列号（如果有的话）。</summary>
      <returns>最后一个无效列号，或者零。</returns>
    </member>
    <member name="P:Microsoft.Build.Exceptions.InvalidProjectFileException.EndLineNumber">
      <summary>获取项目中的无效行范围的最后一个行号（如果有的话）。</summary>
      <returns>最后一个无效行号，或者零。</returns>
    </member>
    <member name="P:Microsoft.Build.Exceptions.InvalidProjectFileException.ErrorCode">
      <summary>获取与异常消息关联的错误代码（如果有的话）。</summary>
      <returns>错误代码字符串或 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Exceptions.InvalidProjectFileException.ErrorSubcategory">
      <summary>获取描述此错误的类型的错误子类别（如果有的话）。</summary>
      <returns>子类别字符串，或者为空。</returns>
    </member>
    <member name="M:Microsoft.Build.Exceptions.InvalidProjectFileException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>在 Exception 实现此接口后必须重写的 ISerializable 方法。只要向此类添加新成员，就需要更新此方法。</summary>
      <param name="info">错误信息。</param>
      <param name="context">错误上下文。</param>
    </member>
    <member name="P:Microsoft.Build.Exceptions.InvalidProjectFileException.HasBeenLogged">
      <summary>获取一个标志，该标志确定是否已记录异常。 通过此方式，可以在最合适的位置记录异常，但又继续传播异常。</summary>
      <returns>返回一个标志，该标志确定是否已记录异常。</returns>
    </member>
    <member name="P:Microsoft.Build.Exceptions.InvalidProjectFileException.HelpKeyword">
      <summary>获取宿主 IDE 的与此错误关联的 F1 帮助关键字（如果有的话）。</summary>
      <returns>关键字字符串或 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Exceptions.InvalidProjectFileException.LineNumber">
      <summary>获取项目中的无效行号（如果有的话）。</summary>
      <returns>无效行号，或者零。</returns>
    </member>
    <member name="P:Microsoft.Build.Exceptions.InvalidProjectFileException.Message">
      <summary>获取异常消息，包括受影响的项目文件（如果有的话）。</summary>
      <returns>完整的消息字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Exceptions.InvalidProjectFileException.ProjectFile">
      <summary>获取与此异常关联的文件（如果有的话）。 这可能是导入的文件。</summary>
      <returns>项目文件名/路径字符串或 null。</returns>
    </member>
    <member name="T:Microsoft.Build.Exceptions.InvalidToolsetDefinitionException">
      <summary>ToolsetReaders 应引发的异常子类。</summary>
    </member>
    <member name="M:Microsoft.Build.Exceptions.InvalidToolsetDefinitionException.#ctor">
      <summary>基本构造函数。</summary>
    </member>
    <member name="M:Microsoft.Build.Exceptions.InvalidToolsetDefinitionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>基本构造函数。</summary>
      <param name="info">错误信息。</param>
      <param name="context">错误上下文。</param>
    </member>
    <member name="M:Microsoft.Build.Exceptions.InvalidToolsetDefinitionException.#ctor(System.String)">
      <summary>基本构造函数。</summary>
      <param name="message">错误消息。</param>
    </member>
    <member name="M:Microsoft.Build.Exceptions.InvalidToolsetDefinitionException.#ctor(System.String,System.Exception)">
      <summary>基本构造函数。</summary>
      <param name="message">错误消息。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="M:Microsoft.Build.Exceptions.InvalidToolsetDefinitionException.#ctor(System.String,System.String)">
      <summary>采用 MSBuild 错误代码的构造函数</summary>
      <param name="message">错误消息。</param>
      <param name="errorCode">错误代码。</param>
    </member>
    <member name="M:Microsoft.Build.Exceptions.InvalidToolsetDefinitionException.#ctor(System.String,System.String,System.Exception)">
      <summary>采用 MSBuild 错误代码的构造函数</summary>
      <param name="message">错误消息。</param>
      <param name="errorCode">错误代码。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="P:Microsoft.Build.Exceptions.InvalidToolsetDefinitionException.ErrorCode">
      <summary>与此异常对应的 MSBuild 错误代码；如果未指定，则为 null。</summary>
    </member>
    <member name="M:Microsoft.Build.Exceptions.InvalidToolsetDefinitionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>在 Exception 实现此接口后必须重写的 ISerializable 方法。只要向此类添加新成员，就需要更新此方法。</summary>
      <param name="info">错误信息。</param>
      <param name="context">错误上下文。</param>
    </member>
    <member name="T:Microsoft.Build.Execution.BuildManager">
      <summary>此类是用于执行生成的公共入口点。</summary>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildManager.#ctor">
      <summary>获取新的生成管理器而不指定名称。</summary>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildManager.#ctor(System.String)">
      <summary>创建新的未命名的生成经理。</summary>
      <param name="hostName">生成管理器的宿主。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildManager.BeginBuild(Microsoft.Build.Execution.BuildParameters)">
      <summary>准备 BuildManager 以接收生成请求。</summary>
      <param name="parameters">生成参数。 可能为 null。</param>
      <exception cref="T:System.InvalidOperationException">如果生成已在进行，则引发此异常。</exception>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildManager.Build(Microsoft.Build.Execution.BuildParameters,Microsoft.Build.Execution.BuildRequestData)">
      <summary>提交单独的生成请求并进行阻塞，直至获得结果。</summary>
      <returns>返回生成的结果。</returns>
      <param name="parameters">生成参数。</param>
      <param name="requestData">生成请求数据。</param>
      <exception cref="T:System.InvalidOperationException">如果生成已在进行，则引发此异常。</exception>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildManager.BuildRequest(Microsoft.Build.Execution.BuildRequestData)">
      <summary>提交一个生成请求并进行阻塞，直至获得结果。</summary>
      <returns>返回生成的结果。</returns>
      <param name="requestData">生成请求。</param>
      <exception cref="T:System.InvalidOperationException">如果尚未调用 StartBuild 或已经调用 EndBuild ，则引发此异常。</exception>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildManager.CancelAllSubmissions">
      <summary>异步取消所有未完成的提交。</summary>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildManager.DefaultBuildManager">
      <summary>获取生成管理器的单一实例。</summary>
      <returns>返回生成管理器的单一实例。</returns>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildManager.Dispose">
      <summary>释放生成管理器。</summary>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildManager.EndBuild">
      <summary>发出信号，指出不再接收（或允许）生成请求，并且 BuildManager 可能会进行清理。</summary>
      <exception cref="T:System.InvalidOperationException">如果没有生成在进行中，则引发此异常。</exception>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildManager.Finalize">
      <summary>完成生成管理器。</summary>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildManager.GetProjectInstanceForBuild(Microsoft.Build.Evaluation.Project)">
      <summary>从以前生成的项目的 BuildManager 缓存中获得匹配的 ProjectInstance。</summary>
      <returns>从以前生成的项目的 BuildManager 缓存中返回匹配的 ProjectInstance。 如果不存在匹配项，则将从指定项目创建新的项目实例。</returns>
      <param name="project">应检索其实例的项目。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildManager.PendBuildRequest(Microsoft.Build.Execution.BuildRequestData)">
      <summary>将一个生成请求提交到当前生成，但不立即启动它。 允许用户执行异步执行或在执行请求之前访问提交 ID。</summary>
      <returns>返回即将生成的提交。</returns>
      <param name="requestData">生成请求数据。</param>
      <exception cref="T:System.InvalidOperationException">如果尚未调用 StartBuild 或已经调用 EndBuild ，则引发此异常。</exception>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildManager.ResetCaches">
      <summary>清除所有生成器缓存的信息。</summary>
    </member>
    <member name="T:Microsoft.Build.Execution.BuildParameters">
      <summary>此类表示要开始生成必须指定的所有设置。</summary>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildParameters.#ctor">
      <summary>创建生成参数。</summary>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildParameters.#ctor(Microsoft.Build.Evaluation.ProjectCollection)">
      <summary>创建生成参数并从项目集合初始化这些参数。</summary>
      <param name="projectCollection">BuildParameters 应从中填充自己的 ProjectCollection。</param>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildParameters.BuildProcessEnvironment">
      <summary>获取此生成创建时设置的环境变量。</summary>
      <returns>创建构建时返回环境变量设置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildParameters.BuildThreadPriority">
      <summary>获取或设置生成所需的线程优先级别。</summary>
      <returns>返回生成的线程优先级别。</returns>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildParameters.Clone">
      <summary>创建此生成参数对象的克隆。</summary>
      <returns>返回此生成参数对象的克隆。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildParameters.Culture">
      <summary>获取或设置要在生成过程中使用的区域性的名称。</summary>
      <returns>返回区域性。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildParameters.DefaultToolsVersion">
      <summary>获取或设置生成的默认工具版本。</summary>
      <returns>返回工具版本。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildParameters.DetailedSummary">
      <summary>获取或设置一个开关，该开关指定生成是否应在日志的结尾发出详细的摘要。</summary>
      <returns>返回一个开关的值，该值指定生成是否应在日志的结尾发出详细的摘要。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildParameters.DisableInProcNode">
      <summary>获取或设置确定是否使用处理中的节点的标志。</summary>
      <returns>返回标志。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildParameters.EnableNodeReuse">
      <summary>获取或设置一个标志，该标志确定进程外节点是否应在生成之后保持并等待后续生成。</summary>
      <returns>返回标志。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildParameters.EnvironmentProperties">
      <summary>获取不可变的环境属性集合。</summary>
      <returns>返回不可变的环境属性集合。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildParameters.ForwardingLoggers">
      <summary>获取或设置转发记录器说明的集合。</summary>
      <returns>返回转发记录器说明的集合。</returns>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildParameters.GetToolset(System.String)">
      <summary>获取给定的工具集。</summary>
      <returns>返回该工具集。</returns>
      <param name="toolsVersion">要检索的工具集。</param>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildParameters.GlobalProperties">
      <summary>获取或设置不可变的全局属性集合。</summary>
      <returns>返回不可变的全局属性集合。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildParameters.HostServices">
      <summary>获取或设置一个服务，该服务使宿主能对生成进程提供附加控制。</summary>
      <returns>返回该宿主服务。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildParameters.LegacyThreadingSemantics">
      <summary>获取或设置一个开关，该开关启用或禁用旧式线程处理语义。</summary>
      <returns>返回一个开关，该开关启用或禁用旧式线程处理语义。如果启用，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildParameters.Loggers">
      <summary>获取或设置要在生成过程中使用的记录器的集合。</summary>
      <returns>返回要在生成过程中使用的记录器的集合。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildParameters.LogInitialPropertiesAndItems">
      <summary>获取或设置确定生成是否记录输入参数的标志。</summary>
      <returns>返回标志。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildParameters.LogTaskInputs">
      <summary>获取或设置确定生成是否记录任务参数的标志。</summary>
      <returns>返回标志。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildParameters.MaxNodeCount">
      <summary>获取或设置此生成可以使用的最大节点数。</summary>
      <returns>返回此生成可以使用的最大节点数。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildParameters.MemoryUseLimit">
      <summary>获取或设置生成应限制自身使用的内存量（单位为 MB）。</summary>
      <returns>返回生成应限制自身使用的内存量（单位为 MB）。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildParameters.NodeExeLocation">
      <summary>获取或设置生成节点可执行文件的位置。</summary>
      <returns>返回生成节点可执行文件的位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildParameters.OnlyLogCriticalEvents">
      <summary>获取或设置一个标志，该标志确定是否应丢弃非关键的日志记录事件。</summary>
      <returns>返回一个标志，该标志确定是否应丢弃非关键的日志记录事件。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildParameters.ResetCaches">
      <summary>获取或设置一个开关，该开关指定生成是否应重置配置和结果缓存。</summary>
      <returns>返回一个开关，该开关指定生成是否应重置配置和结果缓存。如果应重置缓存，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildParameters.SaveOperatingEnvironment">
      <summary>获取或设置一个开关，该开关指定是否应在各个项目生成和任务调用之间保存并还原操作环境，例如当前的目录和环境。</summary>
      <returns>返回一个开关，该开关指定是否应在各个项目生成和任务调用之间保存并还原操作环境。如果应保存环境，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildParameters.ShutdownInProcNodeOnBuildFinish">
      <summary>获取或设置生成完成时，确定是否关闭处理中的节点的标志。 默认值为 false。</summary>
      <returns>返回标志。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildParameters.ToolsetDefinitionLocations">
      <summary>获取或设置要搜索工具集的位置。</summary>
      <returns>返回要搜索工具集的位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildParameters.Toolsets">
      <summary>获取所有工具集。</summary>
      <returns>返回所有工具集。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildParameters.UICulture">
      <summary>获取或设置要在生成过程中使用的 UI 区域性的名称。</summary>
      <returns>返回要在生成过程中使用的 UI 区域性的名称。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildParameters.UseSynchronousLogging">
      <summary>获取或设置一个开关，该开关指定在只有单个进程时是否使用同步日志记录。</summary>
      <returns>返回一个开关，该开关指定在只有单个进程时是否使用同步日志记录。如果使用同步日志记录，则为 true；否则为 false。</returns>
    </member>
    <member name="T:Microsoft.Build.Execution.BuildRequestData">
      <summary>封装提交生成请求所需的所有数据。</summary>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildRequestData.#ctor(Microsoft.Build.Execution.ProjectInstance,System.String[])">
      <summary>基于项目实例为生成请求构造生成请求数据。</summary>
      <param name="projectInstance">要生成的实例。</param>
      <param name="targetsToBuild">要生成的目标。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildRequestData.#ctor(Microsoft.Build.Execution.ProjectInstance,System.String[],Microsoft.Build.Execution.HostServices)">
      <summary>基于项目实例为生成请求构造生成请求数据。</summary>
      <param name="projectInstance">要生成的实例。</param>
      <param name="targetsToBuild">要生成的目标。</param>
      <param name="hostServices">要使用的宿主服务（如果有的话）。可能为 null。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildRequestData.#ctor(Microsoft.Build.Execution.ProjectInstance,System.String[],Microsoft.Build.Execution.HostServices,Microsoft.Build.Execution.BuildRequestDataFlags)">
      <summary>基于项目实例为生成请求构造 BuildRequestData。</summary>
      <param name="projectInstance">要生成的实例。</param>
      <param name="targetsToBuild">要生成的目标。</param>
      <param name="hostServices">要使用的宿主服务（如果有的话）。可能为 null。</param>
      <param name="flags">要用于生成的标志。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildRequestData.#ctor(Microsoft.Build.Execution.ProjectInstance,System.String[],Microsoft.Build.Execution.HostServices,Microsoft.Build.Execution.BuildRequestDataFlags,System.Collections.Generic.IEnumerable{System.String})">
      <summary>基于项目实例为生成请求构造 BuildRequestData。</summary>
      <param name="projectInstance">要生成的实例。</param>
      <param name="targetsToBuild">要生成的目标。</param>
      <param name="hostServices">要使用的宿主服务（如果有的话）。可能为 null。</param>
      <param name="flags">要用于生成的标志。</param>
      <param name="propertiesToTransfer">从项目到任何外部进程节点转移的属性列表。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildRequestData.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String[],Microsoft.Build.Execution.HostServices)">
      <summary>构造含有给定项目路径请求的 BuildRequestData。</summary>
      <param name="projectFullPath">项目文件的完整路径。</param>
      <param name="globalProperties">在计算项目的过程中要使用的全局属性。</param>
      <param name="toolsVersion">要用于生成的工具版本。可能为 null。</param>
      <param name="targetsToBuild">要生成的目标。</param>
      <param name="hostServices">要使用的宿主服务（如果有的话）。可能为 null。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildRequestData.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String[],Microsoft.Build.Execution.HostServices,Microsoft.Build.Execution.BuildRequestDataFlags)">
      <summary>构造含有给定项目路径请求的 BuildRequestData。</summary>
      <param name="projectFullPath">项目文件的完整路径。</param>
      <param name="globalProperties">在计算项目的过程中要使用的全局属性。</param>
      <param name="toolsVersion">要用于生成的工具版本。可能为 null。</param>
      <param name="targetsToBuild">要生成的目标。</param>
      <param name="hostServices">要使用的宿主服务（如果有的话）。可能为 null。</param>
      <param name="flags">要用于生成的标志。</param>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildRequestData.ExplicitlySpecifiedToolsVersion">
      <summary>获取或设置要用于生成的工具版本。</summary>
      <returns>返回要用于生成的工具版本。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildRequestData.Flags">
      <summary>获取或设置此生成请求的附加标志。</summary>
      <returns>返回生成请求标志。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildRequestData.GlobalProperties">
      <summary>获取用于此生成请求的全局属性。</summary>
      <returns>返回用于此生成请求的全局属性。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildRequestData.HostServices">
      <summary>获取此生成的宿主服务。</summary>
      <returns>返回此生成的宿主服务。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildRequestData.ProjectFullPath">
      <summary>获取或设置此生成的项目文件的路径。</summary>
      <returns>返回此生成的项目文件的路径。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildRequestData.ProjectInstance">
      <summary>获取或设置此生成的项目实例。</summary>
      <returns>项目实例，可能为 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildRequestData.PropertiesToTransfer">
      <summary>获取需转移至用于生成的进程外节点的属性的列表。</summary>
      <returns>返回该属性列表。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildRequestData.TargetNames">
      <summary>获取要生成的目标的名称。</summary>
      <returns>返回要生成的目标的名称。</returns>
    </member>
    <member name="T:Microsoft.Build.Execution.BuildRequestDataFlags">
      <summary>用于提供对生成请求的附加控制的标志。</summary>
    </member>
    <member name="F:Microsoft.Build.Execution.BuildRequestDataFlags.IgnoreExistingProjectState">
      <summary>在此标志存在时，该项在关联与关联不兼容的节点前生成此请求要求，此生成请求忽略以前生成的项目状态（但不是目标结果）。</summary>
    </member>
    <member name="F:Microsoft.Build.Execution.BuildRequestDataFlags.None">
      <summary>无标志。</summary>
    </member>
    <member name="F:Microsoft.Build.Execution.BuildRequestDataFlags.ProvideProjectStateAfterBuild">
      <summary>当此标志显示时，为响应此请求发布的 <see cref="T:Microsoft.Build.Execution.BuildResult" /> 将包括 <see cref="P:Microsoft.Build.Execution.BuildResult.ProjectStateAfterBuild" />。</summary>
    </member>
    <member name="F:Microsoft.Build.Execution.BuildRequestDataFlags.ReplaceExistingProjectInstance">
      <summary>当存在此标志时，此标志将替换生成中的现有 ProjectInstance。</summary>
    </member>
    <member name="T:Microsoft.Build.Execution.BuildResult">
      <summary>表示已针对某个特定配置产生结果的所有目标的当前结果集。</summary>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildResult.#ctor">
      <summary>创建生成结果集。</summary>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildResult.AddResultsForTarget(System.String,Microsoft.Build.Execution.TargetResult)">
      <summary>将指定目标的结果添加到此生成结果集。</summary>
      <param name="target">要添加其结果的目标。</param>
      <param name="result">目标的结果。</param>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildResult.CircularDependency">
      <summary>获取一个标志，该标志指示是否检测到循环依赖项。</summary>
      <returns>如果检测到循环依赖项，则返回 true；否则返回 false。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildResult.ConfigurationId">
      <summary>获取此生成结果集的配置 ID。</summary>
      <returns>返回此生成结果集的配置 ID。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildResult.Exception">
      <summary>获取为此生成结果集产生的异常。</summary>
      <returns>返回为此生成结果集产生的异常。 如果未发生异常，则返回 false。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildResult.GlobalRequestId">
      <summary>获取此生成结果集的生成请求 ID。</summary>
      <returns>返回此生成结果集的生成请求 ID。</returns>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildResult.HasResultsForTarget(System.String)">
      <summary>确定给定的目标是否有任何结果。</summary>
      <returns>如果存在结果，则返回 true；否则返回 false。</returns>
      <param name="target">要检索其结果的目标。</param>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildResult.Item(System.String)">
      <summary>获取一个索引器，该索引器可用于获取给定目标的生成结果。</summary>
      <returns>索引目标的生成结果。</returns>
      <param name="target">索引目标。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildResult.MergeResults(Microsoft.Build.Execution.BuildResult)">
      <summary>将给定的结果与此生成结果集合并。</summary>
      <param name="results">要合并的结果。</param>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildResult.NodeRequestId">
      <summary>获取原始节点的生成请求 ID。</summary>
      <returns>返回原始节点的生成请求 ID。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildResult.OverallResult">
      <summary>获取此生成的全部结果。</summary>
      <returns>返回此生成的全部结果。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildResult.ParentGlobalRequestId">
      <summary>获取发出导致此生成结果集的请求的全局生成请求 ID。</summary>
      <returns>返回发出导致此生成结果集的请求的全局生成请求 ID。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildResult.ProjectStateAfterBuild">
      <summary>获取或设置生成后的 <see cref="T:Microsoft.Build.Execution.ProjectInstance" /> 状态。</summary>
      <returns>返回 ProjectInstance 对象。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildResult.ResultsByTarget">
      <summary>获取此生成结果集中的所有目标结果的枚举器。</summary>
      <returns>返回此生成结果集中的所有目标结果的枚举器。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildResult.SubmissionId">
      <summary>获取与此生成结果集关联的生成提交。</summary>
      <returns>返回与此生成结果集关联的生成提交。</returns>
    </member>
    <member name="T:Microsoft.Build.Execution.BuildResultCode">
      <summary>用于指示一个目标或生成请求的生成结果的枚举数据。</summary>
    </member>
    <member name="F:Microsoft.Build.Execution.BuildResultCode.Failure">
      <summary>出现某种失败的目标或请求。</summary>
    </member>
    <member name="F:Microsoft.Build.Execution.BuildResultCode.Success">
      <summary>目标或请求已完全成功。</summary>
    </member>
    <member name="T:Microsoft.Build.Execution.BuildSubmission">
      <summary>表示已提交给生成管理器进行处理的生成请求。 可以使用此类的方法执行同步或异步生成请求，并在请求完成后访问结果。</summary>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildSubmission.AsyncContext">
      <summary>获取或设置提供给 <see cref="M:Microsoft.Build.Execution.BuildSubmission.ExecuteAsync(Microsoft.Build.Execution.BuildSubmissionCompleteCallback,System.Object)" /> 的异步上下文（如果有的话）。</summary>
      <returns>返回提供给 <see cref="M:Microsoft.Build.Execution.BuildSubmission.ExecuteAsync(Microsoft.Build.Execution.BuildSubmissionCompleteCallback,System.Object)" /> 的异步上下文（如果有的话）。 如果没有提供上下文，则返回 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildSubmission.BuildManager">
      <summary>获取或设置与此生成提交关联的生成管理器。</summary>
      <returns>返回与此生成提交关联的生成管理器。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildSubmission.BuildResult">
      <summary>获取或设置生成的结果。</summary>
      <returns>返回生成的结果。</returns>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildSubmission.Execute">
      <summary>同步开始一个生成请求并进行等待，直至出现可用的结果。</summary>
      <returns>返回生成请求。</returns>
      <exception cref="T:System.InvalidOperationException">请求已被启动，或已完成。</exception>
    </member>
    <member name="M:Microsoft.Build.Execution.BuildSubmission.ExecuteAsync(Microsoft.Build.Execution.BuildSubmissionCompleteCallback,System.Object)">
      <summary>在给定的上下文中异步开始一个生成请求。 立即将控制返回给调用方。</summary>
      <param name="callback">在完成生成提交时要调用的回调方法。</param>
      <param name="context">执行生成提交的上下文。</param>
      <exception cref="T:System.InvalidOperationException">请求已被启动，或已完成。</exception>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildSubmission.IsCompleted">
      <summary>确定此生成提交是否已完成。</summary>
      <returns>如果此生成提交已完成，则返回 true；否则返回 false。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildSubmission.SubmissionId">
      <summary>获取或设置唯一地标识此生成提交的 ID。</summary>
      <returns>返回唯一地标识此生成提交的 ID。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.BuildSubmission.WaitHandle">
      <summary>获取一个 <see cref="T:System.Threading.WaitHandle" /> 对象，当生成完成时，将向此对象发出信号。</summary>
      <returns>返回 null，直至 <see cref="M:Microsoft.Build.Execution.BuildSubmission.Execute" /> 或 <see cref="M:Microsoft.Build.Execution.BuildSubmission.ExecuteAsync(Microsoft.Build.Execution.BuildSubmissionCompleteCallback,System.Object)" /> 返回，然后返回 WaitHandle 对象。</returns>
    </member>
    <member name="T:Microsoft.Build.Execution.BuildSubmissionCompleteCallback">
      <summary>用于在生成完成时接收通知的回调函数。</summary>
      <param name="submission">用于启动生成的提交。</param>
    </member>
    <member name="T:Microsoft.Build.Execution.HostServices">
      <summary>可对从生成到宿主的访问进行调停的宿主服务的实现。</summary>
    </member>
    <member name="M:Microsoft.Build.Execution.HostServices.#ctor">
      <summary>创建一个宿主服务。</summary>
    </member>
    <member name="M:Microsoft.Build.Execution.HostServices.GetHostObject(System.String,System.String,System.String)">
      <summary>获取给定任务的宿主服务，该任务出现在宿主服务中的具有给定名称的目标和项目内。</summary>
      <returns>返回给定任务的宿主服务，该任务出现在宿主服务中的具有给定名称的目标和项目内。 如果不存在宿主服务，则返回 null。</returns>
      <param name="projectFile">项目文件的名称。</param>
      <param name="targetName">目标的名称。</param>
      <param name="taskName">与宿主服务关联的任务名称。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.HostServices.GetNodeAffinity(System.String)">
      <summary>获取给定项目文件的节点关联。</summary>
      <returns>返回给定项目文件的节点关联。</returns>
      <param name="projectFile">与节点关联的项目文件。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.HostServices.OnRenameProject(System.String,System.String)">
      <summary>在命名或重命名一个项目时更新宿主服务表。</summary>
      <param name="oldFullPath">项目文件的当前路径。</param>
      <param name="newFullPath">项目文件的新路径。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.HostServices.RegisterHostObject(System.String,System.String,System.String,Microsoft.Build.Framework.ITaskHost)">
      <summary>为给定的任务/目标对注册一个宿主服务。</summary>
      <param name="projectFile">包含任务/目标对的项目文件。</param>
      <param name="targetName">目标的名称。</param>
      <param name="taskName">任务的名称。</param>
      <param name="hostObject">宿主服务。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.HostServices.SetNodeAffinity(System.String,Microsoft.Build.Execution.NodeAffinity)">
      <summary>设置给定项目文件的节点关联。</summary>
      <param name="projectFile">项目文件。 如果设置为 String.Empty，则所有项目都将使用给定的节点关联。 如果设置为 null，则将清除所有节点关联。</param>
      <param name="nodeAffinity">节点关联。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.HostServices.UnregisterProject(System.String)">
      <summary>注销项目的宿主对象（如果有的话），并移除与其相关的任何节点关联。</summary>
      <param name="projectFullPath">要注销的项目的路径。</param>
    </member>
    <member name="T:Microsoft.Build.Execution.ITargetResult">
      <summary>表示特定目标的结果的接口。</summary>
    </member>
    <member name="P:Microsoft.Build.Execution.ITargetResult.Exception">
      <summary>获取生成目标时产生的异常。</summary>
      <returns>返回生成目标时产生的异常。 如果未发生异常，则返回 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ITargetResult.Items">
      <summary>获取目标输出的生成项集。</summary>
      <returns>返回目标输出的生成项集。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ITargetResult.ResultCode">
      <summary>获取生成目标时返回的结果代码。</summary>
      <returns>返回生成目标时返回的结果代码。</returns>
    </member>
    <member name="T:Microsoft.Build.Execution.NodeAffinity">
      <summary>用于确定生成项目的位置的枚举数据类型。</summary>
    </member>
    <member name="F:Microsoft.Build.Execution.NodeAffinity.Any">
      <summary>可以在任何位置计划项目。</summary>
    </member>
    <member name="F:Microsoft.Build.Execution.NodeAffinity.InProc">
      <summary>只可以在进程内节点上计划项目。 如果存在宿主对象或指定了 ProjectInstance，则会自动执行此操作。 如果已知某个任务显式依赖共享的静态数据或其他宿主提供的对象，则宿主可能会希望指定此项。</summary>
    </member>
    <member name="F:Microsoft.Build.Execution.NodeAffinity.OutOfProc">
      <summary>只可以在进程外节点上计划项目。 如果已知要生成的项目会损害宿主环境（或者宿主在进行生成的过程中损害环境），则宿主可能会希望指定此项。</summary>
    </member>
    <member name="T:Microsoft.Build.Execution.NodeEngineShutdownReason">
      <summary>关闭某个节点的原因。</summary>
    </member>
    <member name="F:Microsoft.Build.Execution.NodeEngineShutdownReason.BuildComplete">
      <summary>BuildManager 发送了一个命令，指示终止该节点。</summary>
    </member>
    <member name="F:Microsoft.Build.Execution.NodeEngineShutdownReason.BuildCompleteReuse">
      <summary>BuildManager 发送了一个命令，指示终止并重新启动该节点以便重用。</summary>
    </member>
    <member name="F:Microsoft.Build.Execution.NodeEngineShutdownReason.ConnectionFailed">
      <summary>通信链接失败。</summary>
    </member>
    <member name="F:Microsoft.Build.Execution.NodeEngineShutdownReason.Error">
      <summary>NodeEngine 捕获了一个异常，该异常要求关闭该节点。</summary>
    </member>
    <member name="T:Microsoft.Build.Execution.OutOfProcNode">
      <summary>此类表示一个进程外生成节点的实现。此类已被弃用，而且没有替代项。</summary>
    </member>
    <member name="M:Microsoft.Build.Execution.OutOfProcNode.#ctor">
      <summary>构造函数。</summary>
    </member>
    <member name="M:Microsoft.Build.Execution.OutOfProcNode.Run(System.Exception@)">
      <summary>启动该节点和进程消息，直至该节点被请求关闭。</summary>
      <returns>关闭的原因。</returns>
      <param name="shutdownException">导致关闭的异常（如果有的话）。</param>
    </member>
    <member name="T:Microsoft.Build.Execution.ProjectInstance">
      <summary>表示一个项目实例。</summary>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.#ctor(Microsoft.Build.Construction.ProjectRootElement)">
      <summary>使用默认的项目集合，从给定的项目根创建一个新项目实例，并对其进行初始化。</summary>
      <param name="xml">项目根元素。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)">
      <summary>使用给定的全局属性、工具版本和项目集合，从给定的项目根创建一个新项目实例，并对其进行初始化。</summary>
      <param name="xml">项目根元素</param>
      <param name="globalProperties">要使用的全局属性。 可能为 null。</param>
      <param name="toolsVersion">工具版本。 可能为 null。</param>
      <param name="projectCollection">项目集合</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection)">
      <summary>使用给定的全局属性、工具版本和项目集合，从给定的项目根创建一个新项目实例，并对其进行初始化</summary>
      <param name="xml">项目根元素。</param>
      <param name="globalProperties">要使用的全局属性。 可能为 null。</param>
      <param name="toolsVersion">工具版本。 可能为 null。</param>
      <param name="subToolsetVersion">子工具集版本。 可能为 null。</param>
      <param name="projectCollection">项目集合。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.#ctor(System.String)">
      <summary>使用默认的项目集合，从给定的项目文件创建一个新项目实例，并对其进行初始化。</summary>
      <param name="projectFile">项目文件的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
      <summary>使用给定的全局属性、工具版本和默认项目集合，从给定的项目文件创建一个新项目实例，并对其进行初始化。</summary>
      <param name="projectFile">项目文件的名称。</param>
      <param name="globalProperties">要使用的全局属性。</param>
      <param name="toolsVersion">工具版本。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)">
      <summary>使用给定的全局属性、工具版本和项目集合，从给定的项目文件创建一个新项目实例，并对其进行初始化。</summary>
      <param name="projectFile">项目文件的名称。</param>
      <param name="globalProperties">要使用的全局属性。 可能为 null。</param>
      <param name="toolsVersion">工具版本。 可能为 null。</param>
      <param name="projectCollection">项目集合</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection)">
      <summary>使用给定的全局属性、工具版本、子工具集版本和项目集合，从给定的项目文件创建一个新项目实例，并对其进行初始化。</summary>
      <param name="projectFile">项目文件的名称。</param>
      <param name="globalProperties">要使用的全局属性。 可能为 null。</param>
      <param name="toolsVersion">工具版本。 可能为 null。</param>
      <param name="subToolsetVersion">子工具集版本。 可能为 null。</param>
      <param name="projectCollection">项目集合。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.AddItem(System.String,System.String)">
      <summary>向项目中添加不包含元数据的项。</summary>
      <returns>返回新项。</returns>
      <param name="itemType">要添加的项的项类型。</param>
      <param name="evaluatedInclude">该项的计算的 Include 特性。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.AddItem(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
      <summary>向项目中添加包含给定元数据的项。</summary>
      <returns>返回新项。</returns>
      <param name="itemType">要添加的项的项类型。</param>
      <param name="evaluatedInclude">该项的计算的 Include 特性。</param>
      <param name="metadata">该项的元数据。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.Build">
      <summary>使用项目集合的记录器生成项目的默认目标。</summary>
      <returns>如果生成成功，则返回 true；否则返回 false。</returns>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})">
      <summary>使用给定的记录器生成项目的默认目标。</summary>
      <returns>如果生成成功，则返回 true；否则返回 false。</returns>
      <param name="loggers">要用于生成的记录器。 可能为 null。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})">
      <summary>使用给定的记录器和远程记录器生成项目的默认目标。</summary>
      <returns>如果生成成功，则返回 true；否则返回 false。</returns>
      <param name="loggers">要用于生成的记录器。 可能为 null。</param>
      <param name="remoteLoggers">要用于生成的远程记录器。 可能为 null。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})">
      <summary>使用给定的记录器生成项目的给定目标。</summary>
      <returns>如果生成成功，则返回 true；否则返回 false。</returns>
      <param name="target">要生成的目标。 可能为 null。</param>
      <param name="loggers">要用于生成的记录器。 可能为 null。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})">
      <summary>使用给定的记录器和远程记录器生成项目的给定目标。</summary>
      <returns>如果生成成功，则返回 true；否则返回 false。</returns>
      <param name="target">要生成的目标。 可能为 null。</param>
      <param name="loggers">要用于生成的记录器。 可能为 null。</param>
      <param name="remoteLoggers">要用于生成的远程记录器。 可能为 null。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})">
      <summary>使用给定的记录器生成项目的给定目标。</summary>
      <returns>如果生成成功，则返回 true；否则返回 false。</returns>
      <param name="targets">要生成的目标。 可能为 null。</param>
      <param name="loggers">要用于生成的记录器。 可能为 null。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Execution.TargetResult}@)">
      <summary>使用指定的记录器生成一个目标列表。 目标和 记录器均可能为 null。</summary>
      <returns>如果成功，则返回 true；如果失败，则返回 false。</returns>
      <param name="targets">要生成的目标的列表。 可能为 null。</param>
      <param name="loggers">要用于生成目标的记录器的枚举列表。</param>
      <param name="targetOutputs">目标生成的输出。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})">
      <summary>使用给定的记录器和远程记录器生成项目的给定目标。</summary>
      <returns>如果生成成功，则返回 true；否则返回 false。</returns>
      <param name="targets">要生成的目标。 可能为 null。</param>
      <param name="loggers">要用于生成的记录器。 可能为 null。</param>
      <param name="remoteLoggers">要用于生成的远程记录器。 可能为 null。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord},System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Execution.TargetResult}@)">
      <summary>使用给定的目标输出以及给定的记录器和远程记录器生成给定目标。</summary>
      <returns>如果生成成功，则返回 true；否则返回 false。</returns>
      <param name="targets">要生成的目标。 可能为 null。</param>
      <param name="loggers">要用于生成的记录器。 可能为 null。</param>
      <param name="remoteLoggers">要用于生成的远程记录器。 可能为 null。</param>
      <param name="targetOutputs">目标输出。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.DeepCopy">
      <summary>创建此项目的独立的深层克隆以及其中的所有内容。 复本与原始的可变性相同。 这对于编译单个文件或在各生成之间保留生成结果很有用。</summary>
      <returns>创建此项目的独立的深层克隆。</returns>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.DeepCopy(System.Boolean)">
      <summary>创建此项目的独立的深层克隆以及其中的所有内容，带有指定可变性。 这对于编译单个文件或在各生成之间保留生成结果很有用。</summary>
      <returns>返回此项目的独立的深层克隆，带有指定可变性。</returns>
      <param name="isImmutable">标志指示克隆可变性。</param>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectInstance.DefaultTargets">
      <summary>获取或设置此项目的默认目标的列表。</summary>
      <returns>返回此项目的默认目标的列表。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectInstance.Directory">
      <summary>获取项目根目录。 用于计算相对路径以及在生成期间设置当前目录。 决不会为 null：如果未从磁盘加载项目，则使用开始生成时的当前目录。</summary>
      <returns>返回项目根目录，返回值决不会为 null。 如果未从磁盘加载项目，则返回开始生成时的当前目录。</returns>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.EvaluateCondition(System.String)">
      <summary>通过以下方法将提供的字符串作为条件进行计算：扩展项和属性，使用可用的当前项和属性，然后执行逻辑计算。</summary>
      <returns>如果字符串的计算结果为 true，则返回 true；否则返回 false。</returns>
      <param name="condition">要扩展的字符串。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.ExpandString(System.String)">
      <summary>通过以下方法计算提供的字符串：扩展项和属性，使用可用的当前项和属性。</summary>
      <returns>返回扩展的字符串值。</returns>
      <param name="unexpandedValue">要扩展的字符串。</param>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectInstance.FullPath">
      <summary>获取项目文件的完整路径。 用于日志记录。</summary>
      <returns>返回项目文件的完整路径。 如果项目从未命名，则返回 null。</returns>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Execution.ProjectItemDefinitionInstance)">
      <summary>获取所提供的项定义的 Include 特性的值，该值是计算得到的且经过了转义。</summary>
      <returns>返回所提供的项定义的 Include 特性的值，该值是计算得到的且经过了转义。</returns>
      <param name="item">要计算和转义的项定义。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Execution.ProjectItemInstance)">
      <summary>获取所提供的项的 Include 特性的值，该值是计算得到的且经过了转义。</summary>
      <returns>返回所提供的项的 Include 特性的值，该值是计算得到的且经过了转义。</returns>
      <param name="item">要计算和转义的项。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.GetItems(System.String)">
      <summary>获取此项目中的指定类型的所有项。 这是一个只读列表。</summary>
      <returns>返回此项目中的指定类型的所有项。 如果不存在任何指定类型的项，则返回一个空列表。</returns>
      <param name="itemType">要检索的项的项类型。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.GetItemsByItemTypeAndEvaluatedInclude(System.String,System.String)">
      <summary>获取指定类型的此项目的所有项并评估包含值。 这是一个只读列表。</summary>
      <returns>返回指定类型的此项目的所有项并评估包含值。 如果不存在任何指定类型的项，则返回一个空集合。</returns>
      <param name="itemType">要检索的项的项类型。</param>
      <param name="evaluatedInclude">包含要检索的项的值的估计。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.GetMetadataValueEscaped(Microsoft.Build.Execution.ProjectItemDefinitionInstance,System.String)">
      <summary>获取所提供的项定义中具有提供的名称的元数据的转义值。</summary>
      <returns>返回所提供的项定义中具有提供的名称的元数据的转义值。</returns>
      <param name="item">要提供元数据值的项定义。</param>
      <param name="name">元数据的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.GetMetadataValueEscaped(Microsoft.Build.Execution.ProjectItemInstance,System.String)">
      <summary>获取所提供的项中具有提供的名称的元数据的转义值。</summary>
      <returns>返回所提供的项中具有提供的名称的元数据的转义值。</returns>
      <param name="item">要提供元数据值的项。</param>
      <param name="name">元数据的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.GetMetadataValueEscaped(Microsoft.Build.Execution.ProjectMetadataInstance)">
      <summary>获取所提供的元数据的转义值。</summary>
      <returns>返回所提供的元数据的转义值。</returns>
      <param name="metadatum">要转义的元数据。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.GetProperty(System.String)">
      <summary>获取具有给定名称的属性。</summary>
      <returns>返回具有给定名称的属性。 如果不存在具有该名称的属性，则返回 null。</returns>
      <param name="name">要检索的属性的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.GetPropertyValue(System.String)">
      <summary>获取具有给定名称的属性的值。</summary>
      <returns>返回具有给定名称的属性的值。 如果不存在具有该名称的属性，则返回空字符串。 返回的值没有转义的字符序列。</returns>
      <param name="name">要检索其值的属性的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.GetPropertyValueEscaped(Microsoft.Build.Execution.ProjectPropertyInstance)">
      <summary>获取所提供的属性的转义值。</summary>
      <returns>返回所提供的属性的转义值。</returns>
      <param name="property">要转义的属性。</param>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectInstance.GlobalProperties">
      <summary>获取计算此项目所使用的全局属性的字典（如果有的话）。</summary>
      <returns>返回计算此项目所使用的全局属性的字典。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectInstance.InitialTargets">
      <summary>获取项目的初始目标及其所有导入（深度优先）的列表。 这些目标将在任何其他目标之前生成。</summary>
      <returns>返回项目的初始目标及其所有导入（深度优先）的列表。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectInstance.IsImmutable">
      <summary>获取指示项目实例是不可变的标志。 当创建实例时，此标志永久设置。</summary>
      <returns>返回标志。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectInstance.ItemDefinitions">
      <summary>获取项目中的项定义的只读字典（按项类型组织条目）。</summary>
      <returns>返回项目中的项定义的只读字典（按项类型组织条目）。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectInstance.Items">
      <summary>获取此项目中的所有项。</summary>
      <returns>返回此项目中的所有项。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectInstance.ItemTypes">
      <summary>获取此项目中的所有项类型。</summary>
      <returns>返回此项目中的所有项类型。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectInstance.ProjectFileLocation">
      <summary>获取发起文件本身的位置。 决不会为 null。</summary>
      <returns>返回发起文件的位置。 从不返回 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectInstance.Properties">
      <summary>获取此项目中的所有属性。</summary>
      <returns>返回此项目中的所有属性。</returns>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.RemoveItem(Microsoft.Build.Execution.ProjectItemInstance)">
      <summary>从项目中移除一个项（如果有的话）。 如果存在该项，则返回 true；否则返回 false。</summary>
      <returns>如果在移除之前存在该项，则返回 true；否则返回 false。</returns>
      <param name="item">要移除的项。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.RemoveProperty(System.String)">
      <summary>移除具有给定名称的属性。 如果该属性具有值（可能为空字符串），则返回 true；否则返回 false。</summary>
      <returns>如果该属性在移除之前具有值（可能为空字符串），则返回 true；否则返回 false。</returns>
      <param name="name">要移除的属性的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.SetProperty(System.String,System.String)">
      <summary>在项目中添加一个具有指定名称和值的属性。 覆盖属性集合中已有的任何同名属性。</summary>
      <returns>返回新属性。</returns>
      <param name="name">要添加的属性的名称。</param>
      <param name="evaluatedValue">要添加的属性的计算值。</param>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectInstance.Targets">
      <summary>获取此项目中的所有目标的枚举器。 此集合是只读的。</summary>
      <returns>返回此项目中的所有目标的枚举器。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectInstance.ToolsVersion">
      <summary>获取计算此项目所使用的工具版本（如果有的话）。</summary>
      <returns>返回计算此项目所使用的工具版本（如果有的话）。</returns>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.ToProjectRootElement">
      <summary>根据此 ProjectInstance 的内容创建一个 ProjectRootElement。</summary>
      <returns>返回表示此实例的 ProjectRootElement。</returns>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectInstance.UpdateStateFrom(Microsoft.Build.Execution.ProjectInstance)">
      <summary>替换项目状态 <see cref="P:Microsoft.Build.Execution.ProjectInstance.GlobalProperties" />、 <see cref="P:Microsoft.Build.Execution.ProjectInstance.Properties" /> 和 <see cref="P:Microsoft.Build.Execution.ProjectInstance.Items" />，使用那些指定的 <see cref="T:Microsoft.Build.Execution.ProjectInstance" />。</summary>
      <param name="projectState">要从其进行更新的 ProjectInstance。</param>
    </member>
    <member name="T:Microsoft.Build.Execution.ProjectInstanceSettings">
      <summary>包含控制项目实例创建的设置。</summary>
    </member>
    <member name="F:Microsoft.Build.Execution.ProjectInstanceSettings.Immutable">
      <summary>创建项目的不可变实例。</summary>
    </member>
    <member name="F:Microsoft.Build.Execution.ProjectInstanceSettings.ImmutableWithFastItemLookup">
      <summary>创建项目的不可变实例，具有查找提高性能的表。</summary>
    </member>
    <member name="F:Microsoft.Build.Execution.ProjectInstanceSettings.None">
      <summary>创建不带任何选项的项目实例。</summary>
    </member>
    <member name="T:Microsoft.Build.Execution.ProjectItemDefinitionInstance">
      <summary>表示一个特定项类型的计算的项定义（剥离了对项目源代码的所有引用）。</summary>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectItemDefinitionInstance.GetMetadata(System.String)">
      <summary>获取此项定义中任何具有给定名称的元数据。</summary>
      <returns>返回此项定义中任何具有给定名称的元数据。 如果不存在具有此名称的元数据，则返回 null。</returns>
      <param name="name">要检索的元数据的名称。</param>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemDefinitionInstance.ItemType">
      <summary>获取此项定义的项类型。</summary>
      <returns>返回此项定义的项类型。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemDefinitionInstance.Metadata">
      <summary>获取此项定义的所有元数据。 这是一个只读集合。</summary>
      <returns>返回此项定义的所有元数据。 如果不存在任何元数据，则返回空集合。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemDefinitionInstance.MetadataCount">
      <summary>获取此项定义上的元数据的条数。</summary>
      <returns>返回此项定义上的元数据的条数。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemDefinitionInstance.MetadataNames">
      <summary>获取可枚举此项定义的元数据名称的枚举器。 这是一个只读集合。</summary>
      <returns>返回可枚举此项定义的元数据名称的枚举器。</returns>
    </member>
    <member name="T:Microsoft.Build.Execution.ProjectItemGroupTaskInstance">
      <summary>对某个目标下的未计算项组进行包装。 不可变的。</summary>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemGroupTaskInstance.Condition">
      <summary>获取或设置此项目元素的 Condition 特性。</summary>
      <returns>返回 Condition 特性的值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemGroupTaskInstance.ConditionLocation">
      <summary>此条件的位置（如果有）。</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemGroupTaskInstance.Items">
      <summary>获取此项定义的所有子项。</summary>
      <returns>返回此项定义的所有子项。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemGroupTaskInstance.Location">
      <summary>原始元素的位置</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="T:Microsoft.Build.Execution.ProjectItemGroupTaskItemInstance">
      <summary>对某个目标中的项组下的未计算项进行包装。 不可变的。</summary>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemGroupTaskItemInstance.Condition">
      <summary>获取未计算的 Condition 特性值。</summary>
      <returns>返回未计算的 Condition 特性值。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemGroupTaskItemInstance.ConditionLocation">
      <summary>此条件特性的位置（如果有）。</summary>
      <returns>返回条件特性的位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemGroupTaskItemInstance.Exclude">
      <summary>获取未计算的 Exclude 特性值。</summary>
      <returns>返回未计算的 Exclude 特性值。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemGroupTaskItemInstance.ExcludeLocation">
      <summary>排除特性的位置（如果有）。</summary>
      <returns>返回排除特性的位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemGroupTaskItemInstance.Include">
      <summary>获取未计算的 Include 特性值。</summary>
      <returns>返回未计算的 Include 特性值。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemGroupTaskItemInstance.IncludeLocation">
      <summary>此条件特性的位置（如果有）。</summary>
      <returns>返回包括特性的位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemGroupTaskItemInstance.ItemType">
      <summary>获取项类型，例如“Compile”。</summary>
      <returns>返回项类型，例如“Compile”。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemGroupTaskItemInstance.KeepDuplicates">
      <summary>获取 unevaluated KeepDuplicates 值。</summary>
      <returns>返回 KeepDuplicates 值。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemGroupTaskItemInstance.KeepDuplicatesLocation">
      <summary>获取或设置 KeepDuplicates 特性（如有）的位置。</summary>
      <returns>返回 KeepDuplicates 特性的位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemGroupTaskItemInstance.KeepMetadata">
      <summary>获取未计算的 KeepMetadata 特性值</summary>
      <returns>返回 KeepMetadata 值。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemGroupTaskItemInstance.KeepMetadataLocation">
      <summary>获取 KeepMetadata 特性（如有）的位置。</summary>
      <returns>返回 KeepMetadata 的位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemGroupTaskItemInstance.Location">
      <summary>元素的位置</summary>
      <returns>返回元素的位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemGroupTaskItemInstance.Metadata">
      <summary>获取此项的未计算元数据的已排序集合。</summary>
      <returns>返回此项的未计算元数据的已排序集合。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemGroupTaskItemInstance.Remove">
      <summary>获取未计算的 Remove 特性值。</summary>
      <returns>返回未计算的 Remove 特性值。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemGroupTaskItemInstance.RemoveLocation">
      <summary>此移除特性的位置（如果有）。</summary>
      <returns>返回移除特性的位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemGroupTaskItemInstance.RemoveMetadata">
      <summary>获取 unevaluated RemoveMetadata 值。</summary>
      <returns>返回 RemoveMetadata 值。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemGroupTaskItemInstance.RemoveMetadataLocation">
      <summary>获取 RemoveMetadata 特性（如有）的位置。</summary>
      <returns>返回 RemoveMetadata 位置。</returns>
    </member>
    <member name="T:Microsoft.Build.Execution.ProjectItemGroupTaskMetadataInstance">
      <summary>对某个目标的项组中的某个项下的未计算元数据进行包装。 不可变的。</summary>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemGroupTaskMetadataInstance.Condition">
      <summary>获取未计算的 Condition 特性值。</summary>
      <returns>返回未计算的 Condition 特性值。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemGroupTaskMetadataInstance.ConditionLocation">
      <summary>此条件特性的位置（如果有）。</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemGroupTaskMetadataInstance.Location">
      <summary>元素的位置</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemGroupTaskMetadataInstance.Name">
      <summary>获取此元数据的名称。</summary>
      <returns>返回此元数据的名称。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemGroupTaskMetadataInstance.Value">
      <summary>获取此元数据的未计算值。</summary>
      <returns>返回此元数据的未计算值。</returns>
    </member>
    <member name="T:Microsoft.Build.Execution.ProjectItemInstance">
      <summary>将计算项进行包装以进行生成。</summary>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemInstance.DirectMetadataCount">
      <summary>获取此项的元数据的条数。</summary>
      <returns>返回此项的元数据的条数。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemInstance.EvaluatedInclude">
      <summary>获取计算的 Include 特性值。</summary>
      <returns>返回计算的 Include 特性值，该值可能为空字符串。</returns>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectItemInstance.GetMetadata(System.String)">
      <summary>获取具有给定名称的元数据（包括从项定义继承的元数据）。</summary>
      <returns>返回具有给定名称的元数据。 如果不存在具有该名称的元数据，则返回 null。</returns>
      <param name="name">元数据的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectItemInstance.GetMetadataValue(System.String)">
      <summary>获取具有给定名称的元数据（包括从项定义继承的元数据）的值。</summary>
      <returns>获取具有给定名称的元数据（包括从项定义继承的元数据）的值。 如果不存在具有该名称的元数据，则返回空字符串。</returns>
      <param name="name">元数据的名称。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectItemInstance.HasMetadata(System.String)">
      <summary>确定是否在此项上定义了具有给定名称的元数据（即使其值是空字符串）。</summary>
      <returns>如果在此项上定义了具有给定名称的元数据（即使其值是空字符串），则返回 true；否则返回 false。</returns>
      <param name="name">元数据的名称。</param>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemInstance.ItemType">
      <summary>获取项类型，例如“Compile”。</summary>
      <returns>返回项类型，例如“Compile”。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemInstance.Metadata">
      <summary>获取可枚举此项的计算元数据的枚举器。 这是一个只读集合。</summary>
      <returns>返回可枚举此项的计算元数据的枚举器。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemInstance.MetadataCount">
      <summary>获取元数据项（包括从项定义继承的元数据）的数目。</summary>
      <returns>返回元数据项（包括从项定义继承的元数据）的数目。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemInstance.MetadataNames">
      <summary>获取此项的所有元数据名称（包括从项定义继承的元数据）。</summary>
      <returns>返回此项的所有元数据名称（包括从项定义继承的元数据）。</returns>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectItemInstance.Microsoft#Build#Framework#ITaskItem#CloneCustomMetadata">
      <summary>ITaskItem 实现。 获取自定义元数据的集合。</summary>
      <returns>自定义元数据的集合。</returns>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectItemInstance.Microsoft#Build#Framework#ITaskItem#CopyMetadataTo(Microsoft.Build.Framework.ITaskItem)">
      <summary>ITaskItem 实现。 将自定义的元数据项复制到另一个项。</summary>
      <param name="destinationItem">元数据项要复制到的项。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectItemInstance.Microsoft#Build#Framework#ITaskItem#GetMetadata(System.String)">
      <summary>ITaskItem 实现。 获取指定元数据项的值。</summary>
      <returns>
        <paramref name="attributeName" /> 元数据的值。</returns>
      <param name="metadataName">元数据项的名称。</param>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemInstance.Microsoft#Build#Framework#ITaskItem#ItemSpec">
      <summary>ITaskItem 实现。 获取或设置项规范。</summary>
      <returns>项规范。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemInstance.Microsoft#Build#Framework#ITaskItem#MetadataNames">
      <summary>ITaskItem 实现。 获取与该项关联的元数据项的名称。</summary>
      <returns>与该项关联的元数据项的名称。</returns>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectItemInstance.Microsoft#Build#Framework#ITaskItem#SetMetadata(System.String,System.String)">
      <summary>ITaskItem 实现。 在项中添加或更改自定义元数据项。</summary>
      <param name="metadataName">要添加或更改的元数据名称。</param>
      <param name="metadataValue">要添加或更改的元数据值。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectItemInstance.Microsoft#Build#Framework#ITaskItem2#CloneCustomMetadataEscaped">
      <summary>ITaskItem2 实现。 返回此对象的元数据的克隆。返回的值采用其原始的转义格式。</summary>
      <returns>返回克隆的元数据，并保留值的转义。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemInstance.Microsoft#Build#Framework#ITaskItem2#EvaluatedIncludeEscaped">
      <summary>ITaskItem2 实现。 计算的包含值，将根据需要进行转义。 可能为空字符串。 获取或设置项包含值，例如对于基于磁盘的项，这将是文件路径。</summary>
      <returns>返回项包含值。</returns>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectItemInstance.Microsoft#Build#Framework#ITaskItem2#GetMetadataValueEscaped(System.String)">
      <summary>ITaskItem2 实现。 允许查询此项的元数据的值。</summary>
      <returns>返回转义的元数据值。</returns>
      <param name="name">要查询的元数据。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectItemInstance.Microsoft#Build#Framework#ITaskItem2#SetMetadataValueLiteral(System.String,System.String)">
      <summary>ITaskItem2 实现。 可用来在此项上设置自定义元数据。 假定传入的值未经转义，并根据需要将值进行转义以维护其值。</summary>
      <param name="metadataName">元数据名称。</param>
      <param name="metadataValue">元数据的值。</param>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectItemInstance.Project">
      <summary>获取所属项目。</summary>
      <returns>返回所属项目。</returns>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectItemInstance.RemoveMetadata(System.String)">
      <summary>移除具有给定名称的元数据。</summary>
      <param name="metadataName">元数据名称。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectItemInstance.SetMetadata(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
      <summary>添加具有给定名称和值的元数据。 覆盖集合中已有的任何同名元数据。</summary>
      <param name="metadataDictionary">要添加的元数据。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectItemInstance.SetMetadata(System.String,System.String)">
      <summary>添加具有给定名称和值的元数据。 覆盖集合中已有的任何同名元数据。</summary>
      <returns>返回新的元数据。</returns>
      <param name="name">要添加的元数据的名称。</param>
      <param name="evaluatedValue">要添加的元数据的计算值。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectItemInstance.ToString">
      <summary>获取表示当前项的字符串。</summary>
      <returns>返回表示当前项的字符串。</returns>
    </member>
    <member name="T:Microsoft.Build.Execution.ProjectMetadataInstance">
      <summary>对计算元数据进行包装以进行生成。</summary>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectMetadataInstance.DeepClone">
      <summary>复制元数据以创建深层克隆。</summary>
      <returns>返回新的元数据。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectMetadataInstance.EvaluatedValue">
      <summary>获取或设置元数据的计算值。</summary>
      <returns>返回元数据的计算值，该值决不会为 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectMetadataInstance.Name">
      <summary>获取元数据的名称。</summary>
      <returns>返回元数据的名称。</returns>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectMetadataInstance.System#IEquatable{T}#Equals(Microsoft.Build.Execution.ProjectMetadataInstance)">
      <summary>比较此项目元数据与给定的项目元数据是否相等。</summary>
      <returns>如果项目元数据相等，则返回 true；否则返回 false。</returns>
      <param name="other">要比较的项目元数据。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectMetadataInstance.ToString">
      <summary>获取此元数据的字符串表示形式。</summary>
      <returns>返回此元数据的字符串表示形式。</returns>
    </member>
    <member name="T:Microsoft.Build.Execution.ProjectOnErrorInstance">
      <summary>对 OnError 元素 (MSBuild)进行包装。</summary>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectOnErrorInstance.Condition">
      <summary>获取此 OnError 元素的未计算的 Condition 特性值。</summary>
      <returns>返回未计算的 Condition 特性值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectOnErrorInstance.ConditionLocation">
      <summary>此条件的位置（如果有）。</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectOnErrorInstance.ExecuteTargets">
      <summary>获取此 OnError 元素的未计算的 ExecuteTargets 特性值。</summary>
      <returns>返回未计算的 ExecuteTargets 特性值，该值可能为空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectOnErrorInstance.ExecuteTargetsLocation">
      <summary>执行目标特性的位置（如果有）。</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectOnErrorInstance.Location">
      <summary>元素的位置</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="T:Microsoft.Build.Execution.ProjectPropertyGroupTaskInstance">
      <summary>对某个目标下的未计算属性组进行包装。 不可变的。</summary>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectPropertyGroupTaskInstance.Condition">
      <summary>获取或设置此属性组的 Condition 特性。</summary>
      <returns>返回 Condition 特性的值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectPropertyGroupTaskInstance.ConditionLocation">
      <summary>获取条件特性的位置。</summary>
      <returns>返回条件特性的位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectPropertyGroupTaskInstance.Location">
      <summary>获取元素自身的位置。</summary>
      <returns>返回元素的位置</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectPropertyGroupTaskInstance.Properties">
      <summary>获取此属性组中的所有子属性。</summary>
      <returns>返回此属性组中的所有子属性。</returns>
    </member>
    <member name="T:Microsoft.Build.Execution.ProjectPropertyGroupTaskPropertyInstance">
      <summary>对某个目标中的属性组的未计算属性进行包装。 不可变的。</summary>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectPropertyGroupTaskPropertyInstance.Condition">
      <summary>获取或设置此属性的未计算的 Condition 特性。</summary>
      <returns>返回 Condition 特性的值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectPropertyGroupTaskPropertyInstance.ConditionLocation">
      <summary>获取条件特性的位置。</summary>
      <returns>返回条件特性位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectPropertyGroupTaskPropertyInstance.Location">
      <summary>获取元素自身的位置。</summary>
      <returns>返回元素位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectPropertyGroupTaskPropertyInstance.Name">
      <summary>获取此属性的名称。</summary>
      <returns>返回此属性的名称。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectPropertyGroupTaskPropertyInstance.Value">
      <summary>获取此属性的未计算值。</summary>
      <returns>返回此属性的未计算值。</returns>
    </member>
    <member name="T:Microsoft.Build.Execution.ProjectPropertyInstance">
      <summary>对计算属性进行包装以进行生成。 可通过 ProjectInstance 对象上的方法添加和移除这些属性的实例。</summary>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectPropertyInstance.EvaluatedValue">
      <summary>获取或设置此属性的计算值。</summary>
      <returns>返回此属性的计算值。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectPropertyInstance.IsImmutable">
      <summary>如果此对象是不可变的，则返回 true；否则返回 false。  一个不可变的对象无法进行可变。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectPropertyInstance.Name">
      <summary>获取此属性的名称。</summary>
      <returns>返回此属性的名称。</returns>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectPropertyInstance.System#IEquatable{T}#Equals(Microsoft.Build.Execution.ProjectPropertyInstance)">
      <summary>比较此项目属性与给定的项目属性是否相等。</summary>
      <returns>如果项目属性相等，则返回 true；否则返回 false。</returns>
      <param name="other">要比较的项目属性。</param>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectPropertyInstance.ToString">
      <summary>获取此属性的字符串表示形式。</summary>
      <returns>返回此属性的字符串表示形式。</returns>
    </member>
    <member name="T:Microsoft.Build.Execution.ProjectTargetInstance">
      <summary>包装 Target 元素 (MSBuild)。</summary>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTargetInstance.AfterTargetsLocation">
      <summary>获取 AfterTargets 特性的位置。</summary>
      <returns>返回 AfterTargets 特性位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTargetInstance.BeforeTargetsLocation">
      <summary>获取 BeforeTargets 特性的位置。</summary>
      <returns>返回 BeforeTargets 特性位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTargetInstance.Children">
      <summary>获取此目标的子级的列表。 生成将循环访问此列表来获得要执行的每个任务。</summary>
      <returns>返回此目标的子级的列表。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTargetInstance.Condition">
      <summary>获取此目标元素的未计算的 Condition 特性。</summary>
      <returns>返回 Condition 特性的值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTargetInstance.ConditionLocation">
      <summary>获取条件特性的位置。</summary>
      <returns>返回条件特性位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTargetInstance.DependsOnTargets">
      <summary>获取此目标所依赖的目标的未计算列表（各项之间用分号分隔）。</summary>
      <returns>返回此目标所依赖的目标的未计算列表（各项之间用分号分隔）。 如果此目标不依赖任何其他目标，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTargetInstance.DependsOnTargetsLocation">
      <summary>获取 DependsOnTargets 特性的位置。</summary>
      <returns>返回 DependsOnTargets 特性位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTargetInstance.FullPath">
      <summary>获取此目标源自于的文件的完整路径。</summary>
      <returns>返回此目标源自于的文件的完整路径。 如果此目标源自于未加载且未曾给定路径的项目，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTargetInstance.Inputs">
      <summary>获取此目标元素的未计算的输入。</summary>
      <returns>返回此目标元素的未计算的输入。 如果此目标没有输入，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTargetInstance.InputsLocation">
      <summary>获取输入特性的位置。</summary>
      <returns>返回输入特性位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTargetInstance.KeepDuplicateOutputs">
      <summary>获取用于从此目标删除重复输出的未计算的条件。</summary>
      <returns>返回用于从此目标删除重复输出的未计算的条件。 如果不存在任何条件，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTargetInstance.KeepDuplicateOutputsLocation">
      <summary>获取 KeepDuplicateOutputs 特性（如有）的位置，如果有。</summary>
      <returns>返回 KeepDuplicateOutputs 特性位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTargetInstance.Location">
      <summary>获取元素自身的位置。</summary>
      <returns>返回元素位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTargetInstance.Name">
      <summary>获取目标的名称。</summary>
      <returns>返回目标的名称。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTargetInstance.OnErrorChildren">
      <summary>获取此目标的引用 OnError 目标的子级的列表。</summary>
      <returns>获取此目标的引用 OnError 目标的子级的列表。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTargetInstance.Outputs">
      <summary>获取此目标元素的未计算的输出。可能为空字符串。</summary>
      <returns>返回此目标元素的未计算的输出。如果没有任何输出，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTargetInstance.OutputsLocation">
      <summary>获取输出特性的位置。</summary>
      <returns>返回输出特性位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTargetInstance.Returns">
      <summary>以字符串的形式获取目标元素的未计算的返回值。</summary>
      <returns>以字符串的形式返回目标元素的未计算的返回值。 如果未指定返回值，则返回空字符串或 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTargetInstance.ReturnsLocation">
      <summary>获取返回结果特性的位置。</summary>
      <returns>返回返回特性位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTargetInstance.Tasks">
      <summary>获取此目标的所有直接子级任务。</summary>
      <returns>返回此目标的所有直接子级任务。</returns>
    </member>
    <member name="T:Microsoft.Build.Execution.ProjectTargetInstanceChild">
      <summary>将 <see cref="T:Microsoft.Build.Execution.ProjectTaskInstance" />、<see cref="T:Microsoft.Build.Execution.ProjectPropertyGroupTaskInstance" /> 和 <see cref="T:Microsoft.Build.Execution.ProjectItemGroupTaskInstance" /> 类抽象化。 通过此操作，可在目标子级的单个集合中使用这些类型。</summary>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectTargetInstanceChild.#ctor">
      <summary>抽象类不能进行实例化。</summary>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTargetInstanceChild.Condition">
      <summary>获取或设置此目标的 Condition 特性。</summary>
      <returns>返回 Condition 特性的值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTargetInstanceChild.ConditionLocation">
      <summary>获取条件特性的位置。</summary>
      <returns>返回条件特性位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTargetInstanceChild.FullPath">
      <summary>获取此任务源自于的文件的完整路径。</summary>
      <returns>返回此任务源自于的文件的完整路径。 如果此任务源自于的项目未加载而且从未给定此任务的路径，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTargetInstanceChild.Location">
      <summary>获取元素自身的位置。</summary>
      <returns>返回元素位置。</returns>
    </member>
    <member name="T:Microsoft.Build.Execution.ProjectTaskInstance">
      <summary>包装 Task 元素 (MSBuild)。</summary>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskInstance.Condition">
      <summary>获取此任务的未计算的 Condition 特性。</summary>
      <returns>返回 Condition 特性的值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskInstance.ConditionLocation">
      <summary>此条件的位置（如果有）。</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskInstance.ContinueOnError">
      <summary>获取此任务的未计算的 ContinueOnError 特性。</summary>
      <returns>返回此任务的未计算的 ContinueOnError 特性。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskInstance.ContinueOnErrorLocation">
      <summary>ContinueOnError 特性的位置（如果有）。</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskInstance.Location">
      <summary>原始元素的位置</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskInstance.MSBuildArchitecture">
      <summary>在任务上未评估的 MSBuildArchitecture。  可能为空字符串。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskInstance.MSBuildArchitectureLocation">
      <summary>MSBuildArchitecture 特性的位置（如果有）。</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskInstance.MSBuildRuntime">
      <summary>在任务上未评估的 MSBuildRuntime。  可能为空字符串。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskInstance.MSBuildRuntimeLocation">
      <summary>MSBuildRuntime 特性的位置（如果有）。</summary>
      <returns>返回 <see cref="T:Microsoft.Build.Construction.ElementLocation" />。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskInstance.Name">
      <summary>获取此任务在项目中的显示名称（可能为限定名称）。</summary>
      <returns>返回此任务在项目中的显示名称（可能为限定名称）。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskInstance.Outputs">
      <summary>获取此任务的输出属性和项对象的有序集。</summary>
      <returns>返回此任务的输出属性和项对象的有序集。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskInstance.Parameters">
      <summary>获取此任务的任务参数名称和未计算值的无序集。</summary>
      <returns>返回此任务的任务参数名称和未计算值的无序集。</returns>
    </member>
    <member name="T:Microsoft.Build.Execution.ProjectTaskInstanceChild">
      <summary>将 TaskOutputItem 和 TaskOutputProperty 类的基类抽象化。 通过此操作，可在单个集合中使用这些类。</summary>
    </member>
    <member name="M:Microsoft.Build.Execution.ProjectTaskInstanceChild.#ctor">
      <summary>抽象类不能进行实例化。</summary>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskInstanceChild.Condition">
      <summary>获取此任务的 Condition 特性。</summary>
      <returns>返回 Condition 特性的值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskInstanceChild.ConditionLocation">
      <summary>此原始“条件”特性的位置（如果有）。</summary>
      <returns>返回条件的位置或 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskInstanceChild.Location">
      <summary>获取原始元素的位置。</summary>
      <returns>返回原始元素的位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskInstanceChild.TaskParameterLocation">
      <summary>获取 TaskParameter 特性的位置。</summary>
      <returns>返回 TaskParameter 的位置。</returns>
    </member>
    <member name="T:Microsoft.Build.Execution.ProjectTaskOutputItemInstance">
      <summary>对 Task 元素 (MSBuild)的输出项元素进行包装。</summary>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskOutputItemInstance.Condition">
      <summary>获取此项目元素的 Condition 特性。</summary>
      <returns>返回 Condition 特性的值。 如果该特性不存在，则返回空字符串。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskOutputItemInstance.ConditionLocation">
      <summary>获取条件特性的位置。</summary>
      <returns>返回条件特性位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskOutputItemInstance.ItemType">
      <summary>获取输出要转到的项类型。</summary>
      <returns>返回输出要转到的项类型。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskOutputItemInstance.ItemTypeLocation">
      <summary>获取 ItemType 特性的位置。</summary>
      <returns>返回 ItemType 特性位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskOutputItemInstance.Location">
      <summary>获取元素自身的位置。</summary>
      <returns>返回元素位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskOutputItemInstance.TaskParameter">
      <summary>获取要从中检索输出的此类的属性。</summary>
      <returns>返回要从中检索输出的此类的属性。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskOutputItemInstance.TaskParameterLocation">
      <summary>获取 TaskParameter 特性的位置。</summary>
      <returns>返回 TaskParameter 特性的位置。</returns>
    </member>
    <member name="T:Microsoft.Build.Execution.ProjectTaskOutputPropertyInstance">
      <summary>表示 Task 元素 (MSBuild)的输出属性元素。</summary>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskOutputPropertyInstance.Condition">
      <summary>获取输出元素的 Condition 特性。</summary>
      <returns>返回输出元素的 Condition 特性。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskOutputPropertyInstance.ConditionLocation">
      <summary>获取条件特性的位置。</summary>
      <returns>返回条件特性位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskOutputPropertyInstance.Location">
      <summary>获取元素自身的位置。</summary>
      <returns>返回元素位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskOutputPropertyInstance.PropertyName">
      <summary>获取接收输出的属性的名称。</summary>
      <returns>返回接收输出的属性的名称。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskOutputPropertyInstance.PropertyNameLocation">
      <summary>获取 PropertyName 特性的位置。</summary>
      <returns>返回 PropertyName 特性位置。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskOutputPropertyInstance.TaskParameter">
      <summary>获取要从中检索输出的任务类的属性。</summary>
      <returns>返回要从中检索输出的任务类的属性。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.ProjectTaskOutputPropertyInstance.TaskParameterLocation">
      <summary>获取 TaskParameter 特性的位置。</summary>
      <returns>返回 TaskParameter 特性的位置。</returns>
    </member>
    <member name="T:Microsoft.Build.Execution.TargetResult">
      <summary>表示用于生成单个目标的结果代码和整个生成结果。</summary>
    </member>
    <member name="P:Microsoft.Build.Execution.TargetResult.Exception">
      <summary>获取中止此目标的异常（如果有的话）。</summary>
      <returns>返回中止此目标的异常（如果有的话）。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.TargetResult.Items">
      <summary>获取此目标产生的项。</summary>
      <returns>返回此目标产生的项。</returns>
    </member>
    <member name="P:Microsoft.Build.Execution.TargetResult.ResultCode">
      <summary>获取用于生成此目标的结果代码。</summary>
      <returns>返回用于生成此目标的结果代码。</returns>
    </member>
    <member name="T:Microsoft.Build.Execution.TargetResultCode">
      <summary>给定目标的结果代码。</summary>
    </member>
    <member name="F:Microsoft.Build.Execution.TargetResultCode.Failure">
      <summary>生成失败的目标。</summary>
    </member>
    <member name="F:Microsoft.Build.Execution.TargetResultCode.Skipped">
      <summary>已跳过该目标，因为未满足其条件。</summary>
    </member>
    <member name="F:Microsoft.Build.Execution.TargetResultCode.Success">
      <summary>已成功生成的目标。</summary>
    </member>
    <member name="T:Microsoft.Build.Logging.ColorResetter">
      <summary>用于重置控制台颜色的委托的类型。</summary>
    </member>
    <member name="T:Microsoft.Build.Logging.ColorSetter">
      <summary>用于设置控制台颜色的委托的类型。</summary>
      <param name="color">文本颜色。</param>
    </member>
    <member name="T:Microsoft.Build.Logging.ConfigurableForwardingLogger">
      <summary>表示一个记录器，该记录器将事件转发到驻留在父节点上的中央记录器（例如 ConsoleLogger）。</summary>
    </member>
    <member name="M:Microsoft.Build.Logging.ConfigurableForwardingLogger.#ctor">
      <summary>构造一个记录器。</summary>
    </member>
    <member name="P:Microsoft.Build.Logging.ConfigurableForwardingLogger.BuildEventRedirector">
      <summary>获取或设置一个属性，该属性确定节点记录器如何将消息转发到中央记录器。</summary>
      <returns>返回一个属性，该属性确定节点记录器如何将消息转发到中央记录器。</returns>
    </member>
    <member name="M:Microsoft.Build.Logging.ConfigurableForwardingLogger.ForwardToCentralLogger(Microsoft.Build.Framework.BuildEventArgs)">
      <summary>将此事件转发到中央记录器。</summary>
      <param name="e">要转发的事件。</param>
    </member>
    <member name="M:Microsoft.Build.Logging.ConfigurableForwardingLogger.Initialize(Microsoft.Build.Framework.IEventSource)">
      <summary>注册控制台记录器以记录给定的生成事件。</summary>
      <param name="eventSource">生成事件的事件源。</param>
    </member>
    <member name="M:Microsoft.Build.Logging.ConfigurableForwardingLogger.Initialize(Microsoft.Build.Framework.IEventSource,System.Int32)">
      <summary>注册控制台记录器以记录所有生成事件。</summary>
      <param name="eventSource">生成事件的事件源。</param>
      <param name="nodeCount">节点计数。未使用。</param>
    </member>
    <member name="P:Microsoft.Build.Logging.ConfigurableForwardingLogger.NodeId">
      <summary>获取或设置节点的 ID。</summary>
      <returns>返回节点的 ID。</returns>
    </member>
    <member name="P:Microsoft.Build.Logging.ConfigurableForwardingLogger.Parameters">
      <summary>获取或设置一个开关，该开关确定是否禁止在生成的结尾输出错误和警告摘要。</summary>
      <returns>返回一个开关，该开关确定是否禁止在生成的结尾输出错误和警告摘要。</returns>
    </member>
    <member name="M:Microsoft.Build.Logging.ConfigurableForwardingLogger.Shutdown">
      <summary>当生成引擎处理完此记录器时调用。</summary>
    </member>
    <member name="P:Microsoft.Build.Logging.ConfigurableForwardingLogger.Verbosity">
      <summary>获取或设置要显示在事件日志中的详细信息的级别。</summary>
      <returns>返回要显示在事件日志中的详细信息的级别。</returns>
    </member>
    <member name="T:Microsoft.Build.Logging.ConsoleLogger">
      <summary>表示将事件数据输出到控制台 (stdout) 的默认记录器。</summary>
    </member>
    <member name="M:Microsoft.Build.Logging.ConsoleLogger.#ctor">
      <summary>创建一个默认记录器。</summary>
    </member>
    <member name="M:Microsoft.Build.Logging.ConsoleLogger.#ctor(Microsoft.Build.Framework.LoggerVerbosity)">
      <summary>创建一个具有给定详细级别的记录器实例，该实例将记录到默认控制台。</summary>
      <param name="verbosity">详细级别。</param>
    </member>
    <member name="M:Microsoft.Build.Logging.ConsoleLogger.#ctor(Microsoft.Build.Framework.LoggerVerbosity,Microsoft.Build.Logging.WriteHandler,Microsoft.Build.Logging.ColorSetter,Microsoft.Build.Logging.ColorResetter)">
      <summary>使用替换输出处理程序初始化记录器。</summary>
      <param name="verbosity">详细级别。</param>
      <param name="write">写入处理程序。</param>
      <param name="colorSet">设置文本颜色。</param>
      <param name="colorReset">重置文本颜色。</param>
    </member>
    <member name="M:Microsoft.Build.Logging.ConsoleLogger.ApplyParameter(System.String,System.String)">
      <summary>将一个参数应用到记录器。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="parameterValue">参数值。</param>
    </member>
    <member name="M:Microsoft.Build.Logging.ConsoleLogger.BuildFinishedHandler(System.Object,Microsoft.Build.Framework.BuildFinishedEventArgs)">
      <summary>当完成生成时调用。</summary>
      <param name="sender">发送方（应为 null）。</param>
      <param name="e">事件参数。</param>
    </member>
    <member name="M:Microsoft.Build.Logging.ConsoleLogger.BuildStartedHandler(System.Object,Microsoft.Build.Framework.BuildStartedEventArgs)">
      <summary>当开始生成时调用。</summary>
      <param name="sender">发送方（应为 null）。</param>
      <param name="e">事件参数。</param>
    </member>
    <member name="M:Microsoft.Build.Logging.ConsoleLogger.CustomEventHandler(System.Object,Microsoft.Build.Framework.CustomBuildEventArgs)">
      <summary>调用它可记录自定义事件。</summary>
      <param name="sender">事件的发送方。</param>
      <param name="e">事件参数。</param>
    </member>
    <member name="M:Microsoft.Build.Logging.ConsoleLogger.ErrorHandler(System.Object,Microsoft.Build.Framework.BuildErrorEventArgs)">
      <summary>调用它可记录错误事件。</summary>
      <param name="sender">事件的发送方。</param>
      <param name="e">事件参数。</param>
    </member>
    <member name="M:Microsoft.Build.Logging.ConsoleLogger.Initialize(Microsoft.Build.Framework.IEventSource)">
      <summary>注册控制台记录器以记录给定的生成事件。</summary>
      <param name="eventSource">可用的事件。</param>
    </member>
    <member name="M:Microsoft.Build.Logging.ConsoleLogger.Initialize(Microsoft.Build.Framework.IEventSource,System.Int32)">
      <summary>使用给定的事件源和节点计数初始化记录器。</summary>
      <param name="eventSource">事件源。</param>
      <param name="nodeCount">节点计数。</param>
    </member>
    <member name="M:Microsoft.Build.Logging.ConsoleLogger.MessageHandler(System.Object,Microsoft.Build.Framework.BuildMessageEventArgs)">
      <summary>调用它可记录消息事件。</summary>
      <param name="sender">事件的发送方。</param>
      <param name="e">事件参数。</param>
    </member>
    <member name="P:Microsoft.Build.Logging.ConsoleLogger.Parameters">
      <summary>获取或设置以分号分隔的参数键-值对的列表。</summary>
      <returns>返回以分号分隔的参数键-值对的列表。</returns>
    </member>
    <member name="M:Microsoft.Build.Logging.ConsoleLogger.ProjectFinishedHandler(System.Object,Microsoft.Build.Framework.ProjectFinishedEventArgs)">
      <summary>调用它可记录项目已完成事件。</summary>
      <param name="sender">发送方（应为 null）。</param>
      <param name="e">事件参数。</param>
    </member>
    <member name="M:Microsoft.Build.Logging.ConsoleLogger.ProjectStartedHandler(System.Object,Microsoft.Build.Framework.ProjectStartedEventArgs)">
      <summary>调用它可记录项目已开始事件。</summary>
      <param name="sender">发送方（应为 null）。</param>
      <param name="e">事件参数。</param>
    </member>
    <member name="P:Microsoft.Build.Logging.ConsoleLogger.ShowSummary">
      <summary>获取或设置一个开关，该开关确定是否禁止显示错误和警告摘要。</summary>
      <returns>返回一个开关，该开关确定是否禁止显示错误和警告摘要。</returns>
    </member>
    <member name="M:Microsoft.Build.Logging.ConsoleLogger.Shutdown">
      <summary>当完成生成时调用。</summary>
    </member>
    <member name="P:Microsoft.Build.Logging.ConsoleLogger.SkipProjectStartedText">
      <summary>获取或设置一个开关，该开关确定是否禁止显示项目标题。</summary>
      <returns>返回一个开关，该开关确定是否禁止显示项目标题。</returns>
    </member>
    <member name="M:Microsoft.Build.Logging.ConsoleLogger.TargetFinishedHandler(System.Object,Microsoft.Build.Framework.TargetFinishedEventArgs)">
      <summary>调用它可记录目标已完成事件。</summary>
      <param name="sender">发送方（应为 null）。</param>
      <param name="e">事件参数。</param>
    </member>
    <member name="M:Microsoft.Build.Logging.ConsoleLogger.TargetStartedHandler(System.Object,Microsoft.Build.Framework.TargetStartedEventArgs)">
      <summary>调用它可记录目标已开始事件。</summary>
      <param name="sender">发送方（应为 null）。</param>
      <param name="e">事件参数。</param>
    </member>
    <member name="M:Microsoft.Build.Logging.ConsoleLogger.TaskFinishedHandler(System.Object,Microsoft.Build.Framework.TaskFinishedEventArgs)">
      <summary>调用它可记录任务已完成事件。</summary>
      <param name="sender">发送方（应为 null）。</param>
      <param name="e">事件参数。</param>
    </member>
    <member name="M:Microsoft.Build.Logging.ConsoleLogger.TaskStartedHandler(System.Object,Microsoft.Build.Framework.TaskStartedEventArgs)">
      <summary>调用它可记录任务已开始事件。</summary>
      <param name="sender">发送方（应为 null）。</param>
      <param name="e">事件参数。</param>
    </member>
    <member name="P:Microsoft.Build.Logging.ConsoleLogger.Verbosity">
      <summary>获取或设置要显示在事件日志中的详细信息的级别。</summary>
      <returns>返回要显示在事件日志中的详细信息的级别。</returns>
    </member>
    <member name="M:Microsoft.Build.Logging.ConsoleLogger.WarningHandler(System.Object,Microsoft.Build.Framework.BuildWarningEventArgs)">
      <summary>调用它可记录警告事件。</summary>
      <param name="sender">事件的发送方。</param>
      <param name="e">事件参数。</param>
    </member>
    <member name="P:Microsoft.Build.Logging.ConsoleLogger.WriteHandler">
      <summary>提供对写入处理程序委托的访问，以便可以在必要时对其进行重定向（例如重定向到文件）。</summary>
      <returns>返回写入处理程序委托。</returns>
    </member>
    <member name="T:Microsoft.Build.Logging.DistributedFileLogger">
      <summary>此类创建一个文本文件，其中将包含一个节点的生成日志。</summary>
    </member>
    <member name="M:Microsoft.Build.Logging.DistributedFileLogger.#ctor">
      <summary>创建一个文件记录器。</summary>
    </member>
    <member name="P:Microsoft.Build.Logging.DistributedFileLogger.BuildEventRedirector">
      <summary>获取或设置一个属性，该属性确定节点记录器如何将消息转发到中央记录器。</summary>
      <returns>返回一个属性，该属性确定节点记录器如何将消息转发到中央记录器。</returns>
    </member>
    <member name="M:Microsoft.Build.Logging.DistributedFileLogger.Initialize(Microsoft.Build.Framework.IEventSource)">
      <summary>使用给定的事件源初始化记录器。</summary>
      <param name="eventSource">事件源。</param>
    </member>
    <member name="M:Microsoft.Build.Logging.DistributedFileLogger.Initialize(Microsoft.Build.Framework.IEventSource,System.Int32)">
      <summary>使用给定的事件源和节点计数初始化记录器。</summary>
      <param name="eventSource">事件源。</param>
      <param name="nodeCount">节点计数。</param>
    </member>
    <member name="P:Microsoft.Build.Logging.DistributedFileLogger.NodeId">
      <summary>获取或设置节点的 ID。</summary>
      <returns>返回节点的 ID。</returns>
    </member>
    <member name="P:Microsoft.Build.Logging.DistributedFileLogger.Parameters">
      <summary>获取或设置一个开关，该开关确定是否禁止在生成的结尾输出错误和警告摘要。</summary>
      <returns>返回一个开关，该开关确定是否禁止在生成的结尾输出错误和警告摘要。</returns>
    </member>
    <member name="M:Microsoft.Build.Logging.DistributedFileLogger.Shutdown">
      <summary>当生成引擎处理完此记录器时调用。</summary>
    </member>
    <member name="P:Microsoft.Build.Logging.DistributedFileLogger.Verbosity">
      <summary>获取或设置要显示在事件日志中的详细信息的级别。</summary>
      <returns>返回要显示在事件日志中的详细信息的级别。</returns>
    </member>
    <member name="T:Microsoft.Build.Logging.FileLogger">
      <summary>可记录到某个文件而非控制台的 ConsoleLogger 的专用化。</summary>
    </member>
    <member name="M:Microsoft.Build.Logging.FileLogger.#ctor">
      <summary>创建一个文件记录器。</summary>
    </member>
    <member name="M:Microsoft.Build.Logging.FileLogger.Initialize(Microsoft.Build.Framework.IEventSource)">
      <summary>注册控制台文件记录器以记录给定的生成事件。</summary>
      <param name="eventSource">可用的事件。</param>
    </member>
    <member name="M:Microsoft.Build.Logging.FileLogger.Initialize(Microsoft.Build.Framework.IEventSource,System.Int32)">
      <summary>在多处理器环境中初始化一个文件记录器。</summary>
      <param name="eventSource">事件源。</param>
      <param name="nodeCount">节点计数。</param>
    </member>
    <member name="M:Microsoft.Build.Logging.FileLogger.Shutdown">
      <summary>当完成生成时调用。</summary>
    </member>
    <member name="T:Microsoft.Build.Logging.ForwardingLoggerRecord">
      <summary>表示在多处理器日志记录中使用的中央/转发记录器对。</summary>
    </member>
    <member name="M:Microsoft.Build.Logging.ForwardingLoggerRecord.#ctor(Microsoft.Build.Framework.ILogger,Microsoft.Build.Logging.LoggerDescription)">
      <summary>创建一个转发记录器。</summary>
      <param name="centralLogger">中央记录器。</param>
      <param name="forwardingLoggerDescription">转发记录器的说明。</param>
    </member>
    <member name="P:Microsoft.Build.Logging.ForwardingLoggerRecord.CentralLogger">
      <summary>获取中央记录器。</summary>
      <returns>返回中央记录器。</returns>
    </member>
    <member name="P:Microsoft.Build.Logging.ForwardingLoggerRecord.ForwardingLoggerDescription">
      <summary>获取转发记录器说明。</summary>
      <returns>返回转发记录器说明。</returns>
    </member>
    <member name="T:Microsoft.Build.Logging.LoggerDescription">
      <summary>以值集合的形式包含有关记录器的信息，这些信息可用于实例化记录器，并可以进行序列化以在不同进程之间传递。</summary>
    </member>
    <member name="M:Microsoft.Build.Logging.LoggerDescription.#ctor(System.String,System.String,System.String,System.String,Microsoft.Build.Framework.LoggerVerbosity)">
      <summary>利用给定数据创建记录器说明。</summary>
      <param name="loggerClassName">记录器的类名称。</param>
      <param name="loggerAssemblyName">实现记录器的程序集名称。</param>
      <param name="loggerAssemblyFile">实现记录器的程序集文件。</param>
      <param name="loggerSwitchParameters">记录器的开关参数。</param>
      <param name="verbosity">详细级别。</param>
    </member>
    <member name="M:Microsoft.Build.Logging.LoggerDescription.CreateLogger">
      <summary>利用此说明中的数据创建一个 ILogger 实例。</summary>
      <returns>利用此说明中的数据返回一个 ILogger 实例。</returns>
    </member>
    <member name="P:Microsoft.Build.Logging.LoggerDescription.LoggerSwitchParameters">
      <summary>获取记录器参数字符串。</summary>
      <returns>返回记录器参数字符串。如果没有参数，则返回 null。</returns>
    </member>
    <member name="P:Microsoft.Build.Logging.LoggerDescription.Verbosity">
      <summary>返回此记录器的详细级别。</summary>
    </member>
    <member name="T:Microsoft.Build.Logging.WriteHandler">
      <summary>用于将一个字符串写入到某个位置（如控制台窗口或 IDE 生成窗口）的委托。</summary>
      <param name="message">要写入的消息。</param>
    </member>
  </members>
</doc>