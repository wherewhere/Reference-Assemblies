<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.Entity</name>
  </assembly>
  <members>
    <member name="T:System.Data.EntityCommandCompilationException">
      <summary>表示命令编译过程中发生的错误；当未能生成命令树时，表示命令文本。</summary>
    </member>
    <member name="M:System.Data.EntityCommandCompilationException.#ctor">
      <summary>初始化 <see cref="T:System.Data.EntityCommandCompilationException" /> 的新实例。</summary>
    </member>
    <member name="M:System.Data.EntityCommandCompilationException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.EntityCommandCompilationException" /> 的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Data.EntityCommandCompilationException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.EntityCommandCompilationException" /> 的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常，或者，如果未指定任何内部异常，则为 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="T:System.Data.EntityCommandExecutionException">
      <summary>表示当基础存储提供程序未能执行指定的命令时，所发生的错误。 此异常通常包装一个提供程序特定的异常。</summary>
    </member>
    <member name="M:System.Data.EntityCommandExecutionException.#ctor">
      <summary>初始化 <see cref="T:System.Data.EntityCommandExecutionException" /> 的新实例。</summary>
    </member>
    <member name="M:System.Data.EntityCommandExecutionException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.EntityCommandExecutionException" /> 的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Data.EntityCommandExecutionException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.EntityCommandExecutionException" /> 的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常，或者，如果未指定任何内部异常，则为 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="T:System.Data.EntityException">
      <summary>表示 EntityClient 命名空间中发生的与 Entity Framework 相关的错误。 EntityException 是 EntityClient 类所引发的所有 Entity Framework 异常的基类。</summary>
    </member>
    <member name="M:System.Data.EntityException.#ctor">
      <summary>初始化 <see cref="T:System.Data.EntityException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.EntityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Data.EntityException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它存有有关所引发的异常的序列化对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Data.EntityException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.EntityException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Data.EntityException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.EntityException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常，或者，如果未指定任何内部异常，则为 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="T:System.Data.EntityKey">
      <summary>提供对作为实体类型实例的对象的持久引用。</summary>
    </member>
    <member name="M:System.Data.EntityKey.#ctor">
      <summary>初始化 <see cref="T:System.Data.EntityKey" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
      <summary>使用实体集名称和泛型 <see cref="T:System.Collections.Generic.KeyValuePair" /> 集合初始化 <see cref="T:System.Data.EntityKey" /> 类的新实例。</summary>
      <param name="qualifiedEntitySetName">一个 <see cref="T:System.String" />，它是由实体容器名称限定的实体集名称。</param>
      <param name="entityKeyValues">一个泛型 <see cref="T:System.Collections.Generic.KeyValuePair" /> 集合。 每个键/值对都具有一个属性名称作为键，该属性的值作为值。 对属于 <see cref="T:System.Data.EntityKey" /> 的一部分的每个属性都应该有一个键/值对。 键/值对的顺序并不重要，但是应包括每个键属性。 属性名称是不受实体类型名称或架构名称限定的简单名称。</param>
    </member>
    <member name="M:System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})">
      <summary>使用实体集名称和 <see cref="T:System.Data.EntityKeyMember" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合初始化 <see cref="T:System.Data.EntityKey" /> 类的新实例。</summary>
      <param name="qualifiedEntitySetName">一个 <see cref="T:System.String" />，它是由实体容器名称限定的实体集名称。</param>
      <param name="entityKeyValues">用来初始化键的 <see cref="T:System.Data.EntityKeyMember" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合。</param>
    </member>
    <member name="M:System.Data.EntityKey.#ctor(System.String,System.String,System.Object)">
      <summary>使用实体集名称和特定实体键对初始化 <see cref="T:System.Data.EntityKey" /> 类的新实例。</summary>
      <param name="qualifiedEntitySetName">一个 <see cref="T:System.String" />，它是由实体容器名称限定的实体集名称。</param>
      <param name="keyName">表示键名称的 <see cref="T:System.String" />。</param>
      <param name="keyValue">表示键值的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.Data.EntityKey.EntityContainerName">
      <summary>获取或设置实体容器的名称。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，表示 <see cref="T:System.Data.EntityKey" /> 所属实体的实体容器的名称。</returns>
    </member>
    <member name="P:System.Data.EntityKey.EntityKeyValues">
      <summary>获取或设置与此 <see cref="T:System.Data.EntityKey" /> 关联的键值。</summary>
      <returns>此 <see cref="T:System.Data.EntityKey" /> 的键值的一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="F:System.Data.EntityKey.EntityNotValidKey">
      <summary>一个简单的 <see cref="T:System.Data.EntityKey" />，标识由失败的 TREAT 运算产生的实体。</summary>
    </member>
    <member name="P:System.Data.EntityKey.EntitySetName">
      <summary>获取或设置实体集的名称。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，表示 <see cref="T:System.Data.EntityKey" /> 所属实体的实体集的名称。</returns>
    </member>
    <member name="M:System.Data.EntityKey.Equals(System.Data.EntityKey)">
      <summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.Data.EntityKey" /> 相等。</summary>
      <returns>如果此实例与 <paramref name="other" /> 具有相等的值，则为 true；否则为 false。</returns>
      <param name="other">要与此实例进行比较的 <see cref="T:System.Data.EntityKey" /> 对象。</param>
    </member>
    <member name="M:System.Data.EntityKey.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <returns>如果此实例与 <paramref name="obj" /> 具有相等的值，则为 true；否则为 false。</returns>
      <param name="obj">与该实例进行比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)">
      <summary>从给定的元数据工作区获取此实体键的实体集。</summary>
      <returns>实体键的 <see cref="T:System.Data.Metadata.Edm.EntitySet" />。</returns>
      <param name="metadataWorkspace">包含实体的元数据工作区。</param>
      <exception cref="T:System.ArgumentException">未能在指定的元数据工作区找到实体集。</exception>
    </member>
    <member name="M:System.Data.EntityKey.GetHashCode">
      <summary>用作当前 <see cref="T:System.Data.EntityKey" /> 对象的哈希函数。 <see cref="M:System.Data.EntityKey.GetHashCode" /> 适用于哈希算法和诸如哈希表之类的数据结构。</summary>
      <returns>当前 <see cref="T:System.Data.EntityKey" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.Data.EntityKey.IsTemporary">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.EntityKey" /> 是否是临时的。</summary>
      <returns>如果 <see cref="T:System.Data.EntityKey" /> 是临时的，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.Data.EntityKey.NoEntitySetKey">
      <summary>一个单一实例 <see cref="T:System.Data.EntityKey" />，由它标识只读实体。</summary>
    </member>
    <member name="M:System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>用于反序列化 <see cref="T:System.Data.EntityKey" /> 的帮助器方法。</summary>
      <param name="context">描述给定的序列化流的源和目标，并提供一个由调用方定义的附加上下文。</param>
    </member>
    <member name="M:System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
      <summary>用于反序列化 <see cref="T:System.Data.EntityKey" /> 的帮助器方法。</summary>
      <param name="context">描述给定的序列化流的源和目标，并提供一个由调用方定义的附加上下文。</param>
    </member>
    <member name="M:System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)">
      <summary>比较两个 <see cref="T:System.Data.EntityKey" /> 对象。</summary>
      <returns>如果 <paramref name="key1" /> 与 <paramref name="key2" /> 值相等，则为 true；否则为 false。</returns>
      <param name="key1">要比较的 <see cref="T:System.Data.EntityKey" />。</param>
      <param name="key2">要比较的 <see cref="T:System.Data.EntityKey" />。</param>
    </member>
    <member name="M:System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)">
      <summary>比较两个 <see cref="T:System.Data.EntityKey" /> 对象。</summary>
      <returns>如果 <paramref name="key1" /> 与 <paramref name="key2" /> 值不相等，则为 true；否则为 false。</returns>
      <param name="key1">要比较的 <see cref="T:System.Data.EntityKey" />。</param>
      <param name="key2">要比较的 <see cref="T:System.Data.EntityKey" />。</param>
    </member>
    <member name="T:System.Data.EntityKeyMember">
      <summary>表示作为 <see cref="T:System.Data.EntityKey" /> 的一部分的键名称和值对。</summary>
    </member>
    <member name="M:System.Data.EntityKeyMember.#ctor">
      <summary>初始化 <see cref="T:System.Data.EntityKeyMember" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.EntityKeyMember.#ctor(System.String,System.Object)">
      <summary>使用指定实体键对初始化 <see cref="T:System.Data.EntityKeyMember" /> 类的新实例。</summary>
      <param name="keyName">密钥的名称。</param>
      <param name="keyValue">键值。</param>
    </member>
    <member name="P:System.Data.EntityKeyMember.Key">
      <summary>获取或设置实体键的名称。</summary>
      <returns>密钥名称。</returns>
    </member>
    <member name="M:System.Data.EntityKeyMember.ToString">
      <summary>返回实体键的字符串表示形式。</summary>
      <returns>实体键的字符串表示形式。</returns>
    </member>
    <member name="P:System.Data.EntityKeyMember.Value">
      <summary>获取或设置实体键的值。</summary>
      <returns>键值。</returns>
    </member>
    <member name="T:System.Data.EntitySqlException">
      <summary>表示分析 Entity SQL 命令文本时出现的错误。 违反语法或语义规则时会引发此异常。</summary>
    </member>
    <member name="M:System.Data.EntitySqlException.#ctor">
      <summary>初始化 <see cref="T:System.Data.EntitySqlException" /> 的新实例。</summary>
    </member>
    <member name="M:System.Data.EntitySqlException.#ctor(System.String)">
      <summary>使用专用的错误消息初始化 <see cref="T:System.Data.EntitySqlException" /> 的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Data.EntitySqlException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.EntitySqlException" /> 类的新实例，该类使用指定的错误消息和对导致此异常的内部异常的引用。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常，或者，如果未指定任何内部异常，则为 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="P:System.Data.EntitySqlException.Column">
      <summary>获取发生错误的大致列号。</summary>
      <returns>一个整数，描述发生错误的列号。</returns>
    </member>
    <member name="P:System.Data.EntitySqlException.ErrorContext">
      <summary>获取发生错误的大致上下文（如果有）。</summary>
      <returns>一个字符串，描述发生错误的大致上下文（如果有）。</returns>
    </member>
    <member name="P:System.Data.EntitySqlException.ErrorDescription">
      <summary>获取错误说明。</summary>
      <returns>描述错误的字符串。</returns>
    </member>
    <member name="M:System.Data.EntitySqlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用有关异常的信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它存有有关所引发的异常的序列化对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含有关源或目标的上下文信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数是一个 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="P:System.Data.EntitySqlException.Line">
      <summary>获取发生错误的大致行号。</summary>
      <returns>一个整数，描述发生错误的行号。</returns>
    </member>
    <member name="T:System.Data.EntityState">
      <summary>实体对象的状态。</summary>
    </member>
    <member name="F:System.Data.EntityState.Added">
      <summary>对象为新对象，并且已添加到对象上下文，但尚未调用 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 方法。 在保存更改后，对象状态将更改为 <see cref="F:System.Data.EntityState.Unchanged" />。 状态为 <see cref="F:System.Data.EntityState.Added" /> 的对象在 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 中没有原始值。</summary>
    </member>
    <member name="F:System.Data.EntityState.Deleted">
      <summary>对象已从对象上下文中删除。 在保存更改后，对象状态将更改为 <see cref="F:System.Data.EntityState.Detached" />。</summary>
    </member>
    <member name="F:System.Data.EntityState.Detached">
      <summary>对象存在，但没有被跟踪。 在创建实体之后、但将其添加到对象上下文之前，该实体处于此状态。 通过调用 <see cref="M:System.Data.Objects.ObjectContext.Detach(System.Object)" /> 方法从上下文中移除实体后，或者使用 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /><see cref="T:System.Data.Objects.MergeOption" /> 加载实体后，该实体也会处于此状态。 没有 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 实例与状态为 <see cref="F:System.Data.EntityState.Detached" /> 的对象关联。</summary>
    </member>
    <member name="F:System.Data.EntityState.Modified">
      <summary>对象上的一个标量属性已更改，但尚未调用 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 方法。 在不带更改跟踪代理的 POCO 实体中，调用 <see cref="M:System.Data.Objects.ObjectContext.DetectChanges" /> 方法时，已修改属性的状态将更改为 <see cref="F:System.Data.EntityState.Modified" />。 在保存更改后，对象状态将更改为 <see cref="F:System.Data.EntityState.Unchanged" />。</summary>
    </member>
    <member name="F:System.Data.EntityState.Unchanged">
      <summary>自对象附加到上下文中后，或自上次调用 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 方法后，此对象尚未经过修改。</summary>
    </member>
    <member name="T:System.Data.IExtendedDataRecord">
      <summary>提供对 <see cref="T:System.Data.Common.DbDataReader" /> 的 <see cref="T:System.Data.Common.DbDataRecord" /> 的每一行内列值的访问。</summary>
    </member>
    <member name="P:System.Data.IExtendedDataRecord.DataRecordInfo">
      <summary>获取此 <see cref="T:System.Data.IExtendedDataRecord" /> 的 <see cref="T:System.Data.Common.DataRecordInfo" />。</summary>
      <returns>
        <see cref="T:System.Data.Common.DataRecordInfo" /> 对象。</returns>
    </member>
    <member name="M:System.Data.IExtendedDataRecord.GetDataReader(System.Int32)">
      <summary>以 <see cref="T:System.Data.Common.DbDataReader" /> 对象的形式返回嵌套的读取器。</summary>
      <returns>采用 <see cref="T:System.Data.Common.DbDataReader" /> 对象形式的嵌套读取器。</returns>
      <param name="i">列的序号。</param>
    </member>
    <member name="M:System.Data.IExtendedDataRecord.GetDataRecord(System.Int32)">
      <summary>使用指定的索引获取一个 <see cref="T:System.Data.Common.DbDataRecord" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataRecord" /> 对象。</returns>
      <param name="i">该行的索引。</param>
    </member>
    <member name="T:System.Data.InvalidCommandTreeException">
      <summary>一个可引发以指示命令目录树无效的异常。 当前，在 Entity Framework 中的任何位置都不会引发此异常。</summary>
    </member>
    <member name="M:System.Data.InvalidCommandTreeException.#ctor">
      <summary>使用默认消息初始化 <see cref="T:System.Data.InvalidCommandTreeException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.InvalidCommandTreeException.#ctor(System.String)">
      <summary>用指定消息初始化 <see cref="T:System.Data.InvalidCommandTreeException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
    </member>
    <member name="M:System.Data.InvalidCommandTreeException.#ctor(System.String,System.Exception)">
      <summary>使用指定的消息和内部异常初始化 <see cref="T:System.Data.InvalidCommandTreeException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="innerException">导致此 <see cref="T:System.Data.InvalidCommandTreeException" /> 的异常。</param>
    </member>
    <member name="T:System.Data.MappingException">
      <summary>映射相关服务请求失败时引发的异常。</summary>
    </member>
    <member name="M:System.Data.MappingException.#ctor">
      <summary>初始化 <see cref="T:System.Data.MappingException" /> 的新实例。</summary>
    </member>
    <member name="M:System.Data.MappingException.#ctor(System.String)">
      <summary>使用专用的错误消息初始化 <see cref="T:System.Data.MappingException" /> 的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Data.MappingException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对内部异常的引用初始化 <see cref="T:System.Data.MappingException" /> 的新实例。</summary>
      <param name="message">描述错误的消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="T:System.Data.MetadataException">
      <summary>当元数据相关服务请求失败时引发的异常。</summary>
    </member>
    <member name="M:System.Data.MetadataException.#ctor">
      <summary>使用默认消息初始化 <see cref="T:System.Data.MetadataException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.MetadataException.#ctor(System.String)">
      <summary>用指定消息初始化 <see cref="T:System.Data.MetadataException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
    </member>
    <member name="M:System.Data.MetadataException.#ctor(System.String,System.Exception)">
      <summary>使用指定的消息和内部异常初始化 <see cref="T:System.Data.MetadataException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="innerException">导致此 <see cref="T:System.Data.MetadataException" /> 的异常。</param>
    </member>
    <member name="T:System.Data.ObjectNotFoundException">
      <summary>对象不存在时引发的异常。</summary>
    </member>
    <member name="M:System.Data.ObjectNotFoundException.#ctor">
      <summary>初始化 <see cref="T:System.Data.ObjectNotFoundException" /> 的新实例。</summary>
    </member>
    <member name="M:System.Data.ObjectNotFoundException.#ctor(System.String)">
      <summary>使用专用的错误消息初始化 <see cref="T:System.Data.ObjectNotFoundException" /> 的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Data.ObjectNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对内部异常的引用初始化 <see cref="T:System.Data.ObjectNotFoundException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="T:System.Data.OptimisticConcurrencyException">
      <summary>发生开放式并发冲突时引发的异常。</summary>
    </member>
    <member name="M:System.Data.OptimisticConcurrencyException.#ctor">
      <summary>初始化 <see cref="T:System.Data.OptimisticConcurrencyException" /> 的新实例。</summary>
    </member>
    <member name="M:System.Data.OptimisticConcurrencyException.#ctor(System.String)">
      <summary>使用专用的错误消息初始化 <see cref="T:System.Data.OptimisticConcurrencyException" /> 的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Data.OptimisticConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对内部异常的引用初始化 <see cref="T:System.Data.OptimisticConcurrencyException" /> 的新实例。</summary>
      <param name="message">描述错误的消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Data.OptimisticConcurrencyException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Objects.ObjectStateEntry})">
      <summary>使用指定的错误消息、对内部异常的引用以及 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 对象的可枚举集合初始化 <see cref="T:System.Data.OptimisticConcurrencyException" /> 的新实例。</summary>
      <param name="message">描述错误的消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
      <param name="stateEntries">
        <see cref="T:System.Data.Objects.ObjectStateEntry" /> 对象的可枚举集合。</param>
    </member>
    <member name="T:System.Data.PropertyConstraintException">
      <summary>属性限制异常类。 注意此类有状态- 因此如果即使您更改其内部，它可能是重大更改。</summary>
    </member>
    <member name="M:System.Data.PropertyConstraintException.#ctor">
      <summary>使用默认消息初始化 <see cref="T:System.Data.PropertyConstraintException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.PropertyConstraintException.#ctor(System.String)">
      <summary>用提供的消息初始化 <see cref="T:System.Data.PropertyConstraintException" /> 类的新实例。</summary>
      <param name="message">本地化的错误消息。</param>
    </member>
    <member name="M:System.Data.PropertyConstraintException.#ctor(System.String,System.Exception)">
      <summary>使用提供的消息和内部异常来初始化 <see cref="T:System.Data.PropertyConstraintException" /> 类的新实例。</summary>
      <param name="message">本地化的错误消息。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="M:System.Data.PropertyConstraintException.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Data.PropertyConstraintException" /> 类的新实例。</summary>
      <param name="message">本地化的错误消息。</param>
      <param name="propertyName">属性的名称。</param>
    </member>
    <member name="M:System.Data.PropertyConstraintException.#ctor(System.String,System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.PropertyConstraintException" /> 类的新实例。</summary>
      <param name="message">本地化的错误消息。</param>
      <param name="propertyName">属性的名称。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="M:System.Data.PropertyConstraintException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用有关异常的信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它存有有关所引发的异常的序列化对象数据。</param>
      <param name="context">序列化上下文。</param>
    </member>
    <member name="P:System.Data.PropertyConstraintException.PropertyName">
      <summary>获取违反约束的属性值的名称。</summary>
      <returns>违反约束的属性的名称。</returns>
    </member>
    <member name="T:System.Data.ProviderIncompatibleException">
      <summary>基础数据提供程序与 Entity Framework 不兼容时引发的异常。</summary>
    </member>
    <member name="M:System.Data.ProviderIncompatibleException.#ctor">
      <summary>初始化 <see cref="T:System.Data.ProviderIncompatibleException" /> 的新实例。</summary>
    </member>
    <member name="M:System.Data.ProviderIncompatibleException.#ctor(System.String)">
      <summary>使用专用的错误消息初始化 <see cref="T:System.Data.ProviderIncompatibleException" /> 的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Data.ProviderIncompatibleException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Data.ProviderIncompatibleException" /> 的新实例。</summary>
      <param name="message">描述错误的消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="T:System.Data.UpdateException">
      <summary>对对象实例的修改无法保持到数据源时引发的异常。</summary>
    </member>
    <member name="M:System.Data.UpdateException.#ctor">
      <summary>初始化 <see cref="T:System.Data.UpdateException" /> 的新实例。</summary>
    </member>
    <member name="M:System.Data.UpdateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化数据初始化 <see cref="T:System.Data.UpdateException" /> 的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它存有有关所引发的异常的序列化对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Data.UpdateException.#ctor(System.String)">
      <summary>使用专用的错误消息初始化 <see cref="T:System.Data.UpdateException" /> 的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Data.UpdateException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.UpdateException" /> 类的新实例，该类使用指定的错误消息和对导致此异常的内部异常的引用。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Data.UpdateException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Objects.ObjectStateEntry})">
      <summary>初始化 <see cref="T:System.Data.UpdateException" /> 类的新实例，该类使用指定的错误消息、对内部异常的引用以及 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 对象的可枚举集合。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
      <param name="stateEntries">
        <see cref="T:System.Data.Objects.ObjectStateEntry" /> 对象的集合。</param>
    </member>
    <member name="P:System.Data.UpdateException.StateEntries">
      <summary>获取此 <see cref="T:System.Data.UpdateException" /> 的 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.Objects.ObjectStateEntry" /> 对象的集合，由单个实体和 0 个或 0 个以上的关系组成，或者由 0 个实体和 1 或多个关系组成。</returns>
    </member>
    <member name="T:System.Data.Common.DataRecordInfo">
      <summary>提供对 <see cref="T:System.Data.Common.DbDataRecord" /> 的结构类型相关信息以及列信息的访问。</summary>
    </member>
    <member name="M:System.Data.Common.DataRecordInfo.#ctor(System.Data.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Metadata.Edm.EdmMember})">
      <summary>使用数据字段的可枚举集合初始化一个特定类型的新 <see cref="T:System.Data.Common.DbDataRecord" /> 对象。</summary>
      <param name="metadata">此对象表示的类型的元数据，由 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 提供。</param>
      <param name="memberInfo">表示列信息的 <see cref="T:System.Data.Metadata.Edm.EdmMember" /> 对象的可枚举集合。</param>
    </member>
    <member name="P:System.Data.Common.DataRecordInfo.FieldMetadata">
      <summary>获取此 <see cref="P:System.Data.IExtendedDataRecord.DataRecordInfo" /> 对象的 <see cref="T:System.Data.Common.FieldMetadata" />。</summary>
      <returns>
        <see cref="T:System.Data.Common.FieldMetadata" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Common.DataRecordInfo.RecordType">
      <summary>获取此对象的类型信息作为 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 值。</returns>
    </member>
    <member name="T:System.Data.Common.DbCommandDefinition">
      <summary>定义一个可缓存的命令计划。</summary>
    </member>
    <member name="M:System.Data.Common.DbCommandDefinition.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbCommandDefinition" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbCommandDefinition.#ctor(System.Data.Common.DbCommand)">
      <summary>使用提供的 <see cref="T:System.Data.Common.DbCommand" /> 初始化 <see cref="T:System.Data.Common.DbCommandDefinition" /> 类的新实例。</summary>
      <param name="prototype">提供的 <see cref="T:System.Data.Common.DbCommand" />。</param>
    </member>
    <member name="M:System.Data.Common.DbCommandDefinition.CreateCommand">
      <summary>创建并返回一个可执行的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</summary>
      <returns>数据库的命令。</returns>
    </member>
    <member name="T:System.Data.Common.DbProviderManifest">
      <summary>所有 CLR 类型 types 元数据接口</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbProviderManifest" /> 类的新实例。</summary>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.ConceptualSchemaDefinition">
      <summary>为获取 ConceptualSchemaDefinitionVersion 而传递给 GetInformation 的值。</summary>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.ConceptualSchemaDefinitionVersion3">
      <summary>为获取 ConceptualSchemaDefinitionVersion3 而传递给 GetInformation 的值。</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.EscapeLikeArgument(System.String)">
      <summary>提供程序编写人员应重写此方法，以返回带有已转义的通配符和转义符的参数。 如果 SupportsEscapingLikeArgument 返回 true，则只使用此方法。</summary>
      <returns>带有已转义的通配符和转义符的参数。</returns>
      <param name="argument">要转义的参数。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetDbInformation(System.String)">
      <summary>在派生类中重写时，此方法返回特定于提供程序的信息。</summary>
      <returns>表示基础数据存储区目录的映射的 XmlReader 对象。</returns>
      <param name="informationType">要返回的信息的类型。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetEdmType(System.Data.Metadata.Edm.TypeUsage)">
      <summary>在派生类中重写时，此方法将指定的存储类型以及该类型的一组 Facet 映射到 EDM 类型。</summary>
      <returns>描述 EDM 类型以及该类型的一组 Facet的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 实例。</returns>
      <param name="storeType">TypeUsage 实例，它描述了要映射到 EDM 类型的存储类型以及该类型的一组 Facet。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetFacetDescriptions(System.Data.Metadata.Edm.EdmType)">
      <summary>返回特定类型的 FacetDescription 对象。</summary>
      <returns>用于指定的 EDM 类型的 FacetDescription 对象。</returns>
      <param name="edmType">要返回 Facet 描述的 EDM 类型。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetInformation(System.String)">
      <summary>获取特定于提供程序的信息。</summary>
      <returns>特定于提供程序的信息。</returns>
      <param name="informationType">要返回的信息的类型。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetStoreFunctions">
      <summary>在派生类中重写时，返回提供程序清单支持的 EDM 函数的集合。</summary>
      <returns>EDM 函数的集合。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetStoreType(System.Data.Metadata.Edm.TypeUsage)">
      <summary>在派生类中重写时，此方法将指定的 EDM 类型以及该类型的一组 Facet 映射到存储类型。</summary>
      <returns>TypeUsage 实例，它描述了存储类型以及该类型的一组 Facet。</returns>
      <param name="edmType">TypeUsage 实例，它描述了要映射到存储类型的EDM 类型以及该类 Facet。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetStoreTypes">
      <summary>在派生类中重写时，返回数据源支持的一组基元类型。</summary>
      <returns>数据源支持的一组类型。</returns>
    </member>
    <member name="P:System.Data.Common.DbProviderManifest.NamespaceName">
      <summary>获取此提供程序清单使用的命名空间。</summary>
      <returns>此提供程序清单使用的命名空间。</returns>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.StoreSchemaDefinition">
      <summary>为获取 StoreSchemaDefinitionVersion 而传递给 GetInformation 的值。</summary>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.StoreSchemaDefinitionVersion3">
      <summary>为获取 StoreSchemaDefinitionVersion3 而传递给 GetInformation 的值。</summary>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.StoreSchemaMapping">
      <summary>为获取存储架构映射信息而传递给 GetInformation 的值。</summary>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.StoreSchemaMappingVersion3">
      <summary>为获取 StoreSchemaMappingVersion3 而传递给 GetInformation 的值。</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.SupportsEscapingLikeArgument(System.Char@)">
      <summary>指示提供程序是否支持在 Like 表达式中使用转义字符串作为模式。</summary>
      <returns>如果此提供程序支持在 Like 表达式中使用转义字符串作为模式，则为 True；否则，为 false。</returns>
      <param name="escapeCharacter">如果提供程序支持转义，则为要用作转义符的字符。</param>
    </member>
    <member name="T:System.Data.Common.DbProviderServices">
      <summary>用于生成命令定义的工厂；用该对象的类型作为程序提供工厂中的 IServiceProvider.GetService 方法参数；</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbProviderServices" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateCommandDefinition(System.Data.Common.CommandTrees.DbCommandTree)">
      <summary>从命令树创建命令定义。</summary>
      <returns>已创建的命令定义。</returns>
      <param name="commandTree">命令树。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateCommandDefinition(System.Data.Common.DbCommand)">
      <summary>创建使用指定命令的命令定义。</summary>
      <returns>使用指定命令的已创建命令定义。</returns>
      <param name="prototype">用于创建命令定义的命令。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateCommandDefinition(System.Data.Common.DbProviderManifest,System.Data.Common.CommandTrees.DbCommandTree)">
      <summary>从指定的程序清单和命令树创建命令定义。</summary>
      <returns>已创建的命令定义。</returns>
      <param name="providerManifest">该清单</param>
      <param name="commandTree">命令树。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>创建由连接指示的数据库和架构对象。</summary>
      <param name="connection">需要创建到不存在的数据库的连接并用由 storeItemCollection 参数指示的存储对象进行填充。</param>
      <param name="commandTimeout">创建数据库所需的任何命令的执行超时。</param>
      <param name="storeItemCollection">创建脚本所应基于的所有存储项的集合。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateDatabaseScript(System.String,System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>基于 StoreItemCollection 参数的内容并针对与提供程序清单标记相对应的数据库版本生成数据定义语言（创建架构对象（表、主键、外键）的 DDL 脚本）。</summary>
      <returns>基于 StoreItemCollection 参数的内容并针对与提供程序清单标记相对应的数据库版本创建架构对象的 DDL 脚本。</returns>
      <param name="providerManifestToken">标识目标版本的提供程序清单标记。</param>
      <param name="storeItemCollection">数据库的结构。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateDbCommandDefinition(System.Data.Common.DbProviderManifest,System.Data.Common.CommandTrees.DbCommandTree)">
      <summary>为指定的提供程序清单和命令目录树创建命令定义对象。</summary>
      <returns>可执行的命令定义对象。</returns>
      <param name="providerManifest">以前从存储提供程序检索到的提供程序清单。</param>
      <param name="commandTree">语句的命令目录树。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>返回一个值，该值指示服务器上是否存在给定数据库以及是否创建了 storeItemCollection 中包含的架构对象。</summary>
      <returns>如果提供程序仅基于连接就可推导数据库，则为 true。</returns>
      <param name="connection">到某个数据库的连接，该数据库是否存在可通过此方法进行验证。</param>
      <param name="commandTimeout">确定数据库是否存在所需的任何命令的执行超时。</param>
      <param name="storeItemCollection">通过此方法确定其是否存在的数据库中包含的所有存储项的集合。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DbCreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>创建一个由连接指示的数据库并且基于 StoreItemCollection 的内容创建架构对象（表、主键、外键）。</summary>
      <param name="connection">需要创建到不存在的数据库的连接并用由 storeItemCollection 参数指示的存储对象进行填充。</param>
      <param name="commandTimeout">创建数据库所需的任何命令的执行超时。</param>
      <param name="storeItemCollection">创建脚本所应基于的所有存储项的集合。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DbCreateDatabaseScript(System.String,System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>基于 StoreItemCollection 参数的内容并针对与提供程序清单标记相对应的数据库版本生成数据定义语言（创建架构对象（表、主键、外键）的 DDL 脚本）。</summary>
      <returns>基于 StoreItemCollection 参数的内容并针对与提供程序清单标记相对应的数据库版本创建架构对象的 DDL 脚本。</returns>
      <param name="providerManifestToken">标识目标版本的提供程序清单标记。</param>
      <param name="storeItemCollection">数据库的结构。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>返回一个值，该值指示服务器上是否存在给定数据库以及是否创建了 storeItemCollection 中包含的架构对象。</summary>
      <returns>如果数据库由连接指示并且存在 storeItemCollection 参数，则为 True，否则为 false。</returns>
      <param name="connection">到某个数据库的连接，该数据库是否存在可通过此方法进行验证。</param>
      <param name="commandTimeout">确定数据库是否存在所需的任何命令的执行超时。</param>
      <param name="storeItemCollection">通过此方法确定其是否存在的数据库的结构。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DbDeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>删除数据库的存储项集合中指定的所有存储对象以及数据库本身。</summary>
      <param name="connection">到某个需要删除的现有数据库的连接。</param>
      <param name="commandTimeout">删除数据库所需的任何命令的执行超时。</param>
      <param name="storeItemCollection">要删除的数据库的结构。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DbGetSpatialServices(System.String)">
      <summary>为 <see cref="T:System.Data.Common.DbProviderServices" /> 获取空间服务。</summary>
      <returns>空间服务。</returns>
      <param name="manifestToken">与提供程序清单关联的标记信息。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>删除数据库的存储项集合中指定的所有存储对象以及数据库本身。</summary>
      <param name="connection">到某个需要删除的现有数据库的连接。</param>
      <param name="commandTimeout">删除数据库所需的任何命令的执行超时。</param>
      <param name="storeItemCollection">要删除的数据库的结构。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetDbProviderManifest(System.String)">
      <summary>在派生类中重写时，返回一个派生自 DbProviderManifest 的类的实例。</summary>
      <returns>表示提供程序清单的 DbProviderManifest 对象。</returns>
      <param name="manifestToken">与提供程序清单关联的标记信息。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetDbProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>返回给定连接的提供程序清单标记。</summary>
      <returns>指定连接的提供程序清单标记。</returns>
      <param name="connection">到提供程序的连接。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetDbSpatialDataReader(System.Data.Common.DbDataReader,System.String)">
      <summary>为 <see cref="T:System.Data.Common.DbProviderServices" /> 获取空间数据读取器。</summary>
      <returns>空间数据读取器。</returns>
      <param name="fromReader">空间数据所来自的读取器。</param>
      <param name="manifestToken">与提供程序清单关联的标记信息。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetProviderFactory(System.Data.Common.DbConnection)">
      <summary>检索基于指定 DbConnection 的 DbProviderFactory。</summary>
      <returns>要检索的 DbProviderFactory。</returns>
      <param name="connection">要使用的连接。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetProviderManifest(System.String)">
      <summary>使用指定的版本信息返回提供程序清单。</summary>
      <returns>使用指定版本信息的提供程序清单。</returns>
      <param name="manifestToken">与提供程序清单关联的标记信息。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>返回提供程序清单标记。</summary>
      <returns>提供程序清单标记。</returns>
      <param name="connection">到提供程序的连接。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetProviderServices(System.Data.Common.DbConnection)">
      <summary>返回给定连接的提供程序。</summary>
      <returns>基于指定连接实例化 <see cref="T:System.Data.Common.DbProviderServices" />。</returns>
      <param name="connection">到提供程序的连接。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetSpatialDataReader(System.Data.Common.DbDataReader,System.String)">
      <summary>为 <see cref="T:System.Data.Common.DbProviderServices" /> 获取空间数据读取器。</summary>
      <returns>空间数据读取器。</returns>
      <param name="fromReader">空间数据所来自的读取器。</param>
      <param name="manifestToken">与提供程序清单关联的标记信息。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetSpatialServices(System.String)">
      <summary>为 <see cref="T:System.Data.Common.DbProviderServices" /> 获取空间服务。</summary>
      <returns>空间服务。</returns>
      <param name="manifestToken">与提供程序清单关联的标记信息。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.SetDbParameterValue(System.Data.Common.DbParameter,System.Data.Metadata.Edm.TypeUsage,System.Object)">
      <summary>设置 <see cref="T:System.Data.Common.DbProviderServices" /> 的参数值。</summary>
      <param name="parameter">参数。</param>
      <param name="parameterType">参数的类型。</param>
      <param name="value">参数值。</param>
    </member>
    <member name="T:System.Data.Common.DbXmlEnabledProviderManifest">
      <summary>表示基于 XML 定义实现 <see cref="T:System.Data.Common.DbProviderManifest" /> 的基类。 您可以使用 <see cref="T:System.Data.Common.DbXmlEnabledProviderManifest" /> 类在运行时获取特定于提供程序的信息。</summary>
    </member>
    <member name="M:System.Data.Common.DbXmlEnabledProviderManifest.#ctor(System.Xml.XmlReader)">
      <summary>初始化 <see cref="T:System.Data.Common.DbXmlEnabledProviderManifest" /> 类的新实例。</summary>
      <param name="reader">一个 <see cref="T:System.Xml.XmlReader" /> 对象，该对象提供对提供程序清单文件中的 XML 数据的访问。</param>
    </member>
    <member name="M:System.Data.Common.DbXmlEnabledProviderManifest.GetFacetDescriptions(System.Data.Metadata.Edm.EdmType)">
      <summary>返回指定的实体数据模型 (EDM) 类型的 Facet 说明列表。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含指定的 EDM 类型的 Facet 说明列表。</returns>
      <param name="type">要检索 Facet 说明的 <see cref="T:System.Data.Metadata.Edm.EdmType" />。</param>
    </member>
    <member name="M:System.Data.Common.DbXmlEnabledProviderManifest.GetStoreFunctions">
      <summary>返回提供程序支持的函数的列表。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含提供程序支持的函数的列表。</returns>
    </member>
    <member name="M:System.Data.Common.DbXmlEnabledProviderManifest.GetStoreTypes">
      <summary>返回存储提供程序支持的基元类型的列表。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含存储提供程序支持的基元类型的列表。</returns>
    </member>
    <member name="P:System.Data.Common.DbXmlEnabledProviderManifest.NamespaceName">
      <summary>获取此提供程序清单支持的命名空间名称。</summary>
      <returns>此提供程序清单支持的命名空间名称。</returns>
    </member>
    <member name="P:System.Data.Common.DbXmlEnabledProviderManifest.StoreTypeNameToEdmPrimitiveType">
      <summary>获取指定的存储类型名称的最佳映射等效实体数据模型 (EDM) 类型。</summary>
      <returns>指定的存储类型名称的最佳映射等效 EDM 类型。</returns>
    </member>
    <member name="P:System.Data.Common.DbXmlEnabledProviderManifest.StoreTypeNameToStorePrimitiveType">
      <summary>获取指定的存储类型名称的最佳映射等效存储基元类型。</summary>
      <returns>指定的存储类型名称的最佳映射等效存储基元类型。</returns>
    </member>
    <member name="T:System.Data.Common.EntityRecordInfo">
      <summary>提供对实体元数据的访问。</summary>
    </member>
    <member name="M:System.Data.Common.EntityRecordInfo.#ctor(System.Data.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Metadata.Edm.EdmMember},System.Data.EntityKey,System.Data.Metadata.Edm.EntitySet)">
      <summary>使用数据字段的可枚举集合、特定键和实体集信息初始化新的 <see cref="T:System.Data.Common.EntityRecordInfo" /> 对象。</summary>
      <param name="metadata">实体的 <see cref="T:System.Data.Metadata.Edm.EntityType" />，由该 <see cref="T:System.Data.Common.EntityRecordInfo" /> 对象描述的 <see cref="T:System.Data.Common.DbDataRecord" /> 表示。</param>
      <param name="memberInfo">表示列信息的 <see cref="T:System.Data.Metadata.Edm.EdmMember" /> 对象的可枚举集合。</param>
      <param name="entityKey">实体的键 。</param>
      <param name="entitySet">该实体所属的实体集。</param>
    </member>
    <member name="P:System.Data.Common.EntityRecordInfo.EntityKey">
      <summary>获取实体的 <see cref="T:System.Data.EntityKey" />。</summary>
      <returns>实体的键 。</returns>
    </member>
    <member name="T:System.Data.Common.FieldMetadata">
      <summary>提供对 <see cref="T:System.Data.Common.DataRecordInfo" /> 对象的字段元数据的访问。</summary>
    </member>
    <member name="M:System.Data.Common.FieldMetadata.#ctor(System.Int32,System.Data.Metadata.Edm.EdmMember)">
      <summary>使用指定的序数值和字段类型初始化新的 <see cref="T:System.Data.Common.FieldMetadata" /> 对象。</summary>
      <param name="ordinal">指定元数据位置的整数。</param>
      <param name="fieldType">字段类型。</param>
    </member>
    <member name="P:System.Data.Common.FieldMetadata.FieldType">
      <summary>获取此 <see cref="T:System.Data.Common.FieldMetadata" /> 对象的字段类型。</summary>
      <returns>此 <see cref="T:System.Data.Common.FieldMetadata" /> 对象的字段类型。</returns>
    </member>
    <member name="P:System.Data.Common.FieldMetadata.Ordinal">
      <summary>获取此 <see cref="T:System.Data.Common.FieldMetadata" /> 对象的序数。</summary>
      <returns>表示序数值的整数。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbAggregate">
      <summary>实现 GroupBy 子句中的聚合所需的基本功能。</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbAggregate.Arguments">
      <summary>获取定义此 <see cref="T:System.Data.Common.CommandTrees.DbAggregate" /> 的参数的表达式列表。</summary>
      <returns>定义此 <see cref="T:System.Data.Common.CommandTrees.DbAggregate" /> 的参数的表达式列表。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbAggregate.ResultType">
      <summary>获取此 <see cref="T:System.Data.Common.CommandTrees.DbAggregate" /> 的结果类型。</summary>
      <returns>此 <see cref="T:System.Data.Common.CommandTrees.DbAggregate" /> 的结果类型。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbAndExpression">
      <summary>表示两个 Boolean 参数的逻辑“与”。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbAndExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbAndExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbApplyExpression">
      <summary>表示应用操作，应用操作对指定输入集中的每个元素调用指定函数。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbApplyExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbApplyExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbApplyExpression.Apply">
      <summary>获取 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />，该 DbExpressionBinding 指定对输入集中的每个元素所调用的函数。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />，它指定对输入集中的每个元素所调用的函数。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbApplyExpression.Input">
      <summary>获取指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。</summary>
      <returns>指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbArithmeticExpression">
      <summary>表示应用于数值参数的算术运算。 加、减、乘、除、取模和取负是算术运算。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbArithmeticExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbArithmeticExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbArithmeticExpression.Arguments">
      <summary>获取用于定义当前参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 元素列表。</summary>
      <returns>固定大小的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 元素列表。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbBinaryExpression">
      <summary>实现接受两个表达式操作数的表达式所需的基本功能。</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbBinaryExpression.Left">
      <summary>获取或设置定义左侧参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</summary>
      <returns>定义左侧参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</returns>
      <exception cref="T:System.ArgumentNullException">表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">表达式与 <see cref="T:System.Data.Common.CommandTrees.DbBinaryExpression" /> 的命令目录树没有关联， 或者其结果类型不等于或不可提升为左侧参数所需的类型。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbBinaryExpression.Right">
      <summary>获取或设置定义右侧参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</summary>
      <returns>定义右侧参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</returns>
      <exception cref="T:System.ArgumentNullException">表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">表达式与 <see cref="T:System.Data.Common.CommandTrees.DbBinaryExpression" /> 的命令目录树没有关联， 或者其结果类型不等于或不可提升为右侧参数所需的类型。</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbCaseExpression">
      <summary>表示 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" /> 的 When、Then 和 Else 子句。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCaseExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCaseExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor." /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbCaseExpression.Else">
      <summary>获取或设置此 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" /> 的 Else 子句。</summary>
      <returns>此 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" /> 的 Else 子句。</returns>
      <exception cref="T:System.ArgumentNullException">表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">表达式与 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" /> 的命令目录树没有关联， 或者其结果类型不等于或不可提升为 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" /> 的结果类型。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbCaseExpression.Then">
      <summary>获取此 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" /> 的 Then 子句。</summary>
      <returns>此 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" /> 的 Then 子句。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbCaseExpression.When">
      <summary>获取此 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" /> 的 When 子句。</summary>
      <returns>此 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" /> 的 When 子句。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbCastExpression">
      <summary>表示将单个参数转换为指定类型的类型转换。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCastExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCastExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor." /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbCommandTree">
      <summary>一个不可变的类，用于实现 Query、Insert、Update、Delete 和函数调用命令目录树类型的基本功能。</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbCommandTree.Parameters">
      <summary>获取可在此 <see cref="T:System.Data.Common.CommandTrees.DbCommandTree" /> 中引用的每个参数的名称和相应类型。</summary>
      <returns>可在此 <see cref="T:System.Data.Common.CommandTrees.DbCommandTree" /> 中引用的每个参数的名称和相应类型。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbComparisonExpression">
      <summary>表示应用于两个参数的比较操作。 等于、大于、大于等于、小于、小于等于和不等于是比较操作。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbComparisonExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbComparisonExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor." /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbConstantExpression">
      <summary>表示不同种类的常量（文本）。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbConstantExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbConstantExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor." /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbConstantExpression.Value">
      <summary>获取常量值。</summary>
      <returns>常量值。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbCrossJoinExpression">
      <summary>表示给定集合参数之间的无条件联接操作。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCrossJoinExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCrossJoinExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor." /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbCrossJoinExpression.Inputs">
      <summary>获取 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> 列表，该列表提供可联接的输入集。</summary>
      <returns>提供可联接的输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> 列表。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbDeleteCommandTree">
      <summary>表示以命令目录树表示的单行删除操作。 此类不能被继承。</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbDeleteCommandTree.Predicate">
      <summary>获取一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，该 DbExpression 指定的谓词用于确定应删除目标集合的哪些成员。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，它指定的谓词用于确定应删除目标集合的哪些成员。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbDerefExpression">
      <summary>表示基于指定的引用检索实体的表达式。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbDerefExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbDerefExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor." /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbDistinctExpression">
      <summary>从指定集参数中移除重复元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbDistinctExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbDistinctExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor." /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbElementExpression">
      <summary>表示将指定集参数转换为单一实例的转换。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbElementExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbElementExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor." /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbEntityRefExpression">
      <summary>表示从基础实体实例提取引用的表达式。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbEntityRefExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbEntityRefExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor." /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExceptExpression">
      <summary>表示左操作数和右操作数之间的减集操作。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExceptExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExceptExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor." /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExpression">
      <summary>表示所有表达式的基类型。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的结果的类型。</returns>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <typeparam name="TResultType">visitor 生成的结果类型。</typeparam>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否等于当前的 DbExpression 实例。</summary>
      <returns>如果指定的 <see cref="T:System.Object" /> 结构等于当前的 DbExpression 实例，则为 True；否则为 false。</returns>
      <param name="obj">要与当前的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 比较的对象。</param>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpression.ExpressionKind">
      <summary>获取表达式的类型，该类型指示此表达式的操作。</summary>
      <returns>表达式的类型，该类型指示此表达式的操作。</returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromBinary(System.Byte[])">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的二进制值，可以为 null</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的二进制值。</returns>
      <param name="value">返回的表达式所基于的二进制值。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromBoolean(System.Nullable{System.Boolean})">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的布尔值（可以为 null）。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的布尔值。</returns>
      <param name="value">返回的表达式所基于的布尔值。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromByte(System.Nullable{System.Byte})">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的字节值（可以为 null）。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的字节值。</returns>
      <param name="value">返回的表达式应基于字节值。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromDateTime(System.Nullable{System.DateTime})">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的（可以为 null 的） <see cref="T:System.DateTime" /> 值。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的 DateTime 值。</returns>
      <param name="value">返回的表达式所基于的 DateTime 值。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromDateTimeOffset(System.Nullable{System.DateTimeOffset})">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的（可以为 null 的） <see cref="T:System.DateTimeOffset" /> 值。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的 DateTimeOffset 值。</returns>
      <param name="value">返回的表达式应基于 DateTimeOffset 值。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromDecimal(System.Nullable{System.Decimal})">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的小数值（可以为 null）。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的小数值。</returns>
      <param name="value">返回的表达式所基于的十进制值。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromDouble(System.Nullable{System.Double})">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的双精度值（可以为 null）。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的双精度值。</returns>
      <param name="value">返回的表达式所基于的双精度值。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromGeography(System.Data.Spatial.DbGeography)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的 <see cref="T:System.Data.Spatial.DbGeography" /> 值，可以为 null。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的 DbGeography 值。</returns>
      <param name="value">返回的表达式应基于 DbGeography 值。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromGeometry(System.Data.Spatial.DbGeometry)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，可以为 null。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的 DbGeometry 值。</returns>
      <param name="value">返回的表达式应基于 DbGeometry 值。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromGuid(System.Nullable{System.Guid})">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的（可以为 null 的） <see cref="T:System.Guid" /> 值。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的 Guid 值。</returns>
      <param name="value">返回的表达式应基于 Guid 值。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromInt16(System.Nullable{System.Int16})">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的 Int16 值（可以为 null）。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的 Int16 值。</returns>
      <param name="value">返回的表达式所基于的 Int16 值。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromInt32(System.Nullable{System.Int32})">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的 Int32 值（可以为 null）。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的 Int32 值。</returns>
      <param name="value">返回的表达式所基于的 Int32 值。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromInt64(System.Nullable{System.Int64})">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的 Int64 值（可以为 null）。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的 Int64 值。</returns>
      <param name="value">返回的表达式所基于的 Int64 值。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromSingle(System.Nullable{System.Single})">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的单精度值（可以为 null）。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的 Single 值。</returns>
      <param name="value">返回的表达式所基于的“单个”值。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromString(System.String)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的字符串值。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示指定的字符串值。</returns>
      <param name="value">返回的表达式所基于的字符串值。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.GetHashCode">
      <summary>用作类型的哈希函数。</summary>
      <returns>返回当前表达式的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Byte[])~System.Data.Common.CommandTrees.DbExpression">
      <summary>将一个 8 位无符号整数数组转换成 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /></summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示转换后的 8 位无符号整数数组。</returns>
      <param name="value">一个 8 位无符号整数数组。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Data.Spatial.DbGeography)~System.Data.Common.CommandTrees.DbExpression">
      <summary>将一个 DbGeography 对象转换成 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</summary>
      <returns>表示转换后的 DbGeography 对象的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">DbGeography 对象。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Data.Spatial.DbGeometry)~System.Data.Common.CommandTrees.DbExpression">
      <summary>将一个 DbGeometry 对象转换成 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</summary>
      <returns>表示转换后的 DbGeography 对象的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">DbGeometry 对象。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Boolean})~System.Data.Common.CommandTrees.DbExpression">
      <summary>将一个可以为 null 的布尔对象转换为 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</summary>
      <returns>表示转换后的 nullable Boolean 对象的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">可以为 null 的 Boolean 对象。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Byte})~System.Data.Common.CommandTrees.DbExpression">
      <summary>将一个可以为 null 的 8 位无符号整数转换成 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</summary>
      <returns>表示转换后的 8 位无符号整数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">可为 null 的 8 位无符号整数。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.DateTime})~System.Data.Common.CommandTrees.DbExpression">
      <summary>将一个可以为 null <see cref="T:System.DateTime" /> 对象转换成 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示 <see cref="T:System.DateTime" /> 对象。</returns>
      <param name="value">可为 null 的 <see cref="T:System.DateTime" /> 对象。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.DateTimeOffset})~System.Data.Common.CommandTrees.DbExpression">
      <summary>将一个可以为 null <see cref="T:System.DateTimeOffset" /> 对象转换成 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示可为 null 的 <see cref="T:System.DateTime" /> 对象。</returns>
      <param name="value">可为 null 的 <see cref="T:System.DateTime" /> 对象。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Decimal})~System.Data.Common.CommandTrees.DbExpression">
      <summary>将一个可以为 null <see cref="T:System.Decimal" /> 对象转换成 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示可为 null 的 <see cref="T:System.Decimal" /> 对象。</returns>
      <param name="value">可为 null 的 <see cref="T:System.Decimal" /> 对象。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Double})~System.Data.Common.CommandTrees.DbExpression">
      <summary>将一个可以为 null <see cref="T:System.Double" /> 对象转换成 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示可为 null 的 <see cref="T:System.Double" /> 对象。</returns>
      <param name="value">可为 null 的 <see cref="T:System.Double" /> 对象。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Guid})~System.Data.Common.CommandTrees.DbExpression">
      <summary>将一个可以为 null <see cref="T:System.Guid" /> 对象转换成 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示可为 null 的 <see cref="T:System.Guid" /> 对象。</returns>
      <param name="value">可为 null 的 <see cref="T:System.Guid" /> 对象。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int16})~System.Data.Common.CommandTrees.DbExpression">
      <summary>将一个可以为 null 的 16 位无符号整数转换成 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示可为 null 的 16 位无符号整数的 。</returns>
      <param name="value">可为 null 的 16 位无符号整数。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int32})~System.Data.Common.CommandTrees.DbExpression">
      <summary>将一个可以为 null 的 32 位无符号整数转换成 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示可为 null 的 32 位无符号整数的 。</returns>
      <param name="value">可为 null 的 32 位无符号整数。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int64})~System.Data.Common.CommandTrees.DbExpression">
      <summary>将一个可以为 null 的 64 位无符号整数转换成 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示可为 null 的 64 位无符号整数的 。</returns>
      <param name="value">可为 null 的 64 位无符号整数。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Single})~System.Data.Common.CommandTrees.DbExpression">
      <summary>将一个可以为 null 的单精度浮点数字转换成 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</summary>
      <returns>一个表示单精度浮点数字的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">单精度浮点数。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.String)~System.Data.Common.CommandTrees.DbExpression">
      <summary>转换 Unicode 字符的有序集合到 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 表示 Unicode 字符的有序集合。</returns>
      <param name="value">Unicode 字符的有序集合。</param>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpression.ResultType">
      <summary>获取表达式的结果类型的类型元数据。</summary>
      <returns>表达式的结果类型的类型元数据。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExpressionBinding">
      <summary>表示 <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" />、<see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" /> 和 <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" /> 等关系表达式的输入集。 此类不能被继承。</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpressionBinding.Expression">
      <summary>获取或设置定义输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</summary>
      <returns>定义输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</returns>
      <exception cref="T:System.ArgumentNullException">表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">表达式与绑定的命令目录树没有关联，或者其结果类型不等于或不可提升为当前属性值的结果类型。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpressionBinding.Variable">
      <summary>获取引用元素变量的 <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" />。</summary>
      <returns>变量引用。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpressionBinding.VariableName">
      <summary>获取分配给元素变量的名称。</summary>
      <returns>分配给元素变量的名称。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpressionBinding.VariableType">
      <summary>获取元素变量的类型元数据。</summary>
      <returns>元素变量的类型元数据。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExpressionKind">
      <summary>包含一些值，每个表达式类都使用这些值来指明它所表示的操作的值。 检索 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 的 <see cref="P:System.Data.Common.CommandTrees.DbExpression.ExpressionKind" /> 属性可以确定该表达式所表示的操作。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.All">
      <summary>true-for-all 表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.And">
      <summary>逻辑“与”表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Any">
      <summary>true-for-any 表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Case">
      <summary>条件 case 语句表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Cast">
      <summary>多态类型强制转换表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Constant">
      <summary>常量值表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.CrossApply">
      <summary>交叉应用表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.CrossJoin">
      <summary>交叉联接表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Deref">
      <summary>取消引用表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Distinct">
      <summary>去除重复项表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Divide">
      <summary>除法表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Element">
      <summary>集到单一实例转换表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.EntityRef">
      <summary>实体引用值检索表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Equals">
      <summary>相等表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Except">
      <summary>减集表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Filter">
      <summary>限制表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.FullOuterJoin">
      <summary>完全外部联接表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Function">
      <summary>独立函数表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.GreaterThan">
      <summary>大于表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.GreaterThanOrEquals">
      <summary>大于等于表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.GroupBy">
      <summary>分组表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.InnerJoin">
      <summary>内部联接表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Intersect">
      <summary>交集表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.IsEmpty">
      <summary>空集确定表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.IsNull">
      <summary>Null 确定表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.IsOf">
      <summary>类型比较（指定的类型或子类型）表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.IsOfOnly">
      <summary>类型比较（仅指定的类型）表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Lambda">
      <summary>Lambda 函数表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.LeftOuterJoin">
      <summary>左外部联接表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.LessThan">
      <summary>小于表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.LessThanOrEquals">
      <summary>小于等于表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Like">
      <summary>字符串比较表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Limit">
      <summary>结果计数限制 (TOP n)。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Minus">
      <summary>减法表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Modulo">
      <summary>取模表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Multiply">
      <summary>乘法表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.NewInstance">
      <summary>实例、行和集构造表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Not">
      <summary>逻辑“非”表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.NotEquals">
      <summary>不等表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Null">
      <summary>Null 表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.OfType">
      <summary>按类型（或子类型）的集成员表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.OfTypeOnly">
      <summary>按确切类型的集成员表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Or">
      <summary>逻辑“或”表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.OuterApply">
      <summary>外部应用表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.ParameterReference">
      <summary>参数引用表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Plus">
      <summary>加法表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Project">
      <summary>投影表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Property">
      <summary>静态属性或实例属性检索表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Ref">
      <summary>引用表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.RefKey">
      <summary>引用键值检索表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.RelationshipNavigation">
      <summary>关系（组合或关联）导航表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Scan">
      <summary>实体集或关系集扫描表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Skip">
      <summary>跳过有序集合的元素。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Sort">
      <summary>排序表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Treat">
      <summary>类型转换表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.UnaryMinus">
      <summary>取负表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.UnionAll">
      <summary>并集（带重复项）表达式。</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.VariableReference">
      <summary>变量引用表达式。</summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExpressionVisitor">
      <summary>定义不返回结果值的访问者应实现的基本功能。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbAndExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbAndExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbAndExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbApplyExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbArithmeticExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCaseExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCastExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbCastExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbCastExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbComparisonExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbConstantExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbCrossJoinExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbCrossJoinExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbDerefExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbDerefExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbDerefExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbDistinctExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbDistinctExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbDistinctExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbElementExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbElementExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbElementExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbEntityRefExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbEntityRefExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbEntityRefExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbExceptExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbExceptExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbExceptExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbExpression)">
      <summary>在派生类中重写时，处理任何类型无法识别的表达式。</summary>
      <param name="expression">要处理的表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbFilterExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbFunctionExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbGroupByExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIntersectExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbIntersectExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbIntersectExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsNullExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbIsNullExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbIsNullExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsOfExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbIsOfExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbIsOfExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbJoinExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLambdaExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbLambdaExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbLambdaExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLikeExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLimitExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNotExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbNotExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbNotExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNullExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbNullExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbNullExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbOfTypeExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbOfTypeExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbOfTypeExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbOrExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbOrExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbOrExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbProjectExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbPropertyExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbQuantifierExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRefExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRefKeyExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbRefKeyExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbRefKeyExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbScanExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbScanExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbScanExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbSkipExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbSortExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbTreatExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbTreatExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbTreatExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbUnionAllExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbUnionAllExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbUnionAllExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" /> 的访问者模式。</summary>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" />。</param>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExpressionVisitor`1">
      <summary>定义返回特定类型结果值的访问者应实现的基本功能。</summary>
      <typeparam name="TResultType">visitor 生成的结果的类型。</typeparam>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbAndExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbAndExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbAndExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbApplyExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbArithmeticExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbCaseExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbCastExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbCastExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbCastExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbComparisonExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.Db ComparisonExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbConstantExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbCrossJoinExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbCrossJoinExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbDerefExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbDerefExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbDerefExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbDistinctExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbDistinctExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbDistinctExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbElementExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbElementExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbElementExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbEntityRefExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbEntityRefExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbEntityRefExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbExceptExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbExceptExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbExceptExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbExpression)">
      <summary>在派生类中重写时，处理任何类型无法识别的表达式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbFilterExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbFunctionExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbGroupByExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbIntersectExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbIntersectExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbIntersectExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbIsNullExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbIsNullExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbIsNullExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbIsOfExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbIsOfExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbIsOfExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbJoinExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbLambdaExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbLambdaExpression" /> 的访问者模式方法。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbLambdaExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbLikeExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbLimitExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbNotExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbNotExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbNotExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbNullExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbNullExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbNullExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbOfTypeExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbOfTypeExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbOfTypeExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbOrExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbOrExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbOrExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbProjectExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbPropertyExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbQuantifierExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbRefExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbRefKeyExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbRefKeyExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbRefKeyExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbScanExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbScanExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbScanExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbSkipExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbSortExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbTreatExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbTreatExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbTreatExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbUnionAllExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbUnionAllExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbUnionAllExpression" />。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" /> 的访问者模式。</summary>
      <returns>特定类型的结果值。</returns>
      <param name="expression">被访问的 <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" />。</param>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbFilterExpression">
      <summary>表示应用来筛选输入集的谓词。 这将生成满足该谓词的元素集。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbFilterExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbFilterExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFilterExpression.Input">
      <summary>获取指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。</summary>
      <returns>指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFilterExpression.Predicate">
      <summary>获取或设置指定用于筛选输入集的谓词的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</summary>
      <returns>指定用于筛选输入集的谓词的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</returns>
      <exception cref="T:System.ArgumentNullException">表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">表达式与 <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" /> 的命令目录树没有关联，或者其结果类型不是 Boolean 类型。</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbFunctionAggregate">
      <summary>支持标准聚合函数，如 MIN、MAX、AVG、SUM 等等。 此类不能被继承。</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionAggregate.Distinct">
      <summary>获取一个值，该值指示此聚合是否是非重复聚合。</summary>
      <returns>如果聚合是非重复聚合，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionAggregate.Function">
      <summary>获取指定要调用的聚合函数的方法元数据。</summary>
      <returns>指定要调用的聚合函数的方法元数据。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbFunctionCommandTree">
      <summary>表示对数据库函数的调用。</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionCommandTree.EdmFunction">
      <summary>获取表示正在调用的函数的 <see cref="T:System.Data.Metadata.Edm.EdmFunction" />。</summary>
      <returns>表示正在调用的函数的 <see cref="T:System.Data.Metadata.Edm.EdmFunction" />。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionCommandTree.ResultType">
      <summary>获取函数的第一个结果集的预期结果类型。</summary>
      <returns>函数的第一个结果集的预期结果类型。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbFunctionExpression">
      <summary>表示函数调用。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbFunctionExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbFunctionExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionExpression.Arguments">
      <summary>获取为函数提供参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 列表。</summary>
      <returns>为函数提供参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 列表。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionExpression.Function">
      <summary>获取要调用的函数的元数据。</summary>
      <returns>要调用的函数的元数据。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbGroupAggregate">
      <summary>表示构成组的元素的集合。</summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbGroupByExpression">
      <summary>表示分组操作。 分组操作对输入集中的元素进行分组，分组依据是在应用指定聚合之前指定的键表达式。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbGroupByExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbGroupByExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupByExpression.Aggregates">
      <summary>获取 <see cref="T:System.Data.Common.CommandTrees.DbAggregate" /> 列表，该列表提供可应用的聚合函数。</summary>
      <returns>提供可应用的聚合函数的 <see cref="T:System.Data.Common.CommandTrees.DbAggregate" /> 列表。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupByExpression.Input">
      <summary>获取指定输入集并提供对集元素和组元素变量的访问的 <see cref="T:System.Data.Common.CommandTrees.DbGroupExpressionBinding" />。</summary>
      <returns>指定输入集并提供对集元素和组元素变量的访问的 <see cref="T:System.Data.Common.CommandTrees.DbGroupExpressionBinding" />。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupByExpression.Keys">
      <summary>获取 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 列表，该列表提供分组键。</summary>
      <returns>提供分组键的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 列表。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbGroupExpressionBinding">
      <summary>定义输入集与 <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" /> 的绑定。 此类不能被继承。</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.Expression">
      <summary>获取或设置定义输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</summary>
      <returns>定义输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</returns>
      <exception cref="T:System.ArgumentNullException">表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">表达式与 <see cref="T:System.Data.Common.CommandTrees.DbGroupExpressionBinding" /> 的命令目录树没有关联，或者其结果类型不等于或不可提升为该属性当前值的结果类型。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.GroupAggregate">
      <summary>获取 <see cref="T:System.Data.Common.CommandTrees.DbGroupAggregate" />，它表示组中的元素集合。</summary>
      <returns>组中的元素。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.GroupVariable">
      <summary>获取引用组元素变量的 <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" />。</summary>
      <returns>对组元素变量的引用。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableName">
      <summary>获取分配给组元素变量的名称。</summary>
      <returns>分配给组元素变量的名称。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableType">
      <summary>获取组元素变量的类型元数据。</summary>
      <returns>组元素变量的类型元数据。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.Variable">
      <summary>获取引用元素变量的 <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" />。</summary>
      <returns>对元素变量的引用。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.VariableName">
      <summary>获取分配给元素变量的名称。</summary>
      <returns>分配给元素变量的名称。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.VariableType">
      <summary>获取元素变量的类型元数据。</summary>
      <returns>元素变量的类型元数据。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbInsertCommandTree">
      <summary>表示以命令目录树表示的单行插入操作。 此类不能被继承。</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbInsertCommandTree.Returning">
      <summary>获取一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，该表达式指定要根据修改的行返回的结果的投影。</summary>
      <returns>获取一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，该 DbExpression 指定基于修改的行要返回的结果的投影。 null 指示不应从此命令返回任何结果。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbInsertCommandTree.SetClauses">
      <summary>获取一个定义插入操作的插入集子句的列表。</summary>
      <returns>定义插入操作的插入集子句的列表。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbIntersectExpression">
      <summary>表示左操作数和右操作数之间的交集操作。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIntersectExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIntersectExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbIsEmptyExpression">
      <summary>表示应用于单个集参数的空集确定。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsEmptyExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsEmptyExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbIsNullExpression">
      <summary>表示应用于单个参数的 null 确定。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsNullExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsNullExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbIsOfExpression">
      <summary>表示将单个参数与指定类型进行比较的类型比较。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsOfExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsOfExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbIsOfExpression.OfType">
      <summary>获取应与参数的类型元数据进行比较的类型元数据。</summary>
      <returns>应与参数的类型元数据进行比较的类型元数据。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbJoinExpression">
      <summary>表示在指定联接条件下给定的集合参数之间的内部联接、左外部联接或完全外部联接操作。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbJoinExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbJoinExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbJoinExpression.JoinCondition">
      <summary>获取或设置要应用的联接条件。</summary>
      <returns>要应用的联接条件。</returns>
      <exception cref="T:System.ArgumentNullException">表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">表达式与 <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" /> 的命令目录树没有关联，或者其结果类型不是 Boolean 类型。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbJoinExpression.Left">
      <summary>获取提供左侧输入的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。</summary>
      <returns>提供左侧输入的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbJoinExpression.Right">
      <summary>获取提供右侧输入的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。</summary>
      <returns>提供右侧输入的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbLambda">
      <summary>表示一个 Lambda 函数，可以调用此函数以生成 <see cref="T:System.Data.Common.CommandTrees.DbLambdaExpression" />。</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLambda.Body">
      <summary>获取 lambda 表达式的主体。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，表示 lambda 函数的主体。</returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbVariableReferenceExpression})">
      <summary>使用指定的内联 lambda 函数实现和形参创建 <see cref="T:System.Data.Common.CommandTrees.DbLambda" />。</summary>
      <returns>使用指定主体和规范参数描述内联 Lambda 函数的新 DbLambda</returns>
      <param name="body">一个定义 lambda 函数的逻辑的表达式</param>
      <param name="variables">一个 <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" /> 集合，表示 lambda 函数的形参。这些变量适合在 body 表达式中使用。</param>
      <exception cref="T:System.ArgumentNullException">变量主体</exception>
      <exception cref="T:System.ArgumentException">变量</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbVariableReferenceExpression[])">
      <summary>使用指定的内联 lambda 函数实现和形参创建 <see cref="T:System.Data.Common.CommandTrees.DbLambda" />。</summary>
      <returns>使用指定主体和规范参数描述内联 Lambda 函数的新 DbLambda</returns>
      <param name="body">一个定义 lambda 函数的逻辑的表达式</param>
      <param name="variables">一个 <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" /> 集合，表示 lambda 函数的形参。这些变量适合在 body 表达式中使用。</param>
      <exception cref="T:System.ArgumentNullException">变量主体</exception>
      <exception cref="T:System.ArgumentException">变量</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>按照指定函数的定义使用指定类型的参数创建新的 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 。</summary>
      <returns>使用指定主体和规范参数描述内联 Lambda 函数的新 DbLambda。</returns>
      <param name="argument1Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第一个参数的 EDM 类型</param>
      <param name="argument2Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第二个参数的 EDM 类型</param>
      <param name="argument3Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第三个参数的 EDM 类型</param>
      <param name="argument4Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第四个参数的 EDM 类型</param>
      <param name="argument5Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第五个参数的 EDM 类型</param>
      <param name="argument6Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第六个参数的 EDM 类型</param>
      <param name="argument7Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第七个参数的 EDM 类型</param>
      <param name="argument8Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第八个参数的 EDM 类型</param>
      <param name="argument9Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第九个参数的 EDM 类型</param>
      <param name="argument10Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十个参数的 EDM 类型</param>
      <param name="argument11Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十一个参数的 EDM 类型</param>
      <param name="argument12Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十二个参数的 EDM 类型</param>
      <param name="argument13Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十三个参数的 EDM 类型</param>
      <param name="argument14Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十四个参数的 EDM 类型</param>
      <param name="argument15Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十五个参数的 EDM 类型</param>
      <param name="argument16Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十六个参数的 EDM 类型</param>
      <param name="lambdaFunction">一个函数，其定义 lambda 函数的逻辑为<see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">“argument1Type”“argument2Type”“argument3Type”“argument4Type”“argument5Type”“argument6Type”“argument7Type”“argument8Type”“argument9Type”“argument10Type”“argument11Type”“argument12Type”“argument13Type”“argument14Type”“argument15Type”“argument16Type”“lambdaFunction”</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>按照指定函数的定义使用指定类型的参数创建新的 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 。</summary>
      <returns>使用指定主体和规范参数描述内联 Lambda 函数的新 DbLambda。</returns>
      <param name="argument1Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第一个参数的 EDM 类型</param>
      <param name="argument2Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第二个参数的 EDM 类型</param>
      <param name="argument3Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第三个参数的 EDM 类型</param>
      <param name="argument4Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第四个参数的 EDM 类型</param>
      <param name="argument5Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第五个参数的 EDM 类型</param>
      <param name="argument6Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第六个参数的 EDM 类型</param>
      <param name="argument7Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第七个参数的 EDM 类型</param>
      <param name="argument8Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第八个参数的 EDM 类型</param>
      <param name="argument9Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第九个参数的 EDM 类型</param>
      <param name="argument10Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十个参数的 EDM 类型</param>
      <param name="argument11Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十一个参数的 EDM 类型</param>
      <param name="argument12Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十二个参数的 EDM 类型</param>
      <param name="argument13Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十三个参数的 EDM 类型</param>
      <param name="argument14Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十四个参数的 EDM 类型</param>
      <param name="argument15Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十五个参数的 EDM 类型</param>
      <param name="lambdaFunction">一个函数，其定义 lambda 函数的逻辑为<see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">“argument1Type”“argument2Type”“argument3Type”“argument4Type”“argument5Type”“argument6Type”“argument7Type”“argument8Type”“argument9Type”“argument10Type”“argument11Type”“argument12Type”“argument13Type”“argument14Type”“argument15Type”“lambdaFunction”</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>按照指定函数的定义使用指定类型的参数创建新的 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 。</summary>
      <returns>使用指定主体和规范参数描述内联 Lambda 函数的新 DbLambda。</returns>
      <param name="argument1Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第一个参数的 EDM 类型</param>
      <param name="argument2Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第二个参数的 EDM 类型</param>
      <param name="argument3Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第三个参数的 EDM 类型</param>
      <param name="argument4Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第四个参数的 EDM 类型</param>
      <param name="argument5Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第五个参数的 EDM 类型</param>
      <param name="argument6Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第六个参数的 EDM 类型</param>
      <param name="argument7Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第七个参数的 EDM 类型</param>
      <param name="argument8Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第八个参数的 EDM 类型</param>
      <param name="argument9Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第九个参数的 EDM 类型</param>
      <param name="argument10Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十个参数的 EDM 类型</param>
      <param name="argument11Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十一个参数的 EDM 类型</param>
      <param name="argument12Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十二个参数的 EDM 类型</param>
      <param name="argument13Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十三个参数的 EDM 类型</param>
      <param name="argument14Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十四个参数的 EDM 类型</param>
      <param name="lambdaFunction">一个函数，其定义 lambda 函数的逻辑为<see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">“argument1Type”“argument2Type”“argument3Type”“argument4Type”“argument5Type”“argument6Type”“argument7Type”“argument8Type”“argument9Type”“argument10Type”“argument11Type”“argument12Type”“argument13Type”“argument14Type”“lambdaFunction”</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>按照指定函数的定义使用指定类型的参数创建新的 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 。</summary>
      <returns>使用指定主体和规范参数描述内联 Lambda 函数的新 DbLambda。</returns>
      <param name="argument1Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第一个参数的 EDM 类型</param>
      <param name="argument2Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第二个参数的 EDM 类型</param>
      <param name="argument3Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第三个参数的 EDM 类型</param>
      <param name="argument4Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第四个参数的 EDM 类型</param>
      <param name="argument5Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第五个参数的 EDM 类型</param>
      <param name="argument6Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第六个参数的 EDM 类型</param>
      <param name="argument7Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第七个参数的 EDM 类型</param>
      <param name="argument8Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第八个参数的 EDM 类型</param>
      <param name="argument9Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第九个参数的 EDM 类型</param>
      <param name="argument10Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十个参数的 EDM 类型</param>
      <param name="argument11Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十一个参数的 EDM 类型</param>
      <param name="argument12Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十二个参数的 EDM 类型</param>
      <param name="argument13Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十三个参数的 EDM 类型</param>
      <param name="lambdaFunction">一个函数，其定义 lambda 函数的逻辑为<see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">“argument1Type”“argument2Type”“argument3Type”“argument4Type”“argument5Type”“argument6Type”“argument7Type”“argument8Type”“argument9Type”“argument10Type”“argument11Type”“argument12Type”“argument13Type”“lambdaFunction”</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>按照指定函数的定义使用指定类型的参数创建新的 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 。</summary>
      <returns>使用指定主体和规范参数描述内联 Lambda 函数的新 DbLambda。</returns>
      <param name="argument1Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第一个参数的 EDM 类型</param>
      <param name="argument2Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第二个参数的 EDM 类型</param>
      <param name="argument3Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第三个参数的 EDM 类型</param>
      <param name="argument4Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第四个参数的 EDM 类型</param>
      <param name="argument5Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第五个参数的 EDM 类型</param>
      <param name="argument6Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第六个参数的 EDM 类型</param>
      <param name="argument7Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第七个参数的 EDM 类型</param>
      <param name="argument8Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第八个参数的 EDM 类型</param>
      <param name="argument9Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第九个参数的 EDM 类型</param>
      <param name="argument10Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十个参数的 EDM 类型</param>
      <param name="argument11Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十一个参数的 EDM 类型</param>
      <param name="argument12Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十二个参数的 EDM 类型</param>
      <param name="lambdaFunction">一个函数，其定义 lambda 函数的逻辑为<see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">“argument1Type”“argument2Type”“argument3Type”“argument4Type”“argument5Type”“argument6Type”“argument7Type”“argument8Type”“argument9Type”“argument10Type”“argument11Type”“argument12Type”“lambdaFunction”</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>按照指定函数的定义使用指定类型的参数创建新的 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 。</summary>
      <returns>使用指定主体和规范参数描述内联 Lambda 函数的新 DbLambda。</returns>
      <param name="argument1Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第一个参数的 EDM 类型</param>
      <param name="argument2Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第二个参数的 EDM 类型</param>
      <param name="argument3Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第三个参数的 EDM 类型</param>
      <param name="argument4Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第四个参数的 EDM 类型</param>
      <param name="argument5Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第五个参数的 EDM 类型</param>
      <param name="argument6Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第六个参数的 EDM 类型</param>
      <param name="argument7Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第七个参数的 EDM 类型</param>
      <param name="argument8Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第八个参数的 EDM 类型</param>
      <param name="argument9Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第九个参数的 EDM 类型</param>
      <param name="argument10Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十个参数的 EDM 类型</param>
      <param name="argument11Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十一个参数的 EDM 类型</param>
      <param name="lambdaFunction">一个函数，其定义 lambda 函数的逻辑为<see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">“argument1Type”“argument2Type”“argument3Type”“argument4Type”“argument5Type”“argument6Type”“argument7Type”“argument8Type”“argument9Type”“argument10Type”“argument11Type”“lambdaFunction”</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>按照指定函数的定义使用指定类型的参数创建新的 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 。</summary>
      <returns>使用指定主体和规范参数描述内联 Lambda 函数的新 DbLambda。</returns>
      <param name="argument1Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第一个参数的 EDM 类型</param>
      <param name="argument2Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第二个参数的 EDM 类型</param>
      <param name="argument3Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第三个参数的 EDM 类型</param>
      <param name="argument4Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第四个参数的 EDM 类型</param>
      <param name="argument5Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第五个参数的 EDM 类型</param>
      <param name="argument6Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第六个参数的 EDM 类型</param>
      <param name="argument7Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第七个参数的 EDM 类型</param>
      <param name="argument8Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第八个参数的 EDM 类型</param>
      <param name="argument9Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第九个参数的 EDM 类型</param>
      <param name="argument10Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第十个参数的 EDM 类型</param>
      <param name="lambdaFunction">一个函数，其定义 lambda 函数的逻辑为<see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">“argument1Type”“argument2Type”“argument3Type”“argument4Type”“argument5Type”“argument6Type”“argument7Type”“argument8Type”“argument9Type”“argument10Type”“lambdaFunction”</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>按照指定函数的定义使用指定类型的参数创建新的 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 。</summary>
      <returns>使用指定主体和规范参数描述内联 Lambda 函数的新 DbLambda。</returns>
      <param name="argument1Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第一个参数的 EDM 类型</param>
      <param name="argument2Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第二个参数的 EDM 类型</param>
      <param name="argument3Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第三个参数的 EDM 类型</param>
      <param name="argument4Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第四个参数的 EDM 类型</param>
      <param name="argument5Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第五个参数的 EDM 类型</param>
      <param name="argument6Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第六个参数的 EDM 类型</param>
      <param name="argument7Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第七个参数的 EDM 类型</param>
      <param name="argument8Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第八个参数的 EDM 类型</param>
      <param name="argument9Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第九个参数的 EDM 类型</param>
      <param name="lambdaFunction">一个函数，其定义 lambda 函数的逻辑为<see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">“argument1Type”“argument2Type”“argument3Type”“argument4Type”“argument5Type”“argument6Type”“argument7Type”“argument8Type”“argument9Type”“lambdaFunction”</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>按照指定函数的定义使用指定类型的参数创建新的 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 。</summary>
      <returns>使用指定主体和规范参数描述内联 Lambda 函数的新 DbLambda。</returns>
      <param name="argument1Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第一个参数的 EDM 类型</param>
      <param name="argument2Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第二个参数的 EDM 类型</param>
      <param name="argument3Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第三个参数的 EDM 类型</param>
      <param name="argument4Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第四个参数的 EDM 类型</param>
      <param name="argument5Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第五个参数的 EDM 类型</param>
      <param name="argument6Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第六个参数的 EDM 类型</param>
      <param name="argument7Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第七个参数的 EDM 类型</param>
      <param name="argument8Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第八个参数的 EDM 类型</param>
      <param name="lambdaFunction">一个函数，其定义 lambda 函数的逻辑为<see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">“argument1Type”“argument2Type”“argument3Type”“argument4Type”“argument5Type”“argument6Type”“argument7Type”“argument8Type”“lambdaFunction”</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>按照指定函数的定义使用指定类型的参数创建新的 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 。</summary>
      <returns>使用指定主体和规范参数描述内联 Lambda 函数的新 DbLambda。</returns>
      <param name="argument1Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第一个参数的 EDM 类型</param>
      <param name="argument2Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第二个参数的 EDM 类型</param>
      <param name="argument3Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第三个参数的 EDM 类型</param>
      <param name="argument4Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第四个参数的 EDM 类型</param>
      <param name="argument5Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第五个参数的 EDM 类型</param>
      <param name="argument6Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第六个参数的 EDM 类型</param>
      <param name="argument7Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第七个参数的 EDM 类型</param>
      <param name="lambdaFunction">一个函数，其定义 lambda 函数的逻辑为<see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">“argument1Type”“argument2Type”“argument3Type”“argument4Type”“argument5Type”“argument6Type”“argument7Type”“lambdaFunction”</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>按照指定函数的定义使用指定类型的参数创建新的 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 。</summary>
      <returns>使用指定主体和规范参数描述内联 Lambda 函数的新 DbLambda。</returns>
      <param name="argument1Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第一个参数的 EDM 类型</param>
      <param name="argument2Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第二个参数的 EDM 类型</param>
      <param name="argument3Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第三个参数的 EDM 类型</param>
      <param name="argument4Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第四个参数的 EDM 类型</param>
      <param name="argument5Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第五个参数的 EDM 类型</param>
      <param name="argument6Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第六个参数的 EDM 类型</param>
      <param name="lambdaFunction">一个函数，其定义 lambda 函数的逻辑为<see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">“argument1Type”“argument2Type”“argument3Type”“argument4Type”“argument5Type”“argument6Type”“lambdaFunction”</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>按照指定函数的定义使用指定类型的参数创建新的 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 。</summary>
      <returns>使用指定主体和规范参数描述内联 Lambda 函数的新 DbLambda。</returns>
      <param name="argument1Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第一个参数的 EDM 类型</param>
      <param name="argument2Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第二个参数的 EDM 类型</param>
      <param name="argument3Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第三个参数的 EDM 类型</param>
      <param name="argument4Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第四个参数的 EDM 类型</param>
      <param name="argument5Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第五个参数的 EDM 类型</param>
      <param name="lambdaFunction">一个函数，其定义 lambda 函数的逻辑为<see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">“argument1Type”“argument2Type”“argument3Type”“argument4Type”“argument5Type”“lambdaFunction”</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>按照指定函数的定义使用指定类型的参数创建新的 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 。</summary>
      <returns>使用指定主体和规范参数描述内联 Lambda 函数的新 DbLambda。</returns>
      <param name="argument1Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第一个参数的 EDM 类型</param>
      <param name="argument2Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第二个参数的 EDM 类型</param>
      <param name="argument3Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第三个参数的 EDM 类型</param>
      <param name="argument4Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第四个参数的 EDM 类型</param>
      <param name="lambdaFunction">一个函数，其定义 lambda 函数的逻辑为<see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">“argument1Type”“argument2Type”“argument3Type”“argument4Type”“lambdaFunction”</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>按照指定函数的定义使用指定类型的参数创建新的 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 。</summary>
      <returns>使用指定主体和规范参数描述内联 Lambda 函数的新 DbLambda。</returns>
      <param name="argument1Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第一个参数的 EDM 类型</param>
      <param name="argument2Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第二个参数的 EDM 类型</param>
      <param name="argument3Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第三个参数的 EDM 类型</param>
      <param name="lambdaFunction">一个函数，其定义 lambda 函数的逻辑为<see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">“argument1Type”“argument2Type”“argument3Type”“lambdaFunction”</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>按照指定函数的定义使用指定类型的参数创建新的 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 。</summary>
      <returns>使用指定主体和规范参数描述内联 Lambda 函数的新 DbLambda。</returns>
      <param name="argument1Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第一个参数的 EDM 类型</param>
      <param name="argument2Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的第二个参数的 EDM 类型</param>
      <param name="lambdaFunction">一个函数，其定义 lambda 函数的逻辑为<see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">“argument1Type”“argument2Type”“lambdaFunction”</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>按照指定函数的定义使用指定类型的单个参数创建新的 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 。</summary>
      <returns>使用指定主体和单个规范参数描述内联 Lambda 函数的新 DbLambda。</returns>
      <param name="argument1Type">一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />，用于定义 lambda 函数的参数的 EDM 类型。</param>
      <param name="lambdaFunction">一个函数，其定义 lambda 函数的逻辑为<see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">“argument1Type”“lambdaFunction”</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLambda.Variables">
      <summary>获取 lambda 表达式的参数。</summary>
      <returns>表示为 DbVariableReferenceExpression 对象的 lambda 函数参数的列表。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbLambdaExpression">
      <summary>允许对由 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 对象表示的参数应用 lambda 函数。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambdaExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>适用于不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambdaExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>适用于生成特定类型结果值的表达式访问者的访问者模式方法。</summary>
      <returns>表达式访问者生成的结果的类型。</returns>
      <param name="visitor">生成 TResultType 类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLambdaExpression.Arguments">
      <summary>获取 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 列表，该列表提供应将 Lambda 函数应用于的参数。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 列表。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLambdaExpression.Lambda">
      <summary>获取 <see cref="T:System.Data.Common.CommandTrees.DbLambda" />，它表示此表达式应用的 Lambda 函数。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbLambda" />，它表示此表达式应用的 Lambda 函数。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbLikeExpression">
      <summary>表示与带有可选转义字符串的指定模式进行比较的字符串比较。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLikeExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLikeExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLikeExpression.Argument">
      <summary>获取或设置一个表达式，该表达式指定要与给定模式比较的字符串。</summary>
      <returns>一个表达式，指定要与给定模式比较的字符串。</returns>
      <exception cref="T:System.ArgumentNullException">表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">表达式与 <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" /> 的命令目录树没有关联，或者其结果类型不是字符串类型。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLikeExpression.Escape">
      <summary>获取或设置一个表达式，该表达式提供用于比较的可选转义字符串。</summary>
      <returns>一个表达式，它提供用于比较的可选转义字符串。</returns>
      <exception cref="T:System.ArgumentNullException">表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">表达式与 <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" /> 的命令目录树没有关联，或者其结果类型不是字符串类型。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLikeExpression.Pattern">
      <summary>获取或设置一个表达式，该表达式指定应与给定字符串比较的模式。</summary>
      <returns>一个表达式，它指定应与给定字符串比较的模式。</returns>
      <exception cref="T:System.ArgumentNullException">表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">表达式与 <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" /> 的命令目录树没有关联，或者其结果类型不是字符串类型。</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbLimitExpression">
      <summary>表示将参数集合中的元素个数限制为指定限制值的限制。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLimitExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLimitExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLimitExpression.Argument">
      <summary>获取或设置指定输入集合的表达式。</summary>
      <returns>指定输入集合的表达式。</returns>
      <exception cref="T:System.ArgumentNullException">表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">表达式与 <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" /> 的命令目录树没有关联，或者其结果类型不是集合类型。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLimitExpression.Limit">
      <summary>获取或设置一个表达式，该表达式指定对从输入集合中返回的元素个数的限制。</summary>
      <returns>一个表达式，该表达式指定对从输入集合中返回的元素个数的限制。</returns>
      <exception cref="T:System.ArgumentNullException">表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">表达式与 <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" /> 的命令目录树没有关联，或者不是 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" />，也不是 <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" />，或者其结果类型不等于或不可提升为 64 位整数类型。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLimitExpression.WithTies">
      <summary>获取限制操作是否将包含等值结果。 如果包含等值结果，则可能产生比 <see cref="P:System.Data.Common.CommandTrees.DbLimitExpression.Limit" /> 值所指定的数量更多的结果。</summary>
      <returns>如果限制操作将包含等值结果，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbModificationClause">
      <summary>在插入或更新修改操作中指定单个子句。</summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbModificationCommandTree">
      <summary>表示以命令目录树表示的数据操作语言 (DML) 操作。</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbModificationCommandTree.Target">
      <summary>获取指定数据操作语言 (DML) 操作的目标表的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。</summary>
      <returns>指定 DML 操作的目标表的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbNewInstanceExpression">
      <summary>表示给定类型的新实例的构造，包括集和记录类型。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNewInstanceExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNewInstanceExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbNewInstanceExpression.Arguments">
      <summary>获取为新实例提供属性/列值或集元素的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 列表。</summary>
      <returns>为新实例提供属性/列值或集元素的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 列表。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbNotExpression">
      <summary>表示单个 Boolean 参数的逻辑“非”。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNotExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNotExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbNullExpression">
      <summary>表示对类型化 null 文本的引用。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNullExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNullExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbOfTypeExpression">
      <summary>表示根据给定集参数检索的指定类型的元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbOfTypeExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbOfTypeExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbOfTypeExpression.OfType">
      <summary>获取应根据集参数检索的元素类型的元数据。</summary>
      <returns>应根据集参数检索的元素类型的元数据。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbOrExpression">
      <summary>表示两个 Boolean 参数的逻辑“或”。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbOrExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbOrExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression">
      <summary>表示对包含此表达式的命令目录树中所声明的参数的引用。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbParameterReferenceExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbParameterReferenceExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbParameterReferenceExpression.ParameterName">
      <summary>获取被引用参数的名称。</summary>
      <returns>被引用参数的名称。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbProjectExpression">
      <summary>表示给定输入集对指定表达式的投影。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbProjectExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbProjectExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbProjectExpression.Input">
      <summary>获取指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。</summary>
      <returns>指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbProjectExpression.Projection">
      <summary>获取或设置定义投影的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</summary>
      <returns>定义投影的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</returns>
      <exception cref="T:System.ArgumentNullException">表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">表达式与 <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" /> 的命令目录树没有关联，或者其结果类型不等于或不可提升为当前投影的引用类型。</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbPropertyExpression">
      <summary>提供用于检索实例属性的方法和属性。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbPropertyExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbPropertyExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbPropertyExpression.Instance">
      <summary>获取或设置一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，它用于定义应从中检索属性的实例。</summary>
      <returns>用于定义应从中检索属性的实例的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</returns>
      <exception cref="T:System.ArgumentNullException">表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">表达式与 <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" /> 的命令目录树没有关联，或者其结果类型不等于或不可提升为定义该属性的类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbPropertyExpression.op_Implicit(System.Data.Common.CommandTrees.DbPropertyExpression)~System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}">
      <summary>基于此属性表达式创建一个新的键/值对。</summary>
      <returns>具有从 <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" /> 派生的键和值的新键/值对。</returns>
      <param name="value">此属性表达式。</param>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbPropertyExpression.Property">
      <summary>获取要检索的属性的属性元数据。</summary>
      <returns>要检索的属性的属性元数据。</returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbPropertyExpression.ToKeyValuePair">
      <summary>基于此属性表达式创建一个新的键/值对。</summary>
      <returns>具有从 <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" /> 派生的键和值的新键/值对。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbQuantifierExpression">
      <summary>表示对指定输入集的元素执行的指定类型的限定符运算。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbQuantifierExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbQuantifierExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbQuantifierExpression.Input">
      <summary>获取指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。</summary>
      <returns>指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbQuantifierExpression.Predicate">
      <summary>获取或设置应为输入集中的每个元素计算的 Boolean 谓词。</summary>
      <returns>应为输入集中的每个元素计算的 Boolean 谓词。</returns>
      <exception cref="T:System.ArgumentNullException">表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">表达式与 <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" /> 的命令目录树没有关联， 或者其结果类型不是 Boolean 类型。</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbQueryCommandTree">
      <summary>表示以命令目录树表示的查询操作。 此类不能被继承。</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbQueryCommandTree.Query">
      <summary>获取用于定义查询操作逻辑的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</summary>
      <returns>定义查询操作逻辑的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</returns>
      <exception cref="T:System.ArgumentNullException">表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">表达式与其他命令目录树关联。</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbRefExpression">
      <summary>表示对实体集中的特定实例的强类型化引用。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRefExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRefExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbRefExpression.EntitySet">
      <summary>获取包含该实例的实体集的元数据。</summary>
      <returns>包含该实例的实体集的元数据。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbRefKeyExpression">
      <summary>表示根据基础引用值对键值（以其结构形式）的检索。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRefKeyExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRefKeyExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression">
      <summary>表示关系的导航。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateFrom">
      <summary>获取作为导航起点的关系端的元数据。</summary>
      <returns>作为导航起点的关系端的元数据。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateTo">
      <summary>获取作为导航终点的关系端的元数据。</summary>
      <returns>作为导航终点的关系端的元数据。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.NavigationSource">
      <summary>获取或设置一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，该 DbExpression 指定导航的起点，并且必须是对实体实例的引用。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，它指定应作为导航起点的源关系端的实例。</returns>
      <exception cref="T:System.ArgumentNullException">表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">表达式与 <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" /> 的命令目录树没有关联，或者其结果类型不等于或不可提升为 <see cref="P:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateFrom" /> 属性的引用类型。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.Relationship">
      <summary>获取发生导航的关系的元数据。</summary>
      <returns>发生导航的关系的元数据。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbScanExpression">
      <summary>表示对 <see cref="P:System.Data.Common.CommandTrees.DbScanExpression.Target" /> 属性所指示的实体集或关系集的扫描。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbScanExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbScanExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbScanExpression.Target">
      <summary>获取被引用的实体集或关系集的元数据。</summary>
      <returns>被引用的实体集或关系集的元数据。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbSetClause">
      <summary>指定在修改操作中用于设置属性值的子句。 此类不能被继承。</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSetClause.Property">
      <summary>获取指定应更新的属性的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</summary>
      <returns>指定应更新的属性的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSetClause.Value">
      <summary>获取指定属性的更新值的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</summary>
      <returns>指定属性的更新值的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbSkipExpression">
      <summary>跳过指定数量的输入集元素。 只有在输入集合已按排序键指定的顺序进行排序之后，才能使用 <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" />。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbSkipExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbSkipExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSkipExpression.Count">
      <summary>获取或设置一个表达式，该表达式指定要在输入集合中跳过的元素个数。</summary>
      <returns>一个表达式，它指定要在输入集合中跳过的元素个数。</returns>
      <exception cref="T:System.ArgumentNullException">表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">表达式与 <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" /> 的命令目录树没有关联；表达式不是 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" />，也不是 <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" />；  或者表达式的结果类型不等于或不可提升为 64 位整数类型。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSkipExpression.Input">
      <summary>获取指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。</summary>
      <returns>指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSkipExpression.SortOrder">
      <summary>获取定义排序顺序的 <see cref="T:System.Data.Common.CommandTrees.DbSortClause" /> 列表。</summary>
      <returns>定义排序顺序的 <see cref="T:System.Data.Common.CommandTrees.DbSortClause" /> 列表。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbSortClause">
      <summary>指定可用作 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" /> 的排序顺序的组成部分的排序键。 此类不能被继承。</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSortClause.Ascending">
      <summary>获取一个布尔值，该值指示此排序键是否使用升序排序顺序。</summary>
      <returns>如果此排序键使用升序排序顺序，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSortClause.Collation">
      <summary>获取指定此排序键的排序规则的字符串值。</summary>
      <returns>指定此排序键的排序规则的字符串值。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSortClause.Expression">
      <summary>获取或设置为此排序键提供值的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</summary>
      <returns>为此排序键提供值的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbSortExpression">
      <summary>表示根据给定排序键应用于指定输入集的元素的排序操作。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbSortExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbSortExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSortExpression.Input">
      <summary>获取指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。</summary>
      <returns>指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSortExpression.SortOrder">
      <summary>获取定义排序顺序的 <see cref="T:System.Data.Common.CommandTrees.DbSortClause" /> 列表。</summary>
      <returns>定义排序顺序的 <see cref="T:System.Data.Common.CommandTrees.DbSortClause" /> 列表。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbTreatExpression">
      <summary>表示应用于多态参数的类型转换操作。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbTreatExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbTreatExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbUnaryExpression">
      <summary>实现接受单个表达式参数的表达式所需的基本功能。</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbUnaryExpression.Argument">
      <summary>获取或设置定义参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</summary>
      <returns>定义参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</returns>
      <exception cref="T:System.ArgumentNullException">表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">表达式与 <see cref="T:System.Data.Common.CommandTrees.DbUnaryExpression" /> 的命令目录树没有关联，或者其结果类型不等于或不可提升为参数所需的类型。</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbUnionAllExpression">
      <summary>表示左操作数和右操作数之间的并集（不去除重复项）操作。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbUnionAllExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbUnionAllExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbUpdateCommandTree">
      <summary>表示以命令目录树表示的单行更新操作。 此类不能被继承。</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbUpdateCommandTree.Predicate">
      <summary>获取一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，该 DbExpression 指定的谓词用于确定应更新目标集合的哪些成员。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，它指定的谓词用于确定应更新目标集合的哪些成员。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbUpdateCommandTree.Returning">
      <summary>获取一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，该 DbExpression 指定基于修改的行要返回的结果的投影。</summary>
      <returns>获取一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，该 DbExpression 指定基于修改的行要返回的结果的投影。 null 指示不应从此命令返回任何结果。</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbUpdateCommandTree.SetClauses">
      <summary>获取定义更新操作的更新集子句的列表。</summary>
      <returns>定义更新操作的更新集子句的列表。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression">
      <summary>表示对当前作用域中的变量的引用。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbVariableReferenceExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式的访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbVariableReferenceExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型结果值的表达式的访问者模式。</summary>
      <returns>
        <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型的结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbVariableReferenceExpression.VariableName">
      <summary>获取被引用变量的名称。</summary>
      <returns>被引用变量的名称。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DefaultExpressionVisitor">
      <summary>从给定的根表达式访问表达式树的每个元素。 如果任何元素更改，则树重新生成回根目录，且返回新的根表达式；否则，返回原始根表达式。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.CommandTrees.DefaultExpressionVisitor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnEnterScope(System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbVariableReferenceExpression})">
      <summary>当使用指定的范围变量进入表达式访问程序的范围时表示事件。</summary>
      <param name="scopeVariables">区域变量集合。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnExitScope">
      <summary>退出表达式访问者的范围。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnExpressionReplaced(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>用新的表达式为表达式访问程序替换旧的。</summary>
      <param name="oldExpression">旧表达式。</param>
      <param name="newExpression">新表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnVariableRebound(System.Data.Common.CommandTrees.DbVariableReferenceExpression,System.Data.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>当重新对表达式访问程序绑定变量时表示事件。</summary>
      <param name="fromVarRef">变量的位置。</param>
      <param name="toVarRef">被重新绑定的变量的引用。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbAndExpression)">
      <summary>实现 logical AND 表达式的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">Logical AND 表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbApplyExpression)">
      <summary>实现指定输入集中的每个元素调用指定函数的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">APPLY 表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbArithmeticExpression)">
      <summary>实现应用于数值参数的算术运算的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">算法表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCaseExpression)">
      <summary>实现 When, Then, 和 Else 子句的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">用例表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCastExpression)">
      <summary>实现将单个参数转换为指定类型的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">转换表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbComparisonExpression)">
      <summary>实现应用于两个参数的比较操作的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">转换表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbConstantExpression)">
      <summary>实现不同种类的常数的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">常量表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>实现给定集合参数之间的无条件联接操作的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">联接表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbDerefExpression)">
      <summary>实现基于指定的引用检索实体的表达式的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">DEREF 表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbDistinctExpression)">
      <summary>实现中从指定集参数中移除的重复元素的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">不同的表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbElementExpression)">
      <summary>实现指定集参数转换到单一实例指定集参数转换，再到单一实例的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">元素表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbEntityRefExpression)">
      <summary>实现从基础实体实例提取引用的表达式的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">实体引用表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbExceptExpression)">
      <summary>实现左操作数和右操作数之间的减法操作的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbExpression)">
      <summary>实现表达式类型所需的基本功能的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbFilterExpression)">
      <summary>实现一个应用于筛选输入设置的谓语的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">筛选器表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbFunctionExpression)">
      <summary>实现一个调用某种功能的的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">函数表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbGroupByExpression)">
      <summary>通过操作实现一个团队的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIntersectExpression)">
      <summary>实现左操作数和右操作数之间的交集操作的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>实现一个应用于单个集参数的空集确定的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsNullExpression)">
      <summary>实现一个应用于单个参数的 null 确定的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsOfExpression)">
      <summary>实现将单个参数与指定类型进行比较的类型比较的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbJoinExpression)">
      <summary>表示在指定联接条件下给定的集合参数之间的内部联接、左外部联接或完全外部联接操作的访问者模式的实现。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLambdaExpression)">
      <summary>实现由 DbExpression 对象所表示的应用一个 lambda 函数到参数的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLikeExpression)">
      <summary>表示与带有可选转义字符串的指定模式进行比较的字符串比较的访问者模式的实现。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLimitExpression)">
      <summary>表示将参数集合中的元素个数限制为指定限制值的限制的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>表示给定类型的新实例的构造，包括集和记录类型的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNotExpression)">
      <summary>实现逻辑而非单一 Boolean 参数的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNullExpression)">
      <summary>实现一个对类型化 null 文本引用的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbOfTypeExpression)">
      <summary>表示根据给定集参数检索的指定类型的元素的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbOrExpression)">
      <summary>实现逻辑或两个 Boolean 参数的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>表示对包含此表达式的命令目录树中所声明的参数的引用的访问者模式的实现。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbProjectExpression)">
      <summary>实现给定输入集对指定表达式的投影的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbPropertyExpression)">
      <summary>实现检索一个实例属性的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbQuantifierExpression)">
      <summary>表示对指定输入集的元素执行的指定类型的限定符运算的访问者模式的实现。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRefExpression)">
      <summary>实现一个对实体集中的特定实例的强类型化引用的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRefKeyExpression)">
      <summary>实现根据基础引用值对键值的检索的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>实现一种关系导航的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbScanExpression)">
      <summary>实现一个对目标属性所指示的实体集或关系集的扫描的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbSkipExpression)">
      <summary>实现 Skip 表达式的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbSortExpression)">
      <summary>实现一个可以作为排序顺序的一部分的排序关键字的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbTreatExpression)">
      <summary>实现一个应用于多态参数的的类型转换操作的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbUnionAllExpression)">
      <summary>实现左操作数和右操作数之间的联合操作的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>实现一个对当前在范围内的变量的引用的访问者模式。</summary>
      <returns>实现的访问器。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitAggregate(System.Data.Common.CommandTrees.DbAggregate)">
      <summary>实现聚合的访问者模式。</summary>
      <returns>实现的访问器模式。</returns>
      <param name="aggregate">聚合。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitEntitySet(System.Data.Metadata.Edm.EntitySetBase)">
      <summary>实现实体数的访问者模式。</summary>
      <returns>实现的访问器模式。</returns>
      <param name="entitySet">实体集。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpression(System.Data.Common.CommandTrees.DbExpression)">
      <summary>实现表达式的访问者模式。</summary>
      <returns>实现的访问器模式。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBinding(System.Data.Common.CommandTrees.DbExpressionBinding)">
      <summary>实现表达式绑定的访问者模式。</summary>
      <returns>实现的访问器模式。</returns>
      <param name="binding">表达式绑定。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBindingList(System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpressionBinding})">
      <summary>实现表达式绑定列表的访问者模式。</summary>
      <returns>实现的访问器模式。</returns>
      <param name="list">表达式绑定列表。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionList(System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpression})">
      <summary>实现表达式列表的访问者模式。</summary>
      <returns>实现的访问器模式。</returns>
      <param name="list">表达式列表。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitFunction(System.Data.Metadata.Edm.EdmFunction)">
      <summary>实现函数的访问者模式。</summary>
      <returns>实现的访问器模式。</returns>
      <param name="functionMetadata">函数元数据。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitFunctionAggregate(System.Data.Common.CommandTrees.DbFunctionAggregate)">
      <summary>实现函数聚合的访问者模式。</summary>
      <returns>实现的访问器模式。</returns>
      <param name="aggregate">聚合。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupAggregate(System.Data.Common.CommandTrees.DbGroupAggregate)">
      <summary>实现组聚合的访问者模式。</summary>
      <returns>实现的访问器模式。</returns>
      <param name="aggregate">聚合。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupExpressionBinding(System.Data.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>实现组表达式绑定的访问者模式。</summary>
      <returns>实现的访问器模式。</returns>
      <param name="binding">绑定。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitLambda(System.Data.Common.CommandTrees.DbLambda)">
      <summary>实现 Lambda 函数的访问者模式。</summary>
      <returns>实现的访问器模式。</returns>
      <param name="lambda">Lambda 函数。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitSortClause(System.Data.Common.CommandTrees.DbSortClause)">
      <summary>实现排序子句的访问者模式。</summary>
      <returns>实现的访问器模式。</returns>
      <param name="clause">排序子句。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitSortOrder(System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbSortClause})">
      <summary>实现排序顺序的访问者模式。</summary>
      <returns>实现的访问器模式。</returns>
      <param name="sortOrder">排序顺序。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitType(System.Data.Metadata.Edm.EdmType)">
      <summary>实现类型的访问者模式。</summary>
      <returns>实现的访问器模式。</returns>
      <param name="type">类型。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitTypeUsage(System.Data.Metadata.Edm.TypeUsage)">
      <summary>实现类型用法的访问者模式。</summary>
      <returns>实现的访问器模式。</returns>
      <param name="type">类型。</param>
    </member>
    <member name="T:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder">
      <summary>提供 API 以构建 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 并允许将该 API 作为表达式类型本身上的扩展方法访问。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Aggregate(System.Data.Metadata.Edm.EdmFunction,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionAggregate" />。</summary>
      <returns>使用给定的函数和参数的引用聚合的新的函数。 函数聚集的 Distinct 属性将有 false值。</returns>
      <param name="function">定义聚合运算的函数。</param>
      <param name="argument">要对其计算聚合函数的参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 或 <paramref name="argument" /> null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> 不是聚合函数，或者具有多个实参；或者 <paramref name="argument" /> 的结果类型不等同于或不能提升为 <paramref name="function" /> 的形参类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.AggregateDistinct(System.Data.Metadata.Edm.EdmFunction,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建新的、应用于不同风格的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionAggregate" /> 。</summary>
      <returns>使用给定的函数和参数的引用聚合的新的函数。 函数聚集的 Distinct 属性将有 true值。</returns>
      <param name="function">定义聚合运算的函数。</param>
      <param name="argument">要对其计算聚合函数的参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 或 <paramref name="argument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> 不是聚合函数，或者具有多个实参；或者 <paramref name="argument" /> 的结果类型不等同于或不能提升为 <paramref name="function" /> 的形参类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" />，该对象确定是否为输入集的所有元素保留给定的谓词。</summary>
      <returns>新 DbQuantifierExpression 表示所有操作。</returns>
      <param name="source">一个指定输入集的表达式。</param>
      <param name="predicate">一个方法，表示要针对每个输入集成员计算的谓词。此方法必须生成一个结果类型为 Boolean 的表达式，该表达式提供谓词逻辑。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" />，该对象确定是否为输入集的所有元素保留给定的谓词。</summary>
      <returns>新 DbQuantifierExpression 表示所有操作。</returns>
      <param name="input">一个指定输入集的表达式绑定。</param>
      <param name="predicate">一个表达式，表示要针对每个输入集成员计算的谓词。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> 没有布尔结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.And(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbAndExpression" />，它对左侧参数和右侧参数执行逻辑“和”运算。</summary>
      <returns>具有指定参数的新 DbAndExpression。</returns>
      <param name="left">一个指定左侧参数的布尔表达式。</param>
      <param name="right">一个指定右侧参数的布尔表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 和 <paramref name="right" /> 没有布尔结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，它确定指定的集参数是否非空。</summary>
      <returns>具有指定参数应用与新的 <see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression" /> 的新 <see cref="T:System.Data.Common.CommandTrees.DbNotExpression" />。</returns>
      <param name="source">一个指定输入集的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" />，该对象确定是否为输入集的任何元素保留给定的谓词。</summary>
      <returns>新 DbQuantifierExpression 表示任何操作。</returns>
      <param name="source">一个指定输入集的表达式。</param>
      <param name="predicate">一个方法，表示要针对每个输入集成员计算的谓词。 此方法必须生成一个结果类型为 Boolean 的表达式，该表达式提供谓词逻辑。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" />，该对象确定是否为输入集的任何元素保留给定的谓词。</summary>
      <returns>新 DbQuantifierExpression 表示任何操作。</returns>
      <param name="input">一个指定输入集的表达式绑定。</param>
      <param name="predicate">一个表达式，表示要针对每个输入集成员计算的谓词。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> 生成的表达式没有布尔结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Common.CommandTrees.DbAggregate,System.String)">
      <summary>返回作为键/值对象指的定参数。</summary>
      <returns>密钥/值对对象。</returns>
      <param name="value">键/值对中的值。</param>
      <param name="alias">键/值对中的键。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Common.CommandTrees.DbExpression,System.String)">
      <summary>返回作为键/值对象指的定参数。</summary>
      <returns>密钥/值对对象。</returns>
      <param name="value">键/值对中的值。</param>
      <param name="alias">键/值对中的键。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Bind(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />，该对象使用生成的变量名称来绑定给定的表达式。</summary>
      <returns>使用指定的表达式和生成的变量名称绑定新的表达式。</returns>
      <param name="input">要绑定的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 没有集合结果。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.BindAs(System.Data.Common.CommandTrees.DbExpression,System.String)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />，该对象使用指定的变量名称来绑定给定的表达式</summary>
      <returns>使用指定的表达式和变量名称绑定新的表达式。</returns>
      <param name="input">要绑定的表达式。</param>
      <param name="varName">应用于绑定的变量名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="varName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 没有集合结果。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Case(System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression},System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression},System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />。</summary>
      <returns>使用指定的案件和默认结果的新 DbCaseExpression。</returns>
      <param name="whenExpressions">提供每个 Case 的条件的表达式列表。</param>
      <param name="thenExpressions">提供每个 Case 的结果的表达式列表。</param>
      <param name="elseExpression">定义没有 Case 匹配时的结果的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="whenExpressions" /> 或 <paramref name="thenExpressions" /> 为 null 或包含 null，或者 <paramref name="elseExpression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="whenExpressions" /> 或 <paramref name="thenExpressions" /> 为空，或者 <paramref name="whenExpressions" /> 包含一个带有非布尔结果类型的表达式，或者没有适用于 <paramref name="thenExpressions" /> 和 <paramref name="elseExpression" /> 中的所有表达式的通用结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CastTo(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.TypeUsage)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbCastExpression" /> ，该表达式对多态参数应用强制转换运算。</summary>
      <returns>使用指定的参数和目标类型的新 DbCastExpression。</returns>
      <param name="argument">应对其应用强制转换的参数。</param>
      <param name="toType">指定要强制转换成的类型的类型元数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Argument" /> 或 <paramref name="toType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Data.Metadata.Edm.TypeUsage,System.Object)">
      <summary>使用给定的常量值创建一个具有指定基元类型的新 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" />。</summary>
      <returns>具有给定的值和 <paramref name="constantType" /> 结果类型的新 DbConstantExpression。</returns>
      <param name="constantType">常量值的类型。</param>
      <param name="value">要表示的常量值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 或 <paramref name="constantType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是有效常量类型的实例，<paramref name="constantType" /> 不代表基元类型，或 <paramref name="value" /> 所属的基元类型与 <paramref name="constantType" /> 表示的基元类型不同。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Object)">
      <summary>创建新的给定常数值的 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" /> 。</summary>
      <returns>具有创给定值的新建新 DbConstantExpression。</returns>
      <param name="value">要表示的常量值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是有效常量类型的实例。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})">
      <summary>创建新的 <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" />，它按照键值对特定实体的引用进行编码。</summary>
      <returns>使用给定实体集中的指定键值引用元素的新 DbRefExpression。</returns>
      <param name="entitySet">引用的元素所在的实体集。</param>
      <param name="keyValues">一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 集合，这些对象提供键值。 在数目、类型和顺序上，这些表达式必须匹配所引用实体类型的关键属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> 为 null，或者 <paramref name="keyValues" /> 为 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyValues" /> 的计数与 <paramref name="entitySet" /> 的元素类型声明的键成员的计数不符，或者 <paramref name="keyValues" /> 包含的表达式的结果类型与对应的键成员的类型不兼容。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet,System.Data.Common.CommandTrees.DbExpression[])">
      <summary>创建新的 <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" />，它按照键值对特定实体的引用进行编码。</summary>
      <returns>使用给定实体集中的指定键值引用元素的新 DbRefExpression。</returns>
      <param name="entitySet">引用的元素所在的实体集。</param>
      <param name="keyValues">一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 集合，这些对象提供键值。 在数目、类型和顺序上，这些表达式必须匹配所引用实体类型的关键属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> 为 null，或者 <paramref name="keyValues" /> 为 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyValues" /> 的计数与 <paramref name="entitySet" /> 的元素类型声明的键成员的计数不符，或者 <paramref name="keyValues" /> 包含的表达式的结果类型与对应的键成员的类型不兼容。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet,System.Data.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})">
      <summary>创建新的 <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" />，它按照键值对给定类型的特定实体的引用进行编码。</summary>
      <returns>使用给定实体集中的指定键值引用元素的新 DbRefExpression。</returns>
      <param name="entitySet">引用的元素所在的实体集。</param>
      <param name="entityType">引用的实体的特定类型。 此实体类型必须与实体集的元素类型处于同一层次结构。</param>
      <param name="keyValues">一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 集合，这些对象提供键值。 在数目、类型和顺序上，这些表达式必须匹配所引用实体类型的关键属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> 或 <paramref name="entityType" /> 为 null，或者 <paramref name="keyValues" /> 为 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> 不是来自 <paramref name="entitySet" /> 的元素类型所在的类型层次结构（子类型、超类型或相同类型）。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> 不是来自 <paramref name="entitySet" /> 的元素类型所在的类型层次结构（子类型、超类型或相同类型）。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet,System.Data.Metadata.Edm.EntityType,System.Data.Common.CommandTrees.DbExpression[])">
      <summary>创建新的 <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" />，它按照键值对给定类型的特定实体的引用进行编码。</summary>
      <returns>使用给定实体集中的指定键值引用元素的新 DbRefExpression。</returns>
      <param name="entitySet">引用的元素所在的实体集。</param>
      <param name="entityType">引用的实体的特定类型。 此实体类型必须与实体集的元素类型处于同一层次结构。</param>
      <param name="keyValues">一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 集合，这些对象提供键值。 在数目、类型和顺序上，这些表达式必须匹配所引用实体类型的关键属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> 或 <paramref name="entityType" /> 为 null，或者 <paramref name="keyValues" /> 为 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> 不是来自 <paramref name="entitySet" /> 的元素类型所在的类型层次结构（子类型、超类型或相同类型）。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> 不是来自 <paramref name="entitySet" /> 的元素类型所在的类型层次结构（子类型、超类型或相同类型）。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}})">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" />，它为每个给定输入集元素计算一次指定的 <paramref name="apply" /> 表达式，并生成具有相应 input 和 apply 列的行集合。 不包括 <paramref name="apply" /> 计算结果为空集的行。</summary>
      <returns>使用指定输入、应用绑定和 CrossApply <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" /> 的新 DbApplyExpression。</returns>
      <param name="source">指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <param name="apply">一个方法，指定要针对每个输入集成员计算一次的逻辑。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="apply" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="apply" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpressionBinding)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" />，它为每个给定输入集元素计算一次指定的 <paramref name="apply" /> 表达式，并生成具有相应 input 和 apply 列的行集合。 不包括 <paramref name="apply" /> 计算结果为空集的行。</summary>
      <returns>使用指定输入、应用绑定和 CrossApply <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" /> 的新 DbApplyExpression。</returns>
      <param name="input">指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="apply">一个 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />，指定要针对每个输入集成员计算一次的逻辑。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="apply" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossJoin(System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpressionBinding})">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbCrossJoinExpression" />，它无条件地联接输入表达式绑定列表指定的集。</summary>
      <returns>新的 DbCrossJoinExpression，具有 CrossJoin 的  <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" />，表示输入设置的无条件联接。</returns>
      <param name="inputs">指定输入集的表达式绑定列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputs" /> 为 null 或包含 null 元素。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputs" /> 包含的表达式绑定数目少于 2 个。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Deref(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbDerefExpression" />，它根据给定的引用表达式来检索特定实体。</summary>
      <returns>检索指定的实体的新 DbDerefExpression。</returns>
      <param name="argument">一个提供引用的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。 此表达式必须具有引用类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 没有引用结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Distinct(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbDistinctExpression" />，它从给定的集参数中移除重复项。</summary>
      <returns>表示应用于指定集参数的不同的操作新 DbDistinctExpression。</returns>
      <param name="argument">定义要对其执行 Distinct 操作的集的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Divide(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" />，它用左侧参数除以右侧参数。</summary>
      <returns>表示除法运算的新 DbArithmeticExpression。</returns>
      <param name="left">一个指定左侧参数的表达式。</param>
      <param name="right">一个指定右侧参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 或 <paramref name="right" /> 之间不存在任何常用数值结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Element(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbElementExpression" />，它将一个集合转换为单一实例。</summary>
      <returns>一个 DbElementExpression，表示从集参数到单一实例的转换。</returns>
      <param name="argument">一个指定输入集的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Equal(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" />，它比较左侧参数和右侧参数是否相等。</summary>
      <returns>表示相等比较的新 DbComparisonExpression。</returns>
      <param name="left">一个指定左侧参数的表达式。</param>
      <param name="right">一个指定右侧参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 与 <paramref name="right" /> 之间不存在任何常用的可进行相等比较的结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Except(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbExceptExpression" />，它计算从左侧集参数中减去右侧集参数的结果。</summary>
      <returns>一个新的 DbExceptExpression，表示从左侧参数和减去右侧参数的差异。</returns>
      <param name="left">一个定义左侧集参数的表达式。</param>
      <param name="right">一个定义右侧集参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 与 <paramref name="right" /> 之间不存在任何常用集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Exists(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，它确定指定的集参数是否非空。</summary>
      <returns>具有指定参数应用与新的 <see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression" /> 的新 <see cref="T:System.Data.Common.CommandTrees.DbNotExpression" />。</returns>
      <param name="argument">一个指定输入集的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 没有集合结果类型。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.False">
      <summary>获取一个具有 false 布尔值的 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" />。</summary>
      <returns>一个具有 false 布尔值的 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" />。</returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Filter(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" />，它使用指定的谓词筛选给定输入集中的元素。</summary>
      <returns>新的 DbFilterExpression 产生筛选的程序集。</returns>
      <param name="input">一个指定输入集的表达式绑定。</param>
      <param name="predicate">一个表达式，表示要针对每个输入集成员计算的谓词。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> 没有布尔结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />，它将 FullOuterJoin 用作 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" />，以此按照指定的联接条件联接左侧表达式和右侧表达式指定的集。</summary>
      <returns>新 DbJoinExpression，使用 FullOuterJoin 的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" />，代表应用于给定联接条件下的左右输入集的完全外部联接操作。</returns>
      <param name="left">一个指定左侧集参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <param name="right">一个指定右侧集参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <param name="joinCondition">一个表示联接条件的方法。 此方法必须生成一个布尔结果类型的表达式，该表达式提供联接条件的逻辑。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" /> 或 <paramref name="joinCondition" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="" />
        <paramref name="right" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" /> 或 <paramref name="joinCondition" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="" />
        <paramref name="right" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />，它将 FullOuterJoin 用作 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" /> ，以此按照指定的联接条件联接左侧表达式绑定和右侧表达式绑定指定的集。</summary>
      <returns>新 DbJoinExpression，使用 FullOuterJoin 的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" />，代表应用于给定联接条件下的左右输入集的完全外部联接操作。</returns>
      <param name="left">指定左侧集参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="right">指定右侧集参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="joinCondition">一个指定联接条件的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" /> 或 <paramref name="joinCondition" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> 生成的表达式没有布尔结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetEntityRef(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbEntityRefExpression" />，它以结构化形式检索指定实体的引用。</summary>
      <returns>检索指定的实体的引用的新 DbEntityRefExpression。</returns>
      <param name="argument">提供实体的表达式。 此表达式必须具有实体结果类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 没有实体结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetRefKey(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbRefKeyExpression" />，它以结构化形式检索指定引用的键值。</summary>
      <returns>新 DbRefKeyExpression 检索指定引用的键值。</returns>
      <param name="argument">提供引用的表达式。 此表达式的引用类型必须具有实体元素类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 没有引用结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThan(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" />，它确定左侧参数是否大于右侧参数。</summary>
      <returns>表示大于比较的新 DbComparisonExpression。</returns>
      <param name="left">一个指定左侧参数的表达式。</param>
      <param name="right">一个指定右侧参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 与 <paramref name="right" /> 之间不存在任何常用的可进行顺序比较的结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThanOrEqual(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" />，它确定左侧参数是否大于或等于右侧参数。</summary>
      <returns>表示大于或等于比较的新 DbComparisonExpression。</returns>
      <param name="left">一个指定左侧参数的表达式。</param>
      <param name="right">一个指定右侧参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 与 <paramref name="right" /> 之间不存在任何常用的可进行顺序比较的结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBind(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的组表达式绑定，该绑定使用生成的变量名称和组变量名称来绑定给定的表达式。</summary>
      <returns>使用指定的表达式和生成的变量名称和组变量名称绑定新的组表达式。</returns>
      <param name="input">要绑定的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBindAs(System.Data.Common.CommandTrees.DbExpression,System.String,System.String)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbGroupExpressionBinding" />，它使用指定的变量名称和组变量名称来绑定给定的表达式。</summary>
      <returns>使用指定的表达式、变量名称和组变量名称绑定新的组表达式。</returns>
      <param name="input">要绑定的表达式。</param>
      <param name="varName">应用于绑定的变量名称。</param>
      <param name="groupVarName">在 group-by 表达式中使用新组表达式绑定时，应用于引用组的变量名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="varName" /> 或 <paramref name="groupVarName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBy(System.Data.Common.CommandTrees.DbGroupExpressionBinding,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbAggregate}})">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" />，它根据指定的组键对输入集的元素进行分组，并应用给定的聚合方法。</summary>
      <returns>使用指定输入集、分组密钥和聚合的新 DbGroupByExpression。</returns>
      <param name="input">指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbGroupExpressionBinding" />。</param>
      <param name="keys">定义分组列的字符串表达式对列表。</param>
      <param name="aggregates">指定要应用的聚合方法的表达式列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="keys" /> 或 <paramref name="aggregates" /> 为 null，<paramref name="keys" /> 包含 null 列键或表达式，或者 <paramref name="aggregates" /> 包含 null 聚合列名称或聚合。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keys" /> 和 <paramref name="aggregates" /> 都为空，或指定了无效或重复的列名称。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />，它将 InnerJoin 用作 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" />，以此按照指定的联接条件联接左侧表达式和右侧表达式指定的集。</summary>
      <returns>新 DbJoinExpression，使用 InnerJoin 的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" />，代表应用于给定联接条件下的左右输入集的inner联接操作。</returns>
      <param name="left">一个指定左侧集参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <param name="right">一个指定右侧集参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <param name="joinCondition">一个表示联接条件的方法。 此方法必须生成一个布尔结果类型的表达式，该表达式提供联接条件的逻辑。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" /> 或 <paramref name="joinCondition" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 或 <paramref name="right" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" /> 或 <paramref name="joinCondition" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 或 <paramref name="right" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />，它将 InnerJoin 用作 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" /> ，以此按照指定的联接条件联接左侧表达式绑定和右侧表达式绑定指定的集。</summary>
      <returns>新 DbJoinExpression，使用 InnerJoin 的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" />，代表应用于给定联接条件下的左右输入集的inner联接操作。</returns>
      <param name="left">指定左侧集参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="right">指定右侧集参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="joinCondition">一个指定联接条件的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" /> 或 <paramref name="joinCondition" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> 没有布尔结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Intersect(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbIntersectExpression" />，它计算左侧集参数和右侧集参数的交集。</summary>
      <returns>一个新的 DbIntersectExpression，表示左侧参数和右侧参数的交集。</returns>
      <param name="left">一个定义左侧集参数的表达式。</param>
      <param name="right">一个定义右侧集参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 或 <paramref name="right" /> 之间不存在任何常用集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Common.CommandTrees.DbLambda,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbLambdaExpression" />，它表示对给定参数应用指定的 lambda 函数。</summary>
      <returns>新 DbLambdaExpression 表示 Lambda 函数应用程序。</returns>
      <param name="lambda">一个 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 实例，表示要应用的 lambda 函数。</param>
      <param name="arguments">提供参数的表达式列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" /> 或 <paramref name="arguments" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 的计数与 <paramref name="lambda" /> 声明的变量数量不等，或者 <paramref name="arguments" /> 所包含表达式的结果类型不等于或不可提升为对应的变量类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Common.CommandTrees.DbLambda,System.Data.Common.CommandTrees.DbExpression[])">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbLambdaExpression" />，它表示对给定参数应用指定的 lambda 函数。</summary>
      <returns>新 DbLambdaExpression 表示 Lambda 函数应用程序。</returns>
      <param name="lambda">一个 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 实例，表示要应用的 lambda 函数。</param>
      <param name="arguments">提供参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" /> 或 <paramref name="arguments" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 的计数与 <paramref name="lambda" /> 声明的变量数量不等，或者 <paramref name="arguments" /> 所包含表达式的结果类型不等于或不可提升为对应的变量类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它表示使用给定的参数调用指定的函数。</summary>
      <returns>表示函数调用的新 DbFunctionExpression。</returns>
      <param name="function">要调用的函数的元数据。</param>
      <param name="arguments">为函数提供参数的表达式列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 为 null，或者 <paramref name="arguments" /> 为 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 的计数与 <paramref name="function" /> 声明的参数数量不等，或者 <paramref name="arguments" /> 所包含表达式的结果类型不等于或不可提升为对应的函数参数类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Metadata.Edm.EdmFunction,System.Data.Common.CommandTrees.DbExpression[])">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它表示使用给定的参数调用指定的函数。</summary>
      <returns>表示函数调用的新 DbFunctionExpression。</returns>
      <param name="function">要调用的函数的元数据。</param>
      <param name="arguments">为函数提供参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">fun<paramref name="" />ction 为 null，或者 <paramref name="arguments" /> 为 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 的计数与 <paramref name="function" /> 声明的参数数量不等，或者 <paramref name="arguments" /> 所包含表达式的结果类型不等于或不可提升为对应的函数参数类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsEmpty(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression" />，它确定指定的集参数是否为空集。</summary>
      <returns>使用指定参数的新 DbIsEmptyExpression。</returns>
      <param name="argument">一个指定输入集的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsNull(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbIsNullExpression" />，它确定指定的参数是否为 。</summary>
      <returns>使用指定参数的新 DbIsNullExpression。</returns>
      <param name="argument">一个指定参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 有一个集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOf(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.TypeUsage)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbIsOfExpression" />，它确定给定的参数是否为指定的类型或子类型。</summary>
      <returns>使用指定实例和类型以及 DbExpressionKind IsOf 的新 DbIsOfExpression。</returns>
      <param name="argument">一个指定实例的表达式。</param>
      <param name="type">指定应与实例的结果类型进行比较的类型的类型元数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不与 <paramref name="argument" /> 的结果类型相同处于相同的类型层次结构中。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOfOnly(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.TypeUsage)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbIsOfExpression" /> 表达式，该表达式确定给定的参数是否为指定的类型且只为该类型（不是子类型）。</summary>
      <returns>使用指定实例和类型以及 DbExpressionKind IsOfOnly 的新 DbIsOfExpression。</returns>
      <param name="argument">一个指定实例的表达式。</param>
      <param name="type">指定应与实例的结果类型进行比较的类型的类型元数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不与 <paramref name="argument" /> 的结果类型相同处于相同的类型层次结构中。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />，它将 InnerJoin 用作 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" />，以此按照指定的外部键和内部键之间的相等条件联接外部表达式和内部表达式指定的集。</summary>
      <returns>新 DbJoinExpression，使用 InnerJoin 的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" />，代表应用于对外部密匙和内部密匙比较是否相等的联接条件下的左右输入集的内部联接操作。</returns>
      <param name="outer">指定外部集参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <param name="inner">指定内部集参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <param name="outerKey">一个方法，指定如何从外部集的元素派生外部键值。</param>
      <param name="innerKey">一个方法，指定如何从内部集的元素派生内部键值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="" />outer、<paramref name="inner" />、<paramref name="outerKey" /> 或 <paramref name="innerKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="" />outer、<paramref name="inner" />、<paramref name="outerKey" /> 或 <paramref name="innerKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join``1(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,``0})">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" />，它将 InnerJoin 用作 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" />，以此通过外部表达式和内部表达式指定的集来投射指定的选择器，这些集按照指定的外部键和内部键之间的相等条件进行联接。</summary>
      <returns>使用指定的选择器作为其投影的新 DbProjectExpression，和作为其输入的新 DbJoinExpression。 输入的 DbJoinExpression 生成时带有一个 InnerJoin的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" />,它表示了应用在一个比较外部和内部键值等价性的连接条件下左和右输入设置的内联操作。</returns>
      <param name="outer">指定外部集参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <param name="inner">指定内部集参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <param name="outerKey">一个方法，指定如何从外部集的元素派生外部键值。</param>
      <param name="innerKey">一个方法，指定如何从内部集的元素派生内部键值。</param>
      <param name="selector">一个方法，指定如何从内部和外部集的元素派生结果集的元素。 此方法必须生成与 Join 兼容且可以解析为 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 的类型的实例。 备注中介绍的 <paramref name="TSelector" /> 的兼容性要求。</param>
      <typeparam name="TSelector">
        <paramref name="selector" /> 的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" />、<paramref name="inner" />、<paramref name="outerKey" />、<paramref name="innerKey" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" />、<paramref name="inner" />、<paramref name="outerKey" />、<paramref name="innerKey" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" />、<paramref name="inner" />、<paramref name="outerKey" />、<paramref name="innerKey" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbVariableReferenceExpression})">
      <summary>使用指定的内联 lambda 函数实现和形参创建 <see cref="T:System.Data.Common.CommandTrees.DbLambda" />。</summary>
      <returns>使用指定主体和规范参数描述内联 Lambda 函数的新 DbLambda。</returns>
      <param name="body">一个定义 lambda 函数的逻辑的表达式。</param>
      <param name="variables">一个 <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" /> 集合，表示 lambda 函数的形参。 这些变量适合在 <paramref name="body" /> 表达式中使用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variables" /> 为 null 或包含 null，或者 <paramref name="body" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variables" /> 包含多个具有相同变量名称的元素。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbVariableReferenceExpression[])">
      <summary>使用指定的内联 lambda 函数实现和形参创建 <see cref="T:System.Data.Common.CommandTrees.DbLambda" />。</summary>
      <returns>使用指定主体和规范参数描述内联 Lambda 函数的新 DbLambda。</returns>
      <param name="body">一个定义 lambda 函数的逻辑的表达式。</param>
      <param name="variables">一个 <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" /> 集合，表示 lambda 函数的形参。 这些变量适合在 <paramref name="body" /> 表达式中使用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variables" /> 为 null 或包含 null，或者 <paramref name="body" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variables" /> 包含多个具有相同变量名称的元素。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />，它将 LeftOuterJoin 用作 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" />，以此按照指定的联接条件联接左侧表达式和右侧表达式指定的集。</summary>
      <returns>新 DbJoinExpression，使用 LeftOuterJoin 的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" />，代表应用于给定联接条件下的左右输入集的左外部联接操作。</returns>
      <param name="left">一个指定左侧集参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <param name="right">一个指定右侧集参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <param name="joinCondition">一个表示联接条件的方法。 此方法必须生成一个布尔结果类型的表达式，该表达式提供联接条件的逻辑。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" /> 或 <paramref name="joinCondition" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 或 <paramref name="right" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" /> 或 <paramref name="joinCondition" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 或 <paramref name="right" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />，它将 LeftOuterJoin 用作 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" /> ，以此按照指定的联接条件联接左侧表达式绑定和右侧表达式绑定指定的集。</summary>
      <returns>新 DbJoinExpression，使用 LeftOuterJoin 的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" />，代表应用于给定联接条件下的左右输入集的左外部联接操作。</returns>
      <param name="left">指定左侧集参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="right">指定右侧集参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="joinCondition">一个指定联接条件的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" /> 或 <paramref name="joinCondition" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> 没有布尔结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThan(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" />，它确定左侧参数是否小于右侧参数。</summary>
      <returns>表示小于比较的新 DbComparisonExpression。</returns>
      <param name="left">一个指定左侧参数的表达式。</param>
      <param name="right">一个指定右侧参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 与 <paramref name="right" /> 之间不存在任何常用的可进行顺序比较的结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThanOrEqual(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" />，它确定左侧参数是否小于或等于右侧参数。</summary>
      <returns>表示小于或等于比较的新 DbComparisonExpression。</returns>
      <param name="left">一个指定左侧参数的表达式。</param>
      <param name="right">一个指定右侧参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 和 <paramref name="right" /> 之间不存在任何可进行相等和顺序比较的常用结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" />，它将指定的输入字符串与给定的模式进行比较。</summary>
      <returns>使用指定输入、模式和 null 转义的新 DbLikeExpression。</returns>
      <param name="argument">指定输入字符串的表达式。</param>
      <param name="pattern">指定模式字符串的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Argument" /> 或 <paramref name="pattern" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Argument" /> 或 <paramref name="pattern" /> 没有字符串结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" />，它使用可选转义字符串将指定的输入字符串与给定的模式进行比较。</summary>
      <returns>使用指定输入、模式和转义的新 DbLikeExpression。</returns>
      <param name="argument">指定输入字符串的表达式。</param>
      <param name="pattern">指定模式字符串的表达式。</param>
      <param name="escape">指定转义字符串的可选表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" />、<paramref name="pattern" /> 或 <paramref name="escape" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" />、<paramref name="pattern" /> 或 <paramref name="escape" /> 没有字符串结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Limit(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" /> 对象，该对象将参数集合中的元素个数限制为指定计数限定值。 输出中不包括等值结果。</summary>
      <returns>使用指定的不包括绑定的结果的参数和计数上限值的新 DbLimitExpression。</returns>
      <param name="argument">指定输入集合的表达式。</param>
      <param name="count">指定限制值的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="count" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 没有集合结果类型，或者 <paramref name="count" /> 没有等同于或可提升为 64 位整数类型的结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Minus(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" />，它从左侧参数中减去右侧参数。</summary>
      <returns>表示减法运算的新 DbArithmeticExpression。</returns>
      <param name="left">一个指定左侧参数的表达式。</param>
      <param name="right">一个指定右侧参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 与 <paramref name="right" /> 之间不存在任何常用数值结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Modulo(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" />，它计算左侧参数除以右侧参数所得的余数。</summary>
      <returns>表示取模运算的新 DbArithmeticExpression。</returns>
      <param name="left">一个指定左侧参数的表达式。</param>
      <param name="right">一个指定右侧参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 与 <paramref name="right" /> 之间不存在任何常用数值结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Multiply(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" />，它用左侧参数乘以右侧参数。</summary>
      <returns>表示乘法运算的新 DbArithmeticExpression。</returns>
      <param name="left">一个指定左侧参数的表达式。</param>
      <param name="right">一个指定右侧参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 与 <paramref name="right" /> 之间不存在任何常用数值结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.RelationshipEndMember,System.Data.Metadata.Edm.RelationshipEndMember)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" />，它表示关联关系组合的导航。</summary>
      <returns>从指定的导航源实例中指定的关系类型的关系端指定的导航的新 DbRelationshipNavigationExpression。</returns>
      <param name="navigateFrom">一个表达式，指定应作为导航起点的实例。</param>
      <param name="fromEnd">指示导航应发生的关系结束属性的元数据。</param>
      <param name="toEnd">指示导航应发生于关系结束属性的元数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fromEnd" />、<paramref name="toEnd" /> 或 <paramref name="navigateFrom" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromEnd" /> 和 <paramref name="toEnd" /> 不是由同一关系类型声明，或者 <paramref name="navigateFrom" /> 的结果类型与 <paramref name="fromEnd" /> 的属性类型不兼容。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Metadata.Edm.RelationshipType,System.String,System.String,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" />，它表示关联关系组合的导航。</summary>
      <returns>从指定的导航源实例中指定的关系类型的关系端指定的导航的新 DbRelationshipNavigationExpression。</returns>
      <param name="type">表示关系的关系类型的元数据。</param>
      <param name="fromEndName">关系类型的属性名称，该类型表示了导航应该产生的关系的结尾。</param>
      <param name="toEndName">关系类型的属性名称，该类型表示了导航应该产生的关系的结尾。</param>
      <param name="navigateFrom">一个表达式，指定应作为导航起点的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />、<paramref name="fromEndName" />、<paramref name="toEndName" /> 或 <paramref name="navigateFrom" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 与此命令树的元数据工作区未关联或 <paramref name="navigateFrom" /> 与另一个命令树相关联，或者 <paramref name="type" /> 不声明具有名称 <paramref name="toEndName" /> 或 <paramref name="fromEndName" /> 的关系结束属性，或者 <paramref name="navigateFrom" /> 具有与名称 <paramref name="fromEndName" /> 的关系结束属性的属性类型不兼容的结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Negate(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" />，它对参数值求反。</summary>
      <returns>表示求反运算的新 DbArithmeticExpression。</returns>
      <param name="argument">一个指定参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 不存在任何数值结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" />。 如果类型参数为集合类型，参数将指定集合的元素。 否则，参数将用作新实例中的属性值或列值。</summary>
      <returns>使用指定的类型和参数的新 DbNewInstanceExpression。</returns>
      <param name="instanceType">新实例的类型。</param>
      <param name="arguments">指定新实例的值的表达式，根据实例类型对其解释。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceType" /> 或 <paramref name="arguments" /> 为 null，或者 <paramref name="arguments" /> 包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 为空，或者包含的表达式的结果类型与 <paramref name="instanceType" /> 要求不匹配（如备注部分所述）。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Metadata.Edm.TypeUsage,System.Data.Common.CommandTrees.DbExpression[])">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" />。 如果类型参数为集合类型，参数将指定集合的元素。 否则，参数将用作新实例中的属性值或列值。</summary>
      <returns>使用指定的类型和参数的新 DbNewInstanceExpression。</returns>
      <param name="instanceType">新实例的类型。</param>
      <param name="arguments">指定新实例的值的表达式，根据实例类型对其解释。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceType" /> 或 <paramref name="arguments" /> 为 null，或者 <paramref name="arguments" /> 包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 为空，或者包含的表达式的结果类型与 <paramref name="instanceType" /> 要求不匹配（如备注部分所述）。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" />，它构造一个包含指定元素的集合。 集合的类型基于元素的通用类型。 如果不存在通用元素类型，则将引发异常。</summary>
      <returns>使用指定的集合类型和参数的新 DbNewInstanceExpression。</returns>
      <param name="elements">提供集合元素的表达式列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> 为 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elements" /> 为空，或包含不存在通用结果类型的表达式。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Data.Common.CommandTrees.DbExpression[])">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" />，它构造一个包含指定元素的集合。 集合的类型基于元素的通用类型。 如果不存在通用元素类型，则将引发异常。</summary>
      <returns>使用指定的集合类型和参数的新 DbNewInstanceExpression。</returns>
      <param name="elements">提供集合元素的表达式列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> 为 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elements" /> 为空，或包含不存在通用结果类型的表达式。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewEmptyCollection(System.Data.Metadata.Edm.TypeUsage)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" />，它构造一个指定集合类型的空集合。</summary>
      <returns>使用指定的集合类型和空 <paramref name="Arguments" /> 列表的新 DbNewInstanceExpression。</returns>
      <param name="collectionType">要创建的集合的类型元数据</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collectionType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collectionType" /> 不是集合集合类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}})">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" />，它生成具有指定的命名列和给定值的行，该行被指定为表达式。</summary>
      <returns>表示行构造的新 DbNewInstanceExpression。</returns>
      <param name="columnValues">定义行结构和数值的“字符串-DbExpression 键-值”（string-DbExpression key-value）对列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="columnValues" /> 为 null，或者包含具有 null 列名或表达式的元素。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="columnValues" /> 为空，或者包含重复的或无效的列名称。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Not(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbNotExpression" />，它对给定的参数执行逻辑非运算。</summary>
      <returns>使用指定参数的新 DbNotExpression。</returns>
      <param name="argument">一个指定参数的布尔表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 没有布尔结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NotEqual(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" />，它比较左侧参数和右侧参数是否不等。</summary>
      <returns>表示不相等比较的新 DbComparisonExpression。</returns>
      <param name="left">一个指定左侧参数的表达式。</param>
      <param name="right">一个指定右侧参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 与 <paramref name="right" /> 之间不存在任何常用的可进行相等比较的结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Null(System.Data.Metadata.Edm.TypeUsage)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbNullExpression" />，它表示具有类型的 null 值。</summary>
      <returns>DbNullExpression 的实例。</returns>
      <param name="nullType">null 值的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nullType" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfType(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.TypeUsage)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbOfTypeExpression" />，它从指定的输入集生成属于指定类型的元素集。</summary>
      <returns>使用指定的集参数和类型的新 DbOfTypeExpression，以及 <see cref="F:System.Data.Common.CommandTrees.DbExpressionKind.OfType" /> 的 ExpressionKind。</returns>
      <param name="argument">指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <param name="type">要使输入集的元素包括在结果集中，该元素必须具有的类型的类型元数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 没有集合结果类型，或者 <paramref name="type" /> 不是 <paramref name="argument" /> 的集合结果类型的元素类型所在类型层次结构中的类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfTypeOnly(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.TypeUsage)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbOfTypeExpression" />，它从指定的输入集生成完全为指定类型的元素集。</summary>
      <returns>使用指定的集参数和类型的新 DbOfTypeExpression，以及 <see cref="F:System.Data.Common.CommandTrees.DbExpressionKind.OfTypeOnly" /> 的 ExpressionKind。</returns>
      <param name="argument">指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <param name="type">要使输入集的元素包括在结果集中，该元素必须严格匹配的类型的类型元数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 没有集合结果类型，或者 <paramref name="type" /> 不是 <paramref name="argument" /> 的集合结果类型的元素类型所在类型层次结构中的类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Or(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbOrExpression" />，它对左侧参数和右侧参数执行逻辑“或”运算。</summary>
      <returns>使用指定参数的新 DbOrExpression。</returns>
      <param name="left">一个指定左侧参数的布尔表达式。</param>
      <param name="right">一个指定右侧参数的布尔表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 或 <paramref name="right" /> 没有布尔结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" />，它使用升序排序顺序和默认排序规则按照指定排序关键字对给定的输入集进行排序。</summary>
      <returns>表示整个按顺序的操作的新 DbSortExpression。</returns>
      <param name="source">一个指定输入集的表达式。</param>
      <param name="sortKey">一个方法，该方法指定如何在给定输入集成员时，派生排序键表达式。 此方法必须生成一个可比较顺序的结果类型的表达式，提供排序键定义。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="sortKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="sortKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" />，它使用升序排序顺序和指定排序规则按照指定排序关键字对给定的输入集进行排序。</summary>
      <returns>表示整个按顺序的操作的新 DbSortExpression。</returns>
      <param name="source">一个指定输入集的表达式。</param>
      <param name="sortKey">一个方法，该方法指定如何在给定输入集成员时，派生排序键表达式。 此方法必须生成一个可比较顺序的结果类型的表达式，提供排序键定义。</param>
      <param name="collation">排序所依据的排序规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="sortKey" /> 或 <paramref name="collation" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="sortKey" /> 或 <paramref name="collation" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> 为空，或者只包含空白字符。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" />，它使用降序排序顺序和默认排序规则按照指定排序关键字对给定的输入集进行排序。</summary>
      <returns>表示整个按顺序的操作的新 DbSortExpression。</returns>
      <param name="source">一个指定输入集的表达式。</param>
      <param name="sortKey">一个方法，该方法指定如何在给定输入集成员时，派生排序键表达式。 此方法必须生成一个可比较顺序的结果类型的表达式，提供排序键定义。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="sortKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="sortKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" />，它使用降序排序顺序和指定排序规则按照指定排序关键字对给定的输入集进行排序。</summary>
      <returns>表示整个按顺序的操作的新 DbSortExpression。</returns>
      <param name="source">一个指定输入集的表达式。</param>
      <param name="sortKey">一个方法，该方法指定如何在给定输入集成员时，派生排序键表达式。 此方法必须生成一个可比较顺序的结果类型的表达式，提供排序键定义。</param>
      <param name="collation">排序所依据的排序规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="sortKey" /> 或 <paramref name="collation" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="sortKey" /> 或 <paramref name="collation" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> 为空，或者只包含空白字符。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}})">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" />，它为每个给定输入集元素计算一次指定的 <paramref name="apply" /> 表达式，并生成具有相应 input 和 apply 列的行集合。 对于 <paramref name="apply" /> 计算结果为空集的行，其 apply 列的值为 null。</summary>
      <returns>使用指定输入、应用绑定和 OuterApply <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" /> 的新 DbApplyExpression。</returns>
      <param name="source">指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <param name="apply">一个方法，指定要针对每个输入集成员计算一次的逻辑。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="apply" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="apply" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Source" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpressionBinding)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" />，它为每个给定输入集元素计算一次指定的 <paramref name="apply" /> 表达式，并生成具有相应 input 和 apply 列的行集合。 对于 <paramref name="apply" /> 计算结果为空集的行，其 apply 列的值为 null。</summary>
      <returns>使用指定输入、应用绑定和 OuterApply <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" /> 的新 DbApplyExpression。</returns>
      <param name="input">指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="apply">一个 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />，指定要针对每个输入集成员计算一次的逻辑。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="apply" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Parameter(System.Data.Metadata.Edm.TypeUsage,System.String)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" />，它使用指定的名称和类型引用参数。</summary>
      <returns>以指定名称和类型表示参数的引用的 DbParameterReferenceExpression。 该表达式的结果类型将与 <paramref name="type" /> 的结果类型相同。</returns>
      <param name="type">被引用参数的类型。</param>
      <param name="name">被引用参数的名称。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Plus(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" />，它将左侧参数与右侧参数相加。</summary>
      <returns>表示加法运算的新 DbArithmeticExpression。</returns>
      <param name="left">一个指定左侧参数的表达式。</param>
      <param name="right">一个指定右侧参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 与 <paramref name="right" /> 之间不存在任何常用数值结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Project(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" />，它对给定的输入集投影指定的表达式。</summary>
      <returns>表示投影运算的新 DbProjectExpression。</returns>
      <param name="input">一个指定输入集的表达式绑定。</param>
      <param name="projection">要对集投影的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="projection" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.EdmProperty)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" />，它表示对指定属性的检索。</summary>
      <returns>表示属性检索的新 DbPropertyExpression。</returns>
      <param name="instance">要从中检索属性的实例。 如果该属性为静态，则可能为 null。</param>
      <param name="propertyMetadata">要检索的属性的元数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyMetadata" /> 为 null，或者 <paramref name="instance" /> 为 null 且属性并非静态。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.NavigationProperty)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" />，它表示对指定导航属性的检索。</summary>
      <returns>表示导航属性检索的新 DbPropertyExpression。</returns>
      <param name="instance">要从中检索导航属性的实例。</param>
      <param name="navigationProperty">要检索的导航属性的元数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigationProperty" /> 或 <paramref name="instance" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.RelationshipEndMember)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" />，它表示对指定关系端成员的检索。</summary>
      <returns>表示关系端成员检索的新 DbPropertyExpression。</returns>
      <param name="instance">要从中检索关系端成员的实例。</param>
      <param name="relationshipEnd">要检索的关系端成员的元数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipEnd" /> 为 null，或者 <paramref name="instance" /> 为 null 且属性并非静态。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.CommandTrees.DbExpression,System.String)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" />，它表示从给定实例中检索具有指定名称的实例属性。</summary>
      <returns>新 DbPropertyExpression 表示属性检索。</returns>
      <param name="instance">要从中检索属性的实例。</param>
      <param name="propertyName">要检索的属性的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 为 null，或者 <paramref name="instance" /> 为 null 且属性并非静态。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">没有具有指定名称的属性是由 <paramref name="instance" /> 声明的。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Metadata.Edm.EntitySet,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建新的 <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" />，它按照键值对特定实体的引用进行编码。</summary>
      <returns>使用指定实体集中的指定键值引用元素的新 DbRefExpression。</returns>
      <param name="entitySet">引用元素所在的“实体”。</param>
      <param name="keyRow">一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，构造具有与实体类型所引用键属性相匹配（编号、类型和顺序）的列的记录。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> 或 <paramref name="keyRow" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyRow" /> 没有与引用的实体集的实体类别匹配的记录结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Metadata.Edm.EntitySet,System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.EntityType)">
      <summary>创建新的 <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" />，它按照键值对特定实体的引用进行编码。</summary>
      <returns>使用指定实体集中的指定键值引用元素的新 DbRefExpression。</returns>
      <param name="entitySet">引用元素所在的“实体”。</param>
      <param name="keyRow">一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，构造具有与实体类型所引用键属性相匹配（编号、类型和顺序）的列的记录。</param>
      <param name="entityType">引用所指的实体的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" />、<paramref name="keyRow" /> 或 <paramref name="entityType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> 与实体集的实体类型不在同一类型层次结构中，或者 <paramref name="keyRow" /> 没有与引用的实体集的实体类型匹配的记录结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Scan(System.Data.Metadata.Edm.EntitySetBase)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbScanExpression" />，它引用指定的实体集或关系集。</summary>
      <returns>基于指定的实体或关系集的新 DbScanExpression。</returns>
      <param name="targetSet">要引用的实体集或关系集的元数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetSet" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Select``1(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,``0})">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" />，它对给定的输入集选择指定的表达式。</summary>
      <returns>表示选择操作的新 DbProjectExpression。</returns>
      <param name="source">一个指定输入集的表达式。</param>
      <param name="projection">一个方法，指定如何从输入集的成员派生投影表达式。 此方法必须生成与 Select 兼容且可以解析为 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 的类型的实例。 注解中没有描述 <paramref name="TProjection" /> 的兼容性要求。</param>
      <typeparam name="TProjection">
        <paramref name="projection" /> 的方法结果类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="projection" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="projection" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" />，它为每个给定输入集元素计算一次指定的 <paramref name="apply" /> 表达式，并生成具有相应 input 和 apply 列的行集合。 不包括 <paramref name="apply" /> 计算结果为空集的行。 然后创建了 <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" />，它从每一行选择 <paramref name="apply" /> 列，从而生成整个<paramref name="apply" /> 结果集。</summary>
      <returns>从指定输入、应用绑定和 CrossApply <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" /> 的新 DbApplyExpression 中选定应用程序列的新 DbProjectExpression。</returns>
      <param name="source">指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <param name="apply">一个方法，表示要针对每个输入集成员计算一次的逻辑。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="apply" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="apply" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany``1(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,``0})">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" />，它为每个给定输入集元素计算一次指定的 <paramref name="apply" /> 表达式，并生成具有相应 input 和 apply 列的行集合。 不包括 <paramref name="apply" /> 计算结果为空集的行。 然后创建了 <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" />，它在每一行上选择指定的 <paramref name="selector" />，从而生成整个结果集。</summary>
      <returns>从指定输入、应用绑定和 CrossApply <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" /> 的新 DbApplyExpression 中选定给定选择器结果的新 DbProjectExpression。</returns>
      <param name="source">指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <param name="apply">一个方法，表示要针对每个输入集成员计算一次的逻辑。</param>
      <param name="selector">一个方法，指定如何在给定输入集元素和应用集元素的情况下派生结果集的元素。 此方法必须生成与 SelectMany 兼容且可以解析为 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 的类型的实例。 备注中介绍的 <paramref name="TSelector" /> 的兼容性要求。</param>
      <typeparam name="TSelector">
        <paramref name="selector" /> 的方法结果类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="apply" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="apply" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="apply" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbSortClause},System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" />，它在跳过指定数目的元素之前，按照指定的排序规范对给定的输入集进行排序。</summary>
      <returns>表示跳过操作的新 DbSkipExpression。</returns>
      <param name="input">一个指定输入集的表达式绑定。</param>
      <param name="sortOrder">确定应如何对输入集元素排序的排序规范列表。</param>
      <param name="count">一个表达式，指定要在有序集中跳过的元素个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="sortOrder" /> 或 <paramref name="count" />为 null，或者 <paramref name="sortOrder" /> 包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortOrder" /> 为空，或者 <paramref name="count" /> 不是 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" /> 或 <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" /> 或具有不等同于或不能提升为 64 位整数类型的结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Common.CommandTrees.DbSortExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" />，它在给定的有序输入集中跳过指定数量的元素。</summary>
      <returns>表示跳过操作的新 DbSkipExpression。</returns>
      <param name="argument">指定有序输入集的 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" />。</param>
      <param name="count">一个表达式，指定要在有序集中跳过的元素个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="count" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> 不是 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" /> 或 <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" /> 对象，或者具有不等同于或不能提升为 64 位整数类型的结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Sort(System.Data.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbSortClause})">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" />，它按照指定的排序规范对给定的输入集进行排序。</summary>
      <returns>表示排序操作的新 DbSortExpression。</returns>
      <param name="input">一个指定输入集的表达式绑定。</param>
      <param name="sortOrder">确定应如何对输入集元素排序的排序规范列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="sortOrder" /> 为 null，或者 <paramref name="sortOrder" /> 包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortOrder" /> 为空。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Take(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" /> 对象，该对象将参数集合中的元素个数限制为指定计数限定值。 输出中不包括等值结果。</summary>
      <returns>使用指定的不包括绑定的结果的参数和计数上限值的新 DbLimitExpression。</returns>
      <param name="argument">指定输入集合的表达式。</param>
      <param name="count">指定限制值的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="count" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 没有集合结果类型，<paramref name="count" /> 没有等同于或可提升为 64 位整数类型的结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" />，其排序顺序包含给定顺序输入集的排序顺序、升序排序顺序的指定排序关键字以及默认排序规则。</summary>
      <returns>表示整个按顺序的新操作的新 DbSortExpression。</returns>
      <param name="source">一个指定有序输入集的 DbSortExpression。</param>
      <param name="sortKey">一个方法，该方法指定如何在给定输入集成员时，派生附加的排序键表达式。 此方法必须生成一个可比较顺序的结果类型的表达式，提供排序键定义。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="sortKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="sortKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" />，其排序顺序包含给定顺序输入集的排序顺序、升序排序顺序的指定排序关键字以及指定排序规则。</summary>
      <returns>表示整个按顺序的新操作的新 DbSortExpression。</returns>
      <param name="source">一个指定有序输入集的 DbSortExpression。</param>
      <param name="sortKey">一个方法，该方法指定如何在给定输入集成员时，派生附加的排序键表达式。 此方法必须生成一个可比较顺序的结果类型的表达式，提供排序键定义。</param>
      <param name="collation">排序所依据的排序规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="sortKey" /> 或 <paramref name="collation" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="sortKey" /> 或 <paramref name="collation" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> 为空，或者只包含空白字符。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" />，其排序顺序包含给定顺序输入集的排序顺序、降序排序顺序的指定排序关键字以及默认排序规则。</summary>
      <returns>表示整个按顺序的新操作的新 DbSortExpression。</returns>
      <param name="source">一个指定有序输入集的 DbSortExpression。</param>
      <param name="sortKey">一个方法，该方法指定如何在给定输入集成员时，派生附加的排序键表达式。 此方法必须生成一个可比较顺序的结果类型的表达式，提供排序键定义。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="sortKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="sortKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" />，其排序顺序包含给定顺序输入集的排序顺序、降序排序顺序的指定排序关键字以及指定排序规则。</summary>
      <returns>表示整个按顺序的新操作的新 DbSortExpression。</returns>
      <param name="source">一个指定有序输入集的 DbSortExpression。</param>
      <param name="sortKey">一个方法，该方法指定如何在给定输入集成员时，派生附加的排序键表达式。 此方法必须生成一个可比较顺序的结果类型的表达式，提供排序键定义。</param>
      <param name="collation">排序所依据的排序规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="sortKey" /> 或 <paramref name="collation" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="sortKey" /> 或 <paramref name="collation" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> 为空，或者只包含空白字符。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Common.CommandTrees.DbExpression)">
      <summary>使用升序排序顺序和默认排序规则创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbSortClause" />。</summary>
      <returns>使用给定的排序关键字和升序排序顺序的新排序子句。</returns>
      <param name="key">定义排序键的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 没有可比较顺序的结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Common.CommandTrees.DbExpression,System.String)">
      <summary>使用升序排序顺序和指定排序规则创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbSortClause" />。</summary>
      <returns>使用给定的排序关键字和排序规则的新排序子句，使用升序排序顺序。</returns>
      <param name="key">定义排序键的表达式。</param>
      <param name="collation">排序所依据的排序规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> 为空，或者只包含空白字符。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 没有可比较顺序的结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Common.CommandTrees.DbExpression)">
      <summary>使用降序排序顺序和默认排序规则创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbSortClause" />。</summary>
      <returns>使用给定的排序关键字和降序排序顺序的新排序子句。</returns>
      <param name="key">定义排序键的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 没有可比较顺序的结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Common.CommandTrees.DbExpression,System.String)">
      <summary>使用降序排序顺序和指定排序规则创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbSortClause" />。</summary>
      <returns>使用给定的排序关键字和排序规则的新排序子句，使用降序排序顺序。</returns>
      <param name="key">定义排序键的表达式。</param>
      <param name="collation">排序所依据的排序规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> 为空，或者只包含空白字符。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 没有可比较顺序的结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.TreatAs(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.TypeUsage)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbTreatExpression" />。</summary>
      <returns>使用指定的参数和类型的新 DbTreatExpression。</returns>
      <param name="argument">一个指定实例的表达式。</param>
      <param name="treatType">Treat-as 类型的类型元数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="treatType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="treatType" /> 不与 <paramref name="argument" /> 的结果类型相同处于相同的类型层次结构中。</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.True">
      <summary>获取一个具有 true 布尔值的 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" />。</summary>
      <returns>一个具有 true 布尔值的 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" />。</returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnaryMinus(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" />，它对参数值求反。</summary>
      <returns>表示求反运算的新 DbArithmeticExpression。</returns>
      <param name="argument">一个指定参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 不存在任何数值结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Union(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，该对象计算左侧集参数和右侧集参数的并集，并移除重复项。</summary>
      <returns>新 DbExpression 计算左参数和右参数并集，但不重复计算。</returns>
      <param name="left">一个定义左侧集参数的表达式。</param>
      <param name="right">一个定义右侧集参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 和 <paramref name="right" /> 之间不存在具有可进行相等比较的元素类型的任何常用集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnionAll(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbUnionAllExpression" />，它计算左侧集参数和右侧集参数的并集且不移除重复项。</summary>
      <returns>左参数和右参数并集的新 DbUnionAllExpression，包含重复计算。</returns>
      <param name="left">一个定义左侧集参数的表达式。</param>
      <param name="right">一个定义右侧集参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 和 <paramref name="right" /> 之间不存在具有可进行相等比较的元素类型的任何常用集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Variable(System.Data.Metadata.Edm.TypeUsage,System.String)">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" />，它使用指定的名称和类型引用变量。</summary>
      <returns>以指定名称和类型表示变量的引用的 DbVariableReferenceExpression。 该表达式的结果类型将与 <paramref name="type" /> 的结果类型相同。</returns>
      <param name="type">被引用变量的类型。</param>
      <param name="name">被引用变量的名称。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Where(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" />，它使用指定的谓词筛选给定输入集中的元素。</summary>
      <returns>新 DbQuantifierExpression 表示任何操作。</returns>
      <param name="source">一个指定输入集的表达式。</param>
      <param name="predicate">一个方法，表示要针对每个输入集成员计算的谓词。此方法必须生成一个结果类型为 Boolean 的表达式，该表达式提供谓词逻辑。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> 生成的表达式没有布尔结果类型。</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions">
      <summary>提供用于构造 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 的 API，这些对象调用规范 EDM 函数并使得此 API 可以作为表达式类型的扩展方法来访问。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Abs(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有数值结果类型）调用规范 'Abs' 函数。 表达式的结果类型与“值"的结果类型相同。</summary>
      <returns>新 DbFunctionExpression 返回“值”的绝对值。</returns>
      <param name="value">一个指定数值的表达式。</param>
      <exception cref="T:System.ArgumentNullException">值</exception>
      <exception cref="T:System.ArgumentException">值</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddDays(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有 DateTime、DateTimeOffset 或 Time 以及整数结果类型）调用规范 'AddDays' 函数。 表达式的结果类型与 dateValue 的结果类型相同。</summary>
      <returns>新的 DbFunctionExpression 给“dateValue”指定的值添加“addValue”指定的天数。</returns>
      <param name="dateValue">一个表达式，指定应与 addValue 相加的值。</param>
      <param name="addValue">一个表达式，指定要加到 dateValue 中的天数。</param>
      <exception cref="T:System.ArgumentNullException">dateValueaddValue</exception>
      <exception cref="T:System.ArgumentException">dateValueaddValue</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddHours(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有 DateTime、DateTimeOffset 或 Time 以及整数结果类型）调用规范 'AddHours' 函数。 表达式的结果类型与 timeValue 的结果类型相同。</summary>
      <returns>新的 DbFunctionExpression 给“timeValue”指定的值添加“addValue”指定的小时数。</returns>
      <param name="timeValue">一个表达式，指定应与 addValue 相加的值。</param>
      <param name="addValue">一个表达式，指定要加到 timeValue 中的小时数。</param>
      <exception cref="T:System.ArgumentNullException">timeValueaddValue</exception>
      <exception cref="T:System.ArgumentException">timeValueaddValue</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMicroseconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有 DateTime、DateTimeOffset 或 Time 以及整数结果类型）调用规范 'AddMicroseconds' 函数。 表达式的结果类型与 timeValue 的结果类型相同。</summary>
      <returns>新的 DbFunctionExpression 给“timeValue”指定的值添加“addValue”指定的微秒数。</returns>
      <param name="timeValue">一个表达式，指定应与 addValue 相加的值。</param>
      <param name="addValue">一个表达式，指定要加到 timeValue 中的微秒数。</param>
      <exception cref="T:System.ArgumentNullException">timeValueaddValue</exception>
      <exception cref="T:System.ArgumentException">timeValueaddValue</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMilliseconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有 DateTime、DateTimeOffset 或 Time 以及整数结果类型）调用规范 'AddMilliseconds' 函数。 表达式的结果类型与 timeValue 的结果类型相同。</summary>
      <returns>新的 DbFunctionExpression 给“timeValue”指定的值添加“addValue”指定的毫秒数。</returns>
      <param name="timeValue">一个表达式，指定应与 addValue 相加的值。</param>
      <param name="addValue">一个表达式，指定要加到 timeValue 中的毫秒数。</param>
      <exception cref="T:System.ArgumentNullException">timeValueaddValue</exception>
      <exception cref="T:System.ArgumentException">timeValueaddValue</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMinutes(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有 DateTime、DateTimeOffset 或 Time 以及整数结果类型）调用规范 'AddMinutes' 函数。 表达式的结果类型与 timeValue 的结果类型相同。</summary>
      <returns>新的 DbFunctionExpression 给“timeValue”指定的值添加“addValue”指定的分钟数。</returns>
      <param name="timeValue">一个表达式，指定应与 addValue 相加的值。</param>
      <param name="addValue">一个表达式，指定要加到 timeValue 中的分钟数。</param>
      <exception cref="T:System.ArgumentNullException">timeValueaddValue</exception>
      <exception cref="T:System.ArgumentException">timeValueaddValue</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMonths(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有 DateTime、DateTimeOffset 或 Time 以及整数结果类型）调用规范 'AddMonths' 函数。 表达式的结果类型与 dateValue 的结果类型相同。</summary>
      <returns>新的 DbFunctionExpression 给“dateValue”指定的值添加“addValue”指定的月数。</returns>
      <param name="dateValue">一个表达式，指定应与 addValue 相加的值。</param>
      <param name="addValue">一个表达式，指定要加到 dateValue 中的月数。</param>
      <exception cref="T:System.ArgumentNullException">dateValueaddValue</exception>
      <exception cref="T:System.ArgumentException">dateValueaddValue</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddNanoseconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有 DateTime、DateTimeOffset 或 Time 以及整数结果类型）调用规范 'AddNanoseconds' 函数。 表达式的结果类型与 timeValue 的结果类型相同。</summary>
      <returns>新的 DbFunctionExpression 给“timeValue”指定的值添加“addValue”指定的纳秒数。</returns>
      <param name="timeValue">一个表达式，指定应与 addValue 相加的值。</param>
      <param name="addValue">一个表达式，指定要加到 timeValue 中的纳秒数。</param>
      <exception cref="T:System.ArgumentNullException">timeValueaddValue</exception>
      <exception cref="T:System.ArgumentException">timeValueaddValue</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddSeconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有 DateTime、DateTimeOffset 或 Time 以及整数结果类型）调用规范 'AddSeconds' 函数。 表达式的结果类型与 timeValue 的结果类型相同。</summary>
      <returns>新的 DbFunctionExpression 给“timeValue”指定的值添加“addValue”指定的秒数。</returns>
      <param name="timeValue">一个表达式，指定应与 addValue 相加的值。</param>
      <param name="addValue">一个表达式，指定要加到 timeValue 中的秒数。</param>
      <exception cref="T:System.ArgumentNullException">timeValueaddValue</exception>
      <exception cref="T:System.ArgumentException">timeValueaddValue</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddYears(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有 DateTime、DateTimeOffset 或 Time 以及整数结果类型）调用规范 'AddYears' 函数。 表达式的结果类型与 dateValue 的结果类型相同。</summary>
      <returns>新的 DbFunctionExpression 给“dateValue”指定的值添加“addValue”指定的年数。</returns>
      <param name="dateValue">一个表达式，指定应与 addValue 相加的值。</param>
      <param name="addValue">一个表达式，指定要加到 dateValue 中的年数。</param>
      <exception cref="T:System.ArgumentNullException">dateValueaddValue</exception>
      <exception cref="T:System.ArgumentException">dateValueaddValue</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Average(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它对指定的集合调用规范 'Avg' 函数。 表达式的结果类型与集合的元素类型相同。</summary>
      <returns>产生平均值的新 DbFunctionExpression。</returns>
      <param name="collection">一个表达式，指定应计算平均值的集合。</param>
      <exception cref="T:System.ArgumentNullException">集合</exception>
      <exception cref="T:System.ArgumentException">集合</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseAnd(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有相同的整数结果类型）调用规范 'BitwiseAnd' 函数。 结果的数据类型与参数的类型相同。</summary>
      <returns>新 DbFunctionExpression 返回通过执行“value1”以及“value2”的按位 AND 产生的值。</returns>
      <param name="value1">一个指定第一个操作数的表达式。</param>
      <param name="value2">一个指定第二个操作数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">value1value2</exception>
      <exception cref="T:System.ArgumentException">value1value2</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseNot(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有整数结果类型）调用规范 'BitwiseNot' 函数。 结果的数据类型与参数的类型相同。</summary>
      <returns>新 DbFunctionExpression 返回通过执行“value”的按位 NOT 以及产生的值。</returns>
      <param name="value">一个指定第一个操作数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">值</exception>
      <exception cref="T:System.ArgumentException">值</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseOr(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有相同的整数结果类型）调用规范 'BitwiseOr' 函数。 结果的数据类型与参数的类型相同。</summary>
      <returns>新 DbFunctionExpression 返回通过执行“value1”以及“value2”的按位 OR 产生的值。</returns>
      <param name="value1">一个指定第一个操作数的表达式。</param>
      <param name="value2">一个指定第二个操作数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">value1value2</exception>
      <exception cref="T:System.ArgumentException">value1value2</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseXor(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有相同的整数结果类型）调用规范 'BitwiseXor' 函数。 结果的数据类型与参数的类型相同。</summary>
      <returns>新 DbFunctionExpression 返回通过执行“value1”以及“value2”的按位 XOR(独占 OR）产生的值。</returns>
      <param name="value1">一个指定第一个操作数的表达式。</param>
      <param name="value2">一个指定第二个操作数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">value1value2</exception>
      <exception cref="T:System.ArgumentException">value1value2</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Ceiling(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有单精度、双精度或小数结果类型）调用规范 'Ceiling' 函数。 表达式的结果类型与“值"的结果类型相同。</summary>
      <returns>新 DbFunctionExpression 返回小于“值”的最小整数值。</returns>
      <param name="value">一个指定数值的表达式。</param>
      <exception cref="T:System.ArgumentNullException">值</exception>
      <exception cref="T:System.ArgumentException">值</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Concat(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有字符串结果类型）调用规范 'Concat' 函数。 表达式的结果类型为 String。</summary>
      <returns>一个新的 DbFunctionExpression，生成串联字符串。</returns>
      <param name="string1">一个表达式，指定应显示在串连结果字符串最前面的字符串。</param>
      <param name="string2">一个表达式，指定应显示在串连结果字符串后续位置的字符串。</param>
      <exception cref="T:System.ArgumentNullException">string1string2</exception>
      <exception cref="T:System.ArgumentException">string1string2</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Contains(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有字符串结果类型）调用规范“Contains”函数。 表达式的结果类型为 Boolean。</summary>
      <returns>新 DbFunctionExpression 返回布尔值，指示“searchedForString”是否在“searchedString”内出现。</returns>
      <param name="searchedString">一个表达式，指定要从中搜索 searchedForString 实例的字符串。，</param>
      <param name="searchedForString">一个表达式，指定要在 searchedString 中搜索的字符串。</param>
      <exception cref="T:System.ArgumentNullException">searchedStringsearchedForString</exception>
      <exception cref="T:System.ArgumentException">searchedStringsearchedForString</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Count(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它对指定的集合调用规范“Count”函数。 表达式的结果类型为 Edm.Int32。</summary>
      <returns>产生计数值的新 DbFunctionExpression。</returns>
      <param name="collection">一个表达式，指定应计算计数值的集合。</param>
      <exception cref="T:System.ArgumentNullException">集合</exception>
      <exception cref="T:System.ArgumentException">集合</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTime(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范形式的“CreateDateTime”函数。 second 必须具有结果类型 Edm.Double，所有其他参数必须具有结果类型 Edm.Int32。 表达式的结果类型为 Edm.DateTime。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的 DateTime。</returns>
      <param name="year">一个表达式，为新的 DateTime 实例提供年份数值。</param>
      <param name="month">一个表达式，为新的 DateTime 实例提供月份数值。</param>
      <param name="day">一个表达式，为新的 DateTime 实例提供日期数值。</param>
      <param name="hour">一个表达式，为新的 DateTime 实例提供小时数值。</param>
      <param name="minute">一个表达式，为新的 DateTime 实例提供分钟数值。</param>
      <param name="second">一个表达式，为新的 DateTime 实例提供秒钟数值。</param>
      <exception cref="T:System.ArgumentNullException">年月份天小时分钟秒</exception>
      <exception cref="T:System.ArgumentException">年月份天小时分钟秒</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTimeOffset(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范形式的“CreateDateTimeOffset”函数。 second 必须具有结果类型 Edm.Double，所有其他参数必须具有结果类型 Edm.Int32。 表达式的结果类型为 Edm.DateTimeOffset。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的 DateTimeOffset。</returns>
      <param name="year">一个表达式，为新的 DateTimeOffset 实例提供年份数值。</param>
      <param name="month">一个表达式，为新的 DateTimeOffset 实例提供月份数值。</param>
      <param name="day">一个表达式，为新的 DateTimeOffset 实例提供日期数值。</param>
      <param name="hour">一个表达式，为新的 DateTimeOffset 实例提供小时数值。</param>
      <param name="minute">一个表达式，为新的 DateTimeOffset 实例提供分钟数值。</param>
      <param name="second">一个表达式，为新的 DateTimeOffset 实例提供秒钟数值。</param>
      <param name="timeZoneOffset">一个表达式，为新的 DateTimeOffset 实例提供时区偏移量的分钟数。</param>
      <exception cref="T:System.ArgumentNullException">年月份天小时分钟秒timeZoneOffset</exception>
      <exception cref="T:System.ArgumentException">年月份天小时分钟秒timeZoneOffset</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateTime(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范形式的“CreateTime”函数。 second 必须具有结果类型 Edm.Double，所有其他参数必须具有结果类型 Edm.Int32。 表达式的结果类型为 Edm.Time。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的 Time。</returns>
      <param name="hour">一个表达式，为新的 DateTime 实例提供小时数值。</param>
      <param name="minute">一个表达式，为新的 DateTime 实例提供分钟数值。</param>
      <param name="second">一个表达式，为新的 DateTime 实例提供秒钟数值。</param>
      <exception cref="T:System.ArgumentNullException">工时分钟秒</exception>
      <exception cref="T:System.ArgumentException">工时分钟秒</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTime">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它调用规范“CurrentDateTime”函数。</summary>
      <returns>新 DbFunctionExpression 返回当前日期和时间作为 Edm.DateTime 实例。</returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTimeOffset">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它调用规范“CurrentDateTimeOffset”函数。</summary>
      <returns>新 DbFunctionExpression 返回当前日期和时间作为 Edm.DateTimeOffset 实例。</returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentUtcDateTime">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它调用规范“CurrentUtcDateTime”函数。</summary>
      <returns>新 DbFunctionExpression 返回当前 UTC 日期和时间作为 Edm.DateTime 实例。</returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Day(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 DateTime 或 DateTimeOffset 结果类型）调用规范“Day”函数。 表达式的结果类型为 Edm.Int32。</summary>
      <returns>新 DbFunctionExpression 返回“dateValue”中的整数天值。</returns>
      <param name="dateValue">一个表达式，指定应从中检索日期的值。</param>
      <exception cref="T:System.ArgumentNullException">dateValue</exception>
      <exception cref="T:System.ArgumentException">dateValue</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DayOfYear(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 DateTime 或 DateTimeOffset 结果类型）调用规范“DayOfYear”函数。 表达式的结果类型为 Edm.Int32。</summary>
      <returns>新 DbFunctionExpression 返回“dateValue”中每年的整数天值。</returns>
      <param name="dateValue">一个表达式，指定应从中检索日期（以一年中的第几天表示）的值。</param>
      <exception cref="T:System.ArgumentNullException">dateValue</exception>
      <exception cref="T:System.ArgumentException">dateValue</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffDays(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有 DateTime 或 DateTimeOffset 结果类型）调用规范 'DiffDays' 函数。 表达式的结果类型为 Edm.Int32。</summary>
      <returns>新 DbFunctionExpression 返回天数为“dateValue1”和“dateValue2”之间的差异。</returns>
      <param name="dateValue1">一个表达式，指定第一个日期值参数。</param>
      <param name="dateValue2">指定第二次日期值参数的表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffHours(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有 DateTime、DateTimeOffset 或 Time 结果类型）调用规范 'DiffHours' 函数。 表达式的结果类型为 Edm.Int32。</summary>
      <returns>新 DbFunctionExpression 返回小时数为“timeValue1”和“timeValue2”之间的差异。</returns>
      <param name="timeValue1">一个表达式，指定第一个时间值参数。</param>
      <param name="timeValue2">指定第二次时间值参数的表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMicroseconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有 DateTime、DateTimeOffset 或 Time 结果类型）调用规范 'DiffMicroseconds' 函数。 表达式的结果类型为 Edm.Int32。</summary>
      <returns>新 DbFunctionExpression 返回微秒数为“timeValue1”和“timeValue2”之间的差异。</returns>
      <param name="timeValue1">一个表达式，指定第一个时间值参数。</param>
      <param name="timeValue2">指定第二次时间值参数的表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMilliseconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有 DateTime、DateTimeOffset 或 Time 结果类型）调用规范 'DiffMilliseconds'函数。 表达式的结果类型为 Edm.Int32。</summary>
      <returns>新 DbFunctionExpression 返回毫秒数为“timeValue1”和“timeValue2”之间的差异。</returns>
      <param name="timeValue1">一个表达式，指定第一个时间值参数。</param>
      <param name="timeValue2">指定第二次时间值参数的表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMinutes(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有 DateTime、DateTimeOffset 或 Time 结果类型）调用规范 'DiffMinutes' 函数。 表达式的结果类型为 Edm.Int32。</summary>
      <returns>新 DbFunctionExpression 返回分钟数为“timeValue1”和“timeValue2”之间的差异。</returns>
      <param name="timeValue1">一个表达式，指定第一个时间值参数。</param>
      <param name="timeValue2">指定第二次时间值参数的表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMonths(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有 DateTime 或 DateTimeOffset 结果类型）调用规范 'DiffMonths' 函数。 表达式的结果类型为 Edm.Int32。</summary>
      <returns>新 DbFunctionExpression 返回月数为“dateValue1”和“dateValue2”之间的差异。</returns>
      <param name="dateValue1">一个表达式，指定第一个日期值参数。</param>
      <param name="dateValue2">指定第二次日期值参数的表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffNanoseconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有 DateTime、DateTimeOffset 或 Time 结果类型）调用规范 'DiffNanoseconds' 函数。 表达式的结果类型为 Edm.Int32。</summary>
      <returns>新 DbFunctionExpression 返回纳秒数为“timeValue1”和“timeValue2”之间的差异。</returns>
      <param name="timeValue1">一个表达式，指定第一个时间值参数。</param>
      <param name="timeValue2">指定第二次时间值参数的表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffSeconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有 DateTime、DateTimeOffset 或 Time 结果类型）调用规范 'DiffSeconds' 函数。 表达式的结果类型为 Edm.Int32。</summary>
      <returns>新 DbFunctionExpression 返回秒数为“timeValue1”和“timeValue2”之间的差异。</returns>
      <param name="timeValue1">一个表达式，指定第一个时间值参数。</param>
      <param name="timeValue2">指定第二次时间值参数的表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffYears(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有 DateTime 或 DateTimeOffset 结果类型）调用规范 'DiffYears' 函数。 表达式的结果类型为 Edm.Int32。</summary>
      <returns>新 DbFunctionExpression 返回年数为“dateValue1”和“dateValue2”之间的差异。</returns>
      <param name="dateValue1">一个表达式，指定第一个日期值参数。</param>
      <param name="dateValue2">指定第二次日期值参数的表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.EndsWith(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有字符串结果类型）调用规范“EndsWith”函数。 表达式的结果类型为 Boolean。</summary>
      <returns>新 DbFunctionExpression 返回布尔值，指示“stringArgument”是否以“后缀”结束。</returns>
      <param name="stringArgument">指定在结尾处搜索 “后缀”的字符串表示形式。</param>
      <param name="suffix">指定在 “stringArgument”的结尾处搜索目标字符串的表示形式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Floor(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有单精度、双精度或小数结果类型）调用规范“Floor”函数。 表达式的结果类型与“值"的结果类型相同。</summary>
      <returns>新 DbFunctionExpression 返回不大于“值”的最大整数值。</returns>
      <param name="value">一个指定数值的表达式。</param>
      <exception cref="T:System.ArgumentNullException">值</exception>
      <exception cref="T:System.ArgumentException">值</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.GetTotalOffsetMinutes(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 DateTimeOffset 结果类型）调用规范“GetTotalOffsetMinutes”函数。 表达式的结果类型为 Edm.Int32。</summary>
      <returns>新 DbFunctionExpression 返回相对于 GMT 的“dateTimeOffsetArgument”偏移量分钟数。</returns>
      <param name="dateTimeOffsetArgument">一个表达式，指定应从中检索相对于 GMT 的偏移分钟数的 DateTimeOffset 值。</param>
      <exception cref="T:System.ArgumentNullException">dateTimeOffsetArgument</exception>
      <exception cref="T:System.ArgumentException">dateTimeOffsetArgument</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Hour(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 DateTime、 DateTimeOffset 或 Time 结果类型）调用规范 'Hour' 函数。 表达式的结果类型为 Edm.Int32。</summary>
      <returns>新 DbFunctionExpression 返回“timeValue”中的整数小时值。</returns>
      <param name="timeValue">一个表达式，指定应从中检索小时信息的值。</param>
      <exception cref="T:System.ArgumentNullException">timeValue</exception>
      <exception cref="T:System.ArgumentException">timeValue</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.IndexOf(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有字符串结果类型）调用规范“IndexOf”函数。 表达式的结果类型为 Edm.Int32。</summary>
      <returns>新 DbFunctionExpression 返回“searchString”中的“stringToFind”的第一个索引。</returns>
      <param name="searchString">一个表达式，指定要在 stringToFind 中搜索的字符串。</param>
      <param name="stringToFind">一个表达式，指定应检查是否位于 searchString 中的字符串。</param>
      <exception cref="T:System.ArgumentNullException">searchStringstringToFind</exception>
      <exception cref="T:System.ArgumentException">searchStringstringToFind</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Left(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串和整数结果类型）调用规范“Left”函数。 表达式的结果类型为 String。</summary>
      <returns>新 DbFunctionExpression 返回“stringArgument”中的长度“长度”的最左侧子字符串。</returns>
      <param name="stringArgument">一个表达式，指定要从中提取最左侧子字符串的字符串。</param>
      <param name="length">一个表达式，指定要从 stringArgument 中提取的最左侧子字符串的长度。</param>
      <exception cref="T:System.ArgumentNullException">stringArgument“长度”</exception>
      <exception cref="T:System.ArgumentException">stringArgument</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Length(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串结果类型）调用规范 'Length' 函数。 表达式的结果类型为 Edm.Int32。</summary>
      <returns>新 DbFunctionExpression 返回“stringArgument”的长度。</returns>
      <param name="stringArgument">一个表达式，指定应计算长度的字符串。</param>
      <exception cref="T:System.ArgumentNullException">stringArgument</exception>
      <exception cref="T:System.ArgumentException">stringArgument</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.LongCount(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它对指定的集合调用规范“BigCount”函数。 表达式的结果类型为 Edm.Int64。</summary>
      <returns>产生计数值的新 DbFunctionExpression。</returns>
      <param name="collection">一个表达式，指定应计算计数值的集合。</param>
      <exception cref="T:System.ArgumentNullException">集合</exception>
      <exception cref="T:System.ArgumentException">集合</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Max(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它对指定的集合调用规范“Max”函数。 表达式的结果类型与集合的元素类型相同。</summary>
      <returns>产生最大值的新 DbFunctionExpression。</returns>
      <param name="collection">一个表达式，指定应从中检索最大值的集合</param>
      <exception cref="T:System.ArgumentNullException">集合</exception>
      <exception cref="T:System.ArgumentException">集合</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Millisecond(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 DateTime、 DateTimeOffset 或 Time 结果类型）调用规范 'Millisecond' 函数。 表达式的结果类型为 Edm.Int32。</summary>
      <returns>新 DbFunctionExpression 返回“timeValue”中的整毫秒值。</returns>
      <param name="timeValue">一个表达式，指定应从中检索毫秒的值。</param>
      <exception cref="T:System.ArgumentNullException">timeValue</exception>
      <exception cref="T:System.ArgumentException">timeValue</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Min(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它对指定的集合调用规范“Min”函数。 表达式的结果类型与集合的元素类型相同。</summary>
      <returns>产生最小值的新 DbFunctionExpression。</returns>
      <param name="collection">一个表达式，指定应从中检索最小值的集合。</param>
      <exception cref="T:System.ArgumentNullException">集合</exception>
      <exception cref="T:System.ArgumentException">集合</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Minute(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 DateTime、DateTimeOffset 或 Time 结果类型）调用规范 'Minute' 函数。 表达式的结果类型为 Edm.Int32。</summary>
      <returns>新 DbFunctionExpression 返回“timeValue”中的整数分钟值。</returns>
      <param name="timeValue">一个表达式，指定应从中检索分钟的值。</param>
      <exception cref="T:System.ArgumentNullException">timeValue</exception>
      <exception cref="T:System.ArgumentException">timeValue</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Month(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 DateTime 或 DateTimeOffset 结果类型）调用规范“Month”函数。 表达式的结果类型为 Edm.Int32。</summary>
      <returns>新 DbFunctionExpression 返回“dateValue”中的整月数值。</returns>
      <param name="dateValue">一个表达式，指定应从中检索月份的值。</param>
      <exception cref="T:System.ArgumentNullException">dateValue</exception>
      <exception cref="T:System.ArgumentException">dateValue</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.NewGuid">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它调用规范“NewGuid”函数。</summary>
      <returns>新 DbFunctionExpression 返回新的 GUID 值。</returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Power(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有数值结果类型）调用规范“Power”函数。 表达式的结果类型与 baseArgument 的结果类型相同。</summary>
      <returns>新 DbFunctionExpression 返回“指数”指定的指数的幂执行的“baseArgument”值。</returns>
      <param name="baseArgument">一个表达式，指定要计算其指定次幂的数值。</param>
      <param name="exponent">一个表达式，指定 baseArgument 应计算的次幂数。</param>
      <exception cref="T:System.ArgumentNullException">“baseArgument”“指数”</exception>
      <exception cref="T:System.ArgumentException">“baseArgument”“指数”</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Replace(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有字符串结果类型）调用规范“Replace”函数。 表达式的结果类型也为 String。</summary>
      <returns>新 DbFunctionExpression 与返回的基于每个字符串“toReplace”由“替换”进行替换的 “stringArgument” 的新字符串。</returns>
      <param name="stringArgument">一个表达式，指定要在其中执行替换操作的字符串。</param>
      <param name="toReplace">一个表达式，指定要被替换的字符串</param>
      <param name="replacement">一个表达式，指定替换字符串。</param>
      <exception cref="T:System.ArgumentNullException">stringArgumenttoReplace“替换”</exception>
      <exception cref="T:System.ArgumentException">stringArgumenttoReplace“替换”</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Reverse(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串结果类型）调用规范“Reverse”函数。 表达式的结果类型也为 String。</summary>
      <returns>产生“stringArgument”反向值的新 DbFunctionExpression。</returns>
      <param name="stringArgument">一个表达式，指定要反转的字符串。</param>
      <exception cref="T:System.ArgumentNullException">stringArgument</exception>
      <exception cref="T:System.ArgumentException">stringArgument</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Right(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串和整数结果类型）调用规范“Right”函数。 表达式的结果类型为 String。</summary>
      <returns>新 DbFunctionExpression 返回“stringArgument”中的长度“长度”的最右侧子字符串。</returns>
      <param name="stringArgument">一个表达式，指定要从中提取最右侧子字符串的字符串。</param>
      <param name="length">一个表达式，指定要从 stringArgument 中提取的最右侧子字符串的长度。</param>
      <exception cref="T:System.ArgumentNullException">stringArgument“长度”</exception>
      <exception cref="T:System.ArgumentException">stringArgument</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有单精度、双精度或小数结果类型）调用规范“Round”函数。 表达式的结果类型与“值"的结果类型相同。</summary>
      <returns>指定的参数舍入为最接近的整数值的新 DbFunctionExpression。</returns>
      <param name="value">一个表达式，指定要舍入的数值。</param>
      <exception cref="T:System.ArgumentNullException">值</exception>
      <exception cref="T:System.ArgumentException">值</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有单精度、双精度或小数和整数结果类型）调用规范“Round”函数。 表达式的结果类型与“值"的结果类型相同。</summary>
      <returns>新 DbFunctionExpression 将指定的参数舍入为最接近的整数值，采用由“数字”指定的精度。</returns>
      <param name="value">一个表达式，指定要舍入的数值。</param>
      <param name="digits">一个表达式，指定要在舍入时使用的精度位数。</param>
      <exception cref="T:System.ArgumentNullException">值数字</exception>
      <exception cref="T:System.ArgumentException">值数字</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Second(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 DateTime、DateTimeOffset 或 Time 结果类型）调用规范 'Second' 函数。 表达式的结果类型为 Edm.Int32。</summary>
      <returns>新 DbFunctionExpression 返回“timeValue”中的整秒数值。</returns>
      <param name="timeValue">一个表达式，指定应从中检索秒的值。</param>
      <exception cref="T:System.ArgumentNullException">timeValue</exception>
      <exception cref="T:System.ArgumentException">timeValue</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StartsWith(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有字符串结果类型）调用规范“StartsWith”函数。 表达式的结果类型为 Boolean。</summary>
      <returns>新 DbFunctionExpression 返回布尔值，指示“stringArgument”是否以“前缀”开始。</returns>
      <param name="stringArgument">指定在开头部分搜索 “前缀”的字符串表示形式。</param>
      <param name="prefix">指定在 “stringArgument”的开头部分搜索目标字符串的表示形式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDev(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它对指定集合的非空成员调用规范“StDev”函数。 表达式的结果类型为 Edm.Double。</summary>
      <returns>在集合的非空成员上产生的标准偏差值的新 DbFunctionExpression。</returns>
      <param name="collection">一个表达式，指定应计算标准偏差的集合。</param>
      <exception cref="T:System.ArgumentNullException">集合</exception>
      <exception cref="T:System.ArgumentException">集合</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDevP(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它对整个指定集合调用规范“StDevP”函数。 表达式的结果类型为 Edm.Double。</summary>
      <returns>产生标准偏差值的新 DbFunctionExpression。</returns>
      <param name="collection">一个表达式，指定应计算标准偏差的集合。</param>
      <exception cref="T:System.ArgumentNullException">集合</exception>
      <exception cref="T:System.ArgumentException">集合</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Substring(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有字符串和整数值结果类型）调用规范“Substring”函数。 表达式的结果类型为 String。</summary>
      <returns>新 DbFunctionExpression 返回从“启动”处开始的“stringArgument”中的长度“长度”的子字符串。</returns>
      <param name="stringArgument">一个表达式，指定要从中提取子字符串的字符串。</param>
      <param name="start">一个表达式，指定要获取的子字符串的起始索引。</param>
      <param name="length">一个表达式，指定子字符串的长度。</param>
      <exception cref="T:System.ArgumentNullException">stringArgument“开始”“长度”</exception>
      <exception cref="T:System.ArgumentException">stringArgument“开始”“长度”</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Sum(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它对指定的集合调用规范“Sum”函数。 表达式的结果类型与集合的元素类型相同。</summary>
      <returns>产生总和的新 DbFunctionExpression。</returns>
      <param name="collection">一个表达式，指定应计算总和的集合。</param>
      <exception cref="T:System.ArgumentNullException">集合</exception>
      <exception cref="T:System.ArgumentException">集合</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToLower(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串结果类型）调用规范“ToLower”函数。 表达式的结果类型也为 String。</summary>
      <returns>新 DbFunctionExpression 返回转换为小写的“stringArgument”值。</returns>
      <param name="stringArgument">一个表达式，指定应转换为小写的字符串。</param>
      <exception cref="T:System.ArgumentNullException">stringArgument</exception>
      <exception cref="T:System.ArgumentException">stringArgument</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToUpper(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串结果类型）调用规范“ToUpper”函数。 表达式的结果类型也为 String。</summary>
      <returns>新 DbFunctionExpression 返回转换为大写的“stringArgument”值。</returns>
      <param name="stringArgument">一个表达式，指定应转换为大写的字符串。</param>
      <exception cref="T:System.ArgumentNullException">stringArgument</exception>
      <exception cref="T:System.ArgumentException">stringArgument</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Trim(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串结果类型）调用规范“Trim”函数。 表达式的结果类型也为 String。</summary>
      <returns>新 DbFunctionExpression 返回移除了前导空格和尾随空格的“stringArgument”的值。</returns>
      <param name="stringArgument">一个表达式，指定应移除前导和尾随空格的字符串。</param>
      <exception cref="T:System.ArgumentNullException">stringArgument</exception>
      <exception cref="T:System.ArgumentException">stringArgument</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimEnd(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串结果类型）调用规范“RTrim”函数。 表达式的结果类型也为 String。</summary>
      <returns>新 DbFunctionExpression 返回移除了尾随空格的“stringArgument”的值。</returns>
      <param name="stringArgument">一个表达式，指定应移除尾随空格的字符串。</param>
      <exception cref="T:System.ArgumentNullException">stringArgument</exception>
      <exception cref="T:System.ArgumentException">stringArgument</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimStart(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串结果类型）调用规范“LTrim”函数。 表达式的结果类型也为 String。</summary>
      <returns>新 DbFunctionExpression 返回移除了前导空格的“stringArgument”的值。</returns>
      <param name="stringArgument">一个表达式，指定应移除前导空格的字符串。</param>
      <exception cref="T:System.ArgumentNullException">stringArgument</exception>
      <exception cref="T:System.ArgumentException">stringArgument</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Truncate(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有单精度、双精度或小数和整数结果类型）调用规范“Truncate”函数。 表达式的结果类型与“值"的结果类型相同。</summary>
      <returns>新 DbFunctionExpression 将指定的参数截断为最接近的整数值，采用由“数字”指定的精度。</returns>
      <param name="value">一个表达式，指定要截断的数值。</param>
      <param name="digits">一个表达式，指定要在截断时使用的精度位数。</param>
      <exception cref="T:System.ArgumentNullException">值数字</exception>
      <exception cref="T:System.ArgumentException">值数字</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TruncateTime(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 DateTime 或 DateTimeOffset 结果类型）调用规范“TruncateTime”函数。 表达式的结果类型与 dateValue 的结果类型相同。</summary>
      <returns>新 DbFunctionExpression 返回时间设置为零时“dateValue”的值。</returns>
      <param name="dateValue">一个表达式，指定应截断时间部分的值。</param>
      <exception cref="T:System.ArgumentNullException">dateValue</exception>
      <exception cref="T:System.ArgumentException">dateValue</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Var(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它对指定集合的非空成员调用规范“Var”函数。 表达式的结果类型为 Edm.Double。</summary>
      <returns>集合的非空成员产生的统计方差值的新 DbFunctionExpression。</returns>
      <param name="collection">一个表达式，指定应计算统计方差的集合。</param>
      <exception cref="T:System.ArgumentNullException">集合</exception>
      <exception cref="T:System.ArgumentException">集合</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.VarP(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它对整个指定集合调用规范“VarP”函数。 表达式的结果类型为 Edm.Double。</summary>
      <returns>产生统计方差值的新 DbFunctionExpression。</returns>
      <param name="collection">一个表达式，指定应计算统计方差的集合。</param>
      <exception cref="T:System.ArgumentNullException">集合</exception>
      <exception cref="T:System.ArgumentException">集合</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Year(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 DateTime 或 DateTimeOffset 结果类型）调用规范“Year”函数。 表达式的结果类型为 Edm.Int32。</summary>
      <returns>新 DbFunctionExpression 返回“dateValue”中的整数年值。</returns>
      <param name="dateValue">一个表达式，指定应从中检索年份的值。</param>
      <exception cref="T:System.ArgumentNullException">dateValue</exception>
      <exception cref="T:System.ArgumentException">dateValue</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.ExpressionBuilder.Row">
      <summary>提供调用 <see cref="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}})" /> 的构造函数式方法。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Row.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression},System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}[])">
      <summary>使用指定的第一列值和选择性的连续列值来初始化 <see cref="T:System.Data.Common.CommandTrees.ExpressionBuilder.Row" /> 类的新实例。</summary>
      <param name="columnValue">提供新行实例中的第一列的键-值对。（必需）</param>
      <param name="columnValues">提供新行实例中的任何后续列的键-值对。（可选。）</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Row.op_Implicit(System.Data.Common.CommandTrees.ExpressionBuilder.Row)~System.Data.Common.CommandTrees.DbExpression">
      <summary>将指定行转换为 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，它表示已转换的行。</returns>
      <param name="row">要转换的行。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Row.ToExpression">
      <summary>创建新的 <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" /> ，它按照此行实例中的列构造新行。</summary>
      <returns>新 DbNewInstanceExpression 构造有相同名称和 DbExpression 值的行作为此 Row 实例。</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions">
      <summary>提供用于构造 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 的 API，这些对象调用空间相关的规范 EDM 函数并在适用时使得此 API 可以作为表达式类型的扩展方法来访问。</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Area(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范 'Area' 函数。 表达式的结果类型为 Edm.Double。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="spatialValue" /> 的区域或返回 null（如果 <paramref name="spatialValue" /> 不是图面）。</returns>
      <param name="spatialValue">一个表达式，指定应为其计算面积的空间表面值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsBinary(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范 'AsBinary' 函数。 表达式的结果类型为 Edm.Binary。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="spatialValue" /> 的已知二进制表示形式。</returns>
      <param name="spatialValue">一个表达式，从应生成的知名二进制表示形式中指定空间值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsGml(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范 'AsGml' 函数。 表达式的结果类型为 Edm.String。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="spatialValue" /> 的地理标记语言 (GML) 表示形式。</returns>
      <param name="spatialValue">一个表达式，从应生成的地理标记语言 (GML) 表示形式中指定空间值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsText(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范 'AsText' 函数。 表达式的结果类型为 Edm.String。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="spatialValue" /> 的已知文本表示形式。</returns>
      <param name="spatialValue">一个表达式，从应生成的文本表示形式中指定空间值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Centroid(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geometry 结果类型）调用规范 'Centroid' 函数。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="geometryValue" /> 的形中心点（可能不在其图面上）或返回 null（如果 <paramref name="geometryValue" /> 不是图面）。</returns>
      <param name="geometryValue">一个表达式，指定几何表面数值（应通过该值检索中心值）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.CoordinateSystemId(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“CoordinateSystemId”函数。 表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="spatialValue" /> 中的整数 SRID 值。</returns>
      <param name="spatialValue">一个表达式，指定一个数值，应通过该值检索坐标系统 Id（SRID）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Distance(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（每个参数必须具有一个 Edm.Geography 或 Edm.Geometry 结果类型）调用规范 'Distance' 函数。<paramref name="spatialValue1" /> 和 <paramref name="spatialValue2" /> 的结果类型必须相符。 表达式的结果类型为 Edm.Double。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="spatialValue1" /> 和 <paramref name="spatialValue1" /> 中两个最接近的点之间的距离。</returns>
      <param name="spatialValue1">一个表达式，指定第一个空间值。</param>
      <param name="spatialValue2">指定空间值的表达式，应通过该值测量与 <paramref name="spatialValue1" /> 的距离。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Elevation(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范 'Elevation' 函数。 表达式的结果类型为 Edm.Double。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="spatialValue" /> 的提升值或返回 null（如果 <paramref name="spatialValue" /> 不是点）。</returns>
      <param name="spatialValue">一个表达式，从应检索的提升（Z 坐标）值中指定空间点的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.EndPoint(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范 'EndPoint' 函数。 该结果类型与 <paramref name="spatialValue" /> 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="spatialValue" /> 的终点或返回 null（如果 <paramref name="spatialValue" /> 不是曲线）。</returns>
      <param name="spatialValue">一个表达式，指定空间曲线数值（应通过该值检索终结点）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.ExteriorRing(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geometry 结果类型）调用规范 'ExteriorRing' 函数。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它返回多边形 <paramref name="geometryValue" /> 的外部循环或返回 null（如果 <paramref name="geometryValue" /> 不是多边形）。</returns>
      <param name="geometryValue">几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyCollectionFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeographyCollectionFromBinary”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="geographyCollectionWellKnownBinaryValue" /> 必须具有二进制文件结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geography。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的地理集合值。</returns>
      <param name="geographyCollectionWellKnownBinaryValue">提供地理集合值的知名二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理集合值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyCollectionWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyCollectionWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyCollectionFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeographyCollectionFromText”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="geographyCollectionWellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geography。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的地理集合值。</returns>
      <param name="geographyCollectionWellKnownText">提供地理集合值的知名文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理集合值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyCollectionWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyCollectionWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromBinary(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有二进制结果类型）调用规范 'GeographyFromBinary' 函数。 表达式的结果类型为 Edm.Geography。</summary>
      <returns>新 DbFunctionExpression 基于指定的二进制值返回新的地理值。</returns>
      <param name="wellKnownBinaryValue">提供地理值的知名二进制表示形式的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinaryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="wellKnownBinaryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeographyFromBinary”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="wellKnownBinaryValue" /> 必须具有二进制文件结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geography。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的地理值。</returns>
      <param name="wellKnownBinaryValue">提供地理值的知名二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="wellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromGml(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串结果类型）调用规范 'GeographyFromGml'函数。 表达式的结果类型为 Edm.Geography。</summary>
      <returns>新 DbFunctionExpression 基于具有基础提供程序的默认坐标系统 ID (SRID) 的指定值，返回新的地理值。</returns>
      <param name="geographyMarkup">提供地理值的地理标记语言 (GML) 表示形式的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyMarkup" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyMarkup" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromGml(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeographyFromGml”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="geographyMarkup" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geography。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的地理值。</returns>
      <param name="geographyMarkup">提供地理值的地理标记语言 (GML) 表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyMarkup" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyMarkup" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromText(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串结果类型）调用规范 'GeographyFromText' 函数。 表达式的结果类型为 Edm.Geography。 它的值有默认的基础提供程序坐标系 ID (SRID)。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的地理值。</returns>
      <param name="wellKnownText">提供地理值的知名文本表示形式的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="wellKnownText" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeographyFromText”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="wellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geography。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的地理值。</returns>
      <param name="wellKnownText">提供地理值的知名文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="wellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyLineFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeographyLineFromBinary”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="lineWellKnownBinaryValue" /> 必须具有二进制文件结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geography。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的地理行值。</returns>
      <param name="lineWellKnownBinaryValue">提供地理行值的知名二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理行值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="lineWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyLineFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeographyLineFromText”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="lineWellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geography。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的地理行值。</returns>
      <param name="lineWellKnownText">提供地理行值的知名文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理行值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="lineWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiLineFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeographyMultiLineFromBinary”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="multiLineWellKnownBinaryValue" /> 必须具有二进制文件结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geography。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的地理多行值。</returns>
      <param name="multiLineWellKnownBinaryValue">提供地理多行值的知名二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理多行值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multiLineWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="multiLineWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiLineFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeographyMultiLineFromText”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="multiLineWellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geography。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的地理多行值。</returns>
      <param name="multiLineWellKnownText">提供地理多行值的知名文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理多行值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multiLineWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="multiLineWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPointFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeographyMultiPointFromBinary”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="multiPointWellKnownBinaryValue" /> 必须具有二进制文件结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geography。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的地理多点值。</returns>
      <param name="multiPointWellKnownBinaryValue">提供地理多点值的知名二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理多点值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multiPointWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="multiPointWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPointFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeographyMultiPointFromText”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="multiPointWellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geography。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的地理多点值。</returns>
      <param name="multiPointWellKnownText">提供地理多点值的知名文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理多点值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multiPointWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="multiPointWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPolygonFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeographyMultiPolygonFromBinary”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="multiPolygonWellKnownBinaryValue" /> 必须具有二进制文件结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geography。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的地理多边形值。</returns>
      <param name="multiPolygonWellKnownBinaryValue">提供地理多边值的知名二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理多边值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multiPolygonWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="multiPolygonWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPolygonFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeographyMultiPolygonFromText”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="multiPolygonWellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geography。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的地理多边形值。</returns>
      <param name="multiPolygonWellKnownText">提供地理多边值的知名文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理多边值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multiPolygonWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="multiPolygonWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPointFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeographyPointFromBinary”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="pointWellKnownBinaryValue" /> 必须具有二进制文件结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geography。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的地理点值。</returns>
      <param name="pointWellKnownBinaryValue">提供地理点值的知名二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理点值的坐标 systempointWellKnownBinaryValue 的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pointWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPointFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范形式的 'GeographyPointFromText' 函数。</summary>
      <returns>规范的“GeographyPointFromText”函数。</returns>
      <param name="pointWellKnownText">提供地理点值的知名文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理点值的坐标 systempointWellKnownTextValue 的坐标系统 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPolygonFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeographyPolygonFromBinary”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="polygonWellKnownBinaryValue" /> 必须具有二进制文件结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geography。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的地理多边形值。</returns>
      <param name="polygonWellKnownBinaryValue">提供地理边值的知名二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理边值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="polygonWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPolygonFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeographyPolygonFromText”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="polygonWellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geography。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的地理多边形值。</returns>
      <param name="polygonWellKnownText">提供地理边值的知名文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理边值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="polygonWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryCollectionFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeometryCollectionFromBinary”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="geometryCollectionWellKnownBinaryValue" /> 必须具有二进制文件结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的几何图形集合值。</returns>
      <param name="geometryCollectionWellKnownBinaryValue">提供几何图形集合值的知名二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理几何图形集合值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryCollectionWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryCollectionWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryCollectionFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeometryCollectionFromText”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="geometryCollectionWellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的几何图形集合值。</returns>
      <param name="geometryCollectionWellKnownText">提供几何图形集合值的知名文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理几何图形集合值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryCollectionWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryCollectionWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromBinary(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有二进制结果类型）调用规范 'GeometryFromBinary' 函数。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>新 DbFunctionExpression 基于指定的二进制值返回新的几何图形值。</returns>
      <param name="wellKnownBinaryValue">提供几何图形值的知名二进制表示形式的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinaryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="wellKnownBinaryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeometryFromBinary”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="wellKnownBinaryValue" /> 必须具有二进制文件结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的几何图形值。</returns>
      <param name="wellKnownBinaryValue">提供几何图形值的知名二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何图形值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="wellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromGml(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串结果类型）调用规范 'GeometryFromGml' 函数。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>新 DbFunctionExpression 基于具有基础提供程序的默认坐标系统 ID (SRID) 的指定值，返回新的几何图形值。</returns>
      <param name="geometryMarkup">提供几何图形值的地理标记语言 (GML) 表示形式的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryMarkup" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryMarkup" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromGml(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeometryFromGml”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="geometryMarkup" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的几何图形值。</returns>
      <param name="geometryMarkup">提供几何图形值的地理标记语言 (GML) 表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何图形值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryMarkup" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryMarkup" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromText(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串结果类型）调用规范 'GeometryFromText' 函数。 表达式的结果类型为 Edm.Geometry。 它的值有默认的基础提供程序坐标系 ID (SRID)。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的几何图形值。</returns>
      <param name="wellKnownText">提供几何图形值的知名文本表示形式的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="wellKnownText" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeometryFromText”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="wellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的几何图形值。</returns>
      <param name="wellKnownText">提供几何图形值的知名文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何图形值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="wellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryLineFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeometryLineFromBinary”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="lineWellKnownBinaryValue" /> 必须具有二进制文件结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的几何行值。</returns>
      <param name="lineWellKnownBinaryValue">提供几何图形行值的知名二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何图形行值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="lineWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryLineFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeometryLineFromText”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="lineWellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的几何行值。</returns>
      <param name="lineWellKnownText">提供几何图形行值的知名文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何图形行值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="lineWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiLineFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeometryMultiLineFromBinary”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="multiLineWellKnownBinaryValue" /> 必须具有二进制文件结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的几何多行值。</returns>
      <param name="multiLineWellKnownBinaryValue">提供几何图形多行值的知名二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何图形多行值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multiLineWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="multiLineWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiLineFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeometryMultiLineFromText”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="multiLineWellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的几何多行值。</returns>
      <param name="multiLineWellKnownText">提供几何图形多行值的知名文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何图形多行值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multiLineWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="multiLineWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPointFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeometryMultiPointFromBinary”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="multiPointWellKnownBinaryValue" /> 必须具有二进制文件结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的几何多点值。</returns>
      <param name="multiPointWellKnownBinaryValue">提供几何图形多点值的知名二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何图形多点值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multiPointWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="multiPointWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPointFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeometryMultiPointFromText”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="multiPointWellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的几何多点值。</returns>
      <param name="multiPointWellKnownText">提供几何图形多点值的知名文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何图形多点值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multiPointWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="multiPointWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPolygonFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeometryMultiPolygonFromBinary”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="multiPolygonWellKnownBinaryValue" /> 必须具有二进制文件结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的几何多边形值。</returns>
      <param name="multiPolygonWellKnownBinaryValue">提供几何图形多边值的知名二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何图形多边值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multiPolygonWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="multiPolygonWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPolygonFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeometryMultiPolygonFromText”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="multiPolygonWellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的几何多边形值。</returns>
      <param name="multiPolygonWellKnownText">提供几何图形多边值的知名文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何图形多边值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multiPolygonWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="multiPolygonWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPointFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeometryPointFromBinary”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="pointWellKnownBinaryValue" /> 必须具有二进制文件结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的几何图形点值。</returns>
      <param name="pointWellKnownBinaryValue">提供几何图形点值的知名二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何图形点值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pointWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPointFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeometryPointFromText”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="pointWellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的几何图形点值。</returns>
      <param name="pointWellKnownText">提供几何图形点值的知名文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何图形点值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pointWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPolygonFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeometryPolygonFromBinary”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="polygonWellKnownBinaryValue" /> 必须具有二进制文件结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的几何多边形值。</returns>
      <param name="polygonWellKnownBinaryValue">提供几何图形边值的知名二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何图形边值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="polygonWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPolygonFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个用于调用规范“GeometryPolygonFromText”函数和指定参数的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。<paramref name="polygonWellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数结果类型。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>新 DbFunctionExpression 基于指定的值返回新的几何多边形值。</returns>
      <param name="polygonWellKnownText">提供几何图形边值的知名文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何图形边值的坐标系统的坐标系统 ID (SRID) 的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="polygonWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingAt(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范形式的 'InteriorRingAt' 函数。 第一个参数必须具有 Edm.Geometry 结果类型。 第二个参数必须具有一个整数数值结果类型。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它返回位于 <paramref name="geometryValue" /> 中位置 <paramref name="indexValue" /> 处的内环或 null（如果 <paramref name="geometryValue" /> 不是多边形）。</returns>
      <param name="geometryValue">几何图形值。</param>
      <param name="indexValue">一个表达式，在多边形中指定要检索的内环的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="indexValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingCount(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geometry 结果类型）调用规范 'InteriorRingCount' 函数。 表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它返回多边形 <paramref name="geometryValue" /> 中的内部圆环的数目或返回 null（如果 <paramref name="geometryValue" /> 不是多边形）。</returns>
      <param name="geometryValue">几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsClosedSpatial(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范 'IsClosedSpatial' 函数。 结果类型是 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 <paramref name="spatialValue" /> 是否为封闭的布尔值或 null（如果 <paramref name="spatialValue" /> 不是曲线）。</returns>
      <param name="spatialValue">一个表达式，指定空间曲线数值（应通过该值检索 IsClosedSpatial 值）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsEmptySpatial(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范 'IsEmptySpatial' 函数。 表达式的结果类型为 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 <paramref name="spatialValue" /> 是否为空的布尔值。</returns>
      <param name="spatialValue">一个表达式，指定空间数值（应通过该值检索 IsEmptySptiaal 值）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsRing(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geometry 结果类型）调用规范 'IsRing' 函数。 结果类型是 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 <paramref name="geometryValue" /> 是否为圆环（封闭和简单）的布尔值或返回 null（如果 <paramref name="geometryValue" /> 不是曲线）。</returns>
      <param name="geometryValue">一个表达式，指定几何曲线数值（应通过该值检索 IsRing 值）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsSimpleGeometry(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geometry 结果类型）调用规范 'IsSimpleGeometry' 函数。 表达式的结果类型为 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 <paramref name="geometryValue" /> 是否为简单几何图形的布尔值。</returns>
      <param name="geometryValue">几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsValidGeometry(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geometry 结果类型）调用规范 'IsValidGeometry' 函数。 表达式的结果类型为 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 <paramref name="geometryValue" /> 是否有效的布尔值。</returns>
      <param name="geometryValue">指定应为空间有效性测试的几何图形值的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Latitude(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geography 结果类型）调用规范 'Latitude' 函数。 表达式的结果类型为 Edm.Double。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="geographyValue" /> 的纬度值或返回 null（如果 <paramref name="geographyValue" /> 不是点）。</returns>
      <param name="geographyValue">一个表达式，指定地理点数值（应通过该值检索维度值）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Longitude(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geography 结果类型）调用规范 'Longitude' 函数。 表达式的结果类型为 Edm.Double。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="geographyValue" /> 的经度值或返回 null（如果 <paramref name="geographyValue" /> 不是点）。</returns>
      <param name="geographyValue">一个表达式，指定地理点数值（应通过该值检索经度值）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Measure(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范 'Measure' 函数。 表达式的结果类型为 Edm.Double。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="spatialValue" /> 的度量值或 null（如果 <paramref name="spatialValue" /> 不是点）。</returns>
      <param name="spatialValue">一个表达式，从应检索的度量值 (M) 坐标的值中指定空间点的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointAt(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范形式的 'PointAt' 函数。 第一个参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型。 第二个参数必须具有整数数值结果类型。 该表达式的结果类型与 <paramref name="spatialValue" /> 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="spatialValue" /> 中的位置 <paramref name="indexValue" /> 的点的数目或返回 null（如果 <paramref name="spatialValue" /> 不是行字符串）。</returns>
      <param name="spatialValue">一个表达式，指定空间行字符串的值。</param>
      <param name="indexValue">一个表达式，在行字符串中指定要检索的点的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
        <paramref name="indexValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointCount(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范 'PointCount' 函数。 表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="spatialValue" /> 中的点的数目或返回 null（如果 <paramref name="spatialValue" /> 不是行字符串）。</returns>
      <param name="spatialValue">一个表达式，在应检索的点数中指定空间行字符串值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointOnSurface(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geometry 结果类型）调用规范 'PointOnSurface' 函数。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它返回确保位于图面 <paramref name="geometryValue" /> 上的点或返回 null（如果 <paramref name="geometryValue" /> 不是图面）。</returns>
      <param name="geometryValue">一个表达式，指定几何表面数值（应通过该值检索这个点）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBoundary(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geometry 结果类型）调用规范 'SpatialBoundary' 函数。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="geometryValue" /> 的边界。</returns>
      <param name="geometryValue">一个表达式，指定几何数值（应通过该值检索 SpatialBoundary 值）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBuffer(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 和 Edm.Double 结果类型）调用规范“SpatialBuffer”函数。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它返回表示 <paramref name="spatialValue" /> 中的小于或等于 <paramref name="distance" /> 的所有点的几何值。</returns>
      <param name="spatialValue">一个表达式，指定空间值。</param>
      <param name="distance">一个指定缓冲距离的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
        <paramref name="distance" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
        <paramref name="distance" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialContains(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（每个参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范 'SpatialContains' 函数。 表达式的结果类型为 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 <paramref name="geometryValue1" /> 是否在空间上包含 <paramref name="geometryValue2" /> 的布尔值。</returns>
      <param name="geometryValue1">一个表达式，指定第一个几何值。</param>
      <param name="geometryValue2">指定应与 <paramref name="geometryValue1" /> 进行比较的几何值的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue1" />
        <paramref name="geometryValue2" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue1" />
        <paramref name="geometryValue2" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialConvexHull(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geometry 结果类型）调用规范 'SpatialConvexHull' 函数。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="geometryValue" /> 的凸包。</returns>
      <param name="geometryValue">一个表达式，指定几何数值（应通过该值检索凸包值）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialCrosses(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（每个参数必须具有 Edm.Geography 结果类型）调用规范 'SpatialCrosses' 函数。 表达式的结果类型为 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 <paramref name="geometryValue1" /> 是否与 <paramref name="geometryValue2" /> 相交的布尔值。</returns>
      <param name="geometryValue1">一个表达式，指定第一个几何值。</param>
      <param name="geometryValue2">指定应与 <paramref name="geometryValue1" /> 进行比较的几何值的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue1" />
        <paramref name="geometryValue2" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue1" />
        <paramref name="geometryValue2" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDifference(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（每个参数必须具有一个 Edm.Geography 或 Edm.Geometry 结果类型）调用规范 'SpatialDifference' 函数。 <paramref name="spatialValue1" /> 和 <paramref name="spatialValue2" /> 的结果类型必须相符。 该表达式的结果类型与 <paramref name="spatialValue1" /> 和 <paramref name="spatialValue2" /> 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它返回表示 <paramref name="spatialValue2" /> 与 <paramref name="spatialValue1" /> 之间的差异的几何值。</returns>
      <param name="spatialValue1">一个表达式，指定第一个空间值。</param>
      <param name="spatialValue2">指定应计算与 <paramref name="spatialValue1" /> 的差异的空间值的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDimension(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“SpatialDimension”函数。 表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="spatialValue" /> 中的维度值。</returns>
      <param name="spatialValue">一个表达式，指定一个数值，应通过该值检索 Dimension 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDisjoint(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（每个参数必须具有一个 Edm.Geography 或 Edm.Geometry 结果类型）调用规范 'SpatialDisjoint' 函数。 <paramref name="spatialValue1" /> 和 <paramref name="spatialValue2" /> 的结果类型必须相符。 表达式的结果类型为 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 <paramref name="spatialValue1" /> 和 <paramref name="spatialValue2" /> 是否在空间上不连续的布尔值。</returns>
      <param name="spatialValue1">一个表达式，指定第一个空间值。</param>
      <param name="spatialValue2">指定应与 <paramref name="spatialValue1" /> 比较非相交性的空间值的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementAt(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范形式的 'SpatialElementAt' 函数。 第一个参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型。 第二个参数必须具有整数数值结果类型。 该表达式的结果类型与 <paramref name="spatialValue" /> 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它返回位于 <paramref name="spatialValue" /> 中位置 <paramref name="indexValue" /> 处的集合元素或 null（如果 <paramref name="spatialValue" /> 不是集合）。</returns>
      <param name="spatialValue">一个表达式，指定地理或几何图形集合值。</param>
      <param name="indexValue">一个表达式，在几何图形或地理集合中指定要检索的元素的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
        <paramref name="indexValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementCount(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“SpatialElementCount”函数。 表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="spatialValue" /> 中的元素的数目，或返回 null（如果 <paramref name="spatialValue" /> 不是集合）。</returns>
      <param name="spatialValue">一个表达式，在应检索的元素数中指定地理或几何图形集合值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEnvelope(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geometry 结果类型）调用规范 'SpatialEnvelope' 函数。 表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="geometryValue" /> 的最小边界框。</returns>
      <param name="geometryValue">一个表达式，指定一个数值，应通过该值检索 Envelope 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEquals(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（每个参数必须具有一个 Edm.Geography 或 Edm.Geometry 结果类型）调用规范 'SpatialEquals' 函数。 <paramref name="spatialValue1" /> 和 <paramref name="spatialValue2" /> 的结果类型必须相符。 表达式的结果类型为 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 <paramref name="spatialValue1" /> 和 <paramref name="spatialValue2" /> 是否相等的布尔值。</returns>
      <param name="spatialValue1">一个表达式，指定第一个空间值。</param>
      <param name="spatialValue2">指定应与 <paramref name="spatialValue1" /> 比较是否相等的空间值的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersection(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（每个参数必须具有一个 Edm.Geography 或 Edm.Geometry 结果类型）调用规范 'SpatialIntersection' 函数。 <paramref name="spatialValue1" /> 和 <paramref name="spatialValue2" /> 的结果类型必须相符。 该表达式的结果类型与 <paramref name="spatialValue1" /> 和 <paramref name="spatialValue2" /> 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它返回表示 <paramref name="spatialValue1" /> 和 <paramref name="spatialValue2" /> 的交集的空间值。</returns>
      <param name="spatialValue1">一个表达式，指定第一个空间值。</param>
      <param name="spatialValue2">指定应计算与 <paramref name="spatialValue1" /> 的交集的空间值的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersects(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（每个参数必须具有一个 Edm.Geography 或 Edm.Geometry 结果类型）调用规范 'SpatialIntersects' 函数。 <paramref name="spatialValue1" /> 和 <paramref name="spatialValue2" /> 的结果类型必须相符。 表达式的结果类型为 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 <paramref name="spatialValue1" /> 和 <paramref name="spatialValue2" /> 是否相交的布尔值。</returns>
      <param name="spatialValue1">一个表达式，指定第一个空间值。</param>
      <param name="spatialValue2">指定应与 <paramref name="spatialValue1" /> 比较交集的空间值的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialLength(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范 'SpatialLength' 函数。 表达式的结果类型为 Edm.Double。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="spatialValue" /> 的长度或返回 null（如果 <paramref name="spatialValue" /> 不是曲线）。</returns>
      <param name="spatialValue">一个表达式，指定空间曲线数值（应通过该值检索长度）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialOverlaps(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（每个参数必须具有 Edm.Geometry 结果类型）调用规范 'SpatialOverlaps' 函数。 表达式的结果类型为 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 <paramref name="geometryValue1" /> 是否在空间上与 <paramref name="geometryValue2" /> 重叠的布尔值。</returns>
      <param name="geometryValue1">一个表达式，指定第一个几何值。</param>
      <param name="geometryValue2">指定应与 <paramref name="geometryValue1" /> 进行比较的几何值的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue1" />
        <paramref name="geometryValue2" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue1" />
        <paramref name="geometryValue2" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialRelate(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（参数必须具有 Edm.Geometry 和字符串结果类型）调用规范 'SpatialRelate' 函数。 表达式的结果类型为 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回依据 <paramref name="intersectionPatternMatrix" /> 指定的空间关系指示 <paramref name="geometryValue1" /> 在空间上是否与 <paramref name="geometryValue2" /> 相关的布尔值。</returns>
      <param name="geometryValue1">一个表达式，指定第一个几何值。</param>
      <param name="geometryValue2">指定应与 <paramref name="geometryValue1" /> 进行比较的几何值的表达式。</param>
      <param name="intersectionPatternMatrix">指定用于比较 <paramref name="geometryValue1" /> 和 <paramref name="geometryValue2" /> 的 Dimensionally Extended Nine-Intersection Model (DE-9IM) 交集模式的文本表示形式的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue1" />
        <paramref name="geometryValue2" />
        <paramref name="intersectionPatternMatrix" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue1" />
        <paramref name="geometryValue2" />
        <paramref name="intersectionPatternMatrix" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialSymmetricDifference(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（每个参数必须具有一个 Edm.Geography 或 Edm.Geometry 结果类型）调用规范 'SpatialSymmetricDifference' 函数。 <paramref name="spatialValue1" /> 和 <paramref name="spatialValue2" /> 的结果类型必须相符。 该表达式的结果类型与 <paramref name="spatialValue1" /> 和 <paramref name="spatialValue2" /> 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它返回表示 <paramref name="spatialValue2" /> 与 <paramref name="spatialValue1" /> 的对称差异的几何值。</returns>
      <param name="spatialValue1">一个表达式，指定第一个空间值。</param>
      <param name="spatialValue2">指定应计算与 <paramref name="spatialValue1" /> 的对称差异的空间值的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTouches(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（每个参数必须具有 Edm.Geography 结果类型）调用规范 'SpatialTouches' 函数。 表达式的结果类型为 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 <paramref name="geometryValue1" /> 是否与 <paramref name="geometryValue2" /> 接触的布尔值。</returns>
      <param name="geometryValue1">一个表达式，指定第一个几何值。</param>
      <param name="geometryValue2">指定应与 <paramref name="geometryValue1" /> 进行比较的几何值的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue1" />
        <paramref name="geometryValue2" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue1" />
        <paramref name="geometryValue2" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTypeName(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范 'SpatialTypeName' 函数。 表达式的结果类型为 Edm.String。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="spatialValue" /> 中的字符串 Geometry Type 名称。</returns>
      <param name="spatialValue">一个表达式，指定一个值（应通过该值检索几何类型名称）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialUnion(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（每个参数必须具有一个 Edm.Geography 或 Edm.Geometry 结果类型）调用规范 'SpatialUnion' 函数。 <paramref name="spatialValue1" /> 和 <paramref name="spatialValue2" /> 的结果类型必须相符。 该表达式的结果类型与 <paramref name="spatialValue1" /> 和 <paramref name="spatialValue2" /> 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它返回表示 <paramref name="spatialValue1" /> 和 <paramref name="spatialValue2" /> 的联合的空间值。</returns>
      <param name="spatialValue1">一个表达式，指定第一个空间值。</param>
      <param name="spatialValue2">指定应计算与 <paramref name="spatialValue1" /> 的并集的空间值的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialWithin(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（每个参数必须具有 Edm.Geography 结果类型）调用规范 'SpatialWithin' 函数。 表达式的结果类型为 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 <paramref name="geometryValue1" /> 是否在空间上位于 <paramref name="geometryValue2" /> 内的布尔值。</returns>
      <param name="geometryValue1">一个表达式，指定第一个几何值。</param>
      <param name="geometryValue2">指定应与 <paramref name="geometryValue1" /> 进行比较的几何值的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue1" />
        <paramref name="geometryValue2" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue1" />
        <paramref name="geometryValue2" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.StartPoint(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“StartPoint”函数。 该结果类型与 <paramref name="spatialValue" /> 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="spatialValue" /> 的起点或 null（如果 <paramref name="spatialValue" /> 不是曲线）。</returns>
      <param name="spatialValue">一个表达式，指定空间曲线数值（应通过该值检索起始点）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.XCoordinate(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geometry 结果类型）调用规范 'XCoordinate' 函数。 表达式的结果类型为 Edm.Double。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="geometryValue" /> 的 X 坐标值或返回 null（如果 <paramref name="geometryValue" /> 不是点）。</returns>
      <param name="geometryValue">一个表达式，从应检索的 X 坐标值中指定几何图形点值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.YCoordinate(System.Data.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geometry 结果类型）调用规范 'YCoordinate' 函数。 表达式的结果类型为 Edm.Double。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="geometryValue" /> 的 Y 坐标值或返回 null（如果 <paramref name="geometryValue" /> 不是点）。</returns>
      <param name="geometryValue">一个表达式，从应检索的 Y 坐标值中指定几何图形点值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="T:System.Data.Common.EntitySql.EntitySqlParser">
      <summary>表示公共 EntitySQL 分析器类。</summary>
    </member>
    <member name="M:System.Data.Common.EntitySql.EntitySqlParser.Parse(System.String,System.Data.Common.CommandTrees.DbParameterReferenceExpression[])">
      <summary>使用指定的 <paramref name="parameters" /> 分析指定的 <paramref name="query" />。</summary>
      <returns>
        <see cref="T:System.Data.Common.EntitySql.ParseResult" /> 包含 <see cref="T:System.Data.Common.CommandTrees.DbCommandTree" /> 和说明内联函数定义的信息（如果有）。</returns>
      <param name="query">要分析的 EntitySQL 查询。</param>
      <param name="parameters">可选查询参数。</param>
    </member>
    <member name="M:System.Data.Common.EntitySql.EntitySqlParser.ParseLambda(System.String,System.Data.Common.CommandTrees.DbVariableReferenceExpression[])">
      <summary>使用特定设置 <paramref name="variables" /> 分析特定 <paramref name="query" /> 并生成 <see cref="T:System.Data.Common.CommandTrees.DbLambda" />。</summary>
      <returns>
        <see cref="T:System.Data.Common.EntitySql.ParseResult" /> 包含 <see cref="T:System.Data.Common.CommandTrees.DbCommandTree" /> 和说明内联函数定义的信息（如果有）。</returns>
      <param name="query">待分析的查询。</param>
      <param name="variables">可选查询变量。</param>
    </member>
    <member name="T:System.Data.Common.EntitySql.FunctionDefinition">
      <summary>实体 SQL 查询内联函数定义，作为 <see cref="T:System.Data.Common.EntitySql.ParseResult" /> 的一部分返回。</summary>
    </member>
    <member name="P:System.Data.Common.EntitySql.FunctionDefinition.EndPosition">
      <summary>eSQL 查询文本中函数定义的结束位置。</summary>
    </member>
    <member name="P:System.Data.Common.EntitySql.FunctionDefinition.Lambda">
      <summary>函数体和参数。</summary>
    </member>
    <member name="P:System.Data.Common.EntitySql.FunctionDefinition.Name">
      <summary>函数名。</summary>
    </member>
    <member name="P:System.Data.Common.EntitySql.FunctionDefinition.StartPosition">
      <summary>eSQL 查询文本中函数定义的起始位置。</summary>
    </member>
    <member name="T:System.Data.Common.EntitySql.ParseResult">
      <summary>SQL 实体分析器结果信息。</summary>
    </member>
    <member name="P:System.Data.Common.EntitySql.ParseResult.CommandTree">
      <summary>在分析过程中生成的命令目录树。</summary>
    </member>
    <member name="P:System.Data.Common.EntitySql.ParseResult.FunctionDefinitions">
      <summary>描述查询内联函数定义的 <see cref="T:System.Data.Common.EntitySql.FunctionDefinition" /> 对象的列表。</summary>
    </member>
    <member name="T:System.Data.EntityClient.EntityCommand">
      <summary>表示概念层的命令。</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.#ctor">
      <summary>使用指定的值初始化 <see cref="T:System.Data.EntityClient.EntityCommand" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.#ctor(System.String)">
      <summary>使用指定的语句初始化 <see cref="T:System.Data.EntityClient.EntityCommand" /> 类的新实例。</summary>
      <param name="statement">命令的文本。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.#ctor(System.String,System.Data.EntityClient.EntityConnection)">
      <summary>用指定的语句和连接初始化 <see cref="T:System.Data.EntityClient.EntityCommand" /> 类的新实例。</summary>
      <param name="statement">命令的文本。</param>
      <param name="connection">与数据源的连接。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.#ctor(System.String,System.Data.EntityClient.EntityConnection,System.Data.EntityClient.EntityTransaction)">
      <summary>用指定的语句，连接和事务初始化 <see cref="T:System.Data.EntityClient.EntityCommand" /> 类的新实例。</summary>
      <param name="statement">命令的文本。</param>
      <param name="connection">与数据源的连接。</param>
      <param name="transaction">在其中执行命令的事务。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.Cancel">
      <summary>取消执行 <see cref="T:System.Data.EntityClient.EntityCommand" />。</summary>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.CommandText">
      <summary>获取或设置指定要执行的命令或存储过程的 Entity SQL 语句。</summary>
      <returns>要执行的指定命令或存储过程的 Entity SQL 语句。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.CommandTimeout">
      <summary>获取或设置超时前等待的时间。</summary>
      <returns>等待命令执行的时间（以秒为单位）。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.CommandTree">
      <summary>获取或设置要执行的命令树；只能设置命令树或命令文本其中之一，而不能同时设置二者。</summary>
      <returns>要执行的命令树。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.CommandType">
      <summary>获取或设置一个值，该值指示如何解释 <see cref="P:System.Data.EntityClient.EntityCommand.CommandText" /> 属性。</summary>
      <returns>
        <see cref="T:System.Data.CommandType" /> 枚举值之一。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.Connection">
      <summary>获取或设置由 <see cref="T:System.Data.EntityClient.EntityCommand" /> 使用的 <see cref="T:System.Data.EntityClient.EntityConnection" />。</summary>
      <returns>由实体命令使用的连接。</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.CreateParameter">
      <summary>创建 <see cref="T:System.Data.EntityClient.EntityParameter" /> 对象的新实例。</summary>
      <returns>
        <see cref="T:System.Data.EntityClient.EntityParameter" /> 对象的一个新实例。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.DesignTimeVisible">
      <summary>获取或设置一个值，该值指示命令对象在 Windows 窗体设计器控件中是否应可见。</summary>
      <returns>如果该命令对象应在 Windows 窗体设计器控件中可见，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.EnablePlanCaching">
      <summary>获取或设置一个值，该值指示查询计划缓存是否启用。</summary>
      <returns>如果启用查询计划缓存，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.ExecuteNonQuery">
      <summary>执行当前命令。</summary>
      <returns>受影响的行数。</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.ExecuteReader">
      <summary>执行命令并返回一个数据读取器。</summary>
      <returns>包含结果的 <see cref="T:System.Data.EntityClient.EntityDataReader" />。</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>将 <see cref="P:System.Data.EntityClient.EntityCommand.CommandText" /> 编译到命令树，并将其传递到基础存储区提供程序以执行，然后在使用指定的 <see cref="T:System.Data.CommandBehavior" /> 生成的结果集外生成一个 <see cref="T:System.Data.EntityClient.EntityDataReader" />。</summary>
      <returns>包含结果的 <see cref="T:System.Data.EntityClient.EntityDataReader" />。</returns>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.ExecuteScalar">
      <summary>执行命令，并返回结果集中第一行的第一列。 忽略其他列或行。</summary>
      <returns>结果集中第一行的第一列；如果结果集为空，则为空引用（在 Visual Basic 中为 Nothing）。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.Parameters">
      <summary>获取 Entity SQL 语句的参数或存储过程。</summary>
      <returns>Entity SQL 语句的参数或存储过程。</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.Prepare">
      <summary>编译实体级别的命令并创建该命令的准备版本。</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.ToTraceString">
      <summary>编译实体级别的命令并返回存储命令文本。</summary>
      <returns>存储命令文本。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.Transaction">
      <summary>获取或设置 <see cref="T:System.Data.SqlClient.SqlCommand" /> 在其中执行的事务。</summary>
      <returns>在其中执行 <see cref="T:System.Data.SqlClient.SqlCommand" /> 的事务。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.UpdatedRowSource">
      <summary>获取或设置如何向正在更新的行应用命令结果的方式。</summary>
      <returns>
        <see cref="T:System.Data.UpdateRowSource" /> 值之一。</returns>
    </member>
    <member name="T:System.Data.EntityClient.EntityConnection">
      <summary>包含对概念模型和数据源连接的引用。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.#ctor">
      <summary>初始化 <see cref="T:System.Data.EntityClient.EntityConnection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)">
      <summary>使用指定的 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 和 <see cref="T:System.Data.Common.DbConnection" /> 初始化 <see cref="T:System.Data.EntityClient.EntityConnection" /> 类的新实例。</summary>
      <param name="workspace">要与此 <see cref="T:System.Data.EntityClient.EntityConnection" /> 关联的 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />。</param>
      <param name="connection">此 <see cref="T:System.Data.EntityClient.EntityConnection" /> 对象的基础数据源连接。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="workspace" /> 或 <paramref name="connection" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">工作区缺少概念性模型。 - 或 - 工作区缺少映射文件。 - 或 - 工作区缺少存储模型。 - 或 - <paramref name="connection" /> 不处于已关闭状态。</exception>
      <exception cref="T:System.Data.ProviderIncompatibleException">
        <paramref name="connection" /> 并非来自与 ADO.NET Entity Framework 兼容的提供程序。</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.#ctor(System.String)">
      <summary>基于连接字符串初始化 <see cref="T:System.Data.EntityClient.EntityConnection" /> 类的新实例。</summary>
      <param name="connectionString">特定于提供程序的连接字符串。</param>
      <exception cref="T:System.ArgumentException">提供的连接字符串关键字无效，或未提供所需的连接字符串关键字。</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.BeginTransaction">
      <summary>使用基础提供程序开始一个事务。</summary>
      <returns>一个新的 <see cref="T:System.Data.EntityClient.EntityTransaction" />。 返回的 <see cref="T:System.Data.EntityClient.EntityTransaction" /> 实例稍后可以与 <see cref="T:System.Data.EntityClient.EntityCommand" /> 关联以执行该事务下的命令。</returns>
      <exception cref="T:System.InvalidOperationException">基础提供程序未知。 - 或 - 对已具有当前事务的 <see cref="T:System.Data.EntityClient.EntityConnection" /> 调用 <see cref="M:System.Data.EntityClient.EntityConnection.BeginTransaction" />。 - 或 - <see cref="T:System.Data.EntityClient.EntityConnection" /> 的状态不是 <see cref="F:System.Data.ConnectionState.Open" />。</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>使用基础提供程序开始一个具有指定隔离级别的事务。</summary>
      <returns>一个新的 <see cref="T:System.Data.EntityClient.EntityTransaction" />。 返回的 <see cref="T:System.Data.EntityClient.EntityTransaction" /> 实例稍后可以与 <see cref="T:System.Data.EntityClient.EntityCommand" /> 关联以执行该事务下的命令。</returns>
      <param name="isolationLevel">事务的隔离级别。</param>
      <exception cref="T:System.InvalidOperationException">基础提供程序未知。 - 或 - 对已具有当前事务的 <see cref="T:System.Data.EntityClient.EntityConnection" /> 调用 <see cref="M:System.Data.EntityClient.EntityConnection.BeginTransaction" />。 - 或 - <see cref="T:System.Data.EntityClient.EntityConnection" /> 的状态不是 <see cref="F:System.Data.ConnectionState.Open" />。</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.ChangeDatabase(System.String)">
      <summary>不支持。</summary>
      <param name="databaseName">不支持。</param>
      <exception cref="T:System.NotSupportedException">调用该方法时。</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.Close">
      <summary>关闭与数据库的连接。</summary>
      <exception cref="T:System.InvalidOperationException">关闭连接时出错。</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.ConnectionString">
      <summary>获取或设置 <see cref="T:System.Data.EntityClient.EntityConnection" /> 连接字符串。</summary>
      <returns>建立到数据源的初始连接所需的连接字符串。 默认值为空字符串。 在关闭的连接上，将返回当前设置的值。 如果没有设置值，则返回空字符串。</returns>
      <exception cref="T:System.InvalidOperationException">用户尝试在初始化 <see cref="EntityConnection" /> 的 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 后设置 <see cref="P:System.Data.EntityClient.EntityConnection.ConnectionString" /> 属性。 在通过重载（此重载将 <see cref="MetadataWorkspace" /> 作为参数）构造 <see cref="EntityConnection" /> 实例，或者打开 <see cref="T:System.Data.EntityClient.EntityConnection" /> 实例时，初始化 <see cref="MetadataWorkspace" />。</exception>
      <exception cref="T:System.ArgumentException">提供的连接字符串关键字无效，或未提供所需的连接字符串关键字。</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.ConnectionTimeout">
      <summary>获取从尝试建立连接到结束尝试并生成错误需要等待的秒数。</summary>
      <returns>等待连接打开的时间（以秒为单位）。 默认值为基础数据提供程序的默认超时值。</returns>
      <exception cref="T:System.ArgumentException">所设置的值小于 0。</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.CreateCommand">
      <summary>创建 <see cref="T:System.Data.EntityClient.EntityCommand" /> 的新实例，并将 <see cref="P:System.Data.EntityClient.EntityCommand.Connection" /> 设置为此 <see cref="T:System.Data.EntityClient.EntityConnection" />。</summary>
      <returns>
        <see cref="T:System.Data.EntityClient.EntityCommand" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">基础数据提供程序的名称未知。</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.Database">
      <summary>获取当前数据库的名称或打开连接后将使用的数据库的名称。</summary>
      <returns>基础数据提供程序的 Database 属性的值。</returns>
      <exception cref="T:System.InvalidOperationException">基础数据提供程序未知。</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.DataSource">
      <summary>获取要连接到的数据源的名称或网络地址。</summary>
      <returns>数据源的名称。 默认值为空字符串。</returns>
      <exception cref="T:System.InvalidOperationException">基础数据提供程序未知。</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>在指定的事务中登记此 <see cref="T:System.Data.EntityClient.EntityConnection" />。</summary>
      <param name="transaction">要在其中进行登记的事务对象。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.EntityClient.EntityConnection" /> 的状态不是 <see cref="F:System.Data.ConnectionState.Open" />。</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace">
      <summary>返回与此 <see cref="T:System.Data.EntityClient.EntityConnection" /> 关联的 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />。</summary>
      <returns>与此 <see cref="T:System.Data.EntityClient.EntityConnection" /> 关联的 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />。</returns>
      <exception cref="T:System.Data.MetadataException">内联连接字符串包含一个无效的 Metadata 关键字值。</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.Open">
      <summary>通过调用基础数据提供程序的 Open 方法，建立与数据源的连接。</summary>
      <exception cref="T:System.InvalidOperationException">打开连接时出错，或基础数据提供程序的名称未知。</exception>
      <exception cref="T:System.Data.MetadataException">内联连接字符串包含一个无效的 Metadata 关键字值。</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.ServerVersion">
      <summary>获取一个字符串，该字符串包含客户端连接到的数据源的版本。</summary>
      <returns>提供程序连接字符串中包含的数据源的版本。</returns>
      <exception cref="T:System.InvalidOperationException">连接处于关闭状态。</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.State">
      <summary>如果 <see cref="T:System.Data.EntityClient.EntityConnection" /> 打开，则获取基础提供程序的 <see cref="T:System.Data.ConnectionState" /> 属性。 否则返回 <see cref="F:System.Data.ConnectionState.Closed" />。</summary>
      <returns>当且仅当 <see cref="T:System.Data.EntityClient.EntityConnection" /> 的内部状态和基础提供程序的 <see cref="T:System.Data.ConnectionState" /> 处于打开状态时，返回 <see cref="F:System.Data.ConnectionState.Open" />。 如果 <see cref="T:System.Data.EntityClient.EntityConnection" /> 处于打开状态，但提供程序的 <see cref="T:System.Data.ConnectionState" /> 处于关闭状态，则此属性返回 <see cref="F:System.Data.ConnectionState.Broken" />。 否则，该调用将返回 <see cref="F:System.Data.ConnectionState.Closed" />。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.StoreConnection">
      <summary>提供对 <see cref="T:System.Data.EntityClient.EntityConnection" /> 对象使用的基础数据源连接的访问。</summary>
      <returns>数据源连接的 <see cref="T:System.Data.Common.DbConnection" />。</returns>
    </member>
    <member name="T:System.Data.EntityClient.EntityConnectionStringBuilder">
      <summary>为创建和管理连接字符串（由 EntityClient 使用）的内容提供了一种简单方法。</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.#ctor(System.String)">
      <summary>使用提供的连接字符串初始化 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 类的新实例。</summary>
      <param name="connectionString">用于连接到基础数据源的特定于提供程序的连接字符串。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.Clear">
      <summary>清除 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 实例的内容。</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.ContainsKey(System.String)">
      <summary>确定 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 是否包含特定键。</summary>
      <returns>如果 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 包含具有指定键的元素，则返回 true；否则返回 false。</returns>
      <param name="keyword">要在 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 中定位的键。</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 的大小是否是固定的。</summary>
      <returns>在所有情况下都返回 true，因为 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 提供一组固定大小的关键字/值对。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.Item(System.String)">
      <summary>获取或设置与指定的键相关联的值。 在 C# 中，此属性为索引器。</summary>
      <returns>与指定的键相关联的值。</returns>
      <param name="keyword">要获取或设置的项的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">尝试添加的键在可用键中不存在。</exception>
      <exception cref="T:System.FormatException">连接字符串中存在无效的值（具体而言，未提供所需的布尔值或数值）。</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.Keys">
      <summary>获取一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 中的键。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 中的键。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.Metadata">
      <summary>获取或设置连接字符串中的元数据位置。</summary>
      <returns>获取或设置连接字符串中的元数据位置。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.Name">
      <summary>获取或设置配置文件中定义的节的名称。</summary>
      <returns>配置文件中节的名称。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.Provider">
      <summary>获取或设置连接字符串中基础 .NET Framework 数据提供程序的名称。</summary>
      <returns>基础 .NET Framework 数据提供程序的固定名称。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.ProviderConnectionString">
      <summary>获取或设置特定于提供程序的内部连接字符串。</summary>
      <returns>特定于提供程序的内部连接字符串。</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.Remove(System.String)">
      <summary>移除 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 实例中具有指定键的项。</summary>
      <returns>如果该键存在于连接字符串中并且已删除，则返回 true；如果该键不存在，则返回 false。</returns>
      <param name="keyword">要从此 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 中的连接字符串中移除的关键字/值对的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 null（在 Visual Basic 中为 Nothing）</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>从此 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 中检索与所提供的键对应的值。</summary>
      <returns>如果在连接字符串中找到 <paramref name="keyword" />，则返回 true；否则返回 false。</returns>
      <param name="keyword">要检索的项的键。</param>
      <param name="value">与 <paramref name="keyword." /> 对应的值</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 包含一个 null 值（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="T:System.Data.EntityClient.EntityDataReader">
      <summary>从数据源读取行的一个只进流。</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.Close">
      <summary>关闭 <see cref="T:System.Data.EntityClient.EntityDataReader" /> 对象。</summary>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.DataRecordInfo">
      <summary>获取此 <see cref="T:System.Data.IExtendedDataRecord" /> 的 <see cref="T:System.Data.Common.DataRecordInfo" />。</summary>
      <returns>数据记录信息。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.Depth">
      <summary>获取一个值，该值指示当前行的嵌套深度。</summary>
      <returns>当前行的嵌套深度。</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.Dispose(System.Boolean)">
      <summary>释放此 <see cref="T:System.Data.EntityClient.EntityDataReader" /> 使用的资源并调用 <see cref="M:System.Data.EntityClient.EntityDataReader.Close" />。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.FieldCount">
      <summary>获取当前行中的列数。</summary>
      <returns>当前行中的列数。</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetBoolean(System.Int32)">
      <summary>获取指定列的布尔值形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetByte(System.Int32)">
      <summary>获取指定列的字节形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>从指定列读取一个字节流（从 <paramref name="dataIndex" /> 指示的位置开始），读到缓冲区中（从 <paramref name="bufferIndex" /> 指示的位置开始）。</summary>
      <returns>读取的实际字节数。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="dataOffset">行中的索引，从其开始读取操作。</param>
      <param name="buffer">作为数据复制目标的缓冲区。</param>
      <param name="bufferOffset">具有作为数据复制目标的缓冲区的索引。</param>
      <param name="length">最多读取的字符数。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetChar(System.Int32)">
      <summary>获取指定列的单个字符串形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>从指定列读取一个字符流，从 <paramref name="dataIndex" /> 指示的位置开始，读到缓冲区中，从 <paramref name="bufferIndex" /> 指示的位置开始。</summary>
      <returns>读取的实际字符数。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="dataOffset">行中的索引，从其开始读取操作。</param>
      <param name="buffer">作为数据复制目标的缓冲区。</param>
      <param name="bufferOffset">具有作为数据复制目标的缓冲区的索引。</param>
      <param name="length">最多读取的字符数。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDataReader(System.Int32)">
      <summary>以 <see cref="T:System.Data.Common.DbDataReader" /> 对象的形式返回嵌套的读取器。</summary>
      <returns>为 <see cref="T:System.Data.Common.DbDataReader" /> 对象的嵌套读取器。</returns>
      <param name="i">列的序号。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDataRecord(System.Int32)">
      <summary>返回嵌套的 <see cref="T:System.Data.Common.DbDataRecord" />。</summary>
      <returns>嵌套数据记录。</returns>
      <param name="i">要返回的 DbDataRecord 数。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDataTypeName(System.Int32)">
      <summary>获取指定列的数据类型的名称。</summary>
      <returns>数据类型的名称。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDateTime(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.DateTime" /> 对象形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDbDataReader(System.Int32)">
      <summary>返回被请求的列序号的 <see cref="T:System.Data.Common.DbDataReader" /> 对象，可以使用提供程序特定的实现对该对象进行重写。</summary>
      <returns>数据读取器。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDecimal(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Decimal" /> 对象形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDouble(System.Int32)">
      <summary>获取指定列的双精度浮点数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetEnumerator">
      <summary>返回一个 <see cref="T:System.Collections.IEnumerator" />，可用于循环访问数据读取器中的行。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" />，可用于循环访问数据读取器中的行。</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetFieldType(System.Int32)">
      <summary>获取指定列的数据类型。</summary>
      <returns>指定列的数据类型。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetFloat(System.Int32)">
      <summary>获取指定列的单精度浮点数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetGuid(System.Int32)">
      <summary>获取指定列的全局唯一标识符 (GUID) 形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetInt16(System.Int32)">
      <summary>获取指定列的 16 位有符号整数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetInt32(System.Int32)">
      <summary>获取指定列的 32 位有符号整数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetInt64(System.Int32)">
      <summary>获取指定列的 64 位有符号整数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetName(System.Int32)">
      <summary>给定了从零开始的列序号时，获取列的名称。</summary>
      <returns>指定列的名称。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetOrdinal(System.String)">
      <summary>给定列名称时，获取列序号。</summary>
      <returns>从零开始的列序号。</returns>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名称。</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>返回指定列的提供程序特定的字段类型。</summary>
      <returns>描述指定列的数据类型的 <see cref="T:System.Type" /> 对象。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetProviderSpecificValue(System.Int32)">
      <summary>获取指定列的作为 <see cref="T:System.Object" /> 的实例的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetProviderSpecificValues(System.Object[])">
      <summary>获取集合中当前行的所有提供程序特定的特性列。</summary>
      <returns>数组中 <see cref="T:System.Object" /> 的实例的数目。</returns>
      <param name="values">要将特性列复制到其中的 <see cref="T:System.Object" /> 数组。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetSchemaTable">
      <summary>返回一个 <see cref="T:System.Data.DataTable" />，它描述 <see cref="T:System.Data.Common.DbDataReader" /> 的列元数据。</summary>
      <returns>一个描述列元数据的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetString(System.Int32)">
      <summary>获取指定列的作为 <see cref="T:System.String" /> 的实例的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetValue(System.Int32)">
      <summary>获取指定列的作为 <see cref="T:System.Object" /> 的实例的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetValues(System.Object[])">
      <summary>使用当前行的列值来填充对象数组。</summary>
      <returns>数组中 <see cref="T:System.Object" /> 的实例的数目。</returns>
      <param name="values">要将特性列复制到其中的 <see cref="T:System.Object" /> 数组。</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.HasRows">
      <summary>获取一个值，它指示此 <see cref="T:System.Data.EntityClient.EntityDataReader" /> 是否包含一个或多个行。</summary>
      <returns>如果 <see cref="T:System.Data.EntityClient.EntityDataReader" /> 包含一行或多行，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.IsClosed">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.EntityClient.EntityDataReader" /> 是否已关闭。</summary>
      <returns>如果 <see cref="T:System.Data.EntityClient.EntityDataReader" /> 已关闭，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.IsDBNull(System.Int32)">
      <summary>获取一个值，该值指示列中是否包含不存在的或已丢失的值。</summary>
      <returns>如果指定的列与 <see cref="T:System.DBNull" /> 等效，则为 true；否则，为 false。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.Item(System.Int32)">
      <summary>获取指定列的作为 <see cref="T:System.Object" /> 的实例的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.Item(System.String)">
      <summary>获取指定列的作为 <see cref="T:System.Object" /> 的实例的值。</summary>
      <returns>指定列的值。</returns>
      <param name="name">列的名称。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.NextResult">
      <summary>读取批处理语句的结果时，使读取器前进到下一个结果。</summary>
      <returns>如果存在多个结果集，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.Read">
      <summary>将读取器前进到结果集中的下一个记录。</summary>
      <returns>如果存在多个行，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.RecordsAffected">
      <summary>通过执行 SQL 语句获取更改、插入或删除的行数。</summary>
      <returns>更改、插入或删除的行数。 如果是 SELECT 语句，则返回 -1；如果未影响任何行或语句失败，则返回 0。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.VisibleFieldCount">
      <summary>获取 <see cref="T:System.Data.EntityClient.EntityDataReader" /> 中未隐藏的字段的数目。</summary>
      <returns>未隐藏的字段的数目。</returns>
    </member>
    <member name="T:System.Data.EntityClient.EntityParameter">
      <summary>表示 EntityCommand 中使用的参数。</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.#ctor">
      <summary>用默认值初始化 <see cref="T:System.Data.EntityClient.EntityParameter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType)">
      <summary>使用指定的参数名称、数据类型初始化 <see cref="T:System.Data.EntityClient.EntityParameter" /> 类的新实例。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="dbType">
        <see cref="T:System.Data.DbType" /> 值之一。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32)">
      <summary>使用指定的参数名称、数据类型和大小初始化 <see cref="T:System.Data.EntityClient.EntityParameter" /> 类的新实例。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="dbType">
        <see cref="T:System.Data.DbType" /> 值之一。</param>
      <param name="size">参数的大小。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
      <summary>使用指定的 <see cref="" /> 属性初始化 T:System.Data.EntityClient.EntityParameter 类的新实例。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="dbType">
        <see cref="T:System.Data.DbType" /> 值之一。</param>
      <param name="size">参数的大小。</param>
      <param name="direction">
        <see cref="T:System.Data.ParameterDirection" /> 值之一。</param>
      <param name="isNullable">true 指示该参数接受空值；否则为 false。</param>
      <param name="precision">用于表示值的位数。</param>
      <param name="scale">要解析其值的小数位数。</param>
      <param name="sourceColumn">源列的名称。</param>
      <param name="sourceVersion">
        <see cref="T:System.Data.DataRowVersion" /> 值之一。</param>
      <param name="value">参数值。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String)">
      <summary>使用指定的 <see cref="" /> 属性初始化 T:System.Data.EntityClient.EntityParameter 类的新实例。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="dbType">
        <see cref="T:System.Data.DbType" /> 值之一。</param>
      <param name="size">参数的大小。</param>
      <param name="sourceColumn">源列的名称。</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.DbType">
      <summary>获取或设置参数的 <see cref="T:System.Data.DbType" />。</summary>
      <returns>
        <see cref="T:System.Data.DbType" /> 值之一。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.Direction">
      <summary>获取或设置参数的方向。</summary>
      <returns>
        <see cref="T:System.Data.ParameterDirection" /> 值之一。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.EdmType">
      <summary>获取或设置表示为为 EdmType 的参数类型。</summary>
      <returns>作为 Edm 类型的值的参数类型。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.IsNullable">
      <summary>获取或设置一个值，该值指示参数是否接受空值。</summary>
      <returns>如果接受 null 值，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.ParameterName">
      <summary>获取或设置实体参数的名称。</summary>
      <returns>实体参数的名称。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.Precision">
      <summary>获取或设置用来表示 <see cref="P:System.Data.EntityClient.EntityParameter.Value" /> 属性的最大位数。</summary>
      <returns>用于表示值的位数。</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.ResetDbType">
      <summary>重置与此 <see cref="T:System.Data.EntityClient.EntityParameter" /> 关联的类型。</summary>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.Scale">
      <summary>获取或设置 <see cref="P:System.Data.EntityClient.EntityParameter.Value" /> 解析为的小数位数。</summary>
      <returns>要解析其值的小数位数。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.Size">
      <summary>获取或设置列内数据的最大大小。</summary>
      <returns>列内数据的最大大小。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.SourceColumn">
      <summary>获取或设置源列的名称，该源列映射到 <see cref="T:System.Data.DataSet" /> 并用于加载或返回 <see cref="P:System.Data.EntityClient.EntityParameter.Value" />。</summary>
      <returns>映射到数据集并用于加载或返回值的源列的名称</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.SourceColumnNullMapping">
      <summary>获取或设置一个值，该值指示源列是否可以为 null。</summary>
      <returns>如果源列可为 null，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.SourceVersion">
      <summary>获取或设置在加载值时使用的 <see cref="T:System.Data.DataRowVersion" />，</summary>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 值之一。</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.ToString">
      <summary>返回参数的字符串表示形式。</summary>
      <returns>参数的字符串表示形式。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.Value">
      <summary>获取或设置该参数的值。</summary>
      <returns>参数值。</returns>
    </member>
    <member name="T:System.Data.EntityClient.EntityParameterCollection">
      <summary>表示与 <see cref="T:System.Data.EntityClient.EntityCommand" /> 关联的参数集合。</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Add(System.Data.EntityClient.EntityParameter)">
      <summary>将指定的 <see cref="T:System.Data.EntityClient.EntityParameter" /> 对象添加到 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中。</summary>
      <returns>一个新的 <see cref="T:System.Data.EntityClient.EntityParameter" /> 对象。</returns>
      <param name="value">要添加到集合中的 <see cref="T:System.Data.EntityClient.EntityParameter" />。</param>
      <exception cref="T:System.ArgumentException">在 <paramref name="value" /> 参数中指定的 <see cref="T:System.Data.EntityClient.EntityParameter" /> 已经添加到这个或其他 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中。</exception>
      <exception cref="T:System.InvalidCastException">传递的参数不是 <see cref="T:System.Data.EntityClient.EntityParameter" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Add(System.Object)">
      <summary>将指定对象添加到 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中。</summary>
      <returns>新 <see cref="T:System.Data.EntityClient.EntityParameter" /> 对象的索引。</returns>
      <param name="value">一个 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType)">
      <summary>将一个具有指定的参数名和数据类型的 <see cref="T:System.Data.EntityClient.EntityParameter" /> 添加到 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中。</summary>
      <returns>一个新的 <see cref="T:System.Data.EntityClient.EntityParameter" /> 对象。</returns>
      <param name="parameterName">参数的名称。</param>
      <param name="dbType">
        <see cref="T:System.Data.DbType" /> 值之一。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType,System.Int32)">
      <summary>将 <see cref="T:System.Data.EntityClient.EntityParameter" /> 及其参数名、数据类型和列宽添加到 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中。</summary>
      <returns>一个新的 <see cref="T:System.Data.EntityClient.EntityParameter" /> 对象。</returns>
      <param name="parameterName">参数的名称。</param>
      <param name="dbType">
        <see cref="T:System.Data.DbType" /> 值之一。</param>
      <param name="size">列长。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.AddRange(System.Array)">
      <summary>将值数组添加到 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 的末尾。</summary>
      <param name="values">要添加的 <see cref="T:System.Array" /> 值。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.AddRange(System.Data.EntityClient.EntityParameter[])">
      <summary>将 <see cref="T:System.Data.EntityClient.EntityParameter" /> 值的数组添加到 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 的末尾。</summary>
      <param name="values">要添加的 <see cref="T:System.Data.EntityClient.EntityParameter" /> 值。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.AddWithValue(System.String,System.Object)">
      <summary>将一个值添加到 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 的末尾。</summary>
      <returns>
        <see cref="T:System.Data.EntityClient.EntityParameter" /> 对象。</returns>
      <param name="parameterName">参数的名称。</param>
      <param name="value">要添加的值。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Clear">
      <summary>从 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中移除所有 <see cref="T:System.Data.EntityClient.EntityParameter" /> 对象。</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Contains(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否在此 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中。</summary>
      <returns>如果 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 包含该值，则为 true；否则为 false。</returns>
      <param name="value">
        <see cref="T:System.Object" /> 值。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Contains(System.String)">
      <summary>确定指定的 <see cref="T:System.Data.EntityClient.EntityParameter" /> 是否在此 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中。</summary>
      <returns>如果 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 包含该值，则为 true；否则为 false。</returns>
      <param name="parameterName">
        <see cref="T:System.Data.EntityClient.EntityParameter" /> 值。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>将当前 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 的所有元素复制到指定的一维 <see cref="T:System.Array" /> 中（从指定的目标 <see cref="T:System.Array" /> 索引位置开始）。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从当前 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 复制的元素的目标位置。</param>
      <param name="index">一个 32 位整数，它表示 <see cref="T:System.Array" /> 中复制开始处的索引。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.CopyTo(System.Data.EntityClient.EntityParameter[],System.Int32)">
      <summary>将当前 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 的所有元素复制到指定的 <see cref="T:System.Data.EntityClient.EntityParameterCollection" />，从指定的目标索引开始复制。</summary>
      <param name="array">
        <see cref="T:System.Data.EntityClient.EntityParameterCollection" />，它是从当前 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 复制的元素的目标位置。</param>
      <param name="index">一个 32 位整数，表示 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中复制开始位置的索引。</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.Count">
      <summary>获取一个包含 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中元素数目的整数。</summary>
      <returns>
        <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中以整数表示的元素的数目。</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.IndexOf(System.Data.EntityClient.EntityParameter)">
      <summary>获取集合中指定 <see cref="T:System.Data.EntityClient.EntityParameter" /> 的位置。</summary>
      <returns>作为集合中 <see cref="T:System.Data.EntityClient.EntityParameter" /> 的指定 <see cref="T:System.Data.EntityClient.EntityParameter" /> 的从零开始的位置。 当 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中不存在该对象时，返回 -1。</returns>
      <param name="value">要查找的 <see cref="T:System.Data.EntityClient.EntityParameter" />。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.IndexOf(System.Object)">
      <summary>获取集合中指定 <see cref="T:System.Object" /> 的位置。</summary>
      <returns>作为集合中 <see cref="T:System.Data.EntityClient.EntityParameter" /> 的指定 <see cref="T:System.Object" /> 的从零开始的位置。 当 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中不存在该对象时，返回 -1。</returns>
      <param name="value">要查找的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.IndexOf(System.String)">
      <summary>获取具有指定名称的指定 <see cref="T:System.Data.EntityClient.EntityParameter" /> 的位置。</summary>
      <returns>具有指定的区分大小写名称的指定 <see cref="T:System.Data.EntityClient.EntityParameter" /> 从零开始的位置。 当 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中不存在该对象时，返回 -1。</returns>
      <param name="parameterName">要查找的 <see cref="T:System.Data.EntityClient.EntityParameter" /> 的区分大小写的名称。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Data.EntityClient.EntityParameter)">
      <summary>将 <see cref="T:System.Data.EntityClient.EntityParameter" /> 对象插入 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中的指定索引位置。</summary>
      <param name="index">从零开始的索引，应在该位置插入 value。</param>
      <param name="value">要插入 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中的 <see cref="T:System.Data.EntityClient.EntityParameter" /> 对象。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Object)">
      <summary>将 <see cref="T:System.Object" /> 插入 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中的指定索引位置。</summary>
      <param name="index">从零开始的索引，应在该位置插入 value。</param>
      <param name="value">要在 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中插入的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 的大小是否是固定的。</summary>
      <returns>如果 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 具有固定大小，则返回 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 为只读，则返回 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.IsSynchronized">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 是否是同步的。</summary>
      <returns>如果 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 同步，则返回 true；否则返回 false。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.Item(System.Int32)">
      <summary>获取指定索引处的 <see cref="T:System.Data.EntityClient.EntityParameter" />。</summary>
      <returns>位于指定索引处的 <see cref="T:System.Data.EntityClient.EntityParameter" />。</returns>
      <param name="index">要检索的参数的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的索引不存在。</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.Item(System.String)">
      <summary>获取具有指定名称的 <see cref="T:System.Data.EntityClient.EntityParameter" />。</summary>
      <returns>具有指定名称的 <see cref="T:System.Data.EntityClient.EntityParameter" />。</returns>
      <param name="parameterName">要检索的参数的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不存在。</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Remove(System.Data.EntityClient.EntityParameter)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.EntityClient.EntityParameter" />。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.Data.EntityClient.EntityParameter" /> 对象。</param>
      <exception cref="T:System.InvalidCastException">该参数不是 <see cref="T:System.Data.EntityClient.EntityParameter" />。</exception>
      <exception cref="T:System.SystemException">集合中不存在该参数。</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Remove(System.Object)">
      <summary>从集合中移除指定的参数。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.Object" /> 对象。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.RemoveAt(System.Int32)">
      <summary>从指定索引处的 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中移除 <see cref="T:System.Data.EntityClient.EntityParameter" />。</summary>
      <param name="index">要移除的 <see cref="T:System.Data.EntityClient.EntityParameter" /> 对象的从零开始的索引。</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.RemoveAt(System.String)">
      <summary>从 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中移除指定参数名称位置的 <see cref="T:System.Data.EntityClient.EntityParameter" />。</summary>
      <param name="parameterName">要移除的 <see cref="T:System.Data.EntityClient.EntityParameter" /> 的名称。</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 的访问的对象。</returns>
    </member>
    <member name="T:System.Data.EntityClient.EntityProviderFactory">
      <summary>表示一组方法，这些方法用于创建提供程序对数据源类的实现的实例。</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateCommand">
      <summary>返回实现 <see cref="T:System.Data.EntityClient.EntityCommand" /> 类的提供程序的类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.EntityClient.EntityCommand" /> 的新实例。</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateCommandBuilder">
      <summary>引发 <see cref="T:System.NotSupportedException" />。 目前不支持此方法。</summary>
      <returns>目前不支持此方法。</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateConnection">
      <summary>返回实现 <see cref="T:System.Data.EntityClient.EntityConnection" /> 类的提供程序的类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.EntityClient.EntityConnection" /> 的新实例。</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateConnectionStringBuilder">
      <summary>返回实现 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 类的提供程序的类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 的新实例。</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateDataAdapter">
      <summary>此版本的 .NET Framework 不支持 <see cref="M:System.Data.EntityClient.EntityProviderFactory.CreateDataAdapter" />。</summary>
      <returns>
        <see cref="T:System.NotSupportedException" /> 对象。</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateParameter">
      <summary>返回实现 <see cref="T:System.Data.EntityClient.EntityParameter" /> 类的提供程序的类新的实例。</summary>
      <returns>
        <see cref="T:System.Data.EntityClient.EntityParameter" /> 的新实例。</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreatePermission(System.Security.Permissions.PermissionState)">
      <summary>返回提供程序的类的新实例，该实例可实现提供程序的 <see cref="T:System.Security.CodeAccessPermission" /> 类的版本。</summary>
      <returns>指定 <see cref="T:System.Security.Permissions.PermissionState" /> 的 <see cref="T:System.Security.CodeAccessPermission" /> 对象。</returns>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
    </member>
    <member name="F:System.Data.EntityClient.EntityProviderFactory.Instance">
      <summary>此 <see cref="T:System.Data.EntityClient.EntityProviderFactory" /> 实例。</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.System#IServiceProvider#GetService(System.Type)">
      <summary>返回请求的 <see cref="T:System.IServiceProvider" /> 类。</summary>
      <returns>
        <see cref="T:System.IServiceProvider" /> 的新实例。 支持的类型包括 <see cref="T:System.Data.Common.DbProviderServices" />、<see cref="T:System.Data.Common.DbCommandDefinitionBuilder" /> 和 <see cref="T:System.Data.IEntityAdapter" />。 对所有其他类型返回 null（在 Visual Basic 中为 Nothing）。</returns>
      <param name="serviceType">要返回的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="T:System.Data.EntityClient.EntityTransaction">
      <summary>为 <see cref="P:System.Data.EntityClient.EntityCommand" /> 指定事务。</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityTransaction.Commit">
      <summary>提交基础事务。</summary>
    </member>
    <member name="P:System.Data.EntityClient.EntityTransaction.Connection">
      <summary>获取此 <see cref="T:System.Data.EntityClient.EntityTransaction" /> 的 <see cref="T:System.Data.EntityClient.EntityConnection" />。</summary>
      <returns>基础数据源的 <see cref="T:System.Data.EntityClient.EntityConnection" />。</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityTransaction.IsolationLevel">
      <summary>获取此 <see cref="T:System.Data.EntityClient.EntityTransaction" /> 的隔离级别。</summary>
      <returns>一个 <see cref="T:System.Data.IsolationLevel" /> 枚举值，该值表示基础事务的隔离级别。</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityTransaction.Rollback">
      <summary>回滚基础事务。</summary>
    </member>
    <member name="T:System.Data.Mapping.EntityViewContainer">
      <summary>设计时创建用于存储所生成视图的类型的基类。</summary>
    </member>
    <member name="M:System.Data.Mapping.EntityViewContainer.#ctor">
      <summary>初始化 EntityViewContainer 类的新实例。</summary>
    </member>
    <member name="P:System.Data.Mapping.EntityViewContainer.EdmEntityContainerName">
      <summary>获取或设置 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 的名称。</summary>
      <returns>容器名称。</returns>
    </member>
    <member name="M:System.Data.Mapping.EntityViewContainer.GetViewAt(System.Int32)">
      <summary>返回指定索引处的键/值对，其中包含视图和其键。</summary>
      <returns>返回 <paramref name="index" /> 处的键/值对，其中包含视图和其键。</returns>
      <param name="index">视图的索引。</param>
    </member>
    <member name="P:System.Data.Mapping.EntityViewContainer.HashOverAllExtentViews">
      <summary>视图的哈希值。</summary>
      <returns>哈希值。</returns>
    </member>
    <member name="P:System.Data.Mapping.EntityViewContainer.HashOverMappingClosure">
      <summary>哈希值。</summary>
      <returns>哈希值。</returns>
    </member>
    <member name="P:System.Data.Mapping.EntityViewContainer.StoreEntityContainerName">
      <summary>获取或设置存储架构中的 <see cref="T:System.Data.Metadata.Edm.EntityContainer" />。</summary>
      <returns>容器名称。</returns>
    </member>
    <member name="P:System.Data.Mapping.EntityViewContainer.ViewCount">
      <summary>获取或设置视图计数。</summary>
      <returns>视图计数。</returns>
    </member>
    <member name="T:System.Data.Mapping.EntityViewGenerationAttribute">
      <summary>一个特性，用于标记包含所生成的视图类型的程序集。</summary>
    </member>
    <member name="M:System.Data.Mapping.EntityViewGenerationAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Data.Mapping.EntityViewGenerationAttribute" /> 类的新实例。</summary>
      <param name="viewGenerationType">视图类型。</param>
    </member>
    <member name="P:System.Data.Mapping.EntityViewGenerationAttribute.ViewGenerationType">
      <summary>获取视图的 T:System.Type。</summary>
      <returns>视图的 T:System.Type。</returns>
    </member>
    <member name="T:System.Data.Mapping.MappingItemCollection">
      <summary>设计用来存储映射信息的 <see cref="T:System.Data.Metadata.Edm.ItemCollection" /> 对象的集合。</summary>
    </member>
    <member name="T:System.Data.Mapping.StorageMappingItemCollection">
      <summary>表示存储映射（CS 映射）空间中的项目集合。</summary>
    </member>
    <member name="M:System.Data.Mapping.StorageMappingItemCollection.#ctor(System.Data.Metadata.Edm.EdmItemCollection,System.Data.Metadata.Edm.StoreItemCollection,System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>初始化使用指定 <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" />、<see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> 和 XML 阅读器的 <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> 类的新实例。</summary>
      <param name="edmCollection">此映射要使用的 <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" />。</param>
      <param name="storeCollection">此映射要使用的 <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />。</param>
      <param name="xmlReaders">此映射要使用的 XML 读取器。</param>
    </member>
    <member name="M:System.Data.Mapping.StorageMappingItemCollection.#ctor(System.Data.Metadata.Edm.EdmItemCollection,System.Data.Metadata.Edm.StoreItemCollection,System.String[])">
      <summary>基于提供的 <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" />、<see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> 以及指示元数据文件路径的字符串的集合初始化 <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> 类的新实例。</summary>
      <param name="edmCollection">此映射要使用的 <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" />。</param>
      <param name="storeCollection">此映射要使用的 <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />。</param>
      <param name="filePaths">此映射要使用的文件路径。</param>
    </member>
    <member name="P:System.Data.Mapping.StorageMappingItemCollection.MappingVersion">
      <summary>获取此 <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> 表示的版本。</summary>
      <returns>此 <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> 表示的版本。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.AssociationEndMember">
      <summary>表示概念模型中的关联的 End。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationEndMember.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.AssociationEndMember" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.AssociationEndMember" /> 的内置类型种类。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.AssociationSet">
      <summary>表示概念模型中的关联集。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSet.AssociationSetEnds">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.AssociationSet" /> 的两端。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此 <see cref="T:System.Data.Metadata.Edm.AssociationSet" /> 的两端。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSet.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.AssociationSet" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.AssociationSet" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSet.ElementType">
      <summary>获取与此 <see cref="T:System.Data.Metadata.Edm.AssociationSet" /> 相关的关联。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.AssociationType" /> 对象，表示与此 <see cref="T:System.Data.Metadata.Edm.AssociationSet" /> 相关的关联。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.AssociationSetEnd">
      <summary>表示概念模型中的关联集的 End。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.CorrespondingAssociationEndMember">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" /> 对象对应的 End 成员。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.AssociationEndMember" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" /> 对象对应的 End 成员。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.EntitySet">
      <summary>获取此 End 角色引用的实体集。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 对象，表示此 End 角色引用的实体集。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.Name">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" /> 的 End 名称。</summary>
      <returns>此 <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" /> 的 End 名称。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.ParentAssociationSet">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" /> 的父关联集。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.AssociationSet" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" /> 的父关联集。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.Role">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" /> 的 End 角色的名称。</summary>
      <returns>此 <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" /> 的 End 角色的名称。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.AssociationSetEnd.ToString">
      <summary>返回此 <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" /> 的 End 角色的名称。</summary>
      <returns>此 <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" /> 的 End 角色的名称。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.AssociationType">
      <summary>表示概念模型中的关联。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationType.AssociationEndMembers">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.AssociationType" /> 的两端的列表。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此 <see cref="T:System.Data.Metadata.Edm.AssociationType" /> 的两端的列表。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationType.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.AssociationType" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.AssociationType" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationType.IsForeignKey">
      <summary>获取一个布尔属性值，该值指定列是否为外键。</summary>
      <returns>一个指定列是否为外键的布尔值。 如果为 true，则列是外键。 如果为 false（默认值），则列不是外键。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationType.ReferentialConstraints">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.AssociationType" /> 的约束的列表。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此 <see cref="T:System.Data.Metadata.Edm.AssociationType" /> 的约束的列表。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.BuiltInTypeKind">
      <summary>表示一个枚举，该枚举指定概念模型中所有内置类型的列表。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.AssociationEndMember">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.AssociationEndMember" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.AssociationSet">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.AssociationSet" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.AssociationSetEnd">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.AssociationType">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.AssociationType" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.CollectionKind">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.CollectionKind" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.CollectionType">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.CollectionType" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.ComplexType">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.ComplexType" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.Documentation">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.Documentation" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EdmFunction">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EdmMember">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.EdmMember" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EdmProperty">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EdmType">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EntityContainer">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EntitySet">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EntitySetBase">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.EntitySetBase" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EntityType">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.EntityType" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EntityTypeBase">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.EntityTypeBase" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EnumMember">
      <summary>一个指示 <see cref="T:System.Data.Metadata.EdmEnumMember" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EnumType">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.EnumType" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.Facet">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.Facet" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.FunctionParameter">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.FunctionParameter" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.GlobalItem">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.MetadataItem">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.MetadataItem" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.MetadataProperty">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.MetadataProperty" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.NavigationProperty">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.NavigationProperty" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.OperationAction">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.OperationAction" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.ParameterMode">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.ParameterMode" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.PrimitiveType">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.PrimitiveTypeKind">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.PrimitiveTypeKind" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.ProviderManifest">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.ProviderManifest" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.ReferentialConstraint">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RefType">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.RefType" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RelationshipEndMember">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.RelationshipEndMember" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RelationshipMultiplicity">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RelationshipSet">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RelationshipType">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.RelationshipType" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RowType">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.RowType" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.SimpleType">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.SimpleType" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.StructuralType">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 类型的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.TypeUsage">
      <summary>一个指示 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 类型的枚举成员。</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.CollectionKind">
      <summary>表示一个枚举，该枚举指定应用于概念性架构定义语言 (CSDL) 文件中的属性的集合类型。 该集合类型可以应用于任何类型的属性。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.CollectionKind.Bag">
      <summary>该集合具有包语义。 项未经过排序，而且可以接受重复项。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.CollectionKind.List">
      <summary>该集合具有列表语义。 各个项之间的顺序是确定的，而且可以接受重复项。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.CollectionKind.None">
      <summary>该属性不是集合。</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.CollectionType">
      <summary>表示特定类型的实例的集合。 不能在概念模型中显式定义 <see cref="T:System.Data.Metadata.Edm.CollectionType" />。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.CollectionType.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.CollectionType" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.CollectionType" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.CollectionType.TypeUsage">
      <summary>获取 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 类的实例，该类包含此当前 <see cref="T:System.Data.Metadata.Edm.CollectionType" /> 对象所包含元素的类型和该类型的方面。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 类的实例，该类包含此当前 <see cref="T:System.Data.Metadata.Edm.CollectionType" /> 对象所包含元素的类型和该类型的方面。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.ComplexType">
      <summary>表示概念模型中的复杂类型。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.ComplexType.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.ComplexType" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.ComplexType" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ComplexType.Properties">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.ComplexType" /> 的属性的列表。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此 <see cref="T:System.Data.Metadata.Edm.ComplexType" /> 的属性的列表。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.ConcurrencyMode">
      <summary>指定概念模型中的属性的并发选项。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ConcurrencyMode.Fixed">
      <summary>在写入时始终验证此属性。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ConcurrencyMode.None">
      <summary>在写入时从不验证此属性。 这是默认的并发模式。</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.DataSpace">
      <summary>指定 Entity Framework 中的模型的默认名称。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.DataSpace.CSpace">
      <summary>表示概念模型的默认名称。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.DataSpace.CSSpace">
      <summary>表示概念模型和存储模型之间的映射的默认名称。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.DataSpace.OCSpace">
      <summary>表示对象模型和概念模型之间的映射的默认名称。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.DataSpace.OSpace">
      <summary>表示对象模型的默认名称。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.DataSpace.SSpace">
      <summary>表示存储模型的默认名称。</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.Documentation">
      <summary>表示与概念模型结构关联的文档。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.Documentation.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.Documentation" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.Documentation" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Documentation.IsEmpty">
      <summary>获取一个值，该值指示此 <see cref="T:System.Data.Metadata.Edm.Documentation" /> 对象是否只包含一个 null（即空的）<see cref="P:System.Data.Metadata.Edm.Documentation.Summary" /> 和一个 <see cref="P:System.Data.Metadata.Edm.Documentation.Longdescription" />。</summary>
      <returns>如果此 <see cref="T:System.Data.Metadata.Edm.Documentation" /> 对象只包含一个 null（即空的）<see cref="P:System.Data.Metadata.Edm.Documentation.Summary" /> 和一个 <see cref="P:System.Data.Metadata.Edm.Documentation.LongDescription" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Documentation.LongDescription">
      <summary>获取有关此 <see cref="T:System.Data.Metadata.Edm.Documentation" /> 的详细说明。</summary>
      <returns>有关此 <see cref="T:System.Data.Metadata.Edm.Documentation" /> 的详细说明。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Documentation.Summary">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.Documentation" /> 的摘要。</summary>
      <returns>此 <see cref="T:System.Data.Metadata.Edm.Documentation" /> 的摘要。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.Documentation.ToString">
      <summary>返回此 <see cref="T:System.Data.Metadata.Edm.Documentation" /> 的摘要。</summary>
      <returns>此 <see cref="T:System.Data.Metadata.Edm.Documentation" /> 的摘要。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmError">
      <summary>封装有关概念模型的一般性错误的错误信息。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmError.Message">
      <summary>获取错误消息。</summary>
      <returns>错误消息。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmFunction">
      <summary>表示关于函数的信息，从使用实体 SQL 查询语言编写的查询中可以调用这些函数。 这些函数可以是由存储提供程序公开的内置函数，或者特定数据库中的用户定义的函数。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> 的内置类型种类。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 枚举的枚举值之一。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.CommandTextAttribute">
      <summary>获取采用数据库管理系统或存储模型所使用的语言的查询。</summary>
      <returns>数据库管理系统或者存储模型使用的语法的一个字符串，该数据库管理系统或存储模型包含 <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> 的查询或更新语句。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.FullName">
      <summary>返回此类型的全名（命名空间加名称）。</summary>
      <returns>该类型的全名。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.IsComposableAttribute">
      <summary>获取或设置一个值，该值指示将此实例映射到函数还是映射到存储过程。</summary>
      <returns>如果该实例映射到函数，则为 true；如果该实例映射到存储过程，则为 false。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.Parameters">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> 的参数。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此 <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> 的参数。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.ReturnParameter">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> 的返回参数。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.FunctionParameter" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> 的返回参数。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.ReturnParameters">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> 的返回参数。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，表示 <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> 返回的参数。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmItemCollection">
      <summary>加载有关概念模型的元数据。  此&lt;embeddedLabel&gt;1 EdmItemCollection &lt;/embeddedLabel&gt;从概念性架构定义语言 (CSDL) 文件中加载元数据。 此类派生自 <see cref="T:System.Data.Metadata.Edm.ItemCollection" /> 类。</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>使用概念性架构定义语言 (CSDL) 文件所在的对象的集合初始化 <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" /> 类的新实例。</summary>
      <param name="xmlReaders">概念性架构定义语言 (CSDL) 文件所在的 XMLReader 对象的集合。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmItemCollection.#ctor(System.String[])">
      <summary>使用概念性架构定义语言 (CSDL) 文件所在的路径初始化 <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" /> 类的新实例。</summary>
      <param name="filePaths">概念性架构定义语言 (CSDL) 文件所在的路径。</param>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmItemCollection.EdmVersion">
      <summary>获取此集合的概念模型版本。</summary>
      <returns>此集合的概念模型版本。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmItemCollection.GetPrimitiveTypes">
      <summary>返回 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 对象的集合。</summary>
      <returns>一个 ReadOnlyCollection 对象，表示 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 对象的集合。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmItemCollection.GetPrimitiveTypes(System.Double)">
      <summary>返回具有指定的概念性模型版本的 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 对象的集合。</summary>
      <returns>一个 ReadOnlyCollection 对象，表示 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 对象的集合。</returns>
      <param name="edmVersion">概念模型版本。</param>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmMember">
      <summary>表示可以在任何 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 中声明的成员。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmMember.DeclaringType">
      <summary>获取已对其声明此成员的类型。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 对象，表示已对其声明此成员的类型。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmMember.Name">
      <summary>获取此成员的名称。</summary>
      <returns>此成员的名称。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmMember.ToString">
      <summary>返回此成员的名称。</summary>
      <returns>此成员的名称。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmMember.TypeUsage">
      <summary>获取 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 类的实例，该类包含成员的类型和该类型的方面。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象，该对象包含成员的类型和该类型的方面。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmProperty">
      <summary>表示概念模型中 <see cref="T:System.Data.Metadata.Edm.EntityType" /> 的属性。 <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> 类派生自 <see cref="T:System.Data.Metadata.Edm.EdmMember" /> 类，并提供此 <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> 的类型的 <see cref="P:System.Data.Metadata.Edm.EdmProperty.Default" /> 和 <see cref="P:System.Data.Metadata.Edm.EdmProperty.Nullable" /> 方面。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmProperty.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmProperty.DefaultValue">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> 的默认值。</summary>
      <returns>此 <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> 的默认值。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmProperty.Nullable">
      <summary>获取一个值，该值指示此 <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> 是否可以具有 null 值。</summary>
      <returns>如果此 <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> 可以具有 null 值，则返回 true；否则返回 false。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmSchemaError">
      <summary>封装有关概念模型架构错误的详细信息。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.Column">
      <summary>获取发生错误的列。</summary>
      <returns>发生错误的列。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.ErrorCode">
      <summary>获取错误代码。</summary>
      <returns>错误代码。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.Line">
      <summary>获取发生错误的行号。</summary>
      <returns>发生错误的行号。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.SchemaLocation">
      <summary>获取包含错误的架构的位置。 此字符串还包括位于末尾的架构的名称。</summary>
      <returns>包含错误的架构所在的位置。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.SchemaName">
      <summary>获取包含错误的架构的名称。</summary>
      <returns>包含错误的架构的名称。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.Severity">
      <summary>获取错误的严重级别。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.EdmSchemaErrorSeverity" /> 值之一。 默认值为 <see cref="F:System.Data.Metadata.Edm.EdmSchemaErrorSeverity.Warning" />。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.StackTrace">
      <summary>获取发生错误时的堆栈跟踪的字符串表示形式。</summary>
      <returns>发生错误时的堆栈跟踪的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmSchemaError.ToString">
      <summary>返回错误消息。</summary>
      <returns>错误消息。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmSchemaErrorSeverity">
      <summary>指定错误的严重级别。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.EdmSchemaErrorSeverity.Error">
      <summary>一个错误，指示发生了严重问题并且无法使用架构。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.EdmSchemaErrorSeverity.Warning">
      <summary>一个警告，指示架构中存在一些问题，但仍可以使用。</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmType">
      <summary>表示概念模型中的所有类型的基类。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmType.Abstract">
      <summary>获取一个值，该值指示此类型是否为抽象类型。</summary>
      <returns>如果此类型为抽象类型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmType.BaseType">
      <summary>获取此类型的基类型。</summary>
      <returns>此类型的基类型。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmType.FullName">
      <summary>获取此类型的全名。</summary>
      <returns>此类型的全名。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmType.GetCollectionType">
      <summary>返回其元素类型为此类型的 <see cref="T:System.Data.Metadata.Edm.CollectionType" /> 的实例。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.CollectionType" /> 对象，该对象的元素类型为此类型。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmType.Name">
      <summary>获取此类型的名称。</summary>
      <returns>此类型的名称。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmType.NamespaceName">
      <summary>获取此类型的命名空间。</summary>
      <returns>此类型的命名空间。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmType.ToString">
      <summary>返回此类型的全名。</summary>
      <returns>此类型的全名。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EntityContainer">
      <summary>表示概念模型中的实体容器。 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 是实体集和关联集的逻辑分组。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityContainer.BaseEntitySets">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 包含的实体集和关联集的列表。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 对象，该对象包含此 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 包含的实体集和关联集的列表。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityContainer.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityContainer.FunctionImports">
      <summary>指定 <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> 元素的集合。 每个函数都包含映射到实体及其属性的数据库或等效 CommandText 中存在的存储过程的详细信息。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />，其中包含 <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> 元素。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityContainer.GetEntitySetByName(System.String,System.Boolean)">
      <summary>使用实体集的指定名称返回一个 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 对象，表示具有指定名称的实体集。</returns>
      <param name="name">要搜索的实体集的名称。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityContainer.GetRelationshipSetByName(System.String,System.Boolean)">
      <summary>使用关系集的指定名称返回一个 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 对象，表示具有指定名称的关系集。</returns>
      <param name="name">要搜索的关系集的名称。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityContainer.Name">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 的名称。</summary>
      <returns>此 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 的名称。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityContainer.ToString">
      <summary>返回此 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 的名称。</summary>
      <returns>此 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 的名称。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityContainer.TryGetEntitySetByName(System.String,System.Boolean,System.Data.Metadata.Edm.EntitySet@)">
      <summary>使用实体集的指定名称返回一个 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 对象。</summary>
      <returns>如果存在符合搜索条件的实体集，则为 true；否则为 false。</returns>
      <param name="name">要搜索的实体集的名称。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <param name="entitySet">此方法返回时将包含一个 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 对象。 如果没有实体集，则此输出参数包含 null。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityContainer.TryGetRelationshipSetByName(System.String,System.Boolean,System.Data.Metadata.Edm.RelationshipSet@)">
      <summary>使用关系集的指定名称返回一个 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 对象。</summary>
      <returns>如果存在符合搜索条件的关系集，则为 true；否则为 false。</returns>
      <param name="name">要搜索的关系集的名称。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <param name="relationshipSet">此方法返回时将包含一个 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 对象。</param>
    </member>
    <member name="T:System.Data.Metadata.Edm.EntitySet">
      <summary>表示概念模型中的实体集。 <see cref="T:System.Data.Metadata.Edm.EntityType" /> 的一个 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 包含 <see cref="T:System.Data.Metadata.Edm.EntityType" /> 或其任何子类型的实例。 使用同一 <see cref="T:System.Data.Metadata.Edm.EntityType" /> 可以定义多个 <see cref="T:System.Data.Metadata.Edm.EntitySet" />。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySet.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySet.ElementType">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 的实体类型。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.EntityType" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 的实体类型。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EntitySetBase">
      <summary>
        <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 和 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 的基类。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySetBase.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.EntitySetBase" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.EntitySetBase" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySetBase.ElementType">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.EntityTypeBase" /> 的实体类型。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.EntityTypeBase" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.EntityTypeBase" /> 的实体类型。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySetBase.EntityContainer">
      <summary>获取当前实体或关系集的实体容器。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 对象，表示当前实体或关系集的实体容器。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySetBase.Name">
      <summary>获取当前实体或关系集的名称。</summary>
      <returns>当前实体或关系集的名称。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntitySetBase.ToString">
      <summary>返回当前实体或关系集的名称。</summary>
      <returns>当前实体或关系集的名称。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EntityType">
      <summary>表示特定类型的数据，例如概念模型中的客户实体或订单实体。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityType.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.EntityType" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.EntityType" /> 的内置类型种类。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityType.GetReferenceType">
      <summary>返回一个引用此 <see cref="T:System.Data.Metadata.Edm.EntityType" /> 的 <see cref="T:System.Data.Metadata.Edm.RefType" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.RefType" /> 对象，该对象引用此 <see cref="T:System.Data.Metadata.Edm.EntityType" />。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityType.NavigationProperties">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.EntityType" /> 的导航属性。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此 <see cref="T:System.Data.Metadata.Edm.EntityType" /> 上的导航属性的列表。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityType.Properties">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.EntityType" /> 的属性的列表。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此 <see cref="T:System.Data.Metadata.Edm.EntityType" /> 的属性的列表。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EntityTypeBase">
      <summary>
        <see cref="T:System.Data.Metadata.Edm.EntityType" /> 和 <see cref="T:System.Data.Metadata.Edm.RelationshipType" /> 的基类型。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityTypeBase.KeyMembers">
      <summary>获取当前实体或关系类型的所有键成员的列表。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 对象，表示当前实体或关系类型的键成员的列表。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EnumMember">
      <summary>表示枚举成员。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EnumMember.BuiltInTypeKind">
      <summary>获取此类型的种类。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EnumMember.Name">
      <summary>获取该枚举成员的名称。</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.EnumMember.ToString">
      <summary>重写 System.Object.ToString 以提供此类型更好的字符串指示。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EnumMember.Value">
      <summary>获取此枚举成员的值。</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.EnumType">
      <summary>表示枚举类型。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EnumType.BuiltInTypeKind">
      <summary>返回类型的种类</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EnumType.IsFlags">
      <summary>获取指示枚举类型是否定义为标志（即，可以被视为位域）的值。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EnumType.Members">
      <summary>获取此枚举类型的枚举成员的集合。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EnumType.UnderlyingType">
      <summary>获取该枚举的基础系统类型。</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.Facet">
      <summary>提供有关成员的附加信息。 在 ADO.NET 元数据类型层次结构中，方面通过成员的声明类型提供关于成员的附加信息。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.Facet" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.Facet" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.Description">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.Facet" /> 的描述。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.FacetDescription" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.Facet" /> 的描述。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.FacetType">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.Facet" /> 的类型。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.Facet" /> 的类型。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.IsUnbounded">
      <summary>获取一个值，该值指示是否未绑定 Facet 的值。</summary>
      <returns>如果未绑定 Facet 的值，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.Name">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.Facet" /> 的名称。</summary>
      <returns>此 <see cref="T:System.Data.Metadata.Edm.Facet" /> 的名称。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.Facet.ToString">
      <summary>返回此 <see cref="T:System.Data.Metadata.Edm.Facet" /> 的名称。</summary>
      <returns>此 <see cref="T:System.Data.Metadata.Edm.Facet" /> 的名称。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.Value">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.Facet" /> 的值。</summary>
      <returns>此 <see cref="T:System.Data.Metadata.Edm.Facet" /> 的值。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.FacetDescription">
      <summary>指定方面的描述。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.DefaultValue">
      <summary>获取具有此方面描述的方面的默认值。</summary>
      <returns>具有此方面描述的方面的默认值。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.FacetName">
      <summary>获取此方面的名称。</summary>
      <returns>此方面的名称。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.FacetType">
      <summary>获取此方面的类型。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象，表示此方面的类型。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.IsConstant">
      <summary>获取一个值，该值指示此方面的值是否为常量。</summary>
      <returns>如果此方面是常量，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.IsRequired">
      <summary>获取一个值，该值指示此方面是否为必需的方面。</summary>
      <returns>如果此方面是必需的方面，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.MaxValue">
      <summary>获取此方面的最大值。</summary>
      <returns>此方面的最大值。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.MinValue">
      <summary>获取此方面的最小值。</summary>
      <returns>此方面的最小值。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.FacetDescription.ToString">
      <summary>返回此方面的名称。</summary>
      <returns>此方面的名称。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.FunctionParameter">
      <summary>描述 <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> 的参数。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.FunctionParameter.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.FunctionParameter" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.FunctionParameter" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FunctionParameter.DeclaringFunction">
      <summary>获取或设置在其上声明此参数的 <see cref="T:System.Data.Metadata.Edm.EdmFunction" />。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> 对象，表示在其上声明此参数的函数。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FunctionParameter.Mode">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.FunctionParameter" /> 的模式。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.ParameterMode" /> 值之一。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FunctionParameter.Name">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.FunctionParameter" /> 的名称。</summary>
      <returns>此 <see cref="T:System.Data.Metadata.Edm.FunctionParameter" /> 的名称。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.FunctionParameter.ToString">
      <summary>返回此 <see cref="T:System.Data.Metadata.Edm.FunctionParameter" /> 的名称。</summary>
      <returns>此 <see cref="T:System.Data.Metadata.Edm.FunctionParameter" /> 的名称。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FunctionParameter.TypeUsage">
      <summary>获取 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 类的实例，该类包含参数的类型和该类型的方面。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象，该对象包含参数的类型和该类型的方面。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.GlobalItem">
      <summary>表示所有概念模型类型和实体容器的基项类。</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ItemCollection">
      <summary>
        <see cref="T:System.Data.Metadata.Edm.ObjectItemCollection" />、<see cref="T:System.Data.Metadata.Edm.EdmItemCollection" /> 和 <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> 类的基类。 <see cref="T:System.Data.Metadata.Edm.ItemCollection" /> 类是一个抽象类，提供用于加载和保存内存中的元数据的核心 API。 此类派生自 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.ItemCollection.DataSpace">
      <summary>获取与此项集合关联的数据模型。</summary>
      <returns>与此项集合关联的数据模型。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetEntityContainer(System.String)">
      <summary>使用指定的实体容器名称返回一个 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 对象。</summary>
      <returns>如果没有实体容器，则此方法返回 null；否则返回第一个实体容器。</returns>
      <param name="name">实体容器的名称。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetEntityContainer(System.String,System.Boolean)">
      <summary>使用指定的实体容器名称返回一个 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 对象。</summary>
      <returns>如果没有实体容器，则此方法返回 null；否则返回第一个实体容器。</returns>
      <param name="name">实体容器的名称。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetFunctions(System.Collections.Generic.Dictionary{System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Metadata.Edm.EdmFunction}},System.String,System.Boolean)">
      <summary>使用指定的名称从此项集合中返回函数的所有重载。</summary>
      <returns>一个 ReadOnlyCollection 类型的集合，其中包含具有指定名称的所有函数。</returns>
      <param name="functionCollection">一个函数字典。</param>
      <param name="functionName">函数的全名。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetFunctions(System.String)">
      <summary>使用指定的名称从此项集合中返回函数的所有重载。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含具有指定名称的所有函数。</returns>
      <param name="functionName">函数的全名。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetFunctions(System.String,System.Boolean)">
      <summary>使用指定的名称从此项集合中返回函数的所有重载。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含具有指定名称的所有函数。</returns>
      <param name="functionName">函数的全名。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetItem``1(System.String)">
      <summary>使用指定的标识返回一个强类型 <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> 对象。</summary>
      <returns>由标识指定的项。</returns>
      <param name="identity">项的标识。</param>
      <typeparam name="T">由方法返回的类型。</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetItem``1(System.String,System.Boolean)">
      <summary>使用指定标识通过区分大小写或不区分大小写的搜索返回一个强类型 <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> 对象。</summary>
      <returns>由标识指定的项。</returns>
      <param name="identity">项的标识。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <typeparam name="T">由方法返回的类型。</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetItems``1">
      <summary>从此项集合中返回指定类型的所有项。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含指定类型的所有项。</returns>
      <typeparam name="T">由方法返回的类型。</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetType(System.String,System.String)">
      <summary>使用指定的类型名称和命名空间名称返回此项集合中的一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象，表示此项集合中与指定的类型名称和命名空间名称匹配的类型。 如果没有匹配的类型，则此方法返回 null。</returns>
      <param name="name">类型名称。</param>
      <param name="namespaceName">类型的命名空间。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetType(System.String,System.String,System.Boolean)">
      <summary>使用指定的类型名称和命名空间名称从此项集合中返回一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象，表示此项集合中与指定的类型名称和命名空间名称匹配的类型。 如果没有匹配的类型，则此方法返回 null。</returns>
      <param name="name">类型名称。</param>
      <param name="namespaceName">类型的命名空间。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Boolean,System.Data.Metadata.Edm.EntityContainer@)">
      <summary>使用指定的实体容器名称返回一个 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 对象。 如果没有实体容器，则此输出参数包含 null；否则包含第一个实体容器。</summary>
      <returns>如果存在符合搜索条件的实体容器，则为 true；否则为 false。</returns>
      <param name="name">实体容器的名称。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <param name="entityContainer">此方法返回时将包含一个 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 对象。 如果没有实体容器，则此输出参数包含 null；否则包含第一个实体容器。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Data.Metadata.Edm.EntityContainer@)">
      <summary>使用指定的实体容器名称返回一个 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 对象。 如果没有实体容器，则输出参数包含 null；否则包含第一个实体容器。</summary>
      <returns>如果存在符合搜索条件的实体容器，则为 true；否则为 false。</returns>
      <param name="name">实体容器的名称。</param>
      <param name="entityContainer">此方法返回时将包含一个 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 对象。 如果没有实体容器，则此输出参数包含 null；否则包含第一个实体容器。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,System.Boolean,``0@)">
      <summary>使用指定的标识从此项集合返回一个强类型 <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> 对象。</summary>
      <returns>如果存在符合搜索条件的项，则为 true；否则为 false。</returns>
      <param name="identity">项的标识。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <param name="item">此方法返回时，输出参数将包含一个 <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> 对象。 如果项集合中不存在具有指定标识的全局项，此输出参数将包含 null。</param>
      <typeparam name="T">由方法返回的类型。</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,``0@)">
      <summary>使用指定的标识从此项集合返回一个强类型 <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> 对象。</summary>
      <returns>如果存在符合搜索条件的项，则为 true；否则为 false。</returns>
      <param name="identity">项的标识。</param>
      <param name="item">此方法返回时，输出参数将包含一个 <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> 对象。 如果项集合中不存在具有指定标识的全局项，此输出参数将包含 null。</param>
      <typeparam name="T">由方法返回的类型。</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Boolean,System.Data.Metadata.Edm.EdmType@)">
      <summary>使用指定的类型名称和命名空间名称从此项集合中返回一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。</summary>
      <returns>如果存在符合搜索条件的类型，则为 true；否则为 false。</returns>
      <param name="name">类型名称。</param>
      <param name="namespaceName">类型的命名空间。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <param name="type">此方法返回时，此输出参数将包含一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。 如果此项集合中不存在具有指定名称和命名空间名称的类型，此输出参数将包含 null。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Data.Metadata.Edm.EdmType@)">
      <summary>使用指定的类型名称和命名空间名称从此项集合中返回一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。</summary>
      <returns>如果存在符合搜索条件的类型，则为 true；否则为 false。</returns>
      <param name="name">类型名称。</param>
      <param name="namespaceName">类型的命名空间。</param>
      <param name="type">此方法返回时，此输出参数将包含一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。 如果此项集合中不存在具有指定名称和命名空间名称的类型，此输出参数将包含 null。</param>
    </member>
    <member name="T:System.Data.Metadata.Edm.MetadataItem">
      <summary>表示 ADO.NET 元数据类型层次结构中所有元数据的基项类。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataItem.BuiltInTypeKind">
      <summary>获取此类型的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此类型的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataItem.Documentation">
      <summary>获取或设置与此类型关联的文档。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.Documentation" /> 对象，表示介绍此类型的文档。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataItem.GetBuiltInType(System.Data.Metadata.Edm.BuiltInTypeKind)">
      <summary>返回一个与 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 值之一匹配的概念模型内置类型。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象，表示 EDM 中的内置类型。</returns>
      <param name="builtInTypeKind">
        <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 值之一。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataItem.GetGeneralFacetDescriptions">
      <summary>返回指定类型的常规方面说明的列表。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 对象，表示指定类型的常规方面说明的列表。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataItem.MetadataProperties">
      <summary>获取当前类型的属性的列表。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含当前类型的属性的列表。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.MetadataProperty">
      <summary>表示 ADO.NET 元数据层次结构中的项的元数据特性。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataProperty.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.MetadataProperty" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.MetadataProperty" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataProperty.Name">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.MetadataProperty" /> 的名称。</summary>
      <returns>此 <see cref="T:System.Data.Metadata.Edm.MetadataProperty" /> 的名称。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataProperty.PropertyKind">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.PropertyKind" /> 的值。</summary>
      <returns>此 <see cref="T:System.Data.Metadata.Edm.PropertyKind" /> 的值。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataProperty.TypeUsage">
      <summary>获取 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 类的实例，该类包含此 <see cref="T:System.Data.Metadata.Edm.MetadataProperty" /> 的类型和该类型的方面。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象，该对象包含此 <see cref="T:System.Data.Metadata.Edm.MetadataProperty" /> 的类型和该类型的方面。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataProperty.Value">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.MetadataProperty" /> 的值。</summary>
      <returns>此 <see cref="T:System.Data.Metadata.Edm.MetadataProperty" /> 的值。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.MetadataWorkspace">
      <summary>表示 ADO.NET 元数据运行时服务组件，该组件支持从不同源检索元数据。</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.#ctor">
      <summary>初始化 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>使用指定的路径和程序集初始化 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 类的新实例。</summary>
      <param name="paths">工作区元数据的路径。</param>
      <param name="assembliesToConsider">用于构造工作区的程序集的名称。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.ClearCache">
      <summary>清除所有的元数据缓存条目。</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.CreateEntitySqlParser">
      <summary>使用 <see cref="F:System.Data.Metadata.Edm.DataSpace.CSpace" /> 数据空间创建配置的 <see cref="T:System.Data.Common.EntitySql.EntitySqlParser" />。</summary>
      <returns>创建的解析器对象。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.CreateQueryCommandTree(System.Data.Common.CommandTrees.DbExpression)">
      <summary>基于指定的查询表达式，创建新的 <see cref="T:System.Data.Common.CommandTrees.DbQueryCommandTree" /> 限值到元数据工作区。</summary>
      <returns>使用指定表达式作为其 <see cref="P:System.Data.Common.CommandTrees.DbQueryCommandTree.Query" /> 属性的新 <see cref="T:System.Data.Common.CommandTrees.DbQueryCommandTree" />。</returns>
      <param name="query">一个定义查询的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="query" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="query" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="query" />
      </exception>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetEdmSpaceType(System.Data.Metadata.Edm.EnumType)">
      <summary>返回一个 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 对象，该对象表示与参数 <paramref name="objectSpaceType" /> 提供的类型匹配的 <see cref="T:System.Data.Metadata.Edm.EdmType" />。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 对象，表示 <see cref="T:System.Data.Metadata.Edm.EdmType" />。 如果没有匹配的类型，则此方法返回 null。</returns>
      <param name="objectSpaceType">一个在对象空间中提供类型的 <see cref="T:System.Data.Metadata.Edm.EnumlType" />。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetEdmSpaceType(System.Data.Metadata.Edm.StructuralType)">
      <summary>返回一个 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 对象，该对象表示与参数 <paramref name="objectSpaceType" /> 提供的类型匹配的 <see cref="T:System.Data.Metadata.Edm.EdmType" />。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 对象，表示 <see cref="T:System.Data.Metadata.Edm.EdmType" />。 如果没有匹配的类型，则此方法返回 null。</returns>
      <param name="objectSpaceType">一个在对象空间中提供类型的 <see cref="T:System.Data.Metadata.Edm.StructuralType" />。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace)">
      <summary>使用指定的实体容器名称和数据模型返回一个 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 对象。</summary>
      <returns>如果没有实体容器，则此方法返回 null；否则返回第一个实体容器。</returns>
      <param name="name">实体容器的名称。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <param name="dataSpace">要从中搜索实体容器的概念模型。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Data.Metadata.Edm.DataSpace)">
      <summary>使用指定的实体容器名称和数据模型返回一个 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 对象。</summary>
      <returns>如果没有实体容器，则此方法返回 null；否则返回第一个实体容器。</returns>
      <param name="name">实体容器的名称。</param>
      <param name="dataSpace">要从中搜索实体容器的概念模型。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Metadata.Edm.DataSpace)">
      <summary>使用指定的名称、命名空间名称和数据模型返回函数的所有重载。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含在给定命名空间和数据模型中匹配指定名称的所有函数。</returns>
      <param name="name">函数名。</param>
      <param name="namespaceName">函数的命名空间。</param>
      <param name="dataSpace">要从中搜索函数的概念模型。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Metadata.Edm.DataSpace,System.Boolean)">
      <summary>使用指定的名称、命名空间名称和数据模型返回函数的所有重载。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含在给定命名空间和数据模型中匹配指定名称的所有函数。</returns>
      <param name="name">函数名。</param>
      <param name="namespaceName">函数的命名空间。</param>
      <param name="dataSpace">要从中搜索函数的概念模型。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace)">
      <summary>使用指定的标识和数据模型返回一个项。</summary>
      <returns>在指定数据模型中匹配给定标识的项。</returns>
      <param name="identity">项的标识。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <param name="dataSpace">要从中搜索项的概念模型。</param>
      <typeparam name="T">由方法返回的类型。</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Data.Metadata.Edm.DataSpace)">
      <summary>使用指定的标识和数据模型返回一个项。</summary>
      <returns>在指定数据模型中匹配给定标识的项。</returns>
      <param name="identity">项的标识。</param>
      <param name="dataSpace">要从中搜索项的概念模型。</param>
      <typeparam name="T">由方法返回的类型。</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItemCollection(System.Data.Metadata.Edm.DataSpace)">
      <summary>获取 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 项。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 项。</returns>
      <param name="dataSpace">要从其中检索项的 <see cref="T:System.Data.Metadata.Edm.DataSpace" />。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItems(System.Data.Metadata.Edm.DataSpace)">
      <summary>获取指定数据模型中的所有项。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含指定数据模型中的所有项。</returns>
      <param name="dataSpace">需要其项列表的概念模型。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItems``1(System.Data.Metadata.Edm.DataSpace)">
      <summary>获取指定数据模型中的所有项。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含指定数据模型中的所有项。</returns>
      <param name="dataSpace">需要其项列表的概念模型。</param>
      <typeparam name="T">由方法返回的类型。</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Metadata.Edm.EnumType)">
      <summary>返回一个 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 对象，该对象表示与参数 <paramref name="edmSpaceType" /> 提供的类型匹配的对象空间类型。</summary>
      <returns>一个表示对象空间类型的 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 对象。 如果没有匹配的类型，则此方法返回 null。</returns>
      <param name="edmSpaceType">一个 <see cref="T:System.Data.Metadata.Edm.EnumType" /> 对象，表示 <see cref="T:System.Data.Metadata.Edm.EdmType" />。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Metadata.Edm.StructuralType)">
      <summary>返回一个 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 对象，该对象表示与参数 <paramref name="edmSpaceType" /> 提供的类型匹配的对象空间类型。</summary>
      <returns>一个表示对象空间类型的 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 对象。 如果没有匹配的类型，则此方法返回 null。</returns>
      <param name="edmSpaceType">一个 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 对象，表示 <see cref="T:System.Data.Metadata.Edm.EdmType" />。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetPrimitiveTypes(System.Data.Metadata.Edm.DataSpace)">
      <summary>返回指定数据模型中的基元类型的列表。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含指定数据模型中的所有基元类型。</returns>
      <param name="dataSpace">需要其基元类型列表的数据模型。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetRelevantMembersForUpdate(System.Data.Metadata.Edm.EntitySetBase,System.Data.Metadata.Edm.EntityTypeBase,System.Boolean)">
      <summary>返回原始值在修改个体时需要的给定 <see cref="T:System.Data.Metadata.Edm.EntitySet" />/<see cref="T:System.Data.Metadata.Edm.EntityType" /> 的成员。</summary>
      <returns>要求原始值的 <see cref="T:System.Data.Metadata.Edm.EdmMember" />s。</returns>
      <param name="entitySet">属于 C 空间的 <see cref="T:System.Data.Metadata.Edm.EntitySet" />。</param>
      <param name="entityType">特定 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 中参与的 <see cref="T:System.Data.Metadata.Edm.EntityType" />。</param>
      <param name="partialUpdateSupported">如果可以部分更新实体，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetRequiredOriginalValueMembers(System.Data.Metadata.Edm.EntitySetBase,System.Data.Metadata.Edm.EntityTypeBase)">
      <summary>从实体集和实体类型获取原始值成员。</summary>
      <returns>从实体集和实体类型获取原始值成员。</returns>
      <param name="entitySet">要从中检索原始值的实体集。</param>
      <param name="entityType">要检索其原始值的实体类型。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace)">
      <summary>使用指定的类型名称、命名空间名称和数据模型返回一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。</returns>
      <param name="name">类型名称。</param>
      <param name="namespaceName">类型的命名空间。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <param name="dataSpace">要从中搜索类型的概念模型。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Data.Metadata.Edm.DataSpace)">
      <summary>使用指定的类型名称、命名空间名称和数据模型返回一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象，该对象表示在指定数据模型中匹配给定类型名称和命名空间名称的类型。 如果没有匹配的类型，则此方法返回 null。</returns>
      <param name="name">类型名称。</param>
      <param name="namespaceName">类型的命名空间。</param>
      <param name="dataSpace">要从中搜索类型的概念模型。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>从给定程序集加载元数据。</summary>
      <param name="assembly">将从其中加载元数据的程序集。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly,System.Action{System.String})">
      <summary>从给定程序集加载元数据。</summary>
      <param name="assembly">将从其中加载元数据的程序集。</param>
      <param name="logLoadMessage">用于记录加载消息的委托。</param>
    </member>
    <member name="F:System.Data.Metadata.Edm.MetadataWorkspace.MaximumEdmVersionSupported">
      <summary>表示 Entity Framework 运行时所支持的实体数据模型 (EDM) 的最高版本。</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.RegisterItemCollection(System.Data.Metadata.Edm.ItemCollection)">
      <summary>向每个关联数据模型注册项集合。</summary>
      <param name="collection">需要填充的输出参数集合。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Metadata.Edm.EnumType,System.Data.Metadata.Edm.EnumType@)">
      <summary>通过输出参数 <paramref name="edmSpaceType" /> 返回一个 <see cref="T:System.Data.Metadata.Edm.EnumType" /> 对象，该对象表示与参数 <paramref name="objectSpaceType" /> 提供的类型匹配的 <see cref="T:System.Data.Metadata.Edm.EdmType" />。</summary>
      <returns>true 成功，false 失败。</returns>
      <param name="objectSpaceType">一个表示对象空间类型的 <see cref="T:System.Data.Metadata.Edm.EnumType" /> 对象。</param>
      <param name="edmSpaceType">当该方法返回时，包含表示 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 的 <see cref="T:System.Data.Metadata.Edm.EnumType" /> 对象。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Metadata.Edm.StructuralType,System.Data.Metadata.Edm.StructuralType@)">
      <summary>通过输出参数 <paramref name="edmSpaceType" /> 返回一个 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 对象，该对象表示与参数 <paramref name="objectSpaceType" /> 提供的类型匹配的 <see cref="T:System.Data.Metadata.Edm.EdmType" />。</summary>
      <returns>如果存在符合搜索条件的类型，则为 true；否则为 false。</returns>
      <param name="objectSpaceType">一个表示对象空间类型的 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 对象。</param>
      <param name="edmSpaceType">当该方法返回时，包含表示 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 的 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 对象。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.EntityContainer@)">
      <summary>使用指定的实体容器名称和数据模型返回一个 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 对象。</summary>
      <returns>如果存在符合搜索条件的实体容器，则为 true；否则为 false。</returns>
      <param name="name">实体容器的名称。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <param name="dataSpace">要从中搜索实体容器的概念模型。</param>
      <param name="entityContainer">此方法返回时将包含一个 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 对象。 如果没有实体容器，则此输出参数包含 null；否则返回第一个实体容器。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.EntityContainer@)">
      <summary>使用指定的实体容器名称和数据模型返回一个 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 对象。</summary>
      <returns>如果存在符合搜索条件的实体容器，则为 true；否则为 false。</returns>
      <param name="name">实体容器的名称。</param>
      <param name="dataSpace">要从中搜索实体容器的概念模型。</param>
      <param name="entityContainer">此方法返回时将包含一个 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 对象。 如果没有实体容器，则此输出参数包含 null；否则返回第一个实体容器。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace,``0@)">
      <summary>使用指定的标识和数据模型返回一个项。</summary>
      <returns>如果存在符合搜索条件的项，则为 true；否则为 false。</returns>
      <param name="identity">要从中搜索项的概念模型。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <param name="dataSpace">要从中搜索项的概念模型。</param>
      <param name="item">此方法返回时将包含一个 <see cref="T:System.Data.Metadata.Edm.GlobalIem" /> 对象。 该参数未经初始化即被传递。</param>
      <typeparam name="T">由方法返回的类型。</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Data.Metadata.Edm.DataSpace,``0@)">
      <summary>使用指定的标识和数据模型返回一个项。</summary>
      <returns>如果存在符合搜索条件的项，则为 true；否则为 false。</returns>
      <param name="identity">要从中搜索项的概念模型。</param>
      <param name="space">要从中搜索项的概念模型。</param>
      <param name="item">此方法返回时将包含一个 <see cref="T:System.Data.Metadata.Edm.GlobalIem" /> 对象。 该参数未经初始化即被传递。</param>
      <typeparam name="T">由方法返回的类型。</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetItemCollection(System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.ItemCollection@)">
      <summary>测试对 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 的检索。</summary>
      <returns>如果检索成功，则为 true；否则为 false。</returns>
      <param name="dataSpace">要从其中尝试对 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 的检索的 <see cref="T:System.Data.Metadata.Edm.DataSpace" />。</param>
      <param name="collection">此方法返回时，包含项连接。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Metadata.Edm.EnumType,System.Data.Metadata.Edm.EnumType@)">
      <summary>通过输出参数 <paramref name="objectSpaceType" /> 返回一个 <see cref="T:System.Data.Metadata.Edm.EnumType" /> 对象，该对象表示与参数 <paramref name="edmSpaceType" /> 提供的 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 匹配的类型。</summary>
      <returns>如果存在符合搜索条件的类型，则为 true；否则为 false。</returns>
      <param name="edmSpaceType">一个 <see cref="T:System.Data.Metadata.Edm.EnumType" /> 对象，表示 <see cref="T:System.Data.Metadata.Edm.EdmType" />。</param>
      <param name="objectSpaceType">当该方法返回时，包含表示“对象”空格类型的 <see cref="T:System.Data.Metadata.Edm.EnumType" /> 对象。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Metadata.Edm.StructuralType,System.Data.Metadata.Edm.StructuralType@)">
      <summary>通过输出参数 <paramref name="objectSpaceType" /> 返回一个 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 对象，该对象表示与参数 <paramref name="edmSpaceType" /> 提供的 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 匹配的类型。</summary>
      <returns>如果存在符合搜索条件的类型，则为 true；否则为 false。</returns>
      <param name="edmSpaceType">一个 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 对象，表示 <see cref="T:System.Data.Metadata.Edm.EdmType" />。</param>
      <param name="objectSpaceType">当该方法返回时，包含表示“对象”空格类型的 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 对象。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.EdmType@)">
      <summary>使用指定的类型名称、命名空间名称和数据模型返回一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。</summary>
      <returns>如果存在符合搜索条件的类型，则为 true；否则为 false。</returns>
      <param name="name">类型名称。</param>
      <param name="namespaceName">类型的命名空间。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <param name="dataSpace">要从中搜索类型的概念模型。</param>
      <param name="type">此方法返回时将包含一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.EdmType@)">
      <summary>使用指定的类型名称、命名空间名称和数据模型返回一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。</summary>
      <returns>如果存在符合搜索条件的类型，则为 true；否则为 false。</returns>
      <param name="name">类型名称。</param>
      <param name="namespaceName">类型的命名空间。</param>
      <param name="dataSpace">要从中搜索类型的概念模型。</param>
      <param name="type">此方法返回时将包含一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。 该参数未经初始化即被传递。</param>
    </member>
    <member name="T:System.Data.Metadata.Edm.NavigationProperty">
      <summary>表示概念模型中从一个实体类型到另一个实体类型的导航。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.NavigationProperty.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.NavigationProperty" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.NavigationProperty" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.NavigationProperty.FromEndMember">
      <summary>获取此导航中的“源”关系端成员。</summary>
      <returns>此导航中的“源”关系端成员。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.NavigationProperty.GetDependentProperties">
      <summary>获取位于引用约束的依赖端的导航属性的外键属性。</summary>
      <returns>外键属性的集合。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.NavigationProperty.RelationshipType">
      <summary>获取此导航属性的操作所针对的关系类型。</summary>
      <returns>此导航属性的操作所针对的关系类型。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.NavigationProperty.ToEndMember">
      <summary>获取此导航的“目标”关系端成员。</summary>
      <returns>此导航的“目标”关系端成员。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.ObjectItemCollection">
      <summary>向该对象层表示项的集合的类。 大部分集的实际维护实现由 ItemCollection 完成。</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.#ctor">
      <summary>初始化 <see cref="T:System.Data.Metadata.Edm.ObjectItemCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Metadata.Edm.EnumType)">
      <summary>方法返回基础返回用于指定 OSpace 类型参数的 CLR 类型。 如果该参数的 DataSpace 不为 OSpace，则将引发 ArgumentException。</summary>
      <returns>OSpace 参数的 CLR 类型。</returns>
      <param name="objectSpaceType">要查找的 OSpace 类型。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Metadata.Edm.StructuralType)">
      <summary>返回与由 objectSpaceType 参数提供的 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 相应的 CLR 类型。</summary>
      <returns>OSpace 参数的 CLR 类型。</returns>
      <param name="objectSpaceType">一个表示对象空间类型的 <see cref="T:System.Data.Metadata.Edm.StructuralType" />。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.GetItems``1">
      <summary>从此项集合中返回指定类型的所有项。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含指定类型的所有项。</returns>
      <typeparam name="T">由方法返回的类型。</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.GetPrimitiveTypes">
      <summary>返回基元类型对象集合。</summary>
      <returns>基元类型对象集合。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>从给定程序集加载元数据。</summary>
      <param name="assembly">将从其中加载元数据的程序集。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Metadata.Edm.EdmItemCollection)">
      <summary>从指定的程序集加载元数据。</summary>
      <param name="assembly">将从其中加载元数据的程序集。</param>
      <param name="edmItemCollection">未包含空间元数据的 EDM 元数据源。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Metadata.Edm.EdmItemCollection,System.Action{System.String})">
      <summary>从给定程序集加载元数据。</summary>
      <param name="assembly">将从其中加载元数据的程序集。</param>
      <param name="edmItemCollection">未包含空间元数据的 EDM 元数据源。</param>
      <param name="logLoadMessage">将向其发送日志消息的委托。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Metadata.Edm.EnumType,System.Type@)">
      <summary>返回基础返回用于指定 OSpace 枚举类型参数的 CLR 类型。 如果该参数的 DataSpace 不为 OSpace，则此方法返回 false 并将该参数设置为 null。</summary>
      <returns>如果成功，则为 true；如果失败，则为 false。</returns>
      <param name="objectSpaceType">要查找的 OSpace 枚举类型</param>
      <param name="clrType">OSpace 参数的 CLR 枚举类型</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Metadata.Edm.StructuralType,System.Type@)">
      <summary>返回与由 objectSpaceType 参数提供的 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 相对应的 CLR 类型。</summary>
      <returns>如果存在符合搜索条件的类型，则为 true；否则为 false。</returns>
      <param name="objectSpaceType">一个表示对象空间类型的 <see cref="T:System.Data.Metadata.Edm.StructuralType" />。</param>
      <param name="clrType">CLR 类型。</param>
    </member>
    <member name="T:System.Data.Metadata.Edm.OperationAction">
      <summary>指定在删除 <see cref="T:System.Data.Metadata.Edm.RelationshipType" /> 的父 End 时可能进行的操作的列表。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.OperationAction.Cascade">
      <summary>删除父 End 时，也将删除其关联的子端。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.OperationAction.None">
      <summary>只能删除父 End。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.OperationAction.Restrict">
      <summary>如果父端有一个或多个关联的子端，则不能删除父 End。</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ParameterMode">
      <summary>指定参数的方向。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterMode.In">
      <summary>一个输入参数。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterMode.InOut">
      <summary>一个输入参数和一个输出参数。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterMode.Out">
      <summary>输出参数。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterMode.ReturnValue">
      <summary>方法的返回值。</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ParameterTypeSemantics">
      <summary>指定用于解析函数重载的类型语义。 每个存储提供程序都必须在提供程序清单文件中为每个函数定义使用这些枚举标志。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterTypeSemantics.AllowImplicitConversion">
      <summary>一个标志，指示给定参数类型与正式参数类型之间的隐式转换。 这是默认的转换类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterTypeSemantics.AllowImplicitPromotion">
      <summary>一个标志，指示给定参数类型与正式参数类型之间的类型提升。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterTypeSemantics.ExactMatchOnly">
      <summary>一个标志，指示仅允许严格等效的用法。</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.PrimitiveType">
      <summary>描述 .NET Framework 基元类型、概念模型基元类型和特定于存储提供程序的基元类型。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.PrimitiveType.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.PrimitiveType.ClrEquivalentType">
      <summary>返回此 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 的等效公共语言运行时 (CLR) 类型。 请注意，<see cref="P:System.Data.Metadata.Edm.PrimitiveType.ClrEquivalentType" /> 属性始终返回不可以为 null 的类型值。</summary>
      <returns>一个 <see cref="T:System.Type" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 的等效公共语言运行时 (CLR) 类型。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.PrimitiveType.FacetDescriptions">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 的方面描述的列表。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含此 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 的方面描述的列表。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType">
      <summary>返回此 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 的等效 <see cref="T:System.Data.Metadata.Edm.EdmType" />。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象，该对象是此 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 的等效项。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>返回 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 的等效 <see cref="T:System.Data.Metadata.Edm.EdmType" />。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象，该对象是指定的 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 的等效项。</returns>
      <param name="primitiveTypeKind">一个 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 类型的值。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.PrimitiveType.GetEdmPrimitiveTypes">
      <summary>返回基元类型的列表。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含基元类型的列表。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.PrimitiveType.PrimitiveTypeKind">
      <summary>获取一个 <see cref="T:System.Data.Metadata.Edm.PrimitiveTypeKind" /> 枚举值，该值指示此 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 的基元类型。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.PrimitiveTypeKind" /> 枚举值，该值指示此 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 的基元类型。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.PrimitiveTypeKind">
      <summary>指定由 EDM 定义的基元类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Binary">
      <summary>Binary 类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Boolean">
      <summary>布尔型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Byte">
      <summary>字节类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.DateTime">
      <summary>DateTime 类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.DateTimeOffset">
      <summary>DateTimeOffset 类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Decimal">
      <summary>十进制值的类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Double">
      <summary>Double 数据类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Geography">
      <summary>Geography 类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeographyCollection">
      <summary>Geographic 集合类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeographyLineString">
      <summary>Geographic 行字符串类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeographyMultiLineString">
      <summary>Geographic 多行字符串类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeographyMultiPoint">
      <summary>Geographic 多点类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeographyMultiPolygon">
      <summary>Geographic 多多边形类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeographyPoint">
      <summary>Geographic 点类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeographyPolygon">
      <summary>Geographic 单多边形类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Geometry">
      <summary>Geometry 类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeometryCollection">
      <summary>Geometric 集合类型</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeometryLineString">
      <summary>Geometric 行字符串类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeometryMultiLineString">
      <summary>Geometric 多行字符串类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeometryMultiPoint">
      <summary>Geometric 多点类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeometryMultiPolygon">
      <summary>Geometric 多多边形类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeometryPoint">
      <summary>Geometric 多点类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeometryPolygon">
      <summary>Geometric 单多边形类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Guid">
      <summary>Guid 类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Int16">
      <summary>Int16 类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Int32">
      <summary>Int32 类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Int64">
      <summary>Int64 类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.SByte">
      <summary>SByte 类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Single">
      <summary>该Single 类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.String">
      <summary>”字符串“类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Time">
      <summary>Time 类型。</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.PropertyKind">
      <summary>指定概念模型中项特性的类型。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PropertyKind.Extended">
      <summary>一个指示项特性为 Extended 的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PropertyKind.System">
      <summary>一个指示项特性为 System 的枚举成员。</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1">
      <summary>通过提供具有高级查找功能的只读集合，表示 ADO.NET 元数据层次结构中的成员集合。 此类派生自 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection" /> 类。</summary>
      <typeparam name="T">集合中的元素类型。</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Contains(System.String)">
      <summary>确定集合中是否包含具有指定标识的项。</summary>
      <returns>如果集合包含要搜索的项，则为 true；否则为 false。 默认值为 false。</returns>
      <param name="identity">项的标识。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.GetEnumerator">
      <summary>返回一个可循环访问此集合的枚举器。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" />，可用于循环访问此 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection" />。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.GetValue(System.String,System.Boolean)">
      <summary>使用指定的标识从此集合中检索一个项。</summary>
      <returns>此集合中的一个项。</returns>
      <param name="identity">要搜索的项的标识。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.IndexOf(`0)">
      <summary>返回指定的值在此集合中的索引。</summary>
      <returns>指定的值在此集合中的索引。</returns>
      <param name="value">要搜寻的值。</param>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.IsReadOnly">
      <summary>获取一个值，该值指示此集合是否为只读。</summary>
      <returns>如果该集合为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Item(System.String)">
      <summary>使用指定的标识从此集合中获取一个项。</summary>
      <returns>此集合中的一个项。</returns>
      <param name="identity">要搜索的项的标识。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.TryGetValue(System.String,System.Boolean,`0@)">
      <summary>使用指定的标识从此集合中检索一个项。</summary>
      <returns>如果存在符合搜索条件的项，则为 true；否则为 false。</returns>
      <param name="identity">要搜索的项的标识。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <param name="item">此方法返回时，此输出参数包含集合中的一项。 如果没有匹配项，则此输出参数包含 null。</param>
    </member>
    <member name="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator">
      <summary>支持对 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 集合进行简单迭代。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Current">
      <summary>获取位于当前位置的成员。</summary>
      <returns>位于当前位置的成员。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Dispose">
      <summary>释放此枚举数。</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.MoveNext">
      <summary>移动到 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" /> 类型集合中的下一个成员。</summary>
      <returns>如果在 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.EnumeratortaCollection" /> 类型集合中移动枚举数，则返回 true；否则返回 false。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Reset">
      <summary>将枚举数定位在 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型集合的第一个位置之前。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>获取位于当前位置的成员。</summary>
      <returns>位于当前位置的成员。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.ReferentialConstraint">
      <summary>描述对概念模型中的关系的引用约束。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.FromProperties">
      <summary>获取在其上定义此 <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> 的“from 角色”的属性列表。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含在其上定义此 <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> 的“from 角色”的属性列表。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.FromRole">
      <summary>获取参与此 <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> 的“from 角色”。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.RelationshipEndMember" /> 对象，表示参与此 <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> 的“from 角色”。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.ToProperties">
      <summary>获取在其上定义此 <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> 的“to 角色”的属性列表。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含在其上定义此 <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> 的“to 角色”的属性列表。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.ToRole">
      <summary>获取参与此 <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> 的“to 角色”。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.RelationshipEndMember" /> 对象，表示参与此 <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> 的“to 角色”。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReferentialConstraint.ToString">
      <summary>返回 <see cref="P:System.Data.Metadata.Edm.ReferentialConstraint.FromRole" /> 名称和 <see cref="P:System.Data.Metadata.Edm.ReferentialConstraint.ToRole" /> 名称的组合。</summary>
      <returns>
        <see cref="P:System.Data.Metadata.Edm.ReferentialConstraint.FromRole" /> 名称和 <see cref="P:System.Data.Metadata.Edm.ReferentialConstraint.ToRole" /> 名称的组合。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.RefType">
      <summary>为使用实体的操作提供实体的地址。 不能在概念模型架构中显式定义 <see cref="T:System.Data.Metadata.Edm.RefType" />。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.RefType.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.RefType" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.RefType" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RefType.ElementType">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.RefType" /> 引用的实体类型。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.EntityTypeBase" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.RefType" /> 引用的实体类型。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.RelationshipEndMember">
      <summary>定义 <see cref="T:System.Data.Metadata.Edm.RelationshipType" /> 的 End 成员。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipEndMember.DeleteBehavior">
      <summary>获取此关系 End 成员的操作行为。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.OperationAction" /> 值之一。 默认值为 <see cref="P:System.Data.Metadata.Edm.OperationAction.None" />。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.RelationshipEndMember.GetEntityType">
      <summary>访问关联中的 EndMember 的 EntityType。</summary>
      <returns>关联中的 EndMember 的 EntityType。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipEndMember.RelationshipMultiplicity">
      <summary>获取此关系 End 成员的重数。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> 值之一。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.RelationshipMultiplicity">
      <summary>表示与关系类型的 End 有关的重数信息。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.RelationshipMultiplicity.Many">
      <summary>下限为 0，上限为 null。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.RelationshipMultiplicity.One">
      <summary>下限为 1，上限也为 1。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne">
      <summary>下限为 0，上限为 1。</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.RelationshipSet">
      <summary>表示概念模型中的关系集。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipSet.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipSet.ElementType">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 的关系类型。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.RelationshipType" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 的关系类型。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.RelationshipType">
      <summary>表示概念模型中的关系的基类。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipType.RelationshipEndMembers">
      <summary>获取此关系类型的两端的列表。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此关系类型的 End 列表。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.RowType">
      <summary>描述一行，例如查询的结果。 此类派生自 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 类。 行类型的结构取决于在查询中投影的数据库列。 <see cref="T:System.Data.Metadata.Edm.RowType" /> 在概念模型函数中非常有用。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.RowType.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.RowType" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.RowType" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RowType.Properties">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.RowType" /> 上的属性的列表。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此 <see cref="T:System.Data.Metadata.Edm.RowType" /> 上的属性的列表。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.SimpleType">
      <summary>一个描述概念模型中的基元类型的基类。</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.StoreGeneratedPattern">
      <summary>表示一个枚举，它指定三个选项，用于指示存储架构定义语言 (SSDL) (.ssdl) 中的列在插入和更新操作期间是否需要值。 ADO.NET 读取该列的值，然后将其存储在内存中的缓存内。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.StoreGeneratedPattern.Computed">
      <summary>插入和更新时生成一个值。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.StoreGeneratedPattern.Identity">
      <summary>插入时生成一个值，更新时该值保持不变。</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.StoreGeneratedPattern.None">
      <summary>一个值，指示该属性不是服务器生成的属性。 这是默认值。</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.StoreItemCollection">
      <summary>加载有关存储（数据库）模型的元数据。 <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> 用于加载存储架构定义语言 (SSDL) 文件中的元数据。 此类派生自 <see cref="T:System.Data.Metadata.Edm.ItemCollection" /> 类。</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.StoreItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>使用指定的XMLReader初始化 <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> 类的新实例。</summary>
      <param name="xmlReaders">用于创建元数据的 XML 读取器。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.StoreItemCollection.#ctor(System.String[])">
      <summary>使用指定的文件路径初始化 <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> 类的新实例。</summary>
      <param name="filePaths">用于创建元数据的文件路径。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.StoreItemCollection.GetPrimitiveTypes">
      <summary>返回 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 对象的集合。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 对象，表示 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 对象的集合。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.StoreItemCollection.StoreSchemaVersion">
      <summary>获取此集合的存储架构的版本。</summary>
      <returns>此集合的存储架构的版本。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.StructuralType">
      <summary>概念模型中拥有成员的所有类型的基类型。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.StructuralType.Members">
      <summary>获取此类型上的成员列表。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此类型上的一组成员。</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.TypeUsage">
      <summary>描述一个类型和该类型的一组方面。</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.TypeUsage.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 的内置类型种类。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Boolean)">
      <summary>创建一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象，该对象使用指定的方面值描述 binary 类型。</summary>
      <returns>一个使用指定的 Facet 值描述二进制类型的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象。</returns>
      <param name="primitiveType">为其创建 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象的 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />。</param>
      <param name="isFixedLength">如果将 binary 类型的长度设置为固定值，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Boolean,System.Int32)">
      <summary>创建一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象，该对象使用指定的方面值描述 binary 类型。</summary>
      <returns>一个使用指定的 Facet 值描述二进制类型的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象。</returns>
      <param name="primitiveType">为其创建 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象的 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />。</param>
      <param name="isFixedLength">如果将 binary 类型的长度设置为固定值，则为 true；否则为 false。</param>
      <param name="maxLength">binary 类型的最大长度。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDateTimeOffsetTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>创建参数所描述类型的 <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" /> 对象。</returns>
      <param name="primitiveType">定义偏移的度量单位的简单类型。</param>
      <param name="precision">用秒的小数部分（基于支持的小数位数）表示的 <see cref="T:System." />DateTimeOffset 的粒度。 例如，精度为 3 表示支持的粒度为毫秒。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDateTimeTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>创建参数所描述类型的 <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" /> 对象。</returns>
      <param name="primitiveType">定义 <see cref="T:System." />DateTime 对象的度量单位的简单类型。</param>
      <param name="precision">用秒的小数部分（基于支持的小数位数）表示的 <see cref="T:System." />DateTimeOffset 的粒度。 例如，精度为 3 表示支持的粒度为毫秒。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Metadata.Edm.PrimitiveType)">
      <summary>创建一个使用无限精度和小数位数 Facet 值描述十进制类型的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象。</summary>
      <returns>一个使用无限精度和小数位数 Facet 值描述十进制类型的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象。</returns>
      <param name="primitiveType">为其创建 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象的 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Byte,System.Byte)">
      <summary>创建一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象，该对象使用指定的方面值描述 decimal 类型。</summary>
      <returns>一个使用指定的 Facet 值描述十进制类型的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象。</returns>
      <param name="primitiveType">为其创建 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象的 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />。</param>
      <param name="precision">十进制类型的精度（以 <see cref="T:System.Byte" /> 类型表示）。</param>
      <param name="scale">十进制类型的小数位数（以 <see cref="T:System.Byte" /> 类型表示）。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDefaultTypeUsage(System.Data.Metadata.Edm.EdmType)">
      <summary>创建一个具有指定概念模型类型的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象。</summary>
      <returns>一个具有指定 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 的默认 Facet 值的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象。</returns>
      <param name="edmType">为其创建 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象的 <see cref="T:System.Data.Metadata.Edm.EdmType" />。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean)">
      <summary>创建一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象，该对象使用指定的 Facet 值和无限 MaxLength 描述字符串类型。</summary>
      <returns>一个使用指定 Facet 值和无限 MaxLength 描述字符串类型的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象。</returns>
      <param name="primitiveType">为其创建 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象的 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />。</param>
      <param name="isUnicode">如果将 string 类型的字符编码标准设置为 Unicode，则为 true；否则为 false。</param>
      <param name="isFixedLength">true （若要将字符串类型的长度设置为固定值）；否则为false</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean,System.Int32)">
      <summary>创建一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象，该对象使用指定的方面值描述 string 类型。</summary>
      <returns>一个使用指定 Facet 值描述字符串类型的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象。</returns>
      <param name="primitiveType">为其创建 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象的 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />。</param>
      <param name="isUnicode">如果将 string 类型的字符编码标准设置为 Unicode，则为 true；否则为 false。</param>
      <param name="isFixedLength">如果将 string 类型的字符编码标准设置为 Unicode，则为 true；否则为 false。</param>
      <param name="maxLength">如果将 string 类型的长度设置为固定值，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateTimeTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>创建参数所描述类型的 <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" /> 对象。</returns>
      <param name="primitiveType">定义 <see cref="T:System." />DateTime 对象的度量单位的简单类型。</param>
      <param name="precision">用秒的小数部分（基于支持的小数位数）表示的 <see cref="T:System." />DateTimeOffset 的粒度。 例如，精度为 3 表示支持的粒度为毫秒。</param>
    </member>
    <member name="P:System.Data.Metadata.Edm.TypeUsage.EdmType">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 所描述的类型信息。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 所描述的类型信息。</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.TypeUsage.Facets">
      <summary>获取此 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 所描述类型的方面的列表。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 所描述类型的方面的列表。</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.IsSubtypeOf(System.Data.Metadata.Edm.TypeUsage)">
      <summary>检查此 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 是否是指定 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 的子类型。</summary>
      <returns>如果此 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 是指定 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 的子类型，则为 true；否则为 false。</returns>
      <param name="typeUsage">要检查的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象。</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.ToString">
      <summary>返回此 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 所描述的类型的全名。</summary>
      <returns>此 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 描述的类型的全名（采用字符串的形式）。</returns>
    </member>
    <member name="T:System.Data.Objects.CompiledQuery">
      <summary>表示一个缓存的 LINQ to Entities 查询。</summary>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`10" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg1 " />必须是基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg2 " />必须是基元类型。</typeparam>
      <typeparam name="TArg3">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg3 " />必须是基元类型。</typeparam>
      <typeparam name="TArg4">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg4 " />必须是基元类型。</typeparam>
      <typeparam name="TArg5">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg5 " />必须是基元类型。</typeparam>
      <typeparam name="TArg6">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg6 " />必须是基元类型。</typeparam>
      <typeparam name="TArg7">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg7 " />必须是基元类型。</typeparam>
      <typeparam name="TArg8">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg8 " />必须是基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})" /> 方法返回的委托所返回的查询结果的类型 <paramref name="T" />。</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`11" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg1 " />必须是基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg2 " />必须是基元类型。</typeparam>
      <typeparam name="TArg3">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg3 " />必须是基元类型。</typeparam>
      <typeparam name="TArg4">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg4 " />必须是基元类型。</typeparam>
      <typeparam name="TArg5">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg5 " />必须是基元类型。</typeparam>
      <typeparam name="TArg6">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg6 " />必须是基元类型。</typeparam>
      <typeparam name="TArg7">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg7 " />必须是基元类型。</typeparam>
      <typeparam name="TArg8">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg8 " />必须是基元类型。</typeparam>
      <typeparam name="TArg9">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg9 " />必须是基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})" /> 方法返回的委托所返回的查询结果的类型 <paramref name="T" />。</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`12" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg1 " />必须是基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg2 " />必须是基元类型。</typeparam>
      <typeparam name="TArg3">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg3 " />必须是基元类型。</typeparam>
      <typeparam name="TArg4">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg4 " />必须是基元类型。</typeparam>
      <typeparam name="TArg5">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg5 " />必须是基元类型。</typeparam>
      <typeparam name="TArg6">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg6 " />必须是基元类型。</typeparam>
      <typeparam name="TArg7">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg7 " />必须是基元类型。</typeparam>
      <typeparam name="TArg8">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg8 " />必须是基元类型。</typeparam>
      <typeparam name="TArg9">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg9 " />必须是基元类型。</typeparam>
      <typeparam name="TArg10">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg10 " />必须是基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})" /> 方法返回的委托所返回的查询结果的类型 <paramref name="T" />。</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`13" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg1 " />必须是基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg2 " />必须是基元类型。</typeparam>
      <typeparam name="TArg3">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg3 " />必须是基元类型。</typeparam>
      <typeparam name="TArg4">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg4 " />必须是基元类型。</typeparam>
      <typeparam name="TArg5">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg5 " />必须是基元类型。</typeparam>
      <typeparam name="TArg6">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg6 " />必须是基元类型。</typeparam>
      <typeparam name="TArg7">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg7 " />必须是基元类型。</typeparam>
      <typeparam name="TArg8">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg8 " />必须是基元类型。</typeparam>
      <typeparam name="TArg9">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg9 " />必须是基元类型。</typeparam>
      <typeparam name="TArg10">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg10 " />必须是基元类型。</typeparam>
      <typeparam name="TArg11">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg11 " />必须是基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})" /> 方法返回的委托所返回的查询结果的类型 <paramref name="T" />。</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`14" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg1 " />必须是基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg2 " />必须是基元类型。</typeparam>
      <typeparam name="TArg3">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg3 " />必须是基元类型。</typeparam>
      <typeparam name="TArg4">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg4 " />必须是基元类型。</typeparam>
      <typeparam name="TArg5">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg5 " />必须是基元类型。</typeparam>
      <typeparam name="TArg6">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg6 " />必须是基元类型。</typeparam>
      <typeparam name="TArg7">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg7 " />必须是基元类型。</typeparam>
      <typeparam name="TArg8">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg8 " />必须是基元类型。</typeparam>
      <typeparam name="TArg9">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg9 " />必须是基元类型。</typeparam>
      <typeparam name="TArg10">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg10 " />必须是基元类型。</typeparam>
      <typeparam name="TArg11">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg11 " />必须是基元类型。</typeparam>
      <typeparam name="TArg12">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg12 " />必须是基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})" /> 方法返回的委托所返回的查询结果的类型 <paramref name="T" />。</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`15" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg1 " />必须是基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg2 " />必须是基元类型。</typeparam>
      <typeparam name="TArg3">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg3 " />必须是基元类型。</typeparam>
      <typeparam name="TArg4">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg4 " />必须是基元类型。</typeparam>
      <typeparam name="TArg5">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg5 " />必须是基元类型。</typeparam>
      <typeparam name="TArg6">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg6 " />必须是基元类型。</typeparam>
      <typeparam name="TArg7">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg7 " />必须是基元类型。</typeparam>
      <typeparam name="TArg8">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg8 " />必须是基元类型。</typeparam>
      <typeparam name="TArg9">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg9 " />必须是基元类型。</typeparam>
      <typeparam name="TArg10">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg10 " />必须是基元类型。</typeparam>
      <typeparam name="TArg11">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg11 " />必须是基元类型。</typeparam>
      <typeparam name="TArg12">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg12 " />必须是基元类型。</typeparam>
      <typeparam name="TArg13">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg13 " />必须是基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})" /> 方法返回的委托所返回的查询结果的类型 <paramref name="T" />。</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`16" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg1 " />必须是基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg2 " />必须是基元类型。</typeparam>
      <typeparam name="TArg3">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg3 " />必须是基元类型。</typeparam>
      <typeparam name="TArg4">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg4 " />必须是基元类型。</typeparam>
      <typeparam name="TArg5">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg5 " />必须是基元类型。</typeparam>
      <typeparam name="TArg6">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg6 " />必须是基元类型。</typeparam>
      <typeparam name="TArg7">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg7 " />必须是基元类型。</typeparam>
      <typeparam name="TArg8">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg8 " />必须是基元类型。</typeparam>
      <typeparam name="TArg9">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg9 " />必须是基元类型。</typeparam>
      <typeparam name="TArg10">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg10 " />必须是基元类型。</typeparam>
      <typeparam name="TArg11">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg11 " />必须是基元类型。</typeparam>
      <typeparam name="TArg12">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg12 " />必须是基元类型。</typeparam>
      <typeparam name="TArg13">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg13 " />必须是基元类型。</typeparam>
      <typeparam name="TArg14">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg14 " />必须是基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})" /> 方法返回的委托所返回的查询结果的类型 <paramref name="T" />。</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`17" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg1 " />必须是基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg2 " />必须是基元类型。</typeparam>
      <typeparam name="TArg3">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg3 " />必须是基元类型。</typeparam>
      <typeparam name="TArg4">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg4 " />必须是基元类型。</typeparam>
      <typeparam name="TArg5">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg5 " />必须是基元类型。</typeparam>
      <typeparam name="TArg6">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg6 " />必须是基元类型。</typeparam>
      <typeparam name="TArg7">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg7 " />必须是基元类型。</typeparam>
      <typeparam name="TArg8">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg8 " />必须是基元类型。</typeparam>
      <typeparam name="TArg9">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg9 " />必须是基元类型。</typeparam>
      <typeparam name="TArg10">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg10 " />必须是基元类型。</typeparam>
      <typeparam name="TArg11">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg11 " />必须是基元类型。</typeparam>
      <typeparam name="TArg12">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg12 " />必须是基元类型。</typeparam>
      <typeparam name="TArg13">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg13 " />必须是基元类型。</typeparam>
      <typeparam name="TArg14">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg14 " />必须是基元类型。</typeparam>
      <typeparam name="TArg15">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg15 " />必须是基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})" /> 方法返回的委托所返回的查询结果的类型 <paramref name="T" />。</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`2" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托所返回的查询结果的类型 <paramref name="T" />。</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`3" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg1" /> 必须是基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" /> 方法返回的委托所返回的查询结果的类型 <paramref name="T" />。</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`4" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg1 " />必须是基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg2 " />必须是基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})" /> 方法返回的委托所返回的查询结果的类型 <paramref name="T" />。</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`5" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg1 " />必须是基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg2 " />必须是基元类型。</typeparam>
      <typeparam name="TArg3">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg3 " />必须是基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})" /> 方法返回的委托所返回的查询结果的类型 <paramref name="T" />。</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`6" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg1 " />必须是基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg2 " />必须是基元类型。</typeparam>
      <typeparam name="TArg3">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg3 " />必须是基元类型。</typeparam>
      <typeparam name="TArg4">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg4 " />必须是基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})" /> 方法返回的委托所返回的查询结果的类型 <paramref name="T" />。</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`7" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg1 " />必须是基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg2 " />必须是基元类型。</typeparam>
      <typeparam name="TArg3">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg3 " />必须是基元类型。</typeparam>
      <typeparam name="TArg4">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg4 " />必须是基元类型。</typeparam>
      <typeparam name="TArg5">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg5 " />必须是基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})" /> 方法返回的委托所返回的查询结果的类型 <paramref name="T" />。</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`8" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg1 " />必须是基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg2 " />必须是基元类型。</typeparam>
      <typeparam name="TArg3">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg3 " />必须是基元类型。</typeparam>
      <typeparam name="TArg4">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg4 " />必须是基元类型。</typeparam>
      <typeparam name="TArg5">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg5 " />必须是基元类型。</typeparam>
      <typeparam name="TArg6">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg6 " />必须是基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})" /> 方法返回的委托所返回的查询结果的类型 <paramref name="T" />。</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`9" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg1 " />必须是基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg2 " />必须是基元类型。</typeparam>
      <typeparam name="TArg3">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg3 " />必须是基元类型。</typeparam>
      <typeparam name="TArg4">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg4 " />必须是基元类型。</typeparam>
      <typeparam name="TArg5">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg5 " />必须是基元类型。</typeparam>
      <typeparam name="TArg6">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg6 " />必须是基元类型。</typeparam>
      <typeparam name="TArg7">表示在执行由此方法返回的委托时必须传入的参数的类型。 <paramref name="TArg7 " />必须是基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})" /> 方法返回的委托所返回的查询结果的类型 <paramref name="T" />。</typeparam>
    </member>
    <member name="T:System.Data.Objects.CurrentValueRecord">
      <summary>提供对对象数据的当前值的访问。</summary>
    </member>
    <member name="T:System.Data.Objects.DbUpdatableDataRecord">
      <summary>提供对对象数据的原始值的访问。 <see cref="T:System.Data.Objects.DbUpdatableDataRecord" /> 实现可用于更新对象的原始值的方法。</summary>
    </member>
    <member name="P:System.Data.Objects.DbUpdatableDataRecord.DataRecordInfo">
      <summary>获取数据记录信息。</summary>
      <returns>
        <see cref="T:System.Data.Common.DataRecordInfo" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Objects.DbUpdatableDataRecord.FieldCount">
      <summary>获取记录中的字段数。</summary>
      <returns>一个整数值，表示字段数。</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetBoolean(System.Int32)">
      <summary>检索布尔形式的字段值。</summary>
      <returns>布尔形式的字段值。</returns>
      <param name="ordinal">字段的序号。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetByte(System.Int32)">
      <summary>检索 byte 形式的字段值。</summary>
      <returns>byte 形式的字段值。</returns>
      <param name="ordinal">字段的序号。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>检索 byte 数组形式的字段值。</summary>
      <returns>已复制的字节数。</returns>
      <param name="ordinal">字段的序号。</param>
      <param name="dataIndex">数据复制起始位置的索引。</param>
      <param name="buffer">数据复制到其中的目标缓冲区。</param>
      <param name="bufferIndex">目标缓冲区中复制起始位置的索引。</param>
      <param name="length">要复制的字节数。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetChar(System.Int32)">
      <summary>检索 char 形式的字段值。</summary>
      <returns>char 形式的字段值。</returns>
      <param name="ordinal">字段的序号。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>检索 char 数组形式的字段值。</summary>
      <returns>已复制的字符数。</returns>
      <param name="ordinal">字段的序号。</param>
      <param name="dataIndex">数据复制起始位置的索引。</param>
      <param name="buffer">数据复制到其中的目标缓冲区。</param>
      <param name="bufferIndex">目标缓冲区中复制起始位置的索引。</param>
      <param name="length">要复制的字符数。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDataReader(System.Int32)">
      <summary>检索 <see cref="T:System.Common.DbDataReader" /> 形式的字段值。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> 形式的字段值。</returns>
      <param name="i">字段的序号。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDataRecord(System.Int32)">
      <summary>检索 <see cref="T:System.Data.Common.DbDataRecord" /> 形式的字段值。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataRecord" /> 形式的字段值。</returns>
      <param name="ordinal">字段的序号。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDataTypeName(System.Int32)">
      <summary>检索字段数据类型的名称。</summary>
      <returns>字段数据类型的名称。</returns>
      <param name="ordinal">字段的序号。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDateTime(System.Int32)">
      <summary>检索 <see cref="T:System.DateTime" /> 形式的字段值。</summary>
      <returns>
        <see cref="T:System.DateTime" /> 形式的字段值。</returns>
      <param name="ordinal">字段的序号。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDbDataReader(System.Int32)">
      <summary>以 <see cref="T:System.Common.DbDataReader" /> 形式检索字段值</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> 形式的字段值。</returns>
      <param name="ordinal">字段的序号。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDecimal(System.Int32)">
      <summary>检索 decimal 形式的字段值。</summary>
      <returns>decimal 形式的字段值。</returns>
      <param name="ordinal">字段的序号。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDouble(System.Int32)">
      <summary>检索 double 形式的字段值。</summary>
      <returns>double 形式的字段值。</returns>
      <param name="ordinal">字段的序号。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetFieldType(System.Int32)">
      <summary>检索字段的类型。</summary>
      <returns>字段类型。</returns>
      <param name="ordinal">字段的序号。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetFloat(System.Int32)">
      <summary>检索 float 形式的字段值。</summary>
      <returns>float 形式的字段值。</returns>
      <param name="ordinal">字段的序号。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetGuid(System.Int32)">
      <summary>检索 <see cref="T:System.Guid" /> 形式的字段值。</summary>
      <returns>
        <see cref="T:System.Guid" /> 形式的字段值。</returns>
      <param name="ordinal">字段的序号。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetInt16(System.Int32)">
      <summary>检索 <see cref="T:System.Int16" /> 形式的字段值。</summary>
      <returns>
        <see cref="T:System.Int16" /> 形式的字段值。</returns>
      <param name="ordinal">字段的序号。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetInt32(System.Int32)">
      <summary>检索 <see cref="T:System.Int32" /> 形式的字段值。</summary>
      <returns>
        <see cref="T:System.Int32" /> 形式的字段值。</returns>
      <param name="ordinal">字段的序号。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetInt64(System.Int32)">
      <summary>检索 <see cref="T:System.Int64" /> 形式的字段值。</summary>
      <returns>
        <see cref="T:System.Int64" /> 形式的字段值。</returns>
      <param name="ordinal">字段的序号。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetName(System.Int32)">
      <summary>检索字段的名称。</summary>
      <returns>字段名。</returns>
      <param name="ordinal">字段的序号。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetOrdinal(System.String)">
      <summary>使用字段名检索字段的序号。</summary>
      <returns>字段的序号。</returns>
      <param name="name">字段名。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetRecordValue(System.Int32)">
      <summary>检索字段的值。</summary>
      <returns>字段值。</returns>
      <param name="ordinal">字段的序号。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetString(System.Int32)">
      <summary>检索字符串形式的字段值。</summary>
      <returns>字段值。</returns>
      <param name="ordinal">字段的序号。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetValue(System.Int32)">
      <summary>检索字段的值。</summary>
      <returns>字段值。</returns>
      <param name="ordinal">字段的序号。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetValues(System.Object[])">
      <summary>使用当前记录的字段值来填充对象数组。</summary>
      <returns>返回的字段值的数目。</returns>
      <param name="values">用于存储字段值的对象数组。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.IsDBNull(System.Int32)">
      <summary>返回指示指定字段是否设置为 <see cref="T:System.DBNull" /> 的值。</summary>
      <returns>如果该字段设置为 <see cref="T:System.DBNull" />，则为 true；否则为 false。</returns>
      <param name="ordinal">字段的序号。</param>
    </member>
    <member name="P:System.Data.Objects.DbUpdatableDataRecord.Item(System.Int32)">
      <summary>返回具有给定字段序号的值。</summary>
      <returns>具有给定字段序号的值。</returns>
      <param name="ordinal">字段的序号。</param>
    </member>
    <member name="P:System.Data.Objects.DbUpdatableDataRecord.Item(System.String)">
      <summary>获取具有给定字段名称的值。</summary>
      <returns>字段值。</returns>
      <param name="name">字段名。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetBoolean(System.Int32,System.Boolean)">
      <summary>设置记录中某个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetByte(System.Int32,System.Byte)">
      <summary>设置记录中某个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetChar(System.Int32,System.Char)">
      <summary>设置记录中某个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDataRecord(System.Int32,System.Data.IDataRecord)">
      <summary>设置记录中某个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDateTime(System.Int32,System.DateTime)">
      <summary>设置记录中某个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDBNull(System.Int32)">
      <summary>将一个字段设置为 <see cref="T:System.DBNull" /> 值。</summary>
      <param name="ordinal">字段的序号。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDecimal(System.Int32,System.Decimal)">
      <summary>设置记录中某个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDouble(System.Int32,System.Double)">
      <summary>设置记录中某个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetFloat(System.Int32,System.Single)">
      <summary>设置记录中某个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetGuid(System.Int32,System.Guid)">
      <summary>设置记录中某个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetInt16(System.Int32,System.Int16)">
      <summary>设置记录中某个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetInt32(System.Int32,System.Int32)">
      <summary>设置记录中某个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetInt64(System.Int32,System.Int64)">
      <summary>设置记录中某个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetRecordValue(System.Int32,System.Object)">
      <summary>设置记录中某个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetString(System.Int32,System.String)">
      <summary>设置记录中某个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetValue(System.Int32,System.Object)">
      <summary>设置记录中某个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetValues(System.Object[])">
      <summary>设置记录中的字段值。</summary>
      <returns>已设置的字段数。</returns>
      <param name="values">字段的值。</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.System#Data#IDataRecord#GetData(System.Int32)">
      <summary>检索 <see cref="T:System.Data.IDataReader" /> 形式的字段值。</summary>
      <returns>
        <see cref="T:System.Data.IDataReader" /> 形式的字段值。</returns>
      <param name="ordinal">字段的序号。</param>
    </member>
    <member name="T:System.Data.Objects.EntityFunctions">
      <summary>提供在 LINQ to Entities 查询中，公开概念模型规范函数的公共语言运行时 (CLR) 方法。 有关规范函数的信息，请参见规范函数（实体 SQL）。</summary>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>调用 AddDays 规范函数。 有关 AddDays 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="dateValue" /> 增加 <paramref name="addValue" />。</returns>
      <param name="dateValue">有效日期。</param>
      <param name="addValue">要加到 <paramref name="dateValue" /> 中的天数。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>调用 AddDays 规范函数。 有关 AddDays 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="dateValue" /> 增加 <paramref name="addValue" />。</returns>
      <param name="dateValue">一个有效的日期时间偏移。</param>
      <param name="addValue">要加到 <paramref name="dateValue" /> 中的天数。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>调用 AddHours 规范函数。 有关 AddHours 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue" /> 增加 <paramref name="addValue" />。</returns>
      <param name="timeValue">有效日期。</param>
      <param name="addValue">要添加到 <paramref name="timeValue" /> 的小时数。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>调用 AddHours 规范函数。 有关 AddHours 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue" /> 增加 <paramref name="addValue" />。</returns>
      <param name="timeValue">一个有效的日期时间偏移。</param>
      <param name="addValue">要添加到 <paramref name="timeValue" /> 的小时数。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddHours(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>调用 AddHours 规范函数。 有关 AddHours 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue" /> 增加 <paramref name="addValue" />。</returns>
      <param name="timeValue">一个有效的时间跨度。</param>
      <param name="addValue">要添加到 <paramref name="timeValue" /> 的小时数。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>调用 AddMicroseconds 规范函数。 有关 AddMicroseconds 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue" /> 增加 <paramref name="addValue" />。</returns>
      <param name="timeValue">有效日期。</param>
      <param name="addValue">要加到 <paramref name="timeValue" /> 中的微秒数。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>调用 AddMicroseconds 规范函数。 有关 AddMicroseconds 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue" /> 增加 <paramref name="addValue" />。</returns>
      <param name="timeValue">一个有效的日期时间偏移。</param>
      <param name="addValue">要加到 <paramref name="timeValue" /> 中的微秒数。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>调用 AddMicroseconds 规范函数。 有关 AddMicroseconds 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue" /> 增加 <paramref name="addValue" />。</returns>
      <param name="timeValue">一个有效的时间跨度。</param>
      <param name="addValue">要加到 <paramref name="timeValue" /> 中的微秒数。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>调用 AddMilliseconds 规范函数。 有关 AddMilliseconds 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue" /> 增加 <paramref name="addValue" />。</returns>
      <param name="timeValue">有效日期。</param>
      <param name="addValue">要加到 <paramref name="timeValue" /> 中的毫秒数。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>调用 AddMilliseconds 规范函数。 有关 AddMilliseconds 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue" /> 增加 <paramref name="addValue" />。</returns>
      <param name="timeValue">一个有效的日期时间偏移。</param>
      <param name="addValue">要加到 <paramref name="timeValue" /> 中的毫秒数。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>调用 AddMilliseconds 规范函数。 有关 AddMilliseconds 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue" /> 增加 <paramref name="addValue" />。</returns>
      <param name="timeValue">一个有效的时间跨度。</param>
      <param name="addValue">要加到 <paramref name="timeValue" /> 中的毫秒数。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>调用 AddMinutes 规范函数。 有关 AddMinutes 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue" /> 增加 <paramref name="addValue" />。</returns>
      <param name="timeValue">有效日期。</param>
      <param name="addValue">要添加到 <paramref name="timeValue" /> 的分钟数。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>调用 AddMinutes 规范函数。 有关 AddMinutes 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue" /> 增加 <paramref name="addValue" />。</returns>
      <param name="timeValue">一个有效的日期时间偏移。</param>
      <param name="addValue">要添加到 <paramref name="timeValue" /> 的分钟数。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>调用 AddMinutes 规范函数。 有关 AddMinutes 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue" /> 增加 <paramref name="addValue" />。</returns>
      <param name="timeValue">一个有效的时间跨度。</param>
      <param name="addValue">要添加到 <paramref name="timeValue" /> 的分钟数。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>调用 AddMonths 规范函数。 有关 AddMonths 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="dateValue" /> 增加 <paramref name="addValue" />。</returns>
      <param name="dateValue">有效日期。</param>
      <param name="addValue">要加到 <paramref name="dateValue" /> 中的月数。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>调用 AddMonths 规范函数。 有关 AddMonths 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="dateValue" /> 增加 <paramref name="addValue" />。</returns>
      <param name="dateValue">一个有效的日期时间偏移。</param>
      <param name="addValue">要加到 <paramref name="dateValue" /> 中的月数。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>调用 AddNanoseconds 规范函数。 有关 AddNanoseconds 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue" /> 增加 <paramref name="addValue" />。</returns>
      <param name="timeValue">有效日期。</param>
      <param name="addValue">要加到 <paramref name="timeValue" /> 中的毫微秒数。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>调用 AddNanoseconds 规范函数。 有关 AddNanoseconds 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue" /> 增加 <paramref name="addValue" />。</returns>
      <param name="timeValue">一个有效的日期时间偏移。</param>
      <param name="addValue">要加到 <paramref name="timeValue" /> 中的毫微秒数。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>调用 AddNanoseconds 规范函数。 有关 AddNanoseconds 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue" /> 增加 <paramref name="addValue" />。</returns>
      <param name="timeValue">一个有效的时间跨度。</param>
      <param name="addValue">要加到 <paramref name="timeValue" /> 中的毫微秒数。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>调用 AddSeconds 规范函数。 有关 AddSeconds 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue" /> 增加 <paramref name="addValue" />。</returns>
      <param name="timeValue">有效日期。</param>
      <param name="addValue">要添加到 <paramref name="timeValue" /> 的秒数。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>调用 AddSeconds 规范函数。 有关 AddSeconds 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue" /> 增加 <paramref name="addValue" />。</returns>
      <param name="timeValue">一个有效的日期时间偏移。</param>
      <param name="addValue">要添加到 <paramref name="timeValue" /> 的秒数。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>调用 AddSeconds 规范函数。 有关 AddSeconds 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue" /> 增加 <paramref name="addValue" />。</returns>
      <param name="timeValue">一个有效的时间跨度。</param>
      <param name="addValue">要添加到 <paramref name="timeValue" /> 的秒数。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>调用 AddYears 规范函数。 有关 AddYears 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="dateValue" /> 增加 <paramref name="addValue" />。</returns>
      <param name="dateValue">有效日期。</param>
      <param name="addValue">要加到 <paramref name="dateValue" /> 中的年数。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>调用 AddYears 规范函数。 有关 AddYears 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="dateValue" /> 增加 <paramref name="addValue" />。</returns>
      <param name="dateValue">一个有效的日期时间偏移。</param>
      <param name="addValue">要加到 <paramref name="dateValue" /> 中的年数。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AsNonUnicode(System.String)">
      <summary>一个将输入字符串作为非 Unicode 字符串处理的 LINQ to Entities 运算符。 此方法仅适用于 LINQ to Entities 查询。</summary>
      <returns>一个非 Unicode 字符串。</returns>
      <param name="value">输入字符串。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AsUnicode(System.String)">
      <summary>一个确保将输入字符串作为 Unicode 字符串处理的 LINQ to Entities 运算符。 此方法仅适用于 LINQ to Entities 查询。</summary>
      <returns>一个 Unicode 字符串。</returns>
      <param name="value">输入字符串。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.CreateDateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>调用 CreateDateTime 规范函数。 有关 CreateDateTime 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>新的日期。</returns>
      <param name="year">新日期的年份部分。</param>
      <param name="month">新日期的月份部分。</param>
      <param name="day">新日期的日部分。</param>
      <param name="hour">新日期的小时部分。</param>
      <param name="minute">新日期的分钟部分。</param>
      <param name="second">新日期的秒部分。 请注意，可以使用此参数指定秒的小数部分。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.CreateDateTimeOffset(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>调用 CreateDateTimeOffset 规范函数。 有关 CreateDateTimeOffset 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>新的日期。</returns>
      <param name="year">新日期的年份部分。</param>
      <param name="month">新日期的月份部分。</param>
      <param name="day">新日期的日部分。</param>
      <param name="hour">新日期的小时部分。</param>
      <param name="minute">新日期的分钟部分。</param>
      <param name="second">新日期的秒部分。 请注意，可以使用此参数指定秒的小数部分。</param>
      <param name="timeZoneOffset">新日期的时区偏移量部分。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.CreateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>调用 CreateTime 规范函数。 有关 CreateTime 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>新的时间跨度。</returns>
      <param name="hour">新时间跨度的小时部分。</param>
      <param name="minute">新时间跨度的分钟部分。</param>
      <param name="second">新时间跨度的秒部分。 请注意，可以使用此参数指定秒的小数部分。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>调用 DiffDays 规范函数。 有关 DiffDays 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="dateValue1" /> 和 <paramref name="dateValue2" /> 之间的天数。</returns>
      <param name="dateValue1">有效日期。</param>
      <param name="dateValue2">有效日期。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>调用 DiffDays 规范函数。 有关 DiffDays 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="dateValue1" /> 和 <paramref name="dateValue2" /> 之间的天数。</returns>
      <param name="dateValue1">一个有效的日期时间偏移。</param>
      <param name="dateValue2">一个有效的日期时间偏移。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>调用 DiffHours 规范函数。 有关 DiffHours 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 之间的小时数。</returns>
      <param name="timeValue1">有效日期。</param>
      <param name="timeValue2">有效日期。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>调用 DiffHours 规范函数。 有关 DiffHours 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 之间的小时数。</returns>
      <param name="timeValue1">一个有效的日期时间偏移。</param>
      <param name="timeValue2">一个有效的日期时间偏移。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffHours(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>调用 DiffHours 规范函数。 有关 DiffHours 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 之间的小时数。</returns>
      <param name="timeValue1">一个有效的时间跨度。</param>
      <param name="timeValue2">一个有效的时间跨度。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>调用 DiffMicroseconds 规范函数。 有关 DiffMicroseconds 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 之间的微秒数。</returns>
      <param name="timeValue1">有效日期。</param>
      <param name="timeValue2">有效日期。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>调用 DiffMicroseconds 规范函数。 有关 DiffMicroseconds 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 之间的微秒数。</returns>
      <param name="timeValue1">一个有效的日期时间偏移。</param>
      <param name="timeValue2">一个有效的日期时间偏移。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>调用 DiffMicroseconds 规范函数。 有关 DiffMicroseconds 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 之间的微秒数。</returns>
      <param name="timeValue1">一个有效的时间跨度。</param>
      <param name="timeValue2">一个有效的时间跨度。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>调用 DiffMilliseconds 规范函数。 有关 DiffMilliseconds 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 之间的毫秒数。</returns>
      <param name="timeValue1">有效日期。</param>
      <param name="timeValue2">有效日期。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>调用 DiffMilliseconds 规范函数。 有关 DiffMilliseconds 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 之间的毫秒数。</returns>
      <param name="timeValue1">一个有效的日期时间偏移。</param>
      <param name="timeValue2">一个有效的日期时间偏移。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>调用 DiffMilliseconds 规范函数。 有关 DiffMilliseconds 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 之间的毫秒数。</returns>
      <param name="timeValue1">一个有效的时间跨度。</param>
      <param name="timeValue2">一个有效的时间跨度。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>调用 DiffMinutes 规范函数。 有关 DiffMinutes 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 之间的分钟数。</returns>
      <param name="timeValue1">有效日期。</param>
      <param name="timeValue2">有效日期。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>调用 DiffMinutes 规范函数。 有关 DiffMinutes 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 之间的分钟数。</returns>
      <param name="timeValue1">一个有效的日期时间偏移。</param>
      <param name="timeValue2">一个有效的日期时间偏移。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>调用 DiffMinutes 规范函数。 有关 DiffMinutes 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 之间的分钟数。</returns>
      <param name="timeValue1">一个有效的时间跨度。</param>
      <param name="timeValue2">一个有效的时间跨度。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>调用 DiffMonths 规范函数。 有关 DiffMonths 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="dateValue1" /> 和 <paramref name="dateValue2" /> 之间的月数。</returns>
      <param name="dateValue1">有效日期。</param>
      <param name="dateValue2">有效日期。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>调用 DiffMonths 规范函数。 有关 DiffMonths 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="dateValue1" /> 和 <paramref name="dateValue2" /> 之间的月数。</returns>
      <param name="dateValue1">一个有效的日期时间偏移。</param>
      <param name="dateValue2">一个有效的日期时间偏移。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>调用 DiffNanoseconds 规范函数。 有关 DiffNanoseconds 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 之间的毫微秒数。</returns>
      <param name="timeValue1">有效日期。</param>
      <param name="timeValue2">有效日期。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>调用 DiffNanoseconds 规范函数。 有关 DiffNanoseconds 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 之间的毫微秒数。</returns>
      <param name="timeValue1">一个有效的日期时间偏移。</param>
      <param name="timeValue2">一个有效的日期时间偏移。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>调用 DiffNanoseconds 规范函数。 有关 DiffNanoseconds 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 之间的毫微秒数。</returns>
      <param name="timeValue1">有效日期。</param>
      <param name="timeValue2">有效日期。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>调用 DiffSeconds 规范函数。 有关 DiffSeconds 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 之间的秒数。</returns>
      <param name="timeValue1">有效日期。</param>
      <param name="timeValue2">有效日期。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>调用 DiffSeconds 规范函数。 有关 DiffSeconds 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 之间的秒数。</returns>
      <param name="timeValue1">一个有效的日期时间偏移。</param>
      <param name="timeValue2">一个有效的日期时间偏移。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>调用 DiffSeconds 规范函数。 有关 DiffSeconds 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 之间的秒数。</returns>
      <param name="timeValue1">一个有效的时间跨度。</param>
      <param name="timeValue2">一个有效的时间跨度。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>调用 DiffYears 规范函数。 有关 DiffYears 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="dateValue1" /> 和 <paramref name="dateValue2" /> 之间的年数。</returns>
      <param name="dateValue1">有效日期。</param>
      <param name="dateValue2">有效日期。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>调用 DiffYears 规范函数。 有关 DiffYears 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="dateValue1" /> 和 <paramref name="dateValue2" /> 之间的年数。</returns>
      <param name="dateValue1">一个有效的日期时间偏移。</param>
      <param name="dateValue2">一个有效的日期时间偏移。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.GetTotalOffsetMinutes(System.Nullable{System.DateTimeOffset})">
      <summary>调用 GetTotalOffsetMinutes 规范函数。 有关 GetTotalOffsetMinutes 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="dateTimeOffsetArgument" /> 相对于 GMT 偏移的分钟数。 该值通常介于 +780 到 -780 之间（+ 或 - 13 小时）。</returns>
      <param name="dateTimeOffsetArgument">一个有效的日期时间偏移。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Left(System.String,System.Nullable{System.Int64})">
      <summary>调用 Left 规范函数。 有关 Left 规范函数的信息，请参见字符串规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="stringArgument" /> 最左侧的 <paramref name="length" /> 个字符。</returns>
      <param name="stringArgument">有效的字符串表达式。</param>
      <param name="length">要返回的字符数。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Reverse(System.String)">
      <summary>调用 Reverse 规范函数。 有关 Reverse 规范函数的信息，请参见字符串规范函数（实体 SQL）。</summary>
      <returns>以反转字符顺序显示的输入字符串。</returns>
      <param name="stringArgument">一个有效的字符串。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Right(System.String,System.Nullable{System.Int64})">
      <summary>调用 Right 规范函数。 有关 Right 规范函数的信息，请参见字符串规范函数（实体 SQL）。</summary>
      <returns>
        <paramref name="stringArgument" /> 最右侧的 <paramref name="length" /> 个字符。</returns>
      <param name="stringArgument">有效的字符串表达式。</param>
      <param name="length">要返回的字符数。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>调用 StDev 规范函数。 有关 StDev 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>输入集合的统计标准偏差。</returns>
      <param name="collection">一组数值。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>调用 StDev 规范函数。 有关 StDev 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>输入集合的统计标准偏差。</returns>
      <param name="collection">一组数值。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>调用 StDev 规范函数。 有关 StDev 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>输入集合的统计标准偏差。</returns>
      <param name="collection">一组数值。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>调用 StDev 规范函数。 有关 StDev 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>输入集合的统计标准偏差。</returns>
      <param name="collection">一组数值。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>调用 StDev 规范函数。 有关 StDev 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>输入集合的统计标准偏差。</returns>
      <param name="collection">一组数值。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>调用 StDev 规范函数。 有关 StDev 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>输入集合的统计标准偏差。</returns>
      <param name="collection">一组数值。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>调用 StDev 规范函数。 有关 StDev 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>输入集合的统计标准偏差。</returns>
      <param name="collection">一组数值。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>调用 StDev 规范函数。 有关 StDev 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>输入集合的统计标准偏差。</returns>
      <param name="collection">一组数值。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>调用 StDevP 规范函数。 有关 StDevP 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>输入集合中总体的统计标准偏差。</returns>
      <param name="collection">一组数值。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>调用 StDevP 规范函数。 有关 StDevP 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>输入集合中总体的统计标准偏差。</returns>
      <param name="collection">一组数值。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>调用 StDevP 规范函数。 有关 StDevP 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>输入集合中总体的统计标准偏差。</returns>
      <param name="collection">一组数值。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>调用 StDevP 规范函数。 有关 StDevP 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>输入集合中总体的统计标准偏差。</returns>
      <param name="collection">一组数值。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>调用 StDevP 规范函数。 有关 StDevP 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>输入集合中总体的统计标准偏差。</returns>
      <param name="collection">一组数值。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>调用 StDevP 规范函数。 有关 StDevP 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>输入集合中总体的统计标准偏差。</returns>
      <param name="collection">一组数值。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>调用 StDevP 规范函数。 有关 StDevP 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>输入集合中总体的统计标准偏差。</returns>
      <param name="collection">一组数值。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>调用 StDevP 规范函数。 有关 StDevP 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>输入集合中总体的统计标准偏差。</returns>
      <param name="collection">一组数值。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Truncate(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>调用 Truncate 规范函数。 有关 Truncate 规范函数的信息，请参见数学规范函数（实体 SQL）。</summary>
      <returns>截断到 <paramref name="digits" /> 指定的长度或精度的 <paramref name="value" />。</returns>
      <param name="value">要截断的数字。</param>
      <param name="digits">要截断到的长度或精度。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Truncate(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>调用 Truncate 规范函数。 有关 Truncate 规范函数的信息，请参见数学规范函数（实体 SQL）。</summary>
      <returns>截断到 <paramref name="digits" /> 指定的长度或精度的 <paramref name="value" />。</returns>
      <param name="value">要截断的数字。</param>
      <param name="digits">要截断到的长度或精度。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTime})">
      <summary>调用 TruncateTime 规范函数。 有关 TruncateTime 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>清除了时间部分的输入日期。</returns>
      <param name="dateValue">要截断的日期。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTimeOffset})">
      <summary>调用 TruncateTime 规范函数。 有关 TruncateTime 规范函数的信息，请参见日期和时间规范函数（实体 SQL）。</summary>
      <returns>清除了时间部分的输入日期。</returns>
      <param name="dateValue">要截断的日期时间偏移量。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>调用 Var 规范函数。 有关 Var 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>指定集合中所有值的统计方差。</returns>
      <param name="collection">将计算其方差的值集。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>调用 Var 规范函数。 有关 Var 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>指定集合中所有值的统计方差。</returns>
      <param name="collection">将计算其方差的值集。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>调用 Var 规范函数。 有关 Var 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>指定集合中所有值的统计方差。</returns>
      <param name="collection">将计算其方差的值集。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>调用 Var 规范函数。 有关 Var 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>指定集合中所有值的统计方差。</returns>
      <param name="collection">将计算其方差的值集。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>调用 Var 规范函数。 有关 Var 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>指定集合中所有值的统计方差。</returns>
      <param name="collection">将计算其方差的值集。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>调用 Var 规范函数。 有关 Var 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>指定集合中所有值的统计方差。</returns>
      <param name="collection">将计算其方差的值集。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>调用 Var 规范函数。 有关 Var 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>指定集合中所有值的统计方差。</returns>
      <param name="collection">将计算其方差的值集。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>调用 Var 规范函数。 有关 Var 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>指定集合中所有值的统计方差。</returns>
      <param name="collection">将计算其方差的值集。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>调用 VarP 规范函数。 有关 VarP 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>指定集合中总体的统计方差。</returns>
      <param name="collection">将计算其方差的值集。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>调用 VarP 规范函数。 有关 VarP 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>指定集合中总体的统计方差。</returns>
      <param name="collection">将计算其方差的值集。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>调用 VarP 规范函数。 有关 VarP 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>指定集合中总体的统计方差。</returns>
      <param name="collection">将计算其方差的值集。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>调用 VarP 规范函数。 有关 VarP 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>指定集合中的总体方差。</returns>
      <param name="collection">将计算其方差的值集。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>调用 VarP 规范函数。 有关 VarP 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>指定集合中总体的统计方差。</returns>
      <param name="collection">将计算其方差的值集。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>调用 VarP 规范函数。 有关 VarP 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>指定集合中总体的统计方差。</returns>
      <param name="collection">将计算其方差的值集。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>调用 VarP 规范函数。 有关 VarP 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>指定集合中总体的统计方差。</returns>
      <param name="collection">将计算其方差的值集。</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>调用 VarP 规范函数。 有关 VarP 规范函数的信息，请参见规范函数（实体 SQL）。</summary>
      <returns>指定集合中总体的统计方差。</returns>
      <param name="collection">将计算其方差的值集。</param>
    </member>
    <member name="T:System.Data.Objects.IObjectSet`1">
      <summary>提供允许对一组数据对象进行修改的功能。</summary>
      <typeparam name="TEntity">从查询返回的实体对象的类型。</typeparam>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.AddObject(`0)">
      <summary>通知对象集，必须将表示新实体的对象添加到该集中。</summary>
      <param name="entity">要添加到集中的新对象。</param>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.Attach(`0)">
      <summary>通知对象集，必须将表示现有实体的对象添加到该集中。</summary>
      <param name="entity">要添加到集中的现有对象。</param>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.DeleteObject(`0)">
      <summary>通知对象集必须从中删除表示现有实体的对象。</summary>
      <param name="entity">要从集中删除的现有对象。</param>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.Detach(`0)">
      <summary>通知对象集必须从中分离表示现有实体的对象。</summary>
      <param name="entity">要从对象集中分离的对象。</param>
    </member>
    <member name="T:System.Data.Objects.MergeOption">
      <summary>指定加载到对象上下文中的对象与对象上下文中的已有对象的合并方式。</summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.AppendOnly">
      <summary>对象上下文中不存在的对象将附加到该上下文。 如果该上下文中已存在对象，则该项中对象属性的当前值和原始值不会被数据源值覆盖。 该对象的项状态和项中对象的属性状态不会更改。 <see cref="F:System.Data.Objects.MergeOption.AppendOnly" /> 是默认合并选项。</summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.NoTracking">
      <summary>对象保持为 <see cref="F:System.Data.EntityState.Detached" /> 状态，且未在 <see cref="T:System.Data.Objects.ObjectStateManager" /> 中跟踪对象。 但是，Entity Framework 生成的实体和具有代理的 POCO 实体将维护对该对象上下文的引用以便于相关对象的加载。</summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.OverwriteChanges">
      <summary>对象上下文中不存在的对象将附加到该上下文。 如果该上下文中已存在对象，则该项中对象属性的当前值和原始值将会被数据源值覆盖。 该对象的项状态将设置为 <see cref="F:System.Data.EntityState.Unchanged" />，任何属性都不会标记为已修改。</summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.PreserveChanges">
      <summary>对象上下文中不存在的对象将附加到该上下文。</summary>
    </member>
    <member name="T:System.Data.Objects.ObjectContext">
      <summary>提供用于查询和使用对象形式的实体数据的功能。</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection)">
      <summary>使用给定连接初始化 <see cref="T:System.Data.Objects.ObjectContext" /> 类的新实例。 在构造过程中，从 <see cref="T:System.Data.EntityClient.EntityConnection" /> 对象提取元数据工作区。</summary>
      <param name="connection">一个 <see cref="T:System.Data.EntityClient.EntityConnection" />，其中包含对模型和数据源连接的引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="connection" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="connection" /> 无效。 - 或 - 元数据工作区无效。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection,System.String)">
      <summary>使用给定的连接和实体容器名称初始化 <see cref="T:System.Data.Objects.ObjectContext" /> 类的新实例。</summary>
      <param name="connection">一个 <see cref="T:System.Data.EntityClient.EntityConnection" />，其中包含对模型和数据源连接的引用。</param>
      <param name="defaultContainerName">默认实体容器的名称。 通过此方法设置 <paramref name="defaultContainerName" /> 时，该属性为只读属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="connection" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="connection" /> 或 <paramref name="defaultContainerName" /> 或元数据工作区无效。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.String)">
      <summary>使用给定的连接字符串和默认的实体容器名称初始化 <see cref="T:System.Data.Objects.ObjectContext" /> 类的新实例。</summary>
      <param name="connectionString">连接字符串，此连接字符串也可提供对元数据信息的访问。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="connectionString" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="connectionString" /> 无效。 - 或 - 元数据工作区无效。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.String,System.String)">
      <summary>使用给定的连接字符串和实体容器名称初始化 <see cref="T:System.Data.Objects.ObjectContext" /> 类的新实例。</summary>
      <param name="connectionString">连接字符串，此连接字符串也可提供对元数据信息的访问。</param>
      <param name="defaultContainerName">默认实体容器的名称。 通过此方法设置 <paramref name="defaultContainerName" /> 时，该属性为只读属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="connectionString" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="connectionString" /> 或 <paramref name="defaultContainerName" /> 或元数据工作区无效。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.AcceptAllChanges">
      <summary>接受在对象上下文中对对象所做的所有更改。</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.AddObject(System.String,System.Object)">
      <summary>将对象添加到对象上下文。</summary>
      <param name="entitySetName">表示实体集名称，可以选择通过实体容器名称对它进行限定。</param>
      <param name="entity">要相加的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entity" /> 参数为 null。 - 或 - <paramref name="entitySetName" /> 未限定。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ApplyCurrentValues``1(System.String,``0)">
      <summary>将标量值从提供的对象复制到具有相同键的 <see cref="T:System.Data.Objects.ObjectContext" /> 中的对象中。</summary>
      <returns>已更新的对象。</returns>
      <param name="entitySetName">对象所属的实体集的名称。</param>
      <param name="currentEntity">具有要应用于原始对象的属性更新的已分离对象。 <paramref name="currentEntity" /> 的实体键必须与 <see cref="T:System.Data.Objects.ObjectContext" /> 中某个项的 <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> 属性相匹配。</param>
      <typeparam name="TEntity">对象的实体类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySetName" /> 或 <paramref name="current" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">来自 <paramref name="entitySetName" /> 的 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 与对象的 <see cref="T:System.Data.EntityKey" /> 的 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 不匹配时。 - 或 - 该对象未处于 <see cref="T:System.Data.Objects.ObjectStateManager" /> 状态或处于 <see cref="F:System.Data.EntityState.Detached" /> 状态。 - 或 - 所提供对象的实体键无效。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entitySetName" /> 是空字符串。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ApplyOriginalValues``1(System.String,``0)">
      <summary>将标量值从提供的对象复制到 <see cref="T:System.Data.Objects.ObjectContext" /> 中具有相同键的对象的原始值集中。</summary>
      <returns>已更新的对象。</returns>
      <param name="entitySetName">对象所属的实体集的名称。</param>
      <param name="originalEntity">具有要应用于对象的原始值的已分离对象。 <paramref name="originalEntity" /> 的实体键必须与 <see cref="T:System.Data.Objects.ObjectContext" /> 中某个项的 <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> 属性相匹配。</param>
      <typeparam name="TEntity">实体对象的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySetName" /> 或 <paramref name="original" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">来自 <paramref name="entitySetName" /> 的 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 与对象的 <see cref="T:System.Data.EntityKey" /> 的 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 不匹配时。 - 或 - 对象的 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 无法在 <see cref="T:System.Data.Objects.ObjectStateManager" /> 中找到。- 或 - 该对象处于 <see cref="F:System.Data.EntityState.Added" /> 或 <see cref="F:System.Data.EntityState.Detached" /> 状态。 - 或 - 所提供对象的实体键无效，或者有属性更改。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entitySetName" /> 是空字符串。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ApplyPropertyChanges(System.String,System.Object)">
      <summary>将已分离对象的属性更改应用于已附加到对象上下文的对象。</summary>
      <param name="entitySetName">对象所属的实体集的名称。</param>
      <param name="changed">具有要应用于原始对象的属性更新的已分离对象。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="entitySetName" /> 为 null 或空字符串时。 - 或 - 当 <paramref name="changed" /> 为 null 时。</exception>
      <exception cref="T:System.InvalidOperationException">当 <paramref name="entitySetName" /> 中的 <see cref="T:System.Data.Metadata.Edm.EntitySet" />与对象的 <see cref="T:System.Data.EntityKey" /> 的 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 不匹配时。 - 或 - 当实体处于 <see cref="F:System.Data.EntityState.Modified" /> 或 <see cref="F:System.Data.EntityState.Unchanged" /> 之外的状态时。 - 或 - 原始对象未附加到上下文。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="changed" /> 对象的类型与原始对象的类型不同时。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Attach(System.Data.Objects.DataClasses.IEntityWithKey)">
      <summary>在对象具有实体键时将对象或对象图附加到对象上下文。</summary>
      <param name="entity">要附加的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entity" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">实体键无效。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.AttachTo(System.String,System.Object)">
      <summary>将对象或对象图附加到特定实体集中的对象上下文。</summary>
      <param name="entitySetName">表示实体集名称，可以选择通过实体容器名称对它进行限定。</param>
      <param name="entity">要附加的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entity" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">实体集无效。 - 或 - 对象具有临时键。 - 或 - 对象具有 <see cref="T:System.Data.EntityKey" /> 且 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 与作为方法参数传入的实体集不匹配。 - 或 - 对象没有 <see cref="T:System.Data.EntityKey" />，且未提供任何实体集。 - 或 - 对象图中的任何对象都具有临时 <see cref="T:System.Data.EntityKey" />。 - 或 - 对象图中的任何对象都具有无效的 <see cref="T:System.Data.EntityKey" />（例如，键中的值与对象中的值不匹配）。 - 或 - 未能根据给定的 <paramref name="entitySetName" /> 名称和实体容器名称找到实体集。 - 或 - 对象图中的任何对象都已存在于另一个状态管理器中。</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.CommandTimeout">
      <summary>获取或设置所有对象上下文操作的超时值（以秒为单位）。 null 值表示将使用基础提供程序的默认值。</summary>
      <returns>表示超时值的 <see cref="T:System.Int32" /> 值（以秒为单位）。</returns>
      <exception cref="T:System.ArgumentException">超时值小于 0。</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.Connection">
      <summary>获取对象上下文使用的连接。</summary>
      <returns>一个表示连接的 <see cref="T:System.Data.Common.DbConnection" /> 对象。</returns>
      <exception cref="T:System.ObjectDisposedException">当释放了 <see cref="T:System.Data.Objects.ObjectContext" /> 实例时。</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.ContextOptions">
      <summary>获取 <see cref="T:System.Data.Objects.ObjectContextOptions" /> 实例，该实例包含影响 <see cref="T:System.Data.Objects.ObjectContext" /> 的行为的选项。</summary>
      <returns>
        <see cref="T:System.Data.Objects.ObjectContextOptions" /> 实例，该实例包含影响 <see cref="T:System.Data.Objects.ObjectContext" /> 的行为的选项。</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateDatabase">
      <summary>使用当前数据源连接和 <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> 中的元数据创建数据库。</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateDatabaseScript">
      <summary>生成数据定义语言 (DDL) 脚本，该脚本为 <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> 中的元数据创建架构对象（表、主键、外键）。 <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> 用于加载存储架构定义语言 (SSDL) 文件中的元数据。</summary>
      <returns>为 <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> 中的元数据创建架构对象的 DDL 脚本。</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateEntityKey(System.String,System.Object)">
      <summary>为特定对象创建实体键，如果实体键已存在，则返回该键。</summary>
      <returns>对象的 <see cref="T:System.Data.EntityKey" />。</returns>
      <param name="entitySetName">实体对象所属的实体集的完全限定名称。</param>
      <param name="entity">要为其检索实体键的对象。</param>
      <exception cref="T:System.ArgumentNullException">当任一参数为 null 时。</exception>
      <exception cref="T:System.ArgumentException">在 <paramref name="entitySetName" /> 为空时。 - 或 - 当 <paramref name="entity" /> 对象的类型不存在于实体集中时。 - 或 - 当 <paramref name="entitySetName" /> 未完全限定时。</exception>
      <exception cref="T:System.InvalidOperationException">当无法根据提供的参数成功构造实体键时。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateObject``1">
      <summary>创建并返回所请求的类型的实例。</summary>
      <returns>所请求类型 <paramref name="T" /> 的实例，或一个使得 <paramref name="T" /> 能够与 Entity Framework 一起使用的派生类型的实例。 返回的对象是所请求类型的实例或使得请求的类型能够与 Entity Framework 一起使用的派生类型的实例。</returns>
      <typeparam name="T">要返回的对象的类型。</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateObjectSet``1">
      <summary>创建新的 <see cref="T:System.Data.Objects.ObjectSet`1" /> 实例，该实例用于查询、添加、修改和删除指定实体类型的对象。</summary>
      <returns>新的 <see cref="T:System.Data.Objects.ObjectSet`1" /> 实例。</returns>
      <typeparam name="TEntity">请求的 <see cref="T:System.Data.Objects.ObjectSet`1" /> 的实体类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> 属性未在 <see cref="T:System.Data.Objects.ObjectContext" /> 上设置。 - 或 - 指定类型属于多个实体集。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateObjectSet``1(System.String)">
      <summary>创建新的 <see cref="T:System.Data.Objects.ObjectSet`1" /> 实例，该实例用于查询、添加、修改和删除具有指定类型和指定实体集名称的对象。</summary>
      <returns>新的 <see cref="T:System.Data.Objects.ObjectSet`1" /> 实例。</returns>
      <param name="entitySetName">返回的 <see cref="T:System.Data.Objects.ObjectSet`1" /> 的实体集的名称。 如果未在 <see cref="T:System.Data.Objects.ObjectContext" /> 上设置 <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> 属性，则字符串必须由默认容器名称进行限定。</param>
      <typeparam name="TEntity">请求的 <see cref="T:System.Data.Objects.ObjectSet`1" /> 的实体类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">来自 <paramref name="entitySetName" /> 的 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 与对象的 <see cref="T:System.Data.EntityKey" /> 的 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 不匹配时。 - 或 - 在 <see cref="T:System.Data.Objects.ObjectContext" /> 上没有设置 <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> 属性，且名称未限定为 <paramref name="entitySetName" /> 参数。 - 或 - 指定类型属于多个实体集。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateProxyTypes(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>为提供的枚举中的每个类型生成可用于 Entity Framework 的等效类型。</summary>
      <param name="types">
        <see cref="T:System.Type" /> 对象的枚举，这些对象表示映射到概念模型的自定义数据类。</param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateQuery``1(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>使用指定查询字符串在当前对象上下文中创建 <see cref="T:System.Data.Objects.ObjectQuery`1" />。</summary>
      <returns>指定类型的 <see cref="T:System.Data.Objects.ObjectQuery`1" />。</returns>
      <param name="queryString">要执行的查询字符串。</param>
      <param name="parameters">要传递到查询的参数。</param>
      <typeparam name="T">返回的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 的实体类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="queryString" /> 或 <paramref name="parameters" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DatabaseExists">
      <summary>检查在当前数据源连接中指定为数据库的数据库是否在数据源上存在。</summary>
      <returns>如果数据库存在，则为 true。</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.DefaultContainerName">
      <summary>获取或设置默认容器名称。</summary>
      <returns>一个作为默认容器名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DeleteDatabase">
      <summary>删除在当前数据源连接中指定为数据库的数据库。</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DeleteObject(System.Object)">
      <summary>将对象标记为待删除。</summary>
      <param name="entity">指定要删除的实体的对象。 该对象可以为任何状态（<see cref="F:System.Data.EntityState.Detached" /> 除外）。</param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Detach(System.Object)">
      <summary>从对象上下文移除对象。</summary>
      <param name="entity">要分离的对象。 仅移除 <paramref name="entity" />；如果有任何相关对象受同一 <see cref="T:System.Data.Objects.ObjectStateManager" /> 跟踪，则不会自动分离这些对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entity" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="entity" /> 不与此 <see cref="T:System.Data.Objects.ObjectContext" /> 关联（例如，是新创建的，仍未与任何上下文关联，或是通过其他上下文获取，或是已分离）。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DetectChanges">
      <summary>确保 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 更改与由 <see cref="T:System.Data.Objects.ObjectStateManager" /> 跟踪的所有对象中的更改进行同步。</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Dispose">
      <summary>释放对象上下文使用的资源。</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Dispose(System.Boolean)">
      <summary>释放对象上下文使用的资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.MergeOption,System.Data.Objects.ObjectParameter[])">
      <summary>使用指定的参数和合并选项，执行在数据源中定义并在概念模型中表示的给定存储过程或函数。 返回类型化的 <see cref="T:System.Data.Objects.ObjectResult`1" />。</summary>
      <returns>存储过程返回的数据的 <see cref="T:System.Data.Objects.ObjectResult`1" />。</returns>
      <param name="functionName">存储过程或函数的名称。 该名称可以包含容器名称，如 &lt;Container Name&gt;.&lt;Function Name&gt;。 如果默认容器名称已知，则只需要函数名称。</param>
      <param name="mergeOption">执行查询时要使用的 <see cref="T:System.Data.Objects.MergeOption" />。</param>
      <param name="parameters">
        <see cref="T:System.Data.Objects.ObjectParameter" /> 对象的数组。</param>
      <typeparam name="TElement">对数据源执行函数时返回的 <see cref="T:System.Data.Objects.ObjectResult`1" /> 的实体类型。 此类型必须实现 <see cref="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker" />。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> 为 null 或为空。 - 或 - 未找到 <paramref name="function" />。</exception>
      <exception cref="T:System.InvalidOperationException">实体读取器不支持此 <paramref name="function" />。 - 或 - 读取器的类型与 <paramref name="function" /> 的类型不匹配。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>使用指定的参数，执行在数据源中定义并在概念模型中映射的存储过程或函数。 返回类型化的 <see cref="T:System.Data.Objects.ObjectResult`1" />。</summary>
      <returns>存储过程返回的数据的 <see cref="T:System.Data.Objects.ObjectResult`1" />。</returns>
      <param name="functionName">存储过程或函数的名称。 该名称可以包含容器名称，如 &lt;Container Name&gt;.&lt;Function Name&gt;。 如果默认容器名称已知，则只需要函数名称。</param>
      <param name="parameters">
        <see cref="T:System.Data.Objects.ObjectParameter" /> 对象的数组。</param>
      <typeparam name="TElement">对数据源执行函数时返回的 <see cref="T:System.Data.Objects.ObjectResult`1" /> 的实体类型。 此类型必须实现 <see cref="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker" />。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> 为 null 或为空。 - 或 - 未找到 <paramref name="function" />。</exception>
      <exception cref="T:System.InvalidOperationException">实体读取器不支持此 <paramref name="function" />。 - 或 - 读取器的类型与 <paramref name="function" /> 的类型不匹配。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteFunction(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>执行在数据源中定义并在概念模型中表示的存储过程或函数，丢弃该函数返回的任何结果，并返回执行该函数影响的行数。</summary>
      <returns>受影响的行数。</returns>
      <param name="functionName">存储过程或函数的名称。 该名称可以包含容器名称，如 &lt;Container Name&gt;.&lt;Function Name&gt;。 如果默认容器名称已知，则只需要函数名称。</param>
      <param name="parameters">
        <see cref="T:System.Data.Objects.ObjectParameter" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> 为 null 或为空。 - 或 - 未找到 <paramref name="function" />。</exception>
      <exception cref="T:System.InvalidOperationException">实体读取器不支持此 <paramref name="function" />。 - 或 - 读取器的类型与 <paramref name="function" /> 的类型不匹配。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteStoreCommand(System.String,System.Object[])">
      <summary>利用现有连接对数据源直接执行任意命令。</summary>
      <returns>受影响的行数。</returns>
      <param name="commandText">要用数据源的本机语言执行的命令。</param>
      <param name="parameters">要传递给命令的参数数组。</param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Object[])">
      <summary>对数据源直接执行查询，此查询将返回类型化结果的序列。</summary>
      <returns>类型为 <paramref name="TResult" /> 的对象的枚举。</returns>
      <param name="commandText">要用数据源的本机语言执行的命令。</param>
      <param name="parameters">要传递给命令的参数数组。</param>
      <typeparam name="TElement">
      </typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Objects.MergeOption,System.Object[])">
      <summary>对数据源直接执行查询，此查询将返回类型化结果的序列。 指定实体集和合并选项，以便能够将查询结果作为实体进行跟踪。</summary>
      <returns>类型为 <paramref name="TResult" /> 的对象的枚举。</returns>
      <param name="commandText">要用数据源的本机语言执行的命令。</param>
      <param name="entitySetName">
        <paramref name="TResult" /> 类型的实体集。 如果未提供实体集名称，则不会跟踪结果。</param>
      <param name="mergeOption">执行查询时要使用的 <see cref="T:System.Data.Objects.MergeOption" />。 默认值为 <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />。</param>
      <param name="parameters">要传递给命令的参数数组。</param>
      <typeparam name="TEntity">
      </typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.GetKnownProxyTypes">
      <summary>返回所有现有代理类型。</summary>
      <returns>所有现有代理类型的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.GetObjectByKey(System.Data.EntityKey)">
      <summary>返回具有指定实体键的对象。</summary>
      <returns>一个 <see cref="T:System.Object" />，它是实体类型的实例。</returns>
      <param name="key">要查找的对象的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 参数为 null。</exception>
      <exception cref="T:System.Data.ObjectNotFoundException">在 <see cref="T:System.Data.Objects.ObjectStateManager" /> 和数据源中都未找到对象。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.GetObjectType(System.Type)">
      <summary>返回与指定类型的代理对象关联的 POCO 实体的实体类型。</summary>
      <returns>关联的 POCO 实体的 <see cref="T:System.Type" />。</returns>
      <param name="type">代理对象的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String)">
      <summary>通过指定的导航属性并使用默认合并选项，显式加载与提供的对象相关的对象。</summary>
      <param name="entity">要为其加载相关对象的实体。</param>
      <param name="navigationProperty">可返回要加载的相关对象的导航属性的名称。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="entity" /> 处于 <see cref="F:System.Data.EntityState.Detached" />、 <see cref="F:System.Data.EntityState.Added," /> 或 <see cref="F:System.Data.EntityState.Deleted" /> 状态。 - 或 - <paramref name="entity" /> 附加到 <see cref="T:System.Data.Objects.ObjectContext" /> 的另一个实例。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String,System.Data.Objects.MergeOption)">
      <summary>通过指定的导航属性并使用指定的合并选项，显式加载与提供的对象相关的对象。</summary>
      <param name="entity">要为其加载相关对象的实体。</param>
      <param name="navigationProperty">可返回要加载的相关对象的导航属性的名称。</param>
      <param name="mergeOption">在加载相关对象时要使用的 <see cref="T:System.Data.Objects.MergeOption" /> 值。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="entity" /> 处于 <see cref="F:System.Data.EntityState.Detached" />、 <see cref="F:System.Data.EntityState.Added," /> 或 <see cref="F:System.Data.EntityState.Deleted" /> 状态。 - 或 - <paramref name="entity" /> 附加到 <see cref="T:System.Data.Objects.ObjectContext" /> 的另一个实例。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>通过指定的 LINQ 查询并使用默认合并选项，显式加载与提供的对象相关的对象。</summary>
      <param name="entity">要为其加载相关对象的源对象。</param>
      <param name="selector">定义要加载的相关对象的 LINQ 表达式。</param>
      <typeparam name="TEntity">
      </typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="selector" /> 未提供有效的输入参数。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="entity" /> 处于 <see cref="F:System.Data.EntityState.Detached" />、 <see cref="F:System.Data.EntityState.Added," /> 或 <see cref="F:System.Data.EntityState.Deleted" /> 状态。 - 或 - <paramref name="entity" /> 附加到 <see cref="T:System.Data.Objects.ObjectContext" /> 的另一个实例。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Objects.MergeOption)">
      <summary>通过指定的 LINQ 查询并使用指定的合并选项，显式加载与提供的对象相关的对象。</summary>
      <param name="entity">要为其加载相关对象的源对象。</param>
      <param name="selector">定义要加载的相关对象的 LINQ 表达式。</param>
      <param name="mergeOption">在加载相关对象时要使用的 <see cref="T:System.Data.Objects.MergeOption" /> 值。</param>
      <typeparam name="TEntity">
      </typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="selector" /> 未提供有效的输入参数。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="entity" /> 处于 <see cref="F:System.Data.EntityState.Detached" />、 <see cref="F:System.Data.EntityState.Added," /> 或 <see cref="F:System.Data.EntityState.Deleted" /> 状态。 - 或 - <paramref name="entity" /> 附加到 <see cref="T:System.Data.Objects.ObjectContext" /> 的另一个实例。</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.MetadataWorkspace">
      <summary>获取对象上下文使用的元数据工作区。</summary>
      <returns>与此 <see cref="T:System.Data.Objects.ObjectContext" /> 关联的 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 对象。</returns>
    </member>
    <member name="E:System.Data.Objects.ObjectContext.ObjectMaterialized">
      <summary>当使用数据源中的数据创建新的实体对象（作为查询或加载操作的一部分）时发生。</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.ObjectStateManager">
      <summary>获取对象上下文用于跟踪对象更改的对象状态管理器。</summary>
      <returns>由此 <see cref="T:System.Data.Objects.ObjectContext" /> 使用的 <see cref="T:System.Data.Objects.ObjectStateManager" />。</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.QueryProvider">
      <summary>获取与此对象上下文关联的 LINQ 查询提供程序。</summary>
      <returns>由此对象上下文使用的 <see cref="T:System.Linq.IQueryProvider" /> 实例。</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Collections.IEnumerable)">
      <summary>使用数据源中的数据更新对象上下文中的对象集合。</summary>
      <param name="refreshMode">一个 <see cref="T:System.Data.Objects.RefreshMode" /> 值，指示是否使用数据源中的属性值覆盖对象上下文中的属性更改。</param>
      <param name="collection">要刷新的对象的 <see cref="T:System.Collections.IEnumerable" /> 集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="refreshMode" /> 无效。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> 为空。 - 或 - 对象未附加到上下文。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Object)">
      <summary>使用数据源中的数据更新对象上下文中的对象。</summary>
      <param name="refreshMode">一个 <see cref="T:System.Data.Objects.RefreshMode" /> 值，指定使用哪种模式来刷新 <see cref="T:System.Data.Objects.ObjectStateManager" />。</param>
      <param name="entity">要刷新的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="refreshMode" /> 无效。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> 为空。 - 或 - 对象未附加到上下文。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.SaveChanges">
      <summary>将所有更新保存到数据源并重置对象上下文中的更改跟踪。</summary>
      <returns>在调用 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 时处于 <see cref="F:System.Data.EntityState.Added" />、<see cref="F:System.Data.EntityState.Modified" /> 或 <see cref="F:System.Data.EntityState.Deleted" /> 状态的对象数。</returns>
      <exception cref="T:System.Data.OptimisticConcurrencyException">在数据源中发生了开放式并发冲突。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)">
      <summary>将所有更新保存到数据源并可选择重置对象上下文中的更改跟踪。</summary>
      <returns>在调用 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 时处于 <see cref="F:System.Data.EntityState.Added" />、<see cref="F:System.Data.EntityState.Modified" /> 或 <see cref="F:System.Data.EntityState.Deleted" /> 状态的对象数。</returns>
      <param name="acceptChangesDuringSave">此参数是客户端事务支持所需的参数。 如果为 true，则所有对象的更改跟踪都会在 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)" /> 完成后重置。 如果为 false，则必须在 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)" /> 之后调用 <see cref="M:System.Data.Objects.ObjectContext.AcceptAllChanges" /> 方法。</param>
      <exception cref="T:System.Data.OptimisticConcurrencyException">发生了开放式并发冲突。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.SaveChanges(System.Data.Objects.SaveOptions)">
      <summary>使用指定的 <see cref="T:System.Data.Objects.SaveOptions" /> 将所有更新保存到数据源。</summary>
      <returns>在调用 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 时处于 <see cref="F:System.Data.EntityState.Added" />、<see cref="F:System.Data.EntityState.Modified" /> 或 <see cref="F:System.Data.EntityState.Deleted" /> 状态的对象数。</returns>
      <param name="options">一个确定操作的行为的 <see cref="T:System.Data.Objects.SaveOptions" /> 值。</param>
      <exception cref="T:System.Data.OptimisticConcurrencyException">发生了开放式并发冲突。</exception>
    </member>
    <member name="E:System.Data.Objects.ObjectContext.SavingChanges">
      <summary>在将更改保存到数据源时发生。</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader)">
      <summary>将包含实体数据行的 <see cref="T:System.Data.Common.DbDataReader" /> 转换为请求的实体类型的对象。</summary>
      <returns>类型为 <paramref name="TResult" /> 的对象的枚举。</returns>
      <param name="reader">包含要转换为实体对象的实体数据的 <see cref="T:System.Data.Common.DbDataReader" />。</param>
      <typeparam name="TElement">
      </typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="reader" /> 为 null 时。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader,System.String,System.Data.Objects.MergeOption)">
      <summary>在特定的实体集中，使用指定的合并选项将包含实体数据行的 <see cref="T:System.Data.Common.DbDataReader" /> 转换为请求的实体类型的对象。</summary>
      <returns>类型为 <paramref name="TResult" /> 的对象的枚举。</returns>
      <param name="reader">包含要转换为实体对象的实体数据的 <see cref="T:System.Data.Common.DbDataReader" />。</param>
      <param name="entitySetName">
        <paramref name="TResult" /> 类型的实体集。</param>
      <param name="mergeOption">在将转换后的对象添加到对象上下文时要使用的 <see cref="T:System.Data.Objects.MergeOption" />。 默认值为 <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />。</param>
      <typeparam name="TEntity">
      </typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="reader" /> 为 null 时。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">当提供的 <paramref name="mergeOption" /> 不是有效的 <see cref="T:System.Data.Objects.MergeOption" /> 值时。</exception>
      <exception cref="T:System.InvalidOperationException">当提供的 <paramref name="entitySetName" /> 不是 <paramref name="TResult" /> 类型的有效实体集时。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.TryGetObjectByKey(System.Data.EntityKey,System.Object@)">
      <summary>返回具有指定实体键的对象。</summary>
      <returns>如果成功检索到对象，则为 true。 如果 <paramref name="key" /> 是临时的，或者连接为 null，或 <paramref name="value" /> 为 null，则为 false。</returns>
      <param name="key">要查找的对象的键。</param>
      <param name="value">在此方法返回时包含该对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 的元数据不兼容。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="T:System.Data.Objects.ObjectContextOptions">
      <summary>定义影响 <see cref="T:System.Data.Objects.ObjectContext" /> 的行为的选项。</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled">
      <summary>获取或设置一个布尔值，该值确定在访问导航属性时是否自动加载相关对象。</summary>
      <returns>如果启用延迟加载，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.ProxyCreationEnabled">
      <summary>获取或设置一个布尔值，该值确定是否为持久性未知的自定义数据类创建代理实例。</summary>
      <returns>如果创建代理，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.UseConsistentNullReferenceBehavior">
      <summary>获取或设置是否用一致 NullReference 行为的“布尔”值。</summary>
      <returns>如果应使用一致 NullReferernce 行为，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.UseCSharpNullComparisonBehavior">
      <summary>获取或设置是否用 C# NullComparison 行为的“布尔”值。</summary>
      <returns>如果应使用 C# NullComparison 行为，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.UseLegacyPreserveChangesBehavior">
      <summary>获取或设置确定是否使用旧式 PreserveChanges 行为的布尔值。</summary>
      <returns>如果应使用旧的 PreserveChanges 行为，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectMaterializedEventArgs">
      <summary>包含 <see cref="E:System.Data.Objects.ObjectContext.ObjectMaterialized" /> 事件的数据。</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectMaterializedEventArgs.Entity">
      <summary>获取已创建的实体对象。</summary>
      <returns>已创建的实体对象。</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectMaterializedEventHandler">
      <summary>表示将处理 <see cref="T:System.Data.Objects.ObjectContext" /> 的 <see cref="E:System.Data.Objects.ObjectContext.ObjectMaterialized" /> 事件的方法。</summary>
      <param name="sender">触发事件的 <see cref="T:System.Data.Objects.ObjectContext" /> 实例。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.Objects.ObjectMaterializedEventArgs" /> 对象。</param>
    </member>
    <member name="T:System.Data.Objects.ObjectParameter">
      <summary>表示传递给对象查询的查询参数。</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectParameter.#ctor(System.String,System.Object)">
      <summary>用指定的名称和值初始化 <see cref="T:System.Data.Objects.ObjectParameter" /> 类的新实例。</summary>
      <param name="name">参数名。 此名称不应包含 Entity SQL 语句中使用的“@”参数标记，只能包含实际名称。 表达式的第一个字符必须为字母。 表达式中的所有后续字符都必须为字母、数字或下划线 (_) 字符。</param>
      <param name="value">参数的初始值（以及该值的性质所确定的类型）。</param>
      <exception cref="T:System.ArgumentNullException">任一参数的值为 null 时发生。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">name 参数的值无效时发生。 参数名称必须以字母开头，并且只能包含字母、数字和下划线。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameter.#ctor(System.String,System.Type)">
      <summary>用指定的名称和类型初始化 <see cref="T:System.Data.Objects.ObjectParameter" /> 类的新实例。</summary>
      <param name="name">参数名。 此名称不应包含 Entity SQL 语句中使用的“@”参数标记，只能包含实际名称。 表达式的第一个字符必须为字母。 表达式中的所有后续字符都必须为字母、数字或下划线 (_) 字符。</param>
      <param name="type">参数的公共语言运行时 (CLR) 类型。</param>
      <exception cref="T:System.ArgumentNullException">任一参数的值为 null 时发生。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">name 参数的值无效时发生。 参数名称必须以字母开头，并且只能包含字母、数字和下划线。</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectParameter.Name">
      <summary>获取参数名称，该名称只能通过构造函数来设置。</summary>
      <returns>参数名称，该名称只能通过构造函数来设置。</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectParameter.ParameterType">
      <summary>获取参数类型。</summary>
      <returns>参数的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectParameter.Value">
      <summary>获取或设置参数值。</summary>
      <returns>参数值。</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectParameterCollection">
      <summary>将查询参数表示为 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 中定义的 <see cref="T:System.Data.Objects.ObjectParameter" /> 对象。</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Add(System.Data.Objects.ObjectParameter)">
      <summary>将指定的 <see cref="T:System.Data.Objects.ObjectParameter" /> 添加到集合。</summary>
      <param name="parameter">要添加到集合的参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name=" parameter" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameter" /> 实参已存在于集合中。 此行为与允许重复实体的大多数集合的行为不同。 - 或 - 与 <paramref name="parameter" /> 实参具有相同名称的另一个形参已存在于集合中。 请注意，查找是不区分大小写的。 此行为与大多数集合的行为不同，更类似于 <see cref="T:System.Collections.Generic.Dictionary" /> 的行为。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="parameter" /> 的类型无效。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Clear">
      <summary>删除集合中的所有 <see cref="T:System.Data.Objects.ObjectParameter" /> 实例。</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Contains(System.Data.Objects.ObjectParameter)">
      <summary>按引用检查集合中是否存在指定的 <see cref="T:System.Data.Objects.ObjectParameter" />。</summary>
      <returns>如果在集合中找到参数对象，则返回 true；否则返回 false。</returns>
      <param name="parameter">要在集合中查找的 <see cref="T:System.Data.Objects.ObjectParameter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameter" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Contains(System.String)">
      <summary>确定集合中是否存在具有指定名称的 <see cref="T:System.Data.Objects.ObjectParameter" />。</summary>
      <returns>如果在集合中找到具有指定名称的参数，则返回 true；否则返回 false。</returns>
      <param name="name">要在集合中查找的参数的名称。 此名称不应包含 Entity SQL 语句中使用的“@”参数标记，只能包含实际名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.CopyTo(System.Data.Objects.ObjectParameter[],System.Int32)">
      <summary>允许将集合中的参数复制到所提供的数组中（从指定索引处的对象开始）。</summary>
      <param name="array">要将参数复制到其中的数组。</param>
      <param name="index">数组中从其位置开始复制参数的索引。</param>
    </member>
    <member name="P:System.Data.Objects.ObjectParameterCollection.Count">
      <summary>获取集合中当前存在的参数的数目。</summary>
      <returns>集合中当前存在的 <see cref="T:System.Data.Objects.ObjectParameter" /> 对象的数量。</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectParameterCollection.Item(System.String)">
      <summary>提供一个索引器，使调用方能够根据名称来检索参数。</summary>
      <returns>
        <see cref="T:System.Data.Objects.ObjectParameter" /> 实例。</returns>
      <param name="name">要查找的参数的名称。 此名称不应包含 Entity SQL 语句中使用的“@”参数标记，只能包含实际名称。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">集合中未找到具有指定名称的参数。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Remove(System.Data.Objects.ObjectParameter)">
      <summary>按引用从集合中移除 <see cref="T:System.Data.Objects.ObjectParameter" /> 的实例（如果集合中存在该实例）。</summary>
      <returns>如果在集合中找到并移除了参数对象，则返回 true；否则返回 false。</returns>
      <param name="parameter">要从集合中移除的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameter" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示集合是只读的还是可修改的。</summary>
      <returns>一个布尔值，如果集合是只读的，则为 true；如果集合是可修改的，则为 false。</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回集合的类型化枚举器。</summary>
      <returns>类型为 <see cref="T:System.Data.Objects.ObjectParameter" /> 的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回集合的非类型化枚举器。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" /> 实例。</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectQuery">
      <summary>实现使用 LINQ to Entities 和 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 对概念模型执行查询的通用功能。</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.CommandText">
      <summary>返回查询的命令文本。</summary>
      <returns>一个 string 值。</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.Context">
      <summary>获取与此对象查询相关联的对象上下文。</summary>
      <returns>与此 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例关联的 <see cref="T:System.Data.Objects.ObjectContext" />。</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.EnablePlanCaching">
      <summary>获取或设置一个值，该值指示是否应缓存查询计划。</summary>
      <returns>一个指示是否应缓存查询计划的值。</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.Execute(System.Data.Objects.MergeOption)">
      <summary>使用指定的合并选项执行非类型化对象查询。</summary>
      <returns>一个 <see cref="T:System.Data.Objects.ObjectResult`1" />，它包含查询返回的实体对象的集合。</returns>
      <param name="mergeOption">执行查询时要使用的 <see cref="T:System.Data.Objects.MergeOption" />。 默认值为 <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />。</param>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.GetResultType">
      <summary>返回有关查询的结果类型的信息。</summary>
      <returns>一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 值，它包含有关查询的结果类型的信息。</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.MergeOption">
      <summary>获取或设置如何将查询返回的对象添加到对象上下文。</summary>
      <returns>查询 <see cref="T:System.Data.Objects.MergeOption" />。</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.Parameters">
      <summary>获取此对象查询的参数集合。</summary>
      <returns>此 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 的参数集合。</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>获取一个值，该值指示查询返回的集合是否包含集合对象。</summary>
      <returns>一个布尔值。</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.System#ComponentModel#IListSource#GetList">
      <summary>以 <see cref="T:System.Collections.IList" /> 形式返回一个集合，用于数据绑定。</summary>
      <returns>实体对象的 <see cref="T:System.Collections.IList" />。</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#Linq#IQueryable#ElementType">
      <summary>获取此查询实例的结果元素类型。</summary>
      <returns>一个 <see cref="T:System.Type" />，表示此查询实例的结果元素类型。</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#Linq#IQueryable#Expression">
      <summary>获取描述此查询的表达式。</summary>
      <returns>描述此查询的 LINQ <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#Linq#IQueryable#Provider">
      <summary>获取与此查询实例关联的 LINQ <see cref="T:System.Linq.IQueryProvider" />。</summary>
      <returns>与此查询实例关联的 <see cref="T:System.Linq.IQueryProvider" />。</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.ToTraceString">
      <summary>返回要对数据源执行的命令。</summary>
      <returns>一个 string，表示查询对数据源执行的命令。</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectQuery`1">
      <summary>表示在给定的对象上下文中针对概念模型的类型化查询。</summary>
      <typeparam name="T">查询的实体类型。</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext)">
      <summary>使用指定的 Entity SQL 命令作为初始查询来创建新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例。</summary>
      <param name="commandText">Entity SQL 查询。</param>
      <param name="context">要对其执行查询的 <see cref="T:System.Data.Objects.ObjectContext" />。</param>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext,System.Data.Objects.MergeOption)">
      <summary>使用指定的 Entity SQL 命令（作为初始查询）和指定的合并选项来创建新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例。</summary>
      <param name="commandText">Entity SQL 查询。</param>
      <param name="context">要对其执行查询的 <see cref="T:System.Data.Objects.ObjectContext" />。</param>
      <param name="mergeOption">指定如何将通过此查询检索到的实体与以前对同一 <see cref="T:System.Data.Objects.ObjectContext" /> 的查询所返回的实体合并。</param>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Distinct">
      <summary>将查询限制为仅返回唯一结果。</summary>
      <returns>一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于应用了 SELECT DISTINCT 的原始实例。</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Except(System.Data.Objects.ObjectQuery{`0})">
      <summary>根据另一个对象查询的结果排除查询结果，从而对查询结果进行限制。</summary>
      <returns>一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于根据指定的 <paramref name="query" /> 应用了 EXCEPT 的原始实例。</returns>
      <param name="query">一个 <see cref="T:System.Data.Objects.ObjectQuery`1" />，表示要从查询中排除的结果。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="query" /> 参数为 null 或是空字符串。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Execute(System.Data.Objects.MergeOption)">
      <summary>使用指定的合并选项执行对象查询。</summary>
      <returns>一个 <see cref="T:System.Data.Objects.ObjectResult`1" />，它包含查询返回的实体对象的集合。</returns>
      <param name="mergeOption">执行查询时要使用的 <see cref="T:System.Data.Objects.MergeOption" />。 默认值为 <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />。</param>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Objects.ObjectParameter[])">
      <summary>按指定的条件对查询结果进行分组。</summary>
      <returns>一个 <see cref="T:System.Data.Common.DbDataRecord" /> 类型的新 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于应用了 GROUP BY 的原始实例。</returns>
      <param name="keys">作为结果分组依据的键列。</param>
      <param name="projection">用于定义投影的所选属性的列表。</param>
      <param name="parameters">此方法中使用的零个或多个参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="query" /> 参数为 null 或是空字符串。 - 或 - <paramref name="projection" /> 参数为 null 或是空字符串。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Include(System.String)">
      <summary>指定要包括在查询结果中的相关对象。</summary>
      <returns>一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" />，它具有定义的查询路径。</returns>
      <param name="path">要在查询结果中返回的相关对象列表（以点号分隔）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为 empty。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Intersect(System.Data.Objects.ObjectQuery{`0})">
      <summary>通过仅包括另一个对象查询中存在的结果，对查询结果进行限制。</summary>
      <returns>一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于根据指定的 <paramref name="query" /> 应用了 INTERSECT 的原始实例。</returns>
      <param name="query">一个 <see cref="T:System.Data.Objects.ObjectQuery`1" />，表示要包括在查询中的结果。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="query" /> 参数为 null 或者是空字符串。</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery`1.Name">
      <summary>获取或设置此对象查询的名称。</summary>
      <returns>一个 string 值，表示此 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 的名称。</returns>
      <exception cref="T:System.ArgumentException">在设置时指定的值无效。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.OfType``1">
      <summary>将查询限制为仅返回特定类型的结果。</summary>
      <returns>一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于应用了 OFTYPE 的原始实例。</returns>
      <typeparam name="TResultType">在应用筛选器执行查询时，返回的 <see cref="T:System.Data.Objects.ObjectResult`1" /> 的类型。</typeparam>
      <exception cref="T:System.Data.EntitySqlException">指定的类型无效。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>按指定条件对查询结果进行排序。</summary>
      <returns>一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于应用了 ORDER BY 的原始实例。</returns>
      <param name="keys">作为结果排序依据的键列。</param>
      <param name="parameters">此方法中使用的零个或多个参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 或 <paramref name="parameters" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 是空字符串。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Select(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>将查询结果限制为仅包含在指定投影中定义的属性。</summary>
      <returns>一个 <see cref="T:System.Data.Common.DbDataRecord" /> 类型的新 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于应用了 SELECT 的原始实例。</returns>
      <param name="projection">用于定义投影的所选属性的列表。</param>
      <param name="parameters">此方法中使用的零个或多个参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="projection" /> 为 null。 - 或 - <paramref name="parameters" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="projection" /> 是空字符串。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>将查询结果限制为仅包含投影中指定的属性。</summary>
      <returns>一个类型与特定投影兼容的新 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例。 返回的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 等效于应用了 SELECT VALUE 的原始实例。</returns>
      <param name="projection">投影列表。</param>
      <param name="parameters">一个可选的查询参数集，在分析时这些参数应在范围内。</param>
      <typeparam name="TResultType">由 <see cref="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])" /> 方法返回的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="projection" /> 为 null。 - 或 - <paramref name="parameters" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="projection" /> 是空字符串。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Objects.ObjectParameter[])">
      <summary>按指定条件对查询结果进行排序并跳过指定数目的结果。</summary>
      <returns>一个新 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于同时应用了 ORDER BY 和 SKIP 的原始实例。</returns>
      <param name="keys">作为结果排序依据的键列。</param>
      <param name="count">要跳过的结果数。 它必须是一个常量或是一个参数引用。</param>
      <param name="parameters">一个可选的查询参数集，在分析时这些参数应在范围内。</param>
      <exception cref="T:System.ArgumentNullException">任何参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keys" /> 是空字符串。 - 或 - <paramref name="count" /> 是空字符串。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回一个循环访问查询结果的枚举器。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 对象，可用于循环访问结果。</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Top(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>将查询结果限制为仅包含指定的项数。</summary>
      <returns>一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于应用了 TOP 的原始实例。</returns>
      <param name="count">字符串形式的结果项数。</param>
      <param name="parameters">一个可选的查询参数集，在分析时这些参数应在范围内。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="count" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> 是空字符串。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Union(System.Data.Objects.ObjectQuery{`0})">
      <summary>将查询结果与另一个对象查询的结果进行组合（不包括重复项）。</summary>
      <returns>一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于应用了 UNION 来添加指定 <paramref name="query" /> 结果的原始实例。</returns>
      <param name="query">一个 <see cref="T:System.Data.Objects.ObjectQuery`1" />，表示要添加的结果。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="query" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.UnionAll(System.Data.Objects.ObjectQuery{`0})">
      <summary>将查询结果与另一个对象查询的结果进行组合（包括所有重复项）。</summary>
      <returns>一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于应用了 UNION ALL 来添加指定 <paramref name="query" /> 结果的原始实例。</returns>
      <param name="query">一个 <see cref="T:System.Data.Objects.ObjectQuery`1" />，表示要添加的结果。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="query" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Where(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>将查询限制为返回与指定筛选条件匹配的结果。</summary>
      <returns>一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于应用了 WHERE 的原始实例。</returns>
      <param name="predicate">筛选谓词。</param>
      <param name="parameters">此方法中使用的零个或多个参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 为 null。 - 或 - <paramref name="parameters" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="predicate" /> 是一个空字符串。</exception>
    </member>
    <member name="T:System.Data.Objects.ObjectResult">
      <summary>表示实施 IEnumerable 和 IDisposable 的类。 从 ObjectQuery.Execute 方法返回的此类实例。</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectResult.Dispose">
      <summary>执行与释放或重置资源关联的任务。</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectResult.ElementType">
      <summary>当在派生类中重写时，获取该泛型 <see cref="T:System.Data.Objects.ObjectResult`1" /> 的类型。</summary>
      <returns>
        <see cref="T:System.Data.Objects.ObjectResult`1" /> 泛型类型。</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectResult.GetNextResult``1">
      <summary>获取已存储过程的下一个结果集。</summary>
      <returns>枚举下一个结果集的价值的 ObjectResult。 如果没有其他，或 ObjectResult 不是存储过程调用的结果，则为 Null。</returns>
      <typeparam name="TElement">元素的类型。</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectResult.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问查询结果的枚举器。</summary>
      <returns>一个循环访问查询结果的枚举器。</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectResult.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>获取一个值，该值指示查询返回的集合是否包含集合对象。</summary>
      <returns>如果由查询返回的集合包含集合对象，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectResult.System#ComponentModel#IListSource#GetList">
      <summary>以有利于数据绑定的格式返回结果。</summary>
      <returns>实体对象的 <see cref="T:System.Collections.IList" />。</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectResult`1">
      <summary>以对象的可枚举集合形式表示 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 的结果。</summary>
      <typeparam name="T">结果的实体类型。</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectResult`1.Dispose">
      <summary>执行与释放或重置资源关联的任务。</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectResult`1.ElementType">
      <summary>获取 <see cref="T:System.Data.Objects.ObjectResult`1" /> 的类型。</summary>
      <returns>一个 <see cref="T:System.Type" />，它是 <see cref="T:System.Data.Objects.ObjectResult`1" /> 的类型。</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectResult`1.GetEnumerator">
      <summary>返回一个循环访问查询结果的枚举器。</summary>
      <returns>一个循环访问查询结果的枚举器。</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectSet`1">
      <summary>表示用于执行创建、读取、更新和删除操作的类型化实体集。</summary>
      <typeparam name="TEntity">实体类型。</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.AddObject(`0)">
      <summary>将对象添加到当前实体集中的对象上下文。</summary>
      <param name="entity">要添加的对象。</param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.ApplyCurrentValues(`0)">
      <summary>将标量值从提供的对象复制到具有相同键的 <see cref="T:System.Data.Objects.ObjectContext" /> 中的对象中。</summary>
      <returns>已更新的对象。</returns>
      <param name="currentEntity">具有要应用于原始对象的属性更新的已分离对象。 <paramref name="currentEntity" /> 的实体键必须与 <see cref="T:System.Data.Objects.ObjectContext" /> 中某个项的 <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> 属性相匹配。</param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.ApplyOriginalValues(`0)">
      <summary>将 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 的 <see cref="P:System.Data.Objects.ObjectStateEntry.OriginalValues" /> 属性设置为与所提供对象的属性值相匹配。</summary>
      <returns>已更新的对象。</returns>
      <param name="originalEntity">具有要应用于原始对象的属性更新的已分离对象。 <paramref name="originalEntity" /> 的实体键必须与 <see cref="T:System.Data.Objects.ObjectContext" /> 中某个项的 <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> 属性相匹配。</param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.Attach(`0)">
      <summary>将对象或对象图附加到当前实体集中的对象上下文。</summary>
      <param name="entity">要附加的对象。</param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.CreateObject``1">
      <summary>创建指定类型的实例。</summary>
      <returns>与 <paramref name="T" /> 类型对应的已请求类型 <paramref name="T" /> 的实例或代理类型的实例。</returns>
      <typeparam name="T">要返回的对象的类型。</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.CreateObject">
      <summary>创建一个新的实体类型对象。</summary>
      <returns>与实体类型对应的新实体类型对象或代理类型的实例。</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.DeleteObject(`0)">
      <summary>将对象标记为待删除。</summary>
      <param name="entity">表示要删除的实体的对象。 该对象可以为任何状态（<see cref="F:System.Data.EntityState.Detached" /> 除外）。</param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.Detach(`0)">
      <summary>从对象上下文移除对象。</summary>
      <param name="entity">要分离的对象。 仅移除 <paramref name="entity" />；如果有任何相关对象受同一 <see cref="T:System.Data.Objects.ObjectStateManager" /> 跟踪，则不会自动分离这些对象。</param>
    </member>
    <member name="P:System.Data.Objects.ObjectSet`1.EntitySet">
      <summary>获取用此 <see cref="T:System.Data.Objects.ObjectSet`1" /> 实例表示的实体集的元数据。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 对象。</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectStateEntry">
      <summary>表示实体、实体存根或关系。</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.AcceptChanges">
      <summary>接受当前值作为原始值。</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.ApplyCurrentValues(System.Object)">
      <summary>设置项的当前值，使其与所提供对象的属性值相匹配。</summary>
      <param name="currentEntity">具有要应用于对象的更新值的已分离对象。 <paramref name="currentEntity" /> 还可以是对象的实体键。</param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.ApplyOriginalValues(System.Object)">
      <summary>设置条目的原始值，使其与所提供对象的属性值相匹配。</summary>
      <param name="originalEntity">具有要应用于对象的原始值的已分离对象。 <paramref name="originalEntity" /> 还可以是对象的实体键。</param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.ChangeState(System.Data.EntityState)">
      <summary>将该项的状态更改为指定的 <see cref="T:System.Data.EntityState" /> 值。</summary>
      <param name="state">要为该项的 <see cref="P:System.Data.Objects.ObjectStateEntry.State" /> 属性设置的 <see cref="T:System.Data.EntityState" /> 值。</param>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.CurrentValues">
      <summary>获取与此 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 关联的对象或关系的当前属性值。</summary>
      <returns>一个 <see cref="T:System.Data.Objects.CurrentValueRecord" />，它包含与此 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 关联的对象或关系的当前值。</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.Delete">
      <summary>将实体标记为已删除。</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.Entity">
      <summary>获取实体对象。</summary>
      <returns>实体对象。</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.EntityKey">
      <summary>获取或设置实体密钥。</summary>
      <returns>实体键。</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.EntitySet">
      <summary>获取该对象或关系的 <see cref="T:System.Data.Metadata.Edm.EntitySetBase" />。</summary>
      <returns>用于对象或关系的 <see cref="T:System.Data.Metadata.Edm.EntitySetBase" />。</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.GetModifiedProperties">
      <summary>返回自上次调用 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 以来已更改的对象属性的名称。</summary>
      <returns>名称 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合，形式为字符串。</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.GetUpdatableOriginalValues">
      <summary>获取与此 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 关联的对象的原始值的可更新版本。</summary>
      <returns>对象数据的可更新原始值。</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.IsPropertyChanged(System.String)">
      <summary>使用 DetectChanges 确定物产的当前值与给定名称是否与它的初始值不同。 注意这可能不同于虽然属性没有更改仍然能被标记为修改的标记为修改的属性。</summary>
      <returns>如果用户已更改了属性，则为 true；否则为 false。</returns>
      <param name="propertyName">属性的名称。</param>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.IsRelationship">
      <summary>获取一个值，该值指示此 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 是否表示一个关系。</summary>
      <returns>如果 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 表示某一关系 ，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.ObjectStateManager">
      <summary>获取 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 的 <see cref="T:System.Data.Objects.ObjectStateManager" />。</summary>
      <returns>
        <see cref="T:System.Data.Objects.ObjectStateEntry" /> 的 <see cref="T:System.Data.Objects.ObjectStateManager" />。</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.OriginalValues">
      <summary>获取与此的对象或关系关联的原始值的只读版本。</summary>
      <returns>关系集项或实体的原始值的只读版本。</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.RejectPropertyChanges(System.String)">
      <summary>拒绝对给定名称属性所做的任何更改，因为属性最近接受加载、附加、保存或更改。 存储属性的初始值，且属性将不再被标记为已修改。</summary>
      <param name="propertyName">要更改的属性的名称。</param>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.RelationshipManager">
      <summary>获取项所表示的对象的 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> 实例。</summary>
      <returns>
        <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.SetModified">
      <summary>设置对象或关系的状态以进行修改。</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.SetModifiedProperty(System.String)">
      <summary>将指定属性标记为已修改。</summary>
      <param name="propertyName">属性的名称。</param>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.State">
      <summary>获取或设置 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 的状态。</summary>
      <returns>
        <see cref="T:System.Data.Objects.ObjectStateEntry" /> 的状态。</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>通知状态管理器，复杂属性已更改。</summary>
      <param name="entityMemberName">要更改的顶级对象属性的名称。</param>
      <param name="complexObject">包含要更改的属性的复杂对象。</param>
      <param name="complexObjectMemberName">复杂对象上要更改的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>通知状态管理器，复杂属性有挂起的更改。</summary>
      <param name="entityMemberName">复杂属性的名称。</param>
      <param name="complexObject">包含要更改的属性的复杂对象。</param>
      <param name="complexObjectMemberName">复杂对象上要更改的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanged(System.String)">
      <summary>通知状态管理器，属性已更改。</summary>
      <param name="entityMemberName">已更改的实体属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanging(System.String)">
      <summary>通知状态管理器，属性有挂起的更改。</summary>
      <param name="entityMemberName">要更改的实体属性的名称。</param>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityState">
      <summary>获取 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 的 <see cref="T:System.Data.EntityState" />。</summary>
      <returns>
        <see cref="T:System.Data.Objects.ObjectStateEntry" /> 的 <see cref="T:System.Data.EntityState" />。</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectStateManager">
      <summary>维护实体类型实例和关系实例的对象状态和标识管理。</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.#ctor(System.Data.Metadata.Edm.MetadataWorkspace)">
      <summary>初始化 <see cref="T:System.Data.Objects.ObjectStateManager" /> 类的新实例。</summary>
      <param name="metadataWorkspace">提供映射和元数据信息的 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />。</param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeObjectState(System.Object,System.Data.EntityState)">
      <summary>将特定对象的 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 状态更改为指定的 <paramref name="entityState" />。</summary>
      <returns>所提供的 <paramref name="entity" /> 的 <see cref="T:System.Data.Objects.ObjectStateEntry" />。</returns>
      <param name="entity">必须更改状态的对象。</param>
      <param name="entityState">对象的新状态。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="entity" /> 为 null 时。</exception>
      <exception cref="T:System.InvalidOperationException">当对象未分离并且状态管理器中没有项时。 - 或 - 在尝试将状态从其他任何 <see cref="T:System.Data.EntityState." /> 更改为 <see cref="F:System.Data.EntityState.Detached" /> 时 - 或 - 当 <paramref name="state" /> 不是有效的 <see cref="T:System.Data.EntityState" /> 值时。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.Data.EntityState)">
      <summary>更改两个实体对象之间的指定关系的状态，根据两个相关对象和导航属性的名称来指定关系。</summary>
      <returns>已更改的关系的 <see cref="T:System.Data.Objects.ObjectStateEntry" />。</returns>
      <param name="sourceEntity">位于关系一端的对象实例或源实体的 <see cref="T:System.Data.EntityKey" />。</param>
      <param name="targetEntity">位于关系另一端的对象实例或目标实体的 <see cref="T:System.Data.EntityKey" />。</param>
      <param name="navigationProperty">返回指定 <paramref name="target" /> 的 <paramref name="source" /> 的导航属性名称。</param>
      <param name="relationshipState">请求的所指定关系的 <see cref="T:System.Data.EntityState" />。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="source" /> 或 <paramref name="target" /> 为 null 时。</exception>
      <exception cref="T:System.InvalidOperationException">在尝试将关系的状态更改为非 <see cref="F:System.Data.EntityState.Deleted" /> 或 <see cref="F:System.Data.EntityState.Detached" /> 的状态时，当 <paramref name="source" /> 或 <paramref name="target" /> 处于 <see cref="F:System.Data.EntityState.Deleted" /> 状态中时。 - 或 - 在尝试将关系的状态更改为非 <see cref="F:System.Data.EntityState.Added" /> 或 <see cref="F:System.Data.EntityState.Detached" /> 的状态时，当 <paramref name="source" /> 或 <paramref name="target" /> 处于 <see cref="F:System.Data.EntityState.Added" /> 状态中时。 - 或 - 当 <paramref name="state" /> 不是有效的 <see cref="T:System.Data.EntityState" /> 值时。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.String,System.Data.EntityState)">
      <summary>更改两个实体对象之间的指定关系的状态，根据两个相关对象和关系属性来指定关系。</summary>
      <returns>已更改的关系的 <see cref="T:System.Data.Objects.ObjectStateEntry" />。</returns>
      <param name="sourceEntity">位于关系一端的对象实例或源实体的 <see cref="T:System.Data.EntityKey" />。</param>
      <param name="targetEntity">位于关系另一端的对象实例或目标实体的 <see cref="T:System.Data.EntityKey" />。</param>
      <param name="relationshipName">关系的名称。</param>
      <param name="targetRoleName">关系的 <paramref name="target" /> 端的角色名称。</param>
      <param name="relationshipState">请求的所指定关系的 <see cref="T:System.Data.EntityState" />。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="source" /> 或 <paramref name="target" /> 为 null 时。</exception>
      <exception cref="T:System.InvalidOperationException">在尝试将关系的状态更改为非 <see cref="F:System.Data.EntityState.Deleted" /> 或 <see cref="F:System.Data.EntityState.Detached" /> 的状态时，当 <paramref name="source" /> 或 <paramref name="target" /> 处于 <see cref="F:System.Data.EntityState.Deleted" /> 状态中时。 - 或 - 在尝试将关系的状态更改为非 <see cref="F:System.Data.EntityState.Added" /> 或 <see cref="F:System.Data.EntityState.Detached" /> 的状态时，当 <paramref name="source" /> 或 <paramref name="target" /> 处于 <see cref="F:System.Data.EntityState.Added" /> 状态中时。 - 或 - 当 <paramref name="state" /> 不是有效的 <see cref="T:System.Data.EntityState" /> 值时。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeRelationshipState``1(``0,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.EntityState)">
      <summary>更改两个实体对象之间的指定关系的状态，根据两个相关对象和用于定义导航属性的 LINQ 表达式来指定关系。</summary>
      <returns>已更改的关系的 <see cref="T:System.Data.Objects.ObjectStateEntry" />。</returns>
      <param name="sourceEntity">位于关系一端的对象实例或源实体的 <see cref="T:System.Data.EntityKey" />。</param>
      <param name="targetEntity">位于关系另一端的对象实例或目标实体的 <see cref="T:System.Data.EntityKey" />。</param>
      <param name="navigationPropertySelector">一个 LINQ 表示式，用于选择返回指定 <paramref name="target" /> 的 <paramref name="source" /> 的导航属性。</param>
      <param name="relationshipState">请求的所指定关系的 <see cref="T:System.Data.EntityState" />。</param>
      <typeparam name="TEntity">
        <paramref name="source" /> 对象的实体类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">在 <paramref name="source" />、<paramref name="target" /> 或 <paramref name="selector" /> 为 null 时。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="selector" /> 格式不正确或无法返回导航属性。</exception>
      <exception cref="T:System.InvalidOperationException">在尝试将关系的状态更改为非 <see cref="F:System.Data.EntityState.Deleted" /> 或 <see cref="F:System.Data.EntityState.Detached" /> 的状态时，当 <paramref name="source" /> 或 <paramref name="target" /> 处于 <see cref="F:System.Data.EntityState.Deleted" /> 状态中时。 - 或 - 在尝试将关系的状态更改为非 <see cref="F:System.Data.EntityState.Added" /> 或 <see cref="F:System.Data.EntityState.Detached" /> 的状态时，当 <paramref name="source" /> 或 <paramref name="target" /> 处于 <see cref="F:System.Data.EntityState.Added" /> 状态中时。 - 或 - 当 <paramref name="state" /> 不是有效的 <see cref="T:System.Data.EntityState" /> 值时。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetObjectStateEntries(System.Data.EntityState)">
      <summary>返回具有给定状态的对象或关系的 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 对象的集合。</summary>
      <returns>具有给定 <see cref="T:System.Data.EntityState" /> 的 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 对象的集合。</returns>
      <param name="state">用于筛选返回的 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 对象的 <see cref="T:System.Data.EntityState" />。</param>
      <exception cref="T:System.ArgumentException">当 <paramref name="state" /> 为 <see cref="F:System.Data.EntityState.Detached" /> 时。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetObjectStateEntry(System.Data.EntityKey)">
      <summary>返回具有指定键的对象或关系项的 <see cref="T:System.Data.Objects.ObjectStateEntry" />。</summary>
      <returns>给定的 <see cref="T:System.Data.EntityKey" /> 对应的 <see cref="T:System.Data.Objects.ObjectStateEntry" />。</returns>
      <param name="key">
        <see cref="T:System.Data.EntityKey" />。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="key" /> 为 null 时。</exception>
      <exception cref="T:System.ArgumentException">在状态管理器中找不到指定的 <paramref name="key" /> 时。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Objects.ObjectStateManager" /> 中不存在具有指定 <see cref="T:System.Data.EntityKey" /> 的实体。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetObjectStateEntry(System.Object)">
      <summary>返回指定对象的 <see cref="T:System.Data.Objects.ObjectStateEntry" />。</summary>
      <returns>给定的 <see cref="T:System.Object" /> 对应的 <see cref="T:System.Data.Objects.ObjectStateEntry" />。</returns>
      <param name="entity">检索到的 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 所属的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Objects.ObjectStateManager" /> 中不存在具有指定 <see cref="T:System.Object" /> 的实体。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetRelationshipManager(System.Object)">
      <summary>返回指定对象所使用的 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />。</summary>
      <returns>指定对象的 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />。</returns>
      <param name="entity">要为其返回 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> 的对象。</param>
      <exception cref="T:System.InvalidOperationException">当不能为指定的 <paramref name="entity" /> 返回 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> 时。</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectStateManager.MetadataWorkspace">
      <summary>获取与此状态管理器关联的 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />。</summary>
      <returns>与此 <see cref="T:System.Data.Objects.ObjectStateManager" /> 关联的 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />。</returns>
    </member>
    <member name="E:System.Data.Objects.ObjectStateManager.ObjectStateManagerChanged">
      <summary>在从状态管理器中添加或移除实体时发生。</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Data.EntityKey,System.Data.Objects.ObjectStateEntry@)">
      <summary>尝试检索具有指定 <see cref="T:System.Data.EntityKey" /> 的对象或关系的对应 <see cref="T:System.Data.Objects.ObjectStateEntry" />。</summary>
      <returns>一个布尔值，如果对给定的 <see cref="T:System.Data.EntityKey" /> 具有对应的 <see cref="T:System.Data.Objects.ObjectStateEntry" />，则为 true；否则为 false。</returns>
      <param name="key">给定的 <see cref="T:System.Data.EntityKey" />。</param>
      <param name="entry">此方法返回时，包含给定 <see cref="T:System.Data.EntityKey" /> 的 <see cref="T:System.Data.Objects.ObjectStateEntry" />。此参数以未初始化状态传递。</param>
      <exception cref="T:System.ArgumentNullException">为 <paramref name="key" /> 提供了一个 null（在 Visual Basic 中为 Nothing）值。</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Object,System.Data.Objects.ObjectStateEntry@)">
      <summary>尝试检索指定的 <see cref="T:System.Object" /> 的对应 <see cref="T:System.Data.Objects.ObjectStateEntry" />。</summary>
      <returns>一个布尔值，如果对给定的对象具有对应的 <see cref="T:System.Data.Objects.ObjectStateEntry" />，则该值为 true；否则为 false。</returns>
      <param name="entity">检索到的 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 所属的 <see cref="T:System.Object" />。</param>
      <param name="entry">此方法返回时，包含给定 <see cref="T:System.Data.EntityKey" /> 的 <see cref="T:System.Data.Objects.ObjectStateEntry" />。此参数传递时未经初始化。</param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.TryGetRelationshipManager(System.Object,System.Data.Objects.DataClasses.RelationshipManager@)">
      <summary>返回指定对象所使用的 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />。</summary>
      <returns>如果为所提供的 <paramref name="entity" /> 返回 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> 实例，则为 true；否则为 false。</returns>
      <param name="entity">要为其返回 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> 的对象。</param>
      <param name="relationshipManager">此方法返回时，将包含 <paramref name="entity" /> 的 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />。</param>
    </member>
    <member name="T:System.Data.Objects.OriginalValueRecord">
      <summary>提供对对象数据的原始值的访问。</summary>
    </member>
    <member name="T:System.Data.Objects.ProxyDataContractResolver">
      <summary>此类可帮助将为持久性未知数据类创建的代理类型解析为持久性未知对象的实际类型。</summary>
    </member>
    <member name="M:System.Data.Objects.ProxyDataContractResolver.#ctor">
      <summary>初始化 <see cref="T:System.Data.Objects.ProxyDataContractResolver" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Objects.ProxyDataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)">
      <summary>在反序列化过程中，将任何 xsi:type 信息映射到持久性未知对象的实际类型。</summary>
      <returns>返回 xsi:type 映射到的类型。 如果找不到与 xsi:type 匹配的已知类型，则返回 null。</returns>
      <param name="typeName">要映射的 xsi:type 信息。</param>
      <param name="typeNamespace">xsi:type 的命名空间。</param>
      <param name="declaredType">已声明的类型。</param>
      <param name="knownTypeResolver">
        <see cref="T:System.Data.Objects.ProxyDataContractResolver" /> 的一个实例。</param>
    </member>
    <member name="M:System.Data.Objects.ProxyDataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)">
      <summary>在序列化过程中，将实际类型映射到 xsi:type 信息。</summary>
      <returns>如果已解析该类型，则为 true；否则为 false。</returns>
      <param name="dataContractType">持久性未知对象的实际类型。</param>
      <param name="declaredType">已声明的类型。</param>
      <param name="knownTypeResolver">
        <see cref="T:System.Data.Objects.ProxyDataContractResolver" /> 的一个实例。</param>
      <param name="typeName">此方法返回时，包含 xsi:type 声明的列表。</param>
      <param name="typeNamespace">此方法返回时，包含使用的命名空间的列表。</param>
    </member>
    <member name="T:System.Data.Objects.RefreshMode">
      <summary>指定是保留对由对象服务跟踪的对象所做的属性更改，还是使用数据源中的属性值替换这些更改。</summary>
    </member>
    <member name="F:System.Data.Objects.RefreshMode.ClientWins">
      <summary>不使用数据源中的值替换在对象上下文中对对象所做的属性更改。 在下一次调用 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 时，这些更改会发送到数据源。</summary>
    </member>
    <member name="F:System.Data.Objects.RefreshMode.StoreWins">
      <summary>使用数据源中的值替换在对象上下文中对对象所做的属性更改。</summary>
    </member>
    <member name="T:System.Data.Objects.SaveOptions">
      <summary>指定在调用 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Data.Objects.SaveOptions)" /> 方法时对象上下文的行为。</summary>
    </member>
    <member name="F:System.Data.Objects.SaveOptions.AcceptAllChangesAfterSave">
      <summary>在保存更改后，调用 <see cref="M:System.Data.Objects.ObjectContext.AcceptAllChangesAfterSave" /> 方法，该方法会在 <see cref="T:System.Data.Objects.ObjectStateManager" /> 中重置更改跟踪。</summary>
    </member>
    <member name="F:System.Data.Objects.SaveOptions.DetectChangesBeforeSave">
      <summary>在保存更改之前，调用 <see cref="M:System.Data.Objects.ObjectContext.DetectChanges" /> 方法，使用 <see cref="T:System.Data.Objects.ObjectStateManager" /> 中的数据同步附加到对象上下文的对象的属性值。</summary>
    </member>
    <member name="F:System.Data.Objects.SaveOptions.None">
      <summary>保存更改，不调用 <see cref="M:System.Data.Objects.ObjectContext.DetectChanges" /> 或 <see cref="M:System.Data.Objects.ObjectContext.AcceptAllChangesAfterSave" /> 方法。</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.ComplexObject">
      <summary>复杂类型的基类。</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.ComplexObject.#ctor">
      <summary>创建 <see cref="T:System.Data.Objects.DataClasses.ComplexObject" /> 的实例。</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanged(System.String)">
      <summary>通知更改跟踪器，某个复杂对象的属性已更改。</summary>
      <param name="property">已更改属性的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanging(System.String)">
      <summary>通知更改跟踪器，对某个复杂对象的属性更改处于挂起状态。</summary>
      <param name="property">将要更改的属性的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> 为 null。</exception>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmComplexPropertyAttribute">
      <summary>一个特性，指示属性表示复杂属性。</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmComplexPropertyAttribute.#ctor">
      <summary>创建 <see cref="T:System.Data.Objects.DataClasses.EdmComplexPropertyAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmComplexTypeAttribute">
      <summary>一个特性，指示类表示复杂类型。</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmComplexTypeAttribute.#ctor">
      <summary>创建 <see cref="T:System.Data.Objects.DataClasses.EdmComplexTypeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmEntityTypeAttribute">
      <summary>一个特性，指示类表示实体类型。</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmEntityTypeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Data.Objects.DataClasses.EdmEntityTypeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmEnumTypeAttribute">
      <summary>指示枚举类型的特性。</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmEnumTypeAttribute.#ctor">
      <summary>初始化 EdmEnumTypeAttribute 类的新实例。</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmFunctionAttribute">
      <summary>一个特性，当该特性应用于某方法时，指示该方法是概念模型或存储模型中某个函数的代理。</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmFunctionAttribute.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Data.Objects.DataClasses.EdmFunctionAttribute" /> 类的新实例。</summary>
      <param name="namespaceName">映射目标函数的命名空间。</param>
      <param name="functionName">映射目标函数的名称。</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmFunctionAttribute.FunctionName">
      <summary>映射目标函数的名称。</summary>
      <returns>映射目标函数的名称。</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmFunctionAttribute.NamespaceName">
      <summary>映射目标函数的命名空间。</summary>
      <returns>映射目标函数的命名空间。</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmPropertyAttribute">
      <summary>特性的基类，这些特性定义如何将对象层中类型的属性映射到概念模型中实体类型或复杂类型的属性。</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute">
      <summary>基于概念模型中的关联，定义两个实体类型之间的关系。</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type)">
      <summary>创建 <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute" /> 类的实例。</summary>
      <param name="relationshipNamespaceName">此实体所参与的关联的命名空间名称。</param>
      <param name="relationshipName">此实体所参与的关系的名称。</param>
      <param name="role1Name">关联一端的类型的角色名称。</param>
      <param name="role1Multiplicity">
        <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> 的值，指示关联一端的重数，例如一重或多重。</param>
      <param name="role1Type">关联一端的实体的类型。</param>
      <param name="role2Name">关联另一端的类型的角色名称。</param>
      <param name="role2Multiplicity">
        <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> 的值，指示关联另一端的重数，例如一重或多重。</param>
      <param name="role2Type">关联另一端的实体的类型。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute" /> 类的新实例。</summary>
      <param name="relationshipNamespaceName">此实体所参与的关联的命名空间名称。</param>
      <param name="relationshipName">此实体所参与的关系的名称。</param>
      <param name="role1Name">关联一端的类型的角色名称。</param>
      <param name="role1Multiplicity">
        <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> 的值，指示关联一端的重数，例如一重或多重。</param>
      <param name="role1Type">关联一端的实体的类型。</param>
      <param name="role2Name">关联另一端的类型的角色名称。</param>
      <param name="role2Multiplicity">
        <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> 的值，指示关联另一端的重数，例如一重或多重。</param>
      <param name="role2Type">关联另一端的实体的类型。</param>
      <param name="isForeignKey">一个指示关系是否基于外键值的值。</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.IsForeignKey">
      <summary>获取一个布尔值，该值指示关系是否基于外键值。</summary>
      <returns>如果关系基于外键值，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.RelationshipName">
      <summary>关系的名称。</summary>
      <returns>一个 <see cref="T:System.String" />，表示此 <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute" /> 定义的关系的名称。</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.RelationshipNamespaceName">
      <summary>关系的命名空间。</summary>
      <returns>一个 <see cref="T:System.String" />，表示关系的命名空间。</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role1Multiplicity">
      <summary>关系一端的重数。</summary>
      <returns>指示重数的 <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> 值。</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role1Name">
      <summary>关系一端的角色的名称。</summary>
      <returns>表示角色名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role1Type">
      <summary>关系一端的实体的类型。</summary>
      <returns>表示此关联端的对象类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role2Multiplicity">
      <summary>关系另一端的重数。</summary>
      <returns>指示重数的 <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> 值。</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role2Name">
      <summary>关系另一端的角色的名称。</summary>
      <returns>表示角色名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role2Type">
      <summary>关系另一端的实体的类型。</summary>
      <returns>表示另一关联端的对象类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute">
      <summary>一个特性，指示属性表示导航属性。</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.#ctor(System.String,System.String,System.String)">
      <summary>初始化 <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute" /> 类的新实例。</summary>
      <param name="relationshipNamespaceName">关系属性的命名空间名称。</param>
      <param name="relationshipName">关系的名称。 此关系名称不由命名空间进行限定。</param>
      <param name="targetRoleName">关系另一端的角色名称。</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipName">
      <summary>获取非限定的关系名。</summary>
      <returns>关系名。</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipNamespaceName">
      <summary>导航属性的命名空间名称。</summary>
      <returns>表示命名空间名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.TargetRoleName">
      <summary>获取关系另一端处的角色名称。</summary>
      <returns>目标角色名称由在概念模型中定义此关系的关联中另一 End 元素的 Role 特性指定。 有关详细信息，请参阅 关联元素 (CSDL)。</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute">
      <summary>一个特性，指示属性表示标量属性。</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute.EntityKeyProperty">
      <summary>获取或设置一个值，该值指示属性是否为实体键的一部分。</summary>
      <returns>一个值，该值指示属性是否为实体键的一部分。</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute.IsNullable">
      <summary>获取或设置一个值，该值指示属性是否可以具有 null 值。</summary>
      <returns>一个值，该值指示属性是否可以具有 null 值。</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmSchemaAttribute">
      <summary>一个特性，指示程序集包含映射到概念模型中的实体类型的类。</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmSchemaAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Data.Objects.DataClasses.EdmSchemaAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmSchemaAttribute.#ctor(System.String)">
      <summary>对于程序集引用的每个模型，使用一个唯一值初始化 <see cref="T:System.Data.Objects.DataClasses.EdmSchemaAttribute" /> 类的一个新实例。</summary>
      <param name="assemblyGuid">一个字符串，表示模型在程序集中的唯一 GUID 值。</param>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmTypeAttribute">
      <summary>特性的基类，这些特性定义如何将对象层中的类型映射到概念模型中的实体类型和复杂类型。</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmTypeAttribute.Name">
      <summary>概念架构中类型的名称，该类型映射到此特性所应用于的类。</summary>
      <returns>表示名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmTypeAttribute.NamespaceName">
      <summary>概念架构中映射到此类型的实体对象类型或复杂类型的命名空间名称。</summary>
      <returns>表示命名空间名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityCollection`1">
      <summary>表示关系“多”端的对象集合。</summary>
      <typeparam name="TEntity">集合的实体类型。</typeparam>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Add(`0)">
      <summary>将一个对象添加到集合中。</summary>
      <param name="entity">要添加到集合中的对象。 <paramref name="entity" /> 必须实现 <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entity " />为 null。</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Attach(System.Collections.Generic.IEnumerable{`0})">
      <summary>定义对象和相关对象集合在对象上下文中的关系。</summary>
      <param name="entities">对象上下文中与源对象相关的对象的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entities" /> 集合为 null。</exception>
      <exception cref="T:System.InvalidOperationException">源对象或 <paramref name="entities" /> 集合中的对象为 null 或者不处于 <see cref="F:System.Data.EntityState.Unchanged" /> 或 <see cref="F:System.Data.EntityState.Modified" /> 状态。 - 或 - 关系不能基于 EDM 元数据定义。 这会在概念性架构中的关联不支持两种类型间的关系时发生。</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Attach(`0)">
      <summary>定义两个附加对象在对象上下文中的关系。</summary>
      <param name="entity">要附加的对象。</param>
      <exception cref="T:System.ArgumentNullException">在 <paramref name="entity" /> 为 null 时。</exception>
      <exception cref="T:System.InvalidOperationException">当 <paramref name="entity" /> 无法与源对象关联时。 这会在概念性架构中的关联不支持两种类型间的关系时发生。 - 或 - 当任一对象为 null 或者不处于 <see cref="F:System.Data.EntityState.Unchanged" /> 或 <see cref="F:System.Data.EntityState.Modified" /> 状态时。</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Clear">
      <summary>从集合中移除所有实体。</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Contains(`0)">
      <summary>确定特定对象是否存在于集合中。</summary>
      <returns>如果在 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 中找到该对象，则为 true；否则为 false。</returns>
      <param name="entity">要在 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 中定位的对象。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.CopyTo(`0[],System.Int32)">
      <summary>从目标数组的指定索引处开始，将集合中的所有内容复制到该数组中。</summary>
      <param name="array">要复制到的数组。</param>
      <param name="arrayIndex">复制开始时所在的数组中的从零开始的索引。</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityCollection`1.Count">
      <summary>获取集合中包含的对象数。</summary>
      <returns>
        <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 中包含的元素数。</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.CreateSourceQuery">
      <summary>返回一个对象查询，该查询在执行时，返回的一组对象与当前集合中存在的对象相同。</summary>
      <returns>表示实体集合的 <see cref="T:System.Data.Objects.ObjectQuery`1" />。</returns>
      <exception cref="T:System.InvalidOperationException">当对象处于 <see cref="F:System.Data.EntityState.Added" /> 状态时。 - 或 - 当对象处于 <see cref="F:System.Data.EntityState.Detached" /> 状态并且 <see cref="T:System.Data.Objects.MergeOption" /> 不为 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 时。</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.GetEnumerator">
      <summary>返回一个枚举器，用于循环访问集合中的对象。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" />，它对由 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 缓存的值集进行循环访问。</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityCollection`1.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 是否为只读。</summary>
      <returns>始终返回 false。</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Load(System.Data.Objects.MergeOption)">
      <summary>使用指定的合并选项将相关对象加载到集合中。</summary>
      <param name="mergeOption">指定应如何合并此集合中的对象和针对同一 <see cref="T:System.Data.Objects.ObjectContext" /> 的早期查询中可能已返回的对象。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.OnCollectionDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>在内部使用，用于反序列化实体对象。</summary>
      <param name="context">流上下文。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>在内部使用，用于序列化实体对象。</summary>
      <param name="context">流上下文。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Remove(`0)">
      <summary>从集合中移除对象，将关系标记为待删除。</summary>
      <returns>如果成功移除了该项，则为 true；否则为 false。</returns>
      <param name="entity">要从集合中移除的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entity" /> 对象为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name=" entity " /> 对象没有附加到同一对象上下文。 - 或 - <paramref name="entity " /> 对象没有有效的关系管理器。</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个枚举器，用于循环访问 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 缓存的值集。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" />，它对由 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 缓存的值集进行循环访问。</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>获取一个值，该值指示相关实体集合是否包含集合对象。</summary>
      <returns>此属性始终返回 false，因为 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 包含对象，但不包含集合。</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#GetList">
      <summary>以 <see cref="T:System.Collections.IList" /> 形式返回一个集合，用于数据绑定。</summary>
      <returns>实体对象的 <see cref="T:System.Collections.IList" />。</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityObject">
      <summary>实体数据模型工具生成的实体类型的基类。</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.#ctor">
      <summary>初始化 <see cref="T:System.Data.Objects.DataClasses.EntityObject" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityObject.EntityKey">
      <summary>获取或设置此对象的键。</summary>
      <returns>此对象的 <see cref="T:System.Data.EntityKey" />。</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityObject.EntityState">
      <summary>获取对象的实体状态。</summary>
      <returns>此对象的 <see cref="T:System.Data.EntityState" />。</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.ReportPropertyChanged(System.String)">
      <summary>通知更改跟踪器，属性已更改。</summary>
      <param name="property">已更改属性的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.ReportPropertyChanging(System.String)">
      <summary>通知更改跟踪器，有属性更改挂起。</summary>
      <param name="property">将要更改的属性的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.System#Data#Objects#DataClasses#IEntityWithChangeTracker#SetChangeTracker(System.Data.Objects.DataClasses.IEntityChangeTracker)">
      <summary>指定用于报告属性更改的 <see cref="T:System.Data.Objects.DataClasses.IEntityChangeTracker" /> 的实例。</summary>
      <param name="changeTracker">对用于报告属性更改的更改跟踪器的引用。</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityObject.System#Data#Objects#DataClasses#IEntityWithRelationships#RelationshipManager">
      <summary>获取此对象使用的关系管理器。</summary>
      <returns>此对象使用的 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />。</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityReference">
      <summary>为 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 实现非通用功能的基类。</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityReference.EntityKey">
      <summary>返回相关对象的键。</summary>
      <returns>一个 <see cref="T:System.Data.EntityKey" />，表示相关对象的键。</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityReference`1">
      <summary>表示关联中重数为零或一的相关端。</summary>
      <typeparam name="TEntity">引用的实体类型。</typeparam>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.#ctor">
      <summary>创建 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 的一个新实例。</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.Attach(`0)">
      <summary>创建两个对象在对象上下文中的多对一或一对一关系。</summary>
      <param name="entity">要附加的对象。</param>
      <exception cref="T:System.ArgumentNullException">在 <paramref name="entity" /> 为 null 时。</exception>
      <exception cref="T:System.InvalidOperationException">当 <paramref name="entity" /> 无法与当前相关端关联时。 这会在概念性架构中的关联不支持两种类型间的关系时发生。</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.CreateSourceQuery">
      <summary>创建一个返回相关对象的等效对象查询。</summary>
      <returns>一个 <see cref="T:System.Data.Objects.ObjectQuery`1" />，它返回相关对象。</returns>
      <exception cref="T:System.InvalidOperationException">当对象处于 <see cref="F:System.Data.EntityState.Added" /> 状态时。 - 或 - 当对象处于 <see cref="F:System.Data.EntityState.Detached" /> 状态并且 <see cref="P:System.Data.Objects.ObjectQuery.MergeOption" /> 不为 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 时。</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.Load(System.Data.Objects.MergeOption)">
      <summary>使用指定的合并选项为此 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 加载相关对象。</summary>
      <param name="mergeOption">指定当 <see cref="T:System.Data.Objects.ObjectContext" /> 中已存在该对象时，应如何返回它。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 的源为 null。 - 或 - 查询返回了多个相关端。 - 或 - 查询返回零个相关端，而预期应该有一个相关端。</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.OnRefDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>此方法在内部使用，用于序列化相关实体对象。</summary>
      <param name="context">序列化的流。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>此方法在内部使用，用于序列化相关实体对象。</summary>
      <param name="context">序列化的流。</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityReference`1.Value">
      <summary>获取或设置此 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 返回的相关对象。</summary>
      <returns>此 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 返回的对象。</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityChangeTracker">
      <summary>定义对象服务用于跟踪对象属性更改的功能。</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>通知更改跟踪器，某个复杂类型的属性已更改。</summary>
      <param name="entityMemberName">实体类型已更改的复杂属性的名称。</param>
      <param name="complexObject">包含已更改属性的复杂类型。</param>
      <param name="complexObjectMemberName">复杂类型上已更改属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>通知更改跟踪器，复杂属性有挂起的更改。</summary>
      <param name="entityMemberName">要更改的顶级实体属性的名称。</param>
      <param name="complexObject">包含要更改的属性的复杂类型。</param>
      <param name="complexObjectMemberName">复杂类型上要更改的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanged(System.String)">
      <summary>通知更改跟踪器，某个实体类型的属性已更改。</summary>
      <param name="entityMemberName">已更改的属性名。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanging(System.String)">
      <summary>通知更改跟踪器，某个实体类型的属性有挂起的更改。</summary>
      <param name="entityMemberName">要更改的属性的名称。</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityState">
      <summary>获取所跟踪对象的当前状态。</summary>
      <returns>一个 <see cref="T:System.Data.EntityState" />，表示所跟踪对象的状态。 有关更多信息，请参见标识解析、状态管理和更改跟踪（实体框架）和跟踪 POCO 实体中的更改（实体框架）。</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker">
      <summary>定义实现更改跟踪的实体类型。</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityWithChangeTracker.SetChangeTracker(System.Data.Objects.DataClasses.IEntityChangeTracker)">
      <summary>获取或设置用于报告更改的 <see cref="T:System.Data.Objects.DataClasses.IEntityChangeTracker" />。</summary>
      <param name="changeTracker">用于报告更改的 <see cref="T:System.Data.Objects.DataClasses.IEntityChangeTracker" />。</param>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityWithKey">
      <summary>定义公开实体键的实体类型。</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IEntityWithKey.EntityKey">
      <summary>为实现此接口的实体类型的实例获取或设置 <see cref="T:System.Data.EntityKey" />。</summary>
      <returns>实现此接口的实体类型实例的 <see cref="T:System.Data.EntityKey" />。</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityWithRelationships">
      <summary>定义与一个或多个其他实体类型具有关系的实体类型。</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IEntityWithRelationships.RelationshipManager">
      <summary>返回关系管理器，该管理器管理实体类型实例的关系。</summary>
      <returns>此实体的 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />。</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IRelatedEnd">
      <summary>定义关系的端。</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>将对象添加到相关端。</summary>
      <param name="entity">要添加到集合中的对象。 <paramref name="entity" /> 必须实现 <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Object)">
      <summary>将对象添加到相关端。</summary>
      <param name="entity">要添加到集合中的对象。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>定义两个附加对象之间的关系。</summary>
      <param name="entity">要附加的对象。 <paramref name="entity" /> 必须实现 <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Object)">
      <summary>定义两个附加对象之间的关系。</summary>
      <param name="entity">要附加的对象。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery">
      <summary>返回一个 <see cref="T:System.Collections.IEnumerable" />，它表示属于相关端的对象。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerable" />，它表示属于相关端的对象。</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.GetEnumerator">
      <summary>返回一个 <see cref="T:System.Collections.IEnumerator" />，它循环访问相关对象的集合。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" />，它循环访问相关对象的集合。</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded">
      <summary>获取一个值，该值指示是否已加载所有相关对象。</summary>
      <returns>如果相关端包含数据库中的所有相关实体，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Load">
      <summary>使用默认合并选项将一个或多个相关对象加载到此相关端中。</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Load(System.Data.Objects.MergeOption)">
      <summary>使用指定合并选项将一个或多个相关对象加载到相关端中。</summary>
      <param name="mergeOption">将对象合并到现有 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 中时，要使用的 <see cref="T:System.Data.Objects.MergeOption" />。</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.RelationshipName">
      <summary>获取此相关端所参与的关系的名称。</summary>
      <returns>此 <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" /> 参与的关系的名称。 此关系名称不由命名空间进行限定。</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.RelationshipSet">
      <summary>返回对相关端元数据的引用。</summary>
      <returns>包含关系一端的元数据的 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>从相关端处的对象集合中移除一个对象。</summary>
      <returns>如果成功移除 <paramref name="entity" />，则为 true；如果 <paramref name="entity" /> 不是 <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" /> 的一部分，则为 false。</returns>
      <param name="entity">要从集合中移除的对象。 <paramref name="entity" /> 必须实现 <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Object)">
      <summary>从相关端处的对象集合中移除一个对象。</summary>
      <returns>如果成功移除 <paramref name="entity" />，则为 true；如果 <paramref name="entity" /> 不是 <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" /> 的一部分，则为 false。</returns>
      <param name="entity">要从集合中移除的对象。</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName">
      <summary>获取关系源端处的角色名称。</summary>
      <returns>关系源端处的角色名称。</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName">
      <summary>获取关系目标端处的角色名称。</summary>
      <returns>关系目标端处的角色名称。</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.RelatedEnd">
      <summary>表示为相关端实现常用功能的基类。</summary>
    </member>
    <member name="E:System.Data.Objects.DataClasses.RelatedEnd.AssociationChanged">
      <summary>对相关端进行更改时发生。</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.GetEnumerator">
      <summary>返回一个 <see cref="T:System.Collections.IEnumerator" />，它循环访问相关对象的集合。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" />，它循环访问相关对象的集合。</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded">
      <summary>获取一个值，该值指示是否已加载所有相关对象。</summary>
      <returns>如果相关端包含数据库中的所有相关对象，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.Load">
      <summary>在派生类中重写时，使用默认合并选项将一个或多个相关对象加载到相关端中。</summary>
      <exception cref="T:System.InvalidOperationException">使用 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 查询来检索源对象并且 <see cref="T:System.Data.Objects.MergeOption" /> 不是 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 或相关对象已经加载时。 - 或 - 源对象未附加到 <see cref="T:System.Data.Objects.ObjectContext" /> 时。 - 或 - 正在跟踪源对象但其处于 <see cref="F:System.Data.EntityState.Added" /> 或 <see cref="F:System.Data.EntityState.Deleted" /> 状态，或者用于 <see cref="M:System.Data.Objects.DataClasses.RelatedEnd.Load" /> 的 <see cref="T:System.Data.Objects.MergeOption" /> 为 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 时。</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.Load(System.Data.Objects.MergeOption)">
      <summary>在派生类中重写时，使用指定合并选项从相关端加载一个或多个对象。</summary>
      <param name="mergeOption">将对象合并到现有 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 中时，要使用的 <see cref="T:System.Data.Objects.MergeOption" />。</param>
      <exception cref="T:System.InvalidOperationException">使用 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 查询来检索源对象并且 <see cref="T:System.Data.Objects.MergeOption" /> 不是 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 或相关对象已经加载时。 - 或 - 源对象未附加到 <see cref="T:System.Data.Objects.ObjectContext" /> 时。 - 或 - 正在跟踪源对象但其处于 <see cref="F:System.Data.EntityState.Added" /> 或 <see cref="F:System.Data.EntityState.Deleted" /> 状态，或者用于 <see cref="M:System.Data.Objects.DataClasses.RelatedEnd.Load" /> 的 <see cref="T:System.Data.Objects.MergeOption" /> 为 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 时。</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>在内部使用，用于反序列化实体对象与 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> 实例。</summary>
      <param name="context">序列化的流。</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.RelationshipName">
      <summary>获取此相关端所参与的关系的名称。</summary>
      <returns>此 <see cref="T:System.Data.Objects.DataClasses.RelatedEnd" /> 所参与的关系的名称。 此关系名称不由命名空间进行限定。</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.RelationshipSet">
      <summary>获取对相关端元数据的引用。</summary>
      <returns>包含关系一端的元数据的 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.SourceRoleName">
      <summary>获取关系源端处的角色名称。</summary>
      <returns>表示角色名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Add(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>将对象添加到相关端。</summary>
      <param name="entity">要添加到集合中的对象。 此对象必须实现 <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" /> 接口。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Add(System.Object)">
      <summary>将对象添加到相关端。</summary>
      <param name="entity">要添加到相关端的实体实例。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>在相关端处附加对象。</summary>
      <param name="entity">要附加的对象。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Attach(System.Object)">
      <summary>将对象附加到相关端。</summary>
      <param name="entity">要附加到相关端的实体实例。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#CreateSourceQuery">
      <summary>返回一个 <see cref="T:System.Collections.IEnumerable" />，它表示属于相关端的对象。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerable" />，它表示属于相关端的对象。</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>从相关端处的集合中移除一个对象。</summary>
      <returns>指示对象是否已移除的值。</returns>
      <param name="entity">要从集合中移除的实体实例。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Remove(System.Object)">
      <summary>如果某个对象是相关端的一部分，则从该相关端中移除该对象。</summary>
      <returns>如果已成功移除实体，则为 true；否则为 false。</returns>
      <param name="entity">要从相关端中移除的实体实例。</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.TargetRoleName">
      <summary>获取关系目标端处的角色名称。</summary>
      <returns>表示角色名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.RelationshipKind">
      <summary>枚举两个或两个以上实体之间的关系的类型。</summary>
    </member>
    <member name="F:System.Data.Objects.DataClasses.RelationshipKind.Association">
      <summary>关系由概念模型中的关联定义。 有关详细信息，请参阅 关联元素 (CSDL)。</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.RelationshipManager">
      <summary>用于跟踪对象在对象上下文中的关系。</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.Create(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>创建一个新 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> 对象。</summary>
      <returns>请求的 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />。</returns>
      <param name="owner">对调用此方法的实体的引用。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetAllRelatedEnds">
      <summary>返回关系管理器管理的所有相关端的枚举。</summary>
      <returns>实现 <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" /> 的对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。 如果尚未填充关系，则返回空枚举。</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetRelatedCollection``1(System.String,System.String)">
      <summary>获取具有指定关系名称和目标角色名称的相关对象的 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />。</summary>
      <returns>相关对象的 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />。</returns>
      <param name="relationshipName">要导航的关系的名称。 此关系名称不由命名空间进行限定。</param>
      <param name="targetRoleName">要导航的目标角色的名称。 指示在关系中导航的方向。</param>
      <typeparam name="TTargetEntity">返回的 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">指定角色返回 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 而不是 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />。</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetRelatedEnd(System.String,System.String)">
      <summary>为关系中的指定目标角色返回正确类型的 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 或 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />。</summary>
      <returns>表示已检索的 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 或 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 的 <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" />。</returns>
      <param name="relationshipName">在其中定义 <paramref name="targetRoleName" /> 的关系的名称。 此关系名称不由命名空间进行限定。</param>
      <param name="targetRoleName">用于检索 <paramref name="relationshipName" /> 的另一端的目标角色。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipName" /> 或 <paramref name="targetRoleName" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">源类型不匹配所有者类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="targetRoleName" /> 无效。 - 或 - 无法在元数据中找到关系类型。</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetRelatedReference``1(System.String,System.String)">
      <summary>使用关系名称和目标角色名称的指定组合，获取相关对象的 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />。</summary>
      <returns>相关对象的 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />。</returns>
      <param name="relationshipName">要导航的关系的名称。 此关系名称不由命名空间进行限定。</param>
      <param name="targetRoleName">要导航的目标角色的名称。 指示在关系中导航的方向。</param>
      <typeparam name="TTargetEntity">返回的 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">指定角色返回 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 而不是 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />。</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.InitializeRelatedCollection``1(System.String,System.String,System.Data.Objects.DataClasses.EntityCollection{``0})">
      <summary>初始化使用默认构造函数创建的现有 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />。</summary>
      <param name="relationshipName">关系名。</param>
      <param name="targetRoleName">相关端的角色名称。</param>
      <param name="entityCollection">要初始化的 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />。</param>
      <typeparam name="TTargetEntity">要初始化的 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">提供的 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 已经初始化时。 - 或 - 关系管理器已经附加到 <see cref="T:System.Data.Objects.ObjectContext" /> 时。 - 或 - 关系管理器已经包含具有此名称和目标角色的关系时。</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.InitializeRelatedReference``1(System.String,System.String,System.Data.Objects.DataClasses.EntityReference{``0})">
      <summary>初始化使用默认构造函数创建的现有 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />。</summary>
      <param name="relationshipName">关系名。</param>
      <param name="targetRoleName">相关端的角色名称。</param>
      <param name="entityReference">要初始化的 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />。</param>
      <typeparam name="TTargetEntity">要初始化的 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">提供的 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 已经初始化时。 - 或 - 关系管理器已经附加到 <see cref="T:System.Data.Objects.ObjectContext" /> 时。 - 或 - 关系管理器已经包含具有此名称和目标角色的关系时。</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>在内部使用，用于反序列化实体对象与 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> 实例。</summary>
      <param name="context">序列化的流。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>由对象服务调用，用来准备 <see cref="T:System.Data.EntityKey" />，以便以序列化的关系进行二进制序列化。</summary>
      <param name="context">描述给定的序列化流的源和目标，并提供一个由调用方定义的附加上下文。</param>
    </member>
    <member name="T:System.Data.Objects.DataClasses.StructuralObject">
      <summary>表示包含数据对象所需的通用方法的类。</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.#ctor">
      <summary>初始化 <see cref="T:System.Data.Objects.DataClasses.StructuralObject" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.BinaryEquals(System.Byte[],System.Byte[])">
      <summary>确定指定的字节数组是否包含相等的值。</summary>
      <returns>如果两个数组具有相同长度且包含相同字节值，或如果两个数组都为 null，则为 true；否则为 false。</returns>
      <param name="first">要比较的第一个字节数组值。</param>
      <param name="second">要比较的第二个字节数组。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.DefaultDateTimeValue">
      <summary>返回数据源支持的最小日期时间值。</summary>
      <returns>一个 <see cref="T:System.DateTime" /> 值，表示数据源支持的最小日期时间值。</returns>
    </member>
    <member name="F:System.Data.Objects.DataClasses.StructuralObject.EntityKeyPropertyName">
      <summary>此常量名称用于跟踪。</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.GetValidValue(System.Byte[])">
      <summary>返回当前字节值的副本。</summary>
      <returns>当前 <see cref="T:System.Byte" /> 值的副本。</returns>
      <param name="currentValue">当前的字节数组值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.GetValidValue``1(``0,System.String,System.Boolean,System.Boolean)">
      <summary>返回指定属性的复杂类型。</summary>
      <returns>属性的复杂类型对象。</returns>
      <param name="currentValue">从复杂对象继承的复杂对象。</param>
      <param name="property">复杂属性的名称，该复杂属性为复杂对象。</param>
      <param name="isNullable">指示该类型是否支持 null 值。</param>
      <param name="isInitialized">指示是否初始化该类型。</param>
      <typeparam name="T">要请求的复杂对象的类型。</typeparam>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.OnPropertyChanged(System.String)">
      <summary>引发 <see cref="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanged" /> 事件。</summary>
      <param name="property">已更改属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.OnPropertyChanging(System.String)">
      <summary>引发 <see cref="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanging" /> 事件。</summary>
      <param name="property">要更改的属性的名称。</param>
    </member>
    <member name="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanged">
      <summary>在更改属性值时发生。</summary>
    </member>
    <member name="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanging">
      <summary>在属性值更改挂起时发生。</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.ReportPropertyChanged(System.String)">
      <summary>引发用于报告属性已更改的事件。</summary>
      <param name="property">已更改属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.ReportPropertyChanging(System.String)">
      <summary>引发用于报告属性更改挂起的事件。</summary>
      <param name="property">将要更改的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean)">
      <summary>确保正设置为属性的 <see cref="T:System.Boolean" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.Boolean" /> 值。</returns>
      <param name="value">布尔值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean,System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.Boolean" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.Boolean" /> 值。</returns>
      <param name="value">布尔值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte)">
      <summary>确保正设置为属性的 <see cref="T:System.Byte" /> 值有效。</summary>
      <returns>设置的 <see cref="T:System.Byte" /> 值。</returns>
      <param name="value">要验证的值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte,System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.Byte" /> 值有效。</summary>
      <returns>一个已设置的 <see cref="T:System.Byte" />。</returns>
      <param name="value">
        <see cref="T:System.Byte" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean)">
      <summary>确保正设置为属性的 <see cref="T:System.Byte[]" /> 值有效。</summary>
      <returns>要设置的 <see cref="T:System.Byte" /> 值。</returns>
      <param name="value">被设置的值。</param>
      <param name="isNullable">指示属性是否为 null。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean,System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.Byte[]" /> 值有效。</summary>
      <returns>正验证的 <see cref="T:System.Byte" /> 值。</returns>
      <param name="value">值传递到属性设置。</param>
      <param name="isNullable">指示此属性是否可为 null 的标志。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
      <exception cref="T:System.Data.ConstraintException">如果不可为空的值为 null。</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Spatial.DbGeography,System.Boolean)">
      <summary>验证属性是否不为空，如果是，是否会引发异常。</summary>
      <returns>正设置的 <see cref="T:System.Data.Spatial.DbGeography" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Data.Spatial.DbGeography" />要检查的值。</param>
      <param name="isNullable">指示此属性是否可为 null 的标志。</param>
      <exception cref="T:System.Data.ConstraintException">不可为空的属性的值为 null。</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Spatial.DbGeography,System.Boolean,System.String)">
      <summary>验证属性是否不为空，如果是，是否会引发异常。</summary>
      <returns>正设置的 <see cref="T:System.Data.Spatial.DbGeography" /> 值。</returns>
      <param name="value">待检查的 <see cref="T:System.Data.Spatial.DbGeography" /> 值。</param>
      <param name="isNullable">指示此属性是否可为 null 的标志。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
      <exception cref="T:System.Data.ConstraintException">不可为空的属性的值为 null。</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Spatial.DbGeometry,System.Boolean)">
      <summary>验证属性是否不为空，如果是，是否会引发异常。</summary>
      <returns>正设置的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。</returns>
      <param name="value">待检查的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。</param>
      <param name="isNullable">指示此属性是否可为 null 的标志。</param>
      <exception cref="T:System.Data.ConstraintException">不可为空的属性的值为 null。</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Spatial.DbGeometry,System.Boolean,System.String)">
      <summary>验证属性是否不为空，如果是，是否会引发异常。</summary>
      <returns>正设置的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Data.Spatial.DbGeometry" />要检查的值。</param>
      <param name="isNullable">指示此属性是否可为 null 的标志。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
      <exception cref="T:System.Data.ConstraintException">不可为空的属性的值为 null。</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime)">
      <summary>确保正设置为属性的 <see cref="T:System.DateTime" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.DateTime" /> 值。</returns>
      <param name="value">
        <see cref="T:System.DateTime" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime,System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.DateTime" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.DateTime" /> 值。</returns>
      <param name="value">
        <see cref="T:System.DateTime" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset)">
      <summary>确保正设置为属性的 <see cref="T:System.DateTimeOffset" /> 值有效。</summary>
      <returns>要设置的 <see cref="T:System.DateTimeOffset" /> 值。</returns>
      <param name="value">
        <see cref="T:System.DateTimeOffset" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset,System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.DateTimeOffset" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.DateTimeOffset" /> 值。</returns>
      <param name="value">
        <see cref="T:System.DateTimeOffset" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal)">
      <summary>确保正设置为属性的 <see cref="T:System.Decimal" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.Decimal" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal,System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.Decimal" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.Decimal" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Double)">
      <summary>确保正设置为属性的 <see cref="T:System.Double" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.Double" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Double" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Double,System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.Double" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.Double" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Double" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid)">
      <summary>确保正设置为属性的 <see cref="T:System.Guid" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.Guid" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Guid" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid,System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.Guid" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.Guid" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Guid" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16)">
      <summary>确保正设置为属性的 <see cref="T:System.Int16" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.Int16" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Int16" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16,System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.Int16" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.Int16" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Int16" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32)">
      <summary>确保正设置为属性的 <see cref="T:System.Int32" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.Int32" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Int32" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32,System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.Int32" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.Int32" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Int32" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64)">
      <summary>确保正设置为属性的 <see cref="T:System.Int64" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.Int64" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Int64" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64,System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.Int64" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.Int64" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Int64" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean})">
      <summary>确保正设置为属性的 <see cref="T:System.Boolean" /> 值有效。</summary>
      <returns>被设置的可以为 null 的 <see cref="T:System.Boolean" /> 值。</returns>
      <param name="value">可以为 Null 的 <see cref="T:System.Boolean" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean},System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.Boolean" /> 值有效。</summary>
      <returns>被设置的可以为 null 的 <see cref="T:System.Boolean" /> 值。</returns>
      <param name="value">可以为 Null 的 <see cref="T:System.Boolean" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte})">
      <summary>确保正设置为属性的 <see cref="T:System.Byte" /> 值有效。</summary>
      <returns>正在设置的可以为 Null 的 <see cref="T:System.Byte" /> 值。</returns>
      <param name="value">可以为 Null 的 <see cref="T:System.Byte" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte},System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.Byte" /> 值有效。</summary>
      <returns>正在设置的可以为 Null 的 <see cref="T:System.Byte" /> 值。</returns>
      <param name="value">可以为 Null 的 <see cref="T:System.Byte" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime})">
      <summary>确保正设置为属性的 <see cref="T:System.DateTime" /> 值有效。</summary>
      <returns>正在设置的可以为 Null 的 <see cref="T:System.DateTime" /> 值。</returns>
      <param name="value">可以为 Null 的 <see cref="T:System.DateTime" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime},System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.DateTime" /> 值有效。</summary>
      <returns>正在设置的可以为 Null 的 <see cref="T:System.DateTime" /> 值。</returns>
      <param name="value">可以为 Null 的 <see cref="T:System.DateTime" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset})">
      <summary>确保正设置为属性的 <see cref="T:System.DateTimeOffset" /> 值有效。</summary>
      <returns>正在设置的可以为 Null 的 <see cref="T:System.DateTimeOffset" /> 值。</returns>
      <param name="value">可以为 Null 的 <see cref="T:System.DateTimeOffset" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset},System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.DateTimeOffset" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.DateTimeOffset" /> 值。</returns>
      <param name="value">
        <see cref="T:System.DateTimeOffset" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal})">
      <summary>确保正设置为属性的 <see cref="T:System.Decimal" /> 值有效。</summary>
      <returns>正在设置的可以为 Null 的 <see cref="T:System.Decimal" /> 值。</returns>
      <param name="value">可以为 Null 的 <see cref="T:System.Decimal" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal},System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.Decimal" /> 值有效。</summary>
      <returns>正在设置的可以为 Null 的 <see cref="T:System.Decimal" /> 值。</returns>
      <param name="value">可以为 Null 的 <see cref="T:System.Decimal" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double})">
      <summary>确保正设置为属性的 <see cref="T:System.Double" /> 值有效。</summary>
      <returns>正在设置的可以为 Null 的 <see cref="T:System.Double" /> 值。</returns>
      <param name="value">可以为 Null 的 <see cref="T:System.Double" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double},System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.Double" /> 值有效。</summary>
      <returns>正在设置的可以为 Null 的 <see cref="T:System.Double" /> 值。</returns>
      <param name="value">可以为 Null 的 <see cref="T:System.Double" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid})">
      <summary>确保正设置为属性的 <see cref="T:System.Guid" /> 值有效。</summary>
      <returns>正在设置的可以为 Null 的 <see cref="T:System.Guid" /> 值。</returns>
      <param name="value">可以为 Null 的 <see cref="T:System.Guid" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid},System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.Guid" /> 值有效。</summary>
      <returns>正在设置的可以为 Null 的 <see cref="T:System.Guid" /> 值。</returns>
      <param name="value">可以为 Null 的 <see cref="T:System.Guid" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16})">
      <summary>确保正设置为属性的 <see cref="T:System.Int16" /> 值有效。</summary>
      <returns>正在设置的可以为 Null 的 <see cref="T:System.Int16" /> 值。</returns>
      <param name="value">可以为 Null 的 <see cref="T:System.Int16" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16},System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.Int16" /> 值有效。</summary>
      <returns>正在设置的可以为 Null 的 <see cref="T:System.Int16" /> 值。</returns>
      <param name="value">可以为 Null 的 <see cref="T:System.Int16" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32})">
      <summary>确保正设置为属性的 <see cref="T:System.Int32" /> 值有效。</summary>
      <returns>正在设置的可以为 Null 的 <see cref="T:System.Int32" /> 值。</returns>
      <param name="value">可以为 Null 的 <see cref="T:System.Int32" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32},System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.Int32" /> 值有效。</summary>
      <returns>正在设置的可以为 Null 的 <see cref="T:System.Int32" /> 值。</returns>
      <param name="value">可以为 Null 的 <see cref="T:System.Int32" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64})">
      <summary>确保正设置为属性的 <see cref="T:System.Int64" /> 值有效。</summary>
      <returns>正在设置的可以为 Null 的 <see cref="T:System.Int64" /> 值。</returns>
      <param name="value">可以为 Null 的 <see cref="T:System.Int64" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64},System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.Int64" /> 值有效。</summary>
      <returns>正在设置的可以为 Null 的 <see cref="T:System.Int64" /> 值。</returns>
      <param name="value">可以为 Null 的 <see cref="T:System.Int64" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte})">
      <summary>确保正设置为属性的 <see cref="T:System.SByte" /> 值有效。</summary>
      <returns>正在设置的可以为 Null 的 <see cref="T:System.SByte" /> 值。</returns>
      <param name="value">可以为 Null 的 <see cref="T:System.SByte" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte},System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.SByte" /> 值有效。</summary>
      <returns>正在设置的可以为 Null 的 <see cref="T:System.SByte" /> 值。</returns>
      <param name="value">可以为 Null 的 <see cref="T:System.SByte" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single})">
      <summary>确保正设置为属性的 <see cref="T:System.Single" /> 值有效。</summary>
      <returns>正在设置的可以为 Null 的 <see cref="T:System.Single" /> 值。</returns>
      <param name="value">可以为 Null 的 <see cref="T:System.Single" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single},System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.Single" /> 值有效。</summary>
      <returns>正在设置的可以为 Null 的 <see cref="T:System.Single" /> 值。</returns>
      <param name="value">可以为 Null 的 <see cref="T:System.Single" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan})">
      <summary>确保正设置为属性的 <see cref="T:System.TimeSpan" /> 值有效。</summary>
      <returns>正在设置的可以为 Null 的 <see cref="T:System.TimeSpan" /> 值。</returns>
      <param name="value">可以为 Null 的 <see cref="T:System.TimeSpan" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan},System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.TimeSpan" /> 值有效。</summary>
      <returns>正在设置的可以为 Null 的 <see cref="T:System.TimeSpan" /> 值。</returns>
      <param name="value">可以为 Null 的 <see cref="T:System.TimeSpan" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16})">
      <summary>确保正设置为属性的 UInt16 值有效。</summary>
      <returns>被设置的可以为 null 的 UInt16 值。</returns>
      <param name="value">可以为 null 的 UInt16 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16},System.String)">
      <summary>确保正设置为属性的 UInt16 值有效。</summary>
      <returns>被设置的可以为 null 的 UInt16 值。</returns>
      <param name="value">可以为 null 的 UInt16 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32})">
      <summary>确保正设置为属性的 UInt32 值有效。</summary>
      <returns>被设置的可以为 null 的 UInt32 值。</returns>
      <param name="value">可以为 null 的 UInt32 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32},System.String)">
      <summary>确保正设置为属性的 UInt32 值有效。</summary>
      <returns>被设置的可以为 null 的 UInt32 值。</returns>
      <param name="value">可以为 null 的 UInt32 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64})">
      <summary>确保正设置为属性的 <see cref="T:System.UInt64" /> 值有效。</summary>
      <returns>被设置的可以为 null 的 UInt64 值。</returns>
      <param name="value">可以为 null 的 UInt64 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64},System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.UInt64" /> 值有效。</summary>
      <returns>被设置的可以为 null 的 UInt64 值。</returns>
      <param name="value">可以为 null 的 UInt64 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte)">
      <summary>确保正设置为属性的 <see cref="T:System.SByte" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.SByte" /> 值。</returns>
      <param name="value">
        <see cref="T:System.SByte" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte,System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.SByte" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.SByte" /> 值。</returns>
      <param name="value">
        <see cref="T:System.SByte" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Single)">
      <summary>确保正设置为属性的单值有效。</summary>
      <returns>正设置的 <see cref="T:System.Single" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Single" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Single,System.String)">
      <summary>确保正设置为属性的单值有效。</summary>
      <returns>正设置的 <see cref="T:System.Single" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Single" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean)">
      <summary>验证属性是否不为空，如果是，是否会引发异常。</summary>
      <returns>验证的 <see cref="T:System.String" /> 值。</returns>
      <param name="value">待检查的字符串值。</param>
      <param name="isNullable">指示此属性是否可为 null 的标志。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean,System.String)">
      <summary>验证属性是否不为空，如果是，是否会引发异常。</summary>
      <returns>有效属性。</returns>
      <param name="value">待检查的字符串值。</param>
      <param name="isNullable">指示此属性是否可为 null 的标志。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
      <exception cref="T:System.Data.ConstraintException">字符串值是用于不可为空字符串的 null。</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan)">
      <summary>确保正设置为属性的 <see cref="T:System.TimeSpan" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.TimeSpan" /> 值。</returns>
      <param name="value">
        <see cref="T:System.TimeSpan" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan,System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.TimeSpan" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.TimeSpan" /> 值。</returns>
      <param name="value">
        <see cref="T:System.TimeSpan" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16)">
      <summary>确保正设置为属性的 <see cref="T:System.UInt16" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.UInt16" /> 值。</returns>
      <param name="value">
        <see cref="T:System.UInt16" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16,System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.UInt16" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.UInt16" /> 值。</returns>
      <param name="value">
        <see cref="T:System.UInt16" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32)">
      <summary>确保正设置为属性的 <see cref="T:System.UInt32" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.UInt32" /> 值。</returns>
      <param name="value">
        <see cref="T:System.UInt32" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32,System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.UInt32" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.UInt32" /> 值。</returns>
      <param name="value">
        <see cref="T:System.UInt32" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64)">
      <summary>确保正设置为属性的 <see cref="T:System.UInt64" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.UInt64" /> 值。</returns>
      <param name="value">
        <see cref="T:System.UInt64" /> 值。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64,System.String)">
      <summary>确保正设置为属性的 <see cref="T:System.UInt64" /> 值有效。</summary>
      <returns>正设置的 <see cref="T:System.UInt64" /> 值。</returns>
      <param name="value">
        <see cref="T:System.UInt64" /> 值。</param>
      <param name="propertyName">正在进行验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue``1(``0,``0,System.String)">
      <summary>设置指定属性的复杂对象。</summary>
      <returns>从复杂对象派生的复杂类型。</returns>
      <param name="oldValue">属性的原始复杂对象（如果有的话）。</param>
      <param name="newValue">要设置的复杂对象。</param>
      <param name="property">要设置为复杂对象的复杂属性。</param>
      <typeparam name="T">被替换的对象的类型。</typeparam>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.VerifyComplexObjectIsNotNull``1(``0,System.String)">
      <summary>验证复杂对象不为 null。</summary>
      <returns>要验证的复杂对象。</returns>
      <param name="complexObject">要验证的复杂对象。</param>
      <param name="propertyName">父对象上与 <paramref name="complexObject" /> 关联的复杂属性。</param>
      <typeparam name="TComplex">要验证的复杂对象的类型。</typeparam>
    </member>
    <member name="T:System.Data.Objects.SqlClient.SqlFunctions">
      <summary>提供在 LINQ to Entities 查询中，调用数据库中函数的公共语言运行时 (CLR) 方法。</summary>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Acos(System.Nullable{System.Decimal})">
      <summary>一个数学函数，该函数返回其余弦为指定数值的角（以弧度表示）。 此角称作反余弦。</summary>
      <returns>以弧度计量的角度。</returns>
      <param name="arg1">角的余弦。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Acos(System.Nullable{System.Double})">
      <summary>一个数学函数，该函数返回其余弦为指定数值的角（以弧度表示）。 此角称作反余弦。</summary>
      <returns>由输入余弦值定义的角，以弧度表示。</returns>
      <param name="arg1">角的余弦。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Ascii(System.String)">
      <summary>返回字符表达式中最左侧字符的 ASCII 代码值。</summary>
      <returns>输入字符串中第一个字符的 ASCII 代码。</returns>
      <param name="arg">一个有效的字符串。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Asin(System.Nullable{System.Decimal})">
      <summary>一个数学函数，该函数返回其正弦为指定数值的角（以弧度表示）。 此角称作反正弦。</summary>
      <returns>以弧度计量的角度。</returns>
      <param name="arg">角的正弦。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Asin(System.Nullable{System.Double})">
      <summary>一个数学函数，该函数返回其正弦为指定数值的角（以弧度表示）。 此角称作反正弦。</summary>
      <returns>以弧度计量的角度。</returns>
      <param name="arg">角的正弦。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan(System.Nullable{System.Decimal})">
      <summary>一个数学函数，该函数返回其正切为指定数值的角（以弧度表示）。 此角称作反正切。</summary>
      <returns>以弧度计量的角度。</returns>
      <param name="arg">角的正切。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan(System.Nullable{System.Double})">
      <summary>一个数学函数，该函数返回其正切为指定数值的角（以弧度表示）。 此角称作反正切。</summary>
      <returns>以弧度计量的角度。</returns>
      <param name="arg">角的正切。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan2(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>返回以弧度表示的正角，该角由正 x 轴和从原点到点 (x, y) 的射线构成，其中 x 和 y 是两个指定的数值。 传递给函数的第一个参数和第二参数分别为 y 值和 x 值。</summary>
      <returns>以弧度计量的角度。</returns>
      <param name="arg1">点的 y 坐标。</param>
      <param name="arg2">点的 x 坐标。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan2(System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>返回以弧度表示的正角，该角由正 x 轴和从原点到点 (x, y) 的射线构成，其中 x 和 y 是两个指定的数值。 传递给函数的第一个参数和第二参数分别为 y 值和 x 值。</summary>
      <returns>以弧度计量的角度。</returns>
      <param name="arg1">点的 y 坐标。</param>
      <param name="arg2">点的 x 坐标。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Char(System.Nullable{System.Int32})">
      <summary>返回与指定的整数 ASCII 值相对应的字符。</summary>
      <returns>与指定的 ASCII 值相对应的字符。</returns>
      <param name="arg">ASCII 代码。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.Byte[],System.Byte[])">
      <summary>返回在一个表达式中找到的另一个表达式的起始位置。</summary>
      <returns>如果在 <paramref name="toSearch" /> 中找到 <paramref name="target" />，则为其起始位置。</returns>
      <param name="toSearch">要在其中搜索的字符串表达式。</param>
      <param name="target">要查找的字符串表达式。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.Byte[],System.Byte[],System.Nullable{System.Int32})">
      <summary>返回在一个表达式中找到的另一个表达式的起始位置。</summary>
      <returns>如果在 <paramref name="toSearch" /> 中找到 <paramref name="target" />，则为其起始位置。</returns>
      <param name="toSearch">要在其中搜索的字符串表达式。</param>
      <param name="target">要查找的字符串表达式。</param>
      <param name="startLocation">
        <paramref name="toSearch" /> 中搜索开始处的字符位置。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.Byte[],System.Byte[],System.Nullable{System.Int64})">
      <summary>返回在一个表达式中找到的另一个表达式的起始位置。</summary>
      <returns>如果在 <paramref name="toSearch" /> 中找到 <paramref name="target" />，则为其起始位置。</returns>
      <param name="toSearch">要在其中搜索的字符串表达式。</param>
      <param name="target">要查找的字符串表达式。</param>
      <param name="startLocation">
        <paramref name="toSearch" /> 中搜索开始处的字符位置。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.String,System.String)">
      <summary>返回在一个表达式中找到的另一个表达式的起始位置。</summary>
      <returns>如果在 <paramref name="toSearch" /> 中找到 <paramref name="target" />，则为其起始位置。</returns>
      <param name="toSearch">要在其中搜索的字符串表达式。</param>
      <param name="target">要查找的字符串表达式。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.String,System.String,System.Nullable{System.Int32})">
      <summary>返回在一个表达式中找到的另一个表达式的起始位置。</summary>
      <returns>如果在 <paramref name="toSearch" /> 中找到 <paramref name="target" />，则为其起始位置。</returns>
      <param name="toSearch">要在其中搜索的字符串表达式。</param>
      <param name="target">要查找的字符串表达式。</param>
      <param name="startLocation">
        <paramref name="toSearch" /> 中搜索开始处的字符位置。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.String,System.String,System.Nullable{System.Int64})">
      <summary>返回在一个表达式中找到的另一个表达式的起始位置。</summary>
      <returns>如果在 <paramref name="toSearch" /> 中找到 <paramref name="target" />，则为表示其起始位置的 <see cref="T:System.Int64" /> 值的 <see cref="T:System.Nullable`1" />。</returns>
      <param name="toSearch">要在其中搜索的字符串表达式。</param>
      <param name="target">要查找的字符串表达式。</param>
      <param name="startLocation">
        <paramref name="toSearch" /> 中搜索开始处的字符位置。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Byte[])">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">为其计算校验和的字符数组。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Byte[],System.Byte[])">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">为其计算校验和的字符数组。</param>
      <param name="arg2">为其计算校验和的字符数组。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Byte[],System.Byte[],System.Byte[])">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">为其计算校验和的字符数组。</param>
      <param name="arg2">为其计算校验和的字符数组。</param>
      <param name="arg3">为其计算校验和的字符数组。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Boolean})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
      <param name="arg3">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTime})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
      <param name="arg3">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTimeOffset})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
      <param name="arg3">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Decimal})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
      <param name="arg3">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Double})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
      <param name="arg3">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Guid})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Guid},System.Nullable{System.Guid})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
      <param name="arg3">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.TimeSpan})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
      <param name="arg3">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.String)">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.String,System.String)">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.String,System.String,System.String)">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
      <param name="arg3">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.ChecksumAggregate(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>返回集合中各值的校验和。 null 值将忽略。</summary>
      <returns>基于输入集合计算出的校验和。</returns>
      <param name="arg">对其计算校验和的各值的集合。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.ChecksumAggregate(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>返回集合中各值的校验和。 null 值将忽略。</summary>
      <returns>基于输入集合计算出的校验和。</returns>
      <param name="arg">对其计算校验和的各值的集合。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cos(System.Nullable{System.Decimal})">
      <summary>返回指定表达式中指定角（以弧度表示）的三角余弦。</summary>
      <returns>指定角的三角余弦。</returns>
      <param name="arg">以弧度计量的角度。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cos(System.Nullable{System.Double})">
      <summary>返回指定表达式中指定角（以弧度表示）的三角余弦。</summary>
      <returns>指定角的三角余弦。</returns>
      <param name="arg">以弧度计量的角度。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cot(System.Nullable{System.Decimal})">
      <summary>一个数学函数，该函数返回指定角（以弧度表示）的三角余切。</summary>
      <returns>指定角的三角余切。</returns>
      <param name="arg">以弧度计量的角度。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cot(System.Nullable{System.Double})">
      <summary>一个数学函数，该函数返回指定角（以弧度表示）的三角余切。</summary>
      <returns>指定角的三角余切。</returns>
      <param name="arg">以弧度计量的角度。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CurrentTimestamp">
      <summary>返回当前日期和时间。</summary>
      <returns>当前日期和时间。</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CurrentUser">
      <summary>返回当前用户的名称。</summary>
      <returns>当前用户的名称。</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Byte[])">
      <summary>返回用于表示任意表达式的字节数。</summary>
      <returns>输入值中的字节数。</returns>
      <param name="arg">要检查其长度的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Boolean})">
      <summary>返回用于表示任意表达式的字节数。</summary>
      <returns>输入值中的字节数。</returns>
      <param name="arg">要检查其数据长度的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.DateTime})">
      <summary>返回用于表示任意表达式的字节数。</summary>
      <returns>输入值中的字节数。</returns>
      <param name="arg">要检查其数据长度的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.DateTimeOffset})">
      <summary>返回用于表示任意表达式的字节数。</summary>
      <returns>输入值中的字节数。</returns>
      <param name="arg">要检查其数据长度的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Decimal})">
      <summary>返回用于表示任意表达式的字节数。</summary>
      <returns>输入值中的字节数。</returns>
      <param name="arg">要检查其数据长度的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Double})">
      <summary>返回用于表示任意表达式的字节数。</summary>
      <returns>输入值中的字节数。</returns>
      <param name="arg">要检查其数据长度的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Guid})">
      <summary>返回用于表示任意表达式的字节数。</summary>
      <returns>输入值中的字节数。</returns>
      <param name="arg">要检查其数据长度的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.TimeSpan})">
      <summary>返回用于表示任意表达式的字节数。</summary>
      <returns>输入值中的字节数。</returns>
      <param name="arg">要检查其数据长度的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.String)">
      <summary>返回用于表示任意表达式的字节数。</summary>
      <returns>输入值中的字节数。</returns>
      <param name="arg">要检查其数据长度的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.DateTime})">
      <summary>向指定的日期添加间隔，以此返回新的 datetime 值。</summary>
      <returns>新的日期。</returns>
      <param name="datePartArg">要递增的日期部分。</param>
      <param name="number">用于按指定量递增日期的值。</param>
      <param name="date">要递增的日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.DateTimeOffset})">
      <summary>向指定的日期添加间隔，以此返回新的日期值。</summary>
      <returns>相对于协调世界时 (UTC) 的新时间点，以日期和时间来表示。</returns>
      <param name="datePartArg">要递增的日期部分。</param>
      <param name="number">用于按指定量递增日期的值。</param>
      <param name="dateTimeOffsetArg">要递增的日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.TimeSpan})">
      <summary>向指定的时间跨度添加间隔，以此返回新的时间跨度值。</summary>
      <returns>新的时间跨度。</returns>
      <param name="datePartArg">要递增的日期部分。</param>
      <param name="number">用于按指定量递增日期的值。</param>
      <param name="time">要递增的时间跨度。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.String)">
      <summary>向指定的日期添加间隔，以此返回新的 datetime 值。</summary>
      <returns>表示新日期的 <see cref="T:System.DateTime" /> 值的 <see cref="T:System.Nullable`1" />。</returns>
      <param name="datePartArg">要递增的日期部分。</param>
      <param name="number">用于按指定量递增日期的值。</param>
      <param name="date">要递增的日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>返回所指定开始日期和结束日期之间的指定 datepart 边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTimeOffset})">
      <summary>返回所指定开始日期和结束日期之间的指定 datepart 边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan})">
      <summary>返回所指定开始日期和结束日期之间的指定 datepart 边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.String)">
      <summary>返回所指定开始日期和结束日期之间的指定 datepart 边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTime})">
      <summary>返回所指定开始日期和结束日期之间的指定 datepart 边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>返回所指定开始日期和结束日期之间的指定 datepart 边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.TimeSpan})">
      <summary>返回所指定开始日期和结束日期之间的指定 datepart 边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.String)">
      <summary>返回所指定开始日期和结束日期之间的指定 datepart 边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.DateTime})">
      <summary>返回所指定开始日期和结束日期之间的指定 datepart 边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.DateTimeOffset})">
      <summary>返回所指定开始日期和结束日期之间的指定 datepart 边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>返回所指定开始日期和结束日期之间的指定 datepart 边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.String)">
      <summary>返回所指定开始日期和结束日期之间的指定 datepart 边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.Nullable{System.DateTime})">
      <summary>返回所指定开始日期和结束日期之间的指定 datepart 边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.Nullable{System.DateTimeOffset})">
      <summary>返回所指定开始日期和结束日期之间的指定 datepart 边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.Nullable{System.TimeSpan})">
      <summary>返回所指定开始日期和结束日期之间的指定 datepart 边界的计数。</summary>
      <returns>指定两个日期之间的时间间隔数的值。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.String)">
      <summary>返回所指定开始日期和结束日期之间的指定 datepart 边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.Nullable{System.DateTime})">
      <summary>返回一个字符串，该字符串表示指定日期的指定 datepart。</summary>
      <returns>指定日期的指定部分。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="date">日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.Nullable{System.DateTimeOffset})">
      <summary>返回一个字符串，该字符串表示指定日期的指定 datepart。</summary>
      <returns>指定日期的指定部分。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="date">日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.Nullable{System.TimeSpan})">
      <summary>返回一个字符串，该字符串表示指定日期的指定 datepart。</summary>
      <returns>指定日期的指定部分。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="date">日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.String)">
      <summary>返回一个字符串，该字符串表示指定日期的指定 datepart。</summary>
      <returns>指定日期的指定部分。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="date">日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.Nullable{System.DateTime})">
      <summary>返回表示指定日期的指定日期部分的整数。</summary>
      <returns>指定日期的指定日期部分。</returns>
      <param name="datePartArg">要返回值的日期部分。</param>
      <param name="date">日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.Nullable{System.DateTimeOffset})">
      <summary>返回表示指定日期的指定日期部分的整数。</summary>
      <returns>指定日期的指定 datepart。</returns>
      <param name="datePartArg">要返回值的日期部分。</param>
      <param name="date">日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.Nullable{System.TimeSpan})">
      <summary>返回表示指定日期的指定日期部分的整数。</summary>
      <returns>指定日期的指定 datepart。</returns>
      <param name="datePartArg">要返回值的日期部分。</param>
      <param name="date">日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.String)">
      <summary>返回表示指定日期的指定日期部分的整数。</summary>
      <returns>指定日期的指定 datepart。</returns>
      <param name="datePartArg">要返回值的日期部分。</param>
      <param name="date">日期。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Decimal})">
      <summary>为以弧度指定的角返回对应的以度数表示的角。</summary>
      <returns>转换为度数的指定角。</returns>
      <param name="arg1">以弧度计量的角度。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Double})">
      <summary>为以弧度指定的角返回对应的以度数表示的角。</summary>
      <returns>转换为度数的指定角。</returns>
      <param name="arg1">以弧度计量的角度。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Int32})">
      <summary>为以弧度指定的角返回对应的以度数表示的角。</summary>
      <returns>转换为度数的指定角。</returns>
      <param name="arg1">以弧度计量的角度。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Int64})">
      <summary>为以弧度指定的角返回对应的以度数表示的角。</summary>
      <returns>转换为度数的指定角。</returns>
      <param name="arg1">以弧度计量的角度。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Difference(System.String,System.String)">
      <summary>返回指示两个字符表达式的 SOUNDEX 值之差的整数值。</summary>
      <returns>两个字符串之间的 SOUNDEX 差值。</returns>
      <param name="string1">第一个字符串。</param>
      <param name="string2">第二个字符串。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Exp(System.Nullable{System.Decimal})">
      <summary>返回所指定浮点表达式的指数值。</summary>
      <returns>以常数 e 为底、以输入值为指数的幂。</returns>
      <param name="arg">输入值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Exp(System.Nullable{System.Double})">
      <summary>返回所指定浮点表达式的指数值。</summary>
      <returns>以常数 e 为底、以输入值为指数的幂。</returns>
      <param name="arg">输入值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.GetDate">
      <summary>将当前数据库系统时间戳作为日期/时间值返回，不含数据库时区偏移量。 此值派生自运行 SQL Server 实例的计算机上使用的操作系统。</summary>
      <returns>当前的数据库时间戳。</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.GetUtcDate">
      <summary>将当前数据库系统时间戳作为日期/时间值返回。 不包含数据库时区偏移量。 此值表示当前 UTC 时间（协调世界时）。 此值派生自运行 SQL Server 实例的计算机上使用的操作系统。</summary>
      <returns>当前的数据库 UTC 时间戳。</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.HostName">
      <summary>返回工作站名称。</summary>
      <returns>工作站的名称。</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.IsDate(System.String)">
      <summary>指示输入值是否为有效的日期或时间。</summary>
      <returns>如果输入表达式是 datetime 或 smalldatetime 数据类型的有效日期或时间值，则为 1；否则为 0。</returns>
      <param name="arg">所测试的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.IsNumeric(System.String)">
      <summary>指示输入值是否为有效的数值类型。</summary>
      <returns>如果输入表达式是有效的数值类型，则为 1；否则为 0。</returns>
      <param name="arg">字符串表达式。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log(System.Nullable{System.Decimal})">
      <summary>返回所指定输入值的自然对数。</summary>
      <returns>输入值的自然对数。</returns>
      <param name="arg">数值表达式。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log(System.Nullable{System.Double})">
      <summary>返回所指定输入值的自然对数。</summary>
      <returns>输入值的自然对数。</returns>
      <param name="arg">数值表达式。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log10(System.Nullable{System.Decimal})">
      <summary>返回所指定输入值以 10 为底的对数。</summary>
      <returns>输入值的以 10 为底的对数。</returns>
      <param name="arg">数值表达式。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log10(System.Nullable{System.Double})">
      <summary>返回所指定输入值以 10 为底的对数。</summary>
      <returns>输入值的以 10 为底的对数。</returns>
      <param name="arg">数值表达式。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.NChar(System.Nullable{System.Int32})">
      <summary>根据 Unicode 标准的定义，返回具有所指定整数代码的 Unicode 字符。</summary>
      <returns>与输入字符代码相对应的字符。</returns>
      <param name="arg">字符代码。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.PatIndex(System.String,System.String)">
      <summary>返回模式在指定表达式中首次出现的起始位置；如果未找到模式，则为零。适用于所有有效的文本和字符数据类型。</summary>
      <returns>找到字符串模式处的起始字符位置。</returns>
      <param name="stringPattern">要搜索的字符串模式。</param>
      <param name="target">要搜索的字符串。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Pi">
      <summary>返回 pi 的常量值。</summary>
      <returns>pi 的数值。</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.QuoteName(System.String)">
      <summary>返回一个 Unicode 字符串，其中添加有分隔符，以使输入字符串成为有效的 Microsoft SQL Server 分隔标识符。</summary>
      <returns>添加有方括号的原始字符串。</returns>
      <param name="stringArg">要将引号字符添加到其中的表达式。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.QuoteName(System.String,System.String)">
      <summary>返回一个 Unicode 字符串，其中添加有分隔符，以使输入字符串成为有效的 Microsoft SQL Server 分隔标识符。</summary>
      <returns>添加有指定引号字符的原始字符串。</returns>
      <param name="stringArg">要将引号字符添加到其中的表达式。</param>
      <param name="quoteCharacter">将用作分隔符的单字符字符串。 它可以是单引号 (')、左方括号或右方括号 ([ ]) 或者英文双引号 (")。 如果未指定 quote_character，则使用方括号。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Decimal})">
      <summary>为以度数指定的角返回对应的弧度度量值。</summary>
      <returns>所指定角的弧度度量值。</returns>
      <param name="arg">以度数为单位的角。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Double})">
      <summary>为以度数指定的角返回对应的弧度度量值。</summary>
      <returns>所指定角的弧度度量值。</returns>
      <param name="arg">以度数为单位的角。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Int32})">
      <summary>为以度数指定的角返回对应的弧度度量值。</summary>
      <returns>所指定角的弧度度量值。</returns>
      <param name="arg">以度数为单位的角</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Int64})">
      <summary>为以度数指定的角返回对应的弧度度量值。</summary>
      <returns>所指定角的弧度度量值。</returns>
      <param name="arg">以度数为单位的角</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Rand">
      <summary>返回一个 0 到 1（均不含）之间的伪随机浮点值。</summary>
      <returns>伪随机值。</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Rand(System.Nullable{System.Int32})">
      <summary>返回一个 0 到 1（均不含）之间的伪随机浮点值。</summary>
      <returns>伪随机值。</returns>
      <param name="seed">种子值。 如果未指定 <paramref name="seed" />，则 SQL Server 数据库引擎将随机分配种子值。 对于一个指定的种子值，返回的结果始终相同。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Replicate(System.String,System.Nullable{System.Int32})">
      <summary>将一个字符串值重复指定的次数。</summary>
      <returns>重复了 <paramref name="count" /> 所指定次数的目标字符串。</returns>
      <param name="target">一个有效的字符串。</param>
      <param name="count">指定 <paramref name="target" /> 重复次数的值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Decimal})">
      <summary>返回指定表达式的正号 (+1)、零 (0) 或负号 (-1)。</summary>
      <returns>输入表达式的标志。</returns>
      <param name="arg">数值表达式。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Double})">
      <summary>返回指定表达式的正号 (+1)、零 (0) 或负号 (-1)。</summary>
      <returns>输入表达式的标志。</returns>
      <param name="arg">数值表达式。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Int32})">
      <summary>返回指定表达式的正号 (+1)、零 (0) 或负号 (-1)。</summary>
      <returns>输入表达式的标志。</returns>
      <param name="arg">数值表达式。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Int64})">
      <summary>返回指定表达式的正号 (+1)、零 (0) 或负号 (-1)。</summary>
      <returns>输入表达式的标志。</returns>
      <param name="arg">数值表达式。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sin(System.Nullable{System.Decimal})">
      <summary>返回所指定角的三角正弦。</summary>
      <returns>输入表达式的三角正弦。</returns>
      <param name="arg">以弧度计量的角度。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sin(System.Nullable{System.Double})">
      <summary>返回所指定角的三角正弦。</summary>
      <returns>输入表达式的三角正弦。</returns>
      <param name="arg">以弧度计量的角度。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.SoundCode(System.String)">
      <summary>将字母数字字符串转换为由四个字符组成的 (SOUNDEX) 代码，以便查找发音相似的字词或名称。</summary>
      <returns>输入字符串的 SOUNDEX 代码。</returns>
      <param name="arg">一个有效的字符串。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Space(System.Nullable{System.Int32})">
      <summary>返回由重复空格组成的字符串。</summary>
      <returns>由指定数量的空格组成的字符串。</returns>
      <param name="arg1">空格数。 如果为负，则返回 null 字符串。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Square(System.Nullable{System.Decimal})">
      <summary>返回所指定数字的平方。</summary>
      <returns>输入值的平方。</returns>
      <param name="arg1">数值表达式。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Square(System.Nullable{System.Double})">
      <summary>返回所指定数字的平方。</summary>
      <returns>输入值的平方。</returns>
      <param name="arg1">数值表达式。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.SquareRoot(System.Nullable{System.Decimal})">
      <summary>返回指定数字的平方根。</summary>
      <returns>输入值的平方根。</returns>
      <param name="arg">数值表达式。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.SquareRoot(System.Nullable{System.Double})">
      <summary>返回指定数字的平方根。</summary>
      <returns>输入值的平方根。</returns>
      <param name="arg">数值表达式。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Decimal})">
      <summary>返回转换自数值数据的字符数据。</summary>
      <returns>转换为字符串的输入表达式。</returns>
      <param name="number">数值表达式。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>返回转换自数值数据的字符数据。</summary>
      <returns>转换为字符串的输入表达式。</returns>
      <param name="number">数值表达式。</param>
      <param name="length">字符串的总长度。 它包括小数点、符号、数字以及空格。 默认值为 10。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>返回转换自数值数据的字符数据。</summary>
      <returns>转换为字符串的输入表达式。</returns>
      <param name="number">数值表达式。</param>
      <param name="length">字符串的总长度。 它包括小数点、符号、数字以及空格。 默认值为 10。</param>
      <param name="decimalArg">小数点右侧的位数。 <paramref name="decimal" /> 必须小于或等于 16。 如果<paramref name=" decimal" /> 大于 16，则将结果的小数点右侧截为十六位。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Double})">
      <summary>返回转换自数值数据的字符数据。</summary>
      <returns>转换为字符串的数字输入表达式。</returns>
      <param name="number">数值表达式。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>返回转换自数值数据的字符数据。</summary>
      <returns>转换为字符串的数字输入表达式。</returns>
      <param name="number">数值表达式。</param>
      <param name="length">字符串的总长度。 它包括小数点、符号、数字以及空格。 默认值为 10。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Double},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>返回转换自数值数据的字符数据。</summary>
      <returns>转换为字符串的数字输入表达式。</returns>
      <param name="number">数值表达式。</param>
      <param name="length">字符串的总长度。 它包括小数点、符号、数字以及空格。 默认值为 10。</param>
      <param name="decimalArg">小数点右侧的位数。 <paramref name="decimal" /> 必须小于或等于 16。 如果<paramref name=" decimal" /> 大于 16，则将结果的小数点右侧截为十六位。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Stuff(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
      <summary>将一个字符串插入另一个字符串。 这会从目标字符串中的起始位置开始，删除指定长度的字符，然后在目标字符串中的起始位置处，插入第二个字符串。</summary>
      <returns>由这两个字符串组成的字符串。</returns>
      <param name="stringInput">目标字符串。</param>
      <param name="start">
        <paramref name="stringinput" /> 中要插入替换字符串的字符位置。</param>
      <param name="length">要从 <paramref name="stringInput" /> 中删除的字符数。 如果 <paramref name="length" /> 比 <paramref name="stringInput" /> 长，则最多删除到 <paramref name="stringReplacement" /> 中的最后一个字符。</param>
      <param name="stringReplacement">要插入 <paramref name="stringInput" /> 中的子字符串。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Tan(System.Nullable{System.Decimal})">
      <summary>返回输入表达式的三角正切。</summary>
      <returns>输入角的正切。</returns>
      <param name="arg">以弧度计量的角度。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Tan(System.Nullable{System.Double})">
      <summary>返回输入表达式的三角正切。</summary>
      <returns>输入角的正切。</returns>
      <param name="arg">以弧度计量的角度。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Unicode(System.String)">
      <summary>根据 Unicode 标准的定义，返回输入表达式中第一个字符的整数值。</summary>
      <returns>输入字符串中第一个字符的字符代码。</returns>
      <param name="arg">一个有效的字符串。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.UserName">
      <summary>返回与所指定标识号相对应的数据库用户名。</summary>
      <returns>用户名。</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.UserName(System.Nullable{System.Int32})">
      <summary>返回与所指定标识号相对应的数据库用户名。</summary>
      <returns>用户名。</returns>
      <param name="arg">用户 ID。</param>
    </member>
    <member name="T:System.Data.Objects.SqlClient.SqlSpatialFunctions">
      <summary>表示 SQL 客户端的 SQL 空间函数。</summary>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.AsTextZM(System.Data.Spatial.DbGeography)">
      <summary>返回地理实例（通过由该实例执行的任何 Z（提升）和 M（度量）扩充）的“打开地理空间联合会 (OGC) 知名文本 (WKT)”表示形式。</summary>
      <returns>地理实例中的 Open Geospatial Consortium (OGC) “熟知文本” (WKT) 的表示形式。</returns>
      <param name="geographyValue">地理值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.AsTextZM(System.Data.Spatial.DbGeometry)">
      <summary>返回地理实例（通过由该实例执行的任何 Z（提升）和 M（度量）扩充）的“打开地理空间联合会 (OGC) 知名文本 (WKT)”表示形式。</summary>
      <returns>几何实例中的 Open Geospatial Consortium (OGC) “熟知文本” (WKT) 的表示形式。</returns>
      <param name="geometryValue">几何图形值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.BufferWithTolerance(System.Data.Spatial.DbGeography,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean})">
      <summary>返回表示所有点值的联合从地理实例的距离小于或等于指定的值的一个几何对象，允许指定的公差。</summary>
      <returns>所有点值的联合从地理实例的距离小于或等于指定的值</returns>
      <param name="geographyValue">地理值。</param>
      <param name="distance">距离。</param>
      <param name="tolerance">指定的容差。</param>
      <param name="relative">指定公差值是否是相对的或绝对的。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.BufferWithTolerance(System.Data.Spatial.DbGeometry,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean})">
      <summary>返回表示所有点值的联合从几何图形实例的距离小于或等于指定的值的一个几何对象，允许指定的公差。</summary>
      <returns>所有点值的联合从几何图形实例的距离小于或等于指定的值</returns>
      <param name="geometryValue">几何图形值。</param>
      <param name="distance">距离。</param>
      <param name="tolerance">指定的容差。</param>
      <param name="relative">指定公差值是否是相对的或绝对的。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.EnvelopeAngle(System.Data.Spatial.DbGeography)">
      <summary>返回由 EnvelopeCenter（）返回的点之间的最大角度和在地理事例的点之间程度。</summary>
      <returns>由 EnvelopeCenter（） 返回的点之间的最大角度。</returns>
      <param name="geographyValue">地理值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.EnvelopeCenter(System.Data.Spatial.DbGeography)">
      <summary>返回可用作跳起圆形的中心为地理实例的点。</summary>
      <returns>指定圆形边框的中心位置的 SqlGeography 值。</returns>
      <param name="geographyValue">地理值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.Filter(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>提供快速的、只索引交集方法来决定地理实例是否与其他 SqlGeography 实例相交（假设索引可用）。</summary>
      <returns>如果地理实例存在可能与另一个 SqlGeography 实例相交，则 True；否则，为 false。</returns>
      <param name="geographyValue">地理值。</param>
      <param name="geographyOther">根据调用的筛选器中的实例比较另一个地理实例。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.Filter(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>提供快速的、只索引交集方法来决定地理实例是否与其他 SqlGeometry 实例相交（假设索引可用）。</summary>
      <returns>如果地理实例存在可能与另一个 SqlGeography 实例相交，则 True；否则，为 false。</returns>
      <param name="geometryValue">几何图形值。</param>
      <param name="geometryOther">根据调用的筛选器中的实例比较另一个地理实例。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.InstanceOf(System.Data.Spatial.DbGeography,System.String)">
      <summary>测试 SqlGeography 实例是否与指定的类型相同。</summary>
      <returns>指定以地理类型层次公开的 12 种类型之一的字符串。</returns>
      <param name="geographyValue">地理值。</param>
      <param name="geometryTypeName">指定以地理类型层次公开的 12 种类型之一的字符串。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.InstanceOf(System.Data.Spatial.DbGeometry,System.String)">
      <summary>测试 SqlGeometry 实例是否与指定的类型相同。</summary>
      <returns>指定以地理类型层次公开的 12 种类型之一的字符串。</returns>
      <param name="geometryValue">几何图形值。</param>
      <param name="geometryTypeName">指定以地理类型层次公开的 12 种类型之一的字符串。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.MakeValid(System.Data.Spatial.DbGeometry)">
      <summary>将无效的几何图形实例转换为使用有效 Open Geospatial Consortium (OGC) 类型的几何图形实例。</summary>
      <returns>转换的几何图形实例。</returns>
      <param name="geometryValue">几何图形值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.NumRings(System.Data.Spatial.DbGeography)">
      <summary>多边形实例中返回环总数。</summary>
      <returns>环总数。</returns>
      <param name="geographyValue">地理值。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.PointGeography(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>构造一个表示从其的 x 和 y 的值及空间引用 ID (SRID) 中的点实例的地理实例。</summary>
      <returns>构造的地理实例。</returns>
      <param name="latitude">正在生成的点的 x 坐标。</param>
      <param name="longitude">正在生成的点的 y 坐标。</param>
      <param name="spatialReferenceId">地理实例的 SRID。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.PointGeometry(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>构造一个表示从其的 x 和 y 的值及空间引用 ID (SRID) 中的点实例的几何图形实例。</summary>
      <returns>构造的几何图形实例。</returns>
      <param name="xCoordinate">正在生成的点的 x 坐标。</param>
      <param name="yCoordinate">正在生成的点的 y 坐标。</param>
      <param name="spatialReferenceId">地理实例的 SRID。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.Reduce(System.Data.Spatial.DbGeography,System.Nullable{System.Double})">
      <summary>返回通过在具有给定公差的实例上运行 Douglas-Peucker 算法而产生的给定地理实例的近似值。</summary>
      <returns>返回 <see cref="T:System.Data.Spatial.DbGeography" />。</returns>
      <param name="geographyValue">地理值。</param>
      <param name="tolerance">要输入到道格拉斯 Peucker 算法的容错。容错必须为正数。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.Reduce(System.Data.Spatial.DbGeometry,System.Nullable{System.Double})">
      <summary>返回通过在具有给定公差的实例上运行 Douglas-Peucker 算法而产生的给定地理实例的近似值。</summary>
      <returns>返回 <see cref="T:System.Data.Spatial.DbGeometry" />。</returns>
      <param name="geometryValue">几何图形值。</param>
      <param name="tolerance">要输入到道格拉斯 Peucker 算法的容错。容错必须为正数。</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.RingN(System.Data.Spatial.DbGeography,System.Nullable{System.Int32})">
      <summary>返回 SqlGeography 实例的指定圆环：1 ≤ n ≤ NumRings ()。</summary>
      <returns>表示由 n 指定的循环的的 SqlGeography 对象。</returns>
      <param name="geographyValue">地理值。</param>
      <param name="index">多边形实例中 1 和环数之间 int 表达式。</param>
    </member>
    <member name="T:System.Data.Spatial.DbGeography">
      <summary>表示大地（圆地球）坐标系中的数据。</summary>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.Area">
      <summary>获取指示此 DbGeography 值区域的双精度值，如果此值不表示图面，则可以为零。</summary>
      <returns>指示此 DbGeography 值的区域可以为 null 的双精度值。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.AsBinary">
      <summary>生成此 DbGeography 值的著名二进制表示。</summary>
      <returns>已知二进制表示形式 DbGeography 的值。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.AsGml">
      <summary>生成此 DbGeography 值的 Geography Markup Language (GML) 表示。</summary>
      <returns>此 DbGeography 值包含 GML 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.AsText">
      <summary>生成此 DbGeography 值的著名文本表示。仅包含点的经度和纬度。</summary>
      <returns>包含此地理值的知名文本表示形式的字符串。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.Buffer(System.Nullable{System.Double})">
      <summary>返回表示所有点的联合从地理实例的距离小于或等于指定的值的地理对象</summary>
      <returns>表示所有点的集合的地理对象</returns>
      <param name="distance">距离。</param>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.CoordinateSystemId">
      <summary>获取与坐标系统相关联的标识符 。</summary>
      <returns>与坐标系相关的标识符。</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId">
      <summary>获取地理值 (WGS 84) 的默认坐标系 ID (SRID)。</summary>
      <returns>地理值 (WGS 84) 的默认坐标系 ID (SRID)。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.Difference(System.Data.Spatial.DbGeography)">
      <summary>计算此 DbGeography 值和其他 DbGeography 值的差异。</summary>
      <returns>一个新的 DbGeography 值，代表此地理值和 <paramref name="other" /> 之间的差异。</returns>
      <param name="other">与该值的差别应被计算出来的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.Dimension">
      <summary>如果值为集合，则获取给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值的维度或最大的元素维度。</summary>
      <returns>给定的 <see cref="T:System.Data.Spatial.DbGeography" /> 值的维度。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.Disjoint(System.Data.Spatial.DbGeography)">
      <summary>确定此 DbGeography 是否和其指定的 DbGeography 论据在空间上不连续。</summary>
      <returns>如果 <paramref name="other" /> 与此地理值不相交，则为 true；否则为 false。</returns>
      <param name="other">应与该地理值比较非交集部分的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.Distance(System.Data.Spatial.DbGeography)">
      <summary>计算此 DbGeography 值和其他 DbGeography 值中两个最接近的点之间的距离。</summary>
      <returns>在此地理值和 <paramref name="other" /> 中指定两个最接近的点之间的距离的双精确值。</returns>
      <param name="other">与该值的距离应被计算出来的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.ElementAt(System.Int32)">
      <summary>如果其表示地理集合，则从特定位置返回 DbGeography 值的元素。&lt;param name="index"&gt;此地理值内应该用来选取元素的位置。&lt;/param&gt;&lt;returns&gt;如果它表示其他地理值的集合，则为此地理值中指定位置的元素；否则为 null。&lt;/returns&gt;</summary>
      <returns>特定位置中的此 DbGeography 值的元素</returns>
      <param name="index">索引。</param>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.ElementCount">
      <summary>如果其表示地理集合，则获取该 DbGeography 值内的元素的数目。&lt;returns&gt;如果它表示其他地理值的集合，则为此地理值中的元素数；否则为 null。&lt;/returns&gt;</summary>
      <returns>在 DbGeography 值中的元素的数目。</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.Elevation">
      <summary>如果该 DbGeography 值表示一个点，则获取它的高程值（Z坐标）。&lt;returns&gt;如果它表示一个点，则为此地理值的提升（Z 坐标）；否则为 null。&lt;/returns&gt;</summary>
      <returns>提升该 DbGeography 值 (Z 坐标)。</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.EndPoint">
      <summary>获取表示此值起点的 DbGeography 值，如果 DbGeography 值不表示曲线，此值可能是零。</summary>
      <returns>DbGeography 值表示该值的起点。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.FromBinary(System.Byte[])">
      <summary>创建基于指定已知二进制值的新 <see cref="T:System.Data.Spatial.DbGeography" /> 值。</summary>
      <returns>通过默认的地理坐标系统标识符 (SRID)，由知名二进制值定义的新的 DbGeography 值 (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />)。</returns>
      <param name="wellKnownBinary">包含地理值的知名二进制表示形式的字节数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinary" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.FromBinary(System.Byte[],System.Int32)">
      <summary>创建基于指定已知二进制值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeography" /> 值。</summary>
      <returns>通过指定坐标系统标识符由知名二进制值定义的新的 DbGeography 值。</returns>
      <param name="wellKnownBinary">包含地理值的知名二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新 DbGeography 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.FromGml(System.String)">
      <summary>创建基于指定地理标记语言 (GML) 值的新 <see cref="T:System.Data.Spatial.DbGeography" /> 值。</summary>
      <returns>通过默认的地理坐标系统标识符 (SRID)，由 GML 值定义的新的 DbGeography 值 (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />)。</returns>
      <param name="geographyMarkup">包含地理值的地理标记语言 (GML) 表示形式的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyMarkup" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.FromGml(System.String,System.Int32)">
      <summary>创建基于指定地理标记语言 (GML) 值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeography" /> 值。</summary>
      <returns>通过指定坐标系统标识符由 GML 值定义的新的 DbGeography 值。</returns>
      <param name="geographyMarkup">包含地理值的地理标记语言 (GML) 表示形式的字符串。</param>
      <param name="coordinateSystemId">新 DbGeography 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyMarkup" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.FromText(System.String)">
      <summary>创建基于指定已知文本值的新 <see cref="T:System.Data.Spatial.DbGeography" /> 值。</summary>
      <returns>通过默认的地理坐标系统标识符 (SRID)，由知名文本值定义的新的 DbGeography 值 (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />)。</returns>
      <param name="wellKnownText">包含知名地理值的文本表示形式的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.FromText(System.String,System.Int32)">
      <summary>创建基于指定已知文本值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeography" /> 值。</summary>
      <returns>通过指定坐标系统标识符由知名文本值定义的新的 DbGeography 值。</returns>
      <param name="wellKnownText">包含知名地理值的文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新 DbGeography 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.GeographyCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>创建基于指定已知二进制值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeography" /> 集合值。</summary>
      <returns>通过指定坐标系统标识符由知名二进制值定义的新的 DbGeography 值。</returns>
      <param name="geographyCollectionWellKnownBinary">包含地理值的知名二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新 DbGeography 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyCollectionWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.GeographyCollectionFromText(System.String,System.Int32)">
      <summary>创建基于指定已知文本值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeography" /> 集合值。</summary>
      <returns>通过指定坐标系统标识符由知名文本值定义的新的 DbGeography 值。</returns>
      <param name="geographyCollectionWellKnownText">包含知名地理值的文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新 DbGeography 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyCollectionWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.Intersection(System.Data.Spatial.DbGeography)">
      <summary>计算此 DbGeography 值和其他 DbGeography 值的交集。</summary>
      <returns>一个新的 DbGeography 值，它代表此地理值和 <paramref name="other" /> 之间的交集。</returns>
      <param name="other">与该值的交集应被计算出来的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.Intersects(System.Data.Spatial.DbGeography)">
      <summary>确定此 DbGeography 值是否和其指定的 DbGeography 论据在空间上相交。</summary>
      <returns>如果 <paramref name="other" /> 与此地理值相交，则为 true；否则为 false。</returns>
      <param name="other">应与该地理值比较交集部分的的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.IsClosed">
      <summary>获取指示此 DbGeography 值是否关闭的可为 Null 的“布尔”值，如果此值不表示曲线，则可以为零。</summary>
      <returns>如果此 DbGeography 值关闭，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.IsEmpty">
      <summary>获取一个可为 null 的布尔值，指示此 DbGeography 值是否为空。</summary>
      <returns>如果此 DbGeography 值为空，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.Latitude">
      <summary>如果该 DbGeography 值表示一个点，则获取它的纬度坐标。&lt;returns&gt;如果它表示一个点，则为此地理值的纬度坐标值；否则为 null。&lt;/returns&gt;</summary>
      <returns>该 DbGeography 值 的 Y 坐标。</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.Length">
      <summary>获取指示此 DbGeography 值长度的双精度值，如果此值不表示曲线，则可以为零。</summary>
      <returns>指示此 DbGeography 值的长度可以为 null 的双精度值。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.LineFromBinary(System.Byte[],System.Int32)">
      <summary>创建基于指定已知二进制值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeography" /> 行值。</summary>
      <returns>通过指定坐标系统标识符由知名二进制值定义的新的 DbGeography 值。</returns>
      <param name="lineWellKnownBinary">包含地理值的知名二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新 DbGeography 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.LineFromText(System.String,System.Int32)">
      <summary>创建基于指定已知文本值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeography" /> 行值。</summary>
      <returns>通过指定坐标系统标识符由知名文本值定义的新的 DbGeography 值。</returns>
      <param name="lineWellKnownText">包含知名地理值的文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新 DbGeography 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.Longitude">
      <summary>如果该 DbGeography 值表示一个点，则获取它的经度坐标。&lt;returns&gt;如果它表示一个点，则为此地理值的经度坐标值；否则为 null。&lt;/returns&gt;</summary>
      <returns>此 DbGeography 值的 Y 坐标。</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.Measure">
      <summary>如果该 DbGeography 值表示一个点，则获取它的 M （测量）坐标。&lt;returns&gt;如果它表示一个点，则为此地理值的 M（测量）坐标值；否则为 null。&lt;/returns&gt;</summary>
      <returns>此 DbGeography 值 的 M （测量）坐标。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.MultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>返回从二进制值的多行的值。</summary>
      <returns>来自二进制值的多线的值。</returns>
      <param name="multiLineWellKnownBinary">已知的二进制值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.MultiLineFromText(System.String,System.Int32)">
      <summary>返回从显着的文本值的多多边形值。</summary>
      <returns>来自熟知文本值的多线值。</returns>
      <param name="multiLineWellKnownText">已知的文本。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.MultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>返回从显着的二进制值的多多边形值。</summary>
      <returns>来自熟知二进制值的多点值。</returns>
      <param name="multiPointWellKnownBinary">已知的二进制值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.MultiPointFromText(System.String,System.Int32)">
      <summary>返回从显着的文本值的多多边形值。</summary>
      <returns>来自熟知文本值多点值。</returns>
      <param name="multiPointWellKnownText">已知的文本值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.MultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>返回从显着的二进制值的多多边形值。</summary>
      <returns>来自于熟知的二进制值的多多边形值。</returns>
      <param name="multiPolygonWellKnownBinary">多多边形熟知二进制值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.MultiPolygonFromText(System.String,System.Int32)">
      <summary>返回从显着的文本值的多多边形值。</summary>
      <returns>来自于熟知文本值的多多边形值。</returns>
      <param name="multiPolygonWellKnownText">多多边形熟知文本值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.PointAt(System.Int32)">
      <summary>如果其表示行字符串或线性环，则从特定位置返回 DbGeography 值的元素。&lt;param name="index"&gt;此地理值内应该用来选取元素的位置。&lt;/param&gt;&lt;returns&gt;如果它表示行字符串或线性环，则为此地理值中指定位置的元素；否则为 null。&lt;/returns&gt;</summary>
      <returns>特定位置中的此 DbGeography 值的元素</returns>
      <param name="index">索引。</param>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.PointCount">
      <summary>如果其表示行字符串或线性环，则获取该 DbGeography 值内的点的数目。&lt;returns&gt;如果它表示行字符串或线性环，则为此地理值中的元素数；否则为 null。&lt;/returns&gt;</summary>
      <returns>在 DbGeography 值中的点数。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.PointFromBinary(System.Byte[],System.Int32)">
      <summary>创建基于指定已知二进制值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeography" /> 点值。</summary>
      <returns>通过指定坐标系统标识符由知名二进制值定义的新的 DbGeography 值。</returns>
      <param name="pointWellKnownBinary">包含地理值的知名二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新 DbGeography 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.PointFromText(System.String,System.Int32)">
      <summary>创建基于指定已知文本值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeography" /> 点值。</summary>
      <returns>通过指定坐标系统标识符由知名文本值定义的新的 DbGeography 值。</returns>
      <param name="pointWellKnownText">包含知名地理值的文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新 DbGeography 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.PolygonFromBinary(System.Byte[],System.Int32)">
      <summary>创建基于指定已知二进制值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeography" /> 多多边形值。</summary>
      <returns>通过指定坐标系统标识符由知名二进制值定义的新的 DbGeography 值。</returns>
      <param name="polygonWellKnownBinary">包含地理值的知名二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新 DbGeography 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.PolygonFromText(System.String,System.Int32)">
      <summary>创建基于指定已知文本值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeography" /> 多多边形值。</summary>
      <returns>通过指定坐标系统标识符由知名文本值定义的新的 DbGeography 值。</returns>
      <param name="polygonWellKnownText">包含知名地理值的文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新 DbGeography 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.ProviderValue">
      <summary>获取此 DbGeography 值的指示形式，其值被指定到构造它的基础提供程序。</summary>
      <returns>此 DbGeography 值的表示形式。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.SpatialEquals(System.Data.Spatial.DbGeography)">
      <summary>确定此 DbGeography 是否和其指定的 DbGeography 论据在空间相等。</summary>
      <returns>如果 <paramref name="other" /> 在空间上等于此地理值，则为 true；否则为 false。</returns>
      <param name="other">应与该地理值比较等价性的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.SpatialTypeName">
      <summary>获取 DBGeography 的空间类型名称。</summary>
      <returns>DBGeography 的空间类型名称。</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.StartPoint">
      <summary>获取表示此值起点的 DbGeography 值，如果 DbGeography 值不表示曲线，此值可能是零。</summary>
      <returns>DbGeography 值表示该值的起点。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.SymmetricDifference(System.Data.Spatial.DbGeography)">
      <summary>计算此 DbGeography 值和其他 DbGeography 值的对称差异。</summary>
      <returns>一个新的 DbGeography 值，它代表此地理值和 <paramref name="other" /> 之间的对称差异。</returns>
      <param name="other">与该值的余集应被计算出来的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.ToString">
      <summary>返回地理值的字符串表示形式。</summary>
      <returns>地理值的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.Union(System.Data.Spatial.DbGeography)">
      <summary>计算此 DbGeography 值和其他 DbGeography 值的并集。</summary>
      <returns>一个新的 DbGeography 值，它代表此地理值和 <paramref name="other" /> 之间的并集。</returns>
      <param name="other">与该值的并集应被计算出来的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.WellKnownValue">
      <summary>获取或设置此 DbGeography 值的可序列化的已知表示形式的数据协定。</summary>
      <returns>数据协定的此 DbGeography 值的可序列化的已知表示形式。</returns>
    </member>
    <member name="T:System.Data.Spatial.DbGeographyWellKnownValue">
      <summary>数据协定 <see cref="T:System.Data.Spatial.DbGeography" /> 值的可序列化表示形式。</summary>
    </member>
    <member name="M:System.Data.Spatial.DbGeographyWellKnownValue.#ctor">
      <summary>初始化 <see cref="T:System.Data.Spatial.DbGeographyWellKnownValue" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Data.Spatial.DbGeographyWellKnownValue.CoordinateSystemId">
      <summary>获取或设置此值的的坐标系统标识符 (SRID)。</summary>
    </member>
    <member name="P:System.Data.Spatial.DbGeographyWellKnownValue.WellKnownBinary">
      <summary>获取或设置此值的已知二进制表示形式。</summary>
    </member>
    <member name="P:System.Data.Spatial.DbGeographyWellKnownValue.WellKnownText">
      <summary>获取或设置此值的已知文本表示形式。</summary>
    </member>
    <member name="T:System.Data.Spatial.DbGeometry">
      <summary>为用于定义几何形状的对象提供基类。</summary>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.Area">
      <summary>获取指示此 DbGeometry 值区域的双精度值，如果此值不表示图面，则可以为零。</summary>
      <returns>指示此 DbGeometry 值的区域可以为 null 的双精度值。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.AsBinary">
      <summary>生成此 DbGeometry 值的众著名二进制表示。</summary>
      <returns>已知二进制表示形式 DbGeometry 的值。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.AsGml">
      <summary>生成此 DbGeometry 值的 Geography Markup Language (GML) 表示。</summary>
      <returns>此 DbGeometry 值包含 GML 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.AsText">
      <summary>生成此 DbGeometry 值的著名文本表示。仅包含点的 X 和 Y 坐标。</summary>
      <returns>包含此 DbGeometry 值的知名文本表示形式的字符串。</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.Boundary">
      <summary>获取 DbGeometry 对象的边界。</summary>
      <returns>DbGeometry 对象的边界。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Buffer(System.Nullable{System.Double})">
      <summary>返回表示所有点的联合从地理实例的距离小于或等于指定的值的一个几何图形对象。</summary>
      <returns>表示所有点的集合的几何图形对象。</returns>
      <param name="distance">距离。</param>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.Centroid">
      <summary>获取表示此 DbGeometry 值的中心的 DbGeometry 值，如果此值不表示图面，则可能为 null。</summary>
      <returns>表示 DbGeometry 值的中心的 DbGeometry 值。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Contains(System.Data.Spatial.DbGeometry)">
      <summary>确定此 DbGeography 是否包含指定的 DbGeography 论据。</summary>
      <returns>如果此几何值包含 <paramref name="other" />，则为 true；否则为 false。</returns>
      <param name="other">应与该几何图形值比较包含的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.ConvexHull">
      <summary>获取作为另一个 DbGeometry 值的 DbGeometry 值的凸包。</summary>
      <returns>作为另一 DbGeometry 值的这一 DbGeometry 值的凸包。</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.CoordinateSystemId">
      <summary>获取 DbGeometr 对象的坐标系统标识符。</summary>
      <returns>定义 DbGeometry 对象的坐标系统标识符。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Crosses(System.Data.Spatial.DbGeometry)">
      <summary>确定此 DbGeography 是否交叉指定的 DbGeography 论据。</summary>
      <returns>如果 <paramref name="other" /> 与此几何值重叠，则为 true；否则为 false。</returns>
      <param name="other">应与该几何图形值比较的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId">
      <summary>获取默认几何值 (WGS 84) 坐标系 ID (SRID)</summary>
      <returns>默认几何值 (WGS 84) 坐标系 ID (SRID)</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Difference(System.Data.Spatial.DbGeometry)">
      <summary>计算此 DbGeometry 值和其他 DbGeometry 值之间的差异。</summary>
      <returns>一个新的 DbGeometry 值，它代表此几何值和 <paramref name="other" /> 之间的差异。</returns>
      <param name="other">与该值的差别应被计算出来的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.Dimension">
      <summary>获取给定值 <see cref="T:System.Data.Spatial.DbGeometry" /> 的维度，如果该值为一个集合，则获取其中最大元素的维度。</summary>
      <returns>给定的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的维度。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Disjoint(System.Data.Spatial.DbGeometry)">
      <summary>确定此 DbGeography 是否和其指定的 DbGeography 论据在空间上不连续。</summary>
      <returns>如果 <paramref name="other" /> 与此几何值不相交，则为 true；否则为 false。</returns>
      <param name="other">应与该几何图形值比较非相交的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Distance(System.Data.Spatial.DbGeometry)">
      <summary>计算此 DbGeometry 值和其他 DbGeometry 值中两个最接近的点之间的距离。</summary>
      <returns>在此几何值和 <paramref name="other" /> 中指定两个最接近的点之间的距离的双精确值。</returns>
      <param name="other">与该值的距离应被计算出来的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.ElementAt(System.Int32)">
      <summary>如果其表示几何图形集合，则从特定位置返回 DbGeometry 值的元素。&lt;param name="index"&gt;此几何值内应该用来选取元素的位置。&lt;/param&gt;&lt;returns&gt;如果它表示其他几何值的集合，则为此几何值中指定位置的元素；否则为 null。&lt;/returns&gt;</summary>
      <returns>特定位置中的此 DbGeometry 值的元素</returns>
      <param name="index">索引。</param>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.ElementCount">
      <summary>如果其表示几何图形集合，则获取该 DbGeometry 值内的元素的数目。&lt;returns&gt;如果它表示其他几何值的集合，则为此几何值中的元素数；否则为 null。&lt;/returns&gt;</summary>
      <returns>在 DbGeometry 值中的元素的数目。</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.Elevation">
      <summary>如果该 DbGeometry 值表示一个点，则获取它的高程值（Z坐标）。&lt;returns&gt;如果它表示一个点，则为此几何值的提升（Z 坐标）；否则为 null。&lt;/returns&gt;</summary>
      <returns>提升该 DbGeometry 值 (Z 坐标)。</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.EndPoint">
      <summary>获取表示此值起点的 DbGeometry 值，如果 DbGeometry 值不表示曲线，此值可能是零。</summary>
      <returns>DbGeometry 值表示该值的起点。</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.Envelope">
      <summary>以几何值获取 DbGeometry 值的信封（最小外接矩形）。</summary>
      <returns>该 DbGeometry 值的信封（极小的边界框）。</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.ExteriorRing">
      <summary>获取表示此 DbGeometry 值的外部环的 DbGeometry 值，如果此值不表示多边形，则可能为 null。</summary>
      <returns>表示 DbGeometry 值的外部循环的 DbGeometry 值。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.FromBinary(System.Byte[])">
      <summary>创建基于指定已知二进制值的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。</summary>
      <returns>通过默认的几何图形坐标系统标识符 (SRID)，由知名二进制值定义的新的 DbGeometry 值 (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />)。</returns>
      <param name="wellKnownBinary">包含几何值的知名二进制表示形式的字节数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinary" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.FromBinary(System.Byte[],System.Int32)">
      <summary>创建基于指定已知二进制值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。</summary>
      <returns>通过指定坐标系统标识符由知名二进制值定义的新的 DbGeometry 值。</returns>
      <param name="wellKnownBinary">包含几何值的知名二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新 DbGeometry 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.FromGml(System.String)">
      <summary>创建基于指定地理标记语言 (GML) 值的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。</summary>
      <returns>通过默认的几何图形坐标系统标识符 (SRID)，由 GML 值定义的新的 DbGeometry 值 (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />)。</returns>
      <param name="geometryMarkup">包含几何值的地理标记语言 (GML) 表示形式的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryMarkup" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.FromGml(System.String,System.Int32)">
      <summary>创建基于指定地理标记语言 (GML) 值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。</summary>
      <returns>通过指定坐标系统标识符由 GML 值定义的新的 DbGeometry 值。</returns>
      <param name="geometryMarkup">包含几何值的地理标记语言 (GML) 表示形式的字符串。</param>
      <param name="coordinateSystemId">新 DbGeometry 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryMarkup" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.FromText(System.String)">
      <summary>创建基于指定已知文本值的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。</summary>
      <returns>通过默认的几何图形坐标系统标识符 (SRID)，由知名文本值定义的新的 DbGeometry 值 (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />)。</returns>
      <param name="wellKnownText">包含知名几何图形值的文本表示形式的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.FromText(System.String,System.Int32)">
      <summary>创建基于指定已知文本值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。</summary>
      <returns>通过指定坐标系统标识符由知名文本值定义的新的 DbGeometry 值。</returns>
      <param name="wellKnownText">包含知名几何图形值的文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新 DbGeometry 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.GeometryCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>创建基于指定已知二进制值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 集合值。</summary>
      <returns>通过指定坐标系统标识符由知名二进制值定义的新的 DbGeometry 值。</returns>
      <param name="geometryCollectionWellKnownBinary">包含几何值的知名二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新 DbGeometry 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryCollectionWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.GeometryCollectionFromText(System.String,System.Int32)">
      <summary>创建基于指定已知文本值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 集合值。</summary>
      <returns>通过指定坐标系统标识符由知名文本值定义的新的 DbGeometry 值。</returns>
      <param name="geometryCollectionWellKnownText">包含知名几何图形值的文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新 DbGeometry 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryCollectionWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.InteriorRingAt(System.Int32)">
      <summary>如果其表示多边形，则在特定位置返回 DbGeometry 值中的内环。&lt;param name="index"&gt;此几何值内应该用来选取内环的位置。&lt;/param&gt;&lt;returns&gt;如果它表示一个多边形，则为此几何值中指定位置的内环；否则为 null。&lt;/returns&gt;</summary>
      <returns>特定位置的此 DbGeometry 值中的内环。</returns>
      <param name="index">索引。</param>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.InteriorRingCount">
      <summary>如果其表示多边形，则获取该 DbGeometry 值中的内部圆环的个数。&lt;returns&gt;如果它表示一个多边形，则为此几何值中的元素数；否则为 null。&lt;/returns&gt;</summary>
      <returns>在此 DbGeometry 值中的内部圆环的数目。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Intersection(System.Data.Spatial.DbGeometry)">
      <summary>计算此 DbGeometry 值和其他 DbGeometry 值的交集。</summary>
      <returns>一个新的 DbGeometry 值，它代表此几何值和 <paramref name="other" /> 之间的交集。</returns>
      <param name="other">与该值的交集应被计算出来的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Intersects(System.Data.Spatial.DbGeometry)">
      <summary>确定此 DbGeography 是否相交指定的 DbGeography 论据。</summary>
      <returns>如果 <paramref name="other" /> 与此几何值相交，则为 true；否则为 false。</returns>
      <param name="other">应与该几何图形值比较交集部分的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.IsClosed">
      <summary>获取指示此 DbGeometry 值是否关闭的可为 Null 的“布尔”值，如果此值不表示曲线，则可以为零。</summary>
      <returns>如果此 DbGeometry 值关闭，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.IsEmpty">
      <summary>获取指示此 DbGeometry 值是否为空的可为 Null 的“布尔”值，如果此值不表示曲线，则可以为零。</summary>
      <returns>如果此 DbGeometry 值为空，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.IsRing">
      <summary>获取指示此 DbGeometry 值是否为环的可为 Null 的“布尔”值，如果此值不表示曲线，则可以为零。</summary>
      <returns>如果此 DbGeometry 值为环形，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.IsSimple">
      <summary>获取一个可为 null 的布尔值，指示此 DbGeometry 值是否是简单的。</summary>
      <returns>如果此 DbGeometry 值很简单，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.IsValid">
      <summary>获取指示此 DbGeometry 值是否有效。</summary>
      <returns>如果此 DbGeometry 值有效，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.Length">
      <summary>获取指示此 DbGeometry 值区域的双精度值，如果此值不表示图面，则可以为零。</summary>
      <returns>该 DbGeometry 值的长度。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.LineFromBinary(System.Byte[],System.Int32)">
      <summary>创建基于指定已知二进制值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 行值。</summary>
      <returns>通过指定坐标系统标识符由知名二进制值定义的新的 DbGeometry 值。</returns>
      <param name="lineWellKnownBinary">包含几何值的知名二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新 DbGeometry 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.LineFromText(System.String,System.Int32)">
      <summary>创建基于指定已知文本值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 行值。</summary>
      <returns>通过指定坐标系统标识符由知名文本值定义的新的 DbGeometry 值。</returns>
      <param name="lineWellKnownText">包含知名几何图形值的文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新 DbGeometry 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.Measure">
      <summary>如果该 DbGeometry 值表示一个点，则获取它的测量值（ M 坐标）。&lt;returns&gt;如果它表示一个点，则为此几何值的测量值（M 坐标）；否则为 null。&lt;/returns&gt;</summary>
      <returns>此 DbGeography 值的测量（ M 坐标）。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.MultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>返回从二进制值的多行的值。</summary>
      <returns>来自二进制值的多线的值。</returns>
      <param name="multiLineWellKnownBinary">已知的二进制值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.MultiLineFromText(System.String,System.Int32)">
      <summary>返回从显着的文本值的多多边形值。</summary>
      <returns>来自熟知文本值的多线值。</returns>
      <param name="multiLineWellKnownText">已知的文本。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.MultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>返回从显着的二进制值的多多边形值。</summary>
      <returns>来自熟知二进制值的多点值。</returns>
      <param name="multiPointWellKnownBinary">已知的二进制值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.MultiPointFromText(System.String,System.Int32)">
      <summary>返回从显着的文本值的多多边形值。</summary>
      <returns>来自熟知文本值多点值。</returns>
      <param name="multiPointWellKnownText">已知的文本值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.MultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>返回从显着的二进制值的多多边形值。</summary>
      <returns>来自熟知文本值多点值。</returns>
      <param name="multiPolygonWellKnownBinary">多多边形熟知文本值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.MultiPolygonFromText(System.String,System.Int32)">
      <summary>返回从显着的二进制值的多多边形值。</summary>
      <returns>来自于熟知的二进制值的多多边形值。</returns>
      <param name="multiPolygonWellKnownText">多多边形熟知文本值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Overlaps(System.Data.Spatial.DbGeometry)">
      <summary>确定此 DbGeography 是否重叠指定的 DbGeography 论据。</summary>
      <returns>如果此几何值与 <paramref name="other" /> 重叠，则为 true；否则为 false。</returns>
      <param name="other">应与该几何图形值比较重叠的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.PointAt(System.Int32)">
      <summary>如果其表示行字符串或线性环，则从特定位置返回此 DbGeometry 值的元素。&lt;param name="index"&gt;此几何值内应该用来选取元素的位置。&lt;/param&gt;&lt;returns&gt;如果它表示行字符串或线性环，则为此几何值中指定位置的元素；否则为 null。&lt;/returns&gt;</summary>
      <returns>特定位置中的此 DbGeometry 值的元素</returns>
      <param name="index">索引。</param>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.PointCount">
      <summary>如果其表示行字符串或线性环，则获取该 DbGeometry 值内的点数。&lt;returns&gt;如果它表示行字符串或线性环，则为此几何值中的元素数；否则为 null。&lt;/returns&gt;</summary>
      <returns>在此 DbGeometry 值中的点数。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.PointFromBinary(System.Byte[],System.Int32)">
      <summary>创建基于指定已知二进制值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 点值。</summary>
      <returns>通过指定坐标系统标识符由知名二进制值定义的新的 DbGeometry 值。</returns>
      <param name="pointWellKnownBinary">包含几何值的知名二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新 DbGeometry 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.PointFromText(System.String,System.Int32)">
      <summary>创建基于指定已知文本值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 点值。</summary>
      <returns>通过指定坐标系统标识符由知名文本值定义的新的 DbGeometry 值。</returns>
      <param name="pointWellKnownText">包含知名几何图形值的文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新 DbGeometry 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.PointOnSurface">
      <summary>获取此 DbGeometry 值区域的点，如果此值不表示图面，则可以为零。</summary>
      <returns>此 DbGeometry 值表面上的点。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.PolygonFromBinary(System.Byte[],System.Int32)">
      <summary>创建基于指定已知二进制值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 多多边形值。</summary>
      <returns>通过指定坐标系统标识符由知名二进制值定义的新的 DbGeometry 值。</returns>
      <param name="polygonWellKnownBinary">包含几何值的知名二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新 DbGeometry 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.PolygonFromText(System.String,System.Int32)">
      <summary>创建基于指定已知文本值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 多多边形值。</summary>
      <returns>通过指定坐标系统标识符由知名文本值定义的新的 DbGeometry 值。</returns>
      <param name="polygonWellKnownText">包含知名几何图形值的文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新 DbGeometry 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.ProviderValue">
      <summary>获取此 DbGeometry 值的表示形式，其值被指定到构造它的基础提供程序。</summary>
      <returns>此 DbGeometry 值的表示形式。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Relate(System.Data.Spatial.DbGeometry,System.String)">
      <summary>基于给定的 Dimensionally Extended Nine-Intersection Model (DE-9IM) 交集模式来确定 DbGeometry 值 是否与给定的 DbGeometry 论据在空间上相关联。</summary>
      <returns>如果根据指定的相交式矩阵，此几何值与 <paramref name="other" /> 相关，则为 true；否则为 false。</returns>
      <param name="other">应与该几何图形值比较关系的几何图形值。</param>
      <param name="matrix">字符串包含定义了关系的 (DE-9IM) 交集模式的文本表示形式的。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
        <paramref name="matrix" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.SpatialEquals(System.Data.Spatial.DbGeometry)">
      <summary>确定此 DbGeography 是否和其指定的 DbGeography 论据在空间上相同。</summary>
      <returns>如果 <paramref name="other" /> 等于此几何值，则为 true；否则为 false。</returns>
      <param name="other">应与该几何图形值比较等价性的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.SpatialTypeName">
      <summary>获取此 DbGeometry 值的空间类型名称表示形式。</summary>
      <returns>此 DbGeometry 值的空间类型名称表示形式。</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.StartPoint">
      <summary>获取表示此值起点的 DbGeometry 值，如果 DbGeometry 值不表示曲线，此值可能是零。</summary>
      <returns>DbGeometry 值表示该值的起点。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.SymmetricDifference(System.Data.Spatial.DbGeometry)">
      <summary>计算此 DbGeometry 值和其他 DbGeometry 值之间的对称差异。</summary>
      <returns>一个新的 DbGeometry 值，它代表此几何值和 <paramref name="other" /> 之间的对称差异。</returns>
      <param name="other">与该值的余集应被计算出来的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.ToString">
      <summary>返回几何值的字符串表示形式。</summary>
      <returns>几何值的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Touches(System.Data.Spatial.DbGeometry)">
      <summary>确定此 DbGeography 值是否触碰指定的 DbGeography 论据。</summary>
      <returns>如果 <paramref name="other" /> 接近此几何值，则为 true；否则为 false。</returns>
      <param name="other">应与该几何图形值比较的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Union(System.Data.Spatial.DbGeometry)">
      <summary>计算此 DbGeometry 值和其他 DbGeometry 值的并集。</summary>
      <returns>一个新的 DbGeometry 值，它代表此几何值和 <paramref name="other" /> 之间的并集。</returns>
      <param name="other">与该值的并集应被计算出来的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.WellKnownValue">
      <summary>获取或设置此 DbGeometry 值的可序列化的已知表示形式的数据协定。</summary>
      <returns>数据协定的此 DbGeometry 值的可序列化的已知表示形式。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Within(System.Data.Spatial.DbGeometry)">
      <summary>确定此 DbGeography 值是否在其指定的 DbGeography 论据空间内。</summary>
      <returns>如果此几何值在 <paramref name="other" /> 中，则为 true；否则为 false。</returns>
      <param name="other">应与该几何图形值比较包含的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.XCoordinate">
      <summary>如果该 DbGeometry 值表示一个点，则获取它的 X 坐标。&lt;returns&gt;如果它表示一个点，则为此几何值的 X 坐标值；否则为 null。&lt;/returns&gt;</summary>
      <returns>DbGeometry 值 X 坐标值。</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.YCoordinate">
      <summary>如果该 DbGeometry 值表示一个点，则获取它的 Y 坐标。&lt;returns&gt;如果它表示一个点，则为此几何值的 Y 坐标值；否则为 null。&lt;/returns&gt;</summary>
      <returns>DbGeometry 值 Y 坐标。</returns>
    </member>
    <member name="T:System.Data.Spatial.DbGeometryWellKnownValue">
      <summary>
        <see cref="T:System.Data.Spatial.DbGeometry" /> 的数据协定可序列化表示形式。</summary>
    </member>
    <member name="M:System.Data.Spatial.DbGeometryWellKnownValue.#ctor">
      <summary>初始化 <see cref="T:System.Data.Spatial.DbGeometryWellKnownValue" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Data.Spatial.DbGeometryWellKnownValue.CoordinateSystemId">
      <summary>获取或设置此值的的坐标系统标识符 (SRID)。</summary>
    </member>
    <member name="P:System.Data.Spatial.DbGeometryWellKnownValue.WellKnownBinary">
      <summary>获取或设置此值的已知二进制表示形式。</summary>
    </member>
    <member name="P:System.Data.Spatial.DbGeometryWellKnownValue.WellKnownText">
      <summary>获取或设置此值的已知文本表示形式。</summary>
    </member>
    <member name="T:System.Data.Spatial.DbSpatialDataReader">
      <summary>地理空间（几何图形/地理）类型的支持与提供程序有关服务 API。</summary>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialDataReader.#ctor">
      <summary>初始化 <see cref="T:System.Data.Spatial.DbSpatialDataReader" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialDataReader.GetGeography(System.Int32)">
      <summary>当在派生类型中实现时，从指定列序号的列读取 <see cref="T:System.Data.Spatial.DbGeography" /> 的实例。</summary>
      <returns>在指定列值的 DbGeography 的实例。</returns>
      <param name="ordinal">包含地理值的列序号。</param>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialDataReader.GetGeometry(System.Int32)">
      <summary>当在派生类型中实现时，从指定列序号的列读取 <see cref="T:System.Data.Spatial.DbGeometry" /> 的实例。</summary>
      <returns>在指定列值的 DbGeometry 的实例。</returns>
      <param name="ordinal">包含提供程序指定几何图形数据的数据记录列的序号</param>
    </member>
    <member name="T:System.Data.Spatial.DbSpatialServices">
      <summary>表示地理空间（几何图形/地理）类型的支持与提供程序有关服务 API。</summary>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.#ctor">
      <summary>初始化 <see cref="T:System.Data.Spatial.DbSpatialServices" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.AsBinary(System.Data.Spatial.DbGeography)">
      <summary>获取给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值的已知二进制表示形式。</summary>
      <returns>已知二进制表示形式给定 <see cref="T:System.Data.Spatial.DbGeography" /> 的值。</returns>
      <param name="geographyValue">熟知的二进制应被生成的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.AsBinary(System.Data.Spatial.DbGeometry)">
      <summary>获取给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的已知二进制表示形式。</summary>
      <returns>已知二进制表示形式给定 <see cref="T:System.Data.Spatial.DbGeography" /> 的值。</returns>
      <param name="geometryValue">熟知的二进制应被生成的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.AsGml(System.Data.Spatial.DbGeography)">
      <summary>生成此 <see cref="T:System.Data.Spatial.DbGeography" /> 值的 Geography Markup Language (GML) 表示。</summary>
      <returns>此 DbGeography 值包含 GML 的字符串表示形式。</returns>
      <param name="geographyValue">GML 应被生成的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.AsGml(System.Data.Spatial.DbGeometry)">
      <summary>生成此 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的 Geography Markup Language (GML) 表示。</summary>
      <returns>此 DbGeometry 值包含 GML 的字符串表示形式。</returns>
      <param name="geometryValue">GML 应被生成的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.AsText(System.Data.Spatial.DbGeography)">
      <summary>获取给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值的已知文本表示形式。 此值仅应包括点的经度和纬度。</summary>
      <returns>包含已知 <paramref name="geographyValue" /> 文本表示形式的字符串。</returns>
      <param name="geographyValue">熟知的文本应被生成的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.AsText(System.Data.Spatial.DbGeometry)">
      <summary>获取特定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的已知的文本表示形式，仅包括点的 X 和 Y 坐标。</summary>
      <returns>包含已知 <paramref name="geometryValue" /> 文本表示形式的字符串。</returns>
      <param name="geometryValue">熟知的文本应被生成的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.AsTextIncludingElevationAndMeasure(System.Data.Spatial.DbGeography)">
      <summary>使用提升和度量返回 <see cref="T:System.Data.Spatial.DbSpatialServices" /> 的文本表示形式。</summary>
      <returns>
        <see cref="T:System.Data.Spatial.DbSpatialServices" /> 的文本表示形式。</returns>
      <param name="geographyValue">地理值。</param>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.AsTextIncludingElevationAndMeasure(System.Data.Spatial.DbGeometry)">
      <summary>使用提升和度量返回 <see cref="T:System.Data.Spatial.DbSpatialServices" /> 的文本表示形式。</summary>
      <returns>使用提升和度量的 <see cref="T:System.Data.Spatial.DbSpatialServices" /> 的文本表示形式。</returns>
      <param name="geometryValue">几何图形值。</param>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Buffer(System.Data.Spatial.DbGeography,System.Double)">
      <summary>从给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值创建代表所有小于或等于 <paramref name="distance" /> 的点的地理值。</summary>
      <returns>一个新的 DbGeography 值，它代表所有小于或等于 <paramref name="geographyValue" /> 中的 <paramref name="distance" /> 的点。</returns>
      <param name="geographyValue">地理值。</param>
      <param name="distance">指定从 <paramref name="geographyValue" /> 到缓冲区距离的双精度值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Buffer(System.Data.Spatial.DbGeometry,System.Double)">
      <summary>从给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值创建代表所有小于或等于 <paramref name="distance" /> 的点的几何值。</summary>
      <returns>一个新的 DbGeometry 值，它代表所有小于或等于 <paramref name="geometryValue" /> 中的 <paramref name="distance" /> 的点。</returns>
      <param name="geometryValue">几何图形值。</param>
      <param name="distance">指定从 <paramref name="geometryValue" /> 到缓冲区距离的双精度值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Contains(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>确定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值是否包含在其他空间相交。</summary>
      <returns>如果 <paramref name="geometryValue" /> 包含 <paramref name="otherGeometry" />，则为 true；否则为 false。</returns>
      <param name="geometryValue">第一个几何图形值。</param>
      <param name="otherGeometry">第二个几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.CreateGeography(System.Data.Spatial.DbSpatialServices,System.Object)">
      <summary>在指定提供程序值的合适验证后， <see cref="M:System.Data.Spatial.DbSpatialServices.GeographyFromProviderValue(System.Object)" /> 的派生实现使用此方法，以确保其适用于派生实现。</summary>
      <returns>包含指定的 <paramref name="providerValue" /> 并使用指定的 <paramref name="spatialServices" /> 作为其空间实现的新 <see cref="T:System.Data.Spatial.DbGeography" /> 实例。</returns>
      <param name="spatialServices">返回的<see cref="T:System.Data.Spatial.DbGeography" /> 的值将依赖的空间服务实例用于空间函数的实现。</param>
      <param name="providerValue">提供程序值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialServices" />
        <paramref name="providerValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.CreateGeometry(System.Data.Spatial.DbSpatialServices,System.Object)">
      <summary>在指定提供程序值的合适验证后， <see cref="M:System.Data.Spatial.DbSpatialServices.GeometryFromProviderValue(System.Object)" /> 的派生实现使用此方法，以确保其适用于派生实现。</summary>
      <returns>包含指定的 <paramref name="providerValue" /> 并使用指定的 <paramref name="spatialServices" /> 作为其空间实现的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 实例。</returns>
      <param name="spatialServices">返回的<see cref="T:System.Data.Spatial.DbGeometry" /> 的值将依赖的空间服务实例用于空间函数的实现。</param>
      <param name="providerValue">提供程序值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialServices" />
        <paramref name="providerValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.CreateProviderValue(System.Data.Spatial.DbGeographyWellKnownValue)">
      <summary>创建提供程序特定的值，该值与此空间服务的实现兼容，而此实现基于指定的已知 <see cref="T:System.Data.Spatial.DbGeography" /> 表示形式的。</summary>
      <returns>一个特定于提供程序的值，它采用与此空间服务实现兼容的方式对 <paramref name="wellKnownValue" /> 中包含的信息进行编码。</returns>
      <param name="wellKnownValue">包含地理值的知名表示行式的 <see cref="T:System.Data.Spatial.DbGeographyWellKnownValue" /> 实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.CreateProviderValue(System.Data.Spatial.DbGeometryWellKnownValue)">
      <summary>创建提供程序特定的值，该值与此空间服务的实现兼容，而此实现基于指定的已知 <see cref="T:System.Data.Spatial.DbGeometry" /> 表示形式的。</summary>
      <returns>一个特定于提供程序的值，它采用与此空间服务实现兼容的方式对 <paramref name="wellKnownValue" /> 中包含的信息进行编码。</returns>
      <param name="wellKnownValue">包含几何图形值的知名表示行式的 <see cref="T:System.Data.Spatial.DbGeometryWellKnownValue" /> 实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.CreateWellKnownValue(System.Data.Spatial.DbGeography)">
      <summary>使用一或两个标准已知空间格式，创建表示指定 <see cref="T:System.Data.Spatial.DbGeography" /> 值的 <see cref="T:System.Data.Spatial.DbGeographyWellKnownValue" /> 实例。</summary>
      <returns>作为新 <see cref="T:System.Data.Spatial.DbGeographyWellKnownValue" /> 的 <paramref name="geographyValue" /> 的已知表示形式。</returns>
      <param name="geographyValue">地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.CreateWellKnownValue(System.Data.Spatial.DbGeometry)">
      <summary>使用一或两个标准已知空间格式，创建表示指定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的 <see cref="T:System.Data.Spatial.DbGeometryWellKnownValue" /> 实例。</summary>
      <returns>作为新 <see cref="T:System.Data.Spatial.DbGeometryWellKnownValue" /> 的 <paramref name="geometryValue" /> 的已知表示形式。</returns>
      <param name="geometryValue">几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Crosses(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>确定两个给定的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值是否在空间上相交。</summary>
      <returns>如果 <paramref name="geometryValue" /> 跨 <paramref name="otherGeometry" />，则为 true；否则为 false。</returns>
      <param name="geometryValue">第一个几何图形值。</param>
      <param name="otherGeometry">第二个几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbSpatialServices.Default">
      <summary>为 <see cref="T:System.Data.Spatial.DbSpatialServices" />获取默认服务。</summary>
      <returns>默认服务。</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Difference(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>计算两个 <see cref="T:System.Data.Spatial.DbGeography" /> 值的差异。</summary>
      <returns>一个新的 DbGeography 值，它代表 <paramref name="geographyValue" /> 和 <paramref name="otherGeography" /> 的差异。</returns>
      <param name="geographyValue">第一个地理值。</param>
      <param name="otherGeography">第二个地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Difference(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>计算两个 <see cref="T:System.Data.Spatial.DbGeometry" /> 值之间的差异。</summary>
      <returns>一个新的 DbGeometry 值，它代表 <paramref name="geometryValue" /> 和 <paramref name="otherGeometry" /> 之间的差异。</returns>
      <param name="geometryValue">第一个几何图形值。</param>
      <param name="otherGeometry">第二个几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Disjoint(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>确定两个给定的 <see cref="T:System.Data.Spatial.DbGeography" /> 值是否在空间上不连续。</summary>
      <returns>如果 <paramref name="geographyValue" /> 与 <paramref name="otherGeography" /> 不相交，则为 true；否则为 false。</returns>
      <param name="geographyValue">用来比较非相交性的第一个地理值。</param>
      <param name="otherGeography">用来比较非相交性的第二个地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Disjoint(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>确定两个给定的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值是否在空间上不连续。</summary>
      <returns>如果 <paramref name="geometryValue" /> 与 <paramref name="otherGeometry" /> 不相交，则为 true；否则为 false。</returns>
      <param name="geometryValue">用来比较非相交性的第一个几何图形值。</param>
      <param name="otherGeometry">用来比较非相交性的第二个几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Distance(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>计算两个 <see cref="T:System.Data.Spatial.DbGeography" /> 值中最接近的点之间的距离。</summary>
      <returns>在 <paramref name="geographyValue" /> 和 <paramref name="otherGeography" /> 中指定两个最接近的点之间的距离的双精确值。</returns>
      <param name="geographyValue">第一个地理值。</param>
      <param name="otherGeography">第二个地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Distance(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>计算两个 <see cref="T:System.Data.Spatial.DbGeometry" /> 值中的最近点的距离。</summary>
      <returns>在 <paramref name="geometryValue" /> 和 <paramref name="otherGeometry" /> 中指定两个最接近的点之间的距离的双精确值。</returns>
      <param name="geometryValue">第一个几何图形值。</param>
      <param name="otherGeometry">第二个几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.ElementAt(System.Data.Spatial.DbGeography,System.Int32)">
      <summary>如果其表示地理集合，则返回给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值的元素。</summary>
      <returns>如果它表示其他地理值的集合，则是在 <paramref name="index" /> 位置的 <paramref name="geographyValue" /> 中的元素；否则为 null。</returns>
      <param name="geographyValue">不需要表示地理集合的地理值。</param>
      <param name="index">在地理值中元素应被采用的的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.ElementAt(System.Data.Spatial.DbGeometry,System.Int32)">
      <summary>如果其表示几何图形集合，则返回给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的元素。</summary>
      <returns>如果它表示其他几何值的集合，则是在 <paramref name="index" /> 位置的 <paramref name="geometryValue" /> 中的元素；否则为 null。</returns>
      <param name="geometryValue">不需要表示几何图形集合的几何图形值。</param>
      <param name="index">在几何值中元素应被采用的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>创建基于指定已知二进制值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeography" /> 集合值。</summary>
      <returns>通过指定坐标系统标识符 (SRID) 由知名二进制值定义的新的 <see cref="T:System.Data.Spatial.DbGeography" /> 值 <see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />。</returns>
      <param name="geographyCollectionWellKnownBinary">包含地理值的知名二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新建 <see cref="T:System.Data.Spatial.DbGeography" /> 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyCollectionWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyCollectionFromText(System.String,System.Int32)">
      <summary>创建基于指定已知文本值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeography" /> 集合值。</summary>
      <returns>通过指定坐标系统标识符 (SRID) 由知名文本值定义的新的 <see cref="T:System.Data.Spatial.DbGeography" /> 值 <see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />。</returns>
      <param name="geographyCollectionWellKnownText">包含知名地理值的文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新建 <see cref="T:System.Data.Spatial.DbGeography" /> 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyCollectionWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyFromBinary(System.Byte[])">
      <summary>创建基于指定已知二进制值的新 <see cref="T:System.Data.Spatial.DbGeography" /> 值。</summary>
      <returns>通过默认的 <see cref="T:System.Data.Spatial.DbGeography" /> 坐标系统标识符 (SRID)，由知名二进制值定义的新的 <see cref="T:System.Data.Spatial.DbGeography" /> 值 <see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />。</returns>
      <param name="wellKnownBinary">包含地理值的知名二进制表示形式的字节数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinary" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyFromBinary(System.Byte[],System.Int32)">
      <summary>创建基于指定已知二进制值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeography" /> 值。</summary>
      <returns>通过指定坐标系统标识符 (SRID) 由知名二进制值定义的新的 <see cref="T:System.Data.Spatial.DbGeography" /> 值 <see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />。</returns>
      <param name="wellKnownBinary">包含地理值的知名二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新建 <see cref="T:System.Data.Spatial.DbGeography" /> 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyFromGml(System.String)">
      <summary>创建基于指定地理标记语言 (GML) 值的新 <see cref="T:System.Data.Spatial.DbGeography" /> 值。</summary>
      <returns>通过默认的 <see cref="T:System.Data.Spatial.DbGeography" /> 坐标系统标识符 (SRID)，由 GML 值定义的新的 <see cref="T:System.Data.Spatial.DbGeography" /> 值 <see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />。</returns>
      <param name="geographyMarkup">包含地理值的几何图形标记语言 (GML) 表示形式的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyMarkup" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyFromGml(System.String,System.Int32)">
      <summary>创建基于指定地理标记语言 (GML) 值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeography" /> 值。</summary>
      <returns>通过指定坐标系统标识符 (SRID) 由 GML 值定义的新的 <see cref="T:System.Data.Spatial.DbGeography" /> 值。</returns>
      <param name="geographyMarkup">包含地理值的几何图形标记语言 (GML) 表示形式的字符串。</param>
      <param name="coordinateSystemId">新建 <see cref="T:System.Data.Spatial.DbGeography" /> 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyMarkup" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyFromProviderValue(System.Object)">
      <summary>创建基于提供程序特定的值的新 <see cref="T:System.Data.Spatial.DbGeography" /> 值，该提供程序特定的值与此空间服务的实现兼容。</summary>
      <returns>此空间服务的实现与指定提供程序的值支持新 <see cref="T:System.Data.Spatial.DbGeography" /> 值。</returns>
      <param name="providerValue">此空间服务的实现特定于提供程序的值能够解释为地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="providerValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyFromText(System.String)">
      <summary>创建基于指定已知文本值的新 <see cref="T:System.Data.Spatial.DbGeography" /> 值。</summary>
      <returns>通过默认的 <see cref="T:System.Data.Spatial.DbGeography" /> 坐标系统标识符 (SRID)，由知名文本值定义的新的 <see cref="T:System.Data.Spatial.DbGeography" /> 值 <see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />。</returns>
      <param name="wellKnownText">包含知名地理值的文本表示形式的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyFromText(System.String,System.Int32)">
      <summary>创建基于指定已知文本值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeography" /> 值。</summary>
      <returns>通过指定坐标系统标识符 (SRID) 由知名文本值定义的新的 <see cref="T:System.Data.Spatial.DbGeography" /> 值 <see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />。</returns>
      <param name="wellKnownText">包含知名地理值的文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新建 <see cref="T:System.Data.Spatial.DbGeography" /> 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyLineFromBinary(System.Byte[],System.Int32)">
      <summary>创建基于指定已知二进制值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeography" /> 行值。</summary>
      <returns>通过指定坐标系统标识符 (SRID) 由知名二进制值定义的新的 <see cref="T:System.Data.Spatial.DbGeography" /> 值 <see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />。</returns>
      <param name="lineWellKnownBinary">包含地理值的知名二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新建 <see cref="T:System.Data.Spatial.DbGeography" /> 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyLineFromText(System.String,System.Int32)">
      <summary>创建基于指定已知文本值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeography" /> 行值。</summary>
      <returns>通过指定坐标系统标识符 (SRID) 由知名文本值定义的新的 <see cref="T:System.Data.Spatial.DbGeography" /> 值 <see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />。</returns>
      <param name="lineWellKnownText">包含知名地理值的文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新建 <see cref="T:System.Data.Spatial.DbGeography" /> 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyMultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>创建基于指定已知二进制值和坐标系统标识符的新 <see cref="T:System.Data.Spatial.DbGeography" /> 多行值。</summary>
      <returns>新 <see cref="T:System.Data.Spatial.DbGeography" /> 多行值。</returns>
      <param name="multiLineWellKnownBinary">已知的二进制值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyMultiLineFromText(System.String,System.Int32)">
      <summary>创建基于指定已知文本值和坐标系统标识符的新 <see cref="T:System.Data.Spatial.DbGeography" /> 多行值。</summary>
      <returns>新的 <see cref="T:System.Data.Spatial.DbGeography" /> 多行值。</returns>
      <param name="multiLineWellKnownText">已知的文本值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyMultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>创建基于指定已知二进制值和坐标系统标识符的新 <see cref="T:System.Data.Spatial.DbGeography" /> 多点值。</summary>
      <returns>新的 <see cref="T:System.Data.Spatial.DbGeography" /> 多点值。</returns>
      <param name="multiPointWellKnownBinary">已知的二进制值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyMultiPointFromText(System.String,System.Int32)">
      <summary>创建基于指定已知文本值和坐标系统标识符的新 <see cref="T:System.Data.Spatial.DbGeography" /> 多点值。</summary>
      <returns>新的 <see cref="T:System.Data.Spatial.DbGeography" /> 多点值。</returns>
      <param name="multiPointWellKnownText">已知的文本值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyMultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>创建基于指定已知二进制值和坐标系统标识符的新 <see cref="T:System.Data.Spatial.DbGeography" /> 多多边形值。</summary>
      <returns>新的 <see cref="T:System.Data.Spatial.DbGeography" /> 多边形值。</returns>
      <param name="multiPolygonWellKnownBinary">已知的二进制值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyMultiPolygonFromText(System.String,System.Int32)">
      <summary>创建基于指定已知文本值和坐标系统标识符的新 <see cref="T:System.Data.Spatial.DbGeography" /> 多多边形值。</summary>
      <returns>新的 <see cref="T:System.Data.Spatial.DbGeography" /> 多边形值。</returns>
      <param name="multiPolygonWellKnownText">已知的文本值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyPointFromBinary(System.Byte[],System.Int32)">
      <summary>创建基于指定已知二进制值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeography" /> 点值。</summary>
      <returns>通过指定坐标系统标识符 (SRID) 由知名二进制值定义的新的 <see cref="T:System.Data.Spatial.DbGeography" /> 值 <see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />。</returns>
      <param name="pointWellKnownBinary">包含地理值的知名二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新建 <see cref="T:System.Data.Spatial.DbGeography" /> 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyPointFromText(System.String,System.Int32)">
      <summary>创建基于指定已知文本值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeography" /> 点值。</summary>
      <returns>通过指定坐标系统标识符 (SRID) 由知名文本值定义的新的 <see cref="T:System.Data.Spatial.DbGeography" /> 值 <see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />。</returns>
      <param name="pointWellKnownText">包含知名地理值的文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新建 <see cref="T:System.Data.Spatial.DbGeography" /> 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>创建基于指定已知二进制值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeography" /> 多多边形值。</summary>
      <returns>通过指定坐标系统标识符 (SRID) 由知名二进制值定义的新的 <see cref="T:System.Data.Spatial.DbGeography" /> 值 <see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />。</returns>
      <param name="polygonWellKnownBinary">包含地理值的知名二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新建 <see cref="T:System.Data.Spatial.DbGeography" /> 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyPolygonFromText(System.String,System.Int32)">
      <summary>创建基于指定已知文本值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeography" /> 多多边形值。</summary>
      <returns>通过指定坐标系统标识符 (SRID) 由知名文本值定义的新的 <see cref="T:System.Data.Spatial.DbGeography" /> 值 <see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />。</returns>
      <param name="polygonWellKnownText">包含知名地理值的文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新建 <see cref="T:System.Data.Spatial.DbGeography" /> 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>创建基于指定已知二进制值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 集合值。</summary>
      <returns>通过指定坐标系统标识符 (SRID) 由知名二进制值定义的新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值 <see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />。</returns>
      <param name="geometryCollectionWellKnownBinary">包含几何值的知名二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新建 <see cref="T:System.Data.Spatial.DbGeometry" /> 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryCollectionWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryCollectionFromText(System.String,System.Int32)">
      <summary>创建基于指定已知文本值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 集合值。</summary>
      <returns>通过指定坐标系统标识符 (SRID) 由知名文本值定义的新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值 <see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />。</returns>
      <param name="geometryCollectionWellKnownText">包含知名几何图形值的文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新建 <see cref="T:System.Data.Spatial.DbGeometry" /> 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryCollectionWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryFromBinary(System.Byte[])">
      <summary>创建基于指定已知二进制值的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。</summary>
      <returns>通过默认的 <see cref="T:System.Data.Spatial.DbGeometry" /> 坐标系统标识符 (SRID)，由知名二进制值定义的新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值 <see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />。</returns>
      <param name="wellKnownBinary">包含几何值的知名二进制表示形式的字节数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinary" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryFromBinary(System.Byte[],System.Int32)">
      <summary>创建基于指定已知二进制值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。</summary>
      <returns>通过指定坐标系统标识符 (SRID) 由知名二进制值定义的新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值 <see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />。</returns>
      <param name="wellKnownBinary">包含几何值的知名二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新建 <see cref="T:System.Data.Spatial.DbGeometry" /> 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryFromGml(System.String)">
      <summary>创建基于指定地理标记语言 (GML) 值的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。</summary>
      <returns>通过默认的 <see cref="T:System.Data.Spatial.DbGeometry" /> 坐标系统标识符 (SRID)，由 GML 值定义的新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值 <see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />。</returns>
      <param name="geometryMarkup">包含几何值的地理标记语言 (GML) 表示形式的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryMarkup" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryFromGml(System.String,System.Int32)">
      <summary>创建基于指定地理标记语言 (GML) 值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。</summary>
      <returns>通过指定坐标系统标识符 (SRID) 由 GML 值定义的新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。</returns>
      <param name="geometryMarkup">包含几何值的地理标记语言 (GML) 表示形式的字符串。</param>
      <param name="coordinateSystemId">新建 <see cref="T:System.Data.Spatial.DbGeometry" /> 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryMarkup" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryFromProviderValue(System.Object)">
      <summary>创建基于提供程序特定的值的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，该提供程序特定的值与此空间服务的实现兼容。</summary>
      <returns>此空间服务的实现与指定提供程序的值支持新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。</returns>
      <param name="providerValue">此空间服务的实现特定于提供程序的值能够解释为几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="providerValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryFromText(System.String)">
      <summary>创建基于指定已知文本值的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。</summary>
      <returns>通过默认的 <see cref="T:System.Data.Spatial.DbGeometry" /> 坐标系统标识符 (SRID)，由知名文本值定义的新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值 <see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />。</returns>
      <param name="wellKnownText">包含知名几何图形值的文本表示形式的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryFromText(System.String,System.Int32)">
      <summary>创建基于指定已知文本值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。</summary>
      <returns>通过指定坐标系统标识符 (SRID) 由知名文本值定义的新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值 <see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />。</returns>
      <param name="wellKnownText">包含知名几何图形值的文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新建 <see cref="T:System.Data.Spatial.DbGeometry" /> 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryLineFromBinary(System.Byte[],System.Int32)">
      <summary>创建基于指定已知二进制值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 行值。</summary>
      <returns>通过指定坐标系统标识符 (SRID) 由知名二进制值定义的新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值 <see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />。</returns>
      <param name="lineWellKnownBinary">包含几何值的知名二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新建 <see cref="T:System.Data.Spatial.DbGeometry" /> 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryLineFromText(System.String,System.Int32)">
      <summary>创建基于指定已知文本值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 行值。</summary>
      <returns>通过指定坐标系统标识符 (SRID) 由知名文本值定义的新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值 <see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />。</returns>
      <param name="lineWellKnownText">包含知名几何图形值的文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新建 <see cref="T:System.Data.Spatial.DbGeometry" /> 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryMultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>创建基于指定已知二进制值和坐标系统标识符的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 多行值。</summary>
      <returns>新 <see cref="T:System.Data.Spatial.DbGeometry" /> 多行值。</returns>
      <param name="multiLineWellKnownBinary">已知的二进制值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryMultiLineFromText(System.String,System.Int32)">
      <summary>创建基于指定已知文本值和坐标系统标识符的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 多行值。</summary>
      <returns>新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 多行值。</returns>
      <param name="multiLineWellKnownText">已知的文本值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryMultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>创建基于指定已知二进制值和坐标系统标识符的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 多点值。</summary>
      <returns>新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 多点值。</returns>
      <param name="multiPointWellKnownBinary">已知的二进制值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryMultiPointFromText(System.String,System.Int32)">
      <summary>创建基于指定已知文本值和坐标系统标识符的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 多点值。</summary>
      <returns>新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 多点值。</returns>
      <param name="multiPointWellKnownText">已知的文本值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryMultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>创建基于指定已知二进制值和坐标系统标识符的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 多多边形值。</summary>
      <returns>新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 多边形值。</returns>
      <param name="multiPolygonWellKnownBinary">已知的二进制值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryMultiPolygonFromText(System.String,System.Int32)">
      <summary>创建基于指定已知文本值和坐标系统标识符的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 多多边形值。</summary>
      <returns>新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 多边形值。</returns>
      <param name="multiPolygonKnownText">已知的文本值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryPointFromBinary(System.Byte[],System.Int32)">
      <summary>创建基于指定已知二进制值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 点值。</summary>
      <returns>通过指定坐标系统标识符 (SRID) 由知名二进制值定义的新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值 <see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />。</returns>
      <param name="pointWellKnownBinary">包含几何值的知名二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新建 <see cref="T:System.Data.Spatial.DbGeometry" /> 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryPointFromText(System.String,System.Int32)">
      <summary>创建基于指定已知文本值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 点值。</summary>
      <returns>通过指定坐标系统标识符 (SRID) 由知名文本值定义的新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值 <see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />。</returns>
      <param name="pointWellKnownText">包含知名几何图形值的文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新建 <see cref="T:System.Data.Spatial.DbGeometry" /> 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>创建基于指定已知二进制值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 多多边形值。</summary>
      <returns>通过指定坐标系统标识符 (SRID) 由知名二进制值定义的新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值 <see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />。</returns>
      <param name="polygonWellKnownBinary">包含几何值的知名二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新建 <see cref="T:System.Data.Spatial.DbGeometry" /> 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryPolygonFromText(System.String,System.Int32)">
      <summary>创建基于指定已知文本值和坐标系统标识符 (SRID) 的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 多多边形值。</summary>
      <returns>通过指定坐标系统标识符 (SRID) 由知名文本值定义的新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值 <see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />。</returns>
      <param name="polygonWellKnownText">包含知名几何图形值的文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新建 <see cref="T:System.Data.Spatial.DbGeometry" /> 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetArea(System.Data.Spatial.DbGeography)">
      <summary>返回一个指示给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值的区域可以为 null 的双精度值，如果该值不表示图面则可能为 null。</summary>
      <returns>指示给定的 <see cref="T:System.Data.Spatial.DbGeography" /> 值的区域可以为 null 的双精度值。</returns>
      <param name="geographyValue">不需要表示平面的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetArea(System.Data.Spatial.DbGeometry)">
      <summary>返回一个指示给定 <see cref="T:System.Data.Spatial.DbGeometry" />  值的区域可以为 null 的双精度值，如果该值不表示图面则可能为 null。</summary>
      <returns>指示给定的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的区域可以为 null 的双精度值。</returns>
      <param name="geometryValue">不需要表示平面的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetBoundary(System.Data.Spatial.DbGeometry)">
      <summary>返回一个指示给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值的边界可以为 null 的双精度值。</summary>
      <returns>给定的 <see cref="T:System.Data.Spatial.DbGeography" /> 值的边界。</returns>
      <param name="geometryValue">几何图形值。</param>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetCentroid(System.Data.Spatial.DbGeometry)">
      <summary>返回表示给定 DbGeometry 值中心的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，如果该值不表示图面则可能为 null。</summary>
      <returns>如果它表示图面，则为 <paramref name="geometryValue" /> 的中心；否则为 null。</returns>
      <param name="geometryValue">不需要表示平面的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetConvexHull(System.Data.Spatial.DbGeometry)">
      <summary>返回一个指示给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值的凸包可以为 null 的双精度值。</summary>
      <returns>给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值的凸包。</returns>
      <param name="geometryValue">几何图形值。</param>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetCoordinateSystemId(System.Data.Spatial.DbGeography)">
      <summary>返回给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值的坐标系统标识符。</summary>
      <returns>给定的 <see cref="T:System.Data.Spatial.DbGeography" /> 值的坐标系统标识符。</returns>
      <param name="geographyValue">地理值。</param>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetCoordinateSystemId(System.Data.Spatial.DbGeometry)">
      <summary>返回给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的坐标系统标识符。</summary>
      <returns>给定的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的坐标系统标识符。</returns>
      <param name="geometryValue">几何图形值。</param>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetDimension(System.Data.Spatial.DbGeography)">
      <summary>如果值为集合，则获取给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值的维度或最大的元素维度。</summary>
      <returns>如果 <see cref="T:System.Data.Spatial.DbGeography" /> 为集合，则为 <paramref name="geographyValue" /> 的维度或最大的元素维度。</returns>
      <param name="geographyValue">尺寸值应被检索的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetDimension(System.Data.Spatial.DbGeometry)">
      <summary>如果值为集合，则获取给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的维度或最大的元素维度。</summary>
      <returns>如果 <see cref="T:System.Data.Spatial.DbGeometry" /> 为集合，则为 <paramref name="geometryValue" /> 的维度或最大的元素维度。</returns>
      <param name="geometryValue">尺寸值应被检索的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetElementCount(System.Data.Spatial.DbGeography)">
      <summary>如果其表示地理集合，则返回给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值的元素的数目。</summary>
      <returns>如果它表示其他地理值的集合，则为 <paramref name="geographyValue" /> 中的元素数；否则为 null。</returns>
      <param name="geographyValue">不需要表示地理集合的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetElementCount(System.Data.Spatial.DbGeometry)">
      <summary>如果其表示几何图形集合，则返回给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的元素的数目。</summary>
      <returns>如果它表示其他几何值的集合，则为 <paramref name="geometryValue" /> 中的元素数；否则为 null。</returns>
      <param name="geometryValue">不需要表示几何图形集合的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetElevation(System.Data.Spatial.DbGeography)">
      <summary>如果其表示点，则返回给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值的提升（Z 坐标）。</summary>
      <returns>如果它表示一个点，则为 <paramref name="geographyValue" /> 的提升（Z 坐标）；否则为 null。</returns>
      <param name="geographyValue">不需要表示点的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetElevation(System.Data.Spatial.DbGeometry)">
      <summary>如果其表示点，则返回给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的提升（Z）。</summary>
      <returns>如果它表示一个点，则为 <paramref name="geometryValue" /> 的提升 (Z)；否则为 null。</returns>
      <param name="geometryValue">不需要表示点的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetEndPoint(System.Data.Spatial.DbGeography)">
      <summary>返回表示给定 DbGeography 值终点的 <see cref="T:System.Data.Spatial.DbGeography" /> 值，如果该值不表示曲线则可能为 null。</summary>
      <returns>如果它表示一条曲线，则为 <paramref name="geographyValue" /> 的终点；否则为 null。</returns>
      <param name="geographyValue">不需要表示曲线的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetEndPoint(System.Data.Spatial.DbGeometry)">
      <summary>返回表示给定 DbGeometry 值终点的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，如果该值不表示曲线则可能为 null。</summary>
      <returns>如果它表示一条曲线，则为 <paramref name="geometryValue" /> 的终点；否则为 null。</returns>
      <param name="geometryValue">不需要表示曲线的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetEnvelope(System.Data.Spatial.DbGeometry)">
      <summary>对给定的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，以几何值获取其信封（最小外接矩形）。</summary>
      <returns>作为 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的 <paramref name="geometryValue" /> 的信封。</returns>
      <param name="geometryValue">信封值应被检索的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetExteriorRing(System.Data.Spatial.DbGeometry)">
      <summary>返回表示给定 DbGeometry 值外部循环的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，如果该值不表示多边形则可能为 null。</summary>
      <returns>如果表示的是多边形，则 DbGeometry 值表示 <paramref name="geometryValue" /> 的外部循环；否则为 null。</returns>
      <param name="geometryValue">不需要表示一个多边形的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetInteriorRingCount(System.Data.Spatial.DbGeometry)">
      <summary>如果其表示多边形，则返回给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值中内部圆环的项数。</summary>
      <returns>如果它表示一个多边形，则为 <paramref name="geometryValue" /> 中的元素数；否则为 null。</returns>
      <param name="geometryValue">不需要表示一个多边形的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetIsClosed(System.Data.Spatial.DbGeography)">
      <summary>返回可以为 null 的布尔值，该值给定的 <see cref="T:System.Data.Spatial.DbGeography" /> 值是否关闭，如果该值不表示曲线则可能为 null。</summary>
      <returns>如果给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值关闭，则为 true；否则为 false。</returns>
      <param name="geographyValue">不需要表示曲线的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetIsClosed(System.Data.Spatial.DbGeometry)">
      <summary>返回可以为 null 的布尔值，该值给定的 <see cref="T:System.Data.Spatial.DbGeometry" />  值是否关闭，如果该值不表示曲线则可能为 null。</summary>
      <returns>如果给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值关闭，则为 true；否则为 false。</returns>
      <param name="geometryValue">不需要表示曲线的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetIsEmpty(System.Data.Spatial.DbGeography)">
      <summary>返回一个可以为 null 的布尔值，该值是否给定 <see cref="T:System.Data.Spatial. DbGeography" /> 值为空。</summary>
      <returns>如果给定 <see cref="T:System.Data.Spatial. DbGeography" /> 值为空，则为 true；否则为 false。</returns>
      <param name="geographyValue">地理值。</param>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetIsEmpty(System.Data.Spatial.DbGeometry)">
      <summary>返回一个可以为 null 的布尔值，该值是否给定 <see cref="T:System.Data.Spatial. DbGeometry" /> 值为空。</summary>
      <returns>如果给定 <see cref="T:System.Data.Spatial. DbGeometry" /> 值为空，则为 true；否则为 false。</returns>
      <param name="geometryValue">几何图形值。</param>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetIsRing(System.Data.Spatial.DbGeometry)">
      <summary>返回一个可以为 null 的布尔值，该值给定的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值是否为环形，如果该值不表示曲线则可能为 null。</summary>
      <returns>如果给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值为环形，则为 true；否则为 false。</returns>
      <param name="geometryValue">不需要表示曲线的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetIsSimple(System.Data.Spatial.DbGeometry)">
      <summary>返回一个可以为 null 的布尔值，该值给定的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值是否很简单。</summary>
      <returns>如果给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值很简单，则为 true；否则为 false。</returns>
      <param name="geometryValue">几何图形值。</param>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetIsValid(System.Data.Spatial.DbGeometry)">
      <summary>返回一个可以为 null 的布尔值，该值给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值是否有效。</summary>
      <returns>如果给定的 <see cref="T:System.Data.Spatial.DbGeometry" />有效，则为 true；否则为 false。</returns>
      <param name="geometryValue">几何图形值。</param>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetLatitude(System.Data.Spatial.DbGeography)">
      <summary>如果其表示点，则返回给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值的纬度坐标。</summary>
      <returns>给定的 <see cref="T:System.Data.Spatial.DbGeography" /> 值的 Y 坐标。</returns>
      <param name="geographyValue">不需要表示点的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetLength(System.Data.Spatial.DbGeography)">
      <summary>返回一个指示给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值的长度可以为 null 的双精度值，如果该值不表示曲线则可能为 null。</summary>
      <returns>给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值的长度。</returns>
      <param name="geographyValue">不需要表示曲线的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetLength(System.Data.Spatial.DbGeometry)">
      <summary>返回一个指示给定 <see cref="T:System.Data.Spatial.DbGeometry" />  值的长度可以为 null 的双精度值，如果该值不表示曲线则可能为 null。</summary>
      <returns>给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的长度。</returns>
      <param name="geometryValue">不需要表示曲线的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetLongitude(System.Data.Spatial.DbGeography)">
      <summary>如果其表示点，则返回给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值的经度坐标。</summary>
      <returns>给定的 <see cref="T:System.Data.Spatial.DbGeography" /> 值的 Y 坐标。</returns>
      <param name="geographyValue">不需要表示点的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetMeasure(System.Data.Spatial.DbGeography)">
      <summary>如果其表示点，则返回给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值的 M（测量）坐标。</summary>
      <returns>给定的 <see cref="T:System.Data.Spatial.DbGeography" /> 值的 M (测量)坐标。</returns>
      <param name="geographyValue">不需要表示点的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetMeasure(System.Data.Spatial.DbGeometry)">
      <summary>如果其表示点，则返回给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的 M（Measure，测量）坐标。</summary>
      <returns>给定的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的 Y 坐标。</returns>
      <param name="geometryValue">不需要表示点的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetPointCount(System.Data.Spatial.DbGeography)">
      <summary>如果其表示行字符串或线性环，则返回在给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值的点数。</summary>
      <returns>给定的 <see cref="T:System.Data.Spatial.DbGeography" /> 值中的点数。</returns>
      <param name="geographyValue">不需要表示一个行字符串或线性环的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetPointCount(System.Data.Spatial.DbGeometry)">
      <summary>如果其表示行字符串或线性环，则返回在给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的点数。</summary>
      <returns>给定的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值中的点数。</returns>
      <param name="geometryValue">不需要表示一个行字符串或线性环的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">geometryValue</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetPointOnSurface(System.Data.Spatial.DbGeometry)">
      <summary>返回表示给定 DbGeometry 值表面上的点的<see cref="T:System.Data.Spatial.DbGeometry" /> 值，如果该值不表示图面则可能为 null。</summary>
      <returns>一个 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，表示给定的 DbGeometry 值表面上的点。</returns>
      <param name="geometryValue">不需要表示平面的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetSpatialTypeName(System.Data.Spatial.DbGeography)">
      <summary>返回指示给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值的空间类型名称的值。</summary>
      <returns>给定的 <see cref="T:System.Data.Spatial.DbGeography" /> 值的空间类型名称。</returns>
      <param name="geographyValue">地理值。</param>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetSpatialTypeName(System.Data.Spatial.DbGeometry)">
      <summary>返回指示给定 <see cref="T:System.Data.Spatial. DbGeometry" /> 值的空间类型名称的值。</summary>
      <returns>给定的 <see cref="T:System.Data.Spatial. DbGeometry" /> 值的空间类型名称。</returns>
      <param name="geometryValue">几何图形值。</param>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetStartPoint(System.Data.Spatial.DbGeography)">
      <summary>返回表示给定 DbGeography 值起点的 <see cref="T:System.Data.Spatial.DbGeography" /> 值，如果该值不表示曲线则可能为 null。</summary>
      <returns>给定的 <see cref="T:System.Data.Spatial.DbGeography" /> 值的启动点。</returns>
      <param name="geographyValue">不需要表示曲线的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetStartPoint(System.Data.Spatial.DbGeometry)">
      <summary>返回表示给定 DbGeometry 值起点的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，如果该值不表示曲线则可能为 null。</summary>
      <returns>给定的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的启动点。</returns>
      <param name="geometryValue">不需要表示曲线的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetXCoordinate(System.Data.Spatial.DbGeometry)">
      <summary>如果其表示点，则返回给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的 X 坐标。</summary>
      <returns>给定的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的 X 坐标。</returns>
      <param name="geometryValue">不需要表示点的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetYCoordinate(System.Data.Spatial.DbGeometry)">
      <summary>如果其表示点，则返回给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的 Y 坐标。</summary>
      <returns>给定的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的 Y 坐标。</returns>
      <param name="geometryValue">不需要表示点的几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.InteriorRingAt(System.Data.Spatial.DbGeometry,System.Int32)">
      <summary>如果其表示多边形，则返回给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值中的内环。</summary>
      <returns>位置 <paramref name="index" /> 处的 <paramref name="geometryValue" /> 的内环（如果它表示一个多边形）；否则为 null。</returns>
      <param name="geometryValue">不需要表示一个多边形的几何图形值。</param>
      <param name="index">在几何值中元素应被采用的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Intersection(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>计算两个 <see cref="T:System.Data.Spatial.DbGeography" /> 值的交集。</summary>
      <returns>一个新的 <see cref="T:System.Data.Spatial.DbGeography" /> 值，它表示 <paramref name="geographyValue" /> 和 <paramref name="otherGeography" /> 的交集。</returns>
      <param name="geographyValue">第一个地理值。</param>
      <param name="otherGeography">第二个地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Intersection(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>计算两个 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的交集。</summary>
      <returns>一个新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，它代表 <paramref name="geometryValue" /> 和 <paramref name="otherGeometry" /> 的交集。</returns>
      <param name="geometryValue">第一个几何图形值。</param>
      <param name="otherGeometry">第二个几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Intersects(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>确定两个给定的 <see cref="T:System.Data.Spatial.DbGeography" /> 值是否在空间上相交。</summary>
      <returns>如果 <paramref name="geographyValue" /> 与 <paramref name="otherGeography" /> 相交，则为 true；否则为 false。</returns>
      <param name="geographyValue">用来比较相交性的第一个地理值。</param>
      <param name="otherGeography">用来比较相交性的第二个地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Intersects(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>确定两个给定的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值是否在空间上相交。</summary>
      <returns>如果 <paramref name="geometryValue" /> 与 <paramref name="otherGeometry" /> 相交，则为 true；否则为 false。</returns>
      <param name="geometryValue">用来比较相交性的第一个几何图形值。</param>
      <param name="otherGeometry">用来比较相交性的第二个几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Overlaps(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>确定两个给定的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值是否在空间上重叠。</summary>
      <returns>如果 <paramref name="geometryValue" /> 与 <paramref name="otherGeometry" /> 重叠，则为 true；否则为 false。</returns>
      <param name="geometryValue">第一个几何图形值。</param>
      <param name="otherGeometry">第二个几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.PointAt(System.Data.Spatial.DbGeography,System.Int32)">
      <summary>如果其表示行字符串或线性环，则返回给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值的点元素。</summary>
      <returns>如果它表示线性字符串或线性环，则为 <paramref name="index" /> 位置的 <paramref name="geographyValue" /> 中的点；否则为 null。</returns>
      <param name="geographyValue">不需要表示一个行字符串或线性环的地理值。</param>
      <param name="index">在地理值中元素应被采用的的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.PointAt(System.Data.Spatial.DbGeometry,System.Int32)">
      <summary>如果其表示行字符串或线性环，则返回给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的点元素。</summary>
      <returns>如果它表示线性字符串或线性环，则为 <paramref name="index" /> 位置的 <paramref name="geometryValue" /> 中的点；否则为 null。</returns>
      <param name="geometryValue">不需要表示一个行字符串或线性环的几何图形值。</param>
      <param name="index">在几何值中元素应被采用的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Relate(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry,System.String)">
      <summary>基于给定的 Dimensionally Extended Nine-Intersection Model (DE-9IM) 交集模式来确定相关两个给定的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值是否相交。</summary>
      <returns>如果根据指定的相交式矩阵，此 <paramref name="geometryValue" /> 值与 <paramref name="otherGeometry" /> 相关，则为 true；否则为 false。</returns>
      <param name="geometryValue">第一个几何图形值。</param>
      <param name="otherGeometry">应与第一个几何图形值比较关系的几何图形值。</param>
      <param name="matrix">字符串包含定义了关系的 (DE-9IM) 交集模式的文本表示形式的。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
        <paramref name="matrix" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.SpatialEquals(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>确定两个给定的 <see cref="T:System.Data.Spatial.DbGeography" /> 值是否在空间上相等。</summary>
      <returns>如果 <paramref name="geographyValue" /> 在空间上等于 <paramref name="otherGeography" />，则为 true；否则为 false。</returns>
      <param name="geographyValue">要比较是否相等的第一个地理值。</param>
      <param name="otherGeography">要比较是否相等的第二个地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.SpatialEquals(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>确定两个给定的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值是否在空间上相等。</summary>
      <returns>如果 <paramref name="geometryValue" /> 在空间上等于 <paramref name="otherGeometry" />，则为 true；否则为 false。</returns>
      <param name="geometryValue">要比较是否相等的第一个几何图形值。</param>
      <param name="otherGeometry">要比较是否相等的第二个几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.SymmetricDifference(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>计算两个 <see cref="T:System.Data.Spatial.DbGeography" /> 值之间的对称差异。</summary>
      <returns>一个新的 <see cref="T:System.Data.Spatial.DbGeography" /> 值，它代表 <paramref name="geographyValue" /> 和 <paramref name="otherGeography" /> 的对称差异。</returns>
      <param name="geographyValue">第一个地理值。</param>
      <param name="otherGeography">第二个地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.SymmetricDifference(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>计算两个 <see cref="T:System.Data.Spatial.DbGeometry" /> 值之间的对称差异。</summary>
      <returns>一个新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，它表示 <paramref name="geometryValue" /> 和 <paramref name="otherGeometry" /> 之间的对称差异。</returns>
      <param name="geometryValue">第一个几何图形值。</param>
      <param name="otherGeometry">第二个几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Touches(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>确定两个给定的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值是否在空间上触控。</summary>
      <returns>如果 <paramref name="geometryValue" /> 接近 <paramref name="otherGeometry" />，则为 true；否则为 false。</returns>
      <param name="geometryValue">第一个几何图形值。</param>
      <param name="otherGeometry">第二个几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Union(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>计算两个 <see cref="T:System.Data.Spatial.DbGeography" /> 值的联合。</summary>
      <returns>一个新的 <see cref="T:System.Data.Spatial.DbGeography" /> 值，它表示 <paramref name="geographyValue" /> 和 <paramref name="otherGeography" /> 的联合。</returns>
      <param name="geographyValue">第一个地理值。</param>
      <param name="otherGeography">第二个地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Union(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>计算两个 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的联合。</summary>
      <returns>一个新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，它代表 <paramref name="geometryValue" /> 和 <paramref name="otherGeometry" /> 的联合。</returns>
      <param name="geometryValue">第一个几何图形值。</param>
      <param name="otherGeometry">第二个几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Within(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>确定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值是否在其他空间中相交。</summary>
      <returns>如果 <paramref name="geometryValue" /> 位于 <paramref name="otherGeometry" /> 中，则为 true；否则为 false。</returns>
      <param name="geometryValue">第一个几何图形值。</param>
      <param name="otherGeometry">第二个几何图形值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="T:System.Data.SqlClient.SqlProviderServices">
      <summary>SQL Server 的 SqlClient 提供程序的 DbProviderServices 实现。</summary>
    </member>
    <member name="P:System.Data.SqlClient.SqlProviderServices.SingletonInstance">
      <summary>获取 <see cref="T:System.Data.SqlClient.SqlProviderServices" /> 的单一实例。</summary>
      <returns>返回 <see cref="T:System.Data.SqlClient.SqlProviderServices" />。</returns>
    </member>
  </members>
</doc>