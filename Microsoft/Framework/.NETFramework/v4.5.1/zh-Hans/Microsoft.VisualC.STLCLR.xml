<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualC.STLCLR</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualC.StlClr.BinaryDelegate`3">
      <summary>说明一个双参数委托。 用于指定该委托的参数类型和返回类型。</summary>
      <returns>委托的返回类型。</returns>
      <typeparam name="TArg1">第一个委托参数。</typeparam>
      <typeparam name="TArg2">第二个委托参数。</typeparam>
      <typeparam name="TResult">委托的返回类型。</typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.DequeEnumerator`1">
      <summary>支持在实现 <see cref="T:Microsoft.VisualC.StlClr.IDeque`1" /> 接口的任何 STL/CLR 对象上进行简单迭代。</summary>
      <typeparam name="TValue">The type of an element in the controlled sequence.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.#ctor(Microsoft.VisualC.StlClr.IDeque{`0},System.Int32)">
      <summary>分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" /> 对象。</summary>
      <param name="_Cont">要对其进行循环访问的容器。</param>
      <param name="_First">容器中当前第一个元素的偏移量。</param>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.DequeEnumerator`1.Current">
      <summary>获取或设置集合中的当前元素。</summary>
      <returns>集合中的当前元素。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.Dispose">
      <summary>释放或重置由 <see cref="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" /> 对象占用的非托管资源。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.Dispose(System.Boolean)">
      <summary>释放或重置由 <see cref="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" /> 对象占用的非托管资源。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.MoveNext">
      <summary>将枚举数前移到集合中的下一个元素。</summary>
      <returns>如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1">
      <summary>支持在实现 <see cref="T:Microsoft.VisualC.StlClr.IDeque`1" /> 接口的任何 STL/CLR 对象上进行简单迭代。</summary>
      <typeparam name="TValue">The type of an element in the controlled sequence.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.#ctor(Microsoft.VisualC.StlClr.IDeque{`0},System.Int32)">
      <summary>分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1" /> 对象。</summary>
      <param name="_Cont">要对其进行循环访问的容器。</param>
      <param name="_First">容器中当前第一个元素的偏移量。</param>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.Current">
      <summary>获取或设置集合中的当前元素。</summary>
      <returns>集合中的当前元素。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.MoveNext">
      <summary>将枚举数前移到集合中的下一个元素。</summary>
      <returns>如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.GenericPair`2">
      <summary>说明一个用于交换值对的对象。</summary>
      <typeparam name="TValue1">值对中第一个值的类型。</typeparam>
      <typeparam name="TValue2">值对中第二个值的类型。</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor">
      <summary>使用 <see cref="F:Microsoft.VisualC.StlClr.GenericPair`2.first" /> 和 <see cref="F:Microsoft.VisualC.StlClr.GenericPair`2.second" /> 的默认值构造一个新的 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(Microsoft.VisualC.StlClr.GenericPair{`0,`1}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>从现有 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象构造新的 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象。</summary>
      <param name="_Right">要复制到新 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象中的 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1}@)">
      <summary>从现有 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象构造新的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 对象。</summary>
      <param name="_Right">要复制到新 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 对象中的 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(`0)">
      <summary>构造一个新 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象并将其第一个值分配给指定值。</summary>
      <param name="_Val1">要存储在 <see cref="F:Microsoft.VisualC.StlClr.GenericPair`2.first" /> 中的值。 将为 <see cref="F:Microsoft.VisualC.StlClr.GenericPair`2.second" /> 值分配适合其类型的默认值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(`0,`1)">
      <summary>用两个指定值构造一个新 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象。</summary>
      <param name="_Val1">要存储在 <see cref="F:Microsoft.VisualC.StlClr.GenericPair`2.first" /> 中的值。</param>
      <param name="_Val2">要存储在 <see cref="F:Microsoft.VisualC.StlClr.GenericPair`2.second" /> 中的值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.Equals(System.Object)">
      <summary>确定两个 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象是否相等。</summary>
      <returns>如果两个 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象相等，则为 true；否则为 false。</returns>
      <param name="_Right_arg">要与当前 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象。</param>
    </member>
    <member name="F:Microsoft.VisualC.StlClr.GenericPair`2.first">
      <summary>
        <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象的第一个包装值。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.op_Assign(Microsoft.VisualC.StlClr.GenericPair{`0,`1}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>替换 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象中存储的值对。</summary>
      <returns>此方法返回 *this。</returns>
      <param name="_Right">要复制的 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象。</param>
    </member>
    <member name="F:Microsoft.VisualC.StlClr.GenericPair`2.second">
      <summary>
        <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象的第二个包装值。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.swap(Microsoft.VisualC.StlClr.GenericPair{`0,`1}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>交换两个 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象的内容。</summary>
      <param name="_Right">要与其交换内容的 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象。</param>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.HashEnumerator`2">
      <summary>支持在实现 <see cref="T:Microsoft.VisualC.StlClr.IHash`2" /> 接口的任何 STL/CLR 对象上进行简单迭代。</summary>
      <typeparam name="TKey">哈希迭代器键的类型。</typeparam>
      <typeparam name="TValue">哈希迭代器值的类型。</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumerator`2.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`1})">
      <summary>分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.HashEnumerator`2" /> 对象。</summary>
      <param name="_First">要对其进行循环访问的容器中的第一个节点。</param>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.HashEnumerator`2.Current">
      <summary>获取或设置集合中的当前元素。</summary>
      <returns>集合中的当前元素。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumerator`2.Dispose">
      <summary>释放或重置由 <see cref="T:Microsoft.VisualC.StlClr.HashEnumerator`2" /> 对象占用的非托管资源。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumerator`2.Dispose(System.Boolean)">
      <summary>释放或重置由 <see cref="T:Microsoft.VisualC.StlClr.HashEnumerator`2" /> 对象占用的非托管资源。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumerator`2.MoveNext">
      <summary>将枚举数前移到集合中的下一个元素。</summary>
      <returns>如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumerator`2.Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.HashEnumeratorBase`2">
      <summary>支持在实现 <see cref="T:Microsoft.VisualC.StlClr.IHash`2" /> 接口的任何 STL/CLR 对象上进行简单迭代。</summary>
      <typeparam name="TKey">哈希迭代器键的类型。</typeparam>
      <typeparam name="TValue">哈希迭代器值的类型。</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`1})">
      <summary>分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.HashEnumeratorBase`2" /> 对象。</summary>
      <param name="_First">要对其进行循环访问的容器中的第一个节点。</param>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.Current">
      <summary>获取或设置集合中的当前元素。</summary>
      <returns>集合中的当前元素。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.MoveNext">
      <summary>将枚举数前移到集合中的下一个元素。</summary>
      <returns>如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IDeque`1">
      <summary>定义 STL/CLR deque 对象的接口。</summary>
      <typeparam name="TValue">包含的类型。</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>用给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象指定的元素替换容器中的所有元素。</summary>
      <param name="_First">要插入到容器中的范围的开始位置。</param>
      <param name="_Last">要插入到容器中的范围末尾之外的第一个位置。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.assign(System.Collections.IEnumerable)">
      <summary>用给定 <see cref="T:System.Collections.IEnumerable" /> 对象中的元素替换容器中的所有元素。</summary>
      <param name="_Right">要插入到容器中的枚举。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.assign(System.Int32,`0)">
      <summary>用给定数量的指定元素替换容器中的所有元素。</summary>
      <param name="_Count">要插入到容器中的元素数。</param>
      <param name="_Val">要插入到容器中的元素的值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.at(System.Int32)">
      <summary>访问容器中指定位置的元素。</summary>
      <returns>受控序列位于 <paramref name="pos" /> 处的元素。</returns>
      <param name="_Pos">要访问的元素的位置。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.back">
      <summary>访问容器的最后一个元素。</summary>
      <returns>受控序列中的最后一个元素，该元素必须为非空元素。</returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IDeque`1.back_item">
      <summary>访问非空 deque 集合的最后一个元素。</summary>
      <returns>受控序列的最后一个元素。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
      <summary>指定受控序列的开头。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个随机访问迭代器，指定受控序列的第一个元素，或刚好在空序列的末尾之外。 用于获取一个迭代器，该迭代器指定受控序列的 <paramref name="current" /> 开头，但如果受控序列的长度发生更改，则该迭代器的状态也会发生更改。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.begin_bias">
      <summary>获取当前序列开始处的偏移。 偏移是相对于当前元素零的偏移量。</summary>
      <returns>当前序列开始处的偏移。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.clear">
      <summary>移除容器中的所有元素。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.empty">
      <summary>测试容器中是否不包含任何元素。</summary>
      <returns>如果容器为空，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
      <summary>指定受控序列的末尾。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个随机访问迭代器，指向紧靠受控序列的末尾之外的位置。 用于获取一个迭代器，该迭代器指定受控序列的 <paramref name="current" /> 末尾，但如果受控序列的长度发生更改，则该迭代器的状态也会发生更改。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.end_bias">
      <summary>获取当前序列末尾处的偏移。 偏移是相对于当前元素零的偏移量。</summary>
      <returns>当前序列末尾处的偏移。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>移除指定位置处的元素。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个迭代器，指定任何已移除的元素之外剩余元素中的第一个元素；如果在不存在这样的元素，则为 <see cref="M:Microsoft.VisualC.StlClr.IDeque`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />。</param>
      <param name="_Where">要清除的元素。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>移除指定迭代器之间的元素。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个迭代器，指定任何已移除的元素之外剩余元素中的第一个元素；如果在不存在这样的元素，则为 <see cref="M:Microsoft.VisualC.StlClr.IDeque`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />。</param>
      <param name="_First_iter">要清除的范围的开始位置。</param>
      <param name="_Last_iter">要清除的范围的最后一个元素之外的第一个位置。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.front">
      <summary>访问容器的第一个元素。</summary>
      <returns>受控序列中的第一个元素，该元素必须为非空元素。</returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IDeque`1.front_item">
      <summary>访问非空 deque 集合的第一个元素。</summary>
      <returns>返回受控序列的第一个元素。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.get_generation">
      <summary>获取基础容器的当前换代。</summary>
      <returns>基础容器的当前换代。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)">
      <summary>在容器中的指定位置添加一个元素。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个迭代器，指定新插入的元素。</param>
      <param name="_Where">容器中要在其前面进行插入的位置。</param>
      <param name="_Val">要插入到容器中的元素。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>在容器中的指定位置添加元素。</summary>
      <param name="_Where">容器中要在其前面进行插入的位置。</param>
      <param name="_First">要插入到容器中的范围的开头。</param>
      <param name="_Last">要插入到容器中的范围末尾之外的第一个位置。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)">
      <summary>在容器中的指定位置添加元素。</summary>
      <param name="_Where_iter">容器中要在其前面进行插入的位置。</param>
      <param name="_Right">要插入到容器中的元素的枚举。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)">
      <summary>在容器中的指定位置添加给定数量的元素。</summary>
      <param name="_Where">容器中要在其前面进行插入的位置。</param>
      <param name="_Count">要插入到容器中的元素数。</param>
      <param name="_Val">要插入到容器中的元素的值。</param>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IDeque`1.Item(System.Int32)">
      <summary>获取或设置容器中指定位置的元素。</summary>
      <returns>指定位置处的元素。</returns>
      <param name="_Pos">要获取或设置的元素的位置。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.pop_back">
      <summary>移除非空容器的最后一个元素。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.pop_front">
      <summary>移除非空容器的第一个元素。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.push_back(`0)">
      <summary>将一个元素添加到容器末尾。</summary>
      <param name="_Val">要追加到容器末尾的元素。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.push_front(`0)">
      <summary>将一个元素添加到容器的开头。</summary>
      <param name="_Val">要添加到容器开头的元素。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
      <summary>指定反转的受控序列的开头。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个反向迭代器，指定受控序列的最后一个元素，或刚好在空序列的开头之外。 因此，它指定反向序列的 <paramref name="beginning" />。 用于获取一个迭代器，该迭代器指定相反顺序的受控序列的 <paramref name="current" /> 开头，但如果受控序列的长度发生更改，则该迭代器的状态也会发生更改。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
      <summary>指定反转的受控序列的末尾。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个反向迭代器，刚好指向受控序列的开头之外。 因此，它指定反向序列的 <paramref name="end" />。 用于获取一个迭代器，该迭代器指定相反顺序的受控序列的 <paramref name="current" /> 末尾，但如果受控序列的长度发生更改，则该迭代器的状态也会发生更改。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32)">
      <summary>更改元素的数量。</summary>
      <param name="_Newsize">受控序列的新大小。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32,`0)">
      <summary>更改元素的数量。</summary>
      <param name="_Newsize">受控序列的新大小。</param>
      <param name="_Val">填充元素的值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.size">
      <summary>计算元素的数量。</summary>
      <returns>受控序列的长度。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.swap(Microsoft.VisualC.StlClr.IDeque{`0})">
      <summary>交换两个容器的内容。</summary>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IHash`2">
      <summary>定义 STL/CLR hash_map、hash_multimap、hash_set 和 hash_multiset 对象的接口。</summary>
      <typeparam name="TKey">受控序列中元素的键组件的类型。</typeparam>
      <typeparam name="TValue">受控序列中元素的值组件的类型。</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)">
      <summary>指定受控序列的开头。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个双向迭代器，指定受控序列的第一个元素，或刚好在空序列的末尾之外。 用于获取一个迭代器，该迭代器指定受控序列的 <paramref name="current" /> 开头，但如果受控序列的长度发生更改，则该迭代器的状态也会发生更改。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.bucket_count">
      <summary>计算哈希表中的存储桶数。</summary>
      <returns>哈希表中的当前存储桶数。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.clear">
      <summary>从容器中移除所有元素。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.count(`0)">
      <summary>查找与指定键匹配的元素数。</summary>
      <returns>受控序列中具有与 <paramref name="_Keyval" /> 相同的键的元素数。 用于确定受控序列中当前与指定键匹配的元素数。</returns>
      <param name="_Keyval">要搜索的键值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.empty">
      <summary>测试容器中是否不存在元素。</summary>
      <returns>如果容器中没有元素，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)">
      <summary>指定受控序列的末尾。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个双向迭代器，刚好指向受控序列的末尾之外。 用于获取指定受控序列末尾的迭代器。 当受控序列的长度发生更改时，该迭代器的状态不会更改。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.equal_range(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}}@,`0)">
      <summary>查找与指定键匹配的范围。</summary>
      <returns>一对迭代器。</returns>
      <param name="__unnamed0">一对迭代器，确定受控序列中当前与指定键匹配的元素的范围。</param>
      <param name="_Keyval">要搜索的键值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)">
      <summary>从容器中移除由给定迭代器指定的元素。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个迭代器，指定已移除元素之外的第一个元素；如果不存在这样的元素，则为 <see cref="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />。</param>
      <param name="_Where">一个迭代器，指向要清除的元素。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)">
      <summary>从容器中移除指定迭代器之间的元素。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个迭代器，指定已移除元素之外的第一个元素；如果不存在这样的元素，则为 <see cref="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />。</param>
      <param name="_First_iter">一个迭代器，指向要清除的范围的开头。</param>
      <param name="_Last_iter">一个迭代器，指向紧跟在要清除的范围之后的位置。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.erase(`0)">
      <summary>从容器中移除与指定键匹配的元素。</summary>
      <returns>移除的元素数。</returns>
      <param name="_Keyval">要清除的键值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.find(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <summary>查找与指定键匹配的元素。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个迭代器，指定找到的元素之一；如果找不到元素，则为 <see cref="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />。</param>
      <param name="_Keyval">要搜索的键值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.hash_delegate">
      <summary>返回用于将键值转换为整数的委托。</summary>
      <returns>用于将键值转换为整数的委托。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,`1)">
      <summary>将给定元素添加到容器中。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个迭代器，指定新插入的元素。</param>
      <param name="_Where">一个迭代器，指定要将元素插入到容器中的位置。 这仅是一种提示，用于提高性能。 元素可能并不插入在此位置。</param>
      <param name="_Val">要插入到容器中的键值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.Generic.IInputIterator{`1},Microsoft.VisualC.StlClr.Generic.IInputIterator{`1})">
      <summary>将给定迭代器指定的元素添加到容器中。</summary>
      <param name="_First">一个迭代器，指向要插入的元素范围的开头。</param>
      <param name="_Last">一个迭代器，指向紧跟在要插入的元素范围之后的元素。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},System.Boolean}@,`1)">
      <summary>将给定值添加到容器。</summary>
      <returns>一对迭代器。</returns>
      <param name="__unnamed0">一对值 X。 如果 X.second 为 true，则 X.first 指定新插入的元素；否则 X.first 指定一个具有等效顺序的现有元素，不插入新元素。</param>
      <param name="_Val">要插入到容器中的键值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.insert(System.Collections.IEnumerable)">
      <summary>将给定的枚举添加到容器。</summary>
      <param name="_Right">要插入到容器中的枚举。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.key_comp">
      <summary>返回用于对受控序列进行排序的排序委托。 用于对两个键进行比较。</summary>
      <returns>用于对受控序列进行排序的排序委托。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.load_factor">
      <summary>计算哈希表中每个存储桶的平均元素数。</summary>
      <returns>哈希表中每个存储桶的平均元素数。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.lower_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <summary>查找与指定键匹配的元素范围的开始。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个迭代器，指定受控序列中可散列为与 <paramref name="_Keyval" /> 相同的存储桶并具有与 <paramref name="_Keyval" /> 等效的顺序的第一个元素。 如果不存在这样的元素，则返回 <see cref="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />。</param>
      <param name="_Keyval">要搜索的键值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.max_load_factor">
      <summary>获取哈希表中每个存储桶的最大元素数。</summary>
      <returns>哈希表中每个存储桶的最大元素数。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.max_load_factor(System.Single)">
      <summary>设置哈希表中每个存储桶的最大元素数。</summary>
      <param name="_Newmax">哈希表中每个存储桶的最大元素数。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)">
      <summary>指定反转的受控序列的开头。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个反向迭代器，指定受控序列的最后一个元素，或刚好在空序列的开头之外。 因此，它指定反向序列的 <paramref name="beginning" />。 用于获取一个迭代器，该迭代器指定反向顺序的受控序列的 <paramref name="current" /> 开头。 如果受控序列的长度发生更改，该迭代器的状态也会更改。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.rehash(System.Int32)">
      <summary>重新生成哈希表。</summary>
      <param name="_Buckets">哈希表的存储桶数。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)">
      <summary>指定反转的受控序列的末尾。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个反向迭代器，刚好指向受控序列的开头之外。 因此，它指定反向序列的 <paramref name="end" />。 用于获取一个迭代器，该迭代器指定反向顺序的受控序列的 <paramref name="current" /> 末尾。 如果受控序列的长度发生更改，该迭代器的状态也会更改。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.size">
      <summary>计算容器中的元素数。</summary>
      <returns>受控序列的长度。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.swap(Microsoft.VisualC.StlClr.IHash{`0,`1})">
      <summary>交换两个容器的内容。</summary>
      <param name="_Right">要与其交换内容的容器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.upper_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <summary>查找与指定键匹配的元素范围的末尾。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个迭代器，指定受控序列中最后一个元素以外可散列为与 <paramref name="_Keyval" /> 相同的存储桶并具有与 <paramref name="_Keyval" /> 等效的顺序的第一个元素。 如果不存在这样的元素，则返回 <see cref="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />。</param>
      <param name="_Keyval">要搜索的键值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.value_comp">
      <summary>返回用于对受控序列进行排序的排序委托。</summary>
      <returns>用于对受控序列进行排序的排序委托。</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IList`1">
      <summary>定义 STL/CLR list 对象的接口。</summary>
      <typeparam name="TValue">列表元素的类型。</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>用序列 [<paramref name="_First" />, <paramref name="_Last" />) 替换受控序列。</summary>
      <param name="_First">要插入到容器中的元素范围的开始位置。</param>
      <param name="_Last">要插入到容器中的元素范围之外的第一个位置。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.assign(System.Collections.IEnumerable)">
      <summary>用给定枚举器指定的序列替换受控序列。</summary>
      <param name="_Right">要将其元素插入到容器中的枚举。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.assign(System.Int32,`0)">
      <summary>用指定数量的给定元素替换受控序列。</summary>
      <param name="_Count">要插入到容器中的元素数。</param>
      <param name="_Val">要插入到容器中的元素的值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.back">
      <summary>访问容器的最后一个元素。</summary>
      <returns>受控序列中的最后一个元素，该元素必须为非空元素。</returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IList`1.back_item">
      <summary>访问容器的最后一个元素。</summary>
      <returns>受控序列中的最后一个元素，该元素必须为非空元素。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)">
      <summary>指定受控序列的开头。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个随机访问迭代器，指定受控序列的第一个元素，或刚好在空序列的末尾之外。 用于获取一个迭代器，该迭代器指定受控序列的 <paramref name="current" /> 开头，但如果受控序列的长度发生更改，则该迭代器的状态也会发生更改。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.clear">
      <summary>从容器中移除所有元素。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.empty">
      <summary>测试容器中是否没有元素。</summary>
      <returns>如果容器中没有元素，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)">
      <summary>指定受控序列的末尾。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个随机访问迭代器，刚好指向受控序列的末尾之外。 用于获取指定受控序列末尾的迭代器。 如果受控序列的长度发生更改，该迭代器的状态不会更改。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>移除受控序列中由给定迭代器指向的单个元素。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个迭代器，指定任何已移除的元素之外剩余元素中的第一个元素；如果在不存在这样的元素，则为 <see cref="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" />。</param>
      <param name="_Where">要清除的元素的位置。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>移除受控序列中 [<paramref name="_First_iter" />, <paramref name="_Last_iter" />) 范围内的元素。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个迭代器，指定任何已移除的元素之外剩余元素中的第一个元素；如果在不存在这样的元素，则为 <see cref="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" />。</param>
      <param name="_First_iter">要清除的元素范围的开始位置。</param>
      <param name="_Last_iter">要清除的元素范围之外的第一个位置。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.front">
      <summary>访问容器的第一个元素。</summary>
      <returns>受控序列中的第一个元素，该元素必须为非空元素。</returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IList`1.front_item">
      <summary>访问容器的第一个元素。</summary>
      <returns>受控序列中的第一个元素，该元素必须为非空元素。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)">
      <summary>将具有给定值的元素插入到容器中。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个迭代器，指定新插入的元素。</param>
      <param name="_Where">容器中紧跟新插入的元素后的位置。</param>
      <param name="_Val">要插入到容器中的元素的值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>将序列 [<paramref name="_First" />, <paramref name="_Last" />) 插入到容器中。</summary>
      <param name="_Where">容器中紧跟新插入的元素后的位置。</param>
      <param name="_First">要插入到容器中的元素范围的开始位置。</param>
      <param name="_Last">要插入到容器中的元素范围之外的第一个位置。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)">
      <summary>将指定枚举器的元素插入到容器中。</summary>
      <param name="_Where_iter">容器中要在其前面进行插入的位置。</param>
      <param name="_Right">要将其元素插入到容器中的枚举。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)">
      <summary>将指定数量的具有给定值的元素插入到容器中。</summary>
      <param name="_Where">容器中紧跟新插入的元素后的位置。</param>
      <param name="_Count">要插入到容器中的元素数。</param>
      <param name="_Val">要插入到容器中的元素的值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.merge(Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})">
      <summary>合并两个有序受控序列。</summary>
      <param name="_Right">要合并到此容器中的容器。</param>
      <param name="_Pred">用于比较元素对的布尔型仿函数。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.pop_back">
      <summary>从容器中移除最后一个元素。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.pop_front">
      <summary>从容器中移除第一个元素。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.push_back(`0)">
      <summary>将一个新元素添加到容器的末尾。</summary>
      <param name="_Val">要追加到容器的元素的值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.push_front(`0)">
      <summary>将一个新元素添加到容器的开头。</summary>
      <param name="_Val">要插入到容器开头的元素的值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)">
      <summary>指定反转的受控序列的开头。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个反向迭代器，指定受控序列的最后一个元素，或刚好在空序列的开头之外的位置。 因此，它指定反向序列的 <paramref name="beginning" />。 用于获取一个迭代器，该迭代器指定相反顺序的受控序列的 <paramref name="current" /> 开头，但如果受控序列的长度发生更改，则该迭代器的状态也会发生更改。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.remove(`0)">
      <summary>从容器中移除具有指定值的元素。</summary>
      <param name="_Val">要从容器中移除的元素的值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.remove_if(Microsoft.VisualC.StlClr.UnaryDelegate{`0,System.Boolean})">
      <summary>从容器中移除通过指定测试的元素。</summary>
      <param name="_Pred">一个布尔型测试，用于确定将移除哪些元素。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)">
      <summary>指定反转的受控序列的末尾。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个反向迭代器，刚好指向受控序列的开头之外。 因此，它指定反向序列的 <paramref name="end" />。 用于获取一个迭代器，该迭代器指定相反顺序的受控序列的 <paramref name="current" /> 末尾，但如果受控序列的长度发生更改，则该迭代器的状态也会发生更改。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.resize(System.Int32)">
      <summary>将容器中的元素数更改为指定大小。</summary>
      <param name="_Newsize">容器的新大小。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.resize(System.Int32,`0)">
      <summary>将容器中的元素数更改为指定大小。 如果新大小大于旧大小，则将给定值追加到容器中。</summary>
      <param name="_Newsize">容器的新大小。</param>
      <param name="_Val">填充元素的值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.reverse">
      <summary>反转受控序列的元素。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.size">
      <summary>计算容器中的元素数。</summary>
      <returns>受控序列的长度。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.sort(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})">
      <summary>对受控序列进行排序。</summary>
      <param name="_Pred">将用于比较元素以进行排序的运算符。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0})">
      <summary>将给定序列插入到容器中的指定位置前。</summary>
      <param name="_Where">容器中要在其前面进行拼接的位置。</param>
      <param name="_Right">要从中进行拼接的容器。 拼接操作完成后，将从此容器中移除所有元素。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>从给定的容器中移除由 <paramref name="_First" /> 指向的元素并将该元素插入到受控序列中由 <paramref name="_Where" /> 指向的元素之前。</summary>
      <param name="_Where">容器中要在其前面进行拼接的位置。</param>
      <param name="_Right">要从中进行拼接的容器。</param>
      <param name="_First">要拼接的元素的位置。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>从给定的容器中移除元素范围 [<paramref name="_First" />, <paramref name="_Last" />) 并将其插入到受控序列中由 <paramref name="_Where" /> 指向的元素之前。</summary>
      <param name="_Where">容器中要在其前面进行拼接的位置。</param>
      <param name="_Right">要从中进行拼接的容器。</param>
      <param name="_First">要拼接的元素范围的开始位置。</param>
      <param name="_Last">要拼接的元素范围之外的第一个位置。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.swap(Microsoft.VisualC.StlClr.IList{`0})">
      <summary>交换两个容器的内容。</summary>
      <param name="_Right">要与其交换内容的容器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.unique(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})">
      <summary>移除通过指定测试的相邻元素。</summary>
      <param name="_Pred">确定元素对是否唯一的比较器。 一个元素，如果不唯一，则会将其从容器中移除。</param>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IPriorityQueue`2">
      <summary>定义 STL/CLR priority_queue 对象的接口。</summary>
      <typeparam name="TValue">受控序列中的元素的类型。</typeparam>
      <typeparam name="TCont">基础容器的类型。</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.assign(Microsoft.VisualC.StlClr.IPriorityQueue{`0,`1})">
      <summary>替换容器中的所有元素。</summary>
      <param name="_Right">要插入到容器中的容器适配器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.empty">
      <summary>确定容器是否不包含任何元素。</summary>
      <returns>如果容器不包含任何元素，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.get_container">
      <summary>访问基础容器。</summary>
      <returns>基础容器。 可以用于跳过容器包装所规定的限制。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.pop">
      <summary>移除容器中优先级最高的元素。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.push(`0)">
      <summary>将一个新元素添加到容器中。</summary>
      <param name="_Val">要插入到受控序列中的元素。 然后对受控序列重新排序以保持堆准则。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.size">
      <summary>计算容器中的元素数。</summary>
      <returns>受控序列的长度。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.top">
      <summary>访问容器中优先级最高的元素。</summary>
      <returns>受控序列的顶级（最高优先级）元素，该元素必须为非空元素。</returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IPriorityQueue`2.top_item">
      <summary>访问容器中优先级最高的元素。</summary>
      <returns>受控序列的顶级（最高优先级）元素，该元素必须为非空元素。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.value_comp">
      <summary>复制两个元素的排序委托。</summary>
      <returns>用于对受控序列进行排序的排序委托。 用于对两个值进行比较。</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IQueue`2">
      <summary>定义 STL/CLR queue 对象的接口。</summary>
      <typeparam name="TValue">受控序列中的元素的类型。</typeparam>
      <typeparam name="TCont">基础容器的类型。</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.assign(Microsoft.VisualC.StlClr.IQueue{`0,`1})">
      <summary>用所提供容器的内容替换容器的所有元素。</summary>
      <param name="_Right">要将其元素插入到容器中的容器适配器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.back">
      <summary>访问容器的最后一个元素。</summary>
      <returns>受控序列中的最后一个元素，该元素必须为非空元素。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.empty">
      <summary>确定容器是否不包含任何元素。</summary>
      <returns>如果容器不包含任何元素，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.front">
      <summary>访问容器的第一个元素。</summary>
      <returns>受控序列中的第一个元素，该元素必须为非空元素。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.get_container">
      <summary>访问基础容器。</summary>
      <returns>基础容器。 用于跳过容器包装所规定的限制。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.pop">
      <summary>移除容器的最后一个元素。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.push(`0)">
      <summary>将一个元素添加到容器的开头。</summary>
      <param name="_Val">要添加到容器开头的值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.size">
      <summary>计算容器中的元素数。</summary>
      <returns>受控序列的长度。</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IStack`2">
      <summary>定义 STL/CLR stack 对象的接口。</summary>
      <typeparam name="TValue">受控序列中的元素的类型。</typeparam>
      <typeparam name="TCont">基础容器的类型。</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.assign(Microsoft.VisualC.StlClr.IStack{`0,`1})">
      <summary>使用所提供容器中的元素替换容器中的所有元素。</summary>
      <param name="_Right">要将其元素插入到容器中的容器适配器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.empty">
      <summary>确定容器是否不包含任何元素。</summary>
      <returns>如果容器不包含任何元素，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.get_container">
      <summary>访问基础容器。</summary>
      <returns>基础容器。 用于跳过容器包装所规定的限制。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.pop">
      <summary>移除容器的最后一个元素。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.push(`0)">
      <summary>将一个元素追加到容器中。</summary>
      <param name="_Val">要追加到容器的值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.size">
      <summary>计算容器中的元素数。</summary>
      <returns>受控序列的长度。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.top">
      <summary>访问容器的最后一个元素。</summary>
      <returns>受控序列中的最后一个元素，该元素必须为非空元素。</returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IStack`2.top_item">
      <summary>访问容器的最后一个元素。</summary>
      <returns>受控序列中的最后一个元素，该元素必须为非空元素。</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.ITree`2">
      <summary>定义 STL/CLR hash_map、hash_multimap、hash_set 和 hash_multiset 对象的接口。</summary>
      <typeparam name="TKey">受控序列中元素的键组件的类型。</typeparam>
      <typeparam name="TValue">受控序列中元素的值组件的类型。</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)">
      <summary>指定受控序列的开头。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个双向迭代器，指定受控序列的第一个元素，或刚好在空序列的末尾之外。 用于获取一个迭代器，该迭代器指定受控序列的 <paramref name="current" /> 开头，但如果受控序列的长度发生更改，则该迭代器的状态也会发生更改。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.clear">
      <summary>从容器中移除所有元素。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.count(`0)">
      <summary>查找与指定键匹配的元素数。</summary>
      <returns>受控序列中具有与 <paramref name="_Keyval" /> 相同的键的元素数。 用于确定受控序列中当前与指定键匹配的元素数。</returns>
      <param name="_Keyval">要搜索的键值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.empty">
      <summary>测试容器中是否不存在元素。</summary>
      <returns>如果容器中没有元素，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)">
      <summary>指定受控序列的末尾。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个双向迭代器，刚好指向受控序列的末尾之外。 用于获取指定受控序列末尾的迭代器。 当受控序列的长度发生更改时，该迭代器的状态不会更改。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.equal_range(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}}@,`0)">
      <summary>查找与指定键匹配的范围。</summary>
      <returns>一对迭代器。</returns>
      <param name="__unnamed0">一对迭代器，确定受控序列中当前与指定键匹配的元素的范围。</param>
      <param name="_Keyval">要搜索的键值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)">
      <summary>从容器中移除由给定迭代器指定的元素。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个迭代器，指定已移除元素之外的第一个元素；如果不存在这样的元素，则为 <see cref="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />。</param>
      <param name="_Where">一个迭代器，指向要清除的元素。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)">
      <summary>从容器中移除指定迭代器之间的元素。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个迭代器，指定已移除元素之外的第一个元素；如果不存在这样的元素，则为 <see cref="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />。</param>
      <param name="_First_iter">一个迭代器，指向要清除的范围的开头。</param>
      <param name="_Last_iter">一个迭代器，指向紧跟在要清除的范围之后的位置。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.erase(`0)">
      <summary>从容器中移除与指定键匹配的元素。</summary>
      <returns>移除的元素数。</returns>
      <param name="_Keyval">要清除的键值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.find(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <summary>查找与指定键匹配的元素。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个迭代器，指定找到的元素之一；如果找不到元素，则为 <see cref="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />。</param>
      <param name="_Keyval">要搜索的键值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,`1)">
      <summary>将给定元素添加到容器中。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个迭代器，指定新插入的元素。</param>
      <param name="_Where">一个迭代器，指定要将元素插入到容器中的位置。 这仅是一种提示，用于提高性能。 元素可能并不插入在此位置。</param>
      <param name="_Val">要插入到容器中的键值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.Generic.IInputIterator{`1},Microsoft.VisualC.StlClr.Generic.IInputIterator{`1})">
      <summary>将给定迭代器指定的元素添加到容器中。</summary>
      <param name="_First">一个迭代器，指向要插入的元素范围的开头。</param>
      <param name="_Last">一个迭代器，指向紧跟在要插入的元素范围之后的元素。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},System.Boolean}@,`1)">
      <summary>将给定值添加到容器。</summary>
      <returns>一对迭代器。</returns>
      <param name="__unnamed0">一对值 X。 如果 X.second 为 true，则 X.first 指定新插入的元素；否则 X.first 指定一个具有等效顺序的现有元素，不插入新元素。</param>
      <param name="_Val">要插入到容器中的键值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.insert(System.Collections.Generic.IEnumerable{`1})">
      <summary>将给定的枚举添加到容器。</summary>
      <param name="_Right">要插入到容器中的枚举。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.key_comp">
      <summary>返回用于对受控序列进行排序的排序委托。 用于对两个键进行比较。</summary>
      <returns>用于对受控序列进行排序的排序委托。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.lower_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <summary>查找与指定键匹配的元素范围的开始。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个迭代器，指定受控序列中可散列为与 <paramref name="_Keyval" /> 相同的存储桶并具有与 <paramref name="_Keyval" /> 等效的顺序的第一个元素。 如果不存在这样的元素，则返回 <see cref="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />。</param>
      <param name="_Keyval">要搜索的键值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)">
      <summary>指定反转的受控序列的开头。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个反向迭代器，指定受控序列的最后一个元素，或刚好在空序列的开头之外。 因此，它指定反向序列的 <paramref name="beginning" />。 用于获取一个迭代器，该迭代器指定反向顺序的受控序列的 <paramref name="current" /> 开头。 如果受控序列的长度发生更改，该迭代器的状态也会更改。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)">
      <summary>指定反转的受控序列的末尾。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个反向迭代器，刚好指向受控序列的开头之外。 因此，它指定反向序列的 <paramref name="end" />。 用于获取一个迭代器，该迭代器指定反向顺序的受控序列的 <paramref name="current" /> 末尾。 如果受控序列的长度发生更改，该迭代器的状态也会更改。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.size">
      <summary>计算容器中的元素数。</summary>
      <returns>受控序列的长度。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.swap(Microsoft.VisualC.StlClr.ITree{`0,`1})">
      <summary>交换两个容器的内容。</summary>
      <param name="_Right">要与其交换内容的容器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.upper_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <summary>查找与指定键匹配的元素范围的末尾。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个迭代器，指定受控序列中最后一个元素以外可散列为与 <paramref name="_Keyval" /> 相同的存储桶并具有与 <paramref name="_Keyval" /> 等效的顺序的第一个元素。 如果不存在这样的元素，则返回 <see cref="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />。</param>
      <param name="_Keyval">要搜索的键值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.value_comp">
      <summary>返回用于对受控序列进行排序的排序委托。</summary>
      <returns>用于对受控序列进行排序的排序委托。</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IVector`1">
      <summary>定义 STL/CLR vector 对象的接口。</summary>
      <typeparam name="TValue">受控序列中的元素的类型。</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>用给定迭代器之间的元素替换容器中的所有元素。</summary>
      <param name="_First">要插入的元素范围的开始位置。</param>
      <param name="_Last">要插入的元素范围的末尾之外的第一个位置。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.assign(System.Collections.IEnumerable)">
      <summary>用指定枚举中的元素替换容器中的所有元素。</summary>
      <param name="_Right">要将其元素插入到容器中的枚举。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.assign(System.Int32,`0)">
      <summary>用指定数量的具有给定值的元素替换容器中的所有元素。</summary>
      <param name="_Count">要插入到容器中的元素数。</param>
      <param name="_Val">要插入的元素的值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.at(System.Int32)">
      <summary>访问容器中指定位置的元素。</summary>
      <returns>受控序列中 <paramref name="_Pos" /> 位置处的元素。</returns>
      <param name="_Pos">要访问的元素的位置。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.back">
      <summary>访问容器的最后一个元素。</summary>
      <returns>受控序列中的最后一个元素，该元素必须为非空元素。</returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IVector`1.back_item">
      <summary>访问容器的最后一个元素。</summary>
      <returns>受控序列中的最后一个元素，该元素必须为非空元素。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
      <summary>指定受控序列的开头。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个随机访问迭代器，指定受控序列的第一个元素，或刚好在空序列的末尾之外。 用于获取一个迭代器，该迭代器指定受控序列的 <paramref name="current" /> 开头，但如果受控序列的长度发生更改，则该迭代器的状态也会发生更改。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.capacity">
      <summary>报告为容器分配的存储大小。</summary>
      <returns>当前为容纳受控序列而分配的存储，一个不小于 <see cref="M:Microsoft.VisualC.StlClr.IVector`1.size" /> 的值。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.clear">
      <summary>从容器中移除所有元素。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.empty">
      <summary>测试容器中是否没有元素。</summary>
      <returns>如果容器中没有元素，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
      <summary>指定受控序列的末尾。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个随机访问迭代器，刚好指向受控序列的末尾之外。 用于获取一个迭代器，该迭代器指定受控序列的 <paramref name="current" /> 末尾，但如果受控序列的长度发生更改，则该迭代器的状态也会发生更改。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>移除受控序列中由 <paramref name="_Where" /> 指向的单个元素。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个迭代器，指定任何已移除的元素之外剩余元素中的第一个元素；如果在不存在这样的元素，则为 <see cref="M:Microsoft.VisualC.StlClr.IVector`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />。</param>
      <param name="_Where">要移除的元素的位置。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>移除受控序列中 [<paramref name="_First_iter" />, <paramref name="_Last_iter" />) 范围内的元素。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个迭代器，指定任何已移除的元素之外剩余元素中的第一个元素；如果在不存在这样的元素，则为 <see cref="M:Microsoft.VisualC.StlClr.IVector`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />。</param>
      <param name="_First_iter">要清除的元素范围的开头。</param>
      <param name="_Last_iter">要清除的元素范围之外的第一个位置。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.front">
      <summary>访问容器的第一个元素。</summary>
      <returns>受控序列中的第一个元素，该元素必须为非空元素。</returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IVector`1.front_item">
      <summary>访问容器的第一个元素。</summary>
      <returns>受控序列中的第一个元素，该元素必须为非空元素。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.get_generation">
      <summary>获取基础容器的当前换代。</summary>
      <returns>基础容器的当前换代。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)">
      <summary>将指定的值插入到容器中。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个迭代器，指定新插入的元素。</param>
      <param name="_Where">容器中要在其前面进行插入的位置。</param>
      <param name="_Val">要插入到容器中的元素的值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>将以 <paramref name="_First" /> 开头并以 <paramref name="_Last" /> 之前的元素结尾的序列插入到容器中。</summary>
      <param name="_Where">容器中要在其前面进行插入的位置。</param>
      <param name="_First">要插入到容器中的范围的开始位置。</param>
      <param name="_Last">要插入到容器中的范围之外的第一个位置。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)">
      <summary>将枚举器指定的序列插入到容器中。</summary>
      <param name="_Where_iter">容器中要在其前面进行插入的位置。</param>
      <param name="_Right">要插入到容器中的枚举。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)">
      <summary>将指定数量的给定元素插入到容器中。</summary>
      <param name="_Where">容器中要在其前面进行插入的位置。</param>
      <param name="_Count">要插入到容器中的元素数。</param>
      <param name="_Val">要插入到容器中的元素的值。</param>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IVector`1.Item(System.Int32)">
      <summary>访问容器中指定位置的元素。</summary>
      <returns>
        <paramref name="_Pos" /> 位置处的元素。</returns>
      <param name="_Pos">要访问的元素的位置。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.pop_back">
      <summary>从容器中移除最后一个元素。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.push_back(`0)">
      <summary>将一个新元素添加到容器的末尾。</summary>
      <param name="_Val">要插入到容器中的元素的值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
      <summary>指定反转的受控序列的开头。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个反向迭代器，指定受控序列的最后一个元素，或刚好在空序列的开头之外。 因此，它指定反向序列的 <paramref name="beginning" />。 用于获取一个迭代器，该迭代器指定相反顺序的受控序列的 <paramref name="current" /> 开头，但如果受控序列的长度发生更改，则该迭代器的状态也会发生更改。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
      <summary>指定反转的受控序列的末尾。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">一个反向迭代器，刚好指向受控序列的开头之外。 因此，它指定反向序列的 <paramref name="end" />。 用于获取一个迭代器，该迭代器指定相反顺序的受控序列的 <paramref name="current" /> 末尾，但如果受控序列的长度发生更改，则该迭代器的状态也会发生更改。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.reserve(System.Int32)">
      <summary>保留存储以确保容器的最小增长容量。</summary>
      <param name="_Capacity">容器的新的最小容量。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32)">
      <summary>将容器中的元素数更改为指定大小。</summary>
      <param name="_Newsize">受控序列的新大小。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32,`0)">
      <summary>将容器中的元素数更改为指定大小。 如果新大小大于旧大小，则该方法将追加值为 <paramref name="_Val" /> 的元素。</summary>
      <param name="_Newsize">受控序列的新大小。</param>
      <param name="_Val">要插入的元素的值。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.size">
      <summary>计算容器中的元素数。</summary>
      <returns>受控序列的长度。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.swap(Microsoft.VisualC.StlClr.IVector{`0})">
      <summary>交换两个容器的内容。</summary>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.ListEnumerator`1">
      <summary>支持在实现 <see cref="T:Microsoft.VisualC.StlClr.IList`1" /> 接口的任何 STL/CLR 对象上进行简单迭代。</summary>
      <typeparam name="TValue">受控序列中的元素的类型。</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumerator`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})">
      <summary>分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.ListEnumerator`1" /> 对象。</summary>
      <param name="_First">要对其进行循环访问的容器中的第一个节点。</param>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.ListEnumerator`1.Current">
      <summary>获取或设置集合中的当前元素。</summary>
      <returns>集合中的当前元素。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumerator`1.Dispose">
      <summary>释放或重置由 <see cref="T:Microsoft.VisualC.StlClr.ListEnumerator`1" /> 占用的非托管资源。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumerator`1.Dispose(System.Boolean)">
      <summary>释放或重置由 <see cref="T:Microsoft.VisualC.StlClr.ListEnumerator`1" /> 占用的非托管资源。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumerator`1.MoveNext">
      <summary>将枚举数前移到集合中的下一个元素。</summary>
      <returns>如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumerator`1.Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.ListEnumeratorBase`1">
      <summary>支持在实现 <see cref="T:Microsoft.VisualC.StlClr.IList`1" /> 接口的任何 STL/CLR 对象上进行简单迭代。</summary>
      <typeparam name="TValue">受控序列中的元素的类型。</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})">
      <summary>分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.ListEnumeratorBase`1" /> 对象。</summary>
      <param name="_First">要对其进行循环访问的容器中的第一个节点。</param>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.Current">
      <summary>获取或设置集合中的当前元素。</summary>
      <returns>集合中的当前元素。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.MoveNext">
      <summary>将枚举数前移到集合中的下一个元素。</summary>
      <returns>如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.TreeEnumerator`2">
      <summary>支持在实现 <see cref="T:Microsoft.VisualC.StlClr.ITree`2" /> 接口的任何 STL/CLR 对象上进行简单迭代。</summary>
      <typeparam name="TKey">受控序列中元素的键组件的类型。</typeparam>
      <typeparam name="TValue">受控序列中元素的值组件的类型。</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`1})">
      <summary>分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" /> 对象。</summary>
      <param name="_First">要对其进行循环访问的容器中的第一个节点。</param>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.TreeEnumerator`2.Current">
      <summary>获取或设置集合中的当前元素。</summary>
      <returns>集合中的当前元素。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.Dispose">
      <summary>释放或重置由 <see cref="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" /> 对象占用的非托管资源。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.Dispose(System.Boolean)">
      <summary>释放或重置由 <see cref="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" /> 对象占用的非托管资源。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.MoveNext">
      <summary>将枚举数前移到集合中的下一个元素。</summary>
      <returns>如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2">
      <summary>支持在实现 <see cref="T:Microsoft.VisualC.StlClr.ITree`2" /> 接口的任何 STL/CLR 对象上进行简单迭代。</summary>
      <typeparam name="TKey">受控序列中元素的键组件的类型。</typeparam>
      <typeparam name="TValue">受控序列中元素的值组件的类型。</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`1})">
      <summary>分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2" /> 对象。</summary>
      <param name="_First">要对其进行循环访问的容器中的第一个节点。</param>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.Current">
      <summary>获取或设置集合中的当前元素。</summary>
      <returns>集合中的当前元素。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.MoveNext">
      <summary>将枚举数前移到集合中的下一个元素。</summary>
      <returns>如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.UnaryDelegate`2">
      <summary>说明一个单参数委托。 用于指定该委托的参数类型和返回类型。</summary>
      <returns>委托的返回类型。</returns>
      <typeparam name="TArg">委托参数的类型。</typeparam>
      <typeparam name="TResult">委托的返回类型。</typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.VectorEnumerator`1">
      <summary>支持在实现 <see cref="T:Microsoft.VisualC.StlClr.IVector`1" /> 接口的任何 STL/CLR 对象上进行简单迭代。</summary>
      <typeparam name="TValue">受控序列中的元素的类型。</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.#ctor(Microsoft.VisualC.StlClr.IVector{`0},System.Int32)">
      <summary>分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" /> 对象。</summary>
      <param name="_Cont">要对其进行循环访问的容器。</param>
      <param name="_First">容器中当前第一个元素的偏移量。</param>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.VectorEnumerator`1.Current">
      <summary>获取或设置集合中的当前元素。</summary>
      <returns>集合中的当前元素。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.Dispose">
      <summary>释放或重置由 <see cref="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" /> 对象占用的非托管资源。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.Dispose(System.Boolean)">
      <summary>释放或重置由 <see cref="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" /> 对象占用的非托管资源。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.MoveNext">
      <summary>将枚举数前移到集合中的下一个元素。</summary>
      <returns>如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1">
      <summary>支持在实现 <see cref="T:Microsoft.VisualC.StlClr.IVector`1" /> 接口的任何 STL/CLR 对象上进行简单迭代。</summary>
      <typeparam name="TValue">受控序列中的元素的类型。</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.#ctor(Microsoft.VisualC.StlClr.IVector{`0},System.Int32)">
      <summary>分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1" /> 对象。</summary>
      <param name="_Cont">要对其进行循环访问的容器。</param>
      <param name="_First">容器中当前第一个元素的偏移量。</param>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.Current">
      <summary>获取或设置集合中的当前元素。</summary>
      <returns>集合中的当前元素。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.MoveNext">
      <summary>将枚举数前移到集合中的下一个元素。</summary>
      <returns>如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1">
      <summary>定义一个迭代器，该迭代器可以向前（通过使用递增运算符）或向后（通过使用递减运算符）访问容器中的元素。 无法修改迭代器指向的元素。 无论是需要常量输入迭代器还是常量输出迭代器，均可以使用双向迭代器。</summary>
      <typeparam name="TValue">The type of an element in the controlled sequence.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor">
      <summary>分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})">
      <summary>分配并初始化指向给定节点的新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象。</summary>
      <param name="_Node">迭代器将指向的节点。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象。</summary>
      <param name="_Right">要复制的现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。</summary>
      <param name="_Right">要复制的现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.Clone">
      <summary>返回当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象的副本。</summary>
      <returns>当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象的副本。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.container">
      <summary>获取迭代器正在遍历的容器。</summary>
      <returns>迭代器正在遍历的容器。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象相同。</summary>
      <returns>如果两个迭代器为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象相同。</summary>
      <returns>如果两个 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_bias">
      <summary>获取迭代器的偏移。 偏移是迭代器相对于元素零的偏移量。</summary>
      <returns>迭代器的偏移。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_cref">
      <summary>返回对迭代器当前指向的元素的常量引用。</summary>
      <returns>对迭代器当前指向的元素的常量引用。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_node">
      <summary>获取迭代器指向的节点或元素。</summary>
      <returns>迭代器指向的节点。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_ref">
      <summary>返回对迭代器当前指向的元素的引用。</summary>
      <returns>对迭代器当前指向的元素的引用。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.next">
      <summary>将迭代器递增到基础容器中的下一个位置，如果已完全遍历该容器，则递增到容器末尾以外的第一个位置。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>将给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象分配给当前对象。</summary>
      <returns>当前对象 (*this)。</returns>
      <param name="_Right">要分配给当前对象的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>将给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象分配给当前对象。</summary>
      <returns>当前对象 (*this)。</returns>
      <param name="_Right">要分配给当前对象的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@)">
      <summary>将迭代器递减一个元素。 这是减量运算符的前缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@,System.Int32)">
      <summary>将迭代器递减一个元素。 这是减量运算符的后缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象相同。</summary>
      <returns>如果两个迭代器为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象相同。</summary>
      <returns>如果两个迭代器为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}">
      <summary>将 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 转换为 <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />。</summary>
      <returns>当前迭代器，作为一个 <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@)">
      <summary>将迭代器递增一个元素。 这是递增运算符的前缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@,System.Int32)">
      <summary>将迭代器递增一个元素。 这是递增运算符的后缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>确定给定的 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象是否与当前的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象不同。</summary>
      <returns>如果两个迭代器是不同的对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定给定的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象是否与当前的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象不同。</summary>
      <returns>如果两个迭代器是不同的对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>返回迭代器当前指向的元素。</summary>
      <returns>迭代器当前指向的元素。</returns>
      <param name="_Left">应用该运算符的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>返回迭代器当前指向的元素。</summary>
      <returns>迭代器当前指向的元素。</returns>
      <param name="_Left">应用该运算符的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.prev">
      <summary>将迭代器定位到紧靠当前元素之前的元素。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.valid">
      <summary>确定迭代器是否有效并可安全用于遍历基础容器。</summary>
      <returns>如果迭代器有效并可安全使用，则为 true；否则为 false。</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1">
      <summary>提供支持以下操作的迭代器：通过调用 operator++ 向前移动一个位置、通过调用 operator-- 向后移动一个位置、通过使用 operator[] 访问一个元素和通过使用指针算法访问一个元素。 无法修改迭代器指向的元素。</summary>
      <typeparam name="TValue">The type of an element in the controlled sequence.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor">
      <summary>分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer{`0},System.Int32)">
      <summary>从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" /> 对象。</summary>
      <param name="_Cont">要复制到当前容器的现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" /> 对象。</param>
      <param name="_Offset">创建后迭代器将指向的元素的偏移量。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象。</summary>
      <param name="_Right">要复制到当前容器的现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。</summary>
      <param name="_Right">要复制到当前容器的现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.Clone">
      <summary>创建当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象的副本。</summary>
      <returns>当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象的副本。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.container">
      <summary>获取迭代器正在遍历的容器。</summary>
      <returns>迭代器正在遍历的容器。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>确定当前迭代器指向的元素与给定迭代器指向的元素之间的距离。</summary>
      <returns>当前迭代器指向的元素与 <paramref name="_Right" /> 指向的元素之间的距离，以元素数为单位。 如果 <paramref name="_Right" /> 指向的元素位于当前迭代器指向的元素之前，则此数字为负数。</returns>
      <param name="_Right">一个有效迭代器，与当前迭代器指向同一个容器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定当前迭代器指向的元素与给定迭代器指向的元素之间的距离。</summary>
      <returns>当前迭代器指向的元素与 <paramref name="_Right" /> 指向的元素之间的距离，以元素数为单位。 如果 <paramref name="_Right" /> 指向的元素位于当前迭代器指向的元素之前，则此数字为负数。</returns>
      <param name="_Right">一个有效迭代器，与当前迭代器指向同一个容器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象相同。</summary>
      <returns>如果两个迭代器为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象相同。</summary>
      <returns>如果两个 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_bias">
      <summary>获取迭代器的偏移。 偏移是迭代器相对于元素零的偏移量。</summary>
      <returns>迭代器的偏移。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_cref">
      <summary>返回对迭代器当前指向的元素的常量引用。</summary>
      <returns>对迭代器当前指向的元素的常量引用。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_node">
      <summary>获取迭代器指向的节点或元素。</summary>
      <returns>迭代器指向的节点。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_ref">
      <summary>返回对迭代器当前指向的元素的引用。</summary>
      <returns>对迭代器当前指向的元素的引用。</returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.Item(System.Int32)">
      <summary>访问容器中给定位置的元素。</summary>
      <returns>容器中给定位置的元素。</returns>
      <param name="_Pos">要访问的元素的位置。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>确定容器中当前迭代器指向的元素是否位于给定迭代器指向的元素之前。</summary>
      <returns>如果当前迭代器指向的元素位于 <paramref name="_Right" /> 指向的元素之前，则为 true；否则为 false。</returns>
      <param name="_Right">一个有效迭代器，与当前迭代器指向同一个容器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定容器中当前迭代器指向的元素是否位于给定迭代器指向的元素之前。</summary>
      <returns>如果当前迭代器指向的元素位于 <paramref name="_Right" /> 指向的元素之前，则为 true；否则为 false。</returns>
      <param name="_Right">一个有效迭代器，与当前迭代器指向同一个容器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.move(System.Int32)">
      <summary>按给定的元素数移动迭代器。</summary>
      <returns>遍历的实际元素数。 如果在迭代所需的元素数之前到达了容器的开始或末尾位置，则此数字将与 <paramref name="_Offset" /> 不同。</returns>
      <param name="_Offset">要遍历的元素数。 若要向前移动迭代器，请指定一个正数。 若要向后移动迭代器，请使用一个负数。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.next">
      <summary>将迭代器递增到基础容器中的下一个位置，如果已完全遍历该容器，则递增到容器末尾以外的第一个位置。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
      <summary>按给定的元素数递增迭代器。 在加法运算符的右侧指定该整数参数。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
      <param name="_Right">要增加的元素的数目。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>按给定的元素数递增迭代器。 在加法运算符的左侧指定该整数参数。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
      <param name="_Left">要增加的元素的数目。</param>
      <param name="_Right">要递增的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>将给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象分配给当前对象。</summary>
      <returns>当前对象 (*this)。</returns>
      <param name="_Right">要分配给当前对象的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>将给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象分配给当前对象。</summary>
      <returns>当前对象 (*this)。</returns>
      <param name="_Right">要分配给当前对象的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@)">
      <summary>将迭代器递减一个元素。 这是减量运算符的前缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
      <summary>将迭代器递减一个元素。 这是减量运算符的后缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象相同。</summary>
      <returns>如果两个迭代器为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象相同。</summary>
      <returns>如果两个迭代器为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定给定的左侧迭代器的位置是否大于给定的右侧迭代器的位置。</summary>
      <returns>如果给定的左侧迭代器大于给定的右侧迭代器，则为 true；否则为 false。</returns>
      <param name="_Left">要与右侧迭代器进行比较的迭代器。</param>
      <param name="_Right">要与左侧迭代器进行比较的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定左侧迭代器的位置是否大于给定的右侧迭代器的位置。</summary>
      <returns>如果左侧迭代器大于给定的右侧迭代器，则为 true；否则为 false。</returns>
      <param name="_Right">要与左侧迭代器进行比较的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>确定左侧迭代器的位置是否大于或等于给定的右侧迭代器的位置。</summary>
      <returns>如果左侧迭代器大于或等于给定的右侧迭代器，则为 true；否则为 false。</returns>
      <param name="_Right">要与左侧迭代器进行比较的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定左侧迭代器的位置是否大于或等于给定的右侧迭代器的位置。</summary>
      <returns>如果左侧迭代器大于或等于给定的右侧迭代器，则为 true；否则为 false。</returns>
      <param name="_Right">要与左侧迭代器进行比较的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}">
      <summary>将 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 转换为 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />。</summary>
      <returns>当前迭代器，作为一个 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@)">
      <summary>将迭代器递增一个元素。 这是递增运算符的前缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
      <summary>将迭代器递增一个元素。 这是递增运算符的后缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>确定给定的 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象是否与当前的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象不同。</summary>
      <returns>如果两个迭代器是不同的对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定给定的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象是否与当前的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象不同。</summary>
      <returns>如果两个迭代器是不同的对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>确定左侧迭代器的位置是否小于给定的右侧迭代器的位置。</summary>
      <returns>如果左侧迭代器小于给定的右侧迭代器，则为 true；否则为 false。</returns>
      <param name="_Right">要与左侧迭代器进行比较的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定左侧迭代器的位置是否小于给定的右侧迭代器的位置。</summary>
      <returns>如果左侧迭代器小于给定的右侧迭代器，则为 true；否则为 false。</returns>
      <param name="_Right">要与左侧迭代器进行比较的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定给定的左侧迭代器的位置是否小于给定的右侧迭代器的位置。</summary>
      <returns>如果给定的左侧迭代器小于或等于给定的右侧迭代器，则为 true；否则为 false。</returns>
      <param name="_Left">要与右侧迭代器进行比较的迭代器。</param>
      <param name="_Right">要与左侧迭代器进行比较的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定左侧迭代器的位置是否小于或等于给定的右侧迭代器的位置。</summary>
      <returns>如果左侧迭代器小于或等于给定的右侧迭代器，则为 true；否则为 false。</returns>
      <param name="_Right">要与左侧迭代器进行比较的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>返回迭代器当前指向的元素。</summary>
      <returns>迭代器当前指向的元素。</returns>
      <param name="_Left">应用该运算符的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>返回迭代器当前指向的元素。</summary>
      <returns>迭代器当前指向的元素。</returns>
      <param name="_Left">应用该运算符的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
      <summary>按给定的元素数递减迭代器。 在加法运算符的右侧指定该整数参数。</summary>
      <returns>递减的迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
      <param name="_Right">要减少的元素的数目。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>确定两个迭代器之间的差值。</summary>
      <returns>两个迭代器之间差值，以元素数为单位。</returns>
      <param name="_Right">要从当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象中减去的 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.prev">
      <summary>将迭代器定位到紧靠当前元素之前的元素。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.valid">
      <summary>确定迭代器是否有效并可安全用于遍历基础容器。</summary>
      <returns>如果迭代器有效并可安全使用，则为 true；否则为 false。</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1">
      <summary>定义一个迭代器，该迭代器以反向访问容器中的元素。 可以向前（通过使用递减运算符）或向后（通过使用递增运算符）访问元素。 无法修改迭代器指向的元素。 无论是需要常量反向输入迭代器还是常量反向输出迭代器，均可以使用常量反向双向迭代器。</summary>
      <typeparam name="TValue">The type of an element in the controlled sequence.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor">
      <summary>分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0})">
      <summary>从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" /> 对象。</summary>
      <param name="_Iter">要复制的现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。</summary>
      <param name="_Right">要复制的现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。</summary>
      <param name="_Iter">要复制的现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.base">
      <summary>获取 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象的基础基迭代器。</summary>
      <returns>
        <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象的基础基迭代器。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.Clone">
      <summary>返回当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象的副本。</summary>
      <returns>当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象的副本。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.container">
      <summary>获取迭代器正在遍历的容器。</summary>
      <returns>迭代器正在遍历的容器。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象相同。</summary>
      <returns>如果两个迭代器为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象相同。</summary>
      <returns>如果两个 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_bias">
      <summary>获取迭代器的偏移。 偏移是迭代器相对于元素零的偏移量。</summary>
      <returns>迭代器的偏移。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_cref">
      <summary>返回对迭代器当前指向的元素的常量引用。</summary>
      <returns>对迭代器当前指向的元素的常量引用。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_node">
      <summary>获取迭代器指向的节点或元素。</summary>
      <returns>迭代器指向的节点。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_ref">
      <summary>返回对迭代器当前指向的元素的引用。</summary>
      <returns>对迭代器当前指向的元素的引用。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.next">
      <summary>将迭代器递减到基础容器中的上一个位置，如果已完全遍历此容器，则递减到容器开始位置前面的第一个位置。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>将给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象分配给当前对象。</summary>
      <returns>当前对象 (*this)。</returns>
      <param name="_Right">要分配给当前对象的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>将给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象分配给当前对象。</summary>
      <returns>当前对象 (*this)。</returns>
      <param name="_Right">要分配给当前对象的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@)">
      <summary>将迭代器递减一个元素。 递减反向迭代器与递增常规迭代器相同。 这是减量运算符的前缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@,System.Int32)">
      <summary>将迭代器递减一个元素。 递减反向迭代器与递增常规迭代器相同。 这是减量运算符的后缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象相同。</summary>
      <returns>如果两个迭代器为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象相同。</summary>
      <returns>如果两个迭代器为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}">
      <summary>将 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 转换为 <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />。</summary>
      <returns>当前迭代器，作为一个 <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@)">
      <summary>将迭代器递增一个元素。 递增反向迭代器与递减常规迭代器相同。 这是递增运算符的前缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@,System.Int32)">
      <summary>将迭代器递增一个元素。 递增反向迭代器与递减常规迭代器相同。 这是递增运算符的后缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>确定给定的 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象是否与当前的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象不同。</summary>
      <returns>如果两个迭代器是不同的对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象不同。</summary>
      <returns>如果两个迭代器是不同的对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>返回迭代器当前指向的元素。</summary>
      <returns>迭代器当前指向的元素。</returns>
      <param name="_Left">应用该运算符的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>返回迭代器当前指向的元素。</summary>
      <returns>迭代器当前指向的元素。</returns>
      <param name="_Left">应用该运算符的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.prev">
      <summary>将迭代器递增到基础容器中的下一个位置，如果已完全遍历该容器，则递增到容器末尾以外的第一个位置。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.valid">
      <summary>确定迭代器是否有效并可安全用于遍历基础容器。</summary>
      <returns>如果迭代器有效并可安全使用，则为 true；否则为 false。</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1">
      <summary>提供支持以下操作的迭代器：通过调用 operator-- 向前移动一个位置、通过调用 operator++ 向后移动一个位置、通过使用 operator[] 访问一个元素和通过使用指针算法访问一个元素。 无法修改迭代器访问的元素。</summary>
      <typeparam name="TValue">The type of an element in the controlled sequence.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor">
      <summary>分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> 对象。</summary>
      <param name="_Iter">要复制到当前容器的现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象。</summary>
      <param name="_Right">要复制到当前容器的现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象。</summary>
      <param name="_Iter">要复制到当前容器的现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.base">
      <summary>获取 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象的基础基迭代器。</summary>
      <returns>
        <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象的基础基迭代器。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Clone">
      <summary>创建当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象的副本。</summary>
      <returns>当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象的副本。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.container">
      <summary>获取迭代器正在遍历的容器。</summary>
      <returns>迭代器正在遍历的容器。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>确定当前迭代器指向的元素与给定迭代器指向的元素之间的距离。</summary>
      <returns>当前迭代器指向的元素与 <paramref name="_Right" /> 指向的元素之间的距离，以元素数为单位。 如果 <paramref name="_Right" /> 指向的元素位于当前迭代器指向的元素之前，则此数字为负数。</returns>
      <param name="_Right">一个有效迭代器，与当前迭代器指向同一个容器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定当前迭代器指向的元素与给定迭代器指向的元素之间的距离。</summary>
      <returns>当前迭代器指向的元素与 <paramref name="_Right" /> 指向的元素之间的距离，以元素数为单位。 如果 <paramref name="_Right" /> 指向的元素位于当前迭代器指向的元素之前，则此数字为负数。</returns>
      <param name="_Right">一个有效迭代器，与当前迭代器指向同一个容器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象相同。</summary>
      <returns>如果两个迭代器为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象相同。</summary>
      <returns>如果两个 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_bias">
      <summary>获取迭代器的偏移。 偏移是迭代器相对于元素零的偏移量。</summary>
      <returns>迭代器的偏移。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_cref">
      <summary>返回对迭代器当前指向的元素的常量引用。</summary>
      <returns>对迭代器当前指向的元素的常量引用。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_node">
      <summary>获取迭代器指向的节点或元素。</summary>
      <returns>迭代器指向的节点。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_ref">
      <summary>返回对迭代器当前指向的元素的引用。</summary>
      <returns>对迭代器当前指向的元素的引用。</returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Item(System.Int32)">
      <summary>访问容器中给定位置的元素。</summary>
      <returns>容器中给定位置的元素。</returns>
      <param name="_Pos">要访问的元素的位置。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>确定容器中当前迭代器指向的元素是否位于给定迭代器指向的元素之前。</summary>
      <returns>如果当前迭代器指向的元素位于 <paramref name="_Right" /> 指向的元素之前，则为 true；否则为 false。</returns>
      <param name="_Right">一个有效迭代器，与当前迭代器指向同一个容器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定容器中当前迭代器指向的元素是否位于给定迭代器指向的元素之前。</summary>
      <returns>如果当前迭代器指向的元素位于 <paramref name="_Right" /> 指向的元素之前，则为 true；否则为 false。</returns>
      <param name="_Right">一个有效迭代器，与当前迭代器指向同一个容器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.move(System.Int32)">
      <summary>按给定的元素数移动迭代器。</summary>
      <returns>遍历的实际元素数。 如果在迭代所需的元素数之前到达了容器的开始或末尾位置，则此数字将与 <paramref name="_Offset" /> 不同。</returns>
      <param name="_Offset">要遍历的元素数。 若要向前移动迭代器，请指定一个负数。 若要向后移动迭代器，请使用一个正数。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.next">
      <summary>将反向迭代器递增到基础容器中的下一个位置，如果已完全遍历此容器，则递增到容器开始位置前面的第一个位置。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
      <summary>按给定的元素数递增反向迭代器。 在加法运算符的右侧指定该整数参数。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
      <param name="_Right">要增加的元素的数目。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>按给定的元素数递增反向迭代器。 在加法运算符的左侧指定该整数参数。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
      <param name="_Left">要增加的元素的数目。</param>
      <param name="_Right">要递增的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>将给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象分配给当前对象。</summary>
      <returns>当前对象 (*this)。</returns>
      <param name="_Right">要分配给当前对象的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>将给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象分配给当前对象。</summary>
      <returns>当前对象 (*this)。</returns>
      <param name="_Right">要分配给当前对象的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)">
      <summary>将反向迭代器递减一个元素。 这是减量运算符的前缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
      <summary>将反向迭代器递减一个元素。 这是减量运算符的后缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定两个迭代器是否为同一对象。</summary>
      <returns>如果两个迭代器为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定左侧迭代器的位置是否大于给定的右侧迭代器的位置。</summary>
      <returns>如果左侧迭代器大于给定的右侧迭代器，则为 true；否则为 false。</returns>
      <param name="_Right">要与左侧迭代器进行比较的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定左侧迭代器的位置是否大于或等于给定的右侧迭代器的位置。</summary>
      <returns>如果左侧迭代器大于或等于给定的右侧迭代器，则为 true；否则为 false。</returns>
      <param name="_Right">要与左侧迭代器进行比较的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}">
      <summary>将 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 转换为 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />。</summary>
      <returns>当前迭代器，作为一个 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)">
      <summary>将反向迭代器递增一个元素。 这是递增运算符的前缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
      <summary>将反向迭代器递增一个元素。 这是递增运算符的后缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定给定的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象是否与当前的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象不同。</summary>
      <returns>如果两个迭代器是不同的对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定左侧迭代器的位置是否小于给定的右侧迭代器的位置。</summary>
      <returns>如果左侧迭代器小于给定的右侧迭代器，则为 true；否则为 false。</returns>
      <param name="_Right">要与左侧迭代器进行比较的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定左侧迭代器的位置是否小于或等于给定的右侧迭代器的位置。</summary>
      <returns>如果左侧迭代器小于或等于给定的右侧迭代器，则为 true；否则为 false。</returns>
      <param name="_Right">要与左侧迭代器进行比较的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>返回迭代器当前指向的元素。</summary>
      <returns>迭代器当前指向的元素。</returns>
      <param name="_Left">应用该运算符的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>返回迭代器当前指向的元素。</summary>
      <returns>迭代器当前指向的元素。</returns>
      <param name="_Left">应用该运算符的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
      <summary>按给定的元素数递减迭代器。 在减法运算符的右侧指定该整数参数。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
      <param name="_Right">要减少的元素的数目。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>确定两个迭代器之间的差值。</summary>
      <returns>两个迭代器之间差值（元素数）。</returns>
      <param name="_Right">要从当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象中减去的 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.prev">
      <summary>将迭代器定位到紧靠当前元素之后的元素。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.valid">
      <summary>确定迭代器是否有效并可安全用于遍历基础容器。</summary>
      <returns>如果迭代器有效并可安全使用，则为 true；否则为 false。</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1">
      <summary>定义一个迭代器，该迭代器可以向前（通过使用递增运算符）或向后（通过使用递减运算符）访问容器中的元素。 迭代器指向的元素可以写入和读出任意多次。 无论是需要输入迭代器还是输出迭代器，均可以使用双向迭代器。</summary>
      <typeparam name="TValue">The type of an element in the controlled sequence.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor">
      <summary>分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})">
      <summary>分配并初始化指向给定节点的新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。</summary>
      <param name="_Node">迭代器将指向的节点。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。</summary>
      <param name="_Right">要复制的现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.Clone">
      <summary>返回当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象的副本。</summary>
      <returns>当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象的副本。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.container">
      <summary>获取迭代器正在遍历的容器。</summary>
      <returns>迭代器正在遍历的容器。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象相同。</summary>
      <returns>如果两个迭代器为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象相同。</summary>
      <returns>如果两个 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_bias">
      <summary>获取迭代器的偏移。 偏移是迭代器相对于元素零的偏移量。</summary>
      <returns>迭代器的偏移。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_cref">
      <summary>返回对迭代器当前指向的元素的常量引用。</summary>
      <returns>对迭代器当前指向的元素的常量引用。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_node">
      <summary>获取迭代器指向的节点或元素。</summary>
      <returns>迭代器指向的节点。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_ref">
      <summary>返回对迭代器当前指向的元素的引用。</summary>
      <returns>对迭代器当前指向的元素的引用。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.next">
      <summary>将迭代器递增到基础容器中的下一个位置，如果已完全遍历该容器，则递增到容器末尾以外的第一个位置。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>将给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象分配给当前对象。</summary>
      <returns>当前对象 (*this)。</returns>
      <param name="_Right">要分配给当前对象的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)">
      <summary>将迭代器递减一个元素。 这是减量运算符的前缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,System.Int32)">
      <summary>将迭代器递减一个元素。 这是减量运算符的后缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象相同。</summary>
      <returns>如果两个迭代器为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象相同。</summary>
      <returns>如果两个迭代器为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}">
      <summary>将 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 转换为 <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />。</summary>
      <returns>当前迭代器，作为一个 <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)">
      <summary>将迭代器递增一个元素。 这是递增运算符的前缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,System.Int32)">
      <summary>将迭代器递增一个元素。 这是递增运算符的后缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>确定给定的 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象是否与当前的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象不同。</summary>
      <returns>如果两个迭代器是不同的对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定给定的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象是否与当前的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象不同。</summary>
      <returns>如果两个迭代器是不同的对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>返回迭代器当前指向的元素。</summary>
      <returns>迭代器当前指向的元素。</returns>
      <param name="_Left">应用该运算符的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>返回迭代器当前指向的元素。</summary>
      <returns>迭代器当前指向的元素。</returns>
      <param name="_Left">应用该运算符的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.prev">
      <summary>将迭代器定位到紧靠当前元素之前的元素。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.valid">
      <summary>确定迭代器是否有效并可安全用于遍历基础容器。</summary>
      <returns>如果迭代器有效并可安全使用，则为 true；否则为 false。</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1">
      <summary>提供支持以下操作的迭代器：通过调用 operator++ 向前移动一个位置、通过调用 operator-- 向后移动一个位置、通过使用 operator[] 访问一个元素和通过使用指针算法访问一个元素。</summary>
      <typeparam name="TValue">The type of an element in the controlled sequence.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor">
      <summary>分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer{`0},System.Int32)">
      <summary>从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" /> 对象。</summary>
      <param name="_Cont">要复制到当前容器的现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" /> 对象。</param>
      <param name="_Offset">创建后迭代器将指向的元素的偏移量。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。</summary>
      <param name="_Right">要复制到当前容器的现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Clone">
      <summary>创建当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象的副本。</summary>
      <returns>当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象的副本。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.container">
      <summary>获取迭代器正在遍历的容器。</summary>
      <returns>迭代器正在遍历的容器。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>确定当前迭代器指向的元素与给定迭代器指向的元素之间的距离。</summary>
      <returns>当前迭代器指向的元素与 <paramref name="_Right" /> 指向的元素之间的距离，以元素数为单位。 如果 <paramref name="_Right" /> 指向的元素位于当前迭代器指向的元素之前，则此数字为负数。</returns>
      <param name="_Right">一个有效迭代器，与当前迭代器指向同一个容器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定当前迭代器指向的元素与给定迭代器指向的元素之间的距离。</summary>
      <returns>当前迭代器指向的元素与 <paramref name="_Right" /> 指向的元素之间的距离，以元素数为单位。 如果 <paramref name="_Right" /> 指向的元素位于当前迭代器指向的元素之前，则此数字为负数。</returns>
      <param name="_Right">一个有效迭代器，与当前迭代器指向同一个容器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象相同。</summary>
      <returns>如果两个迭代器为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象相同。</summary>
      <returns>如果两个 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_bias">
      <summary>获取迭代器的偏移。 偏移是迭代器相对于元素零的偏移量。</summary>
      <returns>迭代器的偏移。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_cref">
      <summary>返回对迭代器当前指向的元素的常量引用。</summary>
      <returns>对迭代器当前指向的元素的常量引用。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_node">
      <summary>获取迭代器指向的节点或元素。</summary>
      <returns>迭代器指向的节点。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_ref">
      <summary>返回对迭代器当前指向的元素的引用。</summary>
      <returns>对迭代器当前指向的元素的引用。</returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Item(System.Int32)">
      <summary>访问容器中给定位置的元素。</summary>
      <returns>容器中给定位置的元素。</returns>
      <param name="_Pos">要访问的元素的位置。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>确定容器中当前迭代器指向的元素是否位于给定迭代器指向的元素之前。</summary>
      <returns>如果当前迭代器指向的元素位于 <paramref name="_Right" /> 指向的元素之前，则为 true；否则为 false。</returns>
      <param name="_Right">一个有效迭代器，与当前迭代器指向同一个容器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定容器中当前迭代器指向的元素是否位于给定迭代器指向的元素之前。</summary>
      <returns>如果当前迭代器指向的元素位于 <paramref name="_Right" /> 指向的元素之前，则为 true；否则为 false。</returns>
      <param name="_Right">一个有效迭代器，与当前迭代器指向同一个容器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.move(System.Int32)">
      <summary>按给定的元素数移动迭代器。</summary>
      <returns>遍历的实际元素数。 如果在迭代所需的元素数之前到达了容器的开始或末尾位置，则此数字将与 <paramref name="_Offset" /> 不同。</returns>
      <param name="_Offset">要遍历的元素数。 若要向前移动迭代器，请指定一个正数。 若要向后移动迭代器，请使用一个负数。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.next">
      <summary>将迭代器递增到基础容器中的下一个位置，如果已完全遍历该容器，则递增到容器末尾以外的第一个位置。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
      <summary>按给定的元素数递增迭代器。 在加法运算符的右侧指定该整数参数。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
      <param name="_Right">要增加的元素的数目。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>按给定的元素数递增迭代器。 在加法运算符的左侧指定该整数参数。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
      <param name="_Left">要增加的元素的数目。</param>
      <param name="_Right">要递增的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>将给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象分配给当前对象。</summary>
      <returns>当前对象 (*this)。</returns>
      <param name="_Right">要分配给当前对象的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
      <summary>将迭代器递减一个元素。 这是减量运算符的前缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
      <summary>将迭代器递减一个元素。 这是减量运算符的后缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象相同。</summary>
      <returns>如果两个迭代器为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象相同。</summary>
      <returns>如果两个迭代器为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定给定的左侧迭代器的位置是否大于给定的右侧迭代器的位置。</summary>
      <returns>如果给定的左侧迭代器大于给定的右侧迭代器，则为 true；否则为 false。</returns>
      <param name="_Left">要与右侧迭代器进行比较的迭代器。</param>
      <param name="_Right">要与左侧迭代器进行比较的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定左侧迭代器的位置是否大于给定的右侧迭代器的位置。</summary>
      <returns>如果左侧迭代器大于给定的右侧迭代器，则为 true；否则为 false。</returns>
      <param name="_Right">要与左侧迭代器进行比较的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>确定左侧迭代器的位置是否大于或等于给定的右侧迭代器的位置。</summary>
      <returns>如果左侧迭代器大于或等于给定的右侧迭代器，则为 true；否则为 false。</returns>
      <param name="_Right">要与左侧迭代器进行比较的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定左侧迭代器的位置是否大于或等于给定的右侧迭代器的位置。</summary>
      <returns>如果左侧迭代器大于或等于给定的右侧迭代器，则为 true；否则为 false。</returns>
      <param name="_Right">要与左侧迭代器进行比较的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}">
      <summary>将 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 转换为 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />。</summary>
      <returns>当前迭代器，作为一个 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
      <summary>将迭代器递增一个元素。 这是递增运算符的前缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
      <summary>将迭代器递增一个元素。 这是递增运算符的后缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>确定给定的 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象是否与当前的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象不同。</summary>
      <returns>如果两个迭代器是不同的对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定给定的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象是否与当前的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象不同。</summary>
      <returns>如果两个迭代器是不同的对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>确定左侧迭代器的位置是否小于给定的右侧迭代器的位置。</summary>
      <returns>如果左侧迭代器小于给定的右侧迭代器，则为 true；否则为 false。</returns>
      <param name="_Right">要与左侧迭代器进行比较的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定左侧迭代器的位置是否小于给定的右侧迭代器的位置。</summary>
      <returns>如果左侧迭代器小于给定的右侧迭代器，则为 true；否则为 false。</returns>
      <param name="_Right">要与左侧迭代器进行比较的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定给定的左侧迭代器的位置是否小于给定的右侧迭代器的位置。</summary>
      <returns>如果给定的左侧迭代器小于或等于给定的右侧迭代器，则为 true；否则为 false。</returns>
      <param name="_Left">要与右侧迭代器进行比较的迭代器。</param>
      <param name="_Right">要与左侧迭代器进行比较的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定左侧迭代器的位置是否小于或等于给定的右侧迭代器的位置。</summary>
      <returns>如果左侧迭代器小于或等于给定的右侧迭代器，则为 true；否则为 false。</returns>
      <param name="_Right">要与左侧迭代器进行比较的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>返回迭代器当前指向的元素。</summary>
      <returns>迭代器当前指向的元素。</returns>
      <param name="_Left">应用该运算符的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>返回迭代器当前指向的元素。</summary>
      <returns>迭代器当前指向的元素。</returns>
      <param name="_Left">应用该运算符的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
      <summary>按给定的元素数递减迭代器。 在减法运算符的右侧指定该整数参数。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
      <param name="_Right">要减少的元素的数目。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>确定两个迭代器之间的差值。</summary>
      <returns>两个迭代器之间差值（元素数）。</returns>
      <param name="_Right">要从当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象中减去的 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.prev">
      <summary>将迭代器定位到紧靠当前元素之前的元素。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.valid">
      <summary>确定迭代器是否有效并可安全用于遍历基础容器。</summary>
      <returns>如果迭代器有效并可安全使用，则为 true；否则为 false。</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1">
      <summary>定义所有 STL/CLR 迭代器的基接口。</summary>
      <typeparam name="TValue">The type of an element in the controlled sequence.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.container">
      <summary>获取迭代器正在遍历的容器。</summary>
      <returns>迭代器正在遍历的容器。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.get_bias">
      <summary>获取迭代器的偏移。 偏移是迭代器相对于元素零的偏移量。</summary>
      <returns>迭代器的偏移。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.get_node">
      <summary>获取迭代器指向的节点或元素。</summary>
      <returns>迭代器当前指向的节点。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.next">
      <summary>将迭代器递增到基础容器中的下一个位置，如果已完全遍历该容器，则递增到容器末尾以外的第一个位置。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.valid">
      <summary>确定迭代器是否有效并可安全用于遍历基础容器。</summary>
      <returns>如果迭代器有效并可安全使用，则为 true；否则为 false。</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1">
      <summary>支持向前迭代和向后迭代的容器接口。 实现双向迭代的容器支持以下操作：通过调用 operator++ 向前移动一个位置和通过调用 operator-- 向后移动一个位置。</summary>
      <typeparam name="TValue">The type of an element in the controlled sequence.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1.get_generation">
      <summary>获取基础容器的当前换代。</summary>
      <returns>基础容器的当前换代。</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1">
      <summary>迭代器的接口，该迭代器可以向前（通过使用递增运算符）或向后（通过使用递减运算符）访问容器中的元素。 迭代器指向的元素可以写入和读出任意多次。 无论是需要输入迭代器还是输出迭代器，均可以使用双向迭代器。</summary>
      <typeparam name="TValue">The type of an element in the controlled sequence.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1.prev">
      <summary>将迭代器定位到紧靠当前元素之前的元素。</summary>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IForwardIterator`1">
      <summary>迭代器的接口，只能通过使用递增运算符向前访问容器中的元素。 迭代器指向的元素可以写入和读出任意多次。 无论是需要输入迭代器还是输出迭代器，均可以使用向前迭代器。</summary>
      <typeparam name="TValue">The type of an element in the controlled sequence.</typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1">
      <summary>迭代器的接口，仅用于向前读取容器中的序列。 迭代器指向的元素只能读取一次，并且不可修改。</summary>
      <typeparam name="TValue">The type of an element in the controlled sequence.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IInputIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>确定两个 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象是否相等。</summary>
      <returns>如果当前迭代器和指定迭代器相等，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IInputIterator`1.get_cref">
      <summary>返回对迭代器当前指向的元素的常量引用。</summary>
      <returns>对迭代器当前指向的元素的常量引用。</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.INode`1">
      <summary>节点数据结构的接口。 支持双向迭代的容器包含节点。 节点由容器中该位置的元素值和指向容器中下一个元素和上一个元素的指针组成。</summary>
      <typeparam name="TValue">The type of an element in the controlled sequence.</typeparam>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.Generic.INode`1._Value">
      <summary>获取或设置容器中此节点的元素值。</summary>
      <returns>容器中此节点的元素值。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.INode`1.container">
      <summary>获取当前节点所在的容器。</summary>
      <returns>当前节点所在的容器。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.INode`1.is_head">
      <summary>确定当前节点是否是容器的第一个节点。</summary>
      <returns>如果当前节点是容器中的第一个节点，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.INode`1.next_node">
      <summary>获取容器中当前节点后的下一个节点。</summary>
      <returns>容器中当前节点后的下一个节点。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.INode`1.prev_node">
      <summary>获取容器中紧靠当前节点之前的节点。</summary>
      <returns>容器中紧靠当前节点之前的节点。</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IOutputIterator`1">
      <summary>迭代器的接口，仅用于将序列向前写入到容器中。 迭代器指向的元素只能写入一次。</summary>
      <typeparam name="TValue">The type of an element in the controlled sequence.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IOutputIterator`1.get_ref">
      <summary>返回对迭代器当前指向的元素的引用。</summary>
      <returns>对迭代器当前指向的元素的引用。</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1">
      <summary>支持随机访问迭代的容器接口。 实现随机访问迭代的容器支持以下操作：通过调用 operator++ 向前移动一个位置、通过调用 operator-- 向后移动一个位置、通过使用 operator[] 访问一个元素和通过使用指针算法访问一个元素。</summary>
      <typeparam name="TValue">The type of an element in the controlled sequence.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1.at_bias(System.Int32)">
      <summary>获取容器中位于当前偏移处的元素。 偏移是相对于当前元素零的偏移量。</summary>
      <returns>给定偏移处的元素。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1.valid_bias(System.Int32)">
      <summary>确定给定偏移对容器是否有效。 偏移是相对于当前元素零的偏移量。</summary>
      <returns>如果给定偏移对容器有效，则为 true；否则为 false。</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1">
      <summary>定义随机访问迭代器的接口。 随机访问迭代器支持以下操作：通过调用 operator++ 向前移动一个位置、通过调用 operator-- 向后移动一个位置、通过使用 operator[] 访问一个元素和通过使用指针算法访问一个元素。</summary>
      <typeparam name="TValue">The type of an element in the controlled sequence.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>确定当前迭代器指向的元素与给定迭代器指向的元素之间的距离。</summary>
      <returns>当前迭代器指向的元素与 <paramref name="_Right" /> 指向的元素之间的距离，以元素数为单位。 如果 <paramref name="_Right" /> 指向的元素位于当前迭代器指向的元素之前，则此数字为负数。</returns>
      <param name="_Right">一个有效迭代器，与当前迭代器指向同一个容器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>确定容器中当前迭代器指向的元素是否位于给定迭代器指向的元素之前。</summary>
      <returns>如果当前迭代器指向的元素位于 <paramref name="_Right" /> 指向的元素之前，则为 true；否则为 false。</returns>
      <param name="_Right">一个有效迭代器，与当前迭代器指向同一个容器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move(System.Int32)">
      <summary>按给定的元素数移动迭代器。</summary>
      <returns>遍历的实际元素数。 如果在迭代所需的元素数之前到达了容器的开始或末尾位置，则此数字将与 <paramref name="_Offset" /> 不同。</returns>
      <param name="_Offset">要遍历的元素数。 若要向前移动迭代器，请指定一个正数。 若要向后移动迭代器，请使用一个负数。</param>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1">
      <summary>定义一个迭代器，该迭代器以反向访问容器中的元素。 可以向前（通过使用递减运算符）或向后（通过使用递增运算符）访问元素。 迭代器指向的元素可以写入和读出任意多次。 无论是需要反向输入迭代器还是反向输出迭代器，均可以使用反向双向迭代器。</summary>
      <typeparam name="TValue">The type of an element in the controlled sequence.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor">
      <summary>分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0})">
      <summary>从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" /> 对象。</summary>
      <param name="_Iter">要复制的现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。</summary>
      <param name="_Right">要复制的现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.base">
      <summary>获取 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象的基础基迭代器。</summary>
      <returns>
        <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象的基础基迭代器。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.Clone">
      <summary>返回当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象的副本。</summary>
      <returns>当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象的副本。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.container">
      <summary>获取迭代器正在遍历的容器。</summary>
      <returns>迭代器正在遍历的容器。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象相同。</summary>
      <returns>如果两个迭代器为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象相同。</summary>
      <returns>如果两个 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_bias">
      <summary>获取迭代器的偏移。 偏移是迭代器相对于元素零的偏移量。</summary>
      <returns>迭代器的偏移。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_cref">
      <summary>返回对迭代器当前指向的元素的常量引用。</summary>
      <returns>对迭代器当前指向的元素的常量引用。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_node">
      <summary>获取迭代器指向的节点或元素。</summary>
      <returns>迭代器指向的节点。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_ref">
      <summary>返回对迭代器当前指向的元素的引用。</summary>
      <returns>对迭代器当前指向的元素的引用。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.next">
      <summary>将迭代器递减到基础容器中的上一个位置，如果已完全遍历此容器，则递减到容器开始位置前面的第一个位置。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>将给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象分配给当前对象。</summary>
      <returns>当前对象 (*this)。</returns>
      <param name="_Right">要分配给当前对象的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)">
      <summary>将迭代器递减一个元素。 递减反向迭代器与递增常规迭代器相同。 这是减量运算符的前缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@,System.Int32)">
      <summary>将迭代器递减一个元素。 递减反向迭代器与递增常规迭代器相同。 这是减量运算符的后缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象相同。</summary>
      <returns>如果两个迭代器为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象相同。</summary>
      <returns>如果两个迭代器为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}">
      <summary>将 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 转换为 <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />。</summary>
      <returns>当前迭代器，作为一个 <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)">
      <summary>将迭代器递增一个元素。 递增反向迭代器与递减常规迭代器相同。 这是递增运算符的前缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@,System.Int32)">
      <summary>将迭代器递增一个元素。 递增反向迭代器与递减常规迭代器相同。 这是递增运算符的后缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象不同。</summary>
      <returns>如果两个迭代器是不同的对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定给定的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象是否与当前的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象不同。</summary>
      <returns>如果两个迭代器是不同的对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>返回迭代器当前指向的元素。</summary>
      <returns>迭代器当前指向的元素。</returns>
      <param name="_Left">应用该运算符的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>返回迭代器当前指向的元素。</summary>
      <returns>迭代器当前指向的元素。</returns>
      <param name="_Left">应用该运算符的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.prev">
      <summary>将迭代器递增到基础容器中的下一个位置，如果已完全遍历该容器，则递增到容器末尾以外的第一个位置。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.valid">
      <summary>确定迭代器是否有效并可安全用于遍历基础容器。</summary>
      <returns>如果迭代器有效并可安全使用，则为 true；否则为 false。</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1">
      <summary>提供支持以下操作的迭代器：通过调用 operator-- 向前移动一个位置、通过调用 operator++ 向后移动一个位置、通过使用 operator[] 访问一个元素和通过使用指针算法访问一个元素。</summary>
      <typeparam name="TValue">The type of an element in the controlled sequence.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor">
      <summary>分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> 对象。</summary>
      <param name="_Iter">要复制到当前容器的现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象。</summary>
      <param name="_Right">要复制到当前容器的现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.base">
      <summary>获取 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象的基础基迭代器。</summary>
      <returns>
        <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象的基础基迭代器。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.Clone">
      <summary>创建当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象的副本。</summary>
      <returns>当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象的副本。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.container">
      <summary>获取迭代器正在遍历的容器。</summary>
      <returns>迭代器正在遍历的容器。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>确定当前迭代器指向的元素与给定迭代器指向的元素之间的距离。</summary>
      <returns>当前迭代器指向的元素与 <paramref name="_Right" /> 指向的元素之间的距离，以元素数为单位。 如果 <paramref name="_Right" /> 指向的元素位于当前迭代器指向的元素之前，则此数字为负数。</returns>
      <param name="_Right">一个有效迭代器，与当前迭代器指向同一个容器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定当前迭代器指向的元素与给定迭代器指向的元素之间的距离。</summary>
      <returns>当前迭代器指向的元素与 <paramref name="_Right" /> 指向的元素之间的距离，以元素数为单位。 如果 <paramref name="_Right" /> 指向的元素位于当前迭代器指向的元素之前，则此数字为负数。</returns>
      <param name="_Right">一个有效迭代器，与当前迭代器指向同一个容器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象相同。</summary>
      <returns>如果两个迭代器为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象相同。</summary>
      <returns>如果两个 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.get_bias">
      <summary>获取迭代器的偏移。 偏移是迭代器相对于元素零的偏移量。</summary>
      <returns>迭代器的偏移。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.get_cref">
      <summary>返回对迭代器当前指向的元素的常量引用。</summary>
      <returns>对迭代器当前指向的元素的常量引用。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.get_node">
      <summary>获取迭代器指向的节点或元素。</summary>
      <returns>迭代器指向的节点。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.get_ref">
      <summary>返回对迭代器当前指向的元素的引用。</summary>
      <returns>对迭代器当前指向的元素的引用。</returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.Item(System.Int32)">
      <summary>访问容器中给定位置的元素。</summary>
      <returns>容器中给定位置的元素。</returns>
      <param name="_Pos">要访问的元素的位置。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>确定容器中当前迭代器指向的元素是否位于给定迭代器指向的元素之前。</summary>
      <returns>如果当前迭代器指向的元素位于 <paramref name="_Right" /> 指向的元素之前，则为 true；否则为 false。</returns>
      <param name="_Right">一个有效迭代器，与当前迭代器指向同一个容器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定容器中当前迭代器指向的元素是否位于给定迭代器指向的元素之前。</summary>
      <returns>如果当前迭代器指向的元素位于 <paramref name="_Right" /> 指向的元素之前，则为 true；否则为 false。</returns>
      <param name="_Right">一个有效迭代器，与当前迭代器指向同一个容器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.move(System.Int32)">
      <summary>按给定的元素数移动迭代器。</summary>
      <returns>遍历的实际元素数。 如果在迭代所需的元素数之前到达了容器的开始或末尾位置，则此数字将与 <paramref name="_Offset" /> 不同。</returns>
      <param name="_Offset">要遍历的元素数。 若要向前移动迭代器，请指定一个负数。 若要向后移动迭代器，请使用一个正数。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.next">
      <summary>将反向迭代器递增到基础容器中的下一个位置，如果已完全遍历此容器，则递增到容器开始位置前面的第一个位置。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
      <summary>按给定的元素数递增反向迭代器。 在加法运算符的右侧指定该整数参数。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
      <param name="_Right">要增加的元素的数目。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>按给定的元素数递增反向迭代器。 在加法运算符的左侧指定该整数参数。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
      <param name="_Left">要增加的元素的数目。</param>
      <param name="_Right">要递增的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>将给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象分配给当前对象。</summary>
      <returns>当前对象 (*this)。</returns>
      <param name="_Right">要分配给当前对象的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
      <summary>将反向迭代器递减一个元素。 这是减量运算符的前缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
      <summary>将反向迭代器递减一个元素。 这是减量运算符的后缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定两个迭代器是否为同一对象。</summary>
      <returns>如果两个迭代器为同一对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定左侧迭代器的位置是否大于给定的右侧迭代器的位置。</summary>
      <returns>如果左侧迭代器大于给定的右侧迭代器，则为 true；否则为 false。</returns>
      <param name="_Right">要与左侧迭代器进行比较的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定左侧迭代器的位置是否大于或等于给定的右侧迭代器的位置。</summary>
      <returns>如果左侧迭代器大于或等于给定的右侧迭代器，则为 true；否则为 false。</returns>
      <param name="_Right">要与左侧迭代器进行比较的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}">
      <summary>将 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 转换为 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />。</summary>
      <returns>当前迭代器，作为一个 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />。</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
      <summary>将反向迭代器递增一个元素。 这是递增运算符的前缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
      <summary>将反向迭代器递增一个元素。 这是递增运算符的后缀版本。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定给定的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象是否与当前的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象不同。</summary>
      <returns>如果两个迭代器是不同的对象，则为 true；否则为 false。</returns>
      <param name="_Right">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定左侧迭代器的位置是否小于给定的右侧迭代器的位置。</summary>
      <returns>如果左侧迭代器小于给定的右侧迭代器，则为 true；否则为 false。</returns>
      <param name="_Right">要与左侧迭代器进行比较的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>确定左侧迭代器的位置是否小于或等于给定的右侧迭代器的位置。</summary>
      <returns>如果左侧迭代器小于或等于给定的右侧迭代器，则为 true；否则为 false。</returns>
      <param name="_Right">要与左侧迭代器进行比较的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>返回迭代器当前指向的元素。</summary>
      <returns>迭代器当前指向的元素。</returns>
      <param name="_Left">应用该运算符的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>返回迭代器当前指向的元素。</summary>
      <returns>迭代器当前指向的元素。</returns>
      <param name="_Left">应用该运算符的迭代器。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>确定两个迭代器之间的差值。</summary>
      <returns>两个迭代器之间差值，以元素数为单位。</returns>
      <param name="_Right">要从当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象中减去的 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
      <summary>按给定的元素数递减迭代器。 在减法运算符的右侧指定该整数参数。</summary>
      <returns>迭代器。</returns>
      <param name="__unnamed0">对当前迭代器的引用。</param>
      <param name="_Right">要减少的元素的数目。</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.prev">
      <summary>将迭代器定位到紧靠当前元素之后的元素。</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.valid">
      <summary>确定迭代器是否有效并可安全用于遍历基础容器。</summary>
      <returns>如果迭代器有效并可安全使用，则为 true；否则为 false。</returns>
    </member>
  </members>
</doc>