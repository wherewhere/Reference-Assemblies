<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime</name>
  </assembly>
  <members>
    <member name="T:System.Action">
      <summary>パラメーターを受け取らず、戻り値を持たないメソッドをカプセル化します。</summary>
    </member>
    <member name="M:System.Action.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Action.BeginInvoke(System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Action.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Action.Invoke">
    </member>
    <member name="T:System.Action`1">
      <summary>単一のパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</summary>
      <typeparam name="T">このデリゲートによってカプセル化されるメソッドのパラメーターの型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Action`1.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Action`1.BeginInvoke(`0,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Action`1.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Action`1.Invoke(`0)">
    </member>
    <member name="T:System.Action`10">
      <summary>10 個のパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`10.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Action`10.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Action`10.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Action`10.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
    </member>
    <member name="T:System.Action`11">
      <summary>11 個のパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <typeparam name="T11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーターの型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`11.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Action`11.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Action`11.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Action`11.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
    </member>
    <member name="T:System.Action`12">
      <summary>12 個のパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <typeparam name="T11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーターの型。</typeparam>
      <typeparam name="T12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーターの型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`12.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Action`12.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Action`12.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Action`12.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)">
    </member>
    <member name="T:System.Action`13">
      <summary>13 個のパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <typeparam name="T11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーターの型。</typeparam>
      <typeparam name="T12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーターの型。</typeparam>
      <typeparam name="T13">このデリゲートによってカプセル化されるメソッドの第 13 パラメーターの型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`13.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Action`13.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Action`13.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Action`13.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)">
    </member>
    <member name="T:System.Action`14">
      <summary>14 個のパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <typeparam name="T11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーターの型。</typeparam>
      <typeparam name="T12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーターの型。</typeparam>
      <typeparam name="T13">このデリゲートによってカプセル化されるメソッドの第 13 パラメーターの型。</typeparam>
      <typeparam name="T14">このデリゲートによってカプセル化されるメソッドの第 14 パラメーターの型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`14.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Action`14.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Action`14.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Action`14.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)">
    </member>
    <member name="T:System.Action`15">
      <summary>15 個のパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <typeparam name="T11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーターの型。</typeparam>
      <typeparam name="T12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーターの型。</typeparam>
      <typeparam name="T13">このデリゲートによってカプセル化されるメソッドの第 13 パラメーターの型。</typeparam>
      <typeparam name="T14">このデリゲートによってカプセル化されるメソッドの第 14 パラメーターの型。</typeparam>
      <typeparam name="T15">このデリゲートによってカプセル化されるメソッドの第 15 パラメーターの型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`15.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Action`15.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Action`15.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Action`15.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)">
    </member>
    <member name="T:System.Action`16">
      <summary>16 個のパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <typeparam name="T11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーターの型。</typeparam>
      <typeparam name="T12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーターの型。</typeparam>
      <typeparam name="T13">このデリゲートによってカプセル化されるメソッドの第 13 パラメーターの型。</typeparam>
      <typeparam name="T14">このデリゲートによってカプセル化されるメソッドの第 14 パラメーターの型。</typeparam>
      <typeparam name="T15">このデリゲートによってカプセル化されるメソッドの第 15 パラメーターの型。</typeparam>
      <typeparam name="T16">このデリゲートによってカプセル化されるメソッドの第 16 パラメーターの型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`16.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Action`16.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Action`16.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Action`16.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15)">
    </member>
    <member name="T:System.Action`2">
      <summary>2 つのパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`2.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Action`2.BeginInvoke(`0,`1,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Action`2.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Action`2.Invoke(`0,`1)">
    </member>
    <member name="T:System.Action`3">
      <summary>3 つのパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`3.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Action`3.BeginInvoke(`0,`1,`2,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Action`3.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Action`3.Invoke(`0,`1,`2)">
    </member>
    <member name="T:System.Action`4">
      <summary>4 つのパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`4.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Action`4.BeginInvoke(`0,`1,`2,`3,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Action`4.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Action`4.Invoke(`0,`1,`2,`3)">
    </member>
    <member name="T:System.Action`5">
      <summary>5 個のパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`5.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Action`5.BeginInvoke(`0,`1,`2,`3,`4,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Action`5.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Action`5.Invoke(`0,`1,`2,`3,`4)">
    </member>
    <member name="T:System.Action`6">
      <summary>6 つのパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`6.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Action`6.BeginInvoke(`0,`1,`2,`3,`4,`5,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Action`6.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Action`6.Invoke(`0,`1,`2,`3,`4,`5)">
    </member>
    <member name="T:System.Action`7">
      <summary>7 つのパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`7.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Action`7.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Action`7.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Action`7.Invoke(`0,`1,`2,`3,`4,`5,`6)">
    </member>
    <member name="T:System.Action`8">
      <summary>8 つのパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`8.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Action`8.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Action`8.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Action`8.Invoke(`0,`1,`2,`3,`4,`5,`6,`7)">
    </member>
    <member name="T:System.Action`9">
      <summary>9 つのパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`9.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Action`9.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Action`9.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Action`9.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
    </member>
    <member name="T:System.Activator">
      <summary>オブジェクトの型をローカル サイトまたはリモート サイトに作成するメソッド、または既存のリモート オブジェクトへの参照を取得するメソッドを保持します。 このクラスは継承できません。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Activator.CreateInstance``1">
      <summary>パラメーターなしのコンストラクターを使用して、指定されたジェネリック型パラメーターによって決定される型のインスタンスを作成します。</summary>
      <returns>新しく作成されたオブジェクトへの参照。</returns>
      <typeparam name="T">作成する型。</typeparam>
      <exception cref="T:System.MissingMethodException">Windows ストア アプリのための .NET または汎用性のあるクラス ライブラリで、基本クラスの例外 <see cref="T:System.MissingMemberException" /> を代わりにキャッチします。 <paramref name="T" /> に指定された型にはパラメーターなしのコンストラクターがありません。</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type)">
      <summary>指定された型の既定のコンストラクターを使用して、指定された型のインスタンスを作成します。</summary>
      <returns>新しく作成されたオブジェクトへの参照。</returns>
      <param name="type">作成するオブジェクトの型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> は null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> が RuntimeType ではありません。 または <paramref name="type" /> はオープン ジェネリック型です (つまり、<see cref="P:System.Type.ContainsGenericParameters" /> プロパティは true を返します)。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> には、<see cref="T:System.Reflection.Emit.TypeBuilder" /> を指定できません。 または <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" />、および <see cref="T:System.RuntimeArgumentHandle" /> の各型の作成、またはこれらの型の配列の作成はサポートされていません。 または <paramref name="type" /> を含んでいるアセンブリは、<see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> で作成された動的アセンブリです。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">呼び出されているコンストラクターが例外をスローしました。</exception>
      <exception cref="T:System.MethodAccessException">Windows ストア アプリのための .NET または汎用性のあるクラス ライブラリで、基本クラスの例外 <see cref="T:System.MemberAccessException" /> を代わりにキャッチします。 呼び出し元に、このコンストラクターを呼び出すためのアクセス許可がありません。</exception>
      <exception cref="T:System.MemberAccessException">抽象クラスのインスタンスは作成できません。または、このメンバーが遅延バインディングの機構を使用して呼び出されました。</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">COM 型が <see cref="Overload:System.Type.GetTypeFromProgID" /> または <see cref="Overload:System.Type.GetTypeFromCLSID" /> を使用して取得されていません。</exception>
      <exception cref="T:System.MissingMethodException">Windows ストア アプリのための .NET または汎用性のあるクラス ライブラリで、基本クラスの例外 <see cref="T:System.MissingMemberException" /> を代わりにキャッチします。 一致するパブリック コンストラクターが見つかりませんでした。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> は COM オブジェクトですが、この型を取得するために使われたクラス ID が無効か、クラス ID が示すクラスが登録されていません。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> が有効な型ではありません。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Object[])">
      <summary>指定したパラメーターに最も一致するコンストラクターを使用して、指定した型のインスタンスを作成します。</summary>
      <returns>新しく作成されたオブジェクトへの参照。</returns>
      <param name="type">作成するオブジェクトの型。</param>
      <param name="args">呼び出すコンストラクターのパラメーターと、数、順序、および型が一致する引数の配列。 <paramref name="args" /> が空の配列または null である場合は、パラメーターをとらないコンストラクター (既定のコンストラクター) が呼び出されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> は null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> が RuntimeType ではありません。 または <paramref name="type" /> はオープン ジェネリック型です (つまり、<see cref="P:System.Type.ContainsGenericParameters" /> プロパティは true を返します)。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> には、<see cref="T:System.Reflection.Emit.TypeBuilder" /> を指定できません。 または <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" />、および <see cref="T:System.RuntimeArgumentHandle" /> の各型の作成、またはこれらの型の配列の作成はサポートされていません。 または <paramref name="type" /> を含んでいるアセンブリは、<see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> で作成された動的アセンブリです。 または <paramref name="args" /> に最も適合するコンストラクターが varargs 引数を持ちます。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">呼び出されているコンストラクターが例外をスローしました。</exception>
      <exception cref="T:System.MethodAccessException">Windows ストア アプリのための .NET または汎用性のあるクラス ライブラリで、基本クラスの例外 <see cref="T:System.MemberAccessException" /> を代わりにキャッチします。 呼び出し元に、このコンストラクターを呼び出すためのアクセス許可がありません。</exception>
      <exception cref="T:System.MemberAccessException">抽象クラスのインスタンスは作成できません。または、このメンバーが遅延バインディングの機構を使用して呼び出されました。</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">COM 型が <see cref="Overload:System.Type.GetTypeFromProgID" /> または <see cref="Overload:System.Type.GetTypeFromCLSID" /> を使用して取得されていません。</exception>
      <exception cref="T:System.MissingMethodException">Windows ストア アプリのための .NET または汎用性のあるクラス ライブラリで、基本クラスの例外 <see cref="T:System.MissingMemberException" /> を代わりにキャッチします。 一致するパブリック コンストラクターが見つかりませんでした。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> は COM オブジェクトですが、この型を取得するために使われたクラス ID が無効か、クラス ID が示すクラスが登録されていません。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> が有効な型ではありません。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, RemotingConfiguration" />
      </PermissionSet>
    </member>
    <member name="T:System.ArgumentException">
      <summary>メソッドに渡された引数のいずれかが無効な場合にスローされる例外。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ArgumentException.#ctor">
      <summary>
        <see cref="T:System.ArgumentException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.ArgumentException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.ArgumentException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。 <paramref name="innerException" /> パラメーターが null 参照でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String)">
      <summary>エラー メッセージ、およびこの例外の原因であるパラメーターの名前を指定して、<see cref="T:System.ArgumentException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="paramName">例外の原因となったパラメーターの名前。</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String,System.Exception)">
      <summary>エラー メッセージ、パラメーター名、およびこの例外の原因である内部例外への参照を指定して、<see cref="T:System.ArgumentException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="paramName">例外の原因となったパラメーターの名前。</param>
      <param name="innerException">現在の例外の原因である例外。 <paramref name="innerException" /> パラメーターが null 参照でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="P:System.ArgumentException.Message">
      <summary>エラー メッセージとパラメーター名を取得します。パラメーター名が設定されていない場合は、エラー メッセージだけを取得します。</summary>
      <returns>例外の詳細を説明する文字列。 このプロパティの値は、次の 2 つの値のいずれかになります。 
状態 	値 	
<paramref name="paramName" /> が null 参照 (Visual Basic の場合は Nothing) か、または長さが 0 です。 	コンストラクターに渡された <paramref name="message" /> 文字列。 	
<paramref name="paramName" /> が null 参照 (Visual Basic では Nothing) ではなく、その長さが 0 より大きい長さです。 	無効な引数の名前が末尾に追加された <paramref name="message" /> 文字列。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.ArgumentException.ParamName">
      <summary>この例外の原因である引数の名前を取得します。</summary>
      <returns>パラメーター名。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.ArgumentNullException">
      <summary>null 参照 (Visual Basic では Nothing) を有効な引数として受け付けないメソッドに null 参照を渡した場合にスローされる例外。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ArgumentNullException.#ctor">
      <summary>
        <see cref="T:System.ArgumentNullException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String)">
      <summary>この例外の原因である引数の名前を指定して、<see cref="T:System.ArgumentNullException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="paramName">例外の原因となったパラメーターの名前。</param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.Exception)">
      <summary>エラー メッセージ、およびこの例外の原因である例外を指定して、<see cref="T:System.ArgumentNullException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">この例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。内部例外が指定されていない場合は null 参照 (Visual Basic では、Nothing)。</param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.String)">
      <summary>指定したエラー メッセージと、この例外の原因である引数の名前を使用して、<see cref="T:System.ArgumentNullException" /> クラスのインスタンスを初期化します。</summary>
      <param name="paramName">例外の原因となったパラメーターの名前。</param>
      <param name="message">エラーについて説明するメッセージ。</param>
    </member>
    <member name="T:System.ArgumentOutOfRangeException">
      <summary>呼び出されたメソッドで定義されている許容範囲外の値が引数として渡された場合にスローされる例外。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor">
      <summary>
        <see cref="T:System.ArgumentOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
      <summary>この例外の原因である引数の名前を指定して、<see cref="T:System.ArgumentOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="paramName">この例外の原因となったパラメーターの名前。</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>エラー メッセージ、およびこの例外の原因である例外を指定して、<see cref="T:System.ArgumentOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">この例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。内部例外が指定されていない場合は null 参照 (Visual Basic では、Nothing)。</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
      <summary>パラメーター名、引数の値、および指定されたエラー メッセージを使用して、<see cref="T:System.ArgumentOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="paramName">例外の原因となったパラメーターの名前。</param>
      <param name="actualValue">この例外の原因である引数の値。</param>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
      <summary>この例外の原因となるパラメーターの名前と、指定したエラー メッセージを使用して、<see cref="T:System.ArgumentOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="paramName">例外の原因となったパラメーターの名前。</param>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.ActualValue">
      <summary>この例外の原因である引数値を取得します。</summary>
      <returns>現在の <see cref="T:System.Exception" /> の原因となったパラメーターの値が含まれた Object。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.Message">
      <summary>エラー メッセージおよび無効な引数値の文字列形式を取得します。引数値が null の場合は、エラー メッセージだけを取得します。</summary>
      <returns>この例外のエラー メッセージ。 このプロパティの値は、次の 2 つの値のいずれかになります。 
状態 	値 	
<paramref name="actualValue" /> は null です。 	コンストラクターに渡された <paramref name="message" /> 文字列。 	
<paramref name="actualValue" /> が null ではありません。 	無効な引数値の文字列形式が末尾に追加された <paramref name="message" /> 文字列。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.ArithmeticException">
      <summary>算術演算、キャスト演算、または変換演算におけるエラーが原因でスローされる例外。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ArithmeticException.#ctor">
      <summary>
        <see cref="T:System.ArithmeticException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.ArithmeticException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明する <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.ArithmeticException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。 <paramref name="innerException" /> パラメーターが null 参照でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Array">
      <summary>配列の作成、操作、検索、および並べ替えを行うメソッドを提供します。これにより、共通言語ランタイムのすべての配列の基底クラスとして機能します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)">
      <summary>1 次元の並べ替え済み <see cref="T:System.Array" /> の各要素および指定した値によって実装されている <see cref="T:System.IComparable" /> インターフェイスを使用して、その <see cref="T:System.Array" /> の要素範囲の中から値を検索します。</summary>
      <returns>指定した <paramref name="value" /> が存在する場合は、指定した <paramref name="array" /> におけるその <paramref name="value" /> のインデックス。 <paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内の 1 つ以上の要素よりも小さい場合は、負の値。これは、<paramref name="value" /> より大きい最初の要素のインデックスのビットごとの補数となります。 <paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内のどの要素よりも大きい場合は、負の値。これは、最後の要素のインデックス + 1 のビットごとの補数となります。</returns>
      <param name="array">検索対象となる並べ替え済みの 1 次元 <see cref="T:System.Array" />。</param>
      <param name="index">検索範囲の開始位置を示すインデックス。</param>
      <param name="length">検索する範囲の長さ。</param>
      <param name="value">検索するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> が多次元です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が <paramref name="array" /> の下限を下回っています。 または <paramref name="length" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> および <paramref name="length" /> で、<paramref name="array" /> 内の有効な範囲が指定されていません。 または <paramref name="value" /> が、<paramref name="array" /> の要素と互換性がない型です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> が <see cref="T:System.IComparable" /> インターフェイスを実装していません。<see cref="T:System.IComparable" /> インターフェイスを実装しない要素が検索で見つかりました。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <summary>指定した <see cref="T:System.Collections.IComparer" /> インターフェイスを使用して、1 次元の並べ替え済み <see cref="T:System.Array" /> 要素範囲の中から値を検索します。</summary>
      <returns>指定した <paramref name="value" /> が存在する場合は、指定した <paramref name="array" /> におけるその <paramref name="value" /> のインデックス。 <paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内の 1 つ以上の要素よりも小さい場合は、負の値。これは、<paramref name="value" /> より大きい最初の要素のインデックスのビットごとの補数となります。 <paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内のどの要素よりも大きい場合は、負の値。これは、最後の要素のインデックス + 1 のビットごとの補数となります。</returns>
      <param name="array">検索対象となる並べ替え済みの 1 次元 <see cref="T:System.Array" />。</param>
      <param name="index">検索範囲の開始位置を示すインデックス。</param>
      <param name="length">検索する範囲の長さ。</param>
      <param name="value">検索するオブジェクト。</param>
      <param name="comparer">要素を比較する場合に使用する <see cref="T:System.Collections.IComparer" /> 実装。 または 各要素の <see cref="T:System.IComparable" /> 実装を使用する場合は null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> が多次元です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が <paramref name="array" /> の下限を下回っています。 または <paramref name="length" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> および <paramref name="length" /> で、<paramref name="array" /> 内の有効な範囲が指定されていません。 または <paramref name="comparer" /> が null で、<paramref name="value" /> の型に <paramref name="array" /> の要素との互換性はありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> が null で、<paramref name="value" /> に <see cref="T:System.IComparable" /> インターフェイスが実装されておらず、検索時に <see cref="T:System.IComparable" /> インターフェイスが実装されていない要素が検出されます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object)">
      <summary>1 次元の並べ替え済み <see cref="T:System.Array" /> の各要素および指定したオブジェクトによって実装されている <see cref="T:System.IComparable" /> インターフェイスを使用して、その <see cref="T:System.Array" /> 全体の中から特定の要素を検索します。</summary>
      <returns>指定した <paramref name="value" /> が存在する場合は、指定した <paramref name="array" /> におけるその <paramref name="value" /> のインデックス。 <paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内の 1 つ以上の要素よりも小さい場合は、負の値。これは、<paramref name="value" /> より大きい最初の要素のインデックスのビットごとの補数となります。 <paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内のどの要素よりも大きい場合は、負の値。これは、最後の要素のインデックス + 1 のビットごとの補数となります。</returns>
      <param name="array">検索対象となる並べ替え済みの 1 次元 <see cref="T:System.Array" />。</param>
      <param name="value">検索するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> が多次元です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が、<paramref name="array" /> の要素と互換性がない型です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> が <see cref="T:System.IComparable" /> インターフェイスを実装していません。<see cref="T:System.IComparable" /> インターフェイスを実装しない要素が検索で見つかりました。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)">
      <summary>指定した <see cref="T:System.Collections.IComparer" /> インターフェイスを使用して、1 次元の並べ替え済み <see cref="T:System.Array" /> 全体の中から値を検索します。</summary>
      <returns>指定した <paramref name="value" /> が存在する場合は、指定した <paramref name="array" /> におけるその <paramref name="value" /> のインデックス。 <paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内の 1 つ以上の要素よりも小さい場合は、負の値。これは、<paramref name="value" /> より大きい最初の要素のインデックスのビットごとの補数となります。 <paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内のどの要素よりも大きい場合は、負の値。これは、最後の要素のインデックス + 1 のビットごとの補数となります。</returns>
      <param name="array">検索対象となる並べ替え済みの 1 次元 <see cref="T:System.Array" />。</param>
      <param name="value">検索するオブジェクト。</param>
      <param name="comparer">要素を比較する場合に使用する <see cref="T:System.Collections.IComparer" /> 実装。 または 各要素の <see cref="T:System.IComparable" /> 実装を使用する場合は null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> が多次元です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> が null で、<paramref name="value" /> の型に <paramref name="array" /> の要素との互換性はありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> が null で、<paramref name="value" /> に <see cref="T:System.IComparable" /> インターフェイスが実装されておらず、検索時に <see cref="T:System.IComparable" /> インターフェイスが実装されていない要素が検出されます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)">
      <summary>1 次元の並べ替え済み <see cref="T:System.Array" /> の各要素および指定した値によって実装されている <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを使用して、その <see cref="T:System.Array" /> 要素範囲の中から値を検索します。</summary>
      <returns>指定した <paramref name="value" /> が存在する場合は、指定した <paramref name="array" /> におけるその <paramref name="value" /> のインデックス。 <paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内の 1 つ以上の要素よりも小さい場合は、負の値。これは、<paramref name="value" /> より大きい最初の要素のインデックスのビットごとの補数となります。 <paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内のどの要素よりも大きい場合は、負の値。これは、最後の要素のインデックス + 1 のビットごとの補数となります。</returns>
      <param name="array">検索対象となる、インデックス番号が 0 から始まる並べ替え済みの 1 次元 <see cref="T:System.Array" />。</param>
      <param name="index">検索範囲の開始位置を示すインデックス。</param>
      <param name="length">検索する範囲の長さ。</param>
      <param name="value">検索するオブジェクト。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が <paramref name="array" /> の下限を下回っています。 または <paramref name="length" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> および <paramref name="length" /> で、<paramref name="array" /> 内の有効な範囲が指定されていません。 または <paramref name="value" /> が、<paramref name="array" /> の要素と互換性がない型です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> が <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを実装していません。<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを実装しない要素が検索で見つかりました。</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary>指定した <see cref="T:System.Collections.Generic.IComparer`1" /> ジェネリック インターフェイスを使用して、1 次元の並べ替え済み <see cref="T:System.Array" /> 要素範囲の中から値を検索します。</summary>
      <returns>指定した <paramref name="value" /> が存在する場合は、指定した <paramref name="array" /> におけるその <paramref name="value" /> のインデックス。 <paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内の 1 つ以上の要素よりも小さい場合は、負の値。これは、<paramref name="value" /> より大きい最初の要素のインデックスのビットごとの補数となります。 <paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内のどの要素よりも大きい場合は、負の値。これは、最後の要素のインデックス + 1 のビットごとの補数となります。</returns>
      <param name="array">検索対象となる、インデックス番号が 0 から始まる並べ替え済みの 1 次元 <see cref="T:System.Array" />。</param>
      <param name="index">検索範囲の開始位置を示すインデックス。</param>
      <param name="length">検索する範囲の長さ。</param>
      <param name="value">検索するオブジェクト。</param>
      <param name="comparer">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> 実装。 または 各要素の <see cref="T:System.IComparable`1" /> 実装を使用する場合は null。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が <paramref name="array" /> の下限を下回っています。 または <paramref name="length" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> および <paramref name="length" /> で、<paramref name="array" /> 内の有効な範囲が指定されていません。 または <paramref name="comparer" /> が null で、<paramref name="value" /> の型に <paramref name="array" /> の要素との互換性はありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> が null で、<paramref name="value" /> に <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスが実装されておらず、検索時に <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスが実装されていない要素が検出されます。</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0)">
      <summary>1 次元の並べ替え済み <see cref="T:System.Array" /> の各要素および指定したオブジェクトによって実装されている <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを使用して、その <see cref="T:System.Array" /> 全体の中から特定の要素を検索します。</summary>
      <returns>指定した <paramref name="value" /> が存在する場合は、指定した <paramref name="array" /> におけるその <paramref name="value" /> のインデックス。 <paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内の 1 つ以上の要素よりも小さい場合は、負の値。これは、<paramref name="value" /> より大きい最初の要素のインデックスのビットごとの補数となります。 <paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内のどの要素よりも大きい場合は、負の値。これは、最後の要素のインデックス + 1 のビットごとの補数となります。</returns>
      <param name="array">検索対象となる、インデックス番号が 0 から始まる並べ替え済みの 1 次元 <see cref="T:System.Array" />。</param>
      <param name="value">検索するオブジェクト。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> が <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを実装していません。<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを実装しない要素が検索で見つかりました。</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})">
      <summary>指定した <see cref="T:System.Collections.Generic.IComparer`1" /> ジェネリック インターフェイスを使用して、1 次元の並べ替え済み <see cref="T:System.Array" /> 全体の中から値を検索します。</summary>
      <returns>指定した <paramref name="value" /> が存在する場合は、指定した <paramref name="array" /> におけるその <paramref name="value" /> のインデックス。 <paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内の 1 つ以上の要素よりも小さい場合は、負の値。これは、<paramref name="value" /> より大きい最初の要素のインデックスのビットごとの補数となります。 <paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内のどの要素よりも大きい場合は、負の値。これは、最後の要素のインデックス + 1 のビットごとの補数となります。</returns>
      <param name="array">検索対象となる、インデックス番号が 0 から始まる並べ替え済みの 1 次元 <see cref="T:System.Array" />。</param>
      <param name="value">検索するオブジェクト。</param>
      <param name="comparer">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> 実装。 または 各要素の <see cref="T:System.IComparable`1" /> 実装を使用する場合は null。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> が null で、<paramref name="value" /> の型に <paramref name="array" /> の要素との互換性はありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> が null で、<paramref name="value" /> に <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスが実装されておらず、検索時に <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスが実装されていない要素が検出されます。</exception>
    </member>
    <member name="M:System.Array.Clear(System.Array,System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Array" /> 内の要素の範囲を、要素の型に応じて、0 (ゼロ)、false、または null に設定します。</summary>
      <param name="array">要素を削除する必要がある <see cref="T:System.Array" />。</param>
      <param name="index">削除する要素の範囲の開始インデックス。</param>
      <param name="length">削除する要素の数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> が <paramref name="array" /> の下限を下回っています。 または <paramref name="length" /> が 0 未満です。 または <paramref name="index" /> と <paramref name="length" /> の合計値が、<see cref="T:System.Array" /> のサイズより大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Clone">
      <summary>
        <see cref="T:System.Array" /> の簡易コピーを作成します。</summary>
      <returns>
        <see cref="T:System.Array" /> の簡易コピー。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>指定したコピー元インデックスを開始位置として <see cref="T:System.Array" /> から要素の範囲をコピーし、指定したコピー先インデックスを開始位置として他の <see cref="T:System.Array" /> にそれらの要素を貼り付けます。コピーが完全に成功しない限り、変更は一切適用されません。</summary>
      <param name="sourceArray">コピーするデータを格納している <see cref="T:System.Array" />。</param>
      <param name="sourceIndex">コピー操作の開始位置となる <paramref name="sourceArray" /> 内のインデックスを表す 32 ビット整数。</param>
      <param name="destinationArray">データを受け取る <see cref="T:System.Array" />。</param>
      <param name="destinationIndex">格納を開始する <paramref name="destinationArray" /> のインデックスを表す 32 ビット整数。</param>
      <param name="length">コピーする要素の数を表す 32 ビット整数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> は null なので、 または <paramref name="destinationArray" /> は null なので、</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> と <paramref name="destinationArray" /> のランクが異なります。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> の型が <paramref name="destinationArray" /> の型 (またはその派生型) と異なります。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="sourceArray" /> 内の 1 つ以上の要素を <paramref name="destinationArray" /> の型にキャストできません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> が、<paramref name="sourceArray" /> の最初の次元の下限より小さい値です。 または <paramref name="destinationIndex" /> が、<paramref name="destinationArray" /> の最初の次元の下限より小さい値です。 または <paramref name="length" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> が、<paramref name="sourceIndex" /> から <paramref name="sourceArray" /> の末尾までの要素数を超えています。 または <paramref name="length" /> が、<paramref name="destinationIndex" /> から <paramref name="destinationArray" /> の末尾までの要素数を超えています。</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Array,System.Int32)">
      <summary>最初の要素を開始位置として <see cref="T:System.Array" /> から要素の範囲をコピーし、最初の要素を開始位置として他の <see cref="T:System.Array" /> にそれらの要素を貼り付けます。 長さは 32 ビット整数値として指定します。</summary>
      <param name="sourceArray">コピーするデータを格納している <see cref="T:System.Array" />。</param>
      <param name="destinationArray">データを受け取る <see cref="T:System.Array" />。</param>
      <param name="length">コピーする要素の数を表す 32 ビット整数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> は null なので、 または <paramref name="destinationArray" /> は null なので、</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> と <paramref name="destinationArray" /> のランクが異なります。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> と <paramref name="destinationArray" /> の型に互換性がありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="sourceArray" /> 内の 1 つ以上の要素を <paramref name="destinationArray" /> の型にキャストできません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> が <paramref name="sourceArray" /> 内の要素数を超えています。 または <paramref name="length" /> が <paramref name="destinationArray" /> 内の要素数を超えています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>指定したコピー元インデックスを開始位置として <see cref="T:System.Array" /> から要素の範囲をコピーし、指定したコピー先インデックスを開始位置として他の <see cref="T:System.Array" /> にそれらの要素を貼り付けます。 長さとインデックスは、32 ビット整数として指定します。</summary>
      <param name="sourceArray">コピーするデータを格納している <see cref="T:System.Array" />。</param>
      <param name="sourceIndex">コピー操作の開始位置となる <paramref name="sourceArray" /> 内のインデックスを表す 32 ビット整数。</param>
      <param name="destinationArray">データを受け取る <see cref="T:System.Array" />。</param>
      <param name="destinationIndex">格納を開始する <paramref name="destinationArray" /> のインデックスを表す 32 ビット整数。</param>
      <param name="length">コピーする要素の数を表す 32 ビット整数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> は null なので、 または <paramref name="destinationArray" /> は null なので、</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> と <paramref name="destinationArray" /> のランクが異なります。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> と <paramref name="destinationArray" /> の型に互換性がありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="sourceArray" /> 内の 1 つ以上の要素を <paramref name="destinationArray" /> の型にキャストできません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> が、<paramref name="sourceArray" /> の最初の次元の下限より小さい値です。 または <paramref name="destinationIndex" /> が、<paramref name="destinationArray" /> の最初の次元の下限より小さい値です。 または <paramref name="length" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> が、<paramref name="sourceIndex" /> から <paramref name="sourceArray" /> の末尾までの要素数を超えています。 または <paramref name="length" /> が、<paramref name="destinationIndex" /> から <paramref name="destinationArray" /> の末尾までの要素数を超えています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.CopyTo(System.Array,System.Int32)">
      <summary>現在の 1 次元 <see cref="T:System.Array" /> のすべての要素を、指定した 1 次元 <see cref="T:System.Array" /> に <see cref="T:System.Array" /> の指定したコピー先インデックスを開始位置としてコピーします。 インデックスは 32 ビット整数値として指定します。</summary>
      <param name="array">現在の <see cref="T:System.Array" /> から要素がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index">コピーを開始する <paramref name="array" /> のインデックスを表す 32 ビット整数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が <paramref name="array" /> の下限を下回っています。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。 または コピー元の <see cref="T:System.Array" /> の要素数が、<paramref name="index" /> からコピー先の <paramref name="array" /> の末尾までに格納できる数を超えています。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">コピー元の <see cref="T:System.Array" /> の型が、コピー先の <paramref name="array" /> の型に自動的にキャストできません。</exception>
      <exception cref="T:System.RankException">コピー元の <see cref="T:System.Array" /> が多次元です。</exception>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.Array" /> 内の 1 つ以上の要素を <paramref name="array" /> の型にキャストできません。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[])">
      <summary>
        <see cref="T:System.Type" /> と次元の長さを指定して、0 から始まるインデックス番号を持つ多次元の <see cref="T:System.Array" /> を作成します。 次元の長さは、32 ビット整数の配列で指定します。</summary>
      <returns>各次元が指定した長さで、インデックス番号が 0 から始まる、指定した <see cref="T:System.Type" /> の新しい多次元 <see cref="T:System.Array" />。</returns>
      <param name="elementType">作成する <see cref="T:System.Array" /> の <see cref="T:System.Type" />。</param>
      <param name="lengths">作成する <see cref="T:System.Array" /> の各次元のサイズを表す 32 ビット整数の配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> は null なので、 または <paramref name="lengths" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> が有効な <see cref="T:System.Type" /> ではありません。 または <paramref name="lengths" /> 配列に含まれる要素が 1 つ未満です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="elementType" /> がサポートされていません。 たとえば、<see cref="T:System.Void" /> はサポートされていません。 または <paramref name="elementType" /> がオープン ジェネリック型です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lengths" /> のいずれかの値が 0 未満です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])">
      <summary>
        <see cref="T:System.Type" /> と次元の長さを指定して、下限を持つ多次元の <see cref="T:System.Array" /> を作成します。</summary>
      <returns>次元ごとに指定した長さおよび下限を持つ、指定した <see cref="T:System.Type" /> の新しい多次元の <see cref="T:System.Array" />。</returns>
      <param name="elementType">作成する <see cref="T:System.Array" /> の <see cref="T:System.Type" />。</param>
      <param name="lengths">作成する <see cref="T:System.Array" /> の各次元のサイズを格納する 1 次元配列。</param>
      <param name="lowerBounds">作成する <see cref="T:System.Array" /> の各次元の下限 (開始インデックス) を格納する 1 次元配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> は null なので、 または <paramref name="lengths" /> は null なので、 または <paramref name="lowerBounds" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> が有効な <see cref="T:System.Type" /> ではありません。 または <paramref name="lengths" /> 配列に含まれる要素が 1 つ未満です。 または <paramref name="lengths" /> 配列と <paramref name="lowerBounds" /> 配列の要素数が異なります。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="elementType" /> がサポートされていません。 たとえば、<see cref="T:System.Void" /> はサポートされていません。 または <paramref name="elementType" /> がオープン ジェネリック型です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lengths" /> のいずれかの値が 0 未満です。 または <paramref name="lowerBounds" /> のいずれかの値が非常に大きく、次元の下限と長さの合計が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Exists``1(``0[],System.Predicate{``0})">
      <summary>指定された配列に、指定された述語によって定義された条件と一致する要素が含まれているかどうかを判断します。</summary>
      <returns>指定された述語によって定義された条件と一致する要素が少なくとも 1 つ、<paramref name="array" /> に存在する場合は、true。それ以外の場合は false。</returns>
      <param name="array">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</param>
      <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、 または <paramref name="match" /> は null なので、</exception>
    </member>
    <member name="M:System.Array.Find``1(``0[],System.Predicate{``0})">
      <summary>指定された述語によって定義された条件と一致する要素を検索し、<see cref="T:System.Array" /> 全体の中で最もインデックス番号の小さい要素を返します。</summary>
      <returns>見つかった場合は、指定された述語によって定義された条件と一致する最初の要素。それ以外の場合は、型 <paramref name="T" /> の既定値。</returns>
      <param name="array">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</param>
      <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、 または <paramref name="match" /> は null なので、</exception>
    </member>
    <member name="M:System.Array.FindAll``1(``0[],System.Predicate{``0})">
      <summary>指定された述語によって定義された条件と一致するすべての要素を取得します。</summary>
      <returns>見つかった場合は、指定された述語によって定義された条件と一致するすべての要素を格納した <see cref="T:System.Array" />。それ以外の場合は、空の <see cref="T:System.Array" />。</returns>
      <param name="array">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</param>
      <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、 または <paramref name="match" /> は null なので、</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
      <summary>指定された述語によって定義された条件と一致する要素を、<see cref="T:System.Array" /> の指定されたインデックスから、指定された要素数を範囲として検索し、最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</summary>
      <returns>
        <paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は –1。</returns>
      <param name="array">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</param>
      <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">検索対象の範囲内にある要素の数。</param>
      <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、 または <paramref name="match" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が <paramref name="array" /> の有効なインデックスの範囲外の値です。 または <paramref name="count" /> が 0 未満です。 または <paramref name="startIndex" /> および <paramref name="count" /> が <paramref name="array" /> 内の有効な範囲を示していません。</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})">
      <summary>指定された述語によって定義された条件と一致する要素を、<see cref="T:System.Array" /> の指定されたインデックスから、最後の要素までを範囲として検索し、最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</summary>
      <returns>
        <paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は –1。</returns>
      <param name="array">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</param>
      <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、 または <paramref name="match" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が <paramref name="array" /> の有効なインデックスの範囲外の値です。</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Predicate{``0})">
      <summary>指定された述語によって定義された条件と一致する要素を、<see cref="T:System.Array" /> 全体を対象に検索し、最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</summary>
      <returns>
        <paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は –1。</returns>
      <param name="array">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</param>
      <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、 または <paramref name="match" /> は null なので、</exception>
    </member>
    <member name="M:System.Array.FindLast``1(``0[],System.Predicate{``0})">
      <summary>指定された述語によって定義された条件と一致する要素を、<see cref="T:System.Array" /> 全体を対象に検索し、最もインデックス番号の大きい要素を返します。</summary>
      <returns>見つかった場合は、指定された述語によって定義された条件と一致する最後の要素。それ以外の場合は、型 <paramref name="T" /> の既定値。</returns>
      <param name="array">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</param>
      <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、 または <paramref name="match" /> は null なので、</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
      <summary>指定された述語によって定義された条件と一致する要素を、<see cref="T:System.Array" /> の指定されたインデックス位置から、指定された要素数までを範囲として検索し、最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
      <returns>
        <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は –1。</returns>
      <param name="array">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</param>
      <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">検索対象の範囲内にある要素の数。</param>
      <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、 または <paramref name="match" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が <paramref name="array" /> の有効なインデックスの範囲外の値です。 または <paramref name="count" /> が 0 未満です。 または <paramref name="startIndex" /> および <paramref name="count" /> が <paramref name="array" /> 内の有効な範囲を示していません。</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})">
      <summary>指定された述語によって定義された条件と一致する要素を、<see cref="T:System.Array" /> の先頭の要素から、指定されたインデックス位置までを範囲として検索し、最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
      <returns>
        <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は –1。</returns>
      <param name="array">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</param>
      <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、 または <paramref name="match" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が <paramref name="array" /> の有効なインデックスの範囲外の値です。</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Predicate{``0})">
      <summary>指定された述語によって定義された条件と一致する要素を、<see cref="T:System.Array" /> 全体を対象に検索し、最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
      <returns>
        <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は –1。</returns>
      <param name="array">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</param>
      <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、 または <paramref name="match" /> は null なので、</exception>
    </member>
    <member name="M:System.Array.GetEnumerator">
      <summary>
        <see cref="T:System.Array" /> の <see cref="T:System.Collections.IEnumerator" /> を返します。</summary>
      <returns>
        <see cref="T:System.Array" /> の <see cref="T:System.Collections.IEnumerator" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Array.GetLength(System.Int32)">
      <summary>
        <see cref="T:System.Array" /> の指定した次元にある要素の数を表す 32 ビット整数を取得します。</summary>
      <returns>指定した次元にある要素の数を表す 32 ビット整数。</returns>
      <param name="dimension">長さを指定する <see cref="T:System.Array" /> の 0 から始まる次元。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> が 0 未満です。 または <paramref name="dimension" /> が <see cref="P:System.Array.Rank" /> 以上です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.GetLowerBound(System.Int32)">
      <summary>配列内で指定した次元の、最初の要素のインデックスを取得します。</summary>
      <returns>配列内で指定した次元の、最初の要素のインデックスです。</returns>
      <param name="dimension">開始インデックスを指定する配列の 0 から始まる次元。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> が 0 未満です。 または <paramref name="dimension" /> が <see cref="P:System.Array.Rank" /> 以上です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.GetUpperBound(System.Int32)">
      <summary>配列内で指定した次元の、最後の要素のインデックスを取得します。</summary>
      <returns>配列内で指定した次元の最後の要素のインデックス、または指定した次元が空の場合は -1 です。</returns>
      <param name="dimension">上限を指定する配列の 0 から始まる次元。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> が 0 未満です。 または <paramref name="dimension" /> が <see cref="P:System.Array.Rank" /> 以上です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.GetValue(System.Int32[])">
      <summary>多次元 <see cref="T:System.Array" /> 内の指定した位置にある値を取得します。 インデックスは 32 ビット整数値の配列として指定します。</summary>
      <returns>多次元 <see cref="T:System.Array" /> 内の指定した位置にある値。</returns>
      <param name="indices">取得する <see cref="T:System.Array" /> 要素の位置を指定するインデックスを表す 32 ビット整数の 1 次元配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">現在の <see cref="T:System.Array" /> の次元数が、<paramref name="indices" /> 内の要素数と等しくありません。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="indices" /> 内のいずれかの要素が、現在の <see cref="T:System.Array" /> 内の対応する次元の有効なインデックスの範囲外です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object)">
      <summary>指定したオブジェクトを検索し、1 次元の <see cref="T:System.Array" /> 全体でそのオブジェクトが最初に見つかった位置のインデックス番号を返します。</summary>
      <returns>
        <paramref name="array" /> 全体を対象に <paramref name="value" /> を検索し、見つかった場合は、インデックス番号の最も小さい要素のインデックス番号。それ以外の場合は、配列の下限 - 1。</returns>
      <param name="array">検索対象となる 1 次元 <see cref="T:System.Array" />。</param>
      <param name="value">
        <paramref name="array" /> 内で検索するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> が多次元です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32)">
      <summary>指定されたオブジェクトを、1 次元 <see cref="T:System.Array" /> の指定されたインデックスから最後の要素までを範囲として検索し、インデックス番号の最も小さい要素のインデックス番号を返します。</summary>
      <returns>
        <paramref name="array" /> の <paramref name="startIndex" /> から最後の要素までを範囲として <paramref name="value" /> を検索し、見つかった場合は、インデックス番号の最も小さい要素のインデックス番号。それ以外の場合は、配列の下限 - 1。</returns>
      <param name="array">検索対象となる 1 次元 <see cref="T:System.Array" />。</param>
      <param name="value">
        <paramref name="array" /> 内で検索するオブジェクト。</param>
      <param name="startIndex">検索の開始インデックス。空の配列では 0 (ゼロ) は有効です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が <paramref name="array" /> の有効なインデックスの範囲外の値です。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> が多次元です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>指定したオブジェクトを、指定したインデックス位置から、指定した要素数を範囲とする 1 次元 <see cref="T:System.Array" /> 要素の範囲内で検索し、最もインデックス番号の小さい要素のインデックス番号を返します。</summary>
      <returns>
        <paramref name="array" /> の <paramref name="startIndex" /> から <paramref name="count" /> で指定された要素数を範囲として <paramref name="value" /> を検索し、見つかった場合は、インデックス番号の最も小さい要素のインデックス番号。それ以外の場合は、配列の下限 - 1。</returns>
      <param name="array">検索対象となる 1 次元 <see cref="T:System.Array" />。</param>
      <param name="value">
        <paramref name="array" /> 内で検索するオブジェクト。</param>
      <param name="startIndex">検索の開始インデックス。空の配列では 0 (ゼロ) は有効です。</param>
      <param name="count">検索対象の範囲内にある要素の数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が <paramref name="array" /> の有効なインデックスの範囲外の値です。 または <paramref name="count" /> が 0 未満です。 または <paramref name="startIndex" /> および <paramref name="count" /> が <paramref name="array" /> 内の有効な範囲を示していません。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> が多次元です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0)">
      <summary>
        <see cref="T:System.Array" /> 全体を対象に指定したオブジェクトを検索し、インデックス番号の最も小さい要素のインデックスを返します。</summary>
      <returns>
        <paramref name="array" /> 全体を対象に <paramref name="value" /> を検索し、見つかった場合は、インデックス番号の最も小さい要素の 0 から始まるインデックス番号。それ以外の場合は –1。</returns>
      <param name="array">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</param>
      <param name="value">
        <paramref name="array" /> 内で検索するオブジェクト。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32)">
      <summary>指定したオブジェクトを、<see cref="T:System.Array" /> の指定したインデックス位置から最後の要素までを範囲として検索し、最もインデックス番号の小さい要素のインデックス番号を返します。</summary>
      <returns>
        <paramref name="array" /> の <paramref name="startIndex" /> から最後の要素までを範囲として <paramref name="value" /> を検索し、見つかった場合は、インデックス番号の最も小さい要素の 0 から始まるインデックス番号。それ以外の場合は –1。</returns>
      <param name="array">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</param>
      <param name="value">
        <paramref name="array" /> 内で検索するオブジェクト。</param>
      <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。空の配列では 0 (ゼロ) は有効です。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が <paramref name="array" /> の有効なインデックスの範囲外の値です。</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <summary>指定したオブジェクトを、<see cref="T:System.Array" /> の指定したインデックスから指定した要素数を範囲として検索し、インデックス番号の最も小さい要素のインデックス番号を返します。</summary>
      <returns>
        <paramref name="array" /> の <paramref name="startIndex" /> から <paramref name="count" /> 個の要素を範囲として <paramref name="value" /> を検索し、見つかった場合は、インデックス番号の最も小さい要素の 0 から始まるインデックス番号。それ以外の場合は –1。</returns>
      <param name="array">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</param>
      <param name="value">
        <paramref name="array" /> 内で検索するオブジェクト。</param>
      <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。空の配列では 0 (ゼロ) は有効です。</param>
      <param name="count">検索対象の範囲内にある要素の数。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が <paramref name="array" /> の有効なインデックスの範囲外の値です。 または <paramref name="count" /> が 0 未満です。 または <paramref name="startIndex" /> および <paramref name="count" /> が <paramref name="array" /> 内の有効な範囲を示していません。</exception>
    </member>
    <member name="M:System.Array.Initialize">
      <summary>値型の既定のコンストラクターを呼び出して、この値型 <see cref="T:System.Array" /> の各要素を初期化します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object)">
      <summary>指定したオブジェクトを検索し、1 次元の <see cref="T:System.Array" /> 全体でそのオブジェクトが最後に見つかった位置のインデックス番号を返します。</summary>
      <returns>
        <paramref name="array" /> 全体を対象に <paramref name="value" /> を検索し、見つかった場合は、インデックス番号の最も大きい要素のインデックス番号。それ以外の場合は、配列の下限 - 1。</returns>
      <param name="array">検索対象となる 1 次元 <see cref="T:System.Array" />。</param>
      <param name="value">
        <paramref name="array" /> 内で検索するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> が多次元です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32)">
      <summary>1 次元 <see cref="T:System.Array" /> の先頭の要素から、指定したインデックスまでを対象に指定したオブジェクトを検索し、インデックス番号の最も大きい要素のインデックス番号を返します。</summary>
      <returns>
        <paramref name="array" /> の先頭の要素から <paramref name="startIndex" /> までを範囲として <paramref name="value" /> を検索し、見つかった場合は、インデックス番号の最も大きい要素のインデックス番号。それ以外の場合は、配列の下限 - 1。</returns>
      <param name="array">検索対象となる 1 次元 <see cref="T:System.Array" />。</param>
      <param name="value">
        <paramref name="array" /> 内で検索するオブジェクト。</param>
      <param name="startIndex">逆方向検索の開始インデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が <paramref name="array" /> の有効なインデックスの範囲外の値です。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> が多次元です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>指定したオブジェクトを、1 次元 <see cref="T:System.Array" /> の指定したインデックス位置から、指定した要素数を範囲として検索し、インデックス番号の最も大きい要素のインデックス番号を返します。</summary>
      <returns>
        <paramref name="array" /> の <paramref name="startIndex" /> から、<paramref name="count" /> で指定された要素数を範囲として <paramref name="value" /> を検索し、見つかった場合は、インデックス番号の最も大きい要素のインデックス番号。それ以外の場合は、配列の下限 - 1。</returns>
      <param name="array">検索対象となる 1 次元 <see cref="T:System.Array" />。</param>
      <param name="value">
        <paramref name="array" /> 内で検索するオブジェクト。</param>
      <param name="startIndex">逆方向検索の開始インデックス。</param>
      <param name="count">検索対象の範囲内にある要素の数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が <paramref name="array" /> の有効なインデックスの範囲外の値です。 または <paramref name="count" /> が 0 未満です。 または <paramref name="startIndex" /> および <paramref name="count" /> が <paramref name="array" /> 内の有効な範囲を示していません。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> が多次元です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0)">
      <summary>指定したオブジェクトを <see cref="T:System.Array" /> 全体を対象に検索し、インデックス番号の最も大きい要素のインデックスを返します。</summary>
      <returns>
        <paramref name="array" /> 全体を対象として <paramref name="value" /> を検索し、見つかった場合は、インデックス番号の最も大きい要素の 0 から始まるインデックス番号。それ以外の場合は –1。</returns>
      <param name="array">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</param>
      <param name="value">
        <paramref name="array" /> 内で検索するオブジェクト。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32)">
      <summary>指定したオブジェクトを、<see cref="T:System.Array" /> の先頭の要素から、指定されたインデックス位置までを範囲として検索し、インデックス番号の最も大きい要素のインデックス番号を返します。</summary>
      <returns>
        <paramref name="array" /> の先頭の要素から <paramref name="startIndex" /> までを範囲として <paramref name="value" /> を検索し、見つかった場合は、インデックス番号の最も大きい要素の 0 から始まるインデックス番号。それ以外の場合は –1。</returns>
      <param name="array">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</param>
      <param name="value">
        <paramref name="array" /> 内で検索するオブジェクト。</param>
      <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が <paramref name="array" /> の有効なインデックスの範囲外の値です。</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <summary>指定したオブジェクトを、<see cref="T:System.Array" /> の指定したインデックス位置から、指定した要素数を範囲として検索し、インデックス番号の最も大きい要素のインデックス番号を返します。</summary>
      <returns>
        <paramref name="array" /> の <paramref name="startIndex" /> から <paramref name="count" /> 個の要素を範囲として <paramref name="value" /> を検索し、見つかった場合は、インデックス番号の最も大きい要素の 0 から始まるインデックス番号。それ以外の場合は –1。</returns>
      <param name="array">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</param>
      <param name="value">
        <paramref name="array" /> 内で検索するオブジェクト。</param>
      <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">検索対象の範囲内にある要素の数。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が <paramref name="array" /> の有効なインデックスの範囲外の値です。 または <paramref name="count" /> が 0 未満です。 または <paramref name="startIndex" /> および <paramref name="count" /> が <paramref name="array" /> 内の有効な範囲を示していません。</exception>
    </member>
    <member name="P:System.Array.Length">
      <summary>
        <see cref="T:System.Array" /> のすべての次元内の要素の総数を表す 32 ビット整数を取得します。</summary>
      <returns>
        <see cref="T:System.Array" /> のすべての次元内の要素の総数を表す 32 ビット整数。配列内に要素がない場合はゼロ。</returns>
      <exception cref="T:System.OverflowException">配列は多次元配列で、<see cref="F:System.Int32.MaxValue" /> 以上の要素を含みます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Array.Rank">
      <summary>
        <see cref="T:System.Array" /> のランク (次元数) を取得します。 たとえば、1 次元配列は 1 を返し、2 次元配列は 2 を返すなどです。</summary>
      <returns>
        <see cref="T:System.Array" /> のランク (次元数)。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Resize``1(``0[]@,System.Int32)">
      <summary>1 次元配列の要素数を、指定した新しいサイズに変更します。</summary>
      <param name="array">サイズ変更の対象となる、インデックス番号が 0 から始まる 1 次元配列。指定したサイズの新しい配列を作成する場合は null。</param>
      <param name="newSize">新しい配列のサイズ。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="newSize" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Array.Reverse(System.Array)">
      <summary>1 次元の <see cref="T:System.Array" /> 内全体の要素のシーケンスを反転させます。</summary>
      <param name="array">反転させる 1 次元の <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> が多次元です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Reverse(System.Array,System.Int32,System.Int32)">
      <summary>1 次元 <see cref="T:System.Array" /> 内の要素範囲の並び順を反転させます。</summary>
      <param name="array">反転させる 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index">反転させる範囲の先頭位置を示すインデックス。</param>
      <param name="length">反転対象の範囲内にある要素の数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> が多次元です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が <paramref name="array" /> の下限を下回っています。 または <paramref name="length" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> および <paramref name="length" /> で、<paramref name="array" /> 内の有効な範囲が指定されていません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32[])">
      <summary>多次元 <see cref="T:System.Array" /> 内の指定した位置にある要素に値を設定します。 インデックスは 32 ビット整数値の配列として指定します。</summary>
      <param name="value">指定した要素の新しい値。</param>
      <param name="indices">設定する要素の位置を指定するインデックスを表す 32 ビット整数の 1 次元配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">現在の <see cref="T:System.Array" /> の次元数が、<paramref name="indices" /> 内の要素数と等しくありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> を現在の <see cref="T:System.Array" /> の要素の型にキャストできません。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="indices" /> 内のいずれかの要素が、現在の <see cref="T:System.Array" /> 内の対応する次元の有効なインデックスの範囲外です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array)">
      <summary>
        <see cref="T:System.Array" /> の各要素によって実装された <see cref="T:System.IComparable" /> を使用して、1 次元 <see cref="T:System.Array" /> 全体の要素を並べ替えます。</summary>
      <param name="array">並べ替え対象となる 1 次元 <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> が多次元です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> の 1 つ以上の要素が、<see cref="T:System.IComparable" /> インターフェイスを実装していません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Collections.IComparer)">
      <summary>1 次元 <see cref="T:System.Array" /> 内の要素を、指定した <see cref="T:System.Collections.IComparer" /> を使用して並べ替えます。</summary>
      <param name="array">並べ替え対象となる 1 次元 <see cref="T:System.Array" />。</param>
      <param name="comparer">要素を比較する場合に使用する <see cref="T:System.Collections.IComparer" /> 実装。 または 各要素の <see cref="T:System.IComparable" /> 実装を使用する場合は null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> が多次元です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> が null で、<paramref name="array" /> の 1 つ以上の要素が <see cref="T:System.IComparable" /> インターフェイスを実装していません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> の実装によって並べ替え中にエラーが発生しました。 たとえば、<paramref name="comparer" /> は項目を項目自身と比較する場合に 0 を返さない可能性があります。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Array" /> の各要素によって実装された <see cref="T:System.IComparable" /> を使用して、1 次元 <see cref="T:System.Array" /> の要素範囲を並べ替えます。</summary>
      <param name="array">並べ替え対象となる 1 次元 <see cref="T:System.Array" />。</param>
      <param name="index">並べ替え対象の範囲の開始位置を示すインデックス。</param>
      <param name="length">並べ替え対象の範囲内にある要素の数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> が多次元です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が <paramref name="array" /> の下限を下回っています。 または <paramref name="length" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> および <paramref name="length" /> で、<paramref name="array" /> 内の有効な範囲が指定されていません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> の 1 つ以上の要素が、<see cref="T:System.IComparable" /> インターフェイスを実装していません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>1 次元 <see cref="T:System.Array" /> の範囲内の要素範囲を、指定した <see cref="T:System.Collections.IComparer" /> を使用して並べ替えます。</summary>
      <param name="array">並べ替え対象となる 1 次元 <see cref="T:System.Array" />。</param>
      <param name="index">並べ替え対象の範囲の開始位置を示すインデックス。</param>
      <param name="length">並べ替え対象の範囲内にある要素の数。</param>
      <param name="comparer">要素を比較する場合に使用する <see cref="T:System.Collections.IComparer" /> 実装。 または 各要素の <see cref="T:System.IComparable" /> 実装を使用する場合は null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> が多次元です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が <paramref name="array" /> の下限を下回っています。 または <paramref name="length" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> および <paramref name="length" /> で、<paramref name="array" /> 内の有効な範囲が指定されていません。 または <paramref name="comparer" /> の実装によって並べ替え中にエラーが発生しました。 たとえば、<paramref name="comparer" /> は項目を項目自身と比較する場合に 0 を返さない可能性があります。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> が null で、<paramref name="array" /> の 1 つ以上の要素が <see cref="T:System.IComparable" /> インターフェイスを実装していません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort``1(``0[])">
      <summary>
        <see cref="T:System.Array" /> の各要素によって実装された <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを使用して、<see cref="T:System.Array" /> 全体の要素を並べ替えます。</summary>
      <param name="array">並べ替え対象となる、インデックス番号が 0 から始まる 1 次元 <see cref="T:System.Array" />。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> の 1 つ以上の要素が、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを実装していません。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})">
      <summary>
        <see cref="T:System.Array" /> 内の要素を、指定した <see cref="T:System.Collections.Generic.IComparer`1" /> ジェネリック インターフェイスを使用して並べ替えます。</summary>
      <param name="array">並べ替える 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</param>
      <param name="comparer">要素を比較する際に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> ジェネリック インターフェイスの実装。各要素が実装する <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを使用する場合は null。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> が null で、<paramref name="array" /> の 1 つ以上の要素が <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを実装していません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> の実装によって並べ替え中にエラーが発生しました。 たとえば、<paramref name="comparer" /> は項目を項目自身と比較する場合に 0 を返さない可能性があります。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Comparison{``0})">
      <summary>
        <see cref="T:System.Array" /> 内の要素を、指定した <see cref="T:System.Comparison`1" /> を使用して並べ替えます。</summary>
      <param name="array">並べ替える 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</param>
      <param name="comparison">要素を比較する場合に使用する <see cref="T:System.Comparison`1" />。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、 または <paramref name="comparison" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparison" /> の実装によって並べ替え中にエラーが発生しました。 たとえば、<paramref name="comparison" /> は項目をその項目自身と比較する場合に 0 を返さない可能性があります。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Array" /> の各要素によって実装された <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを使用して、<see cref="T:System.Array" /> の要素範囲を並べ替えます。</summary>
      <param name="array">並べ替える 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</param>
      <param name="index">並べ替え対象の範囲の開始位置を示すインデックス。</param>
      <param name="length">並べ替え対象の範囲内にある要素の数。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が <paramref name="array" /> の下限を下回っています。 または <paramref name="length" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> および <paramref name="length" /> で、<paramref name="array" /> 内の有効な範囲が指定されていません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> の 1 つ以上の要素が、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを実装していません。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>指定した <see cref="T:System.Collections.Generic.IComparer`1" /> ジェネリック インターフェイスを使用して、<see cref="T:System.Array" /> 内の要素範囲を並べ替えます。</summary>
      <param name="array">並べ替え対象となる、インデックス番号が 0 から始まる 1 次元 <see cref="T:System.Array" />。</param>
      <param name="index">並べ替え対象の範囲の開始位置を示すインデックス。</param>
      <param name="length">並べ替え対象の範囲内にある要素の数。</param>
      <param name="comparer">要素を比較する際に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> ジェネリック インターフェイスの実装。各要素が実装する <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを使用する場合は null。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が <paramref name="array" /> の下限を下回っています。 または <paramref name="length" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> および <paramref name="length" /> で、<paramref name="array" /> 内の有効な範囲が指定されていません。 または <paramref name="comparer" /> の実装によって並べ替え中にエラーが発生しました。 たとえば、<paramref name="comparer" /> は項目を項目自身と比較する場合に 0 を返さない可能性があります。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> が null で、<paramref name="array" /> の 1 つ以上の要素が <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを実装していません。</exception>
    </member>
    <member name="P:System.Array.System#Collections#ICollection#Count">
      <summary>
        <see cref="T:System.Array" /> に格納されている要素の数を取得します。</summary>
      <returns>T:System.Collections.ICollection に格納されている要素の数。</returns>
    </member>
    <member name="P:System.Array.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Array" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Array" /> へのアクセスが同期されている (スレッド セーフである) 場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Array.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Array" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Array" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Array.System#Collections#IList#Add(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" /> に項目を追加します。</summary>
      <returns>新しい要素が挿入された位置。または、項目がコレクションに挿入されなかった場合は -1。</returns>
      <param name="value">
        <see cref="T:System.Collections.IList" /> に追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> は読み取り専用です。 または <see cref="T:System.Collections.IList" /> が固定サイズです。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Clear">
      <summary>
        <see cref="T:System.Collections.IList" /> からすべての項目を削除します。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> は読み取り専用です。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Contains(System.Object)">
      <summary>ある要素が <see cref="T:System.Collections.IList" /> 内に存在するかどうかを判断します。</summary>
      <returns>
        <paramref name="value" /> が <see cref="T:System.Collections.IList" /> に存在する場合は true。それ以外の場合は false。</returns>
      <param name="value">現在のリスト内で検索するオブジェクト。 参照型の場合は、検索する要素として null を指定できます。</param>
    </member>
    <member name="M:System.Array.System#Collections#IList#IndexOf(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" /> 内での指定した項目のインデックスを調べます。</summary>
      <returns>値がリストに存在する場合はそのインデックス。それ以外の場合は -1。</returns>
      <param name="value">現在のリスト内で検索するオブジェクト。</param>
    </member>
    <member name="M:System.Array.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>指定したインデックスの <see cref="T:System.Collections.IList" /> に項目を挿入します。</summary>
      <param name="index">
        <paramref name="value" /> を挿入する位置の、インデックス番号。</param>
      <param name="value">挿入するオブジェクト。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が <see cref="T:System.Collections.IList" /> の有効なインデックスではありません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> は読み取り専用です。 または <see cref="T:System.Collections.IList" /> が固定サイズです。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> は、<see cref="T:System.Collections.IList" /> 内の null 参照です。</exception>
    </member>
    <member name="P:System.Array.System#Collections#IList#IsFixedSize">
      <summary>
        <see cref="T:System.Array" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Array" /> が固定サイズの場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Array.System#Collections#IList#IsReadOnly">
      <summary>
        <see cref="T:System.Array" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Array" /> が読み取り専用である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Array.System#Collections#IList#Item(System.Int32)">
      <summary>指定したインデックスにある要素を取得または設定します。</summary>
      <returns>指定したインデックスにある要素。</returns>
      <param name="index">取得または設定する要素のインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。 または <paramref name="index" /> が <see cref="P:System.Collections.ICollection.Count" /> 以上です。</exception>
      <exception cref="T:System.ArgumentException">現在の <see cref="T:System.Array" /> が完全な 1 次元ではありません。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Remove(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" /> 内で最初に見つかった特定のオブジェクトを削除します。</summary>
      <param name="value">
        <see cref="T:System.Collections.IList" /> から削除するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> は読み取り専用です。 または <see cref="T:System.Collections.IList" /> が固定サイズです。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>指定したインデックス位置にある <see cref="T:System.Collections.IList" /> 項目を削除します。</summary>
      <param name="index">削除する要素のインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">index が <see cref="T:System.Collections.IList" /> の有効なインデックスではありません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> は読み取り専用です。 または <see cref="T:System.Collections.IList" /> が固定サイズです。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>現在のコレクション オブジェクトの並べ替え順序での位置が、別のオブジェクトと比べて前か、後か、または同じかを判断します。</summary>
      <returns>現在のコレクション オブジェクトと他のオブジェクトとの関係を示す整数。次の表を参照してください。 
戻り値 	説明 	
-1 	現在のインスタンスが <paramref name="other" /> よりも前。 	
0	現在のインスタンスと <paramref name="other" /> とが等しい。 	
1	現在のインスタンスが <paramref name="other" /> よりも後。</returns>
      <param name="other">現在のインスタンスと比較するオブジェクト。</param>
      <param name="comparer">現在のオブジェクトと <paramref name="other" /> とを比較するオブジェクト。</param>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>オブジェクトが現在のインスタンスと等しいかどうかを判断します。</summary>
      <returns>2 つのオブジェクトが等しい場合は true。それ以外の場合は false。</returns>
      <param name="other">現在のインスタンスと比較するオブジェクト。</param>
      <param name="comparer">現在のインスタンスと <paramref name="other" /> が等しいかどうかを判断するオブジェクト。</param>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>現在のインスタンスのハッシュ コードを返します。</summary>
      <returns>現在のインスタンスのハッシュ コード。</returns>
      <param name="comparer">現在のオブジェクトのハッシュ コードを計算するオブジェクト。</param>
    </member>
    <member name="M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})">
      <summary>配列内のすべての要素が、指定された述語によって定義された条件と一致するかどうかを調べます。</summary>
      <returns>
        <paramref name="array" /> 内のすべての要素が、指定された述語によって定義された条件と一致する場合は true。それ以外の場合は false。 配列内に要素がない場合、戻り値は true です。</returns>
      <param name="array">条件が一致するかどうかをチェックする 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</param>
      <param name="match">要素の条件を定義する <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null なので、 または <paramref name="match" /> は null なので、</exception>
    </member>
    <member name="T:System.ArraySegment`1">
      <summary>1 次元配列のセクションを区切ります。</summary>
      <typeparam name="T">配列セグメントの要素の型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[])">
      <summary>指定した配列内のすべての要素を区切る <see cref="T:System.ArraySegment`1" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="array">ラップする配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null です。</exception>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>指定した配列内で指定した要素範囲を区切る <see cref="T:System.ArraySegment`1" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="array">区切る要素範囲を含む配列。</param>
      <param name="offset">範囲の最初の要素の 0 から始まるインデックス番号。</param>
      <param name="count">範囲内の要素の数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> または <paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> および <paramref name="count" /> で、<paramref name="array" /> 内の有効な範囲が指定されていません。</exception>
    </member>
    <member name="P:System.ArraySegment`1.Array">
      <summary>配列セグメントで区切る要素範囲を含む元の配列を取得します。</summary>
      <returns>コンストラクターに渡され、<see cref="T:System.ArraySegment`1" /> で区切られた範囲を含む元の配列。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.ArraySegment`1.Count">
      <summary>配列セグメントで区切られた範囲に含まれる要素の数を取得します。</summary>
      <returns>
        <see cref="T:System.ArraySegment`1" /> で区切られた範囲内の要素の数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ArraySegment`1.Equals(System.ArraySegment{`0})">
      <summary>指定した <see cref="T:System.ArraySegment`1" /> 構造体が現在のインスタンスと等しいかどうかを判断します。</summary>
      <returns>指定した <see cref="T:System.ArraySegment`1" /> 構造体が現在のインスタンスと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在のインスタンスと比較する <see cref="T:System.ArraySegment`1" /> 構造体。</param>
    </member>
    <member name="M:System.ArraySegment`1.Equals(System.Object)">
      <summary>指定したオブジェクトが現在のインスタンスと等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが <see cref="T:System.ArraySegment`1" /> 構造体であり、現在のインスタンスと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
    </member>
    <member name="M:System.ArraySegment`1.GetHashCode">
      <summary>現在のインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.ArraySegment`1.Offset">
      <summary>配列セグメントで区切られた範囲に含まれる最初の要素の位置を取得します。この位置は、元の配列の先頭からの相対位置です。</summary>
      <returns>
        <see cref="T:System.ArraySegment`1" /> で区切られた範囲に含まれる最初の要素の位置。この位置は、元の配列の先頭からの相対位置です。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})">
      <summary>2 つの <see cref="T:System.ArraySegment`1" /> 構造体が等しいかどうかを示します。</summary>
      <returns>
        <paramref name="a" /> が <paramref name="b" /> に等しい場合は true。それ以外の場合は false。</returns>
      <param name="a">等値演算子の左辺にある <see cref="T:System.ArraySegment`1" /> 構造体。</param>
      <param name="b">等値演算子の右辺にある <see cref="T:System.ArraySegment`1" /> 構造体。</param>
    </member>
    <member name="M:System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})">
      <summary>2 つの <see cref="T:System.ArraySegment`1" /> 構造体が等しくないかどうかを示します。</summary>
      <returns>
        <paramref name="a" /> が <paramref name="b" /> と等しくない場合は true。それ以外の場合は false。</returns>
      <param name="a">非等値演算子の左辺にある <see cref="T:System.ArraySegment`1" /> 構造体。</param>
      <param name="b">非等値演算子の右辺にある <see cref="T:System.ArraySegment`1" /> 構造体。</param>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>項目を配列セグメントに追加します。</summary>
      <param name="item">配列セグメントに追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">配列セグメントが読み取り専用です。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>配列セグメントからすべての項目を削除します。</summary>
      <exception cref="T:System.NotSupportedException">配列セグメントが読み取り専用です。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
      <summary>配列セグメントに特定の値が格納されているかどうかを判断します。</summary>
      <returns>
        <paramref name="item" /> が配列セグメント内で見つかった場合は true。それ以外の場合は false。</returns>
      <param name="item">配列セグメント内で検索するオブジェクト。</param>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>指定した配列インデックスを開始位置として、配列セグメントの要素を配列にコピーします。</summary>
      <param name="array">配列セグメントからコピーされる要素のコピー先である 1 次元配列。 配列では 0 から始まるインデックスを使用する必要があります。</param>
      <param name="arrayIndex">コピーの開始位置となる、<paramref name="array" /> 内の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。 または コピー元の配列セグメントの要素の数が、コピー先の <paramref name="array" /> の <paramref name="arrayIndex" /> から末尾までに格納できる数よりも大きくなっています。 または 型 <paramref name="T" /> をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>配列セグメントが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>配列セグメントが読み取り専用の場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>指定したオブジェクトが配列セグメント内にあるときに、最初に出現したものを削除します。</summary>
      <returns>
        <paramref name="item" /> が配列セグメントから正常に削除された場合は true。それ以外の場合は false。 このメソッドは、配列セグメントに <paramref name="item" /> が見つからない場合にも false を返します。</returns>
      <param name="item">配列セグメントから削除するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">配列セグメントが読み取り専用です。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>配列セグメントを反復処理する列挙子を返します。</summary>
      <returns>配列セグメントの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#IndexOf(`0)">
      <summary>配列セグメント内での指定した項目のインデックスを調べます。</summary>
      <returns>リストに存在する場合は <paramref name="item" /> のインデックス。それ以外の場合は -1。</returns>
      <param name="item">配列セグメント内で検索するオブジェクト。</param>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>配列セグメント内の指定したインデックス位置に項目を挿入します。</summary>
      <param name="index">
        <paramref name="item" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="item">配列セグメントに挿入するオブジェクト。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が配列セグメントの有効なインデックスではありません。</exception>
      <exception cref="T:System.NotSupportedException">配列セグメントが読み取り専用です。</exception>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>指定したインデックスにある要素を取得または設定します。</summary>
      <returns>指定したインデックスにある要素。</returns>
      <param name="index">取得または設定する要素の、0 から始まるインデックス番号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が <see cref="T:System.ArraySegment`1" /> の有効なインデックスではありません。</exception>
      <exception cref="T:System.NotSupportedException">このプロパティが設定されていますが、配列セグメントが読み取り専用です。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>指定したインデックス位置にある配列セグメントの項目を削除します。</summary>
      <param name="index">削除する項目の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が配列セグメントの有効なインデックスではありません。</exception>
      <exception cref="T:System.NotSupportedException">配列セグメントが読み取り専用です。</exception>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary>配列セグメントの指定したインデックスにある要素を取得します。</summary>
      <returns>指定したインデックスにある要素。</returns>
      <param name="index">取得する要素の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が <see cref="T:System.ArraySegment`1" /> の有効なインデックスではありません。</exception>
      <exception cref="T:System.NotSupportedException">プロパティが設定されています。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>配列セグメントを反復処理する列挙子を返します。</summary>
      <returns>配列セグメントの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="T:System.ArrayTypeMismatchException">
      <summary>間違った型の要素を配列に格納しようとするとスローされる例外。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor">
      <summary>
        <see cref="T:System.ArrayTypeMismatchException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.ArrayTypeMismatchException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明する <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.ArrayTypeMismatchException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。 <paramref name="innerException" /> パラメーターが null 参照でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.AsyncCallback">
      <summary>対応する非同期操作が完了したときに呼び出されるメソッドを参照します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AsyncCallback.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.AsyncCallback.BeginInvoke(System.IAsyncResult,System.AsyncCallback,System.Object)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AsyncCallback.EndInvoke(System.IAsyncResult)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AsyncCallback.Invoke(System.IAsyncResult)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Attribute">
      <summary>カスタム属性の基本クラスを表します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Attribute.#ctor">
      <summary>
        <see cref="T:System.Attribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Attribute.Equals(System.Object)">
      <summary>このインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> がこのインスタンスの型および値に等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスまたは null と比較する <see cref="T:System.Object" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Attribute.GetHashCode">
      <summary>対象のインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AttributeTargets">
      <summary>属性を適用できるアプリケーション要素を指定します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AttributeTargets.All">
      <summary>任意のアプリケーション要素に属性を適用できます。</summary>
    </member>
    <member name="F:System.AttributeTargets.Assembly">
      <summary>アセンブリに属性を適用できます。</summary>
    </member>
    <member name="F:System.AttributeTargets.Class">
      <summary>クラスに属性を適用できます。</summary>
    </member>
    <member name="F:System.AttributeTargets.Constructor">
      <summary>コンストラクターに属性を適用できます。</summary>
    </member>
    <member name="F:System.AttributeTargets.Delegate">
      <summary>デリゲートに属性を適用できます。</summary>
    </member>
    <member name="F:System.AttributeTargets.Enum">
      <summary>列挙体に属性を適用できます。</summary>
    </member>
    <member name="F:System.AttributeTargets.Event">
      <summary>イベントに属性を適用できます。</summary>
    </member>
    <member name="F:System.AttributeTargets.Field">
      <summary>フィールドに属性を適用できます。</summary>
    </member>
    <member name="F:System.AttributeTargets.GenericParameter">
      <summary>ジェネリック パラメーターに属性を適用できます。</summary>
    </member>
    <member name="F:System.AttributeTargets.Interface">
      <summary>インターフェイスに属性を適用できます。</summary>
    </member>
    <member name="F:System.AttributeTargets.Method">
      <summary>メソッドに属性を適用できます。</summary>
    </member>
    <member name="F:System.AttributeTargets.Module">
      <summary>モジュールに属性を適用できます。</summary>
    </member>
    <member name="F:System.AttributeTargets.Parameter">
      <summary>パラメーターに属性を適用できます。</summary>
    </member>
    <member name="F:System.AttributeTargets.Property">
      <summary>プロパティに属性を適用できます。</summary>
    </member>
    <member name="F:System.AttributeTargets.ReturnValue">
      <summary>戻り値に属性を適用できます。</summary>
    </member>
    <member name="F:System.AttributeTargets.Struct">
      <summary>構造体、つまり、値型に属性を適用できます。</summary>
    </member>
    <member name="T:System.AttributeUsageAttribute">
      <summary>別の属性クラスの使用方法を指定します。 このクラスは継承できません。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)">
      <summary>
        <see cref="T:System.AttributeTargets" />、<see cref="P:System.AttributeUsageAttribute.AllowMultiple" /> 値、および <see cref="P:System.AttributeUsageAttribute.Inherited" /> 値の指定リストを使用して、<see cref="T:System.AttributeUsageAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="validOn">有効なプログラム要素を示す、ビット単位の OR 演算を使用して組み合わせた値のセット。</param>
    </member>
    <member name="P:System.AttributeUsageAttribute.AllowMultiple">
      <summary>制御対象とする属性の複数のインスタンスを 1 つのプログラム要素に対して指定できるかどうかを示すブール値を取得または設定します。</summary>
      <returns>複数のインスタンスを指定できる場合は true。それ以外の場合は false。 既定値は、false です。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AttributeUsageAttribute.Inherited">
      <summary>制御対象とする属性を派生クラスまたはオーバーライドするメンバーが継承できるかどうかを示すブール値を取得または設定します。</summary>
      <returns>派生クラスまたはオーバーライドするメンバーがその属性を継承できる場合は true。それ以外の場合は false。 既定値は、true です。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AttributeUsageAttribute.ValidOn">
      <summary>制御対象とする属性を適用できるプログラム要素を識別する一連の値を取得します。</summary>
      <returns>1 つ以上の <see cref="T:System.AttributeTargets" /> 値。 既定値は、All です。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.BadImageFormatException">
      <summary>ダイナミック リンク ライブラリ (DLL) または実行可能プログラムのファイル イメージが無効である場合にスローされる例外。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.BadImageFormatException.#ctor">
      <summary>
        <see cref="T:System.BadImageFormatException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.BadImageFormatException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.BadImageFormatException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="inner">現在の例外の原因である例外。 <paramref name="inner" /> パラメーターが null 参照でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.String)">
      <summary>指定したエラー メッセージとファイル名を使用して、<see cref="T:System.BadImageFormatException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーについて説明するメッセージ。</param>
      <param name="fileName">無効なイメージを含んでいるファイルの完全名。</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.BadImageFormatException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="fileName">無効なイメージを含んでいるファイルの完全名。</param>
      <param name="inner">現在の例外の原因である例外。 <paramref name="inner" /> パラメーターが null ではない場合、現在の例外は内部例外を処理する catch ブロックで発生します。</param>
    </member>
    <member name="P:System.BadImageFormatException.FileName">
      <summary>現在の例外の原因であるファイルの名前を取得します。</summary>
      <returns>無効なイメージを含んでいるファイルの名前。現在のインスタンスのコンストラクターにファイル名が渡されなかった場合は null 参照。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.BadImageFormatException.Message">
      <summary>エラー メッセージ、および例外の原因であるファイルの名前を取得します。</summary>
      <returns>エラー メッセージ、および例外の原因であるファイルの名前。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.BadImageFormatException.ToString">
      <summary>この例外の絶対限定名と、場合によってはエラー メッセージ、内部例外の名前、スタック トレースなどを返します。</summary>
      <returns>この例外の完全修飾名と、場合によってはエラー メッセージ、内部例外の名前、スタック トレースなどが格納されている文字列。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="T:System.Boolean">
      <summary>ブール値を表します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Boolean.CompareTo(System.Boolean)">
      <summary>指定した <see cref="T:System.Boolean" /> オブジェクトとこのインスタンスを比較し、互いの関係を示す整数を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き整数。 
戻り値 	状態 	
0 より小さい値 	このインスタンスが false で、<paramref name="value" /> が true。 	
0 	このインスタンスと <paramref name="value" /> が等価 (両方とも true か、両方とも false)。 	
0 を超える値 	このインスタンスが true で、<paramref name="value" /> が false。</returns>
      <param name="value">このインスタンスと比較する <see cref="T:System.Boolean" /> オブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Boolean.Equals(System.Boolean)">
      <summary>対象のインスタンスが、指定した <see cref="T:System.Boolean" /> オブジェクトに等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> がこのインスタンスと同じ値を保持している場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較する <see cref="T:System.Boolean" /> 値。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Boolean.Equals(System.Object)">
      <summary>対象のインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" />が <see cref="T:System.Boolean" /> で、このインスタンスと同じ値を保持している場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Boolean.FalseString">
      <summary>ブール値の false を文字列として表します。 このフィールドは読み取り専用です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Boolean.GetHashCode">
      <summary>対象のインスタンスのハッシュ コードを返します。</summary>
      <returns>現在の <see cref="T:System.Boolean" /> のハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Boolean.Parse(System.String)">
      <summary>指定した論理値の文字列形式を等価の <see cref="T:System.Boolean" /> に変換します。文字列が <see cref="F:System.Boolean.TrueString" /> または <see cref="F:System.Boolean.FalseString" /> の値と等しくない場合は、例外がスローされます。</summary>
      <returns>
        <paramref name="value" /> が <see cref="F:System.Boolean.TrueString" /> フィールドの値と等しい場合は true。<paramref name="value" /> が <see cref="F:System.Boolean.FalseString" /> フィールドの値と等しい場合は false。</returns>
      <param name="value">変換する値が含まれている文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> が <see cref="F:System.Boolean.TrueString" /> フィールドまたは <see cref="F:System.Boolean.FalseString" /> フィールドの値と等しくありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Boolean.System#IComparable#CompareTo(System.Object)">
      <summary>現在のインスタンスを同じ型の別のオブジェクトと比較し、現在のインスタンスの並べ替え順序での位置が、比較対象のオブジェクトと比べて前か、後か、または同じかを示す整数を返します。</summary>
      <returns>このインスタンスと <paramref name="obj" /> の相対順序を示す符号付き整数。 
戻り値 	状態 	
0 より小さい値 	このインスタンスが false で、<paramref name="obj" /> が true。 	
0 	このインスタンスと <paramref name="obj" /> が等価 (両方とも true か、両方とも false)。 	
0 を超える値 	このインスタンスが true で、<paramref name="obj" /> が false。 または <paramref name="obj" /> は null です。</returns>
      <param name="obj">対象のインスタンスと比較する対象のオブジェクト、または null。</param>
    </member>
    <member name="M:System.Boolean.ToString">
      <summary>このインスタンスの値をそれと等価な文字列形式に変換します ("True" または "False")。</summary>
      <returns>このインスタンスの値が true の場合は <see cref="F:System.Boolean.TrueString" />。このインスタンスの値が false の場合は <see cref="F:System.Boolean.FalseString" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Boolean.TrueString">
      <summary>ブール値の true を文字列として表します。 このフィールドは読み取り専用です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Boolean.TryParse(System.String,System.Boolean@)">
      <summary>論理値の指定した文字列形式を等価の <see cref="T:System.Boolean" /> に変換します。 戻り値は、変換が成功したか失敗したかを示します。</summary>
      <returns>
        <paramref name="value" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="value">変換する値が含まれている文字列。</param>
      <param name="result">変換が成功した場合は、このメソッドから戻るときに、<paramref name="value" /> が <see cref="F:System.Boolean.TrueString" /> と等しければ true、<paramref name="value" /> が <see cref="F:System.Boolean.FalseString" /> と等しければ false が格納されます。 変換に失敗した場合は、false を格納します。 <paramref name="value" /> が null であるか、<see cref="F:System.Boolean.TrueString" /> または <see cref="F:System.Boolean.FalseString" /> フィールドの値と等しくない場合、変換は失敗します。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Buffer">
      <summary>プリミティブ型の配列を操作します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>コピー先の配列の指定したオフセット位置を先頭として、コピー元の配列の指定したオフセットから指定数のバイトをコピーします。</summary>
      <param name="src">コピー元のバッファー。</param>
      <param name="srcOffset">0 から始まる <paramref name="src" /> のバイト オフセット。</param>
      <param name="dst">コピー先のバッファー。</param>
      <param name="dstOffset">0 から始まる <paramref name="dst" /> のバイト オフセット。</param>
      <param name="count">コピーするバイト数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="src" /> または <paramref name="dst" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="src" /> または <paramref name="dst" /> がプリミティブの配列ではありません。 または <paramref name="src" /> のバイト数は、<paramref name="srcOffset" /> と <paramref name="count" /> を加算した値未満です。 または <paramref name="dst" /> のバイト数は、<paramref name="dstOffset" /> と <paramref name="count" /> を加算した値未満です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="srcOffset" />、<paramref name="dstOffset" />、または <paramref name="count" /> が 0 未満です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Buffer.ByteLength(System.Array)">
      <summary>指定した配列のバイト数を返します。</summary>
      <returns>配列のバイト数。</returns>
      <param name="array">配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> がプリミティブではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" /> は 2 GB を超えています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Buffer.GetByte(System.Array,System.Int32)">
      <summary>指定した配列の指定した位置にあるバイトを取得します。</summary>
      <returns>配列内の <paramref name="index" /> にあるバイトを返します。</returns>
      <param name="array">配列。</param>
      <param name="index">配列内の位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> がプリミティブではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が負か、または <paramref name="array" /> の長さを超えています。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" /> は 2 GB を超えています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
      <summary>指定した配列の指定した位置にあるバイトに、指定した値を代入します。</summary>
      <param name="array">配列。</param>
      <param name="index">配列内の位置。</param>
      <param name="value">代入する値。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> がプリミティブではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が負か、または <paramref name="array" /> の長さを超えています。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" /> は 2 GB を超えています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Byte">
      <summary>8 ビット符号なし整数を表します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.CompareTo(System.Byte)">
      <summary>指定した 8 ビット符号なし整数とこのインスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対順序を示す符号付き整数。 
戻り値 	説明 	
0 より小さい値 	このインスタンスは、<paramref name="value" /> よりも小さくなっています。 	
0 	このインスタンスは <paramref name="value" /> と等価です。 	
0 を超える値 	このインスタンスは <paramref name="value" /> よりも大きくなっています。</returns>
      <param name="value">比較対象の 8 ビット符号なし整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Byte.Equals(System.Byte)">
      <summary>このインスタンスと指定した <see cref="T:System.Byte" /> オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> がこのインスタンスと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Byte.Equals(System.Object)">
      <summary>対象のインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> が <see cref="T:System.Byte" /> のインスタンスで、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">対象のインスタンスと比較する対象のオブジェクト、または null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Byte.GetHashCode">
      <summary>対象のインスタンスのハッシュ コードを返します。</summary>
      <returns>現在の <see cref="T:System.Byte" /> のハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Byte.MaxValue">
      <summary>
        <see cref="T:System.Byte" /> の最大有効値を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Byte.MinValue">
      <summary>
        <see cref="T:System.Byte" /> の最小有効値を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.Parse(System.String)">
      <summary>数値の文字列形式を、それと等価の <see cref="T:System.Byte" /> に変換します。</summary>
      <returns>
        <paramref name="s" /> に格納されている数値と等価のバイト値。</returns>
      <param name="s">変換する数値を含んだ文字列。 文字列は、<see cref="F:System.Globalization.NumberStyles.Integer" /> スタイルを使用して解釈されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の書式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Byte.MinValue" /> 未満の数値か、<see cref="F:System.Byte.MaxValue" /> より大きい数値を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>指定のスタイルで表現された数値の文字列形式を、それと等価な <see cref="T:System.Byte" /> に変換します。</summary>
      <returns>
        <paramref name="s" /> に格納されている数値と等価のバイト値。</returns>
      <param name="s">変換する数値を含んだ文字列。 文字列は、<paramref name="style" /> で指定されたスタイルを使用して解釈されます。</param>
      <param name="style">
        <paramref name="s" /> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の書式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Byte.MinValue" /> 未満の数値か、<see cref="F:System.Byte.MaxValue" /> より大きい数値を表しています。 または <paramref name="s" /> は 0 以外の小数部の桁を含んでいます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>指定したスタイルおよびカルチャ固有の書式の数値の文字列形式を、それと等価の <see cref="T:System.Byte" /> に変換します。</summary>
      <returns>
        <paramref name="s" /> に格納されている数値と等価のバイト値。</returns>
      <param name="s">変換する数値を含んだ文字列。 文字列は、<paramref name="style" /> で指定されたスタイルを使用して解釈されます。</param>
      <param name="style">
        <paramref name="s" /> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
      <param name="provider">
        <paramref name="s" /> の書式に関するカルチャ固有の情報を提供するオブジェクト。 <paramref name="provider" /> が null の場合は、現在のスレッド カルチャが使用されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の書式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Byte.MinValue" /> 未満の数値か、<see cref="F:System.Byte.MaxValue" /> より大きい数値を表しています。 または <paramref name="s" /> は 0 以外の小数部の桁を含んでいます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.IFormatProvider)">
      <summary>指定されたカルチャ固有の書式で表現された文字列形式の数値を、それと等価の <see cref="T:System.Byte" /> に変換します。</summary>
      <returns>
        <paramref name="s" /> に格納されている数値と等価のバイト値。</returns>
      <param name="s">変換する数値を含んだ文字列。 文字列は、<see cref="F:System.Globalization.NumberStyles.Integer" /> スタイルを使用して解釈されます。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の解析情報を提供するオブジェクト。 <paramref name="provider" /> が null の場合は、現在のスレッド カルチャが使用されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の書式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Byte.MinValue" /> 未満の数値か、<see cref="F:System.Byte.MaxValue" /> より大きい数値を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.System#IComparable#CompareTo(System.Object)">
      <summary>現在のインスタンスを同じ型の別のオブジェクトと比較し、現在のインスタンスの並べ替え順序での位置が、比較対象のオブジェクトと比べて前か、後か、または同じかを示す整数を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対順序を示す符号付き整数。 
戻り値 	説明 	
0 より小さい値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも前です。 	
0 	このインスタンスは、並べ替え順序で、<paramref name="value" /> と同じ位置に出現します。 	
0 を超える値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも後ろです。 または <paramref name="value" /> は null なので、</returns>
      <param name="value">対象のインスタンスと比較する対象のオブジェクト、または null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が <see cref="T:System.Byte" /> ではありません。</exception>
    </member>
    <member name="M:System.Byte.ToString">
      <summary>現在の <see cref="T:System.Byte" /> オブジェクトの値を等価の文字列形式に変換します。</summary>
      <returns>0 から 9 までの一連の数字で構成され、先行ゼロを含まない、このオブジェクトの値の文字列形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.ToString(System.IFormatProvider)">
      <summary>指定したカルチャ固有の書式情報を使用して、現在の <see cref="T:System.Byte" /> オブジェクトの数値をそれと等価の文字列形式に変換します。</summary>
      <returns>このオブジェクトの値の文字列形式を <paramref name="provider" /> パラメーターに指定された形式で表現した値。</returns>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.ToString(System.String)">
      <summary>指定した書式を使用して、現在の <see cref="T:System.Byte" /> オブジェクトの値をそれと等価な文字列形式に変換します。</summary>
      <returns>現在の <see cref="T:System.Byte" /> オブジェクトの文字列形式を、<paramref name="format" /> パラメーターに指定された形式で表現した値。</returns>
      <param name="format">数値書式指定文字列。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> にサポート外の指定子が含まれています。 サポートされている書式指定子については「解説」を参照してください。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.ToString(System.String,System.IFormatProvider)">
      <summary>指定した書式およびカルチャ固有の書式情報を使用して、現在の <see cref="T:System.Byte" /> オブジェクトの値をそれと等価の文字列形式に変換します。</summary>
      <returns>現在の <see cref="T:System.Byte" /> オブジェクトの文字列形式を、<paramref name="format" /> パラメーターおよび <paramref name="provider" /> パラメーターに指定された形式で表現した値。</returns>
      <param name="format">標準またはカスタムの数値書式指定文字列。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> にサポート外の指定子が含まれています。 サポートされている書式指定子については「解説」を参照してください。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Byte@)">
      <summary>数値の文字列形式を対応する <see cref="T:System.Byte" /> 表現に変換できるかどうかを試行し、変換に成功したかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="s" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">変換する数値を含んだ文字列。 文字列は、<see cref="F:System.Globalization.NumberStyles.Integer" /> スタイルを使用して解釈されます。</param>
      <param name="result">このメソッドから制御が返された時点で、変換に成功した場合は、<paramref name="s" /> に含まれる数値と等価な <see cref="T:System.Byte" /> 値が格納されます。変換に失敗した場合はゼロが格納されます。 このパラメーターは初期化せずに渡されます。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Byte@)">
      <summary>指定したスタイルおよびカルチャ固有の書式の数値の文字列形式を、それと等価の <see cref="T:System.Byte" /> に変換します。 戻り値は、変換が成功したか失敗したかを示します。</summary>
      <returns>
        <paramref name="s" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">変換する数値を格納する文字列。 文字列は、<paramref name="style" /> で指定されたスタイルを使用して解釈されます。</param>
      <param name="style">
        <paramref name="s" /> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。 <paramref name="provider" /> が null の場合は、現在のスレッド カルチャが使用されます。</param>
      <param name="result">変換が成功した場合、このメソッドが返されるときに、<paramref name="s" /> に格納された数値と等価の 8 ビット符号なし整数値を格納します。変換に失敗した場合は 0 を格納します。 <paramref name="s" /> パラメーターが null または <see cref="F:System.String.Empty" /> であるか、正しい形式ではない、または <see cref="F:System.Byte.MinValue" /> より小さいか <see cref="F:System.Byte.MaxValue" /> より大きい数値を表している場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Char">
      <summary>文字をUTF-16 コード単位で表します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.CompareTo(System.Char)">
      <summary>このインスタンスと指定した <see cref="T:System.Char" /> オブジェクトとを比較し、並べ替え順序において、このインスタンスの位置が指定した <see cref="T:System.Char" /> オブジェクトの前、後ろ、または同じのいずれであるかを示します。</summary>
      <returns>並べ替え順序における、<paramref name="value" /> パラメーターに対するこのインスタンスの相対位置を示す符号付き数値。 
戻り値 	説明 	
0 より小さい値 	このインスタンスの位置が <paramref name="value" /> よりも前です。 	
0 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> と同じです。 	
0 を超える値 	このインスタンスの位置が <paramref name="value" /> よりも後ろです。</returns>
      <param name="value">比較対象の <see cref="T:System.Char" /> オブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Char.ConvertFromUtf32(System.Int32)">
      <summary>指定された Unicode コード ポイントを UTF-16 エンコードの文字列に変換します。</summary>
      <returns>
        <paramref name="utf32" /> パラメーターに指定されたコード ポイントに対応する、単一の <see cref="T:System.Char" /> オブジェクトから成る文字列または <see cref="T:System.Char" /> オブジェクトのサロゲート ペアから成る文字列。</returns>
      <param name="utf32">21 ビットの Unicode コード ポイント。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="utf32" /> が、U+0 から U+10FFFF (サロゲート ペアの場合は U+D800 から U+DFFF) の範囲内の、有効な 21 ビット Unicode コード ポイントではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ConvertToUtf32(System.Char,System.Char)">
      <summary>UTF-16 でエンコードされたサロゲート ペアの値を Unicode コード ポイントに変換します。</summary>
      <returns>
        <paramref name="highSurrogate" /> パラメーターおよび <paramref name="lowSurrogate" /> パラメーターによって表される 21 ビットの Unicode コード ポイント。</returns>
      <param name="highSurrogate">上位サロゲートのコード単位 (U+D800 から U+DBFF までのコード単位)。</param>
      <param name="lowSurrogate">下位サロゲートのコード単位 (U+DC00 から U+DFFF までのコード単位)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="highSurrogate" /> が U+D800 から U+DBFF の範囲内にないか、<paramref name="lowSurrogate" /> が U+DC00 から U+DFFF の範囲内にありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ConvertToUtf32(System.String,System.Int32)">
      <summary>文字列中の指定位置にある UTF-16 エンコード文字またはサロゲート ペアの値を、Unicode コード ポイントに変換します。</summary>
      <returns>
        <paramref name="s" /> パラメーター内の、<paramref name="index" /> パラメーターによって指定された位置にある文字またはサロゲート ペアが表す、21 ビットの Unicode コード ポイント。</returns>
      <param name="s">文字またはサロゲート ペアを含む文字列。</param>
      <param name="index">
        <paramref name="s" /> に含まれる文字またはサロゲート ペアのインデックス位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が、<paramref name="s" /> 内にない位置を示しています。</exception>
      <exception cref="T:System.ArgumentException">指定されたインデックス位置にサロゲート ペアが存在し、1 文字目が無効な上位サロゲートであるか、2 文字目が無効な下位サロゲートです。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.Equals(System.Char)">
      <summary>対象のインスタンスが、指定した <see cref="T:System.Char" /> オブジェクトに等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> パラメーターがこのインスタンスの値と等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Char.Equals(System.Object)">
      <summary>このインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> が <see cref="T:System.Char" /> のインスタンスで、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト、または null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Char.GetHashCode">
      <summary>対象のインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Char.GetNumericValue(System.Char)">
      <summary>指定された Unicode の数字を倍精度浮動小数点数に変換します。</summary>
      <returns>この文字が数字を表す場合は <paramref name="c" /> の数値。それ以外の場合は -1.0。</returns>
      <param name="c">変換する Unicode 文字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.GetNumericValue(System.String,System.Int32)">
      <summary>指定した文字列の指定位置にある Unicode の数字を倍精度浮動小数点数に変換します。</summary>
      <returns>この文字が数字の場合は、<paramref name="s" /> の <paramref name="index" /> の位置のこの文字の数値。それ以外の場合は -1。</returns>
      <param name="s">
        <see cref="T:System.String" />
      </param>
      <param name="index">
        <paramref name="s" /> 内の文字位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsControl(System.Char)">
      <summary>指定した Unicode 文字が、制御文字かどうかを示します。</summary>
      <returns>
        <paramref name="c" /> が制御文字である場合は true。それ以外の場合は false。</returns>
      <param name="c">評価する Unicode 文字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsControl(System.String,System.Int32)">
      <summary>指定した文字列の指定位置にある文字が制御文字かどうかを示します。</summary>
      <returns>
        <paramref name="s" /> の <paramref name="index" /> の位置にある文字が制御文字の場合は true。それ以外の場合は false。</returns>
      <param name="s">文字列</param>
      <param name="index">
        <paramref name="s" /> 内の評価する文字の位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsDigit(System.Char)">
      <summary>指定した Unicode 文字が、10 進数の数字かどうかを示します。</summary>
      <returns>
        <paramref name="c" /> が 10 進数の数字の場合は true。それ以外の場合は false。</returns>
      <param name="c">評価する Unicode 文字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsDigit(System.String,System.Int32)">
      <summary>指定した文字列の指定位置にある文字が 10 進数の数字かどうかを示します。</summary>
      <returns>
        <paramref name="s" /> の <paramref name="index" /> の位置にある文字が 10 進数の数字の場合は true。それ以外の場合は false。</returns>
      <param name="s">文字列</param>
      <param name="index">
        <paramref name="s" /> 内の評価する文字の位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsHighSurrogate(System.Char)">
      <summary>指定された <see cref="T:System.Char" /> オブジェクトが上位サロゲートであるかどうかを示します。</summary>
      <returns>
        <paramref name="c" /> パラメーターの数値が U+D800 から U+DBFF の範囲内にある場合は true。それ以外の場合は false。</returns>
      <param name="c">評価する Unicode 文字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsHighSurrogate(System.String,System.Int32)">
      <summary>文字列中の指定された位置にある <see cref="T:System.Char" /> オブジェクトが、上位サロゲートであるかどうかを示します。</summary>
      <returns>
        <paramref name="s" /> パラメーターに指定された文字の数値が U+D800 から U+DBFF の範囲内にある場合は true。それ以外の場合は false。</returns>
      <param name="s">文字列</param>
      <param name="index">
        <paramref name="s" /> 内の評価する文字の位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が、<paramref name="s" /> 内にない位置を示しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLetter(System.Char)">
      <summary>指定した Unicode 文字が Unicode 文字かどうかを示します。</summary>
      <returns>
        <paramref name="c" /> が文字である場合は true。それ以外の場合は false。</returns>
      <param name="c">評価する Unicode 文字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLetter(System.String,System.Int32)">
      <summary>指定した文字列の指定位置にある文字が、Unicode 文字かどうかを示します。</summary>
      <returns>
        <paramref name="s" /> の <paramref name="index" /> の位置にある文字が文字である場合は true。それ以外の場合は false。</returns>
      <param name="s">文字列</param>
      <param name="index">
        <paramref name="s" /> 内の評価する文字の位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.Char)">
      <summary>指定した Unicode 文字が文字または 10 進数の数字なのかどうかを示します。</summary>
      <returns>
        <paramref name="c" /> が文字または 10 進数の数字の場合は true。それ以外の場合は false。</returns>
      <param name="c">評価する Unicode 文字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.String,System.Int32)">
      <summary>指定した文字列の指定位置にある文字が文字または 10 進数の数字かどうかを示します。</summary>
      <returns>
        <paramref name="s" /> の <paramref name="index" /> の位置にある文字が文字または 10 進数の数字の場合は true。それ以外の場合は false。</returns>
      <param name="s">文字列</param>
      <param name="index">
        <paramref name="s" /> 内の評価する文字の位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLower(System.Char)">
      <summary>指定した Unicode 文字が小文字かどうかを示します。</summary>
      <returns>
        <paramref name="c" /> が小文字の場合は true。それ以外の場合は false。</returns>
      <param name="c">評価する Unicode 文字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLower(System.String,System.Int32)">
      <summary>指定した文字列の指定位置にある文字が、小文字かどうかを示します。</summary>
      <returns>
        <paramref name="s" /> の <paramref name="index" /> の位置にある文字が小文字の場合は true。それ以外の場合は false。</returns>
      <param name="s">文字列</param>
      <param name="index">
        <paramref name="s" /> 内の評価する文字の位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLowSurrogate(System.Char)">
      <summary>指定された <see cref="T:System.Char" /> オブジェクトが下位サロゲートであるかどうかを示します。</summary>
      <returns>
        <paramref name="c" /> パラメーターの数値が U+DC00 から U+DFFF の範囲内にある場合は true。それ以外の場合は false。</returns>
      <param name="c">評価する文字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLowSurrogate(System.String,System.Int32)">
      <summary>文字列中の指定された位置にある <see cref="T:System.Char" /> オブジェクトが、下位サロゲートであるかどうかを示します。</summary>
      <returns>
        <paramref name="s" /> パラメーターに指定された文字の数値が U+DC00 から U+DFFF の範囲内にある場合は true。それ以外の場合は false。</returns>
      <param name="s">文字列</param>
      <param name="index">
        <paramref name="s" /> 内の評価する文字の位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が、<paramref name="s" /> 内にない位置を示しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsNumber(System.Char)">
      <summary>指定された Unicode 文字が数字かどうかを示します。</summary>
      <returns>
        <paramref name="c" /> が数字である場合は true。それ以外の場合は false。</returns>
      <param name="c">評価する Unicode 文字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsNumber(System.String,System.Int32)">
      <summary>指定した文字列の指定位置にある文字が数字かどうかを示します。</summary>
      <returns>
        <paramref name="s" /> の <paramref name="index" /> の位置にある文字が数字である場合は true。それ以外の場合は false。</returns>
      <param name="s">文字列</param>
      <param name="index">
        <paramref name="s" /> 内の評価する文字の位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsPunctuation(System.Char)">
      <summary>指定した Unicode 文字が区切り記号かどうかを示します。</summary>
      <returns>
        <paramref name="c" /> が区切り記号の場合は true。それ以外の場合は false。</returns>
      <param name="c">評価する Unicode 文字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsPunctuation(System.String,System.Int32)">
      <summary>指定した文字列の指定位置にある文字が区切り記号かどうかを示します。</summary>
      <returns>
        <paramref name="s" /> の <paramref name="index" /> の位置にある文字が区切り記号の場合は true。それ以外の場合は false。</returns>
      <param name="s">文字列</param>
      <param name="index">
        <paramref name="s" /> 内の評価する文字の位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSeparator(System.Char)">
      <summary>指定した Unicode 文字が区切り文字かどうかを示します。</summary>
      <returns>
        <paramref name="c" /> が区切り文字である場合は true。それ以外の場合は false。</returns>
      <param name="c">評価する Unicode 文字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSeparator(System.String,System.Int32)">
      <summary>指定した文字列の指定位置にある文字が区切り文字かどうかを示します。</summary>
      <returns>
        <paramref name="s" /> の <paramref name="index" /> の位置にある文字が区切り文字の場合は true。それ以外の場合は false。</returns>
      <param name="s">文字列</param>
      <param name="index">
        <paramref name="s" /> 内の評価する文字の位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSurrogate(System.Char)">
      <summary>指定した文字がサロゲート コード単位を持つかどうかを示します。</summary>
      <returns>
        <paramref name="c" /> が上位サロゲートまたは下位サロゲートである場合は true。それ以外の場合は false。</returns>
      <param name="c">評価する Unicode 文字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSurrogate(System.String,System.Int32)">
      <summary>指定した文字列の指定位置にある文字がサロゲート コード単位を持つかどうかを示します。</summary>
      <returns>
        <paramref name="s" /> の位置 <paramref name="index" /> にある文字が上位サロゲートまたは下位サロゲートである場合は true。それ以外の場合は false。</returns>
      <param name="s">文字列</param>
      <param name="index">
        <paramref name="s" /> 内の評価する文字の位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.Char,System.Char)">
      <summary>指定された 2 つの <see cref="T:System.Char" /> オブジェクトがサロゲート ペアであるかどうかを示します。</summary>
      <returns>
        <paramref name="highSurrogate" /> パラメーターに指定された数値が U+D800 から U+DBFF の範囲内にあり、<paramref name="lowSurrogate" /> パラメーターに指定された数値が U+DC00 から U+DFFF の範囲内にある場合は true。それ以外の場合は false。</returns>
      <param name="highSurrogate">サロゲート ペアの上位サロゲートとして評価する文字。</param>
      <param name="lowSurrogate">サロゲート ペアの下位サロゲートとして評価する文字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.String,System.Int32)">
      <summary>文字列中の指定された位置で互いに隣接する 2 つの <see cref="T:System.Char" /> オブジェクトがサロゲート ペアであるかどうかを示します。</summary>
      <returns>
        <paramref name="s" /> パラメーターの <paramref name="index" /> 位置と <paramref name="index" />+1 位置に隣接して文字が含まれており、<paramref name="index" /> 位置にある文字の数値が U+D800 から U+DBFF の範囲内にあり、また、<paramref name="index" />+1 位置にある文字の数値が U+DC00 から U+DFFF の範囲内にある場合は true。それ以外の場合は false。</returns>
      <param name="s">文字列</param>
      <param name="index">
        <paramref name="s" /> 内の評価する文字のペアの開始位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が、<paramref name="s" /> 内にない位置を示しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSymbol(System.Char)">
      <summary>指定した Unicode 文字が記号かどうかを示します。</summary>
      <returns>
        <paramref name="c" /> が記号である場合は true。それ以外の場合は false。</returns>
      <param name="c">評価する Unicode 文字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSymbol(System.String,System.Int32)">
      <summary>指定した文字列の指定位置にある文字が記号かどうかを示します。</summary>
      <returns>
        <paramref name="s" /> の <paramref name="index" /> の位置にある文字が記号である場合は true。それ以外の場合は false。</returns>
      <param name="s">文字列</param>
      <param name="index">
        <paramref name="s" /> 内の評価する文字の位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsUpper(System.Char)">
      <summary>指定した Unicode 文字が大文字かどうかを示します。</summary>
      <returns>
        <paramref name="c" /> が大文字である場合は true。それ以外の場合は false。</returns>
      <param name="c">評価する Unicode 文字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsUpper(System.String,System.Int32)">
      <summary>指定した文字列の指定位置にある文字が大文字かどうかを示します。</summary>
      <returns>
        <paramref name="s" /> の <paramref name="index" /> の位置にある文字が大文字の場合は true。それ以外の場合は false。</returns>
      <param name="s">文字列</param>
      <param name="index">
        <paramref name="s" /> 内の評価する文字の位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.Char)">
      <summary>指定した Unicode 文字が空白かどうかを示します。</summary>
      <returns>
        <paramref name="c" /> が空白である場合は true。それ以外の場合は false。</returns>
      <param name="c">評価する Unicode 文字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.String,System.Int32)">
      <summary>指定した文字列の指定位置にある文字が空白かどうかを示します。</summary>
      <returns>
        <paramref name="s" /> の <paramref name="index" /> の位置にある文字が空白である場合は true。それ以外の場合は false。</returns>
      <param name="s">文字列</param>
      <param name="index">
        <paramref name="s" /> 内の評価する文字の位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Char.MaxValue">
      <summary>
        <see cref="T:System.Char" /> の最大有効値を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Char.MinValue">
      <summary>
        <see cref="T:System.Char" /> の最小有効値を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.System#IComparable#CompareTo(System.Object)">
      <summary>現在のインスタンスを同じ型の別のオブジェクトと比較し、現在のインスタンスの並べ替え順序での位置が、比較対象のオブジェクトと比べて前か、後か、または同じかを示す整数を返します。</summary>
      <returns>並べ替え順序における、<paramref name="value" /> パラメーターに対するこのインスタンスの相対位置を示す符号付き整数。 
戻り値 	説明 	
0 より小さい値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも前です。 	
0 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> と同じです。 	
0 を超える値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも後ろです。 または <paramref name="value" /> は null です。</returns>
      <param name="value">このインスタンスと比較するオブジェクト、または null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が <see cref="T:System.Char" /> オブジェクトではありません。</exception>
    </member>
    <member name="M:System.Char.ToLower(System.Char)">
      <summary>Unicode 文字の値をそれと等価な小文字に変換します。</summary>
      <returns>
        <paramref name="c" /> の小文字表現。<paramref name="c" /> が既に小文字であるか、アルファベットでない場合、<paramref name="c" /> は変換されずにそのまま返されます。</returns>
      <param name="c">変換する Unicode 文字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToLowerInvariant(System.Char)">
      <summary>インバリアント カルチャの大文字と小文字の規則を使用して、Unicode 文字の値を対応する小文字表現に変換します。</summary>
      <returns>
        <paramref name="c" /> パラメーターの小文字表現。<paramref name="c" /> が既に小文字であるか、アルファベットでない場合、<paramref name="c" /> は変換されずにそのまま返されます。</returns>
      <param name="c">変換する Unicode 文字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToString">
      <summary>このインスタンスの値を、それと等価の文字列形式に変換します。</summary>
      <returns>このインスタンスの値の文字列形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToString(System.Char)">
      <summary>指定した Unicode 文字をそれと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="c" /> の値の文字列形式。</returns>
      <param name="c">変換する Unicode 文字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToUpper(System.Char)">
      <summary>Unicode 文字の値をそれと等価な大文字に変換します。</summary>
      <returns>
        <paramref name="c" /> の大文字表現。<paramref name="c" /> が既に大文字であるか、アルファベットでない場合、またはその大文字表現が存在しない場合、<paramref name="c" /> は変換されずにそのまま返されます。</returns>
      <param name="c">変換する Unicode 文字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToUpperInvariant(System.Char)">
      <summary>インバリアント カルチャの大文字と小文字の規則を使用して、Unicode 文字の値を対応する大文字表現に変換します。</summary>
      <returns>
        <paramref name="c" /> パラメーターの大文字表現。<paramref name="c" /> が既に大文字であるか、アルファベットでない場合、<paramref name="c" /> は変換されずにそのまま返されます。</returns>
      <param name="c">変換する Unicode 文字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.TryParse(System.String,System.Char@)">
      <summary>指定した文字列の値をそれと等価な Unicode 文字に変換します。 リターン コードは、変換が成功したか失敗したかを示します。</summary>
      <returns>
        <paramref name="s" /> パラメーターが正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">単一の文字を含む文字列、または null。</param>
      <param name="result">変換に成功した場合、メソッドから制御が戻ったときに、<paramref name="s" /> 内の単一文字に相当する Unicode 文字が格納されます。変換に失敗した場合は、未定義の値が格納されます。 <paramref name="s" /> パラメーターが null の場合、または <paramref name="s" /> の長さが 1 でない場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.CLSCompliantAttribute">
      <summary>プログラム要素が CLS (Common Language Specification) に準拠しているかどうかを示します。 このクラスは継承できません。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.CLSCompliantAttribute.#ctor(System.Boolean)">
      <summary>指定したプログラム要素が CLS に準拠しているかどうかを示すブール値を使用して、<see cref="T:System.CLSCompliantAttribute" /> クラスのインスタンスを初期化します。</summary>
      <param name="isCompliant">プログラム要素が CLS に準拠している場合は true。それ以外の場合は false。</param>
    </member>
    <member name="P:System.CLSCompliantAttribute.IsCompliant">
      <summary>指定したプログラム要素が CLS に準拠しているかどうかを示すブール値を取得します。</summary>
      <returns>プログラム要素が CLS に準拠している場合は true。それ以外の場合は false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Comparison`1">
      <summary>同じ型の 2 つのオブジェクトを比較するメソッドを表します。</summary>
      <typeparam name="T">比較するオブジェクトの型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Comparison`1.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Comparison`1.BeginInvoke(`0,`0,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Comparison`1.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Comparison`1.Invoke(`0,`0)">
    </member>
    <member name="T:System.DateTime">
      <summary>通常、日付や時刻として表現される瞬間を表します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した年、月、および日に初期化します。</summary>
      <param name="year">年 (1 から 9999)。</param>
      <param name="month">月 (1 から 12)。</param>
      <param name="day">日付 (1 から <paramref name="month" /> の日数)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> が 1 未満であるか、9999 を超えています。 または <paramref name="month" /> が 1 未満であるか、12 を超えています。 または <paramref name="day" /> が 1 未満か、<paramref name="month" /> の月の日数よりも大きい値です。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した年、月、日、時、分、および秒に初期化します。</summary>
      <param name="year">年 (1 から 9999)。</param>
      <param name="month">月 (1 から 12)。</param>
      <param name="day">日付 (1 から <paramref name="month" /> の日数)。</param>
      <param name="hour">時間 (0 から 23)。</param>
      <param name="minute">分 (0 から 59)。</param>
      <param name="second">秒 (0 から 59)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> が 1 未満であるか、9999 を超えています。 または <paramref name="month" /> が 1 未満であるか、12 を超えています。 または <paramref name="day" /> が 1 未満か、<paramref name="month" /> の月の日数よりも大きい値です。 または <paramref name="hour" /> が 0 未満か、23 よりも大きい値です。 または <paramref name="minute" /> が 0 未満か、59 よりも大きい値です。 または <paramref name="second" /> が 0 未満か、59 よりも大きい値です。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
      <summary>
        <see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した年、月、日、時、分、秒、および世界協定時刻 (UTC) または現地時刻に初期化します。</summary>
      <param name="year">年 (1 から 9999)。</param>
      <param name="month">月 (1 から 12)。</param>
      <param name="day">日付 (1 から <paramref name="month" /> の日数)。</param>
      <param name="hour">時間 (0 から 23)。</param>
      <param name="minute">分 (0 から 59)。</param>
      <param name="second">秒 (0 から 59)。</param>
      <param name="kind">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" />、および <paramref name="second" /> が、現地時刻、世界協定時刻 (UTC)、またはそのどちらでもない時刻のうち、いずれを使用するかを示す列挙値の 1 つ。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> が 1 未満であるか、9999 を超えています。 または <paramref name="month" /> が 1 未満であるか、12 を超えています。 または <paramref name="day" /> が 1 未満か、<paramref name="month" /> の月の日数よりも大きい値です。 または <paramref name="hour" /> が 0 未満か、23 よりも大きい値です。 または <paramref name="minute" /> が 0 未満か、59 よりも大きい値です。 または <paramref name="second" /> が 0 未満か、59 よりも大きい値です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> が <see cref="T:System.DateTimeKind" /> 値ではありません。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した年、月、日、時、分、秒、およびミリ秒に初期化します。</summary>
      <param name="year">年 (1 から 9999)。</param>
      <param name="month">月 (1 から 12)。</param>
      <param name="day">日付 (1 から <paramref name="month" /> の日数)。</param>
      <param name="hour">時間 (0 から 23)。</param>
      <param name="minute">分 (0 から 59)。</param>
      <param name="second">秒 (0 から 59)。</param>
      <param name="millisecond">ミリ秒 (0 から 999)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> が 1 未満であるか、9999 を超えています。 または <paramref name="month" /> が 1 未満であるか、12 を超えています。 または <paramref name="day" /> が 1 未満か、<paramref name="month" /> の月の日数よりも大きい値です。 または <paramref name="hour" /> が 0 未満か、23 よりも大きい値です。 または <paramref name="minute" /> が 0 未満か、59 よりも大きい値です。 または <paramref name="second" /> が 0 未満か、59 よりも大きい値です。 または <paramref name="millisecond" /> が 0 未満か、999 よりも大きい値です。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
      <summary>
        <see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した年、月、日、時、分、秒、ミリ秒、および世界協定時刻 (UTC) または現地時刻に初期化します。</summary>
      <param name="year">年 (1 から 9999)。</param>
      <param name="month">月 (1 から 12)。</param>
      <param name="day">日付 (1 から <paramref name="month" /> の日数)。</param>
      <param name="hour">時間 (0 から 23)。</param>
      <param name="minute">分 (0 から 59)。</param>
      <param name="second">秒 (0 から 59)。</param>
      <param name="millisecond">ミリ秒 (0 から 999)。</param>
      <param name="kind">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" />、<paramref name="second" />、および <paramref name="millisecond" /> が、現地時刻、世界協定時刻 (UTC)、またはそのどちらでもない時刻のうち、いずれを使用するかを示す列挙値の 1 つ。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> が 1 未満であるか、9999 を超えています。 または <paramref name="month" /> が 1 未満であるか、12 を超えています。 または <paramref name="day" /> が 1 未満か、<paramref name="month" /> の月の日数よりも大きい値です。 または <paramref name="hour" /> が 0 未満か、23 よりも大きい値です。 または <paramref name="minute" /> が 0 未満か、59 よりも大きい値です。 または <paramref name="second" /> が 0 未満か、59 よりも大きい値です。 または <paramref name="millisecond" /> が 0 未満か、999 よりも大きい値です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> が <see cref="T:System.DateTimeKind" /> 値ではありません。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64)">
      <summary>
        <see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定したタイマー刻み数に初期化します。</summary>
      <param name="ticks">日時をグレゴリオ暦の 0001 年 1 月 1 日の 00:00:00.000 以降の経過時間 (100 ナノ秒単位) で表した値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticks" /> が <see cref="F:System.DateTime.MinValue" /> より小さい値か、<see cref="F:System.DateTime.MaxValue" /> より大きい値です。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)">
      <summary>
        <see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定したタイマー刻み数と世界協定時刻 (UTC) または現地時刻に初期化します。</summary>
      <param name="ticks">日時をグレゴリオ暦の 0001 年 1 月 1 日の 00:00:00.000 以降の経過時間 (100 ナノ秒単位) で表した値。</param>
      <param name="kind">
        <paramref name="ticks" /> が、現地時刻、世界協定時刻 (UTC)、またはそのどちらでもない時刻のうち、いずれを使用するかを示す列挙値の 1 つ。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticks" /> が <see cref="F:System.DateTime.MinValue" /> より小さい値か、<see cref="F:System.DateTime.MaxValue" /> より大きい値です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> が <see cref="T:System.DateTimeKind" /> 値ではありません。</exception>
    </member>
    <member name="M:System.DateTime.Add(System.TimeSpan)">
      <summary>このインスタンスの値に、指定された <see cref="T:System.TimeSpan" /> の値を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
      <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された時間間隔を加算した値を保持するオブジェクト。</returns>
      <param name="value">正または負の時間間隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さい値か、<see cref="F:System.DateTime.MaxValue" /> より大きい値です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddDays(System.Double)">
      <summary>このインスタンスの値に、指定された日数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
      <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された日数を加算した値を保持するオブジェクト。</returns>
      <param name="value">整数部と小数部から成る日数。 <paramref name="value" /> パラメーターは、正または負のどちらの場合もあります。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さい値か、<see cref="F:System.DateTime.MaxValue" /> より大きい値です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddHours(System.Double)">
      <summary>このインスタンスの値に、指定された時間数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
      <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された時間数を加算した値を保持するオブジェクト。</returns>
      <param name="value">整数部と小数部から成る時間数。 <paramref name="value" /> パラメーターは、正または負のどちらの場合もあります。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さい値か、<see cref="F:System.DateTime.MaxValue" /> より大きい値です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddMilliseconds(System.Double)">
      <summary>このインスタンスの値に、指定されたミリ秒数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
      <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表されたミリ秒数を加算した値を保持するオブジェクト。</returns>
      <param name="value">整数部と小数部から成るミリ秒数。 <paramref name="value" /> パラメーターは、正または負のどちらの場合もあります。 この値は、近似値の整数に丸められます。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さい値か、<see cref="F:System.DateTime.MaxValue" /> より大きい値です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddMinutes(System.Double)">
      <summary>このインスタンスの値に、指定された分数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
      <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された分数を加算した値を保持するオブジェクト。</returns>
      <param name="value">整数部と小数部から成る分数。 <paramref name="value" /> パラメーターは、正または負のどちらの場合もあります。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さい値か、<see cref="F:System.DateTime.MaxValue" /> より大きい値です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddMonths(System.Int32)">
      <summary>このインスタンスの値に、指定された月数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
      <returns>このインスタンスで表された日付と時刻に <paramref name="months" /> を加算した値を保持するオブジェクト。</returns>
      <param name="months">月数。 <paramref name="months" /> パラメーターは、正または負のどちらの場合もあります。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さい値か、<see cref="F:System.DateTime.MaxValue" /> より大きい値です。 または <paramref name="months" /> が -120,000 未満か、120,000 よりも大きい値です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddSeconds(System.Double)">
      <summary>このインスタンスの値に、指定された秒数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
      <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された秒数を加算した値を保持するオブジェクト。</returns>
      <param name="value">整数部と小数部から成る秒数。 <paramref name="value" /> パラメーターは、正または負のどちらの場合もあります。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さい値か、<see cref="F:System.DateTime.MaxValue" /> より大きい値です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddTicks(System.Int64)">
      <summary>このインスタンスの値に、指定されたタイマー刻みの数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
      <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された時間数を加算した値を保持するオブジェクト。</returns>
      <param name="value">100 ナノ秒タイマー刻み数。 <paramref name="value" /> パラメーターは、正または負のどちらの場合もあります。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さい値か、<see cref="F:System.DateTime.MaxValue" /> より大きい値です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddYears(System.Int32)">
      <summary>このインスタンスの値に、指定された年数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
      <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された年数を加算した値を保持するオブジェクト。</returns>
      <param name="value">年数。 <paramref name="value" /> パラメーターは、正または負のどちらの場合もあります。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> または結果として得られる <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さい値か、<see cref="F:System.DateTime.MaxValue" /> より大きい値です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.Compare(System.DateTime,System.DateTime)">
      <summary>
        <see cref="T:System.DateTime" /> の 2 つのインスタンスを比較し、第 1 のインスタンスが第 2 のインスタンスよりも前か、同じか、または後かを示す整数を返します。</summary>
      <returns>
        <paramref name="t1" /> と <paramref name="t2" /> の相対値を示す符号付き数値。 
値型 	条件 	
0 より小さい値 	<paramref name="t1" /> が <paramref name="t2" /> よりも前の日時です。 	
0 	<paramref name="t1" /> は <paramref name="t2" /> と同じです。 	
0 を超える値 	<paramref name="t1" /> が <paramref name="t2" /> より後の日時です。</returns>
      <param name="t1">比較対象の第 1 オブジェクト。</param>
      <param name="t2">2 番目に比較するオブジェクト。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.CompareTo(System.DateTime)">
      <summary>このインスタンスの値と指定した <see cref="T:System.DateTime" /> の値を比較し、このインスタンスの値が指定した <see cref="T:System.DateTime" /> の値よりも前か、同じか、または後かを示す整数を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> パラメーターの相対値を示す符号付き数値。 
値 	説明 	
0 より小さい値 	このインスタンスは <paramref name="value" /> より前の時刻を表しています。 	
0 	このインスタンスは <paramref name="value" /> と同じです。 	
0 を超える値 	このインスタンスは <paramref name="value" /> より後の時刻を表しています。</returns>
      <param name="value">現在のインスタンスと比較する対象のオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.DateTime.Date">
      <summary>このインスタンスの日付の部分を取得します。</summary>
      <returns>このインスタンスと日付が同じで、時刻値が深夜の 12 時 (00:00:00) に設定された新しいオブジェクト。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Day">
      <summary>このインスタンスで表される月の日付を取得します。</summary>
      <returns>DateTime の日付部分 (1 ～ 31)。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.DayOfWeek">
      <summary>このインスタンスで表される曜日を取得します。</summary>
      <returns>この <see cref="T:System.DateTime" /> 値の曜日を示す列挙型定数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.DayOfYear">
      <summary>このインスタンスで表される年間積算日を取得します。</summary>
      <returns>1 から 366 までの間の積算日。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)">
      <summary>指定した月および年の日数を返します。</summary>
      <returns>指定した <paramref name="year" /> の <paramref name="month" /> の日数。 たとえば、<paramref name="month" /> が 2 月を表す 2 に等しい場合、戻り値には、<paramref name="year" /> が閏年かどうかによって 28 または 29 を返します。</returns>
      <param name="year">年。</param>
      <param name="month">月 (1 から 12 までの範囲の数)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> が 1 未満であるか、12 を超えています。 または <paramref name="year" /> が 1 未満であるか、9999 を超えています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime)">
      <summary>このインスタンスの値が、指定した <see cref="T:System.DateTime" /> インスタンスの値と等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="value" /> パラメーターがこのインスタンスの値と等しい場合は true。それ以外の場合は false。</returns>
      <param name="value">このインスタンスと比較するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime,System.DateTime)">
      <summary>
        <see cref="T:System.DateTime" /> の 2 つのインスタンスが同じ日付/時刻値を持っているかどうかを示す値を返します。</summary>
      <returns>2 つの値が等しい場合は true。それ以外の場合は false。</returns>
      <param name="t1">比較対象の第 1 オブジェクト。</param>
      <param name="t2">2 番目に比較するオブジェクト。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.Equals(System.Object)">
      <summary>対象のインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="value" /> が <see cref="T:System.DateTime" /> のインスタンスで、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
      <param name="value">このインスタンスと比較するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.FromBinary(System.Int64)">
      <summary>64 ビットのバイナリ値を逆シリアル化し、元のシリアル化 <see cref="T:System.DateTime" /> オブジェクトを再構築します。</summary>
      <returns>
        <see cref="M:System.DateTime.ToBinary" /> メソッドによってシリアル化された <see cref="T:System.DateTime" /> オブジェクトと等価なオブジェクト。</returns>
      <param name="dateData">2 ビット フィールドの <see cref="P:System.DateTime.Kind" /> プロパティおよび 62 ビット フィールドの <see cref="P:System.DateTime.Ticks" /> プロパティをエンコードする 64 ビット符号付き整数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateData" /> が <see cref="F:System.DateTime.MinValue" /> より小さい値か、<see cref="F:System.DateTime.MaxValue" /> より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.FromFileTime(System.Int64)">
      <summary>指定された Windows ファイル時刻を同等の現地時刻に変換します。</summary>
      <returns>
        <paramref name="fileTime" /> パラメーターによって表された日時に相当する現地時刻を表すオブジェクト。</returns>
      <param name="fileTime">タイマー刻み単位で表した Windows ファイルの時刻。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fileTime" /> が 0 未満か、<see cref="F:System.DateTime.MaxValue" /> を超える時刻を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.FromFileTimeUtc(System.Int64)">
      <summary>指定された Windows ファイル時刻を同等の UTC 時刻に変換します。</summary>
      <returns>
        <paramref name="fileTime" /> パラメーターによって表された日時に相当する UTC 時刻を表すオブジェクト。</returns>
      <param name="fileTime">タイマー刻み単位で表した Windows ファイルの時刻。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fileTime" /> が 0 未満か、<see cref="F:System.DateTime.MaxValue" /> を超える時刻を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats">
      <summary>このインスタンスの値を、標準の日時形式指定子によってサポートされるすべての文字列形式に変換します。</summary>
      <returns>要素を格納した文字列配列。要素は、標準日時形式指定子のいずれかで書式指定されたインスタンスの値を表します。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.Char)">
      <summary>このインスタンスの値を、指定した標準の日時形式指定子によってサポートされるすべての文字列形式に変換します。</summary>
      <returns>要素を格納した文字列配列。要素は、<paramref name="format" /> 標準日時形式指定子で書式指定されたインスタンスの値を表します。</returns>
      <param name="format">標準の日時書式指定文字列 (「解説」を参照してください)。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> が、有効な標準日時書式指定子の文字ではありません。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)">
      <summary>このインスタンスの値を、指定した標準日時形式指定子およびカルチャ固有の書式情報によってサポートされる、すべての文字列形式に変換します。</summary>
      <returns>要素を格納した文字列配列。要素は、標準日時形式指定子のいずれかで書式指定されたインスタンスの値を表します。</returns>
      <param name="format">日時書式指定文字列 (「解説」を参照してください)。</param>
      <param name="provider">このインスタンスに関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> が、有効な標準日時書式指定子の文字ではありません。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)">
      <summary>このインスタンスの値を、標準日時形式指定子および指定したカルチャ固有の書式情報によってサポートされる、すべての文字列形式に変換します。</summary>
      <returns>要素を格納した文字列配列。要素は、標準日時形式指定子のいずれかで書式指定されたインスタンスの値を表します。</returns>
      <param name="provider">このインスタンスに関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.GetHashCode">
      <summary>対象のインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.DateTime.Hour">
      <summary>このインスタンスで表される日付の時間の部分を取得します。</summary>
      <returns>DateTime の時間部分 (0 ～ 23)。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.IsDaylightSavingTime">
      <summary>
        <see cref="T:System.DateTime" /> のインスタンスが、現在のタイム ゾーンの夏時間の期間内であるかどうかを示します。</summary>
      <returns>
        <see cref="P:System.DateTime.Kind" /> プロパティの値が <see cref="F:System.DateTimeKind.Local" /> または <see cref="F:System.DateTimeKind.Unspecified" /> で、この <see cref="T:System.DateTime" /> インスタンスの値がローカル タイム ゾーンの夏時間の期間内にある場合は true。<see cref="P:System.DateTime.Kind" /> が <see cref="F:System.DateTimeKind.Utc" /> の場合は false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.IsLeapYear(System.Int32)">
      <summary>指定した年が閏年かどうかを示す値を返します。</summary>
      <returns>
        <paramref name="year" /> が閏年である場合は true。それ以外の場合は false。</returns>
      <param name="year">4 桁の年。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> が 1 未満であるか、9999 を超えています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Kind">
      <summary>このインスタンスが表す時刻の種類 (現地時刻、世界協定時刻 (UTC)、または、そのどちらでもない) を示す値を取得します。</summary>
      <returns>現在の時刻が表すものを示す列挙値の 1 つ。 既定値は、<see cref="F:System.DateTimeKind.Unspecified" /> です。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.DateTime.MaxValue">
      <summary>
        <see cref="T:System.DateTime" /> の最大有効値を表します。 このフィールドは読み取り専用です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Millisecond">
      <summary>このインスタンスで表される日付のミリ秒の部分を取得します。</summary>
      <returns>DateTime のミリ秒部分 (0 ～ 999)。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Minute">
      <summary>このインスタンスで表される日付の分の部分を取得します。</summary>
      <returns>DateTime の分の部分 (0 ～ 59)。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.DateTime.MinValue">
      <summary>
        <see cref="T:System.DateTime" /> の最小有効値を表します。 このフィールドは読み取り専用です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Month">
      <summary>このインスタンスで表される日付の月の部分を取得します。</summary>
      <returns>DateTime の月部分 (1 ～ 12)。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Now">
      <summary>コンピューター上の現在の日時を現地時刻で表した <see cref="T:System.DateTime" /> オブジェクトを取得します。</summary>
      <returns>現在の現地日時を値として保持するオブジェクト。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)">
      <summary>指定した日付と時刻に指定した時間間隔を加算して、新しい日付と時刻を作成します。</summary>
      <returns>
        <paramref name="d" /> に <paramref name="t" /> を加算した値であるオブジェクト。</returns>
      <param name="d">追加する日付と時刻の値。</param>
      <param name="t">加算する時間間隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さい値か、<see cref="F:System.DateTime.MaxValue" /> より大きい値です。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)">
      <summary>
        <see cref="T:System.DateTime" /> の 2 つの指定したインスタンスが等しいかどうかを判断します。</summary>
      <returns>
        <paramref name="d1" /> と <paramref name="d2" /> が同じ日付と時刻を表す場合は true。それ以外の場合は false。</returns>
      <param name="d1">比較対象の第 1 オブジェクト。</param>
      <param name="d2">2 番目に比較するオブジェクト。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)">
      <summary>指定した <see cref="T:System.DateTime" /> が、指定したもう 1 つの <see cref="T:System.DateTime" /> より後の時刻かどうかを判断します。</summary>
      <returns>
        <paramref name="t1" /> が <paramref name="t2" /> より遅い場合は true。それ以外の場合は false。</returns>
      <param name="t1">比較対象の第 1 オブジェクト。</param>
      <param name="t2">2 番目に比較するオブジェクト。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)">
      <summary>指定した 1 つの <see cref="T:System.DateTime" /> が、指定した別の <see cref="T:System.DateTime" /> と同じ日時またはそれより後の日時を表しているかどうかを判断します。</summary>
      <returns>
        <paramref name="t1" /> が <paramref name="t2" /> と同じかそれより遅い場合は  true。それ以外の場合は false。</returns>
      <param name="t1">比較対象の第 1 オブジェクト。</param>
      <param name="t2">2 番目に比較するオブジェクト。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)">
      <summary>
        <see cref="T:System.DateTime" /> の 2 つの指定したインスタンスが等しくないかどうかを判断します。</summary>
      <returns>
        <paramref name="d1" /> と <paramref name="d2" /> が同じ日付と時刻を表していない場合は true。それ以外の場合は false。</returns>
      <param name="d1">比較対象の第 1 オブジェクト。</param>
      <param name="d2">2 番目に比較するオブジェクト。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)">
      <summary>指定した <see cref="T:System.DateTime" /> が、指定したもう 1 つの <see cref="T:System.DateTime" /> より前の時刻かどうかを判断します。</summary>
      <returns>
        <paramref name="t1" /> が <paramref name="t2" /> より早い場合は true。それ以外の場合は false。</returns>
      <param name="t1">比較対象の第 1 オブジェクト。</param>
      <param name="t2">2 番目に比較するオブジェクト。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)">
      <summary>指定した 1 つの <see cref="T:System.DateTime" /> が、指定した別の <see cref="T:System.DateTime" /> と同じ日時またはそれより前の日時を表しているかどうかを判断します。</summary>
      <returns>
        <paramref name="t1" /> が <paramref name="t2" /> と同じかそれより遅い場合  true。それ以外の場合は false。</returns>
      <param name="t1">比較対象の第 1 オブジェクト。</param>
      <param name="t2">2 番目に比較するオブジェクト。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)">
      <summary>指定した日付と時刻から指定したもう 1 つの日付と時刻を減算して、時間間隔を返します。</summary>
      <returns>
        <paramref name="d1" /> と <paramref name="d2" /> の間の時間間隔、つまり <paramref name="d1" /> から <paramref name="d2" /> を引いた値です。</returns>
      <param name="d1">減算対象の日付および時刻の値 (被減数)。</param>
      <param name="d2">減算する日付および時刻の値 (減数)。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)">
      <summary>指定した日付と時刻から指定した時間間隔を減算して、新しい日付と時刻を返します。</summary>
      <returns>
        <paramref name="d" /> の値から <paramref name="t" /> の値を減算した値を保持するオブジェクト。</returns>
      <param name="d">減算される日時の値。</param>
      <param name="t">減算する時間間隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さい値か、<see cref="F:System.DateTime.MaxValue" /> より大きい値です。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.Parse(System.String)">
      <summary>日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。</summary>
      <returns>
        <paramref name="s" /> に含まれる日時と等価のオブジェクト。</returns>
      <param name="s">変換する日時を含む文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が、日付と時刻の有効な文字列形式を格納していません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider)">
      <summary>カルチャ固有の書式情報を使用して、日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。</summary>
      <returns>
        <paramref name="provider" /> で指定された書式に従って表記された、<paramref name="s" /> に含まれる日時と等価のオブジェクト。</returns>
      <param name="s">変換する日時を含む文字列。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が、日付と時刻の有効な文字列形式を格納していません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>カルチャ固有の書式情報と書式スタイルを使用して、日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。</summary>
      <returns>
        <paramref name="provider" /> および <paramref name="styles" /> で指定された書式に従って表記された、<paramref name="s" /> に含まれる日時と等価のオブジェクト。</returns>
      <param name="s">変換する日時を含む文字列。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="styles">解析操作を成功させるために <paramref name="s" /> で使用できるスタイル要素を示し、現在のタイム ゾーンまたは現在の日付に関連して解析した日付を解釈する方法を定義する列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が、日付と時刻の有効な文字列形式を格納していません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> に、無効な <see cref="T:System.Globalization.DateTimeStyles" /> 値の組み合わせが含まれています。 たとえば、<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> と <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> の両方を指定した場合、この例外が発生します。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>指定した書式とカルチャ固有の書式情報を使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> の値に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
      <returns>
        <paramref name="format" /> および <paramref name="provider" /> で指定された書式に従って表記された、<paramref name="s" /> に含まれる日時と等価のオブジェクト。</returns>
      <param name="s">変換する日時を含む文字列。</param>
      <param name="format">
        <paramref name="s" /> の必要な書式を定義する書式指定子。 詳細については、「解説」を参照してください。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> または <paramref name="format" /> が null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> または <paramref name="format" /> が空の文字列です。 または <paramref name="s" /> に、<paramref name="format" /> で指定されたパターンに対応する日付と時刻が格納されていません。 または 時間の部分と、<paramref name="s" /> の午前/午後の識別文字が一致しません。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。それ以外の場合は、例外がスローされます。</summary>
      <returns>
        <paramref name="format" />、<paramref name="provider" />、および <paramref name="style" /> で指定された書式に従って表記された、<paramref name="s" /> に含まれる日時と等価のオブジェクト。</returns>
      <param name="s">変換する日付と時刻を格納した文字列。</param>
      <param name="format">
        <paramref name="s" /> の必要な書式を定義する書式指定子。 詳細については、「解説」を参照してください。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="style">
        <paramref name="s" />、<paramref name="s" /> に指定できるスタイル要素、または <paramref name="s" /> から <see cref="T:System.DateTime" /> 値への変換に関する追加情報を提供する列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> または <paramref name="format" /> が null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> または <paramref name="format" /> が空の文字列です。 または <paramref name="s" /> に、<paramref name="format" /> で指定されたパターンに対応する日付と時刻が格納されていません。 または 時間の部分と、<paramref name="s" /> の午前/午後の識別文字が一致しません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> に、無効な <see cref="T:System.Globalization.DateTimeStyles" /> 値の組み合わせが含まれています。 たとえば、<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> と <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> の両方を指定した場合、この例外が発生します。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>指定した書式の配列、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。 文字列形式の書式は、指定した書式の少なくとも 1 つと完全に一致する必要があります。それ以外の場合は、例外がスローされます。</summary>
      <returns>
        <paramref name="formats" />、<paramref name="provider" />、および <paramref name="style" /> で指定された書式に従って表記された、<paramref name="s" /> に含まれる日時と等価のオブジェクト。</returns>
      <param name="s">変換する日時を含む文字列。</param>
      <param name="formats">
        <paramref name="s" /> の許可された書式の配列。 詳細については、「解説」を参照してください。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="style">
        <paramref name="s" /> に許可されている書式を示す列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> または <paramref name="formats" /> が null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が空の文字列です。 または <paramref name="formats" /> の要素が空の文字列です。 または <paramref name="s" /> に、<paramref name="formats" /> のいずれかの要素に対応する日付と時刻が格納されていません。 または 時間の部分と、<paramref name="s" /> の午前/午後の識別文字が一致しません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> に、無効な <see cref="T:System.Globalization.DateTimeStyles" /> 値の組み合わせが含まれています。 たとえば、<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> と <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> の両方を指定した場合、この例外が発生します。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.DateTime.Second">
      <summary>このインスタンスで表される日付の秒の部分を取得します。</summary>
      <returns>DateTime の秒の部分 (0 ～ 59)。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)">
      <summary>指定された <see cref="T:System.DateTime" /> と同じタイマー刻みの数を持つ新しい <see cref="T:System.DateTime" /> オブジェクトを、指定された <see cref="T:System.DateTimeKind" /> 値 (現地時刻、世界協定時刻 (UTC)、または、そのいずれでもないことを示す) に基づいて作成します。</summary>
      <returns>
        <paramref name="value" /> パラメーターが表すオブジェクトと同じタイマー刻みの数、および <paramref name="kind" /> パラメーターで指定された <see cref="T:System.DateTimeKind" /> 値を持つ新しいオブジェクト。</returns>
      <param name="value">日付と時刻。</param>
      <param name="kind">新しいオブジェクトが現地時刻であるか、世界協定時刻 (UTC) であるか、またはそのどちらでもないかを示す列挙値の 1 つ。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.Subtract(System.DateTime)">
      <summary>このインスタンスから指定した日付と時刻を減算します。</summary>
      <returns>このインスタンスで表された日付と時刻から <paramref name="value" /> で表された日付と時刻を減算した値と等しい時間間隔。</returns>
      <param name="value">減算する日付と時刻の値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">結果が <see cref="F:System.DateTime.MinValue" /> より小さい値か、<see cref="F:System.DateTime.MaxValue" /> より大きい値です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.Subtract(System.TimeSpan)">
      <summary>このインスタンスから指定した存続時間を減算します。</summary>
      <returns>このインスタンスで表された日付と時刻から <paramref name="value" /> で表された時間間隔を減算した値と等しいオブジェクト。</returns>
      <param name="value">減算する時間間隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">結果が <see cref="F:System.DateTime.MinValue" /> より小さい値か、<see cref="F:System.DateTime.MaxValue" /> より大きい値です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.System#IComparable#CompareTo(System.Object)">
      <summary>現在のインスタンスを同じ型の別のオブジェクトと比較し、このインスタンスの並べ替え順序での位置が、比較対象のオブジェクトと比べて前か、後か、または同じかを示す整数を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対順序を示す符号付き数値。 
値 	説明 	
0 より小さい値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも前です。 	
0 	このインスタンスは、並べ替え順序で、<paramref name="value" /> と同じ位置に出現します。 	
0 を超える値 	このインスタンスは、並べ替え順序において <paramref name="value" /> の後になります。または <paramref name="value" /> は null です。</returns>
      <param name="value">対象のインスタンスと比較する対象のオブジェクト、または null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が <see cref="T:System.DateTime" /> ではありません。</exception>
    </member>
    <member name="P:System.DateTime.Ticks">
      <summary>このインスタンスの日付と時刻を表すタイマー刻み数を取得します。</summary>
      <returns>このインスタンスの日付と時刻を表すタイマー刻み数。 値は DateTime.MinValue.Ticks から DateTime.MaxValue.Ticks までの間にあります。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.TimeOfDay">
      <summary>このインスタンスの時刻を取得します。</summary>
      <returns>深夜から経過した 1 日の端数部分を表す時間間隔。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToBinary">
      <summary>現在の <see cref="T:System.DateTime" /> オブジェクトを 64 ビットのバイナリ値にシリアル化します。後で、この値を使って、<see cref="T:System.DateTime" /> オブジェクトを再構築できます。</summary>
      <returns>
        <see cref="P:System.DateTime.Kind" /> プロパティおよび <see cref="P:System.DateTime.Ticks" /> プロパティをエンコードする 64 ビットの符号付き整数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.DateTime.Today">
      <summary>現在の日付を取得します。</summary>
      <returns>今日の日付を表すオブジェクト (ただし、時刻部分は 00:00:00)。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToFileTime">
      <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を Windows ファイル時刻に変換します。</summary>
      <returns>現在の <see cref="T:System.DateTime" /> オブジェクトの値を Windows ファイル時刻で表した値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">結果のファイル時刻が、西暦 1601 年 1 月 1 日深夜 12:00 時 (UTC) よりも前の日時を表すことがあります。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.ToFileTimeUtc">
      <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を Windows ファイル時刻に変換します。</summary>
      <returns>現在の <see cref="T:System.DateTime" /> オブジェクトの値を Windows ファイル時刻で表した値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">結果のファイル時刻が、西暦 1601 年 1 月 1 日深夜 12:00 時 (UTC) よりも前の日時を表すことがあります。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.ToLocalTime">
      <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を現地時刻に変換します。</summary>
      <returns>
        <see cref="P:System.DateTime.Kind" /> プロパティが <see cref="F:System.DateTimeKind.Local" /> であるオブジェクト。通常は、現在の <see cref="T:System.DateTime" /> オブジェクトと等価な現地時刻が値として格納されます。ただし、変換後の値が <see cref="T:System.DateTime" /> オブジェクトで表現可能な範囲を超えている場合は <see cref="F:System.DateTime.MaxValue" /> の値が、逆に <see cref="T:System.DateTime" /> オブジェクトで表現可能な範囲を下回る場合は <see cref="F:System.DateTime.MinValue" /> が格納されます。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.ToString">
      <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を等価の文字列形式に変換します。</summary>
      <returns>現在の <see cref="T:System.DateTime" /> オブジェクトの値の文字列形式。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">日付と時刻が、現在のカルチャで使用する暦でサポートされている日付の範囲外です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToString(System.IFormatProvider)">
      <summary>指定したカルチャ固有の書式情報を使用して、現在の <see cref="T:System.DateTime" /> オブジェクトの値をそれと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="provider" /> により指定された、現在の <see cref="T:System.DateTime" /> オブジェクトの値の文字列形式。</returns>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">日時が、<paramref name="provider" /> で使用されている暦が対応している日付の範囲外です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToString(System.String)">
      <summary>指定した書式を使用して、現在の <see cref="T:System.DateTime" /> オブジェクトの値をそれと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> で指定された、現在の <see cref="T:System.DateTime" /> オブジェクトの値の文字列形式。</returns>
      <param name="format">標準またはカスタムの日時書式指定文字列 (「解説」を参照)。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> の長さが 1 であり、<see cref="T:System.Globalization.DateTimeFormatInfo" /> に定義された書式指定文字のどれでもありません。 または <paramref name="format" /> に、有効なカスタム書式パターンが格納されていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">日付と時刻が、現在のカルチャで使用する暦でサポートされている日付の範囲外です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToString(System.String,System.IFormatProvider)">
      <summary>指定した書式およびカルチャ固有の書式情報を使用して、現在の <see cref="T:System.DateTime" /> オブジェクトの値をそれと等価の文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> および <paramref name="provider" /> により指定された、現在の <see cref="T:System.DateTime" /> オブジェクトの値の文字列形式。</returns>
      <param name="format">標準またはカスタムの日時書式指定文字列。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> の長さが 1 であり、<see cref="T:System.Globalization.DateTimeFormatInfo" /> に定義された書式指定文字のどれでもありません。 または <paramref name="format" /> に、有効なカスタム書式パターンが格納されていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">日時が、<paramref name="provider" /> で使用されている暦が対応している日付の範囲外です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToUniversalTime">
      <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を世界協定時刻 (UTC) に変換します。</summary>
      <returns>
        <see cref="P:System.DateTime.Kind" /> プロパティが <see cref="F:System.DateTimeKind.Utc" /> のオブジェクト。通常は、現在の <see cref="T:System.DateTime" /> オブジェクトと等価な UTC 時刻が値として格納されます。ただし、変換後の値が <see cref="T:System.DateTime" /> オブジェクトで表現可能な範囲を超えている場合は <see cref="F:System.DateTime.MaxValue" /> の値が、逆に <see cref="T:System.DateTime" /> オブジェクトで表現可能な範囲を下回る場合は <see cref="F:System.DateTime.MinValue" /> が格納されます。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.DateTime@)">
      <summary>指定した文字列形式の日時を対応する <see cref="T:System.DateTime" /> 表現に変換し、変換に成功したかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="s" /> パラメーターが正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">変換する日付と時刻を格納した文字列。</param>
      <param name="result">変換に成功した場合は、<paramref name="s" /> に格納された日時と等しい <see cref="T:System.DateTime" /> 値が格納されます。変換に失敗した場合は <see cref="F:System.DateTime.MinValue" /> が格納されます。 <paramref name="s" /> パラメーターが null の場合、空の文字列 ("") の場合、または日付と時刻を表す有効な文字列形式が指定されていない場合は、変換に失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>指定したカルチャ固有の書式情報と書式スタイルを使用して、指定した文字列形式の日付と時刻をそれと等価の <see cref="T:System.DateTime" /> に変換し、変換に成功したかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="s" /> パラメーターが正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">変換する日付と時刻を格納した文字列。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="styles">現在のタイム ゾーンまたは現在の日付と関連させて、解析された日付をどのように解釈するかを定義する列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
      <param name="result">変換に成功した場合は、<paramref name="s" /> に格納された日時と等しい <see cref="T:System.DateTime" /> 値が格納されます。変換に失敗した場合は <see cref="F:System.DateTime.MinValue" /> が格納されます。 <paramref name="s" /> パラメーターが null の場合、空の文字列 ("") の場合、または日付と時刻を表す有効な文字列形式が指定されていない場合は、変換に失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> が有効な <see cref="T:System.Globalization.DateTimeStyles" /> 値ではありません。 または <paramref name="styles" /> に、無効な <see cref="T:System.Globalization.DateTimeStyles" /> 値の組み合わせが指定されています (<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> と <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> の両方が指定されているなど)。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="provider" /> は、ニュートラル カルチャであり、解析操作では使用できません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。 このメソッドは、変換に成功したかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="s" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">変換する日付と時刻を格納した文字列。</param>
      <param name="format">
        <paramref name="s" /> の要求された書式。 詳細については、次の「解説」を参照してください。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="style">
        <paramref name="s" /> の許可された書式を示す 1 つまたは複数の列挙値のビットごとの組み合わせ。</param>
      <param name="result">変換に成功した場合は、<paramref name="s" /> に格納された日時と等しい <see cref="T:System.DateTime" /> 値が格納されます。変換に失敗した場合は <see cref="F:System.DateTime.MinValue" /> が格納されます。 <paramref name="s" /> パラメーターまたは <paramref name="format" /> パラメーターに、null や空の文字列、または、<paramref name="format" /> に指定されたパターンと一致しない日時が指定されていた場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> が有効な <see cref="T:System.Globalization.DateTimeStyles" /> 値ではありません。 または <paramref name="styles" /> に、無効な <see cref="T:System.Globalization.DateTimeStyles" /> 値の組み合わせが指定されています (<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> と <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> の両方が指定されているなど)。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>指定した書式の配列、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。 文字列形式の書式は、指定した書式の少なくとも 1 つと完全に一致する必要があります。 このメソッドは、変換に成功したかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="s" /> パラメーターが正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">変換する日時を含む文字列。</param>
      <param name="formats">
        <paramref name="s" /> の許可された書式の配列。 詳細については、次の「解説」を参照してください。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="style">
        <paramref name="s" /> に許可されている書式を示す列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
      <param name="result">変換に成功した場合は、<paramref name="s" /> に格納された日時と等しい <see cref="T:System.DateTime" /> 値が格納されます。変換に失敗した場合は <see cref="F:System.DateTime.MinValue" /> が格納されます。 <paramref name="s" /> または <paramref name="formats" /> が null の場合、<paramref name="s" /> または <paramref name="formats" /> の要素が空の文字列の場合、あるいは、<paramref name="s" /> の書式が <paramref name="formats" /> に指定されたいずれのパターンとも一致しない場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> が有効な <see cref="T:System.Globalization.DateTimeStyles" /> 値ではありません。 または <paramref name="styles" /> に、無効な <see cref="T:System.Globalization.DateTimeStyles" /> 値の組み合わせが指定されています (<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> と <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> の両方が指定されているなど)。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.UtcNow">
      <summary>コンピューター上の現在の日時を世界協定時刻 (UTC) で表した <see cref="T:System.DateTime" /> オブジェクトを取得します。</summary>
      <returns>現在の UTC 日時を値として保持するオブジェクト。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Year">
      <summary>このインスタンスで表される日付の年の部分を取得します。</summary>
      <returns>1 から 9999 までの間の年。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.DateTimeKind">
      <summary>
        <see cref="T:System.DateTime" /> オブジェクトが表す時刻の種類 (現地時刻、世界協定時刻 (UTC)、または、そのいずれでもない) を指定します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.DateTimeKind.Local">
      <summary>現地時刻であることを表します。</summary>
    </member>
    <member name="F:System.DateTimeKind.Unspecified">
      <summary>現地時刻と世界協定時刻 (UTC) のいずれも指定されていないことを表します。</summary>
    </member>
    <member name="F:System.DateTimeKind.Utc">
      <summary>UTC 時刻であることを表します。</summary>
    </member>
    <member name="T:System.DateTimeOffset">
      <summary>特定の時点を表します。通常、世界協定時刻 (UTC) を基準とする相対的な日時として表されます。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime)">
      <summary>
        <see cref="T:System.DateTime" /> 値を指定して、<see cref="T:System.DateTimeOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="dateTime">日付と時刻。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">オフセットを適用することによって得られる世界協定時刻 (UTC) の日時が <see cref="F:System.DateTimeOffset.MinValue" /> 未満です。 または オフセットを適用することによって得られる UTC 日時が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)">
      <summary>指定された <see cref="T:System.DateTime" /> 値およびオフセットを使用して、<see cref="T:System.DateTimeOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="dateTime">日付と時刻。</param>
      <param name="offset">世界協定時刻 (UTC) からの時刻のオフセット。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime.Kind" /> が <see cref="F:System.DateTimeKind.Utc" /> であるにもかかわらず、<paramref name="offset" /> がゼロ以外です。 または <paramref name="dateTime.Kind" /> が <see cref="F:System.DateTimeKind.Local" /> であるにもかかわらず、<paramref name="offset" /> が、システムのローカル タイム ゾーンのオフセットと等しくありません。 または <paramref name="offset" /> が端数なしの分数で指定されていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> が -14 時間未満か、14 時間を超えています。 または <see cref="P:System.DateTimeOffset.UtcDateTime" /> が <see cref="F:System.DateTimeOffset.MinValue" /> より小さい値か、<see cref="F:System.DateTimeOffset.MaxValue" /> より大きい値です。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>指定した年、月、日、時、分、秒、ミリ秒、およびオフセットを使用して、<see cref="T:System.DateTimeOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="year">年 (1 から 9999)。</param>
      <param name="month">月 (1 から 12)。</param>
      <param name="day">日付 (1 から <paramref name="month" /> の日数)。</param>
      <param name="hour">時間 (0 から 23)。</param>
      <param name="minute">分 (0 から 59)。</param>
      <param name="second">秒 (0 から 59)。</param>
      <param name="millisecond">ミリ秒 (0 から 999)。</param>
      <param name="offset">世界協定時刻 (UTC) からの時刻のオフセット。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> が端数なしの分数で指定されていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> が 1 未満か、9999 を超えています。 または <paramref name="month" /> が 1 未満か、12 を超えています。 または <paramref name="day" /> が 1 未満か、<paramref name="month" /> の月の日数よりも大きい値です。 または <paramref name="hour" /> が 0 未満、または 23 を超えます。 または <paramref name="minute" /> が 0 未満か、59 よりも大きい値です。 または <paramref name="second" /> が 0 未満か、59 よりも大きい値です。 または <paramref name="millisecond" /> が 0 未満か、999 よりも大きい値です。 または <paramref name="offset" /> が -14 未満か、14 よりも大きい値です。 または <see cref="P:System.DateTimeOffset.UtcDateTime" /> プロパティが <see cref="F:System.DateTimeOffset.MinValue" /> 未満か、<see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>指定した年、月、日、時、分、秒、およびオフセットを使用して、<see cref="T:System.DateTimeOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="year">年 (1 から 9999)。</param>
      <param name="month">月 (1 から 12)。</param>
      <param name="day">日付 (1 から <paramref name="month" /> の日数)。</param>
      <param name="hour">時間 (0 から 23)。</param>
      <param name="minute">分 (0 から 59)。</param>
      <param name="second">秒 (0 から 59)。</param>
      <param name="offset">世界協定時刻 (UTC) からの時刻のオフセット。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> が端数なしの分数で指定されていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> が 1 未満か、9999 を超えています。 または <paramref name="month" /> が 1 未満か、12 を超えています。 または <paramref name="day" /> が 1 未満か、<paramref name="month" /> の月の日数よりも大きい値です。 または <paramref name="hour" /> が 0 未満、または 23 を超えます。 または <paramref name="minute" /> が 0 未満か、59 よりも大きい値です。 または <paramref name="second" /> が 0 未満か、59 よりも大きい値です。 または <paramref name="offset" /> が -14 時間未満か、14 時間を超えています。 または <see cref="P:System.DateTimeOffset.UtcDateTime" /> プロパティが <see cref="F:System.DateTimeOffset.MinValue" /> 未満か、<see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)">
      <summary>指定されたタイマー刻みの数とオフセットで、<see cref="T:System.DateTimeOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="ticks">日時を 0001 年 1 月 1 日午前 00:00:00 以降の経過時間 (100 ナノ秒単位) で表した値。</param>
      <param name="offset">世界協定時刻 (UTC) からの時刻のオフセット。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> が端数なしの分数で指定されていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.DateTimeOffset.UtcDateTime" /> プロパティが <see cref="F:System.DateTimeOffset.MinValue" /> 未満か、<see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。 または <paramref name="ticks" /> が DateTimeOffset.MinValue.Ticks より小さい値か、DateTimeOffset.MaxValue.Ticks より大きい値です。 または <paramref name="Offset" /> が -14 時間未満か、14 時間を超えています。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Add(System.TimeSpan)">
      <summary>指定された時間間隔を <see cref="T:System.DateTimeOffset" /> オブジェクトに加算します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="timeSpan" /> で表された時間間隔を加算した値を示すオブジェクト。</returns>
      <param name="timeSpan">正または負の時間間隔を表す <see cref="T:System.TimeSpan" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MinValue" /> 未満です。 または 結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddDays(System.Double)">
      <summary>指定された、整数部と小数部から成る日数を現在の <see cref="T:System.DateTimeOffset" /> オブジェクトに加算します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="days" /> で表された日数を加算した値を示すオブジェクト。</returns>
      <param name="days">整数部と小数部から成る日数。 正数または負数を指定できます。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MinValue" /> 未満です。 または 結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddHours(System.Double)">
      <summary>指定された、整数部と小数部から成る時間数を現在の <see cref="T:System.DateTimeOffset" /> オブジェクトに加算します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="hours" /> で表された時間数を加算した値を示すオブジェクト。</returns>
      <param name="hours">整数部と小数部から成る時間数。 正数または負数を指定できます。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MinValue" /> 未満です。 または 結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMilliseconds(System.Double)">
      <summary>指定されたミリ秒数を現在の <see cref="T:System.DateTimeOffset" /> オブジェクトに加算します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に、<paramref name="milliseconds" /> で表された整数のミリ秒数を加算した値を示すオブジェクト。</returns>
      <param name="milliseconds">整数部と小数部から成るミリ秒数。 正数または負数を指定できます。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MinValue" /> 未満です。 または 結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMinutes(System.Double)">
      <summary>指定された、整数部と小数部から成る分数を現在の <see cref="T:System.DateTimeOffset" /> オブジェクトに加算します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="minutes" /> で表された分数を加算した値を示すオブジェクト。</returns>
      <param name="minutes">整数部と小数部から成る分数。 正数または負数を指定できます。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MinValue" /> 未満です。 または 結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMonths(System.Int32)">
      <summary>指定された月数を現在の <see cref="T:System.DateTimeOffset" /> オブジェクトに加算します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="months" /> で表された月数を加算した値を示すオブジェクト。</returns>
      <param name="months">整数の月数。 正数または負数を指定できます。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MinValue" /> 未満です。 または 結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddSeconds(System.Double)">
      <summary>指定された、整数部と小数部から成る秒数を現在の <see cref="T:System.DateTimeOffset" /> オブジェクトに加算します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="seconds" /> で表された秒数を加算した値を示すオブジェクト。</returns>
      <param name="seconds">整数部と小数部から成る秒数。 正数または負数を指定できます。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MinValue" /> 未満です。 または 結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddTicks(System.Int64)">
      <summary>指定されたタイマー刻み数を現在の <see cref="T:System.DateTimeOffset" /> オブジェクトに加算します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="ticks" /> で表されたタイマー刻みの数を加算した値を示すオブジェクト。</returns>
      <param name="ticks">100 ナノ秒タイマー刻み数。 正数または負数を指定できます。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MinValue" /> 未満です。 または 結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddYears(System.Int32)">
      <summary>指定された年数を <see cref="T:System.DateTimeOffset" /> オブジェクトに加算します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="years" /> で表された年数を加算した値を示すオブジェクト。</returns>
      <param name="years">年数。 正数または負数を指定できます。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MinValue" /> 未満です。 または 結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>2 つの <see cref="T:System.DateTimeOffset" /> オブジェクトを比較し、1 つ目のオブジェクトが 2 つ目のオブジェクトの前か後か、または等しいかを示します。</summary>
      <returns>
        <paramref name="first" /> パラメーターの値が <paramref name="second" /> パラメーターの値よりも前か後か、または等しいかを示す符号付き整数。次の表を参照してください。 
戻り値 	説明 	
0 より小さい値 	<paramref name="first" /> が <paramref name="second" /> よりも前の日時です。 	
0 	<paramref name="first" /> と <paramref name="second" /> が等価です。 	
0 を超える値 	<paramref name="first" /> が <paramref name="second" /> より後の日時です。</returns>
      <param name="first">比較対象の第 1 オブジェクト。</param>
      <param name="second">2 番目に比較するオブジェクト。</param>
    </member>
    <member name="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと、指定された <see cref="T:System.DateTimeOffset" /> オブジェクトとを比較し、現在のオブジェクトがもう一方の <see cref="T:System.DateTimeOffset" /> オブジェクトと比べて前か後か、または等しいかを示します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと <paramref name="other" /> との関係を示す符号付き整数。次の表を参照してください。 
戻り値 	説明 	
0 より小さい値 	現在の <see cref="T:System.DateTimeOffset" /> オブジェクトは <paramref name="other" /> よりも前の日時です。 	
0 	現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと <paramref name="other" /> は等価です。 	
0 より大きい値 	現在の <see cref="T:System.DateTimeOffset" /> オブジェクトは <paramref name="other" /> よりも後の日時です。</returns>
      <param name="other">現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="P:System.DateTimeOffset.Date">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの日付要素を表す <see cref="T:System.DateTime" /> 値を取得します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの日付要素を表す <see cref="T:System.DateTime" /> 値。</returns>
    </member>
    <member name="P:System.DateTimeOffset.DateTime">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの日付と時刻を表す <see cref="T:System.DateTime" /> 値を取得します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの日時。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Day">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトによって表される月の日付を取得します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの 1 ～ 31 の値で表される日付要素。</returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfWeek">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトによって表される曜日を取得します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの曜日を示す列挙値の 1 つ。</returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfYear">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトによって表される年間積算日を取得します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの年間積算日を表す 1 ～ 366 の値。</returns>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset)">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトが、指定された <see cref="T:System.DateTimeOffset" /> オブジェクトと同じ特定の時点を表しているかどうかを判断します。</summary>
      <returns>両方の <see cref="T:System.DateTimeOffset" /> オブジェクトが同じ <see cref="P:System.DateTimeOffset.UtcDateTime" /> 値を持つ場合は true。それ以外の場合は false。</returns>
      <param name="other">現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>指定された 2 つの <see cref="T:System.DateTimeOffset" /> オブジェクトが、同じ特定の時点を表しているかどうかを判断します。</summary>
      <returns>2 つの <see cref="T:System.DateTimeOffset" /> オブジェクトが同じ <see cref="P:System.DateTimeOffset.UtcDateTime" /> 値を持つ場合は true。それ以外の場合は false。</returns>
      <param name="first">比較対象の第 1 オブジェクト。</param>
      <param name="second">2 番目に比較するオブジェクト。</param>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.Object)">
      <summary>
        <see cref="T:System.DateTimeOffset" /> オブジェクトが、指定されたオブジェクトと同じ特定の時点を表しているかどうかを判断します。</summary>
      <returns>
        <paramref name="obj" /> パラメーターが <see cref="T:System.DateTimeOffset" /> オブジェクトであり、現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと同じ特定の時点を表している場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトが、指定された <see cref="T:System.DateTimeOffset" /> オブジェクトと同じ特定の時点を表しており、かつ、同じオフセットを持つかどうかを判断します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと <paramref name="other" /> が同じ日時の値を持ち、かつ同じ <see cref="P:System.DateTimeOffset.Offset" /> 値を持つ場合は true。それ以外の場合は false。</returns>
      <param name="other">現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.DateTimeOffset.FromFileTime(System.Int64)">
      <summary>指定された Windows ファイル時刻を同等の現地時刻に変換します。</summary>
      <returns>
        <paramref name="fileTime" /> の日時を表すオブジェクト。オフセットは現地時刻のオフセットに設定されます。</returns>
      <param name="fileTime">タイマー刻み単位で表した Windows ファイルの時刻。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="filetime" /> が 0 未満です。 または <paramref name="filetime" /> が DateTimeOffset.MaxValue.Ticks より大きくなっています。</exception>
    </member>
    <member name="M:System.DateTimeOffset.GetHashCode">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Hour">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトが表す時刻の時間要素を取得します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの時間要素。 このプロパティには、0 ～ 23 の値の範囲をとる 24 時間制が使用されます。</returns>
    </member>
    <member name="P:System.DateTimeOffset.LocalDateTime">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの現地日時を表す <see cref="T:System.DateTime" /> 値を取得します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの現地日時。</returns>
    </member>
    <member name="F:System.DateTimeOffset.MaxValue">
      <summary>
        <see cref="T:System.DateTimeOffset" /> の最大有効値を表します。 このフィールドは読み取り専用です。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="F:System.DateTime.MaxValue" /> が、現在または指定したカルチャの既定の暦の範囲外です。</exception>
    </member>
    <member name="P:System.DateTimeOffset.Millisecond">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトが表す時刻のミリ秒要素を取得します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの 0 ～ 999 の整数で表されるミリ秒要素。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Minute">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトが表す時刻の分要素を取得します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの 0 ～ 59 の整数で表される分要素。</returns>
    </member>
    <member name="F:System.DateTimeOffset.MinValue">
      <summary>
        <see cref="T:System.DateTimeOffset" /> の最小有効値を表します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="P:System.DateTimeOffset.Month">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトによって表される日付の月要素を取得します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの 1 ～ 12 の整数で表される月要素。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Now">
      <summary>現地時刻と世界協定時刻 (UTC) の差をオフセットとして持つ、現在のコンピューターの現在日時に設定された <see cref="T:System.DateTimeOffset" /> オブジェクトを取得します。</summary>
      <returns>ローカル タイム ゾーンと世界協定時刻 (UTC) の差をオフセットとして持つ、現在の現地時刻に設定された <see cref="T:System.DateTimeOffset" /> オブジェクト。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Offset">
      <summary>世界協定時刻 (UTC) からの時刻のオフセットを取得します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの時刻値と世界協定時刻 (UTC) 間の差。</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)">
      <summary>特定の日時を持つ <see cref="T:System.DateTimeOffset" /> オブジェクトに対し、指定された時間間隔を加算し、新しい日時を持った <see cref="T:System.DateTimeOffset" /> オブジェクトを作成します。</summary>
      <returns>
        <paramref name="dateTimeTz" /> と <paramref name="timeSpan" /> を合計した値を持つオブジェクト。</returns>
      <param name="dateTimeOffset">時間間隔を加算するオブジェクト。</param>
      <param name="timeSpan">加算する時間間隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MinValue" /> 未満です。 または 結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>指定された 2 つの <see cref="T:System.DateTimeOffset" /> オブジェクトが、同じ特定の時点を表しているかどうかを判断します。</summary>
      <returns>両方の <see cref="T:System.DateTimeOffset" /> オブジェクトが同じ <see cref="P:System.DateTimeOffset.UtcDateTime" /> 値を持つ場合は true。それ以外の場合は false。</returns>
      <param name="left">比較対象の第 1 オブジェクト。</param>
      <param name="right">2 番目に比較するオブジェクト。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>最初に指定した <see cref="T:System.DateTimeOffset" /> オブジェクトが 2 番目に指定した <see cref="T:System.DateTimeOffset" /> オブジェクトよりも大きい (後) かどうかを判断します。</summary>
      <returns>
        <paramref name="left" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> の値が <paramref name="right" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> の値よりも後の日時を表している場合は true。それ以外の場合は false。</returns>
      <param name="left">比較対象の第 1 オブジェクト。</param>
      <param name="right">2 番目に比較するオブジェクト。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>最初に指定した <see cref="T:System.DateTimeOffset" /> オブジェクトが 2 番目に指定した <see cref="T:System.DateTimeOffset" /> オブジェクト以上かどうかを判断します。</summary>
      <returns>
        <paramref name="left" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> 値が <paramref name="right" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> 値と同じかそれよりも後であった場合は true。それ以外の場合は false。</returns>
      <param name="left">比較対象の第 1 オブジェクト。</param>
      <param name="right">2 番目に比較するオブジェクト。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset">
      <summary>
        <see cref="T:System.DateTime" /> オブジェクトから <see cref="T:System.DateTimeOffset" /> オブジェクトへの暗黙の型変換を定義します。</summary>
      <returns>変換後のオブジェクト。</returns>
      <param name="dateTime">変換対象のオブジェクト。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">オフセットを適用することによって得られる世界協定時刻 (UTC) の日時が <see cref="F:System.DateTimeOffset.MinValue" /> 未満です。 または オフセットを適用することによって得られる UTC 日時が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>指定された 2 つの <see cref="T:System.DateTimeOffset" /> オブジェクトが異なる時点を表しているかどうかを判断します。</summary>
      <returns>
        <paramref name="left" /> と <paramref name="right" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> 値が異なる場合は true。それ以外の場合は false。</returns>
      <param name="left">比較対象の第 1 オブジェクト。</param>
      <param name="right">2 番目に比較するオブジェクト。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>最初に指定した <see cref="T:System.DateTimeOffset" /> オブジェクトが 2 番目に指定した <see cref="T:System.DateTimeOffset" /> オブジェクトより小さいかどうかを判断します。</summary>
      <returns>
        <paramref name="left" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> の値が <paramref name="right" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> の値より前の場合は true。それ以外の場合は false。</returns>
      <param name="left">比較対象の第 1 オブジェクト。</param>
      <param name="right">2 番目に比較するオブジェクト。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>最初に指定した <see cref="T:System.DateTimeOffset" /> オブジェクトが 2 番目に指定した <see cref="T:System.DateTimeOffset" /> オブジェクトより小さいかどうかを判断します。</summary>
      <returns>
        <paramref name="left" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> の値が <paramref name="right" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> の値より前の場合は true。それ以外の場合は false。</returns>
      <param name="left">比較対象の第 1 オブジェクト。</param>
      <param name="right">2 番目に比較するオブジェクト。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>一方の <see cref="T:System.DateTimeOffset" /> オブジェクトをもう一方のオブジェクトから減算し、時間間隔を生成します。</summary>
      <returns>
        <paramref name="left" /> と <paramref name="right" /> の差を表すオブジェクト。</returns>
      <param name="left">被減数。</param>
      <param name="right">減数。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)">
      <summary>指定した日付と時刻から指定した時間間隔を減算して、新しい日付と時刻を作成します。</summary>
      <returns>
        <paramref name="dateTimeOffset" /> から <paramref name="timeSpan" /> を減算した値と等しいオブジェクト。</returns>
      <param name="dateTimeOffset">減算される日時オブジェクト。</param>
      <param name="timeSpan">減算する時間間隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MinValue" /> 未満か、<see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String)">
      <summary>指定した文字列形式の日付、時刻、およびオフセットを等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。</summary>
      <returns>
        <paramref name="input" /> に含まれる日時と等価のオブジェクト。</returns>
      <param name="input">変換する日時を含む文字列。</param>
      <exception cref="T:System.ArgumentException">オフセットが 14 時間を超えているか、-14 時間未満です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> が、日付と時刻の有効な文字列形式を格納していません。 または <paramref name="input" /> に指定された文字列形式には、オフセット値しか含まれておらず、日付または時刻が存在しません。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)">
      <summary>指定したカルチャ固有の書式情報を使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。</summary>
      <returns>
        <paramref name="formatProvider" /> で指定された書式に従って表記された、<paramref name="input" /> に含まれる日時と等価のオブジェクト。</returns>
      <param name="input">変換する日時を含む文字列。</param>
      <param name="formatProvider">
        <paramref name="input" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">オフセットが 14 時間を超えているか、-14 時間未満です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> が、日付と時刻の有効な文字列形式を格納していません。 または <paramref name="input" /> に指定された文字列形式には、オフセット値しか含まれておらず、日付または時刻が存在しません。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>指定したカルチャ固有の書式情報と書式スタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。</summary>
      <returns>
        <paramref name="formatProvider" /> と <paramref name="styles" /> で指定された書式に従って表記された、<paramref name="input" /> に含まれる日時と等価のオブジェクト。</returns>
      <param name="input">変換する日時を含む文字列。</param>
      <param name="formatProvider">
        <paramref name="input" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="styles">
        <paramref name="input" /> に許可されている書式を示す列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
      <exception cref="T:System.ArgumentException">オフセットが 14 時間を超えているか、-14 時間未満です。 または <paramref name="styles" /> が有効な <see cref="T:System.Globalization.DateTimeStyles" /> 値ではありません。 または <paramref name="styles" /> にサポート外の <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。 または <paramref name="styles" /> に指定された <see cref="T:System.Globalization.DateTimeStyles" /> 値の組み合わせが正しくありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> が、日付と時刻の有効な文字列形式を格納していません。 または <paramref name="input" /> に指定された文字列形式には、オフセット値しか含まれておらず、日付または時刻が存在しません。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>指定した書式とカルチャ固有の書式情報を使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
      <returns>
        <paramref name="format" /> と <paramref name="formatProvider" /> で指定された書式に従って表記された、<paramref name="input" /> に含まれる日時と等価のオブジェクト。</returns>
      <param name="input">変換する日時を含む文字列。</param>
      <param name="format">
        <paramref name="input" /> の有効な書式を定義する書式指定子。</param>
      <param name="formatProvider">
        <paramref name="input" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">オフセットが 14 時間を超えているか、-14 時間未満です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は null です。 または <paramref name="format" /> は null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> が空の文字列 ("") です。 または <paramref name="input" /> が、日付と時刻の有効な文字列形式を格納していません。 または <paramref name="format" /> が空の文字列です。 または 時間の部分と、<paramref name="input" /> の午前/午後の識別文字が一致しません。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
      <returns>
        <paramref name="format" />、<paramref name="formatProvider" />、および <paramref name="styles" /> の各パラメーターで指定された書式に従って表記された、<paramref name="input" /> パラメーターに含まれる日時と等価のオブジェクト。</returns>
      <param name="input">変換する日時を含む文字列。</param>
      <param name="format">
        <paramref name="input" /> の有効な書式を定義する書式指定子。</param>
      <param name="formatProvider">
        <paramref name="input" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="styles">
        <paramref name="input" /> に許可されている書式を示す列挙値のビットごとの組み合わせ。</param>
      <exception cref="T:System.ArgumentException">オフセットが 14 時間を超えているか、-14 時間未満です。 または <paramref name="styles" /> パラメーターにサポート外の値が含まれています。 または <paramref name="styles" /> パラメーターに指定された <see cref="T:System.Globalization.DateTimeStyles" /> 値の組み合わせが正しくありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は null です。 または <paramref name="format" /> は null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> が空の文字列 ("") です。 または <paramref name="input" /> が、日付と時刻の有効な文字列形式を格納していません。 または <paramref name="format" /> が空の文字列です。 または 時間の部分と、<paramref name="input" /> の午前/午後の識別文字が一致しません。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> に変換します。 文字列形式の書式は、指定されたいずれかの書式と完全に一致する必要があります。</summary>
      <returns>
        <paramref name="formats" />、<paramref name="formatProvider" />、<paramref name="styles" /> の各パラメーターで指定された書式に従って表記された、<paramref name="input" /> パラメーターに含まれる日時と等価のオブジェクト。</returns>
      <param name="input">変換する日時を含む文字列。</param>
      <param name="formats">
        <paramref name="input" /> の有効な書式を定義する書式指定子の配列。</param>
      <param name="formatProvider">
        <paramref name="input" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="styles">
        <paramref name="input" /> に許可されている書式を示す列挙値のビットごとの組み合わせ。</param>
      <exception cref="T:System.ArgumentException">オフセットが 14 時間を超えているか、-14 時間未満です。 または <paramref name="styles" /> にサポート外の値が含まれています。 または <paramref name="styles" /> パラメーターに指定された <see cref="T:System.Globalization.DateTimeStyles" /> 値の組み合わせが正しくありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> が空の文字列 ("") です。 または <paramref name="input" /> が、日付と時刻の有効な文字列形式を格納していません。 または <paramref name="formats" /> のいずれの要素にも有効な書式指定子が存在しません。 または 時間の部分と、<paramref name="input" /> の午前/午後の識別文字が一致しません。</exception>
    </member>
    <member name="P:System.DateTimeOffset.Second">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトが表す時刻の秒要素を取得します。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> オブジェクトの 0 ～ 59 の整数値で表される秒要素。</returns>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトから、特定の日時を表す <see cref="T:System.DateTimeOffset" /> 値を減算します。</summary>
      <returns>2 つの <see cref="T:System.DateTimeOffset" /> オブジェクト間の間隔を表すオブジェクト。</returns>
      <param name="value">減算する値を表すオブジェクト。</param>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.TimeSpan)">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトから、指定された時間間隔を減算します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトが表す日時から、<paramref name="value" /> が表す時間間隔を減算した値と等価なオブジェクト。</returns>
      <param name="value">減算する時間間隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MinValue" /> 未満です。 または 結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値を同じ型の別のオブジェクトと比較します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトが、<paramref name="obj" /> より小さいか大きい、または等しいかどうかを示す 32 ビット符号付き整数。 メソッドの戻り値の意味を次に示します。 
戻り値 	説明 	
0 より小さい値 	現在の <see cref="T:System.DateTimeOffset" /> オブジェクトは <paramref name="obj" /> よりも小さい (前の) 日時です。 	
0 	現在の <see cref="T:System.DateTimeOffset" /> オブジェクトは <paramref name="obj" /> と等価です。つまり、同じ特定の時点を表しています。 	
0 を超える値 	現在の <see cref="T:System.DateTimeOffset" /> オブジェクトは <paramref name="obj" /> よりも大きい (後の) 日時です。</returns>
      <param name="obj">現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="P:System.DateTimeOffset.Ticks">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの日時を表すタイマー刻み数を取得します。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> オブジェクトの時刻のタイマー刻みの数。</returns>
    </member>
    <member name="P:System.DateTimeOffset.TimeOfDay">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの時刻を取得します。</summary>
      <returns>現在の日付の午前 0 時からの経過時間。</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToFileTime">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値を Windows ファイル時刻に変換します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値を Windows ファイル時刻で表した値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">結果のファイル時刻は、世界協定時刻 (UTC) の西暦 1601 年 1 月 1 日深夜 12:00 時よりも前の日時を世界協定時刻 (UTC: Coordinated Universal Time)。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToLocalTime">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトを、現地時刻を表す <see cref="T:System.DateTimeOffset" /> オブジェクトに変換します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの日時を現地時刻に変換した値を表すオブジェクト。</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToOffset(System.TimeSpan)">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値を、オフセット値で指定された日時に変換します。</summary>
      <returns>元の <see cref="T:System.DateTimeOffset" /> オブジェクトと等しく (つまり、<see cref="M:System.DateTimeOffset.ToUniversalTime" /> メソッドで同じ特定の時点が返される)、かつ、<see cref="P:System.DateTimeOffset.Offset" /> プロパティが <paramref name="offset" /> に設定されているオブジェクト。</returns>
      <param name="offset">変換後の <see cref="T:System.DateTimeOffset" /> 値のオフセット。</param>
      <exception cref="T:System.ArgumentException">結果として得られる <see cref="T:System.DateTimeOffset" /> オブジェクトの <see cref="P:System.DateTimeOffset.DateTime" /> 値が <see cref="F:System.DateTimeOffset.MinValue" /> 未満です。 または 結果として得られる <see cref="T:System.DateTimeOffset" /> オブジェクトの <see cref="P:System.DateTimeOffset.DateTime" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> が -14 時間未満です。 または <paramref name="offset" /> が 14 時間を超えています。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値を等価の文字列形式に変換します。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> オブジェクトの文字列形式。文字列の末尾にオフセットが追加されています。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">日付と時刻が、現在のカルチャで使用する暦でサポートされている日付の範囲外です。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.IFormatProvider)">
      <summary>指定したカルチャ固有の書式情報を使用して、現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値をそれと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="formatProvider" /> により指定された、現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値の文字列形式。</returns>
      <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">日時が、<paramref name="formatProvider" /> で使用されている暦が対応している日付の範囲外です。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String)">
      <summary>指定した書式を使用して、現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値をそれと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> により指定された、現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値の文字列形式。</returns>
      <param name="format">書式指定文字列。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> の長さが 1 であり、<see cref="T:System.Globalization.DateTimeFormatInfo" /> に定義された標準書式指定文字のどれでもありません。 または <paramref name="format" /> に、有効なカスタム書式パターンが格納されていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">日付と時刻が、現在のカルチャで使用する暦でサポートされている日付の範囲外です。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)">
      <summary>指定した書式およびカルチャ固有の書式情報を使用して、現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値をそれと等価の文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> および <paramref name="provider" /> により指定された、現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値の文字列形式。</returns>
      <param name="format">書式指定文字列。</param>
      <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> の長さが 1 であり、<see cref="T:System.Globalization.DateTimeFormatInfo" /> に定義された標準書式指定文字のどれでもありません。 または <paramref name="format" /> に、有効なカスタム書式パターンが格納されていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">日時が、<paramref name="formatProvider" /> で使用されている暦が対応している日付の範囲外です。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToUniversalTime">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトを、世界協定時刻 (UTC) を表す <see cref="T:System.DateTimeOffset" /> 値に変換します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの日時を世界協定時刻 (UTC) に変換した値を表すオブジェクト。</returns>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)">
      <summary>指定した文字列形式の日時を対応する <see cref="T:System.DateTimeOffset" /> 表現に変換できるかどうかを試行し、変換に成功したかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="input" /> パラメーターが正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="input">変換する日時を含む文字列。</param>
      <param name="result">変換に成功した場合は、<paramref name="input" /> の日時と等しい <see cref="T:System.DateTimeOffset" /> 値が格納されます。変換に失敗した場合は <see cref="F:System.DateTimeOffset.MinValue" /> が格納されます。 <paramref name="input" /> パラメーターが null の場合、または、日付と時刻を表す有効な文字列形式が指定されていない場合、変換に失敗します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>指定した文字列形式の日時を対応する <see cref="T:System.DateTimeOffset" /> 表現に変換できるかどうかを試行し、変換に成功したかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="input" /> パラメーターが正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="input">変換する日時を含む文字列。</param>
      <param name="formatProvider">
        <paramref name="input" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="styles">
        <paramref name="input" /> に許可されている書式を示す列挙値のビットごとの組み合わせ。</param>
      <param name="result">変換に成功した場合は、<paramref name="input" /> の日時と等しい <see cref="T:System.DateTimeOffset" /> が格納されます。変換に失敗した場合は <see cref="F:System.DateTimeOffset.MinValue" /> が格納されます。 <paramref name="input" /> パラメーターが null の場合、または、日付と時刻を表す有効な文字列形式が指定されていない場合、変換に失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> に未定義の <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。 または <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> がサポートされていません。 または <paramref name="styles" /> に指定されている <see cref="T:System.Globalization.DateTimeStyles" /> 値の組み合わせが正しくありません。</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
      <returns>
        <paramref name="input" /> パラメーターが正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="input">変換する日時を含む文字列。</param>
      <param name="format">
        <paramref name="input" /> の必要な書式を定義する書式指定子。</param>
      <param name="formatProvider">
        <paramref name="input" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="styles">input に許可されている書式を示す列挙値のビットごとの組み合わせ。 通常指定する値は、None です。</param>
      <param name="result">変換に成功した場合は、<paramref name="input" /> の日時と等しい <see cref="T:System.DateTimeOffset" /> 値が格納されます。変換に失敗した場合は <see cref="F:System.DateTimeOffset.MinValue" /> が格納されます。 <paramref name="input" /> パラメーターが null の場合、または、指定された日時の文字列形式が <paramref name="format" /> と <paramref name="provider" /> で定義された書式に従っていない場合、変換に失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> に未定義の <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。 または <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> がサポートされていません。 または <paramref name="styles" /> に指定されている <see cref="T:System.Globalization.DateTimeStyles" /> 値の組み合わせが正しくありません。</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>指定した書式の配列、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> に変換します。 文字列形式の書式は、指定されたいずれかの書式と完全に一致する必要があります。</summary>
      <returns>
        <paramref name="input" /> パラメーターが正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="input">変換する日時を含む文字列。</param>
      <param name="formats">
        <paramref name="input" /> の有効な書式を定義する配列。</param>
      <param name="formatProvider">
        <paramref name="input" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="styles">input に許可されている書式を示す列挙値のビットごとの組み合わせ。 通常指定する値は、None です。</param>
      <param name="result">変換に成功した場合は、<paramref name="input" /> の日時と等しい <see cref="T:System.DateTimeOffset" /> 値が格納されます。変換に失敗した場合は <see cref="F:System.DateTimeOffset.MinValue" /> が格納されます。 <paramref name="input" /> が有効な文字列形式の日時を含んでいない場合、<paramref name="format" /> で定義された書式に従っていない場合、または、<paramref name="formats" /> が null の場合、変換に失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> に未定義の <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。 または <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> がサポートされていません。 または <paramref name="styles" /> に指定されている <see cref="T:System.Globalization.DateTimeStyles" /> 値の組み合わせが正しくありません。</exception>
    </member>
    <member name="P:System.DateTimeOffset.UtcDateTime">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの世界協定時刻 (UTC) の日時を表す <see cref="T:System.DateTime" /> 値を取得します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの世界協定時刻 (UTC) の日時。</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcNow">
      <summary>日時とオフセットがそれぞれ現在の世界協定時刻 (UTC) および <see cref="F:System.TimeSpan.Zero" /> に設定された <see cref="T:System.DateTimeOffset" /> オブジェクトを取得します。</summary>
      <returns>日時とオフセットがぞれぞれ現在の世界協定時刻 (UTC) および <see cref="F:System.TimeSpan.Zero" /> に設定されたオブジェクト。</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcTicks">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの世界協定時刻 (UTC) での日時を表すタイマー刻み数を取得します。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> オブジェクトの世界協定時刻 (UTC) でのタイマー刻みの数。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Year">
      <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表される日付の年要素を取得します。</summary>
      <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの 0 ～ 9999 の整数値で表される年要素。</returns>
    </member>
    <member name="T:System.DayOfWeek">
      <summary>曜日を指定します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.DayOfWeek.Friday">
      <summary>金曜日を示します。</summary>
    </member>
    <member name="F:System.DayOfWeek.Monday">
      <summary>月曜日を示します。</summary>
    </member>
    <member name="F:System.DayOfWeek.Saturday">
      <summary>土曜日を示します。</summary>
    </member>
    <member name="F:System.DayOfWeek.Sunday">
      <summary>日曜日を示します。</summary>
    </member>
    <member name="F:System.DayOfWeek.Thursday">
      <summary>木曜日を示します。</summary>
    </member>
    <member name="F:System.DayOfWeek.Tuesday">
      <summary>火曜日を示します。</summary>
    </member>
    <member name="F:System.DayOfWeek.Wednesday">
      <summary>水曜日を示します。</summary>
    </member>
    <member name="T:System.Decimal">
      <summary>10 進数を表します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.#ctor(System.Double)">
      <summary>
        <see cref="T:System.Decimal" /> の新しいインスタンスを作成し、その値を、指定した倍精度浮動小数点数に設定します。</summary>
      <param name="value">
        <see cref="T:System.Decimal" /> として表す値。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Decimal.MaxValue" /> より大きい値か、<see cref="F:System.Decimal.MinValue" /> より小さい値です。 または <paramref name="value" /> が <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.PositiveInfinity" />、または <see cref="F:System.Double.NegativeInfinity" /> です。</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32)">
      <summary>
        <see cref="T:System.Decimal" /> の新しいインスタンスを作成し、その値を、指定した 32 ビット符号付き整数に設定します。</summary>
      <param name="value">
        <see cref="T:System.Decimal" /> として表す値。</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)">
      <summary>
        <see cref="T:System.Decimal" /> の新しいインスタンスの値を、そのインスタンスの構成部分を指定するパラメーターに従って初期化します。</summary>
      <param name="lo">96 ビット整数の下位 32 ビット。</param>
      <param name="mid">96 ビット整数の中位 32 ビット。</param>
      <param name="hi">96 ビット整数の上位 32 ビット。</param>
      <param name="isNegative">負の数を示す場合は true。正の数を示す場合は false。</param>
      <param name="scale">0 から 28 までの 10 の指数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scale" /> が 28 より大きい値です。</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32[])">
      <summary>
        <see cref="T:System.Decimal" /> の新しいインスタンスの値を、指定した配列に格納されている、バイナリ形式の 10 進値に初期化します。</summary>
      <param name="bits">10 進値形式を格納している 32 ビット符号付き整数の配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bits" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bits" /> の長さが 4 ではありません。 または <paramref name="bits" /> の 10 進値形式が有効ではありません。</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int64)">
      <summary>
        <see cref="T:System.Decimal" /> の新しいインスタンスを作成し、その値を、指定した 64 ビット符号付き整数に設定します。</summary>
      <param name="value">
        <see cref="T:System.Decimal" /> として表す値。</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Single)">
      <summary>
        <see cref="T:System.Decimal" /> の新しいインスタンスを作成し、その値を、指定した単精度浮動小数点数に設定します。</summary>
      <param name="value">
        <see cref="T:System.Decimal" /> として表す値。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Decimal.MaxValue" /> より大きい値か、<see cref="F:System.Decimal.MinValue" /> より小さい値です。 または <paramref name="value" /> が <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.PositiveInfinity" />、または <see cref="F:System.Single.NegativeInfinity" /> です。</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt32)">
      <summary>
        <see cref="T:System.Decimal" /> の新しいインスタンスを作成して、その値を、指定した 32 ビット符号なし整数に設定します。</summary>
      <param name="value">
        <see cref="T:System.Decimal" /> として表す値。</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt64)">
      <summary>
        <see cref="T:System.Decimal" /> の新しいインスタンスを作成して、その値を、指定した 64 ビット符号なし整数に設定します。</summary>
      <param name="value">
        <see cref="T:System.Decimal" /> として表す値。</param>
    </member>
    <member name="M:System.Decimal.Add(System.Decimal,System.Decimal)">
      <summary>指定した 2 つの <see cref="T:System.Decimal" /> 値を加算します。</summary>
      <returns>
        <paramref name="d1" /> と <paramref name="d2" /> の合計。</returns>
      <param name="d1">加算する 1 番目の値。</param>
      <param name="d2">加算する 2 番目の値。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d1" /> と <paramref name="d2" /> の和が、<see cref="F:System.Decimal.MinValue" /> より小さい値か、<see cref="F:System.Decimal.MaxValue" /> より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Ceiling(System.Decimal)">
      <summary>指定した 10 進数以上の数のうち、最小の整数値を返します。</summary>
      <returns>
        <paramref name="d" /> パラメーターの値以上の最小の整数値。 このメソッドは、整数型ではなく <see cref="T:System.Decimal" /> を返します。</returns>
      <param name="d">10 進数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Compare(System.Decimal,System.Decimal)">
      <summary>指定した 2 つの <see cref="T:System.Decimal" /> 値を比較します。</summary>
      <returns>
        <paramref name="d1" /> と <paramref name="d2" /> の相対値を示す符号付き数値。 
戻り値 	説明 	
0 より小さい値 	<paramref name="d1" /> が <paramref name="d2" /> より小さい。 	
0 	<paramref name="d1" /> と <paramref name="d2" /> が等しい。 	
0 を超える値 	<paramref name="d1" /> が <paramref name="d2" /> より大きくなっています。</returns>
      <param name="d1">比較する最初の値です。</param>
      <param name="d2">比較する 2 番目の値です。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.CompareTo(System.Decimal)">
      <summary>指定した <see cref="T:System.Decimal" /> オブジェクトとこのインスタンスを比較し、これらの相対値の比較を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。 
戻り値 	説明 	
0 より小さい値 	このインスタンスは、<paramref name="value" /> よりも小さくなっています。 	
0 	このインスタンスは <paramref name="value" /> と等価です。 	
0 を超える値 	このインスタンスは <paramref name="value" /> よりも大きくなっています。</returns>
      <param name="value">このインスタンスと比較するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Decimal.Divide(System.Decimal,System.Decimal)">
      <summary>指定した 2 つの <see cref="T:System.Decimal" /> 値を除算します。</summary>
      <returns>
        <paramref name="d1" /> を <paramref name="d2" /> で除算した結果。</returns>
      <param name="d1">被除数。</param>
      <param name="d2">除数。</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> が 0 です。</exception>
      <exception cref="T:System.OverflowException">戻り値 (商) が <see cref="F:System.Decimal.MinValue" /> より小さい値か、<see cref="F:System.Decimal.MaxValue" /> より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal)">
      <summary>このインスタンスと指定した <see cref="T:System.Decimal" /> オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="value" /> がこのインスタンスに等しい場合は true。それ以外の場合は false。</returns>
      <param name="value">このインスタンスと比較するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal,System.Decimal)">
      <summary>
        <see cref="T:System.Decimal" /> の指定した 2 つのインスタンスが同じ値を表しているかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="d1" /> と <paramref name="d2" /> が等しい場合は true。それ以外の場合は false。</returns>
      <param name="d1">比較する最初の値です。</param>
      <param name="d2">比較する 2 番目の値です。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Equals(System.Object)">
      <summary>このインスタンスと指定した <see cref="T:System.Object" /> が同じ型と値を表しているかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="value" /> が <see cref="T:System.Decimal" /> で、このインスタンスに等しい場合は true。それ以外の場合は false。</returns>
      <param name="value">このインスタンスと比較するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Decimal.Floor(System.Decimal)">
      <summary>指定した <see cref="T:System.Decimal" /> 数を、負の無限大方向の近似整数に丸めます。</summary>
      <returns>
        <paramref name="d" /> に小数部がある場合は、負の無限大方向の <paramref name="d" /> より小さい、次の <see cref="T:System.Decimal" /> 整数。 または <paramref name="d" /> に小数部がない場合は、<paramref name="d" /> がそのまま返されます。 このメソッドは、整数型 <see cref="T:System.Decimal" /> を返します。</returns>
      <param name="d">丸める値。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.GetBits(System.Decimal)">
      <summary>指定した <see cref="T:System.Decimal" /> のインスタンスの値を、それと等価のバイナリ形式に変換します。</summary>
      <returns>
        <paramref name="d" /> のバイナリ形式を格納している 4 要素長の 32 ビット符号付き整数配列。</returns>
      <param name="d">変換する値。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.GetHashCode">
      <summary>対象のインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Decimal.MaxValue">
      <summary>
        <see cref="T:System.Decimal" /> の最大有効値を表します。 このフィールドは定数であり、読み取り専用です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Decimal.MinusOne">
      <summary>負の 1 (-1) を表します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Decimal.MinValue">
      <summary>
        <see cref="T:System.Decimal" /> の最小有効値を表します。 このフィールドは定数であり、読み取り専用です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Multiply(System.Decimal,System.Decimal)">
      <summary>指定した 2 つの <see cref="T:System.Decimal" /> 値を乗算します。</summary>
      <returns>
        <paramref name="d1" /> と <paramref name="d2" /> を乗算した結果。</returns>
      <param name="d1">被乗数。</param>
      <param name="d2">乗数。</param>
      <exception cref="T:System.OverflowException">戻り値が <see cref="F:System.Decimal.MinValue" /> より小さい値か、<see cref="F:System.Decimal.MaxValue" /> より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Negate(System.Decimal)">
      <summary>指定した <see cref="T:System.Decimal" /> 値に -1 を乗算した結果を返します。</summary>
      <returns>値が <paramref name="d" /> で、符号が逆の 10 進数。 または <paramref name="d" /> が 0 の場合は 0。</returns>
      <param name="d">否定する値。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Decimal.One">
      <summary>数値 1 を表します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Addition(System.Decimal,System.Decimal)">
      <summary>指定した 2 つの <see cref="T:System.Decimal" /> 値を加算します。</summary>
      <returns>
        <paramref name="d1" /> と <paramref name="d2" /> の加算結果。</returns>
      <param name="d1">加算する 1 番目の値。</param>
      <param name="d2">加算する 2 番目の値。</param>
      <exception cref="T:System.OverflowException">戻り値が <see cref="F:System.Decimal.MinValue" /> より小さい値か、<see cref="F:System.Decimal.MaxValue" /> より大きい値です。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Decrement(System.Decimal)">
      <summary>
        <see cref="T:System.Decimal" /> オペランドを 1 だけデクリメントします。</summary>
      <returns>1 だけデクリメントした <paramref name="d" /> の値。</returns>
      <param name="d">デクリメントする値。</param>
      <exception cref="T:System.OverflowException">戻り値が <see cref="F:System.Decimal.MinValue" /> より小さい値か、<see cref="F:System.Decimal.MaxValue" /> より大きい値です。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Division(System.Decimal,System.Decimal)">
      <summary>指定した 2 つの <see cref="T:System.Decimal" /> 値を除算します。</summary>
      <returns>
        <paramref name="d1" /> を <paramref name="d2" /> で除算した結果。</returns>
      <param name="d1">被除数。</param>
      <param name="d2">除数。</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> が 0 です。</exception>
      <exception cref="T:System.OverflowException">戻り値が <see cref="F:System.Decimal.MinValue" /> より小さい値か、<see cref="F:System.Decimal.MaxValue" /> より大きい値です。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Equality(System.Decimal,System.Decimal)">
      <summary>指定された 2 つの <see cref="T:System.Decimal" /> 値が等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="d1" /> と <paramref name="d2" /> が等しい場合は true。それ以外の場合は false。</returns>
      <param name="d1">比較する最初の値です。</param>
      <param name="d2">比較する 2 番目の値です。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Single">
      <summary>
        <see cref="T:System.Decimal" /> から単精度浮動小数点数への明示的な変換を定義します。</summary>
      <returns>変換された <see cref="T:System.Decimal" /> を表す単精度浮動小数点数。</returns>
      <param name="value">変換する値。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.SByte">
      <summary>
        <see cref="T:System.Decimal" /> から 8 ビット符号付き整数への明示的な変換を定義します。</summary>
      <returns>変換された <see cref="T:System.Decimal" /> を表す 8 ビット符号付き整数。</returns>
      <param name="value">変換する値。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.SByte.MinValue" /> より小さい値か、<see cref="F:System.SByte.MaxValue" /> より大きい値です。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int64">
      <summary>
        <see cref="T:System.Decimal" /> から 64 ビット符号付き整数への明示的な変換を定義します。</summary>
      <returns>変換された <see cref="T:System.Decimal" /> を表す 64 ビット符号付き整数。</returns>
      <param name="value">変換する値。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Int64.MinValue" /> より小さい値か、<see cref="F:System.Int64.MaxValue" /> より大きい値です。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt64">
      <summary>
        <see cref="T:System.Decimal" /> から 64 ビット符号なし整数への明示的な変換を定義します。</summary>
      <returns>変換された <see cref="T:System.Decimal" /> を表す 64 ビット符号なし整数。</returns>
      <param name="value">変換する値。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が負の値であるか、<see cref="F:System.UInt64.MaxValue" /> よりも大きい値です。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt32">
      <summary>
        <see cref="T:System.Decimal" /> から 32 ビット符号なし整数への明示的な変換を定義します。</summary>
      <returns>変換された <see cref="T:System.Decimal" /> を表す 32 ビット符号なし整数。</returns>
      <param name="value">変換する値。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が負の値であるか、<see cref="F:System.UInt32.MaxValue" /> よりも大きい値です。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt16">
      <summary>
        <see cref="T:System.Decimal" /> から 16 ビット符号なし整数への明示的な変換を定義します。</summary>
      <returns>変換された <see cref="T:System.Decimal" /> を表す 16 ビット符号なし整数。</returns>
      <param name="value">変換する値。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.UInt16.MaxValue" /> より大きい値か、<see cref="F:System.UInt16.MinValue" /> より小さい値です。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Byte">
      <summary>
        <see cref="T:System.Decimal" /> から 8 ビット符号なし整数への明示的な変換を定義します。</summary>
      <returns>変換された <see cref="T:System.Decimal" /> を表す 8 ビット符号なし整数。</returns>
      <param name="value">変換する値。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Byte.MinValue" /> より小さい値か、<see cref="F:System.Byte.MaxValue" /> より大きい値です。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Char">
      <summary>
        <see cref="T:System.Decimal" /> から Unicode 文字への明示的な変換を定義します。</summary>
      <returns>変換された <see cref="T:System.Decimal" /> を表す Unicode 文字。</returns>
      <param name="value">変換する値。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Char.MinValue" /> より小さい値か、<see cref="F:System.Char.MaxValue" /> より大きい値です。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Double">
      <summary>
        <see cref="T:System.Decimal" /> から倍精度浮動小数点数への明示的な変換を定義します。</summary>
      <returns>変換された <see cref="T:System.Decimal" /> を表す倍精度浮動小数点数。</returns>
      <param name="value">変換する値。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int32">
      <summary>
        <see cref="T:System.Decimal" /> から 32 ビット符号付き整数への明示的な変換を定義します。</summary>
      <returns>変換された <see cref="T:System.Decimal" /> を表す 32 ビット符号付き整数。</returns>
      <param name="value">変換する値。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Int32.MinValue" /> より小さい値か、<see cref="F:System.Int32.MaxValue" /> より大きい値です。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int16">
      <summary>
        <see cref="T:System.Decimal" /> から 16 ビット符号付き整数への明示的な変換を定義します。</summary>
      <returns>変換された <see cref="T:System.Decimal" /> を表す 16 ビット符号付き整数。</returns>
      <param name="value">変換する値。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Int16.MinValue" /> より小さい値か、<see cref="F:System.Int16.MaxValue" /> より大きい値です。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Double)~System.Decimal">
      <summary>倍精度浮動小数点数から <see cref="T:System.Decimal" /> への明示的な変換を定義します。</summary>
      <returns>変換された倍精度浮動小数点数。</returns>
      <param name="value">変換する倍精度浮動小数点数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Decimal.MinValue" /> より小さい値か、<see cref="F:System.Decimal.MaxValue" /> より大きい値です。 または <paramref name="value" /> が <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.PositiveInfinity" />、または <see cref="F:System.Double.NegativeInfinity" /> です。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Single)~System.Decimal">
      <summary>単精度浮動小数点数から <see cref="T:System.Decimal" /> への明示的な変換を定義します。</summary>
      <returns>変換された単精度浮動小数点数。</returns>
      <param name="value">変換する単精度浮動小数点数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Decimal.MinValue" /> より小さい値か、<see cref="F:System.Decimal.MaxValue" /> より大きい値です。 または <paramref name="value" /> が <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.PositiveInfinity" />、または <see cref="F:System.Single.NegativeInfinity" /> です。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)">
      <summary>指定した <see cref="T:System.Decimal" /> が、指定したもう 1 つの <see cref="T:System.Decimal" /> より大きいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="d1" /> が <paramref name="d2" /> より大きい場合は true。それ以外の場合は false。</returns>
      <param name="d1">比較する最初の値です。</param>
      <param name="d2">比較する 2 番目の値です。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)">
      <summary>指定した <see cref="T:System.Decimal" /> が、指定したもう 1 つの <see cref="T:System.Decimal" /> 以上かどうかを示す値を返します。</summary>
      <returns>
        <paramref name="d1" /> が <paramref name="d2" /> 以上の場合は true。それ以外の場合は false。</returns>
      <param name="d1">比較する最初の値です。</param>
      <param name="d2">比較する 2 番目の値です。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Byte)~System.Decimal">
      <summary>8 ビット符号なし整数から <see cref="T:System.Decimal" /> への明示的な変換を定義します。</summary>
      <returns>変換された 8 ビット符号なし整数。</returns>
      <param name="value">変換する 8 ビット符号なし整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Char)~System.Decimal">
      <summary>Unicode 文字 から <see cref="T:System.Decimal" /> への明示的な変換を定義します。</summary>
      <returns>変換された Unicode 文字。</returns>
      <param name="value">変換する Unicode 文字。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int16)~System.Decimal">
      <summary>16 ビット符号付き整数から <see cref="T:System.Decimal" /> への明示的な変換を定義します。</summary>
      <returns>変換された 16 ビット符号付き整数。</returns>
      <param name="value">変換する 16 ビット符号付き整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int32)~System.Decimal">
      <summary>32 ビット符号付き整数から <see cref="T:System.Decimal" /> への明示的な変換を定義します。</summary>
      <returns>変換された 32 ビット符号付き整数。</returns>
      <param name="value">変換する 32 ビット符号付き整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int64)~System.Decimal">
      <summary>64 ビット符号付き整数から <see cref="T:System.Decimal" /> への明示的な変換を定義します。</summary>
      <returns>変換された 64 ビット符号付き整数。</returns>
      <param name="value">変換する 64 ビット符号付き整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.SByte)~System.Decimal">
      <summary>8 ビット符号付き整数から <see cref="T:System.Decimal" /> への明示的な変換を定義します。</summary>
      <returns>変換された 8 ビット符号付き整数。</returns>
      <param name="value">変換する 8 ビット符号付き整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt16)~System.Decimal">
      <summary>16 ビット符号なし整数から <see cref="T:System.Decimal" /> への明示的な変換を定義します。</summary>
      <returns>変換された 16 ビット符号なし整数。</returns>
      <param name="value">変換する 16 ビット符号なし整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt32)~System.Decimal">
      <summary>32 ビット符号なし整数から <see cref="T:System.Decimal" /> への明示的な変換を定義します。</summary>
      <returns>変換された 32 ビット符号なし整数。</returns>
      <param name="value">変換する 32 ビット符号なし整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt64)~System.Decimal">
      <summary>64 ビット符号なし整数から <see cref="T:System.Decimal" /> への明示的な変換を定義します。</summary>
      <returns>変換された 64 ビット符号なし整数。</returns>
      <param name="value">変換する 64 ビット符号なし整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Increment(System.Decimal)">
      <summary>
        <see cref="T:System.Decimal" /> オペランドを 1 だけインクリメントします。</summary>
      <returns>1 だけインクリメントした <paramref name="d" /> の値。</returns>
      <param name="d">インクリメントする値。</param>
      <exception cref="T:System.OverflowException">戻り値が <see cref="F:System.Decimal.MinValue" /> より小さい値か、<see cref="F:System.Decimal.MaxValue" /> より大きい値です。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Inequality(System.Decimal,System.Decimal)">
      <summary>2 つの <see cref="T:System.Decimal" /> オブジェクトの値が異なるかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="d1" /> と <paramref name="d2" /> が等しくない場合は true。それ以外の場合は false。</returns>
      <param name="d1">比較する最初の値です。</param>
      <param name="d2">比較する 2 番目の値です。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_LessThan(System.Decimal,System.Decimal)">
      <summary>指定した <see cref="T:System.Decimal" /> が、指定したもう 1 つの <see cref="T:System.Decimal" /> より小さいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="d1" /> が <paramref name="d2" /> より小さい場合は true。それ以外の場合は false。</returns>
      <param name="d1">比較する最初の値です。</param>
      <param name="d2">比較する 2 番目の値です。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)">
      <summary>指定した <see cref="T:System.Decimal" /> が、指定したもう 1 つの <see cref="T:System.Decimal" /> 以下であるかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="d1" /> が <paramref name="d2" /> 以下の場合は true。それ以外の場合は false。</returns>
      <param name="d1">比較する最初の値です。</param>
      <param name="d2">比較する 2 番目の値です。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Modulus(System.Decimal,System.Decimal)">
      <summary>指定した 2 つの <see cref="T:System.Decimal" /> 値を除算した結果の剰余を返します。</summary>
      <returns>
        <paramref name="d1" /> を <paramref name="d2" /> で除算した結果の剰余。</returns>
      <param name="d1">被除数。</param>
      <param name="d2">除数。</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> は zero なので、</exception>
      <exception cref="T:System.OverflowException">戻り値が <see cref="F:System.Decimal.MinValue" /> より小さい値か、<see cref="F:System.Decimal.MaxValue" /> より大きい値です。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Multiply(System.Decimal,System.Decimal)">
      <summary>指定した 2 つの <see cref="T:System.Decimal" /> 値を乗算します。</summary>
      <returns>
        <paramref name="d1" /> に <paramref name="d2" /> を乗算した結果。</returns>
      <param name="d1">乗算する 1 番目の値。</param>
      <param name="d2">乗算する 2 番目の値。</param>
      <exception cref="T:System.OverflowException">戻り値が <see cref="F:System.Decimal.MinValue" /> より小さい値か、<see cref="F:System.Decimal.MaxValue" /> より大きい値です。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Subtraction(System.Decimal,System.Decimal)">
      <summary>指定した 2 つの <see cref="T:System.Decimal" /> 値を減算します。</summary>
      <returns>
        <paramref name="d1" /> から <paramref name="d2" /> を減算した結果。</returns>
      <param name="d1">被減数。</param>
      <param name="d2">減数。</param>
      <exception cref="T:System.OverflowException">戻り値が <see cref="F:System.Decimal.MinValue" /> より小さい値か、<see cref="F:System.Decimal.MaxValue" /> より大きい値です。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_UnaryNegation(System.Decimal)">
      <summary>指定した <see cref="T:System.Decimal" /> オペランドの値を無効にします。</summary>
      <returns>
        <paramref name="d" /> に -1 を乗算した結果。</returns>
      <param name="d">否定する値。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_UnaryPlus(System.Decimal)">
      <summary>
        <see cref="T:System.Decimal" /> オペランドの値 (オペランドの符号は不変) を返します。</summary>
      <returns>オペランドの値 <paramref name="d" />。</returns>
      <param name="d">返すオペランド。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.Parse(System.String)">
      <summary>数値の文字列形式を、それと等価の <see cref="T:System.Decimal" /> に変換します。</summary>
      <returns>
        <paramref name="s" /> に指定されている数値と等価。</returns>
      <param name="s">変換する数値の文字列形式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の形式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Decimal.MinValue" /> 未満の数値か、<see cref="F:System.Decimal.MaxValue" /> より大きい数値を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>指定のスタイルで表現された数値の文字列形式を、それと等価な <see cref="T:System.Decimal" /> に変換します。</summary>
      <returns>
        <paramref name="style" /> で指定されたとおりの、<paramref name="s" /> に格納されている数値と等価の <see cref="T:System.Decimal" />。</returns>
      <param name="s">変換する数値の文字列形式。</param>
      <param name="style">
        <paramref name="s" /> で使用可能なスタイル要素を示す、<see cref="T:System.Globalization.NumberStyles" /> 値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Number" /> です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の形式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Decimal.MinValue" /> 未満の数値か、<see cref="F:System.Decimal.MaxValue" /> より大きい数値を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>指定したスタイルとカルチャ固有の書式を使用して、文字列形式の数値をそれと等価の <see cref="T:System.Decimal" /> に変換します。</summary>
      <returns>
        <paramref name="style" /> と <paramref name="provider" /> で指定されたとおりの、<paramref name="s" /> に格納されている数値と等価の <see cref="T:System.Decimal" />。</returns>
      <param name="s">変換する数値の文字列形式。</param>
      <param name="style">
        <paramref name="s" /> で使用可能なスタイル要素を示す、<see cref="T:System.Globalization.NumberStyles" /> 値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Number" /> です。</param>
      <param name="provider">
        <paramref name="s" /> の書式に関するカルチャ固有の情報を提供する <see cref="T:System.IFormatProvider" /> オブジェクト。</param>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の形式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Decimal.MinValue" /> 未満の数値か、<see cref="F:System.Decimal.MaxValue" /> より大きい数値を表しています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.IFormatProvider)">
      <summary>指定したカルチャ固有の書式情報を使用して、文字列形式の数値をそれと等価の <see cref="T:System.Decimal" /> に変換します。</summary>
      <returns>
        <paramref name="provider" /> で指定されたとおりの、<paramref name="s" /> に格納されている数値と等価の <see cref="T:System.Decimal" />。</returns>
      <param name="s">変換する数値の文字列形式。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の解析情報を提供する <see cref="T:System.IFormatProvider" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の書式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Decimal.MinValue" /> 未満の数値か、<see cref="F:System.Decimal.MaxValue" /> より大きい数値を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Remainder(System.Decimal,System.Decimal)">
      <summary>2 つの <see cref="T:System.Decimal" /> 値の除算後の剰余を計算します。</summary>
      <returns>
        <paramref name="d1" /> を <paramref name="d2" /> で割った結果生じた剰余。</returns>
      <param name="d1">被除数。</param>
      <param name="d2">除数。</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> が 0 です。</exception>
      <exception cref="T:System.OverflowException">戻り値が <see cref="F:System.Decimal.MinValue" /> より小さい値か、<see cref="F:System.Decimal.MaxValue" /> より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Subtract(System.Decimal,System.Decimal)">
      <summary>指定した <see cref="T:System.Decimal" /> 値から、指定したもう 1 つの値を減算します。</summary>
      <returns>
        <paramref name="d1" /> から <paramref name="d2" /> を減算した結果。</returns>
      <param name="d1">被減数。</param>
      <param name="d2">減数。</param>
      <exception cref="T:System.OverflowException">戻り値が <see cref="F:System.Decimal.MinValue" /> より小さい値か、<see cref="F:System.Decimal.MaxValue" /> より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.System#IComparable#CompareTo(System.Object)">
      <summary>現在のインスタンスを同じ型の別のオブジェクトと比較し、現在のインスタンスの並べ替え順序での位置が、比較対象のオブジェクトと比べて前か、後か、または同じかを示す整数を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対順序を示す符号付き整数。 
戻り値 	説明 	
0 より小さい値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも前です。 	
0 	このインスタンスは、並べ替え順序で、<paramref name="value" /> と同じ位置に出現します。 	
0 を超える値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも後ろです。 または <paramref name="value" /> は null なので、</returns>
      <param name="value">このインスタンスと比較するオブジェクトか、null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が <see cref="T:System.Decimal" /> ではありません。</exception>
    </member>
    <member name="M:System.Decimal.ToByte(System.Decimal)">
      <summary>指定した <see cref="T:System.Decimal" /> の値を、等価の 8 ビット符号なし整数に変換します。</summary>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号なし整数。</returns>
      <param name="value">変換する 10 進数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Byte.MinValue" /> より小さい値か、<see cref="F:System.Byte.MaxValue" /> より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToDouble(System.Decimal)">
      <summary>指定した <see cref="T:System.Decimal" /> の値を、それと等価の倍精度浮動小数点数に変換します。</summary>
      <returns>
        <paramref name="d" /> と等価の倍精度浮動小数点数。</returns>
      <param name="d">変換する 10 進数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToInt16(System.Decimal)">
      <summary>指定した <see cref="T:System.Decimal" /> の値を、等価の 16 ビット符号付き整数に変換します。</summary>
      <returns>
        <paramref name="value" /> と等価の 16 ビット符号付き整数。</returns>
      <param name="value">変換する 10 進数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Int16.MinValue" /> より小さい値か、<see cref="F:System.Int16.MaxValue" /> より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToInt32(System.Decimal)">
      <summary>指定した <see cref="T:System.Decimal" /> の値を、等価の 32 ビット符号付き整数に変換します。</summary>
      <returns>
        <paramref name="d" /> の値と等価の 32 ビット符号付き整数。</returns>
      <param name="d">変換する 10 進数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> が <see cref="F:System.Int32.MinValue" /> より小さい値か、<see cref="F:System.Int32.MaxValue" /> より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToInt64(System.Decimal)">
      <summary>指定した <see cref="T:System.Decimal" /> の値を、等価の 64 ビット符号付き整数に変換します。</summary>
      <returns>
        <paramref name="d" /> の値と等価の 64 ビット符号付き整数。</returns>
      <param name="d">変換する 10 進数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> が <see cref="F:System.Int64.MinValue" /> より小さい値か、<see cref="F:System.Int64.MaxValue" /> より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToSByte(System.Decimal)">
      <summary>指定した <see cref="T:System.Decimal" /> の値を、等価の 8 ビット符号付き整数に変換します。</summary>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号付き整数。</returns>
      <param name="value">変換する 10 進数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.SByte.MinValue" /> より小さい値か、<see cref="F:System.SByte.MaxValue" /> より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToSingle(System.Decimal)">
      <summary>指定した <see cref="T:System.Decimal" /> の値を、それと等価の単精度浮動小数点数に変換します。</summary>
      <returns>
        <paramref name="d" /> の値と等価な単精度浮動小数点数。</returns>
      <param name="d">変換する 10 進数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToString">
      <summary>このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
      <returns>このインスタンスの値を表す文字列。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToString(System.IFormatProvider)">
      <summary>このインスタンスの数値を、指定したカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToString(System.String)">
      <summary>指定した書式を使用して、このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="format">標準またはカスタムの数値書式指定文字列 (「解説」を参照)。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> が無効です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToString(System.String,System.IFormatProvider)">
      <summary>このインスタンスの数値を、指定した書式およびカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> および <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="format">数値書式指定文字列 (「解説」を参照してください)。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> が無効です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToUInt16(System.Decimal)">
      <summary>指定した <see cref="T:System.Decimal" /> の値を、等価の 16 ビット符号なし整数に変換します。</summary>
      <returns>
        <paramref name="value" /> の値と等価な 16 ビット符号なし整数。</returns>
      <param name="value">変換する 10 進数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.UInt16.MaxValue" /> より大きい値か、<see cref="F:System.UInt16.MinValue" /> より小さい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToUInt32(System.Decimal)">
      <summary>指定した <see cref="T:System.Decimal" /> の値を、等価の 32 ビット符号なし整数に変換します。</summary>
      <returns>
        <paramref name="d" /> の値と等価の 32 ビット符号なし整数。</returns>
      <param name="d">変換する 10 進数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> が負の値であるか、<see cref="F:System.UInt32.MaxValue" /> よりも大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToUInt64(System.Decimal)">
      <summary>指定した <see cref="T:System.Decimal" /> の値を、等価の 64 ビット符号なし整数に変換します。</summary>
      <returns>
        <paramref name="d" /> の値と等価の 64 ビット符号なし整数。</returns>
      <param name="d">変換する 10 進数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> が負の値であるか、<see cref="F:System.UInt64.MaxValue" /> よりも大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Truncate(System.Decimal)">
      <summary>指定した <see cref="T:System.Decimal" /> の整数の桁を返します。小数の桁は破棄されます。</summary>
      <returns>
        <paramref name="d" /> を 0 方向の近似整数に丸めた結果。</returns>
      <param name="d">切り捨てる 10 進数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Decimal@)">
      <summary>数値の文字列形式を、それと等価の <see cref="T:System.Decimal" /> に変換します。 戻り値は、変換が成功したか失敗したかを示します。</summary>
      <returns>
        <paramref name="s" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">変換する数値の文字列形式。</param>
      <param name="result">変換が成功した場合は、このメソッドから制御が返されるときに、<paramref name="s" /> に格納された数値と等価の <see cref="T:System.Decimal" /> 数を格納します。変換に失敗した場合は 0 を格納します。 <paramref name="s" /> パラメーターが null または <see cref="F:System.String.Empty" /> であるか、有効な書式の数値ではない、または <see cref="F:System.Decimal.MinValue" /> より小さいか <see cref="F:System.Decimal.MaxValue" /> より大きい数値を表している場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)">
      <summary>指定したスタイルとカルチャ固有の書式を使用して、文字列形式の数値をそれと等価の <see cref="T:System.Decimal" /> に変換します。 戻り値は、変換が成功したか失敗したかを示します。</summary>
      <returns>
        <paramref name="s" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">変換する数値の文字列形式。</param>
      <param name="style">
        <paramref name="s" /> に許可されている書式を示す列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Number" /> です。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の解析情報を提供するオブジェクト。</param>
      <param name="result">変換が成功した場合は、このメソッドから制御が返されるときに、<paramref name="s" /> に格納された数値と等価の <see cref="T:System.Decimal" /> 数を格納します。変換に失敗した場合は 0 を格納します。 <paramref name="s" /> パラメーターが null または <see cref="F:System.String.Empty" /> であるか、<paramref name="style" /> に準拠した形式ではない、または <see cref="F:System.Decimal.MinValue" /> より小さいか <see cref="F:System.Decimal.MaxValue" /> より大きい数値を表している場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Decimal.Zero">
      <summary>数値 0 を表します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Delegate">
      <summary>静的メソッドまたはクラス インスタンスとそのクラスのインスタンス メソッドを参照するデータ構造体であるデリゲートを表します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate,System.Delegate)">
      <summary>2 つのデリゲートの呼び出しリストを連結します。</summary>
      <returns>
        <paramref name="a" /> と <paramref name="b" /> の呼び出しリストをこの順番で連結した単一の呼び出しリストを持つ新しいデリゲート。 <paramref name="b" /> が null の場合は <paramref name="a" /> を、<paramref name="a" /> が null 参照の場合は <paramref name="b" /> を返します。また、<paramref name="a" /> と <paramref name="b" /> のどちらも null 参照の場合は null 参照を返します。</returns>
      <param name="a">連結後のリスト内で前に配置する呼び出しリストを持つデリゲート。</param>
      <param name="b">連結後のリスト内で後に配置する呼び出しリストを持つデリゲート。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="a" /> と <paramref name="b" /> の両方が null ではなく、<paramref name="a" /> と <paramref name="b" /> が同じデリゲート型のインスタンスではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate[])">
      <summary>デリゲートの配列の呼び出しリストを連結します。</summary>
      <returns>
        <paramref name="delegates" /> 配列内のデリゲートの呼び出しリストが連結された単一の呼び出しリストを持つ新しいデリゲート。 <paramref name="delegates" /> が null の場合、<paramref name="delegates" /> の要素が 0 個の場合、または <paramref name="delegates" /> のすべてのエントリが null の場合は、null を返します。</returns>
      <param name="delegates">組み合わせるデリゲートの配列。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegates" /> 内の null でないすべてのエントリが必ずしも同じデリゲート型のインスタンスではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Delegate.DynamicInvoke(System.Object[])">
      <summary>現在のデリゲートが表すメソッドを動的に呼び出します (遅延バインディング)。</summary>
      <returns>デリゲートが表すメソッドによって返されるオブジェクト。</returns>
      <param name="args">現在のデリゲートが表すメソッドに渡される引数であるオブジェクトの配列。 または 現在のデリゲートが表すメソッドが引数を必要としない場合は null。</param>
      <exception cref="T:System.MemberAccessException">呼び出し元には、(たとえば、メソッドがプライベート メソッドの場合に) デリゲートが表すメソッドへのアクセス権がありません。 または <paramref name="args" /> にリストされているパラメーターの数、順序、または型が無効です。</exception>
      <exception cref="T:System.ArgumentException">デリゲートが表すメソッドが、そのメソッドをサポートしないオブジェクトまたはクラスに対して呼び出されています。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">デリゲートが表すメソッドがインスタンス メソッドであり、対象オブジェクトが null です。 または カプセル化されたメソッドの 1 つが例外をスローします。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Delegate.Equals(System.Object)">
      <summary>指定したオブジェクトと現在のデリゲートが同じ型を持ち、同じターゲット、メソッド、および呼び出しリストを共有しているかどうかを確認します。</summary>
      <returns>
        <paramref name="obj" /> と現在のデリゲートが同じターゲット、メソッド、および呼び出しリストを共有している場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在のデリゲートと比較するオブジェクト。</param>
      <exception cref="T:System.MemberAccessException">呼び出し元には、(たとえば、メソッドがプライベート メソッドの場合に) デリゲートが表すメソッドへのアクセス権がありません。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Delegate.GetHashCode">
      <summary>デリゲートのハッシュ コードを返します。</summary>
      <returns>デリゲートのハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Delegate.GetInvocationList">
      <summary>デリゲートの呼び出しリストを返します。</summary>
      <returns>現在のデリゲートの呼び出しリストを表すデリゲートの配列。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)">
      <summary>指定したデリゲートが等しいかどうかを判断します。</summary>
      <returns>
        <paramref name="d1" /> が <paramref name="d2" /> に等しい場合は true。それ以外の場合は false。</returns>
      <param name="d1">比較する最初のデリゲート。</param>
      <param name="d2">比較する 2 番目のデリゲート。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)">
      <summary>指定したデリゲートが等しくないかどうかを判断します。</summary>
      <returns>
        <paramref name="d1" /> が <paramref name="d2" /> と等しくない場合は true。それ以外の場合は false。</returns>
      <param name="d1">比較する最初のデリゲート。</param>
      <param name="d2">比較する 2 番目のデリゲート。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Delegate.Remove(System.Delegate,System.Delegate)">
      <summary>一方のデリゲートの呼び出しリストから、最後に出現した他方のデリゲートの呼び出しリストを削除します。</summary>
      <returns>
        <paramref name="value" /> の呼び出しリストが <paramref name="source" /> の呼び出しリスト内に存在する場合は、<paramref name="source" /> の呼び出しリストから、最後に出現した <paramref name="value" /> の呼び出しリストを削除して得られる呼び出しリストを持つ新しいデリゲート。 <paramref name="value" /> が null の場合、または <paramref name="value" /> の呼び出しリストが <paramref name="source" /> の呼び出しリスト内に見つからない場合は <paramref name="source" /> を返します。 <paramref name="value" /> の呼び出しリストが <paramref name="source" /> の呼び出しリストと等しい場合、または <paramref name="source" /> が null 参照の場合は、null 参照を返します。</returns>
      <param name="source">
        <paramref name="value" /> の呼び出しリストの削除元のデリゲート。</param>
      <param name="value">
        <paramref name="source" /> の呼び出しリストから削除される呼び出しリストを持つデリゲート。</param>
      <exception cref="T:System.MemberAccessException">呼び出し元には、(たとえば、メソッドがプライベート メソッドの場合に) デリゲートが表すメソッドへのアクセス権がありません。</exception>
      <exception cref="T:System.ArgumentException">デリゲートの型が一致しません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)">
      <summary>一方のデリゲートの呼び出しリストから、そこに出現する他方のデリゲートの呼び出しリストをすべて削除します。</summary>
      <returns>
        <paramref name="value" /> の呼び出しリストが <paramref name="source" /> の呼び出しリスト内に存在する場合は、<paramref name="source" /> の呼び出しリストから、そこに出現する <paramref name="value" /> の呼び出しリストをすべて削除して得られる呼び出しリストを持つ新しいデリゲート。 <paramref name="value" /> が null の場合、または <paramref name="value" /> の呼び出しリストが <paramref name="source" /> の呼び出しリスト内に見つからない場合は <paramref name="source" /> を返します。 <paramref name="value" /> の呼び出しリストが <paramref name="source" /> の呼び出しリストに等しい場合、<paramref name="value" /> の呼び出しリストに等しい一連の呼び出しリストだけが <paramref name="source" /> に含まれる場合、または <paramref name="source" /> が null 参照の場合は null 参照を返します。</returns>
      <param name="source">
        <paramref name="value" /> の呼び出しリストの削除元のデリゲート。</param>
      <param name="value">
        <paramref name="source" /> の呼び出しリストから削除される呼び出しリストを持つデリゲート。</param>
      <exception cref="T:System.MemberAccessException">呼び出し元には、(たとえば、メソッドがプライベート メソッドの場合に) デリゲートが表すメソッドへのアクセス権がありません。</exception>
      <exception cref="T:System.ArgumentException">デリゲートの型が一致しません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Delegate.Target">
      <summary>現在のデリゲートがインスタンス メソッドを呼び出す対象のクラス インスタンスを取得します。</summary>
      <returns>現在のデリゲートがインスタンス メソッドを表す場合は、デリゲートがインスタンス メソッドを呼び出す対象のオブジェクト。デリゲートが静的メソッドを表す場合は null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.DivideByZeroException">
      <summary>整数値または小数値を 0 で除算しようとするとスローされる例外。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DivideByZeroException.#ctor">
      <summary>
        <see cref="T:System.DivideByZeroException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.DivideByZeroException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明する <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.DivideByZeroException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。 <paramref name="innerException" /> パラメーターが null でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Double">
      <summary>倍精度浮動小数点数を表します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.CompareTo(System.Double)">
      <summary>このインスタンスと指定した倍精度浮動小数点数を比較し、このインスタンスの値が指定した倍精度浮動小数点数の値よりも小さいか、同じか、または大きいかを示す整数を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。 
戻り値 	説明 	
0 より小さい値 	このインスタンスは、<paramref name="value" /> よりも小さくなっています。 または このインスタンスは非数 (<see cref="F:System.Double.NaN" />) で、<paramref name="value" /> は数値です。 	
0 	このインスタンスは <paramref name="value" /> と等価です。 または このインスタンスと <paramref name="value" /> は、どちらも非数 (<see cref="F:System.Double.NaN" />)、<see cref="F:System.Double.PositiveInfinity" />、または <see cref="F:System.Double.NegativeInfinity" /> です。 	
0 を超える値 	このインスタンスは <paramref name="value" /> よりも大きくなっています。 または このインスタンスは数値で、<paramref name="value" /> は非数 (<see cref="F:System.Double.NaN" />) です。</returns>
      <param name="value">比較対象の倍精度浮動小数点数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Double.Epsilon">
      <summary>ゼロより大きい最小の <see cref="T:System.Double" /> 値を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.Equals(System.Double)">
      <summary>このインスタンスと指定した <see cref="T:System.Double" /> オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> がこのインスタンスと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較する <see cref="T:System.Double" /> オブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Double.Equals(System.Object)">
      <summary>対象のインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> が <see cref="T:System.Double" /> のインスタンスで、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Double.GetHashCode">
      <summary>対象のインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Double.IsInfinity(System.Double)">
      <summary>指定した数値が負または正の無限大と評価されるかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="d" /> が <see cref="F:System.Double.PositiveInfinity" /> または <see cref="F:System.Double.NegativeInfinity" /> と評価される場合は true。それ以外の場合は false。</returns>
      <param name="d">倍精度浮動小数点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.IsNaN(System.Double)">
      <summary>指定された値が非数値 (<see cref="F:System.Double.NaN" />) かどうかを示す値を返します。</summary>
      <returns>
        <paramref name="d" /> が <see cref="F:System.Double.NaN" /> と評価される場合は true。それ以外の場合は false。</returns>
      <param name="d">倍精度浮動小数点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.IsNegativeInfinity(System.Double)">
      <summary>指定した数値が負の無限大と評価されるかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="d" /> が <see cref="F:System.Double.NegativeInfinity" /> と評価される場合は true。それ以外の場合は false。</returns>
      <param name="d">倍精度浮動小数点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.IsPositiveInfinity(System.Double)">
      <summary>指定した数値が正の無限大と評価されるかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="d" /> が <see cref="F:System.Double.PositiveInfinity" /> と評価される場合は true。それ以外の場合は false。</returns>
      <param name="d">倍精度浮動小数点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Double.MaxValue">
      <summary>
        <see cref="T:System.Double" /> の最大有効値を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Double.MinValue">
      <summary>
        <see cref="T:System.Double" /> の最小有効値を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Double.NaN">
      <summary>非数 (NaN) の値を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Double.NegativeInfinity">
      <summary>負の無限大を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.op_Equality(System.Double,System.Double)">
      <summary>指定した 2 つの <see cref="T:System.Double" /> 値が等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="left" /> と <paramref name="right" /> が等しい場合は true。それ以外の場合は false。</returns>
      <param name="left">比較する最初の値です。</param>
      <param name="right">比較する 2 番目の値です。</param>
    </member>
    <member name="M:System.Double.op_GreaterThan(System.Double,System.Double)">
      <summary>指定した <see cref="T:System.Double" /> 値が、指定したもう 1 つの <see cref="T:System.Double" /> 値より大きいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="left" /> が <paramref name="right" /> より大きい場合は true。それ以外の場合は false。</returns>
      <param name="left">比較する最初の値です。</param>
      <param name="right">比較する 2 番目の値です。</param>
    </member>
    <member name="M:System.Double.op_GreaterThanOrEqual(System.Double,System.Double)">
      <summary>指定した <see cref="T:System.Double" /> 値が、指定したもう 1 つの <see cref="T:System.Double" /> 値以上かどうかを示す値を返します。</summary>
      <returns>
        <paramref name="left" /> が <paramref name="right" /> 以上の場合は true。それ以外の場合は false。</returns>
      <param name="left">比較する最初の値です。</param>
      <param name="right">比較する 2 番目の値です。</param>
    </member>
    <member name="M:System.Double.op_Inequality(System.Double,System.Double)">
      <summary>指定した 2 つの <see cref="T:System.Double" /> 値が等しくないかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="left" /> と <paramref name="right" /> が等しくない場合は true。それ以外の場合は false。</returns>
      <param name="left">比較する最初の値です。</param>
      <param name="right">比較する 2 番目の値です。</param>
    </member>
    <member name="M:System.Double.op_LessThan(System.Double,System.Double)">
      <summary>指定した <see cref="T:System.Double" /> 値が、指定したもう 1 つの <see cref="T:System.Double" /> 値より小さいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="left" /> が <paramref name="right" /> より小さい場合は true。それ以外の場合は false。</returns>
      <param name="left">比較する最初の値です。</param>
      <param name="right">比較する 2 番目の値です。</param>
    </member>
    <member name="M:System.Double.op_LessThanOrEqual(System.Double,System.Double)">
      <summary>指定した <see cref="T:System.Double" /> 値が、指定したもう 1 つの <see cref="T:System.Double" /> 値以下かどうかを示す値を返します。</summary>
      <returns>
        <paramref name="left" /> が <paramref name="right" /> 以下の場合は true。それ以外の場合は false。</returns>
      <param name="left">比較する最初の値です。</param>
      <param name="right">比較する 2 番目の値です。</param>
    </member>
    <member name="M:System.Double.Parse(System.String)">
      <summary>数値の文字列形式を、等価の倍精度浮動小数点数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定した数値または記号と等価の倍精度浮動小数点数。</returns>
      <param name="s">変換する数値を含んだ文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が、有効な書式で数値を表していません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Double.MinValue" /> 未満の数値か、<see cref="F:System.Double.MaxValue" /> を超える数値を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>数値の指定したスタイルでの文字列形式を、それと等価な倍精度浮動小数点数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定した数値または記号と等価の倍精度浮動小数点数。</returns>
      <param name="s">変換する数値を含んだ文字列。</param>
      <param name="style">
        <paramref name="s" /> で使用できるスタイル要素を示す列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Float" /> と <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> の組み合わせです。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が、有効な書式で数値を表していません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Double.MinValue" /> 未満の数値か、<see cref="F:System.Double.MaxValue" /> を超える数値を表しています。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> に <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値が含まれています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>指定したスタイルおよびカルチャ固有の書式での数値の文字列形式を、等価の倍精度浮動小数点数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定した数値または記号と等価の倍精度浮動小数点数。</returns>
      <param name="s">変換する数値を含んだ文字列。</param>
      <param name="style">
        <paramref name="s" /> で使用できるスタイル要素を示す列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.AllowThousands" /> と組み合わせた <see cref="F:System.Globalization.NumberStyles.Float" /> です。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が数値を表していません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値です。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Double.MinValue" /> 未満の数値か、<see cref="F:System.Double.MaxValue" /> を超える数値を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.Parse(System.String,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式による数値の文字列形式を、それと等価な倍精度浮動小数点数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定した数値または記号と等価の倍精度浮動小数点数。</returns>
      <param name="s">変換する数値を含んだ文字列。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が、有効な書式で数値を表していません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Double.MinValue" /> 未満の数値か、<see cref="F:System.Double.MaxValue" /> を超える数値を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Double.PositiveInfinity">
      <summary>正の無限大を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.System#IComparable#CompareTo(System.Object)">
      <summary>現在のインスタンスを同じ型の別のオブジェクトと比較し、現在のインスタンスの並べ替え順序での位置が、比較対象のオブジェクトと比べて前か、後か、または同じかを示す整数を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対順序を示す符号付き整数。 
戻り値 	説明 	
0 より小さい値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも前です。 	
0 	このインスタンスは、並べ替え順序で、<paramref name="value" /> と同じ位置に出現します。 	
0 を超える値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも後ろです。 または <paramref name="value" /> は null なので、</returns>
      <param name="value">対象のインスタンスと比較する対象のオブジェクト、または null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が <see cref="T:System.Double" /> ではありません。</exception>
    </member>
    <member name="M:System.Double.ToString">
      <summary>このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
      <returns>このインスタンスの値の文字列形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.ToString(System.IFormatProvider)">
      <summary>このインスタンスの数値を、指定したカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.ToString(System.String)">
      <summary>指定した書式を使用して、このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="format">数値書式指定文字列。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> が無効です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.ToString(System.String,System.IFormatProvider)">
      <summary>このインスタンスの数値を、指定した書式およびカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> および <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="format">数値書式指定文字列。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Double@)">
      <summary>数値の文字列形式を、等価の倍精度浮動小数点数に変換します。 戻り値は、変換が成功したか失敗したかを示します。</summary>
      <returns>
        <paramref name="s" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">変換する数値を格納する文字列。</param>
      <param name="result">変換が成功した場合、このメソッドが返されるときに、<paramref name="s" /> パラメーターの値と等価の倍精度浮動小数点数を格納します。変換に失敗した場合は 0 を格納します。 <paramref name="s" /> パラメーターが null または <see cref="F:System.String.Empty" /> であるか、有効な書式の数値ではない、または <see cref="F:System.Double.MinValue" /> より小さいか <see cref="F:System.Double.MaxValue" /> より大きい数値を表している場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
      <summary>指定したスタイルおよびカルチャ固有の書式での数値の文字列形式を、等価の倍精度浮動小数点数に変換します。 戻り値は、変換が成功したか失敗したかを示します。</summary>
      <returns>
        <paramref name="s" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">変換する数値を格納する文字列。</param>
      <param name="style">
        <paramref name="s" /> で使用可能な書式を示す、<see cref="T:System.Globalization.NumberStyles" /> 値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.AllowThousands" /> と組み合わせた <see cref="F:System.Globalization.NumberStyles.Float" /> です。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャに固有の書式情報を提供する <see cref="T:System.IFormatProvider" />。</param>
      <param name="result">変換が成功した場合、このメソッドが返されるときに、<paramref name="s" /> に格納された数値または記号と等価の倍精度浮動小数点数を格納します。変換に失敗した場合は 0 を格納します。 <paramref name="s" /> パラメーターが null または <see cref="F:System.String.Empty" /> である、<paramref name="style" /> に準拠した形式ではない、<see cref="F:System.SByte.MinValue" /> より小さいか <see cref="F:System.SByte.MaxValue" /> より大きい数値を表す、または <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 列挙定数の有効な組み合わせではない場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> に <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値が含まれています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Enum">
      <summary>列挙体の基底クラスを提供します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.#ctor">
      <summary>
        <see cref="T:System.Enum" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Enum.CompareTo(System.Object)">
      <summary>指定したオブジェクトとこのインスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <returns>このインスタンスと <paramref name="target" /> の相対値を示す符号付き数値。 
値 	説明 	
0 より小さい値 	このインスタンスの値が <paramref name="target" /> より小さい値です。 	
0 	このインスタンスの値が <paramref name="target" /> の値と同じです。 	
0 を超える値 	このインスタンスの値が <paramref name="target" /> より大きい値です。 または <paramref name="target" /> は null なので、</returns>
      <param name="target">比較対象のオブジェクト、または null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> とこのインスタンスは型が異なっています。</exception>
      <exception cref="T:System.InvalidOperationException">このインスタンスの型が、<see cref="T:System.SByte" />、<see cref="T:System.Int16" />、<see cref="T:System.Int32" />、<see cref="T:System.Int64" />、<see cref="T:System.Byte" />、<see cref="T:System.UInt16" />、<see cref="T:System.UInt32" />、または <see cref="T:System.UInt64" /> ではありません。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.Equals(System.Object)">
      <summary>対象のインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> が同じ型の列挙体値で、基になる値がこのインスタンスと同じである場合は true、それ以外の場合は false です。</returns>
      <param name="obj">対象のインスタンスと比較する対象のオブジェクト、または null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.Format(System.Type,System.Object,System.String)">
      <summary>指定した形式に従って、指定した列挙型の指定した値をそれと等価の文字列形式に変換します。</summary>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
      <param name="enumType">変換する値の列挙型。</param>
      <param name="value">変換する値。</param>
      <param name="format">使用する出力書式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" />、<paramref name="value" />、<paramref name="format" /> の各パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> パラメーターが <see cref="T:System.Enum" /> 型ではありません。 または <paramref name="value" /> は、<paramref name="enumType" /> とは型の異なる列挙体からの値です。 または <paramref name="value" /> の型が、<paramref name="enumType" /> の基になる型ではありません。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> パラメーターには無効な値が含まれています。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> は "X"と等しいですが、列挙型は不明です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.GetHashCode">
      <summary>このインスタンスの値のハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.GetName(System.Type,System.Object)">
      <summary>指定した値を持つ指定した列挙体にある定数の名前を取得します。</summary>
      <returns>値が <paramref name="value" /> である <paramref name="enumType" /> 内にある列挙型定数の名前が含まれた文字列。そのような定数が見つからない場合は、null。</returns>
      <param name="enumType">列挙型。</param>
      <param name="value">基になる型に関連して列挙される特定の定数の値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> または <paramref name="value" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> が <see cref="T:System.Enum" /> ではありません。 または <paramref name="value" /> の型が <paramref name="enumType" /> ではなく、基になる型も <paramref name="enumType" /> と同じではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.GetNames(System.Type)">
      <summary>指定した列挙体に含まれている定数の名前の配列を取得します。</summary>
      <returns>
        <paramref name="enumType" /> に含まれている定数の名前の文字列配列。</returns>
      <param name="enumType">列挙型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> パラメーターが <see cref="T:System.Enum" /> ではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.GetUnderlyingType(System.Type)">
      <summary>指定した列挙体の基になる型を返します。</summary>
      <returns>
        <paramref name="enumType" /> の基になる型。</returns>
      <param name="enumType">基になる型が取得される列挙。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> が <see cref="T:System.Enum" /> ではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.GetValues(System.Type)">
      <summary>指定した列挙体に含まれている定数の値の配列を取得します。</summary>
      <returns>
        <paramref name="enumType" /> に含まれている定数の値を格納する配列。</returns>
      <param name="enumType">列挙型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> が <see cref="T:System.Enum" /> ではありません。</exception>
      <exception cref="T:System.InvalidOperationException">メソッドは、リフレクション専用コンテキストでのリフレクションによって呼び出されます。 または <paramref name="enumType" /> はリフレクションのみのコンテキストに読み込まれたアセンブリからの型です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.HasFlag(System.Enum)">
      <summary>現在のインスタンスで 1 つ以上のビット フィールドが設定されているかどうかを判断します。</summary>
      <returns>
        <paramref name="flag" /> に設定されているビット フィールドが現在のインスタンスでも設定されている場合は true。それ以外の場合は false。</returns>
      <param name="flag">列挙値。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="flag" /> の型が、現在のインスタンスの型と異なっています。</exception>
    </member>
    <member name="M:System.Enum.IsDefined(System.Type,System.Object)">
      <summary>指定した値を持つ定数が指定した列挙体に存在するかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="enumType" /> 内の定数の値が <paramref name="value" /> と等しい場合は true。それ以外の場合は false。</returns>
      <param name="enumType">列挙型。</param>
      <param name="value">
        <paramref name="enumType" /> 内の定数の値または名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> または <paramref name="value" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> が Enum ではありません。 または <paramref name="value" /> の型は列挙体ですが、型 <paramref name="enumType" /> 型の列挙体ではありません。 または <paramref name="value" /> の型が、<paramref name="enumType" /> の基になる型ではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> が型 <see cref="T:System.SByte" />、<see cref="T:System.Int16" />、<see cref="T:System.Int32" />、<see cref="T:System.Int64" />、<see cref="T:System.Byte" />、<see cref="T:System.UInt16" />、<see cref="T:System.UInt32" />、<see cref="T:System.UInt64" /> または <see cref="T:System.String" /> ではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String)">
      <summary>文字列形式での 1 つ以上の列挙定数の名前または数値を、等価の列挙オブジェクトに変換します。</summary>
      <returns>値が <paramref name="value" /> により表される <paramref name="enumType" /> 型のオブジェクト。</returns>
      <param name="enumType">列挙型。</param>
      <param name="value">変換する名前または値が含まれている文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> または <paramref name="value" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> が <see cref="T:System.Enum" /> ではありません。 または <paramref name="value" /> が空の文字列であるか、または空白しか含まれていません。 または <paramref name="value" /> は名前ですが、列挙体に対して定義された名前付き定数ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <paramref name="enumType" /> の基になる型の範囲外の値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
      <summary>文字列形式での 1 つ以上の列挙定数の名前または数値を、等価の列挙オブジェクトに変換します。 演算で大文字と小文字を区別しないかどうかをパラメーターで指定します。</summary>
      <returns>値が <paramref name="value" /> により表される <paramref name="enumType" /> 型のオブジェクト。</returns>
      <param name="enumType">列挙型。</param>
      <param name="value">変換する名前または値が含まれている文字列。</param>
      <param name="ignoreCase">大文字と小文字を区別しない場合は true。大文字と小文字を区別する場合は false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> または <paramref name="value" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> が <see cref="T:System.Enum" /> ではありません。 または <paramref name="value" /> が空の文字列 ("") であるか、または空白しか含まれていません。 または <paramref name="value" /> は名前ですが、列挙体に対して定義された名前付き定数ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <paramref name="enumType" /> の基になる型の範囲外の値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>このメソッドのオーバーロードは今後使用しません。代わりに <see cref="M:System.Enum.ToString(System.String)" /> を使用します。</summary>
      <returns>
        <paramref name="format" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="format">書式指定。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> に有効な書式指定が含まれていません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> は "X"と等しいですが、列挙型は不明です。</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Object)">
      <summary>整数値を持つ指定したオブジェクトを列挙メンバーに変換します。</summary>
      <returns>値が <paramref name="value" /> である列挙オブジェクト。</returns>
      <param name="enumType">返す列挙型。</param>
      <param name="value">列挙メンバーへと変換する値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> または <paramref name="value" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> が <see cref="T:System.Enum" /> ではありません。 または <paramref name="value" /> が型 <see cref="T:System.SByte" />、<see cref="T:System.Int16" />、<see cref="T:System.Int32" />、<see cref="T:System.Int64" />、<see cref="T:System.Byte" />、<see cref="T:System.UInt16" />、<see cref="T:System.UInt32" />、または <see cref="T:System.UInt64" /> ではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.ToString">
      <summary>このインスタンスの値を、それと等価の文字列形式に変換します。</summary>
      <returns>このインスタンスの値の文字列形式。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.ToString(System.String)">
      <summary>指定した書式を使用して、このインスタンスの値をそれと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="format">書式指定文字列。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> に無効な指定が含まれています。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> は "X"と等しいですが、列挙型は不明です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
      <summary>文字列形式での 1 つ以上の列挙定数の名前または数値を、等価の列挙オブジェクトに変換します。 演算で大文字と小文字を区別するかどうかをパラメーターで指定します。 戻り値は、変換が成功したかどうかを示します。</summary>
      <returns>
        <paramref name="value" /> パラメーターが正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="value">変換する列挙定数の名前または基になる値の文字列形式。</param>
      <param name="ignoreCase">大文字と小文字を区別しない場合は true。大文字と小文字を区別する場合は false。</param>
      <param name="result">このメソッドから制御が戻るときに、<paramref name="result" /> には、解析操作が成功したときに値が <paramref name="value" /> で表される <paramref name="TEnum" /> 型のオブジェクトが格納されます。 解析操作が失敗した場合、<paramref name="result" /> には <paramref name="TEnum" /> の基になる型の既定値が格納されます。 この値が <paramref name="TEnum" /> 列挙型のメンバーである必要がないことに注意してください。 このパラメーターは初期化せずに渡されます。</param>
      <typeparam name="TEnum">
        <paramref name="value" /> の変換先の列挙型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="TEnum" /> が列挙型ではありません。</exception>
    </member>
    <member name="M:System.Enum.TryParse``1(System.String,``0@)">
      <summary>文字列形式での 1 つ以上の列挙定数の名前または数値を、等価の列挙オブジェクトに変換します。 戻り値は、変換が成功したかどうかを示します。</summary>
      <returns>
        <paramref name="value" /> パラメーターが正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="value">変換する列挙定数の名前または基になる値の文字列形式。</param>
      <param name="result">このメソッドから制御が戻るときに、<paramref name="result" /> には、解析操作が成功したときに値が <paramref name="value" /> で表される <paramref name="TEnum" /> 型のオブジェクトが格納されます。 解析操作が失敗した場合、<paramref name="result" /> には <paramref name="TEnum" /> の基になる型の既定値が格納されます。 この値が <paramref name="TEnum" /> 列挙型のメンバーである必要がないことに注意してください。 このパラメーターは初期化せずに渡されます。</param>
      <typeparam name="TEnum">
        <paramref name="value" /> の変換先の列挙型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="TEnum" /> が列挙型ではありません。</exception>
    </member>
    <member name="T:System.EventArgs">
      <summary>イベントのデータを含み、イベント データを含まないイベントに使用する値を提供するクラスの、基本クラスを表します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.EventArgs.#ctor">
      <summary>
        <see cref="T:System.EventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="F:System.EventArgs.Empty">
      <summary>イベント データのないイベントに使用する値を提供します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.EventHandler">
      <summary>イベント データを持たないイベントを処理するメソッドを表します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.EventHandler.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.EventHandler.BeginInvoke(System.Object,System.EventArgs,System.AsyncCallback,System.Object)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.EventHandler.EndInvoke(System.IAsyncResult)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.EventHandler.Invoke(System.Object,System.EventArgs)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.EventHandler`1">
      <summary>イベントがデータを提供するときにイベントを処理するメソッドを表します。</summary>
      <typeparam name="TEventArgs">イベントにより生成されるイベント データの型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.EventHandler`1.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.EventHandler`1.BeginInvoke(System.Object,`0,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.EventHandler`1.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.EventHandler`1.Invoke(System.Object,`0)">
    </member>
    <member name="T:System.Exception">
      <summary>アプリケーションの実行中に発生するエラーを表します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Exception.#ctor">
      <summary>
        <see cref="T:System.Exception" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Exception.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.Exception" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="M:System.Exception.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.Exception" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。内部例外が指定されていない場合は null 参照 (Visual Basic では、Nothing)。</param>
    </member>
    <member name="P:System.Exception.Data">
      <summary>例外に関する追加のユーザー定義情報を提供するキー/値ペアのコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> インターフェイスを実装し、ユーザー定義のキー/値ペアのコレクションを格納するオブジェクト。 既定値は空のコレクションです。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Exception.GetBaseException">
      <summary>派生クラスでオーバーライドされた場合、それ以後に発生する 1 つ以上の例外の主要な原因である <see cref="T:System.Exception" /> を返します。</summary>
      <returns>例外のチェインでスローされた最初の例外。 現在の例外の <see cref="P:System.Exception.InnerException" /> プロパティが null 参照 (Visual Basic の場合は Nothing) である場合、このプロパティは現在の例外を返します。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Exception.HelpLink">
      <summary>例外に関連付けられているヘルプ ファイルへのリンクを取得または設定します。</summary>
      <returns>URN (Uniform Resource Name) または URL (Uniform Resource Locator)。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Exception.HResult">
      <summary>特定の例外に割り当てられているコード化数値である HRESULT を取得または設定します。</summary>
      <returns>HRESULT 値。</returns>
    </member>
    <member name="P:System.Exception.InnerException">
      <summary>現在の例外の原因となる <see cref="T:System.Exception" /> インスタンスを取得します。</summary>
      <returns>現在の例外を発生させたエラーを説明する Exception のインスタンス。 InnerException プロパティは、コンストラクターに渡されたものと同じ値を返します。ただし、内部例外の値がコンストラクターに渡されなかった場合は、null 参照 (Visual Basic の場合は Nothing) を返します。 このプロパティは読み取り専用です。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Exception.Message">
      <summary>現在の例外を説明するメッセージを取得します。</summary>
      <returns>例外の理由を説明するエラー メッセージ、または空の文字列 ("")。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Exception.Source">
      <summary>エラーの原因となったアプリケーションまたはオブジェクトの名前を取得または設定します。</summary>
      <returns>エラーの原因となったアプリケーションまたはオブジェクトの名前。</returns>
      <exception cref="T:System.ArgumentException">このオブジェクトは、ランタイム <see cref="N:System.Reflection" /> オブジェクトである必要があります。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Exception.StackTrace">
      <summary>呼び出し履歴の直前のフレームの文字列形式を取得します。</summary>
      <returns>呼び出し履歴の直前のフレームを説明する文字列。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Exception.ToString">
      <summary>現在の例外の文字列形式を作成して返します。</summary>
      <returns>現在の例外の文字列形式。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.FlagsAttribute">
      <summary>列挙体をビット フィールド、つまりフラグのセットとして扱えることを示します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.FlagsAttribute.#ctor">
      <summary>
        <see cref="T:System.FlagsAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.FormatException">
      <summary>引数の書式が、呼び出されたメソッドのパラメーターの仕様に一致していない場合にスローされる例外。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.FormatException.#ctor">
      <summary>
        <see cref="T:System.FormatException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.FormatException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.FormatException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="M:System.FormatException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.FormatException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。 <paramref name="innerException" /> パラメーターが null 参照 (Visual Basic の場合は Nothing) でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Func`1">
      <summary>パラメーターを受け取らずに、<paramref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
      <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Func`1.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Func`1.BeginInvoke(System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Func`1.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Func`1.Invoke">
    </member>
    <member name="T:System.Func`10">
      <summary>9 個のパラメーターを受け取り、<paramref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`10.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Func`10.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Func`10.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Func`10.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
    </member>
    <member name="T:System.Func`11">
      <summary>10 個のパラメーターを受け取り、<paramref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`11.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Func`11.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Func`11.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Func`11.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
    </member>
    <member name="T:System.Func`12">
      <summary>11 個のパラメーターを受け取り、<paramref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <typeparam name="T11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーターの型。</typeparam>
      <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`12.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Func`12.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Func`12.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Func`12.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
    </member>
    <member name="T:System.Func`13">
      <summary>12 個のパラメーターを受け取り、<paramref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <typeparam name="T11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーターの型。</typeparam>
      <typeparam name="T12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーターの型。</typeparam>
      <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`13.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Func`13.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Func`13.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Func`13.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)">
    </member>
    <member name="T:System.Func`14">
      <summary>13 個のパラメーターを受け取り、<paramref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <typeparam name="T11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーターの型。</typeparam>
      <typeparam name="T12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーターの型。</typeparam>
      <typeparam name="T13">このデリゲートによってカプセル化されるメソッドの第 13 パラメーターの型。</typeparam>
      <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`14.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Func`14.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Func`14.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Func`14.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)">
    </member>
    <member name="T:System.Func`15">
      <summary>14 個のパラメーターを受け取り、<paramref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <typeparam name="T11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーターの型。</typeparam>
      <typeparam name="T12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーターの型。</typeparam>
      <typeparam name="T13">このデリゲートによってカプセル化されるメソッドの第 13 パラメーターの型。</typeparam>
      <typeparam name="T14">このデリゲートによってカプセル化されるメソッドの第 14 パラメーターの型。</typeparam>
      <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`15.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Func`15.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Func`15.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Func`15.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)">
    </member>
    <member name="T:System.Func`16">
      <summary>15 個のパラメーターを受け取り、<paramref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <typeparam name="T11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーターの型。</typeparam>
      <typeparam name="T12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーターの型。</typeparam>
      <typeparam name="T13">このデリゲートによってカプセル化されるメソッドの第 13 パラメーターの型。</typeparam>
      <typeparam name="T14">このデリゲートによってカプセル化されるメソッドの第 14 パラメーターの型。</typeparam>
      <typeparam name="T15">このデリゲートによってカプセル化されるメソッドの第 15 パラメーターの型。</typeparam>
      <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`16.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Func`16.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Func`16.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Func`16.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)">
    </member>
    <member name="T:System.Func`17">
      <summary>16 個のパラメーターを受け取り、<paramref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <typeparam name="T11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーターの型。</typeparam>
      <typeparam name="T12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーターの型。</typeparam>
      <typeparam name="T13">このデリゲートによってカプセル化されるメソッドの第 13 パラメーターの型。</typeparam>
      <typeparam name="T14">このデリゲートによってカプセル化されるメソッドの第 14 パラメーターの型。</typeparam>
      <typeparam name="T15">このデリゲートによってカプセル化されるメソッドの第 15 パラメーターの型。</typeparam>
      <typeparam name="T16">このデリゲートによってカプセル化されるメソッドの第 16 パラメーターの型。</typeparam>
      <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`17.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Func`17.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Func`17.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Func`17.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15)">
    </member>
    <member name="T:System.Func`2">
      <summary>1 つのパラメーターを受け取って <paramref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
      <typeparam name="T">このデリゲートによってカプセル化されるメソッドのパラメーターの型。</typeparam>
      <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`2.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Func`2.BeginInvoke(`0,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Func`2.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Func`2.Invoke(`0)">
    </member>
    <member name="T:System.Func`3">
      <summary>2 つのパラメーターを受け取って <paramref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`3.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Func`3.BeginInvoke(`0,`1,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Func`3.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Func`3.Invoke(`0,`1)">
    </member>
    <member name="T:System.Func`4">
      <summary>3 つのパラメーターを受け取って <paramref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`4.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Func`4.BeginInvoke(`0,`1,`2,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Func`4.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Func`4.Invoke(`0,`1,`2)">
    </member>
    <member name="T:System.Func`5">
      <summary>4 つのパラメーターを受け取って <paramref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`5.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Func`5.BeginInvoke(`0,`1,`2,`3,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Func`5.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Func`5.Invoke(`0,`1,`2,`3)">
    </member>
    <member name="T:System.Func`6">
      <summary>5 個のパラメーターを受け取って <paramref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`6.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Func`6.BeginInvoke(`0,`1,`2,`3,`4,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Func`6.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Func`6.Invoke(`0,`1,`2,`3,`4)">
    </member>
    <member name="T:System.Func`7">
      <summary>6 つのパラメーターを受け取り、<paramref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`7.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Func`7.BeginInvoke(`0,`1,`2,`3,`4,`5,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Func`7.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Func`7.Invoke(`0,`1,`2,`3,`4,`5)">
    </member>
    <member name="T:System.Func`8">
      <summary>7 個のパラメーターを受け取り、<paramref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`8.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Func`8.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Func`8.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Func`8.Invoke(`0,`1,`2,`3,`4,`5,`6)">
    </member>
    <member name="T:System.Func`9">
      <summary>8 個のパラメーターを受け取って <paramref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`9.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Func`9.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Func`9.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Func`9.Invoke(`0,`1,`2,`3,`4,`5,`6,`7)">
    </member>
    <member name="T:System.GC">
      <summary>未使用メモリを自動的に収集するサービスであるシステム ガベージ コレクターを制御します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.GC.AddMemoryPressure(System.Int64)">
      <summary>アンマネージ メモリが大規模に割り当てられたため、ガベージ コレクションをスケジュールするときに考慮する必要があることが、ランタイムに通知されます。</summary>
      <param name="bytesAllocated">割り当てられたアンマネージ メモリの増加量</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bytesAllocated" /> が 0 以下です。 または 32 ビットのコンピューターで、<paramref name="bytesAllocated" /> の値が <see cref="F:System.Int32.MaxValue" /> の値を超えています。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.GC.Collect">
      <summary>すべてのジェネレーションのガベージ コレクションを直ちに強制実行します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.Collect(System.Int32)">
      <summary>ジェネレーション 0 から指定ジェネレーションまでのガベージ コレクションを直ちに強制実行します。</summary>
      <param name="generation">ガベージ コレクションを適用できる最も古いジェネレーションを表す数字。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> が無効です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.Collect(System.Int32,System.GCCollectionMode)">
      <summary>
        <see cref="T:System.GCCollectionMode" /> 値によって指定されたタイミングで、ジェネレーション 0 から指定ジェネレーションまでのガベージ コレクションを強制的に実行します。</summary>
      <param name="generation">ガベージ コレクションを適用できる最も古いジェネレーションを表す数字。</param>
      <param name="mode">ガベージ コレクションの動作を指定する列挙値の 1 つ。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> が無効です。 または <paramref name="mode" /> が <see cref="T:System.GCCollectionMode" /> 値ではありません。</exception>
    </member>
    <member name="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean)">
      <summary>ジェネレーション 0 から指定ジェネレーションまでのガベージ コレクションを <see cref="T:System.GCCollectionMode" /> 値で指定した時間に強制します。コレクションをブロックするかどうかを指定する値を指定します。</summary>
      <param name="generation">ガベージ コレクションを適用できる最も古いジェネレーションを表す数字。</param>
      <param name="mode">ガベージ コレクションが強制されるのか、または最適化されるのかを指定する列挙値の 1 つ。</param>
      <param name="blocking">ブロッキング ガベージ コレクションを実行する場合は true。可能な限りバックグラウンド ガベージ コレクションを実行する場合は false。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> が無効です。 または <paramref name="mode" /> が <see cref="T:System.GCCollectionMode" /> 値ではありません。</exception>
    </member>
    <member name="M:System.GC.CollectionCount(System.Int32)">
      <summary>指定したジェネレーションのオブジェクトに対するガベージ コレクションの発生回数を返します。</summary>
      <returns>プロセスの起動後に、指定したジェネレーションに対して発生したガベージ コレクションの回数。</returns>
      <param name="generation">ガベージ コレクションの回数を確認するオブジェクトのジェネレーション</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> が 0 未満です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.GetTotalMemory(System.Boolean)">
      <summary>現在割り当てられていると思われるバイト数を取得します。 このメソッドが制御を戻す前に短い時間だけ待機して、システムがガベージ コレクションを行い、オブジェクトの終了操作を実行できるようにするかどうかをパラメーターで示します。</summary>
      <returns>マネージ メモリに現在割り当てられているバイト数の近似値を表す数値。</returns>
      <param name="forceFullCollection">ガベージ コレクションの発生を待って制御を戻す場合は true。それ以外の場合は false。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.KeepAlive(System.Object)">
      <summary>指定したオブジェクトを参照し、現在のルーチンの開始時からこのメソッドが呼び出される時点までの間、そのオブジェクトをガベージ コレクションの対象から外します。</summary>
      <param name="obj">参照するオブジェクト。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.GC.MaxGeneration">
      <summary>システムが現在サポートしている最大ジェネレーション番号を取得します。</summary>
      <returns>0 からサポートされるジェネレーションの最大数までの値。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.RemoveMemoryPressure(System.Int64)">
      <summary>アンマネージ メモリが解放され、ガベージ コレクションのスケジュールにこのメモリを考慮する必要がなくなったことをランタイムに通知します。</summary>
      <param name="bytesAllocated">解放されたアンマネージ メモリの量</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bytesAllocated" /> が 0 以下です。 または 32 ビットのコンピューターで、<paramref name="bytesAllocated" /> の値が <see cref="F:System.Int32.MaxValue" /> の値を超えています。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.GC.ReRegisterForFinalize(System.Object)">
      <summary>
        <see cref="M:System.GC.SuppressFinalize(System.Object)" /> が既に呼び出されている指定オブジェクトに対して、ファイナライザーを呼び出すことをシステムに要求します。</summary>
      <param name="obj">ファイナライザーの呼び出しが必要なオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> は null なので、</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.SuppressFinalize(System.Object)">
      <summary>指定したオブジェクトに対して、ファイナライザーを呼び出さないことをシステムに要求します。</summary>
      <param name="obj">ファイナライザーの呼び出しを抑制するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> は null なので、</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.WaitForPendingFinalizers">
      <summary>ファイナライザーのキューを処理するスレッドがそのキューを空にするまで、現在のスレッドを中断します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.GCCollectionMode">
      <summary>強制的に実行されるガベージ コレクションの動作を指定します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.GCCollectionMode.Default">
      <summary>この列挙値の既定の設定 (現在は <see cref="F:System.GCCollectionMode.Forced" />) です。</summary>
    </member>
    <member name="F:System.GCCollectionMode.Forced">
      <summary>直ちにガベージ コレクションを強制的に実行します。</summary>
    </member>
    <member name="F:System.GCCollectionMode.Optimized">
      <summary>オブジェクトを再利用するのに現在が最適なときかどうかをガベージ コレクターが判断できるようにします。</summary>
    </member>
    <member name="T:System.Guid">
      <summary>グローバル一意識別子 (GUID) を表します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Guid.#ctor(System.Byte[])">
      <summary>指定したバイト配列を使用して、<see cref="T:System.Guid" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="b">GUID を初期化するための値を含む 16 要素のバイト配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="b" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="b" /> の長さが 16 バイトではありません。</exception>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>指定した整数とバイトを使用して、<see cref="T:System.Guid" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="a">GUID の最初の 4 バイト。</param>
      <param name="b">GUID の次の 2 バイト。</param>
      <param name="c">GUID の次の 2 バイト。</param>
      <param name="d">GUID の次のバイト。</param>
      <param name="e">GUID の次のバイト。</param>
      <param name="f">GUID の次のバイト。</param>
      <param name="g">GUID の次のバイト。</param>
      <param name="h">GUID の次のバイト。</param>
      <param name="i">GUID の次のバイト。</param>
      <param name="j">GUID の次のバイト。</param>
      <param name="k">GUID の次のバイト。</param>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])">
      <summary>指定した整数とバイト配列を使用して、<see cref="T:System.Guid" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="a">GUID の最初の 4 バイト。</param>
      <param name="b">GUID の次の 2 バイト。</param>
      <param name="c">GUID の次の 2 バイト。</param>
      <param name="d">GUID の残りの 8 バイト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="d" /> の長さが 8 バイトではありません。</exception>
    </member>
    <member name="M:System.Guid.#ctor(System.String)">
      <summary>指定した文字列で表される値を使用して、<see cref="T:System.Guid" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="g">次のいずれかの形式の GUID を保持する文字列 ("d" は、大文字と小文字が区別されない 16 進数の文字を表します)。 連続する 32 桁 : dddddddddddddddddddddddddddddddd または 間をハイフン (-) で区切った 8 桁、4 桁、4 桁、4 桁、12 桁のグループ。 左右が対応している中かっこや丸かっこで GUID 全体を囲むこともできます。 dddddddd-dddd-dddd-dddd-dddddddddddd または {dddddddd-dddd-dddd-dddd-dddddddddddd} または (dddddddd-dddd-dddd-dddd-dddddddddddd) または 8 桁、4 桁、4 桁のグループと、2 桁のグループ 8 個で構成されるサブセット。各グループは "0x" または "0X" で始まり、コンマで区切ります。 GUID 全体およびサブセットは、左右が対応している中かっこで囲みます。 {0xdddddddd, 0xdddd, 0xdddd,{0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd}} 中かっこ、コンマ、プリフィックスの "0x" はすべて必須です。 埋め込まれている空白はすべて無視されます。 グループの先頭にある 0 はすべて無視されます。 各グループの桁数は、そのグループに指定できる最大の有効桁数です。 1 から、例で示した各グループの桁の数までを指定できます。 指定した数字は、そのグループの下位の桁と見なされます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="g" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="g" /> の形式が無効です。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="g" /> の形式が無効です。</exception>
    </member>
    <member name="M:System.Guid.CompareTo(System.Guid)">
      <summary>指定した <see cref="T:System.Guid" /> オブジェクトとこのインスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。 
戻り値 	説明 	
負の整数 	このインスタンスは、<paramref name="value" /> よりも小さくなっています。 	
0 	このインスタンスは <paramref name="value" /> と等価です。 	
正の整数 	このインスタンスは <paramref name="value" /> よりも大きくなっています。</returns>
      <param name="value">このインスタンスと比較するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Guid.Empty">
      <summary>値がすべて 0 である <see cref="T:System.Guid" /> 構造体の読み取り専用インスタンス。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Guid.Equals(System.Guid)">
      <summary>このインスタンスと指定した <see cref="T:System.Guid" /> オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="g" /> がこのインスタンスに等しい場合は true。それ以外の場合は false。</returns>
      <param name="g">このインスタンスと比較するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Guid.Equals(System.Object)">
      <summary>このインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="o" /> が、このインスタンスと同じ値を持つ <see cref="T:System.Guid" /> の場合は true。それ以外の場合は false。</returns>
      <param name="o">このインスタンスと比較するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Guid.GetHashCode">
      <summary>対象のインスタンスのハッシュ コードを返します。</summary>
      <returns>対象のインスタンスのハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Guid.NewGuid">
      <summary>
        <see cref="T:System.Guid" /> 構造体の新しいインスタンスを初期化します。</summary>
      <returns>新しい GUID オブジェクト。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Guid.op_Equality(System.Guid,System.Guid)">
      <summary>2 つの指定された <see cref="T:System.Guid" /> オブジェクトの値が等しいかどうかを示します。</summary>
      <returns>
        <paramref name="a" /> と <paramref name="b" /> が等しい場合は true。それ以外の場合は false。</returns>
      <param name="a">比較対象の第 1 オブジェクト。</param>
      <param name="b">2 番目に比較するオブジェクト。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Guid.op_Inequality(System.Guid,System.Guid)">
      <summary>2 つの指定された <see cref="T:System.Guid" /> オブジェクトの値が等しくないかどうかを示します。</summary>
      <returns>
        <paramref name="a" /> と <paramref name="b" /> が等しくない場合は true。それ以外の場合は false。</returns>
      <param name="a">比較対象の第 1 オブジェクト。</param>
      <param name="b">2 番目に比較するオブジェクト。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Guid.Parse(System.String)">
      <summary>GUID の文字列形式を、等価の <see cref="T:System.Guid" /> 構造体に変換します。</summary>
      <returns>解析された値を格納する構造体。</returns>
      <param name="input">変換対象の GUID。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> が、認識されている形式ではありません。</exception>
    </member>
    <member name="M:System.Guid.ParseExact(System.String,System.String)">
      <summary>文字列が指定の形式であれば、GUID の文字列形式を等価の <see cref="T:System.Guid" /> 構造体に変換します。</summary>
      <returns>解析された値を格納する構造体。</returns>
      <param name="input">変換対象の GUID。</param>
      <param name="format">
        <paramref name="input" /> を解釈するときに使用する正確な形式を示す、"N"、"D"、"B"、"P"、"X" のいずれかの指定子。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="format" /> が null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> が、認識されている形式ではありません。</exception>
    </member>
    <member name="M:System.Guid.System#IComparable#CompareTo(System.Object)">
      <summary>指定したオブジェクトとこのインスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。 
戻り値 	説明 	
負の整数 	このインスタンスは、<paramref name="value" /> よりも小さくなっています。 	
0 	このインスタンスは <paramref name="value" /> と等価です。 	
正の整数 	このインスタンスは <paramref name="value" /> より大きいか、または <paramref name="value" /> が null です。</returns>
      <param name="value">比較対象のオブジェクト、または null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が <see cref="T:System.Guid" /> ではありません。</exception>
    </member>
    <member name="M:System.Guid.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>指定した書式指定子に従って、このインスタンスの値を文字列形式で返します。</summary>
      <returns>指定した書式を使用して一連の小文字の 16 進数の数字で表される、この <see cref="T:System.Guid" /> の値。</returns>
      <param name="format">
        <see cref="T:System.Guid" /> の値の書式を指定する 1 文字の書式指定子。 <paramref name="format" /> パラメーターには、"N"、"D"、"B"、"P"、または "X" を指定できます。 <paramref name="format" /> が null または空の文字列 ("") である場合は、"D" が使用されます。</param>
      <param name="provider">(予約済み) カルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> の値は、null、空の文字列 ("")、および書式指定子 "N"、"D"、"B"、"P"、"X" のいずれでもありません。</exception>
    </member>
    <member name="M:System.Guid.ToByteArray">
      <summary>このインスタンスの値を格納する 16 要素のバイト配列を返します。</summary>
      <returns>16 要素のバイト配列。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Guid.ToString">
      <summary>このインスタンスの値の文字列形式をレジストリ形式で返します。</summary>
      <returns>この <see cref="T:System.Guid" /> の値で、"D" 書式指定子で次のように書式設定されています。 xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx  ここで、GUID の値は、ハイフンで 8 桁、4 桁、4 桁、4 桁、および 12 桁のグループに区切られた小文字の 16 進数で表されます。 戻り値は、たとえば "382c74c3-721d-4f34-80e5-57657b6cbc27" のようになります。 16 進数の数字 a から f を大文字に変換するには、返された文字列に <see cref="M:System.String.ToUpper" /> メソッドを呼び出します。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Guid.ToString(System.String)">
      <summary>指定した書式指定子に従って、この <see cref="T:System.Guid" /> インスタンスの値を文字列形式で返します。</summary>
      <returns>この <see cref="T:System.Guid" /> の値。指定した書式を使用して一連の小文字の 16 進数の数字で表されます。</returns>
      <param name="format">この <see cref="T:System.Guid" /> の値の書式を指定する 1 文字の書式指定子。 <paramref name="format" /> パラメーターには、"N"、"D"、"B"、"P"、または "X" を指定できます。 <paramref name="format" /> が null または空の文字列 ("") である場合は、"D" が使用されます。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> の値は、null、空の文字列 ("")、"N"、"D"、"B"、"P"、または "X" ではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Guid.TryParse(System.String,System.Guid@)">
      <summary>GUID の文字列形式を、等価の <see cref="T:System.Guid" /> 構造体に変換します。</summary>
      <returns>解析操作が正常に実行された場合は true。それ以外の場合は false。</returns>
      <param name="input">変換対象の GUID。</param>
      <param name="result">解析された値を格納する構造体。 メソッドが true を返した場合、<paramref name="result" /> には有効な <see cref="T:System.Guid" /> が格納されます。 メソッドが false を返す場合、<paramref name="result" /> は <see cref="F:System.Guid.Empty" /> と同じです。</param>
    </member>
    <member name="M:System.Guid.TryParseExact(System.String,System.String,System.Guid@)">
      <summary>文字列が指定の形式であれば、GUID の文字列形式を等価の <see cref="T:System.Guid" /> 構造体に変換します。</summary>
      <returns>解析操作が正常に実行された場合は true。それ以外の場合は false。</returns>
      <param name="input">変換対象の GUID。</param>
      <param name="format">
        <paramref name="input" /> を解釈するときに使用する正確な形式を示す、"N"、"D"、"B"、"P"、"X" のいずれかの指定子。</param>
      <param name="result">解析された値を格納する構造体。 メソッドが true を返した場合、<paramref name="result" /> には有効な <see cref="T:System.Guid" /> が格納されます。 メソッドが false を返す場合、<paramref name="result" /> は <see cref="F:System.Guid.Empty" /> と同じです。</param>
    </member>
    <member name="T:System.IAsyncResult">
      <summary>非同期操作のステータスを表します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IAsyncResult.AsyncState">
      <summary>非同期操作についての情報を限定または格納するユーザー定義のオブジェクトを取得します。</summary>
      <returns>非同期操作についての情報を限定または格納するユーザー定義のオブジェクト。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IAsyncResult.AsyncWaitHandle">
      <summary>非同期操作が完了するまで待機するために使用する <see cref="T:System.Threading.WaitHandle" /> を取得します。</summary>
      <returns>非同期操作が完了するまで待機するために使用する <see cref="T:System.Threading.WaitHandle" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IAsyncResult.CompletedSynchronously">
      <summary>非同期操作が同期的に完了したかどうかを示す値を取得します。</summary>
      <returns>非同期操作が同期的に完了した場合は true。それ以外の場合は false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IAsyncResult.IsCompleted">
      <summary>非同期操作が完了したかどうかを示す値を取得します。</summary>
      <returns>操作が完了した場合は true。それ以外の場合は false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IComparable">
      <summary>インスタンスの並べ替えのために値の型またはクラスで実装する、汎用の、型固有の比較メソッドを定義します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IComparable.CompareTo(System.Object)">
      <summary>現在のインスタンスを同じ型の別のオブジェクトと比較し、現在のインスタンスの並べ替え順序での位置が、比較対象のオブジェクトと比べて前か、後か、または同じかを示す整数を返します。</summary>
      <returns>比較対象オブジェクトの相対順序を示す値。 戻り値の意味は次のとおりです。 
値 	説明 	
0 より小さい値 	このインスタンスの位置が、並べ替え順序において <paramref name="obj" /> よりも前です。 	
0 	並べ替え順序における、このインスタンスと <paramref name="obj" /> の位置が同じです。 	
0 を超える値 	このインスタンスの位置が、並べ替え順序において <paramref name="obj" /> よりも後ろです。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> の型がこのインスタンスの型と異なります。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IComparable`1">
      <summary>インスタンスの並べ替えなどを目的とし、型固有の比較メソッドを作成するために値型またはクラスで実装する、汎用の比較メソッドを定義します。</summary>
      <typeparam name="T">比較するオブジェクトの型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IComparable`1.CompareTo(`0)">
      <summary>現在のオブジェクトを同じ型の別のオブジェクトと比較します。</summary>
      <returns>比較対象オブジェクトの相対順序を示す値。 戻り値の意味は次のとおりです。 
値 	説明 	
0 より小さい値 	このオブジェクトが <paramref name="other" /> パラメーターより小さいことを意味します。 	
0 	このオブジェクトが <paramref name="other" /> と等しいことを意味します。 	
0 を超える値 	このオブジェクトが <paramref name="other" /> よりも大きいことを意味します。</returns>
      <param name="other">このオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="T:System.ICustomFormatter">
      <summary>オブジェクト値のカスタム書式設定をサポートするメソッドを定義します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
      <summary>指定した書式およびカルチャ固有の書式情報を使用して、指定したオブジェクトの値をそれと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> と <paramref name="formatProvider" /> の指定に従って書式指定した <paramref name="arg" /> の値の文字列形式。</returns>
      <param name="format">書式指定を格納している書式指定文字列。</param>
      <param name="arg">書式指定するオブジェクト。</param>
      <param name="formatProvider">現在のインスタンスについての書式情報を提供するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IDisposable">
      <summary>割り当てられたリソースを解放するメソッドを定義します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IDisposable.Dispose">
      <summary>アンマネージ リソースの解放およびリセットに関連付けられているアプリケーション定義のタスクを実行します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IEquatable`1">
      <summary>2 つのインスタンスが等しいかどうかを判断するための型固有のメソッドを作成するために値型またはクラスで実装する、汎用の比較メソッドを定義します。</summary>
      <typeparam name="T">比較するオブジェクトの型。</typeparam>
    </member>
    <member name="M:System.IEquatable`1.Equals(`0)">
      <summary>現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを示します。</summary>
      <returns>現在のオブジェクトが <paramref name="other" /> パラメーターと等しい場合は true。それ以外の場合は false。</returns>
      <param name="other">このオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="T:System.IFormatProvider">
      <summary>書式を制御するオブジェクトを取得するための機構を提供します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IFormatProvider.GetFormat(System.Type)">
      <summary>指定した型の書式指定サービスを提供するオブジェクトを返します。</summary>
      <returns>
        <see cref="T:System.IFormatProvider" /> の実装が <paramref name="formatType" /> で指定された型のオブジェクトを提供できる場合は、そのオブジェクトのインスタンス。それ以外の場合は null。</returns>
      <param name="formatType">返す書式オブジェクトの型を指定するオブジェクト。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.IFormattable">
      <summary>オブジェクトの値を文字列形式に変換する機能が用意されています。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IFormattable.ToString(System.String,System.IFormatProvider)">
      <summary>指定した書式を使用して、現在のインスタンスの値に書式を付けます。</summary>
      <returns>指定された書式での現在のインスタンスの値。</returns>
      <param name="format">使用する書式。 または <see cref="T:System.IFormattable" /> 実装の型に対して定義されている既定の書式を使用する場合は、null 参照 (Visual Basic の場合は Nothing)。</param>
      <param name="formatProvider">値の書式付けに使用するプロバイダー。 または オペレーティング システムの現在のロケール設定から数値書式情報を取得する場合は、null 参照 (Visual Basic の場合は Nothing)。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IndexOutOfRangeException">
      <summary>配列の境界外のインデックスを使用して配列の要素にアクセスしようとした場合にスローされる例外。 このクラスは継承できません。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor">
      <summary>
        <see cref="T:System.IndexOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.IndexOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.IndexOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。 <paramref name="innerException" /> パラメーターが null 参照 (Visual Basic の場合は Nothing) でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Int16">
      <summary>16 ビット符号付き整数を表します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.CompareTo(System.Int16)">
      <summary>このインスタンスと指定した 16 ビット符号付き整数を比較し、このインスタンスの値が指定した 16 ビット符号付き整数の値よりも小さいか、同じか、または大きいかを示す整数を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。 
戻り値 	説明 	
0 より小さい値 	このインスタンスは、<paramref name="value" /> よりも小さくなっています。 	
0 	このインスタンスは <paramref name="value" /> と等価です。 	
0 を超える値 	このインスタンスは <paramref name="value" /> よりも大きくなっています。</returns>
      <param name="value">比較対象の整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int16.Equals(System.Int16)">
      <summary>このインスタンスが、指定した <see cref="T:System.Int16" /> 値に等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> がこのインスタンスと同じ値を保持している場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較する <see cref="T:System.Int16" /> 値。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int16.Equals(System.Object)">
      <summary>対象のインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> が <see cref="T:System.Int16" /> のインスタンスで、このインスタンスの値と等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int16.GetHashCode">
      <summary>対象のインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Int16.MaxValue">
      <summary>
        <see cref="T:System.Int16" /> の最大有効値を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Int16.MinValue">
      <summary>
        <see cref="T:System.Int16" /> の最小有効値を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.Parse(System.String)">
      <summary>数値の文字列形式を、それと等価な 16 ビット符号付き整数に変換します。</summary>
      <returns>
        <paramref name="s" /> に格納されている数値と等しい 16 ビット符号付き整数。</returns>
      <param name="s">変換する数値を格納する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の形式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Int16.MinValue" /> 未満の数値か、<see cref="F:System.Int16.MaxValue" /> より大きい数値を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>指定したスタイルの数値の文字列形式を、それと等価の 16 ビット符号付き整数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定した数値と等しい 16 ビット符号付き整数。</returns>
      <param name="s">変換する数値を格納する文字列。</param>
      <param name="style">
        <paramref name="s" /> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の書式が、<paramref name="style" /> に準拠した書式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Int16.MinValue" /> 未満の数値か、<see cref="F:System.Int16.MaxValue" /> より大きい数値を表しています。 または <paramref name="s" /> が 0 以外の小数部の桁を含んでいます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>指定したスタイルおよびカルチャに固有の書式による数値の文字列形式を、それと等価の 16 ビット符号付き整数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定した数値と等しい 16 ビット符号付き整数。</returns>
      <param name="s">変換する数値を格納する文字列。</param>
      <param name="style">
        <paramref name="s" /> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャに固有の書式情報を提供する <see cref="T:System.IFormatProvider" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の書式が、<paramref name="style" /> に準拠した書式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Int16.MinValue" /> 未満の数値か、<see cref="F:System.Int16.MaxValue" /> より大きい数値を表しています。 または <paramref name="s" /> が 0 以外の小数部の桁を含んでいます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式による数値の文字列形式を、それと等価な 16 ビット符号付き整数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定した数値と等しい 16 ビット符号付き整数。</returns>
      <param name="s">変換する数値を格納する文字列。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャに固有の書式情報を提供する <see cref="T:System.IFormatProvider" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の形式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Int16.MinValue" /> 未満の数値か、<see cref="F:System.Int16.MaxValue" /> より大きい数値を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.System#IComparable#CompareTo(System.Object)">
      <summary>現在のインスタンスを同じ型の別のオブジェクトと比較し、現在のインスタンスの並べ替え順序での位置が、比較対象のオブジェクトと比べて前か、後か、または同じかを示す整数を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対順序を示す符号付き整数。 
戻り値 	説明 	
0 より小さい値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも前です。 	
0 	このインスタンスは、並べ替え順序で、<paramref name="value" /> と同じ位置に出現します。 	
0 を超える値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも後ろです。 または <paramref name="value" /> は null なので、</returns>
      <param name="value">対象のインスタンスと比較する対象のオブジェクト、または null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が <see cref="T:System.Int16" /> ではありません。</exception>
    </member>
    <member name="M:System.Int16.ToString">
      <summary>このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
      <returns>値が負の場合はマイナス記号を伴い、先行ゼロを含まない 0 から 9 の一連の数字から構成される、このインスタンスの値の文字列形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.ToString(System.IFormatProvider)">
      <summary>このインスタンスの数値を、指定したカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="provider">カルチャ固有の書式情報を提供する <see cref="T:System.IFormatProvider" />。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.ToString(System.String)">
      <summary>指定した書式を使用して、このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="format">数値書式指定文字列。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.ToString(System.String,System.IFormatProvider)">
      <summary>このインスタンスの数値を、指定した書式およびカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> および <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="format">数値書式指定文字列。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)">
      <summary>指定したスタイルおよびカルチャに固有の書式による数値の文字列形式を、それと等価の 16 ビット符号付き整数に変換します。 戻り値は、変換が成功したか失敗したかを示します。</summary>
      <returns>
        <paramref name="s" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">変換する数値を格納する文字列。 文字列は、<paramref name="style" /> で指定されたスタイルを使用して解釈されます。</param>
      <param name="style">
        <paramref name="s" /> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="result">変換が成功した場合、このメソッドが返されるときに、<paramref name="s" /> に格納された数値と等しい 16 ビット符号付き整数値を格納します。変換に失敗した場合は 0 を格納します。 <paramref name="s" /> パラメーターが null または <see cref="F:System.String.Empty" /> であるか、<paramref name="style" /> に準拠した形式ではない、または <see cref="F:System.Int16.MinValue" /> より小さいか <see cref="F:System.Int16.MaxValue" /> より大きい数値を表している場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Int16@)">
      <summary>数値の文字列形式を、それと等価な 16 ビット符号付き整数に変換します。 戻り値は、変換が成功したか失敗したかを示します。</summary>
      <returns>
        <paramref name="s" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">変換する数値を格納する文字列。</param>
      <param name="result">変換が成功した場合、このメソッドが返されるときに、<paramref name="s" /> に格納された数値と等しい 16 ビット符号付き整数値を格納します。変換に失敗した場合は 0 を格納します。 <paramref name="s" /> パラメーターが null または <see cref="F:System.String.Empty" /> であるか、正しい形式ではない、または <see cref="F:System.Int16.MinValue" /> より小さいか <see cref="F:System.Int16.MaxValue" /> より大きい数値を表している場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Int32">
      <summary>32 ビット符号付き整数を表します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.CompareTo(System.Int32)">
      <summary>指定した 32 ビット符号付き整数とこのインスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。 
戻り値 	説明 	
0 より小さい値 	このインスタンスは、<paramref name="value" /> よりも小さくなっています。 	
0 	このインスタンスは <paramref name="value" /> と等価です。 	
0 を超える値 	このインスタンスは <paramref name="value" /> よりも大きくなっています。</returns>
      <param name="value">比較対象の整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int32.Equals(System.Int32)">
      <summary>このインスタンスが、指定した <see cref="T:System.Int32" /> 値に等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> がこのインスタンスと同じ値を保持している場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較する <see cref="T:System.Int32" /> 値。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int32.Equals(System.Object)">
      <summary>対象のインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> が <see cref="T:System.Int32" /> のインスタンスで、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int32.GetHashCode">
      <summary>対象のインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Int32.MaxValue">
      <summary>
        <see cref="T:System.Int32" /> の最大有効値を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Int32.MinValue">
      <summary>
        <see cref="T:System.Int32" /> の最小有効値を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.Parse(System.String)">
      <summary>数値の文字列形式を、それと等価な 32 ビット符号付き整数に変換します。</summary>
      <returns>
        <paramref name="s" /> に格納されている数値と等しい 32 ビット符号付き整数。</returns>
      <param name="s">変換する数値を格納する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の形式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Int32.MinValue" /> 未満の数値か、<see cref="F:System.Int32.MaxValue" /> より大きい数値を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>指定したスタイルの数値の文字列形式を、それと等価の 32 ビット符号付き整数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定した数値と等しい 32 ビット符号付き整数。</returns>
      <param name="s">変換する数値を格納する文字列。</param>
      <param name="style">
        <paramref name="s" /> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の書式が、<paramref name="style" /> に準拠した書式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Int32.MinValue" /> 未満の数値か、<see cref="F:System.Int32.MaxValue" /> より大きい数値を表しています。 または <paramref name="s" /> は 0 以外の小数部の桁を含んでいます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>指定したスタイルおよびカルチャに固有の書式による数値の文字列形式を、それと等価の 32 ビット符号付き整数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定した数値と等しい 32 ビット符号付き整数。</returns>
      <param name="s">変換する数値を格納する文字列。</param>
      <param name="style">
        <paramref name="s" /> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
      <param name="provider">
        <paramref name="s" /> の書式に関するカルチャ固有の情報を提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の書式が、<paramref name="style" /> に準拠した書式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Int32.MinValue" /> 未満の数値か、<see cref="F:System.Int32.MaxValue" /> より大きい数値を表しています。 または <paramref name="s" /> は 0 以外の小数部の桁を含んでいます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式による数値の文字列形式を、それと等価な 32 ビット符号付き整数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定した数値と等しい 32 ビット符号付き整数。</returns>
      <param name="s">変換する数値を格納する文字列。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の書式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Int32.MinValue" /> 未満の数値か、<see cref="F:System.Int32.MaxValue" /> より大きい数値を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.System#IComparable#CompareTo(System.Object)">
      <summary>現在のインスタンスを同じ型の別のオブジェクトと比較し、現在のインスタンスの並べ替え順序での位置が、比較対象のオブジェクトと比べて前か、後か、または同じかを示す整数を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対順序を示す符号付き整数。 
戻り値 	説明 	
0 より小さい値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも前です。 	
0 	このインスタンスは、並べ替え順序で、<paramref name="value" /> と同じ位置に出現します。 	
0 を超える値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも後ろです。 または <paramref name="value" /> は null なので、</returns>
      <param name="value">対象のインスタンスと比較する対象のオブジェクト、または null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が <see cref="T:System.Int32" /> ではありません。</exception>
    </member>
    <member name="M:System.Int32.ToString">
      <summary>このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
      <returns>値が負の場合はマイナス記号を伴い、先行ゼロを含まない 0 から 9 の一連の数字から構成される、このインスタンスの値の文字列形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.ToString(System.IFormatProvider)">
      <summary>このインスタンスの数値を、指定したカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.ToString(System.String)">
      <summary>指定した書式を使用して、このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="format">標準またはカスタムの数値書式指定文字列。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> が無効であるか、サポートされていません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.ToString(System.String,System.IFormatProvider)">
      <summary>このインスタンスの数値を、指定した書式およびカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> および <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="format">標準またはカスタムの数値書式指定文字列。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> が無効であるか、サポートされていません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
      <summary>指定したスタイルおよびカルチャに固有の書式による数値の文字列形式を、それと等価の 32 ビット符号付き整数に変換します。 戻り値は、変換が成功したかどうかを示します。</summary>
      <returns>
        <paramref name="s" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">変換する数値を格納する文字列。 文字列は、<paramref name="style" /> で指定されたスタイルを使用して解釈されます。</param>
      <param name="style">
        <paramref name="s" /> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="result">変換が成功した場合、このメソッドが返されるときに、<paramref name="s" /> に格納された数値と等しい 32 ビット符号付き整数値を格納します。変換に失敗した場合は 0 を格納します。 <paramref name="s" /> パラメーターが null または <see cref="F:System.String.Empty" /> であるか、<paramref name="style" /> に準拠した形式ではない、または <see cref="F:System.Int32.MinValue" /> より小さいか <see cref="F:System.Int32.MaxValue" /> より大きい数値を表している場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Int32@)">
      <summary>数値の文字列形式を、それと等価な 32 ビット符号付き整数に変換します。 戻り値は、変換が成功したかどうかを示します。</summary>
      <returns>
        <paramref name="s" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">変換する数値を格納する文字列。</param>
      <param name="result">変換が成功した場合、このメソッドが返されるときに、<paramref name="s" /> に格納された数値と等しい 32 ビット符号付き整数値を格納します。変換に失敗した場合は 0 を格納します。 <paramref name="s" /> パラメーターが null または <see cref="F:System.String.Empty" /> であるか、正しい形式ではない、または <see cref="F:System.Int32.MinValue" /> より小さいか <see cref="F:System.Int32.MaxValue" /> より大きい数値を表している場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Int64">
      <summary>64 ビット符号付き整数を表します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.CompareTo(System.Int64)">
      <summary>指定した 64 ビット符号付き整数とこのインスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。 
戻り値 	説明 	
0 より小さい値 	このインスタンスは、<paramref name="value" /> よりも小さくなっています。 	
0 	このインスタンスは <paramref name="value" /> と等価です。 	
0 を超える値 	このインスタンスは <paramref name="value" /> よりも大きくなっています。</returns>
      <param name="value">比較対象の整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int64.Equals(System.Int64)">
      <summary>対象のインスタンスが、指定した <see cref="T:System.Int64" /> 値に等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> がこのインスタンスと同じ値を保持している場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較する <see cref="T:System.Int64" /> 値。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int64.Equals(System.Object)">
      <summary>対象のインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> が <see cref="T:System.Int64" /> のインスタンスで、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int64.GetHashCode">
      <summary>対象のインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Int64.MaxValue">
      <summary>Int64 の最大有効値を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Int64.MinValue">
      <summary>Int64 の最小有効値を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.Parse(System.String)">
      <summary>数値の文字列形式を、それと等価な 64 ビット符号付き整数に変換します。</summary>
      <returns>
        <paramref name="s" /> に格納されている数値と等しい 64 ビット符号付き整数。</returns>
      <param name="s">変換する数値を格納する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の形式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Int64.MinValue" /> 未満の数値か、<see cref="F:System.Int64.MaxValue" /> より大きい数値を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>指定したスタイルの数値の文字列形式を、それと等価の 64 ビット符号付き整数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定した数値と等しい 64 ビット符号付き整数。</returns>
      <param name="s">変換する数値を格納する文字列。</param>
      <param name="style">
        <paramref name="s" /> で使用可能な書式を示す、<see cref="T:System.Globalization.NumberStyles" /> 値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の書式が、<paramref name="style" /> に準拠した書式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Int64.MinValue" /> 未満の数値か、<see cref="F:System.Int64.MaxValue" /> より大きい数値を表しています。 または <paramref name="style" /> は小数部の桁をサポートしますが、<paramref name="s" /> の小数部の桁に 0 以外のものがあります。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>指定したスタイルおよびカルチャに固有の書式による数値の文字列形式を、それと等価の 64 ビット符号付き整数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定した数値と等しい 64 ビット符号付き整数。</returns>
      <param name="s">変換する数値を格納する文字列。</param>
      <param name="style">
        <paramref name="s" /> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャに固有の書式情報を提供する <see cref="T:System.IFormatProvider" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の書式が、<paramref name="style" /> に準拠した書式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Int64.MinValue" /> 未満の数値か、<see cref="F:System.Int64.MaxValue" /> より大きい数値を表しています。 または <paramref name="style" /> は小数部の桁をサポートしますが、<paramref name="s" /> の小数部の桁に 0 以外のものがあります。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式による数値の文字列形式を、それと等価な 64 ビット符号付き整数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定した数値と等しい 64 ビット符号付き整数。</returns>
      <param name="s">変換する数値を格納する文字列。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の形式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Int64.MinValue" /> 未満の数値か、<see cref="F:System.Int64.MaxValue" /> より大きい数値を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.System#IComparable#CompareTo(System.Object)">
      <summary>現在のインスタンスを同じ型の別のオブジェクトと比較し、現在のインスタンスの並べ替え順序での位置が、比較対象のオブジェクトと比べて前か、後か、または同じかを示す整数を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対順序を示す符号付き整数。 
戻り値 	説明 	
0 より小さい値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも前です。 	
0 	このインスタンスは、並べ替え順序で、<paramref name="value" /> と同じ位置に出現します。 	
0 を超える値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも後ろです。 または <paramref name="value" /> は null なので、</returns>
      <param name="value">対象のインスタンスと比較する対象のオブジェクト、または null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が <see cref="T:System.Int64" /> ではありません。</exception>
    </member>
    <member name="M:System.Int64.ToString">
      <summary>このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
      <returns>値が負の場合はマイナス記号を伴い、先行ゼロを含まない 0 から 9 の一連の数字から構成される、このインスタンスの値の文字列形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.ToString(System.IFormatProvider)">
      <summary>このインスタンスの数値を、指定したカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="provider">カルチャ固有の書式情報を提供する <see cref="T:System.IFormatProvider" />。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.ToString(System.String)">
      <summary>指定した書式を使用して、このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="format">数値書式指定文字列。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> が無効であるか、サポートされていません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.ToString(System.String,System.IFormatProvider)">
      <summary>このインスタンスの数値を、指定した書式およびカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> および <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="format">数値書式指定文字列。</param>
      <param name="provider">このインスタンスに関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> が無効であるか、サポートされていません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)">
      <summary>指定したスタイルおよびカルチャに固有の書式による数値の文字列形式を、それと等価の 64 ビット符号付き整数に変換します。 戻り値は、変換が成功したか失敗したかを示します。</summary>
      <returns>
        <paramref name="s" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">変換する数値を格納する文字列。 文字列は、<paramref name="style" /> で指定されたスタイルを使用して解釈されます。</param>
      <param name="style">
        <paramref name="s" /> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="result">変換が成功した場合、このメソッドが返されるときに、<paramref name="s" /> に格納された数値と等価の 64 ビット符号付き整数値を格納します。変換に失敗した場合は 0 を格納します。 <paramref name="s" /> パラメーターが null または <see cref="F:System.String.Empty" /> であるか、<paramref name="style" /> に準拠した形式ではない、または <see cref="F:System.Int64.MinValue" /> より小さいか <see cref="F:System.Int64.MaxValue" /> より大きい数値を表している場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Int64@)">
      <summary>数値の文字列形式を、それと等価な 64 ビット符号付き整数に変換します。 戻り値は、変換が成功したか失敗したかを示します。</summary>
      <returns>
        <paramref name="s" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">変換する数値を格納する文字列。</param>
      <param name="result">変換が成功した場合、このメソッドが返されるときに、<paramref name="s" /> に格納された数値と等価の 64 ビット符号付き整数値を格納します。変換に失敗した場合は 0 を格納します。 <paramref name="s" /> パラメーターが null または <see cref="F:System.String.Empty" /> であるか、正しい形式ではない、または  <see cref="F:System.Int64.MinValue" /> より小さいか <see cref="F:System.Int64.MaxValue" /> より大きい数値を表している場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.IntPtr">
      <summary>ポインターまたはハンドルを表すときに使用されるプラットフォーム固有の型。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int32)">
      <summary>指定した 32 ビットのポインターまたはハンドルを使用して、<see cref="T:System.IntPtr" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">32 ビット符号付き整数に含まれているポインターまたはハンドル。</param>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int64)">
      <summary>64 ビット ポインターを指定して、<see cref="T:System.IntPtr" /> の新しいインスタンスを初期化します。</summary>
      <param name="value">64 ビット符号付き整数に含まれているポインターまたはハンドル。</param>
      <exception cref="T:System.OverflowException">32 ビット プラットフォームでは、<paramref name="value" /> が大きすぎる、または小さすぎて、<see cref="T:System.IntPtr" /> として表すことができません。</exception>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Void*)">
      <summary>指定されていない型へのポインターを使用して、<see cref="T:System.IntPtr" /> の新しいインスタンスを初期化します。</summary>
      <param name="value">指定されていない型を指すポインター。</param>
    </member>
    <member name="M:System.IntPtr.Add(System.IntPtr,System.Int32)">
      <summary>ポインターの値にオフセットを加算します。</summary>
      <returns>
        <paramref name="pointer" /> への <paramref name="offset" /> の加算が反映された新しいポインター。</returns>
      <param name="pointer">オフセットを加算するポインター。</param>
      <param name="offset">加算するオフセット。</param>
    </member>
    <member name="M:System.IntPtr.Equals(System.Object)">
      <summary>対象のインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> が <see cref="T:System.IntPtr" /> のインスタンスで、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト、または null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IntPtr.GetHashCode">
      <summary>対象のインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
      <summary>ポインターの値にオフセットを加算します。</summary>
      <returns>
        <paramref name="pointer" /> への <paramref name="offset" /> の加算が反映された新しいポインター。</returns>
      <param name="pointer">オフセットを加算するポインター。</param>
      <param name="offset">加算するオフセット。</param>
    </member>
    <member name="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)">
      <summary>
        <see cref="T:System.IntPtr" /> の 2 つの指定したインスタンスが等しいかどうかを判断します。</summary>
      <returns>
        <paramref name="value1" /> が <paramref name="value2" /> に等しい場合は true。それ以外の場合は false。</returns>
      <param name="value1">比較する最初のポインターまたはハンドル。</param>
      <param name="value2">比較する 2 番目のポインターまたはハンドル。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int32)~System.IntPtr">
      <summary>32 ビット符号付き整数の値を <see cref="T:System.IntPtr" /> に変換します。</summary>
      <returns>
        <paramref name="value" /> に初期化される <see cref="T:System.IntPtr" /> の新しいインスタンス。</returns>
      <param name="value">32 ビット符号付き整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr">
      <summary>64 ビット符号付き整数の値を <see cref="T:System.IntPtr" /> に変換します。</summary>
      <returns>
        <paramref name="value" /> に初期化される <see cref="T:System.IntPtr" /> の新しいインスタンス。</returns>
      <param name="value">64 ビット符号付き整数</param>
      <exception cref="T:System.OverflowException">32 ビット プラットフォームでは、<paramref name="value" /> が大きすぎて、<see cref="T:System.IntPtr" /> として表すことができません。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int64">
      <summary>指定した <see cref="T:System.IntPtr" /> の値を 64 ビット符号付き整数に変換します。</summary>
      <returns>
        <paramref name="value" /> の内容。</returns>
      <param name="value">変換するポインターまたはハンドル。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*">
      <summary>指定した <see cref="T:System.IntPtr" /> の値を指定されていない型のポインターに変換します。</summary>
      <returns>
        <paramref name="value" /> の内容。</returns>
      <param name="value">変換するポインターまたはハンドル。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32">
      <summary>指定した <see cref="T:System.IntPtr" /> の値を 32 ビット符号付き整数に変換します。</summary>
      <returns>
        <paramref name="value" /> の内容。</returns>
      <param name="value">変換するポインターまたはハンドル。</param>
      <exception cref="T:System.OverflowException">64 ビット プラットフォームでは、<paramref name="value" /> の値が大きすぎて、32 ビット符号付き整数として表すことができません。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
      <summary>指定されていない型の指定のポインターを <see cref="T:System.IntPtr" /> に変換します。</summary>
      <returns>
        <paramref name="value" /> に初期化される <see cref="T:System.IntPtr" /> の新しいインスタンス。</returns>
      <param name="value">指定されていない型を指すポインター。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)">
      <summary>
        <see cref="T:System.IntPtr" /> の 2 つの指定したインスタンスが等しくないかどうかを判断します。</summary>
      <returns>
        <paramref name="value1" /> が <paramref name="value2" /> と等しくない場合は true。それ以外の場合は false。</returns>
      <param name="value1">比較する最初のポインターまたはハンドル。</param>
      <param name="value2">比較する 2 番目のポインターまたはハンドル。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
      <summary>ポインターの値からオフセットを減算します。</summary>
      <returns>
        <paramref name="pointer" /> からの <paramref name="offset" /> の減算が反映された新しいポインター。</returns>
      <param name="pointer">オフセットを減算するポインター。</param>
      <param name="offset">減算するオフセット。</param>
    </member>
    <member name="P:System.IntPtr.Size">
      <summary>このインスタンスのサイズを取得します。</summary>
      <returns>このプロセスでのポインターまたはハンドルのサイズ (バイト)。 このプロパティの値は 32 ビット プロセスでは 4、64 ビット プロセスでは 8 です。 C# および Visual Basic コンパイラを使用してコードをコンパイルするときに /platform スイッチを設定することで、プロセス型を定義できます。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)">
      <summary>ポインターの値からオフセットを減算します。</summary>
      <returns>
        <paramref name="pointer" /> からの <paramref name="offset" /> の減算が反映された新しいポインター。</returns>
      <param name="pointer">オフセットを減算するポインター。</param>
      <param name="offset">減算するオフセット。</param>
    </member>
    <member name="M:System.IntPtr.ToInt32">
      <summary>このインスタンスの値を 32 ビット符号付き整数に変換します。</summary>
      <returns>このインスタンスの値と等価な 32 ビット符号付き整数。</returns>
      <exception cref="T:System.OverflowException">64 ビット プラットフォームでは、このインスタンスの値は大きすぎる、または小さすぎて、32 ビット符号付き整数として表すことができません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.ToInt64">
      <summary>このインスタンスの値を 64 ビット符号付き整数に変換します。</summary>
      <returns>このインスタンスの値と等価な 64 ビット符号付き整数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.ToPointer">
      <summary>このインスタンスの値を指定されていない型のポインターに変換します。</summary>
      <returns>
        <see cref="T:System.Void" /> のポインター。つまり指定されていない型のデータが格納されているメモリのポインター。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.ToString">
      <summary>現在の <see cref="T:System.IntPtr" /> オブジェクトの数値を等価の文字列形式に変換します。</summary>
      <returns>このインスタンスの値の文字列形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.ToString(System.String)">
      <summary>現在の <see cref="T:System.IntPtr" /> オブジェクトの数値を等価の文字列形式に変換します。</summary>
      <returns>現在の <see cref="T:System.IntPtr" /> オブジェクトの値の文字列形式。</returns>
      <param name="format">現在の <see cref="T:System.IntPtr" /> オブジェクトをどのように変換するかを制御する書式指定。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.IntPtr.Zero">
      <summary>0 に初期化されたポインターまたはハンドルを表す読み取り専用フィールド。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.InvalidCastException">
      <summary>無効なキャストまたは明示的な型変換に対してスローされる例外。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.InvalidCastException.#ctor">
      <summary>
        <see cref="T:System.InvalidCastException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.InvalidCastException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.InvalidCastException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。 <paramref name="innerException" /> パラメーターが null 参照 (Visual Basic の場合は Nothing) でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String,System.Int32)">
      <summary>指定したメッセージとエラー コードを使用して、<see cref="T:System.InvalidCastException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外が発生した理由を示すメッセージ。</param>
      <param name="errorCode">この例外に関連付けられているエラー コード (HRESULT) 値。</param>
    </member>
    <member name="T:System.InvalidOperationException">
      <summary>オブジェクトの現在の状態に対して無効なメソッド呼び出しが行われた場合にスローされる例外。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.InvalidOperationException.#ctor">
      <summary>
        <see cref="T:System.InvalidOperationException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.InvalidOperationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.InvalidOperationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。 <paramref name="innerException" /> パラメーターが null 参照 (Visual Basic の場合は Nothing) でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.InvalidTimeZoneException">
      <summary>タイム ゾーン情報が無効である場合にスローされる例外。</summary>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor">
      <summary>システム提供のメッセージを使用して、<see cref="T:System.InvalidTimeZoneException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.String)">
      <summary>指定したメッセージ文字列を使用して、<see cref="T:System.InvalidTimeZoneException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明する文字列。</param>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.InvalidTimeZoneException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明する文字列。</param>
      <param name="innerException">現在の例外の原因である例外。</param>
    </member>
    <member name="T:System.IObservable`1">
      <summary>プッシュ ベースの通知のプロバイダーを定義します。</summary>
      <typeparam name="T">通知情報を提供するオブジェクト。</typeparam>
    </member>
    <member name="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
      <summary>オブザーバーが通知を受け取ることをプロバイダーに通知します。</summary>
      <returns>プロバイダーが通知の送信を完了する前に、オブザーバーが通知の受信を停止できるインターフェイスへの参照。</returns>
      <param name="observer">通知を受け取るオブジェクト。</param>
    </member>
    <member name="T:System.IObserver`1">
      <summary>プッシュ ベースの通知を受け取るための機構を提供します。</summary>
      <typeparam name="T">通知情報を提供するオブジェクト。</typeparam>
    </member>
    <member name="M:System.IObserver`1.OnCompleted">
      <summary>プロバイダーがプッシュ ベースの通知の送信を完了したことをオブザーバーに通知します。</summary>
    </member>
    <member name="M:System.IObserver`1.OnError(System.Exception)">
      <summary>プロバイダーでエラー状態が発生したことをオブザーバーに通知します。</summary>
      <param name="error">エラーに関する追加情報を提供するオブジェクト。</param>
    </member>
    <member name="M:System.IObserver`1.OnNext(`0)">
      <summary>オブザーバーに新しいデータを提供します。</summary>
      <param name="value">現在の通知情報。</param>
    </member>
    <member name="T:System.IProgress`1">
      <summary>進行状況の更新のプロバイダーを定義します。</summary>
      <typeparam name="T">進行状況の更新プログラム値の型。</typeparam>
    </member>
    <member name="M:System.IProgress`1.Report(`0)">
      <summary>進行状況の更新を報告します。</summary>
      <param name="value">更新の進捗状況の値。</param>
    </member>
    <member name="T:System.Lazy`1">
      <summary>遅延初期化のサポートを提供します。</summary>
      <typeparam name="T">遅延初期化されるオブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Lazy`1.#ctor">
      <summary>
        <see cref="T:System.Lazy`1" /> クラスの新しいインスタンスを初期化します。 遅延初期化が発生した場合、対象の型の既定のコンストラクターが使用されます。</summary>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.Lazy`1" /> クラスの新しいインスタンスを初期化します。 遅延初期化が発生した場合、対象の型の既定のコンストラクターと指定された初期化モードが使用されます。</summary>
      <param name="isThreadSafe">このインスタンスを複数のスレッドで同時に使用できるようにする場合は true。インスタンスを一度に 1 つのスレッドでしか使用できないようにする場合は false。</param>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0})">
      <summary>
        <see cref="T:System.Lazy`1" /> クラスの新しいインスタンスを初期化します。 遅延初期化が発生した場合、指定された初期化関数が使用されます。</summary>
      <param name="valueFactory">必要時に遅延初期化される値を生成するために呼び出されるデリゲート。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> は null です。</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
      <summary>
        <see cref="T:System.Lazy`1" /> クラスの新しいインスタンスを初期化します。 遅延初期化が発生した場合、指定された初期化関数および初期化モードが使用されます。</summary>
      <param name="valueFactory">必要時に遅延初期化される値を生成するために呼び出されるデリゲート。</param>
      <param name="isThreadSafe">このインスタンスを複数のスレッドで同時に使用できるようにする場合は true。このインスタンスを一度に 1 つのスレッドでしか使用できないようにする場合は false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> は null です。</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
      <summary>指定された初期化関数とスレッド セーフ モードを使用する <see cref="T:System.Lazy`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="valueFactory">必要時に遅延初期化される値を生成するために呼び出されるデリゲート。</param>
      <param name="mode">スレッド セーフ モードを指定する列挙値の 1 つ。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> に無効な値が含まれています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> は null です。</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
      <summary>
        <paramref name="T" /> の既定のコンストラクターと指定されたスレッド セーフ モードを使用する <see cref="T:System.Lazy`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="mode">スレッド セーフ モードを指定する列挙値の 1 つ。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> に無効な値が含まれています。</exception>
    </member>
    <member name="P:System.Lazy`1.IsValueCreated">
      <summary>この <see cref="T:System.Lazy`1" /> インスタンスに対して値が作成されているかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Lazy`1" /> インスタンスに対して値が作成されている場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Lazy`1.ToString">
      <summary>このインスタンスの <see cref="P:System.Lazy`1.Value" /> プロパティの文字列形式を作成して返します。</summary>
      <returns>値が作成された (つまり、<see cref="P:System.Lazy`1.IsValueCreated" /> プロパティが true を返す) 場合は、このインスタンスの <see cref="P:System.Lazy`1.Value" /> プロパティに対して <see cref="M:System.Object.ToString" /> メソッドを呼び出した結果。 それ以外の場合は、値が作成されなかったことを示す文字列。</returns>
      <exception cref="T:System.NullReferenceException">
        <see cref="P:System.Lazy`1.Value" /> プロパティが null である。</exception>
    </member>
    <member name="P:System.Lazy`1.Value">
      <summary>現在の <see cref="T:System.Lazy`1" /> インスタンスの遅延初期化された値を取得します。</summary>
      <returns>現在の <see cref="T:System.Lazy`1" /> インスタンスの遅延初期化された値。</returns>
      <exception cref="T:System.MemberAccessException">
        <see cref="T:System.Lazy`1" /> インスタンスは、遅延初期化されている型の既定のコンストラクターを使用して初期化されており、コンストラクターに対するアクセス許可がありません。</exception>
      <exception cref="T:System.MissingMemberException">
        <see cref="T:System.Lazy`1" /> インスタンスは、遅延初期化されている型の既定のコンストラクターを使用して初期化されており、この型にはパラメーターがない public コンストラクターがありません。</exception>
      <exception cref="T:System.InvalidOperationException">初期化関数が、このインスタンスで <see cref="P:System.Lazy`1.Value" /> へのアクセスを試行します。</exception>
    </member>
    <member name="T:System.Lazy`2">
      <summary>Managed Extensibility Framework で使用されるオブジェクトとその関連メタデータへの遅延間接参照を提供します。</summary>
      <typeparam name="T">参照されるオブジェクトの型。</typeparam>
      <typeparam name="TMetadata">メタデータの型。</typeparam>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1)">
      <summary>指定したメタデータで、参照されるオブジェクトを取得するために指定された関数を使用して、<see cref="T:System.Lazy`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="valueFactory">参照されるオブジェクトを返す関数。</param>
      <param name="metadata">参照されるオブジェクトに関連付けられたメタデータ。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Boolean)">
      <summary>指定されたメタデータとスレッド セーフの値で、参照されるオブジェクトを取得するために指定された関数を使用して、<see cref="T:System.Lazy`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="valueFactory">参照されるオブジェクトを返す関数。</param>
      <param name="metadata">参照されるオブジェクトに関連付けられたメタデータ。</param>
      <param name="isThreadSafe">作成される <see cref="T:System.Lazy`2" /> オブジェクトがスレッド セーフかどうかを示します。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Threading.LazyThreadSafetyMode)">
      <summary>指定されたメタデータとスレッド同期モードで、参照されるオブジェクトを取得するために指定された関数を使用して、<see cref="T:System.Lazy`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="valueFactory">参照されるオブジェクトを返す関数</param>
      <param name="metadata">参照されるオブジェクトに関連付けられたメタデータ。</param>
      <param name="mode">スレッド同期モード</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1)">
      <summary>指定されたメタデータを使用して、<see cref="T:System.Lazy`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="metadata">参照されるオブジェクトに関連付けられたメタデータ。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1,System.Boolean)">
      <summary>指定されたメタデータとスレッド セーフの値を使用して、<see cref="T:System.Lazy`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="metadata">参照されるオブジェクトに関連付けられたメタデータ。</param>
      <param name="isThreadSafe">作成される <see cref="T:System.Lazy`2" /> オブジェクトがスレッド セーフかどうかを示します。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1,System.Threading.LazyThreadSafetyMode)">
      <summary>指定されたメタデータとスレッド同期モードを使用して、<see cref="T:System.Lazy`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="metadata">参照されるオブジェクトに関連付けられたメタデータ。</param>
      <param name="mode">スレッド同期モード。</param>
    </member>
    <member name="P:System.Lazy`2.Metadata">
      <summary>参照されるオブジェクトに関連付けられたメタデータを取得します。</summary>
      <returns>参照されるオブジェクトに関連付けられたメタデータ。</returns>
    </member>
    <member name="T:System.MemberAccessException">
      <summary>クラス メンバーにアクセスしようとして失敗した場合にスローされる例外。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MemberAccessException.#ctor">
      <summary>
        <see cref="T:System.MemberAccessException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.MemberAccessException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.MemberAccessException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="inner">現在の例外の原因である例外。 <paramref name="inner" /> パラメーターが null 参照 (Visual Basic の場合は Nothing) でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.MissingMemberException">
      <summary>存在しないクラス メンバーに動的にアクセスしようとした場合にスローされる例外。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MissingMemberException.#ctor">
      <summary>
        <see cref="T:System.MissingMemberException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.MissingMemberException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.MissingMemberException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="inner">現在の例外の原因となった、<see cref="T:System.Exception" /> のインスタンス。 <paramref name="inner" /> が null 参照 (Visual Basic の場合は Nothing) でない場合は、<paramref name="inner" /> を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="P:System.MissingMemberException.Message">
      <summary>存在しないメンバーのクラス名、メンバー名、シグネチャを示す文字列を取得します。</summary>
      <returns>エラー メッセージ文字列。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.MTAThreadAttribute">
      <summary>アプリケーションの COM スレッド モデルがマルチスレッド アパートメント (MTA: Multithreaded Apartment) であることを示します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.MTAThreadAttribute.#ctor">
      <summary>
        <see cref="T:System.MTAThreadAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.MulticastDelegate">
      <summary>マルチキャスト デリゲート、つまり呼び出しリストに複数の要素を組み込むことができるデリゲートを表します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MulticastDelegate.Equals(System.Object)">
      <summary>このマルチキャスト デリゲートと指定されたオブジェクトが等しいかどうかを確認します。</summary>
      <returns>
        <paramref name="obj" /> と、このインスタンスの呼び出しリストが同じである場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
      <exception cref="T:System.MemberAccessException">抽象クラスのインスタンスは作成できません。または、このメンバーが遅延バインディングの機構を使用して呼び出されました。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MulticastDelegate.GetHashCode">
      <summary>対象のインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <exception cref="T:System.MemberAccessException">抽象クラスのインスタンスは作成できません。または、このメンバーが遅延バインディングの機構を使用して呼び出されました。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MulticastDelegate.GetInvocationList">
      <summary>このマルチキャスト デリゲートの呼び出しリストを呼び出し順に返します。</summary>
      <returns>対象のインスタンスの呼び出しリストと完全に一致する呼び出しリストを持つデリゲートの配列。</returns>
      <exception cref="T:System.MemberAccessException">抽象クラスのインスタンスは作成できません。または、このメンバーが遅延バインディングの機構を使用して呼び出されました。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>2 つの <see cref="T:System.MulticastDelegate" /> オブジェクトが等しいかどうかを判断します。</summary>
      <returns>
        <paramref name="d1" /> と <paramref name="d2" /> の呼び出しリストが同じである場合は true。それ以外の場合は false。</returns>
      <param name="d1">左オペランド。</param>
      <param name="d2">右オペランド。</param>
      <exception cref="T:System.MemberAccessException">抽象クラスのインスタンスは作成できません。または、このメンバーが遅延バインディングの機構を使用して呼び出されました。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>2 つの <see cref="T:System.MulticastDelegate" /> オブジェクトが等しくないかどうかを判断します。</summary>
      <returns>
        <paramref name="d1" /> と <paramref name="d2" /> の呼び出しリストが異なる場合は true。それ以外の場合は false。</returns>
      <param name="d1">左オペランド。</param>
      <param name="d2">右オペランド。</param>
      <exception cref="T:System.MemberAccessException">抽象クラスのインスタンスは作成できません。または、このメンバーが遅延バインディングの機構を使用して呼び出されました。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="T:System.NotImplementedException">
      <summary>要求されたメソッドまたは操作が実装されない場合にスローされる例外。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.NotImplementedException.#ctor">
      <summary>
        <see cref="T:System.NotImplementedException" /> クラスの新しいインスタンスを既定のプロパティを使用して初期化します。</summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.NotImplementedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.NotImplementedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="inner">現在の例外の原因である例外。 <paramref name="inner" /> パラメーターが null ではない場合、現在の例外は内部例外を処理する catch ブロックで発生します。</param>
    </member>
    <member name="T:System.NotSupportedException">
      <summary>呼び出されたメソッドがサポートされていない場合、または呼び出された機能を備えていないストリームに対して読み取り、シーク、書き込みが試行された場合にスローされる例外。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.NotSupportedException.#ctor">
      <summary>
        <see cref="T:System.NotSupportedException" /> クラスの新しいインスタンスの <see cref="P:System.Exception.Message" /> プロパティを初期化し、その値としてエラーを説明するシステム提供のメッセージを指定します。 このメッセージは、システムの現在のカルチャを考慮して指定します。</summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.NotSupportedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明する <see cref="T:System.String" />。 <paramref name="message" /> の内容は、ユーザーが理解できる内容にします。 このコンストラクターの呼び出し元では、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.NotSupportedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。 <paramref name="innerException" /> パラメーターが null 参照でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Nullable">
      <summary>null を割り当て可能な値型をサポートします。 このクラスは継承できません。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Nullable.Compare``1(System.Nullable{``0},System.Nullable{``0})">
      <summary>2 つの <see cref="T:System.Nullable`1" /> オブジェクトの相対値を比較します。</summary>
      <returns>
        <paramref name="n1" /> パラメーターと <paramref name="n2" /> パラメーターの相対値を表す整数。 
戻り値 	説明 	
0 より小さい値 	<paramref name="n1" /> の <see cref="P:System.Nullable`1.HasValue" /> プロパティが false であり、<paramref name="n2" /> の <see cref="P:System.Nullable`1.HasValue" /> プロパティが true です。 または <paramref name="n1" /> と <paramref name="n2" /> の <see cref="P:System.Nullable`1.HasValue" /> プロパティが true であり、<paramref name="n1" /> の <see cref="P:System.Nullable`1.Value" /> プロパティの値が、<paramref name="n2" /> の <see cref="P:System.Nullable`1.Value" /> プロパティの値よりも小さい値です。 	
0 	<paramref name="n1" /> と <paramref name="n2" /> の <see cref="P:System.Nullable`1.HasValue" /> プロパティが false です。 または <paramref name="n1" /> と <paramref name="n2" /> の <see cref="P:System.Nullable`1.HasValue" /> プロパティが、true であり、<paramref name="n1" /> の <see cref="P:System.Nullable`1.Value" /> プロパティの値が、<paramref name="n2" /> の <see cref="P:System.Nullable`1.Value" /> プロパティの値と同じです。 	
0 を超える値 	<paramref name="n1" /> の <see cref="P:System.Nullable`1.HasValue" /> プロパティが true であり、<paramref name="n2" /> の <see cref="P:System.Nullable`1.HasValue" /> プロパティが false です。 または <paramref name="n1" /> と <paramref name="n2" /> の <see cref="P:System.Nullable`1.HasValue" /> プロパティが true であり、<paramref name="n1" /> の <see cref="P:System.Nullable`1.Value" /> プロパティの値が、<paramref name="n2" /> の <see cref="P:System.Nullable`1.Value" /> プロパティの値よりも大きい値です。</returns>
      <param name="n1">
        <see cref="T:System.Nullable`1" /> オブジェクト。</param>
      <param name="n2">
        <see cref="T:System.Nullable`1" /> オブジェクト。</param>
      <typeparam name="T">
        <paramref name="n1" /> および <paramref name="n2" /> パラメーターの基になる値型。</typeparam>
    </member>
    <member name="M:System.Nullable.Equals``1(System.Nullable{``0},System.Nullable{``0})">
      <summary>2 つの指定された <see cref="T:System.Nullable`1" /> オブジェクトが等しいかどうかを示します。</summary>
      <returns>
        <paramref name="n1" /> パラメーターが <paramref name="n2" /> パラメーターと等しい場合は true。それ以外の場合は false。 戻り値は、比較する 2 つのパラメーターの <see cref="P:System.Nullable`1.HasValue" /> プロパティと <see cref="P:System.Nullable`1.Value" /> プロパティによって異なります。 
戻り値 	説明 	
true 	<paramref name="n1" /> と <paramref name="n2" /> の <see cref="P:System.Nullable`1.HasValue" /> プロパティが false です。 または <paramref name="n1" /> と <paramref name="n2" /> の <see cref="P:System.Nullable`1.HasValue" /> プロパティが true で、これらのパラメーターの <see cref="P:System.Nullable`1.Value" /> プロパティが同じです。 	
false 	<see cref="P:System.Nullable`1.HasValue" /> プロパティは、一方のパラメーターについては true で、他方のパラメーターについては false です。 または <paramref name="n1" /> と <paramref name="n2" /> の <see cref="P:System.Nullable`1.HasValue" /> プロパティが true で、これらのパラメーターの <see cref="P:System.Nullable`1.Value" /> プロパティが等しくありません。</returns>
      <param name="n1">
        <see cref="T:System.Nullable`1" /> オブジェクト。</param>
      <param name="n2">
        <see cref="T:System.Nullable`1" /> オブジェクト。</param>
      <typeparam name="T">
        <paramref name="n1" /> および <paramref name="n2" /> パラメーターの基になる値型。</typeparam>
    </member>
    <member name="M:System.Nullable.GetUnderlyingType(System.Type)">
      <summary>指定した NULL 許容型の基になる型を返します。</summary>
      <returns>
        <paramref name="nullableType" /> パラメーターがクローズ ジェネリック NULL 許容型の場合は <paramref name="nullableType" /> パラメーターの型引数。それ以外の場合は null。</returns>
      <param name="nullableType">クローズ ジェネリック NULL 許容型を表す <see cref="T:System.Type" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nullableType" /> は null です。</exception>
    </member>
    <member name="T:System.Nullable`1">
      <summary>null を割り当て可能な値型を表します。</summary>
      <typeparam name="T">
        <see cref="T:System.Nullable`1" /> ジェネリック型の基になる値型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Nullable`1.#ctor(`0)">
      <summary>
        <see cref="T:System.Nullable`1" /> 構造体の新しいインスタンスを、指定の値に初期化します。</summary>
      <param name="value">値型。</param>
    </member>
    <member name="M:System.Nullable`1.Equals(System.Object)">
      <summary>現在の <see cref="T:System.Nullable`1" /> オブジェクトが指定されたオブジェクトと等しいかどうかを示します。</summary>
      <returns>
        <paramref name="other" /> パラメーターが現在の <see cref="T:System.Nullable`1" /> オブジェクトと等しい場合は true。それ以外の場合は false。 比較した値が等しいかどうかを判断する基準については、次の表を参照してください。 
戻り値 	説明 	
true 	<see cref="P:System.Nullable`1.HasValue" /> プロパティが false で、<paramref name="other" /> パラメーターが null です。 つまり、定義上は 2 つの null 値が等価です。 または <see cref="P:System.Nullable`1.HasValue" /> プロパティが true で、<see cref="P:System.Nullable`1.Value" /> プロパティによって返される値が <paramref name="other" /> パラメーターと等価です。 	
false 	現在の <see cref="T:System.Nullable`1" /> 構造体の <see cref="P:System.Nullable`1.HasValue" /> プロパティが true で、<paramref name="other" /> パラメーターが null です。 または 現在の <see cref="T:System.Nullable`1" /> 構造体の <see cref="P:System.Nullable`1.HasValue" /> プロパティが false で、<paramref name="other" /> パラメーターが null ではありません。 または 現在の <see cref="T:System.Nullable`1" /> 構造体の <see cref="P:System.Nullable`1.HasValue" /> プロパティが true で、<see cref="P:System.Nullable`1.Value" /> プロパティによって返される値が <paramref name="other" /> パラメーターと等価ではありません。</returns>
      <param name="other">オブジェクト。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Nullable`1.GetHashCode">
      <summary>
        <see cref="P:System.Nullable`1.Value" /> プロパティから返されるオブジェクトのハッシュ コードを取得します。</summary>
      <returns>
        <see cref="P:System.Nullable`1.HasValue" /> プロパティが true の場合は <see cref="P:System.Nullable`1.Value" /> プロパティから返されるオブジェクトのハッシュ コード。<see cref="P:System.Nullable`1.HasValue" /> プロパティが false の場合はゼロ (0)。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault">
      <summary>現在の <see cref="T:System.Nullable`1" /> オブジェクトの値、またはこのオブジェクトの既定値を取得します。</summary>
      <returns>
        <see cref="P:System.Nullable`1.HasValue" /> プロパティが true の場合は <see cref="P:System.Nullable`1.Value" /> プロパティの値。それ以外の場合は現在の <see cref="T:System.Nullable`1" /> オブジェクトの既定値。 既定値の型は、現在の <see cref="T:System.Nullable`1" /> オブジェクトの型引数です。既定値の値は、バイナリ ゼロだけで構成されます。</returns>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault(`0)">
      <summary>現在の <see cref="T:System.Nullable`1" /> オブジェクトの値、または指定した既定値を取得します。</summary>
      <returns>
        <see cref="P:System.Nullable`1.HasValue" /> プロパティが true の場合は <see cref="P:System.Nullable`1.Value" /> プロパティの値。それ以外の場合は <paramref name="defaultValue" /> パラメーター。</returns>
      <param name="defaultValue">
        <see cref="P:System.Nullable`1.HasValue" /> プロパティが false の場合に返す値。</param>
    </member>
    <member name="P:System.Nullable`1.HasValue">
      <summary>現在の <see cref="T:System.Nullable`1" /> オブジェクトに値があるかどうかを示す値を取得します。</summary>
      <returns>現在の <see cref="T:System.Nullable`1" /> オブジェクトに値がある場合は true。現在の <see cref="T:System.Nullable`1" /> オブジェクトに値がない場合は false。</returns>
    </member>
    <member name="M:System.Nullable`1.op_Explicit(System.Nullable{`0})~`0">
      <summary>指定した <see cref="T:System.Nullable`1" /> 値の値を返します。</summary>
      <returns>
        <paramref name="value" /> パラメーターの <see cref="P:System.Nullable`1.Value" /> プロパティの値。</returns>
      <param name="value">
        <see cref="T:System.Nullable`1" /> 値。</param>
    </member>
    <member name="M:System.Nullable`1.op_Implicit(`0)~System.Nullable{`0}">
      <summary>指定の値に初期化された新しい <see cref="T:System.Nullable`1" /> オブジェクトを作成します。</summary>
      <returns>
        <paramref name="value" /> パラメーターで <see cref="P:System.Nullable`1.Value" /> プロパティを初期化する <see cref="T:System.Nullable`1" /> オブジェクト。</returns>
      <param name="value">値型。</param>
    </member>
    <member name="M:System.Nullable`1.ToString">
      <summary>現在の <see cref="T:System.Nullable`1" /> オブジェクトの値のテキスト形式を返します。</summary>
      <returns>
        <see cref="P:System.Nullable`1.HasValue" /> プロパティが true の場合は、現在の <see cref="T:System.Nullable`1" /> オブジェクトの値のテキスト形式。<see cref="P:System.Nullable`1.HasValue" /> プロパティが false の場合は空の文字列 ("")。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Nullable`1.Value">
      <summary>現在の <see cref="T:System.Nullable`1" /> オブジェクトの値を取得します。</summary>
      <returns>
        <see cref="P:System.Nullable`1.HasValue" /> プロパティが true の場合は、現在の <see cref="T:System.Nullable`1" /> オブジェクトの値。 <see cref="P:System.Nullable`1.HasValue" /> プロパティが false の場合は、例外がスローされます。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Nullable`1.HasValue" /> プロパティが false である。</exception>
    </member>
    <member name="T:System.NullReferenceException">
      <summary>null オブジェクト参照を逆参照しようとした場合にスローされる例外。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.NullReferenceException.#ctor">
      <summary>
        <see cref="T:System.NullReferenceException" /> クラスの新しいインスタンスを初期化し、その <see cref="P:System.Exception.Message" /> プロパティの値として、"オブジェクトのインスタンスを指定する必要がある部分に null 値が指定されています" などのシステム提供のエラーを指定します。このメッセージは、システムの現在のカルチャを考慮して指定します。</summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.NullReferenceException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明する <see cref="T:System.String" />。 <paramref name="message" /> の内容は、ユーザーが理解できる内容にします。 このコンストラクターの呼び出し元では、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.NullReferenceException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。 <paramref name="innerException" /> パラメーターが null でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Object">
      <summary>.NET Framework クラス階層のすべてのクラスをサポートし、派生クラスに下位レベルのサービスを提供します。 これは、.NET Framework の全クラスの基底クラスであり、型階層のルートです。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Object.#ctor">
      <summary>
        <see cref="T:System.Object" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Object.Equals(System.Object)">
      <summary>指定のオブジェクトが現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Object.Equals(System.Object,System.Object)">
      <summary>指定されたインスタンスが等しいかどうかを判断します。</summary>
      <returns>オブジェクトが等しいと見なされた場合は true。それ以外の場合は false。 <paramref name="objA" /> と <paramref name="objB" /> の両方が null の場合、このメソッドは true を返します。</returns>
      <param name="objA">比較対象の第 1 オブジェクト。</param>
      <param name="objB">2 番目に比較するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Object.Finalize">
      <summary>オブジェクトがガベージ コレクションにより収集される前に、そのオブジェクトがリソースを解放し、その他のクリーンアップ操作を実行できるようにします。</summary>
    </member>
    <member name="M:System.Object.GetHashCode">
      <summary>既定のハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Object.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Object.MemberwiseClone">
      <summary>現在の <see cref="T:System.Object" /> の簡易コピーを作成します。</summary>
      <returns>現在の <see cref="T:System.Object" /> の簡易コピー。</returns>
    </member>
    <member name="M:System.Object.ReferenceEquals(System.Object,System.Object)">
      <summary>指定した複数の <see cref="T:System.Object" /> インスタンスが同一かどうかを判断します。</summary>
      <returns>
        <paramref name="objA" /> が <paramref name="objB" /> と同一のインスタンスである場合、または両方のインスタンスが null 参照の場合は true。それ以外の場合は false。</returns>
      <param name="objA">比較対象の第 1 オブジェクト。</param>
      <param name="objB">2 番目に比較するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Object.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.ObjectDisposedException">
      <summary>破棄されたオブジェクトで操作が実行されるとスローされる例外。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String)">
      <summary>破棄されたオブジェクトの名前が含まれている文字列を使用して、<see cref="T:System.ObjectDisposedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="objectName">破棄されたオブジェクトの名前が含まれている文字列。</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.ObjectDisposedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。 <paramref name="innerException" /> が null でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.String)">
      <summary>指定したオブジェクト名とメッセージを使用して、<see cref="T:System.ObjectDisposedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="objectName">破棄されたオブジェクトの名前。</param>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
    </member>
    <member name="P:System.ObjectDisposedException.Message">
      <summary>エラーを説明するメッセージを取得します。</summary>
      <returns>エラーを説明する文字列。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.ObjectDisposedException.ObjectName">
      <summary>破棄されたオブジェクトの名前を取得します。</summary>
      <returns>破棄されたオブジェクトの名前が含まれている文字列。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.ObsoleteAttribute">
      <summary>今後使用しないプログラム要素にマークを付けます。 このクラスは継承できません。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor">
      <summary>
        <see cref="T:System.ObsoleteAttribute" /> クラスの新しいインスタンスを既定のプロパティを使用して初期化します。</summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String)">
      <summary>代替手段メッセージを指定して、<see cref="T:System.ObsoleteAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">代わりに使用できる手段を説明する文字列。</param>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String,System.Boolean)">
      <summary>代替手段メッセージと、今後使用しないとマークされた要素を使用するとエラーになるかどうかを示す Boolean 値を指定して、<see cref="T:System.ObsoleteAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">代わりに使用できる手段を説明する文字列。</param>
      <param name="error">今後使用しないとマークした要素が使用された場合にエラーと見なすかどうかを示す Boolean 値。</param>
    </member>
    <member name="P:System.ObsoleteAttribute.IsError">
      <summary>今後使用しないとマークしたプログラム要素が使用された場合に、コンパイラでエラーとして処理するかどうかを示す Boolean 値を取得します。</summary>
      <returns>今後使用しないとマークした要素を使用するとエラーと見なす場合は true。それ以外の場合は false。 既定値は、false です。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ObsoleteAttribute.Message">
      <summary>代わりに使用できるプログラム要素の説明などを含む代替手段メッセージを取得します。</summary>
      <returns>代替手段を説明する文字列。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.OutOfMemoryException">
      <summary>プログラムの実行を継続するためのメモリが不足している場合にスローされる例外。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor">
      <summary>
        <see cref="T:System.OutOfMemoryException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.OutOfMemoryException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.OutOfMemoryException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。 <paramref name="innerException" /> パラメーターが null 参照 (Visual Basic の場合は Nothing) でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.OverflowException">
      <summary>checked コンテキストで、算術演算、キャスト演算、または変換演算の結果オーバーフローが発生した場合にスローされる例外。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.OverflowException.#ctor">
      <summary>
        <see cref="T:System.OverflowException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.OverflowException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.OverflowException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。 <paramref name="innerException" /> パラメーターが null 参照 (Visual Basic の場合は Nothing) でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.ParamArrayAttribute">
      <summary>メソッドを呼び出すときに、任意の数の引数を指定できることを示します。 このクラスは継承できません。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ParamArrayAttribute.#ctor">
      <summary>
        <see cref="T:System.ParamArrayAttribute" /> クラスの新しいインスタンスを既定のプロパティを使用して初期化します。</summary>
    </member>
    <member name="T:System.PlatformNotSupportedException">
      <summary>特定のプラットフォームで機能が実行されない場合にスローされる例外。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor">
      <summary>
        <see cref="T:System.PlatformNotSupportedException" /> クラスの新しいインスタンスを既定のプロパティを使用して初期化します。</summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.PlatformNotSupportedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の理由を説明するテキスト メッセージ。</param>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.PlatformNotSupportedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="inner">現在の例外の原因である例外。 <paramref name="inner" /> パラメーターが null ではない場合、現在の例外は内部例外を処理する catch ブロックで発生します。</param>
    </member>
    <member name="T:System.Predicate`1">
      <summary>一連の基準を定義し、指定されたオブジェクトがこれらの基準を満たしているかどうかを判断するメソッドを表します。</summary>
      <typeparam name="T">比較するオブジェクトの型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Predicate`1.#ctor(System.Object,System.IntPtr)">
    </member>
    <member name="M:System.Predicate`1.BeginInvoke(`0,System.AsyncCallback,System.Object)">
    </member>
    <member name="M:System.Predicate`1.EndInvoke(System.IAsyncResult)">
    </member>
    <member name="M:System.Predicate`1.Invoke(`0)">
    </member>
    <member name="T:System.RankException">
      <summary>間違った次元数の配列がメソッドに渡された際にスローされる例外。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RankException.#ctor">
      <summary>
        <see cref="T:System.RankException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.RankException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.RankException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明する <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.RankException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.RankException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。 <paramref name="innerException" /> パラメーターが null 参照 (Visual Basic の場合は Nothing) でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.RuntimeFieldHandle">
      <summary>内部メタデータ トークンを使用するフィールドを表します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.Object)">
      <summary>現在のインスタンスが指定したオブジェクトと等しいかどうかを示します。</summary>
      <returns>
        <paramref name="obj" /> が <see cref="T:System.RuntimeFieldHandle" /> で、現在のインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在のインスタンスと比較する対象のオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.RuntimeFieldHandle)">
      <summary>現在のインスタンスが指定した <see cref="T:System.RuntimeFieldHandle" /> と等しいかどうかを示します。</summary>
      <returns>
        <paramref name="handle" /> の値が現在のインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
      <param name="handle">現在のインスタンスと比較する <see cref="T:System.RuntimeFieldHandle" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeFieldHandle.GetHashCode">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeFieldHandle.op_Equality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)">
      <summary>2 つの <see cref="T:System.RuntimeFieldHandle" /> 構造体が等しいかどうかを示します。</summary>
      <returns>
        <paramref name="left" /> が <paramref name="right" /> に等しい場合は true。それ以外の場合は false。</returns>
      <param name="left">
        <paramref name="right" /> と比較する <see cref="T:System.RuntimeFieldHandle" />。</param>
      <param name="right">
        <paramref name="left" /> と比較する <see cref="T:System.RuntimeFieldHandle" />。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.RuntimeFieldHandle.op_Inequality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)">
      <summary>2 つの <see cref="T:System.RuntimeFieldHandle" /> 構造体が等しくないかどうかを示します。</summary>
      <returns>
        <paramref name="left" /> が <paramref name="right" /> と等しくない場合は true。それ以外の場合は false。</returns>
      <param name="left">
        <paramref name="right" /> と比較する <see cref="T:System.RuntimeFieldHandle" />。</param>
      <param name="right">
        <paramref name="left" /> と比較する <see cref="T:System.RuntimeFieldHandle" />。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="T:System.RuntimeMethodHandle">
      <summary>
        <see cref="T:System.RuntimeMethodHandle" /> は、メソッドの内部メタデータ形式を識別するハンドルです。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.Object)">
      <summary>このインスタンスが指定したオブジェクトと等しいかどうかを示します。</summary>
      <returns>
        <paramref name="obj" /> が <see cref="T:System.RuntimeMethodHandle" /> で、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較する <see cref="T:System.Object" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.RuntimeMethodHandle)">
      <summary>このインスタンスが指定した <see cref="T:System.RuntimeMethodHandle" /> と等しいかどうかを示します。</summary>
      <returns>
        <paramref name="handle" /> がこのインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
      <param name="handle">このインスタンスと比較する <see cref="T:System.RuntimeMethodHandle" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeMethodHandle.GetHashCode">
      <summary>対象のインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Equality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
      <summary>
        <see cref="T:System.RuntimeMethodHandle" /> の 2 つのインスタンスが等しいかどうかを示します。</summary>
      <returns>
        <paramref name="left" /> の値が <paramref name="right" /> の値に等しい場合は true。それ以外の場合は false。</returns>
      <param name="left">
        <paramref name="right" /> と比較する <see cref="T:System.RuntimeMethodHandle" />。</param>
      <param name="right">
        <paramref name="left" /> と比較する <see cref="T:System.RuntimeMethodHandle" />。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Inequality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
      <summary>
        <see cref="T:System.RuntimeMethodHandle" /> の 2 つのインスタンスが等しくないかどうかを示します。</summary>
      <returns>
        <paramref name="left" /> の値が <paramref name="right" /> の値に等しくない場合は true。それ以外の場合は false。</returns>
      <param name="left">
        <paramref name="right" /> と比較する <see cref="T:System.RuntimeMethodHandle" />。</param>
      <param name="right">
        <paramref name="left" /> と比較する <see cref="T:System.RuntimeMethodHandle" />。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="T:System.RuntimeTypeHandle">
      <summary>内部メタデータ トークンを使用する型を表します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在の <see cref="T:System.RuntimeTypeHandle" /> 構造体と等しいかどうかを示します。</summary>
      <returns>
        <paramref name="obj" /> が <see cref="T:System.RuntimeTypeHandle" /> 構造体で、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.RuntimeTypeHandle)">
      <summary>指定した <see cref="T:System.RuntimeTypeHandle" /> 構造体が、現在の <see cref="T:System.RuntimeTypeHandle" /> 構造体と等しいかどうかを示します。</summary>
      <returns>
        <paramref name="handle" /> の値がこのインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
      <param name="handle">現在のインスタンスと比較する <see cref="T:System.RuntimeTypeHandle" /> 構造体。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.GetHashCode">
      <summary>現在のインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Equality(System.Object,System.RuntimeTypeHandle)">
      <summary>オブジェクトと <see cref="T:System.RuntimeTypeHandle" /> 構造体が等しいかどうかを示します。</summary>
      <returns>
        <paramref name="left" /> が <see cref="T:System.RuntimeTypeHandle" /> 構造体で、<paramref name="right" /> に等しい場合は true。それ以外の場合は false。</returns>
      <param name="left">
        <paramref name="right" /> と比較するオブジェクト。</param>
      <param name="right">
        <paramref name="left" /> と比較する <see cref="T:System.RuntimeTypeHandle" /> 構造体。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Equality(System.RuntimeTypeHandle,System.Object)">
      <summary>
        <see cref="T:System.RuntimeTypeHandle" /> 構造体がオブジェクトと等しいかどうかを示します。</summary>
      <returns>
        <paramref name="right" /> が <see cref="T:System.RuntimeTypeHandle" /> で、<paramref name="left" /> に等しい場合は true。それ以外の場合は false。</returns>
      <param name="left">
        <paramref name="right" /> と比較する <see cref="T:System.RuntimeTypeHandle" /> 構造体。</param>
      <param name="right">
        <paramref name="left" /> と比較するオブジェクト。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Inequality(System.Object,System.RuntimeTypeHandle)">
      <summary>オブジェクトと <see cref="T:System.RuntimeTypeHandle" /> 構造体が等しくないかどうかを示します。</summary>
      <returns>
        <paramref name="left" /> が <see cref="T:System.RuntimeTypeHandle" /> で、<paramref name="right" /> に等しくない場合は true。それ以外の場合は false。</returns>
      <param name="left">
        <paramref name="right" /> と比較するオブジェクト。</param>
      <param name="right">
        <paramref name="left" /> と比較する <see cref="T:System.RuntimeTypeHandle" /> 構造体。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Inequality(System.RuntimeTypeHandle,System.Object)">
      <summary>
        <see cref="T:System.RuntimeTypeHandle" /> 構造体がオブジェクトと等しくないかどうかを示します。</summary>
      <returns>
        <paramref name="right" /> が <see cref="T:System.RuntimeTypeHandle" /> 構造体で、<paramref name="left" /> に等しくない場合は true。それ以外の場合は false。</returns>
      <param name="left">
        <paramref name="right" /> と比較する <see cref="T:System.RuntimeTypeHandle" /> 構造体。</param>
      <param name="right">
        <paramref name="left" /> と比較するオブジェクト。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="T:System.SByte">
      <summary>8 ビット符号付き整数を表します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.CompareTo(System.SByte)">
      <summary>指定した 8 ビット符号付き整数とこのインスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対順序を示す符号付き整数。 
戻り値 	説明 	
0 より小さい値 	このインスタンスは、<paramref name="value" /> よりも小さくなっています。 	
0 	このインスタンスは <paramref name="value" /> と等価です。 	
0 を超える値 	このインスタンスは <paramref name="value" /> よりも大きくなっています。</returns>
      <param name="value">比較対象の 8 ビット符号付き整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.SByte.Equals(System.Object)">
      <summary>対象のインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> が <see cref="T:System.SByte" /> のインスタンスで、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.SByte.Equals(System.SByte)">
      <summary>対象のインスタンスが、指定した <see cref="T:System.SByte" /> 値に等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> がこのインスタンスと同じ値を保持している場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較する <see cref="T:System.SByte" /> オブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.SByte.GetHashCode">
      <summary>対象のインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.SByte.MaxValue">
      <summary>
        <see cref="T:System.SByte" /> の最大有効値を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.SByte.MinValue">
      <summary>
        <see cref="T:System.SByte" /> の最小有効値を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.Parse(System.String)">
      <summary>数値の文字列形式を、それと等価な 8 ビット符号付き整数に変換します。</summary>
      <returns>
        <paramref name="s" /> パラメーターに格納されている数値と等価な 8 ビット符号付き整数。</returns>
      <param name="s">変換する数値を表す文字列。 文字列は、<see cref="F:System.Globalization.NumberStyles.Integer" /> スタイルを使用して解釈されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の構成が、省略可能な符号と、それに続く 0 から 9 までの一連の数字ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.SByte.MinValue" /> 未満の数値か、<see cref="F:System.SByte.MaxValue" /> より大きい数値を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>指定されたスタイルの数値の文字列形式を等価な 8 ビット符号付き整数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定された数値と等価な 8 ビット符号付き整数。</returns>
      <param name="s">変換する数値を含んだ文字列。 文字列は、<paramref name="style" /> で指定されたスタイルを使用して解釈されます。</param>
      <param name="style">
        <paramref name="s" /> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の書式が、<paramref name="style" /> に準拠した書式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.SByte.MinValue" /> 未満の数値か、<see cref="F:System.SByte.MaxValue" /> より大きい数値を表しています。 または <paramref name="s" /> は 0 以外の小数部の桁を含んでいます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>指定したスタイルおよびカルチャに固有の書式による数値の文字列形式を、それと等価な 8 ビット符号付きの値に変換します。</summary>
      <returns>
        <paramref name="s" /> パラメーターに指定された数値と等価な 8 ビット符号付きバイト値。</returns>
      <param name="s">変換する数値を含んだ文字列。 文字列は、<paramref name="style" /> で指定されたスタイルを使用して解釈されます。</param>
      <param name="style">
        <paramref name="s" /> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。 <paramref name="provider" /> が null の場合は、現在のスレッド カルチャが使用されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が、<see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> の組み合わせではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の書式が、<paramref name="style" /> に準拠した書式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.SByte.MinValue" /> 未満の数値か、<see cref="F:System.SByte.MaxValue" /> を超える数値を表しています。 または <paramref name="s" /> は 0 以外の小数部の桁を含んでいます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.IFormatProvider)">
      <summary>指定されたカルチャ固有の書式による数値の文字列形式を等価な 8 ビット符号付き整数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定された数値と等価な 8 ビット符号付き整数。</returns>
      <param name="s">変換する数値を表す文字列。 文字列は、<see cref="F:System.Globalization.NumberStyles.Integer" /> スタイルを使用して解釈されます。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。 <paramref name="provider" /> が null の場合は、現在のスレッド カルチャが使用されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の形式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.SByte.MinValue" /> 未満の数値か、<see cref="F:System.SByte.MaxValue" /> より大きい数値を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.System#IComparable#CompareTo(System.Object)">
      <summary>現在のインスタンスを同じ型の別のオブジェクトと比較し、現在のインスタンスの並べ替え順序での位置が、比較対象のオブジェクトと比べて前か、後か、または同じかを示す整数を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対順序を示す符号付き整数。 
戻り値 	説明 	
0 より小さい値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも前です。 	
0 	このインスタンスは、並べ替え順序で、<paramref name="value" /> と同じ位置に出現します。 	
0 を超える値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも後ろです。 または <paramref name="value" /> は null なので、</returns>
      <param name="obj">対象のインスタンスと比較する対象のオブジェクト、または null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が <see cref="T:System.SByte" /> ではありません。</exception>
    </member>
    <member name="M:System.SByte.ToString">
      <summary>このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
      <returns>値が負の場合はマイナス記号を伴い、先行ゼロを含まない 0 から 9 の一連の数字から構成される、このインスタンスの値の文字列形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.ToString(System.IFormatProvider)">
      <summary>このインスタンスの数値を、指定したカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.ToString(System.String)">
      <summary>指定した書式を使用して、このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="format">標準またはカスタムの数値書式指定文字列。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> が無効です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.ToString(System.String,System.IFormatProvider)">
      <summary>このインスタンスの数値を、指定した書式およびカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> および <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="format">標準またはカスタムの数値書式指定文字列。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> が無効です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.SByte@)">
      <summary>指定されたスタイルおよびカルチャ固有の書式の数値の文字列形式を等価の <see cref="T:System.SByte" /> に変換できるかどうかを試行し、変換に成功したかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="s" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">変換する数値を表す文字列。</param>
      <param name="style">
        <paramref name="s" /> に許可されている書式を示す列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="result">変換が成功した場合、このメソッドが返されるときに、<paramref name="s" /> に格納された数値と等しい 8 ビット符号付き整数値を格納します。変換に失敗した場合は 0 を格納します。 <paramref name="s" /> パラメーターが null または <see cref="F:System.String.Empty" /> であるか、<paramref name="style" /> に準拠した形式ではない、または <see cref="F:System.SByte.MinValue" /> より小さいか <see cref="F:System.SByte.MaxValue" /> より大きい数値を表している場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.SByte@)">
      <summary>数値の文字列形式を対応する <see cref="T:System.SByte" /> 表現に変換できるかどうかを試行し、変換に成功したかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="s" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">変換する数値を含んだ文字列。</param>
      <param name="result">このメソッドから制御が返されたとき、変換に成功した場合は、<paramref name="s" /> が表す数値と等価な 8 ビット符号付き整数値が格納されます。変換に失敗した場合は 0 が格納されます。 <paramref name="s" /> パラメーターが null または <see cref="F:System.String.Empty" /> であるか、正しい形式ではない、<see cref="F:System.SByte.MinValue" /> 未満か <see cref="F:System.SByte.MaxValue" /> を超える数値を表している場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Single">
      <summary>単精度浮動小数点数を表します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.CompareTo(System.Single)">
      <summary>このインスタンスと指定した単精度浮動小数点数を比較し、このインスタンスの値が指定した単精度浮動小数点数の値よりも小さいか、同じか、または大きいかを示す整数を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。 
戻り値 	説明 	
0 より小さい値 	このインスタンスは、<paramref name="value" /> よりも小さくなっています。 または このインスタンスは非数 (<see cref="F:System.Single.NaN" />) で、<paramref name="value" /> は数値です。 	
0 	このインスタンスは <paramref name="value" /> と等価です。 または このインスタンスと <paramref name="value" /> は、どちらも非数 (<see cref="F:System.Single.NaN" />)、<see cref="F:System.Single.PositiveInfinity" />、または <see cref="F:System.Single.NegativeInfinity" /> です。 	
0 を超える値 	このインスタンスは <paramref name="value" /> よりも大きくなっています。 または このインスタンスは数値で、<paramref name="value" /> は非数 (<see cref="F:System.Single.NaN" />) です。</returns>
      <param name="value">比較対象の単精度浮動小数点数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Single.Epsilon">
      <summary>ゼロより大きい最小の <see cref="T:System.Single" /> 値を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.Equals(System.Object)">
      <summary>対象のインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> が <see cref="T:System.Single" /> のインスタンスで、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Single.Equals(System.Single)">
      <summary>このインスタンスと指定した <see cref="T:System.Single" /> オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> がこのインスタンスと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Single.GetHashCode">
      <summary>対象のインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Single.IsInfinity(System.Single)">
      <summary>指定した数値が負または正の無限大と評価されるかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="f" /> が <see cref="F:System.Single.PositiveInfinity" /> または <see cref="F:System.Single.NegativeInfinity" /> と評価される場合は true。それ以外の場合は false。</returns>
      <param name="f">単精度浮動小数点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.IsNaN(System.Single)">
      <summary>指定された値が非数値 (<see cref="F:System.Single.NaN" />) かどうかを示す値を返します。</summary>
      <returns>
        <paramref name="f" /> が非数 (<see cref="F:System.Single.NaN" />) と評価される場合は true。それ以外の場合は false。</returns>
      <param name="f">単精度浮動小数点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.IsNegativeInfinity(System.Single)">
      <summary>指定した数値が負の無限大と評価されるかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="f" /> が <see cref="F:System.Single.NegativeInfinity" /> と評価される場合は true。それ以外の場合は false。</returns>
      <param name="f">単精度浮動小数点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.IsPositiveInfinity(System.Single)">
      <summary>指定した数値が正の無限大と評価されるかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="f" /> が <see cref="F:System.Single.PositiveInfinity" /> と評価される場合は true。それ以外の場合は false。</returns>
      <param name="f">単精度浮動小数点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Single.MaxValue">
      <summary>
        <see cref="T:System.Single" /> の最大有効値を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Single.MinValue">
      <summary>
        <see cref="T:System.Single" /> の最小有効値を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Single.NaN">
      <summary>非数 (NaN) を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Single.NegativeInfinity">
      <summary>負の無限大を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.op_Equality(System.Single,System.Single)">
      <summary>指定した 2 つの <see cref="T:System.Single" /> 値が等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="left" /> と <paramref name="right" /> が等しい場合は true。それ以外の場合は false。</returns>
      <param name="left">比較する最初の値です。</param>
      <param name="right">比較する 2 番目の値です。</param>
    </member>
    <member name="M:System.Single.op_GreaterThan(System.Single,System.Single)">
      <summary>指定した <see cref="T:System.Single" /> 値が、指定したもう 1 つの <see cref="T:System.Single" /> 値より大きいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="left" /> が <paramref name="right" /> より大きい場合は true。それ以外の場合は false。</returns>
      <param name="left">比較する最初の値です。</param>
      <param name="right">比較する 2 番目の値です。</param>
    </member>
    <member name="M:System.Single.op_GreaterThanOrEqual(System.Single,System.Single)">
      <summary>指定した <see cref="T:System.Single" /> 値が、指定したもう 1 つの <see cref="T:System.Single" /> 値以上かどうかを示す値を返します。</summary>
      <returns>
        <paramref name="left" /> が <paramref name="right" /> 以上の場合は true。それ以外の場合は false。</returns>
      <param name="left">比較する最初の値です。</param>
      <param name="right">比較する 2 番目の値です。</param>
    </member>
    <member name="M:System.Single.op_Inequality(System.Single,System.Single)">
      <summary>指定した 2 つの <see cref="T:System.Single" /> 値が等しくないかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="left" /> と <paramref name="right" /> が等しくない場合は true。それ以外の場合は false。</returns>
      <param name="left">比較する最初の値です。</param>
      <param name="right">比較する 2 番目の値です。</param>
    </member>
    <member name="M:System.Single.op_LessThan(System.Single,System.Single)">
      <summary>指定した <see cref="T:System.Single" /> 値が、指定したもう 1 つの <see cref="T:System.Single" /> 値より小さいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="left" /> が <paramref name="right" /> より小さい場合は true。それ以外の場合は false。</returns>
      <param name="left">比較する最初の値です。</param>
      <param name="right">比較する 2 番目の値です。</param>
    </member>
    <member name="M:System.Single.op_LessThanOrEqual(System.Single,System.Single)">
      <summary>指定した <see cref="T:System.Single" /> 値が、指定したもう 1 つの <see cref="T:System.Single" /> 値以下かどうかを示す値を返します。</summary>
      <returns>
        <paramref name="left" /> が <paramref name="right" /> 以下の場合は true。それ以外の場合は false。</returns>
      <param name="left">比較する最初の値です。</param>
      <param name="right">比較する 2 番目の値です。</param>
    </member>
    <member name="M:System.Single.Parse(System.String)">
      <summary>数値の文字列形式を、それと等価な単精度浮動小数点数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定した数値または記号に等しい単精度浮動小数点数。</returns>
      <param name="s">変換する数値を含んだ文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が、有効な書式で数値を表していません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Single.MinValue" /> 未満の数値か、<see cref="F:System.Single.MaxValue" /> より大きい数値を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>指定したスタイルでの数値の文字列形式を、それと等価な単精度浮動小数点数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定した数値または記号に等しい単精度浮動小数点数。</returns>
      <param name="s">変換する数値を含んだ文字列。</param>
      <param name="style">
        <paramref name="s" /> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.AllowThousands" /> と組み合わせた <see cref="F:System.Globalization.NumberStyles.Float" /> です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が、有効な書式の数値ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Single.MinValue" /> 未満の数値か、<see cref="F:System.Single.MaxValue" /> を超える数値を表しています。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> に <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値が含まれています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>指定したスタイルおよびカルチャに固有の書式による数値の文字列形式を、それと等価な単精度浮動小数点数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定した数値または記号に等しい単精度浮動小数点数。</returns>
      <param name="s">変換する数値を含んだ文字列。</param>
      <param name="style">
        <paramref name="s" /> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.AllowThousands" /> と組み合わせた <see cref="F:System.Globalization.NumberStyles.Float" /> です。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が数値を表していません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値です。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Single.MinValue" /> 未満の数値か、<see cref="F:System.Single.MaxValue" /> を超える数値を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.Parse(System.String,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式による数値の文字列形式を、それと等価な単精度浮動小数点数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定した数値または記号に等しい単精度浮動小数点数。</returns>
      <param name="s">変換する数値を含んだ文字列。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が、有効な書式で数値を表していません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Single.MinValue" /> 未満の数値か、<see cref="F:System.Single.MaxValue" /> より大きい数値を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Single.PositiveInfinity">
      <summary>正の無限大を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.System#IComparable#CompareTo(System.Object)">
      <summary>現在のインスタンスを同じ型の別のオブジェクトと比較し、現在のインスタンスの並べ替え順序での位置が、比較対象のオブジェクトと比べて前か、後か、または同じかを示す整数を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対順序を示す符号付き整数。 
戻り値 	説明 	
0 より小さい値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも前です。 	
0 	このインスタンスは、並べ替え順序で、<paramref name="value" /> と同じ位置に出現します。 	
0 を超える値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも後ろです。 または <paramref name="value" /> は null なので、</returns>
      <param name="value">対象のインスタンスと比較する対象のオブジェクト、または null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が <see cref="T:System.Single" /> ではありません。</exception>
    </member>
    <member name="M:System.Single.ToString">
      <summary>このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
      <returns>このインスタンスの値の文字列形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.ToString(System.IFormatProvider)">
      <summary>このインスタンスの数値を、指定したカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.ToString(System.String)">
      <summary>指定した書式を使用して、このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="format">数値書式指定文字列。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> が無効です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.ToString(System.String,System.IFormatProvider)">
      <summary>このインスタンスの数値を、指定した書式およびカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> および <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="format">数値書式指定文字列。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)">
      <summary>指定したスタイルおよびカルチャに固有の書式による数値の文字列形式を、それと等価な単精度浮動小数点数に変換します。 戻り値は、変換が成功したか失敗したかを示します。</summary>
      <returns>
        <paramref name="s" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">変換する数値を表す文字列。</param>
      <param name="style">
        <paramref name="s" /> に許可されている書式を示す列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.AllowThousands" /> と組み合わせた <see cref="F:System.Globalization.NumberStyles.Float" /> です。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="result">変換が成功した場合、このメソッドが返されるときに、<paramref name="s" /> に格納された数値または記号と等価の単精度浮動小数点数を格納します。変換に失敗した場合は 0 を格納します。 <paramref name="s" /> パラメーターが null か、<see cref="F:System.String.Empty" /> である、<paramref name="style" /> に準拠した形式ではない、<see cref="F:System.Single.MinValue" /> より小さい数値、または <see cref="F:System.Single.MaxValue" /> より大きい数値を表している場合、または <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 列挙定数の有効な組み合わせではない場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Single@)">
      <summary>数値の文字列形式を、それと等価な単精度浮動小数点数に変換します。 戻り値は、変換が成功したか失敗したかを示します。</summary>
      <returns>
        <paramref name="s" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">変換する数値を表す文字列。</param>
      <param name="result">変換が成功した場合、このメソッドが返されるときに、<paramref name="s" /> に格納された数値または記号と等価の単精度浮動小数点数を格納します。変換に失敗した場合は 0 を格納します。 <paramref name="s" /> パラメーターが null または <see cref="F:System.String.Empty" /> であるか、有効な書式の数値ではない、または <see cref="F:System.Single.MinValue" /> より小さいか <see cref="F:System.Single.MaxValue" /> より大きい数値を表している場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.STAThreadAttribute">
      <summary>アプリケーションの COM スレッド モデルがシングルスレッド アパートメント (STA: Single-Threaded Apartment) であることを示します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.STAThreadAttribute.#ctor">
      <summary>
        <see cref="T:System.STAThreadAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.String">
      <summary>テキストを一連の Unicode 文字として表現します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.#ctor(System.Char*)">
      <summary>
        <see cref="T:System.String" /> クラスの新しいインスタンスを初期化し、指定した Unicode 文字配列を指すポインターにより示される値に設定します。</summary>
      <param name="value">Unicode 文字の null で終わる配列へのポインター。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">現在のプロセスが、アドレス指定する文字すべての読み取りアクセス権を持っていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が 無効な Unicode 文字を含む配列を指定しているか、<paramref name="value" /> が 64000 よりも小さいアドレスを指定しています。</exception>
    </member>
    <member name="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.String" /> クラスの新しいインスタンスを初期化し、Unicode 文字の配列を指す指定のポインター、配列内の開始文字位置、および長さにより示される値に設定します。</summary>
      <param name="value">Unicode 文字の配列を指すポインター。</param>
      <param name="startIndex">
        <paramref name="value" /> 内の開始位置。</param>
      <param name="length">使用する <paramref name="value" /> 内の文字数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> または <paramref name="length" /> が 0 より小さいか、<paramref name="value" /> + <paramref name="startIndex" /> によってポインター オーバーフローが発生するか、または現在のプロセスがアドレス指定する文字すべてのアクセス権を持っていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が 無効な Unicode 文字を含む配列を指定しているか、<paramref name="value" /> + <paramref name="startIndex" /> が 64000 よりも小さいアドレスを指定しています。</exception>
    </member>
    <member name="M:System.String.#ctor(System.Char,System.Int32)">
      <summary>
        <see cref="T:System.String" /> クラスの新しいインスタンスを初期化し、指定した回数だけ繰り返した指定の Unicode 文字が示す値に設定します。</summary>
      <param name="c">Unicode 文字。</param>
      <param name="count">
        <paramref name="c" /> の発生回数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.String.#ctor(System.Char[])">
      <summary>
        <see cref="T:System.String" /> クラスの新しいインスタンスを初期化し、Unicode 文字の配列により示される値に設定します。</summary>
      <param name="value">Unicode 文字の配列。</param>
    </member>
    <member name="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.String" /> クラスの新しいインスタンスを初期化し、Unicode 文字の配列、配列内の開始文字位置、および長さにより示される値に設定します。</summary>
      <param name="value">Unicode 文字の配列。</param>
      <param name="startIndex">
        <paramref name="value" /> 内の開始位置。</param>
      <param name="length">使用する <paramref name="value" /> 内の文字数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> または <paramref name="length" /> が 0 未満です。 または <paramref name="startIndex" /> と <paramref name="length" /> の合計値が、<paramref name="value" /> 内の要素数より大きい値です。</exception>
    </member>
    <member name="P:System.String.Chars(System.Int32)">
      <summary>現在の <see cref="T:System.String" /> オブジェクト内の指定した位置にある <see cref="T:System.Char" /> オブジェクトを取得します。</summary>
      <returns>
        <paramref name="index" /> 位置にあるオブジェクト。</returns>
      <param name="index">現在の文字列内の位置。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> が、このオブジェクトの長さ以上であるか、または 0 未満です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>指定した 2 つの <see cref="T:System.String" /> オブジェクトの部分文字列を比較し、それらの相対位置を並べ替え順序で示す整数を返します。</summary>
      <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。 
値 	条件 	
0 より小さい値 	<paramref name="strA" /> 内の部分文字列が、<paramref name="strB" /> 内の部分文字列より小さいです。 	
0 	これらの部分文字列が等しいか、または <paramref name="length" /> が 0 です。 	
0 を超える値 	<paramref name="strA" /> 内の部分文字列が <paramref name="strB" /> 内の部分文字列より大きいです。</returns>
      <param name="strA">比較で使用する最初の文字列。</param>
      <param name="indexA">
        <paramref name="strA" /> 内の部分文字列の位置。</param>
      <param name="strB">比較で使用する 2 番目の文字列。</param>
      <param name="indexB">
        <paramref name="strB" /> 内の部分文字列の位置。</param>
      <param name="length">比較する各部分文字列の最大文字数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> が <paramref name="strA" />.<see cref="P:System.String.Length" /> より大きい値です。 または <paramref name="indexB" /> が <paramref name="strB" />.<see cref="P:System.String.Length" /> より大きい。 または <paramref name="indexA" />、<paramref name="indexB" />、または <paramref name="length" /> が負の値です。 または <paramref name="indexA" /> または <paramref name="indexB" /> が null で、<paramref name="length" /> が 0 より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>指定した規則を使用して、指定した 2 つの <see cref="T:System.String" /> オブジェクトの部分文字列を比較し、並べ替え順序におけるそれらの相対位置を示す整数を返します。</summary>
      <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。 
値 	条件 	
0 より小さい値 	<paramref name="strA" /> パラメーター内の部分文字列が、<paramref name="strB" /> パラメーター内の部分文字列より小さいです。 	
0 	これらの部分文字列が等しいか、または <paramref name="length" /> パラメーターが 0 です。 	
0 を超える値 	<paramref name="strA" /> 内の部分文字列が <paramref name="strB" /> 内の部分文字列より大きいです。</returns>
      <param name="strA">比較で使用する最初の文字列。</param>
      <param name="indexA">
        <paramref name="strA" /> 内の部分文字列の位置。</param>
      <param name="strB">比較で使用する 2 番目の文字列。</param>
      <param name="indexB">
        <paramref name="strB" /> 内の部分文字列の位置。</param>
      <param name="length">比較する各部分文字列の最大文字数。</param>
      <param name="comparisonType">比較で使用する規則を指定する列挙値の 1 つ。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> が <paramref name="strA" />.<see cref="P:System.String.Length" /> より大きい値です。 または <paramref name="indexB" /> が <paramref name="strB" />.<see cref="P:System.String.Length" /> より大きい。 または <paramref name="indexA" />、<paramref name="indexB" />、または <paramref name="length" /> が負の値です。 または <paramref name="indexA" /> または <paramref name="indexB" /> が null で、<paramref name="length" /> が 0 より大きい値です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> が <see cref="T:System.StringComparison" /> 値ではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Compare(System.String,System.String)">
      <summary>指定した 2 つの <see cref="T:System.String" /> オブジェクトを比較し、それらの相対位置を並べ替え順序で示す整数を返します。</summary>
      <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。 
値 	条件 	
0 より小さい値 	<paramref name="strA" /> が <paramref name="strB" /> より小さい。 	
0 	<paramref name="strA" /> と <paramref name="strB" /> が等しい。 	
0 を超える値 	<paramref name="strA" /> が <paramref name="strB" /> より大きくなっています。</returns>
      <param name="strA">比較する最初の文字列です。</param>
      <param name="strB">比較する 2 番目の文字列です。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.StringComparison)">
      <summary>指定した規則を使用して、指定した 2 つの <see cref="T:System.String" /> オブジェクトを比較し、並べ替え順序におけるそれらの相対位置を示す整数を返します。</summary>
      <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。 
値 	条件 	
0 より小さい値 	<paramref name="strA" /> が <paramref name="strB" /> より小さい。 	
0 	<paramref name="strA" /> と <paramref name="strB" /> が等しい。 	
0 を超える値 	<paramref name="strA" /> が <paramref name="strB" /> より大きくなっています。</returns>
      <param name="strA">比較する最初の文字列です。</param>
      <param name="strB">比較する 2 番目の文字列です。</param>
      <param name="comparisonType">比較で使用する規則を指定する列挙値の 1 つ。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> が <see cref="T:System.StringComparison" /> 値ではありません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.StringComparison" /> がサポートされていません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>それぞれの部分文字列の対応する <see cref="T:System.Char" /> オブジェクトの数値を評価することで、指定した 2 つの <see cref="T:System.String" /> を比較します。</summary>
      <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。 
値 	条件 	
0 より小さい値 	<paramref name="strA" /> 内の部分文字列が、<paramref name="strB" /> 内の部分文字列より小さいです。 	
0 	これらの部分文字列が等しいか、または <paramref name="length" /> が 0 です。 	
0 を超える値 	<paramref name="strA" /> 内の部分文字列が <paramref name="strB" /> 内の部分文字列より大きいです。</returns>
      <param name="strA">比較で使用する最初の文字列。</param>
      <param name="indexA">
        <paramref name="strA" /> 内の部分文字列の開始インデックス。</param>
      <param name="strB">比較で使用する 2 番目の文字列。</param>
      <param name="indexB">
        <paramref name="strB" /> 内の部分文字列の開始インデックス。</param>
      <param name="length">比較する各部分文字列の最大文字数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="strA" /> が null ではなく、<paramref name="indexA" /> は <paramref name="strA" />.<see cref="P:System.String.Length" /> を超えています。 または <paramref name="strB" /> が null ではなく、<paramref name="indexB" /> は <paramref name="strB" />.<see cref="P:System.String.Length" /> を超えています。 または <paramref name="indexA" />、<paramref name="indexB" />、または <paramref name="length" /> が負の値です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.String)">
      <summary>それぞれの文字列の対応する <see cref="T:System.Char" /> オブジェクトの数値を評価することで、指定した 2 つの <see cref="T:System.String" /> を比較します。</summary>
      <returns>2 つの比較対照値の構文上の関係を示す整数。 
値 	条件 	
0 より小さい値 	<paramref name="strA" /> が <paramref name="strB" /> より小さい。 	
0 	<paramref name="strA" /> と <paramref name="strB" /> が等しい。 	
0 を超える値 	<paramref name="strA" /> が <paramref name="strB" /> より大きくなっています。</returns>
      <param name="strA">比較する最初の文字列です。</param>
      <param name="strB">比較する 2 番目の文字列です。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.CompareTo(System.String)">
      <summary>このインスタンスと指定した <see cref="T:System.String" /> オブジェクトとを比較し、並べ替え順序において、このインスタンスの位置が指定した <see cref="T:System.String" /> の前、後ろ、または同じのいずれであるかを示します。</summary>
      <returns>並べ替え順序において、このインスタンスの位置が <paramref name="value" /> パラメーターよりも前、後ろ、または同じのいずれであるかを示す 32 ビット符号付き整数。 
値 	条件 	
0 より小さい値 	このインスタンスの位置が <paramref name="strB" /> よりも前です。 	
0 	このインスタンスの位置が、並べ替え順序において <paramref name="strB" /> と同じです。 	
0 を超える値 	このインスタンスの位置が <paramref name="strB" /> よりも後ろです。 または <paramref name="strB" /> は null なので、</returns>
      <param name="strB">このインスタンスと比較する文字列。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
        <see cref="T:System.String" /> 型の構築された <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションのメンバーを連結します。</summary>
      <returns>
        <paramref name="values" /> 内の文字列の連結結果。</returns>
      <param name="values">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> を実装し、ジェネリック型引数が <see cref="T:System.String" /> であるコレクション オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> は null なので、</exception>
    </member>
    <member name="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 実装のメンバーを連結します。</summary>
      <returns>
        <paramref name="values" /> 内のメンバーの連結結果。</returns>
      <param name="values">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> インターフェイスを実装するコレクション オブジェクト。</param>
      <typeparam name="T">
        <paramref name="values" /> のメンバーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> は null なので、</exception>
    </member>
    <member name="M:System.String.Concat(System.Object)">
      <summary>指定されたオブジェクトの文字列形式を作成します。</summary>
      <returns>
        <paramref name="arg0" /> の値の文字列形式。<paramref name="arg0" /> が null の場合は <see cref="F:System.String.Empty" />。</returns>
      <param name="arg0">表現するオブジェクトまたは null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object)">
      <summary>指定した 2 つのオブジェクトの文字列形式を連結します。</summary>
      <returns>
        <paramref name="arg0" /> および <paramref name="arg1" /> の値の文字列形式を連結した結果。</returns>
      <param name="arg0">連結する最初のオブジェクト。</param>
      <param name="arg1">連結する 2 番目のオブジェクト。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object,System.Object)">
      <summary>指定した 3 つのオブジェクトの文字列形式を連結します。</summary>
      <returns>
        <paramref name="arg0" />、<paramref name="arg1" />、および <paramref name="arg2" /> の値の文字列形式を連結した結果。</returns>
      <param name="arg0">連結する最初のオブジェクト。</param>
      <param name="arg1">連結する 2 番目のオブジェクト。</param>
      <param name="arg2">連結する 3 番目のオブジェクト。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.Object[])">
      <summary>指定した <see cref="T:System.Object" /> 配列の要素の文字列形式を連結します。</summary>
      <returns>
        <paramref name="args" /> で指定された各要素の値の文字列形式を連結した結果。</returns>
      <param name="args">連結する要素を格納しているオブジェクト配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="args" /> は null なので、</exception>
      <exception cref="T:System.OutOfMemoryException">メモリが不足しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.String,System.String)">
      <summary>指定した 2 つの <see cref="T:System.String" /> インスタンスを連結します。</summary>
      <returns>
        <paramref name="str0" /> と <paramref name="str1" /> の連結結果。</returns>
      <param name="str0">連結する最初の文字列。</param>
      <param name="str1">連結する 2 番目の文字列。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String)">
      <summary>指定した 3 つの <see cref="T:System.String" /> インスタンスを連結します。</summary>
      <returns>
        <paramref name="str0" />、<paramref name="str1" />、および <paramref name="str2" /> の連結結果。</returns>
      <param name="str0">連結する最初の文字列。</param>
      <param name="str1">連結する 2 番目の文字列。</param>
      <param name="str2">連結する 3 番目の文字列。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String,System.String)">
      <summary>指定した 4 つの <see cref="T:System.String" /> インスタンスを連結します。</summary>
      <returns>
        <paramref name="str0" />、<paramref name="str1" />、<paramref name="str2" />、および <paramref name="str3" /> の連結結果。</returns>
      <param name="str0">連結する最初の文字列。</param>
      <param name="str1">連結する 2 番目の文字列。</param>
      <param name="str2">連結する 3 番目の文字列。</param>
      <param name="str3">連結する 4 番目の文字列。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.String[])">
      <summary>指定した <see cref="T:System.String" /> 配列の要素を連結します。</summary>
      <returns>連結された <paramref name="values" /> の要素。</returns>
      <param name="values">文字列インスタンスの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> は null なので、</exception>
      <exception cref="T:System.OutOfMemoryException">メモリが不足しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Contains(System.String)">
      <summary>指定した <see cref="T:System.String" /> オブジェクトがこの文字列内に存在するかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="value" /> パラメーターがこの文字列内に存在するか、<paramref name="value" /> が空の文字列 ("") の場合は true。それ以外の場合は false。</returns>
      <param name="value">シークする文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は null なので、</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>このインスタンスの指定位置から指定した数の文字を、Unicode 文字の配列内の指定位置へコピーします。</summary>
      <param name="sourceIndex">コピーする、このインスタンス内の最初の文字のインデックス。</param>
      <param name="destination">このインスタンスの文字のコピー先となる Unicode 文字の配列。</param>
      <param name="destinationIndex">コピー操作を開始する <paramref name="destination" /> のインデックス。</param>
      <param name="count">
        <paramref name="destination" /> へコピーされるこのインスタンスの文字の数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" />、<paramref name="destinationIndex" />、または <paramref name="count" /> が負の値です。 または <paramref name="count" /> が、<paramref name="startIndex" /> からこのインスタンスの末尾までの部分文字の長さより大きい値です。 または <paramref name="count" /> が、<paramref name="destinationIndex" /> から <paramref name="destination" /> の末尾までの部分配列の長さより大きい値です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.String.Empty">
      <summary>空の文字列を表します。 このフィールドは読み取り専用です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.EndsWith(System.String)">
      <summary>この文字列インスタンスの末尾が、指定した文字列と一致するかどうかを判断します。</summary>
      <returns>このインスタンスの末尾が <paramref name="value" /> と一致する場合は true。それ以外の場合は false。</returns>
      <param name="value">このインスタンスの末尾の部分文字列と比較する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は null なので、</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.EndsWith(System.String,System.StringComparison)">
      <summary>指定された比較オプションを使って比較した場合に、この文字列インスタンスの末尾が、指定された文字列と一致するかどうかを判断します。</summary>
      <returns>
        <paramref name="value" /> パラメーターがこの文字列の末尾と一致する場合は true。それ以外の場合は false。</returns>
      <param name="value">このインスタンスの末尾の部分文字列と比較する文字列。</param>
      <param name="comparisonType">この文字列と <paramref name="value" /> との比較方法を決定する列挙値の 1 つ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> が <see cref="T:System.StringComparison" /> 値ではありません。</exception>
    </member>
    <member name="M:System.String.Equals(System.Object)">
      <summary>このインスタンスと、指定したオブジェクトの値が同一かどうかを判断します。<see cref="T:System.String" /> オブジェクトを指定する必要があります。</summary>
      <returns>
        <paramref name="obj" /> が <see cref="T:System.String" /> で、このインスタンスと同じ値を保持している場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較する文字列。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Equals(System.String)">
      <summary>このインスタンスと、指定した別の <see cref="T:System.String" /> の値が同一かどうかを判断します。</summary>
      <returns>
        <paramref name="value" /> パラメーターの値がこのインスタンスと同じ場合は true。それ以外の場合は false。</returns>
      <param name="value">このインスタンスと比較する文字列。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Equals(System.String,System.String)">
      <summary>指定した 2 つの <see cref="T:System.String" /> オブジェクトの値が同一かどうかを判断します。</summary>
      <returns>
        <paramref name="a" /> の値が <paramref name="b" /> の値と同じ場合は true。それ以外の場合は false。 <paramref name="a" /> と <paramref name="b" /> の両方が null の場合、メソッドは true を返します。</returns>
      <param name="a">比較する最初の文字列または null。</param>
      <param name="b">比較する 2 番目の文字列または null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Equals(System.String,System.String,System.StringComparison)">
      <summary>指定した 2 つの <see cref="T:System.String" /> オブジェクトの値が同一かどうかを判断します。 比較に使用するカルチャ、大文字と小文字の区別、および、並べ替え規則をパラメーターで指定します。</summary>
      <returns>
        <paramref name="a" /> パラメーターの値が <paramref name="b" /> パラメーターの値に等しい場合は true。それ以外の場合は false。</returns>
      <param name="a">比較する最初の文字列または null。</param>
      <param name="b">比較する 2 番目の文字列または null。</param>
      <param name="comparisonType">比較の規則を指定する列挙値の 1 つ。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> が <see cref="T:System.StringComparison" /> 値ではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Equals(System.String,System.StringComparison)">
      <summary>この文字列と、指定した <see cref="T:System.String" /> オブジェクトの値が同一かどうかを判断します。 比較に使用するカルチャ、大文字と小文字の区別、および、並べ替え規則をパラメーターで指定します。</summary>
      <returns>
        <paramref name="value" /> パラメーターの値がこの文字列と同じ場合は true。それ以外の場合は false。</returns>
      <param name="value">このインスタンスと比較する文字列。</param>
      <param name="comparisonType">文字列の比較方法を指定する列挙値の 1 つ。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> が <see cref="T:System.StringComparison" /> 値ではありません。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
      <summary>指定した文字列の書式項目を、指定した配列内の対応するオブジェクトの文字列形式に置換します。 パラメーターにより、カルチャに固有の書式情報が指定されます。</summary>
      <returns>書式項目が <paramref name="args" /> の対応するオブジェクトの文字列形式に置換された <paramref name="format" /> のコピー。</returns>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="format">複合書式指定文字列。</param>
      <param name="args">0 個以上の書式設定対象オブジェクトを含んだオブジェクト配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> または <paramref name="args" /> が null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> が無効です。 または 書式項目のインデックスが 0 未満か、<paramref name="args" /> 配列の長さ以上です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Format(System.String,System.Object[])">
      <summary>指定した文字列の書式項目を、指定した配列内の対応するオブジェクトの文字列形式に置換します。</summary>
      <returns>書式項目が <paramref name="args" /> の対応するオブジェクトの文字列形式に置換された <paramref name="format" /> のコピー。</returns>
      <param name="format">複合書式指定文字列。</param>
      <param name="args">0 個以上の書式設定対象オブジェクトを含んだオブジェクト配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> または <paramref name="args" /> が null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> が無効です。 または 書式項目のインデックスが 0 未満か、<paramref name="args" /> 配列の長さ以上です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.GetHashCode">
      <summary>この文字列のハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.Char)">
      <summary>指定した Unicode 文字がこの文字列内で最初に見つかった位置の 0 から始まるインデックスをレポートします。</summary>
      <returns>その文字が見つかった場合は、<paramref name="value" /> の 0 から始まるインデックスでの位置。見つからなかった場合は -1。</returns>
      <param name="value">シークする Unicode 文字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32)">
      <summary>指定した Unicode 文字がこの文字列内で最初に見つかった位置の 0 から始まるインデックスをレポートします。 検索は、指定した文字位置から開始されます。</summary>
      <returns>その文字が見つかった場合は、<paramref name="value" /> の 0 から始まるインデックスでの位置。見つからなかった場合は -1。</returns>
      <param name="value">シークする Unicode 文字。</param>
      <param name="startIndex">検索が開始される位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が 0 (ゼロ) 未満か、文字列の長さを超えています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
      <summary>指定文字がこのインスタンス内で最初に見つかった位置の 0 から始まるインデックスをレポートします。 検索は指定した文字位置から開始され、指定した数の文字位置が検査されます。</summary>
      <returns>その文字が見つかった場合は、<paramref name="value" /> の 0 から始まるインデックスでの位置。見つからなかった場合は -1。</returns>
      <param name="value">シークする Unicode 文字。</param>
      <param name="startIndex">検索が開始される位置。</param>
      <param name="count">検査する文字位置の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> または <paramref name="startIndex" /> が負の値です。 または <paramref name="startIndex" /> がこの文字列の長さを超えています。 または <paramref name="count" /> がこの文字列 <paramref name="startIndex" /> の長さを超えています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.String)">
      <summary>指定された文字列がこのインスタンス内で最初に見つかった位置の 0 から始まるインデックスをレポートします。</summary>
      <returns>その文字列が見つかった場合は、<paramref name="value" /> の 0 から始まるインデックスでの位置。見つからなかった場合は -1。 <paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は 0 です。</returns>
      <param name="value">シークする文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は null なので、</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32)">
      <summary>指定された文字列がこのインスタンス内で最初に見つかった位置の 0 から始まるインデックスをレポートします。 検索は、指定した文字位置から開始されます。</summary>
      <returns>その文字列が見つかった場合は、<paramref name="value" /> の 0 から始まるインデックスでの位置。見つからなかった場合は -1。 <paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は <paramref name="startIndex" /> です。</returns>
      <param name="value">シークする文字列。</param>
      <param name="startIndex">検索が開始される位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が 0 (ゼロ) 未満か、この文字列の長さを超えています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
      <summary>指定された文字列がこのインスタンス内で最初に見つかった位置の 0 から始まるインデックスをレポートします。 検索は指定した文字位置から開始され、指定した数の文字位置が検査されます。</summary>
      <returns>その文字列が見つかった場合は、<paramref name="value" /> の 0 から始まるインデックスでの位置。見つからなかった場合は -1。 <paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は <paramref name="startIndex" /> です。</returns>
      <param name="value">シークする文字列。</param>
      <param name="startIndex">検索が開始される位置。</param>
      <param name="count">検査する文字位置の数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> または <paramref name="startIndex" /> が負の値です。 または <paramref name="startIndex" /> がこの文字列の長さを超えています。 または <paramref name="count" /> がこの文字列 <paramref name="startIndex" /> の長さを超えています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>指定した文字列が現在の <see cref="T:System.String" /> オブジェクト内で最初に見つかった位置の 0 から始まるインデックスをレポートします。 パラメーターは、現在の文字列での検索位置、現在の文字列で検索する文字の数、および指定した文字列に使用する検索の種類を指定します。</summary>
      <returns>その文字列が見つかった場合は、<paramref name="value" /> パラメーターの 0 から始まるインデックスでの位置。見つからなかった場合は -1。 <paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は <paramref name="startIndex" /> です。</returns>
      <param name="value">シークする文字列。</param>
      <param name="startIndex">検索が開始される位置。</param>
      <param name="count">検査する文字位置の数。</param>
      <param name="comparisonType">検索の規則を指定する列挙値の 1 つ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> または <paramref name="startIndex" /> が負の値です。 または <paramref name="startIndex" /> がこのインスタンスの長さを超えています。 または <paramref name="count" /> がこの文字列 <paramref name="startIndex" /> の長さを超えています。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> が有効な <see cref="T:System.StringComparison" /> 値ではありません。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>指定した文字列が現在の <see cref="T:System.String" /> オブジェクト内で最初に見つかった位置の 0 から始まるインデックスをレポートします。 パラメーターは、現在の文字列内での検索の開始位置を指定し、指定した文字列に使用する検索の種類を指定します。</summary>
      <returns>その文字列が見つかった場合は、<paramref name="value" /> パラメーターの 0 から始まるインデックスでの位置。見つからなかった場合は -1。 <paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は <paramref name="startIndex" /> です。</returns>
      <param name="value">シークする文字列。</param>
      <param name="startIndex">検索が開始される位置。</param>
      <param name="comparisonType">検索の規則を指定する列挙値の 1 つ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が 0 (ゼロ) 未満か、この文字列の長さを超えています。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> が有効な <see cref="T:System.StringComparison" /> 値ではありません。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.StringComparison)">
      <summary>指定した文字列が現在の <see cref="T:System.String" /> オブジェクト内で最初に見つかった位置の 0 から始まるインデックスをレポートします。 指定した文字列に使用する検索の種類を指定するパラメーター。</summary>
      <returns>その文字列が見つかった場合は、<paramref name="value" /> パラメーターのインデックス位置。見つからなかった場合は -1。 <paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は 0 です。</returns>
      <param name="value">シークする文字列。</param>
      <param name="comparisonType">検索の規則を指定する列挙値の 1 つ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> が有効な <see cref="T:System.StringComparison" /> 値ではありません。</exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[])">
      <summary>Unicode 文字の指定した配列内にある文字がこのインスタンスで最初に見つかった位置の 0 から始まるインデックスをレポートします。</summary>
      <returns>
        <paramref name="anyOf" /> 内の文字がこのインスタンスで最初に見つかった場所の 0 から始まるインデックスでの位置。<paramref name="anyOf" /> 内に文字が見つからなかった場合は -1。</returns>
      <param name="anyOf">シークする 1 つ以上の文字を格納している、Unicode 文字の配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> は null なので、</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32)">
      <summary>Unicode 文字の指定した配列内にある文字がこのインスタンスで最初に見つかった位置の 0 から始まるインデックスをレポートします。 検索は、指定した文字位置から開始されます。</summary>
      <returns>
        <paramref name="anyOf" /> 内の文字がこのインスタンスで最初に見つかった場所の 0 から始まるインデックスでの位置。<paramref name="anyOf" /> 内に文字が見つからなかった場合は -1。</returns>
      <param name="anyOf">シークする 1 つ以上の文字を格納している、Unicode 文字の配列。</param>
      <param name="startIndex">検索が開始される位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が負の値です。 または <paramref name="startIndex" /> が、このインスタンスの文字数を超えています。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>Unicode 文字の指定した配列内にある文字がこのインスタンスで最初に見つかった位置の 0 から始まるインデックスをレポートします。 検索は指定した文字位置から開始され、指定した数の文字位置が検査されます。</summary>
      <returns>
        <paramref name="anyOf" /> 内の文字がこのインスタンスで最初に見つかった場所の 0 から始まるインデックスでの位置。<paramref name="anyOf" /> 内に文字が見つからなかった場合は -1。</returns>
      <param name="anyOf">シークする 1 つ以上の文字を格納している、Unicode 文字の配列。</param>
      <param name="startIndex">検索が開始される位置。</param>
      <param name="count">検査する文字位置の数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> または <paramref name="startIndex" /> が負の値です。 または <paramref name="count" /> + <paramref name="startIndex" /> が、このインスタンスの文字数を超えています。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Insert(System.Int32,System.String)">
      <summary>このインスタンス内の指定したインデックス位置に指定した文字列を挿入する場合の、新しい文字列を返します。</summary>
      <returns>このインスタンスと等価で、<paramref name="startIndex" /> の位置に <paramref name="value" /> が挿入された新しい文字列。</returns>
      <param name="startIndex">挿入の 0 から始まるインデックス位置。</param>
      <param name="value">挿入する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が負か、またはこのインスタンスの長さより大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IsNullOrEmpty(System.String)">
      <summary>指定された文字列が null または <see cref="F:System.String.Empty" /> 文字列であるかどうかを示します。</summary>
      <returns>
        <paramref name="value" /> パラメーターが null または空の文字列 ("") の場合は true。それ以外の場合は false。</returns>
      <param name="value">テストする文字列。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IsNullOrWhiteSpace(System.String)">
      <summary>指定された文字列が null または空であるか、空白文字だけで構成されているかどうかを示します。</summary>
      <returns>
        <paramref name="value" /> パラメーターが null または <see cref="F:System.String.Empty" /> であるか、<paramref name="value" /> が空白文字だけで構成されている場合は true。</returns>
      <param name="value">テストする文字列。</param>
    </member>
    <member name="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
        <see cref="T:System.String" /> 型の構築された <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションのメンバーを連結します。各メンバーの間には、指定した区切り記号が挿入されます。</summary>
      <returns>
        <paramref name="values" /> のメンバーから成る、<paramref name="separator" /> 文字列で区切られた文字列。 <paramref name="values" /> にメンバーがない場合、メソッドは <see cref="F:System.String.Empty" /> を返します。</returns>
      <param name="separator">区切り記号として使用する文字列。 <paramref name="values" /> が 2 つ以上の要素を含む場合のみ、<paramref name="separator" /> が返される文字列に含まれます。</param>
      <param name="values">連結する文字列を格納しているコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> は null なので、</exception>
    </member>
    <member name="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
      <summary>コレクションのメンバーを連結します。各メンバーの間には、指定した区切り記号が挿入されます。</summary>
      <returns>
        <paramref name="values" /> のメンバーから成る、<paramref name="separator" /> 文字列で区切られた文字列。 <paramref name="values" /> にメンバーがない場合、メソッドは <see cref="F:System.String.Empty" /> を返します。</returns>
      <param name="separator">区切り記号として使用する文字列。 <paramref name="values" /> が 2 つ以上の要素を含む場合のみ、<paramref name="separator" /> が返される文字列に含まれます。</param>
      <param name="values">連結するオブジェクトを格納しているコレクション。</param>
      <typeparam name="T">
        <paramref name="values" /> のメンバーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> は null なので、</exception>
    </member>
    <member name="M:System.String.Join(System.String,System.Object[])">
      <summary>オブジェクト配列の要素を連結します。各要素の間には、指定した区切り記号が挿入されます。</summary>
      <returns>
        <paramref name="values" /> の要素から成る、<paramref name="separator" /> 文字列で区切られた文字列。 <paramref name="values" /> が空の配列の場合、メソッドは <see cref="F:System.String.Empty" /> を返します。</returns>
      <param name="separator">区切り記号として使用する文字列。 <paramref name="values" /> が 2 つ以上の要素を含む場合のみ、<paramref name="separator" /> が返される文字列に含まれます。</param>
      <param name="values">連結する要素を格納している配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> は null なので、</exception>
    </member>
    <member name="M:System.String.Join(System.String,System.String[])">
      <summary>文字列配列のすべての要素を連結します。各要素の間には、指定した区切り記号が挿入されます。</summary>
      <returns>
        <paramref name="value" /> 内の要素から成る、<paramref name="separator" /> 文字列で区切られた文字列。 <paramref name="value" /> が空の配列の場合、メソッドは <see cref="F:System.String.Empty" /> を返します。</returns>
      <param name="separator">区切り記号として使用する文字列。 <paramref name="value" /> が 2 つ以上の要素を含む場合のみ、<paramref name="separator" /> が返される文字列に含まれます。</param>
      <param name="value">連結する要素を格納している配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は null なので、</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
      <summary>文字列配列の指定した要素を連結します。各要素の間には、指定した区切り記号が挿入されます。</summary>
      <returns>
        <paramref name="value" /> 内の文字列から成る、<paramref name="separator" /> 文字列で区切られた文字列。 または <paramref name="count" /> が 0 である場合、<paramref name="value" /> に要素がない場合、または <paramref name="separator" /> と <paramref name="value" /> のすべての要素が <see cref="F:System.String.Empty" /> である場合は、<see cref="F:System.String.Empty" />。</returns>
      <param name="separator">区切り記号として使用する文字列。 <paramref name="value" /> が 2 つ以上の要素を含む場合のみ、<paramref name="separator" /> が返される文字列に含まれます。</param>
      <param name="value">連結する要素を格納している配列。</param>
      <param name="startIndex">使用する <paramref name="value" /> の最初の要素。</param>
      <param name="count">使用する <paramref name="value" /> の要素の数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> または <paramref name="count" /> が 0 未満です。 または <paramref name="startIndex" /> と <paramref name="count" /> を合計した値が、<paramref name="value" /> の要素数よりも大きい値です。</exception>
      <exception cref="T:System.OutOfMemoryException">メモリが不足しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char)">
      <summary>このインスタンス内で最後に出現する指定 Unicode 文字の 0 から始まるインデックス位置をレポートします。</summary>
      <returns>その文字が見つかった場合は、<paramref name="value" /> の 0 から始まるインデックスでの位置。見つからなかった場合は -1。</returns>
      <param name="value">シークする Unicode 文字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32)">
      <summary>このインスタンス内で最後に出現する指定 Unicode 文字の 0 から始まるインデックス位置をレポートします。 検索は、指定された文字位置から開始され、文字列の先頭に向かって逆方向に進みます。</summary>
      <returns>その文字が見つかった場合は、<paramref name="value" /> の 0 から始まるインデックス位置。見つからなかった場合、または現在のインスタンスが <see cref="F:System.String.Empty" /> と等しい場合は -1。</returns>
      <param name="value">シークする Unicode 文字。</param>
      <param name="startIndex">検索の開始位置。 検索は、このインスタンスの先頭に向かって <paramref name="startIndex" /> から開始されます。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> が 0 未満か、このインスタンスの長さ以上です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
      <summary>このインスタンス内の部分文字列で最後に出現する指定 Unicode 文字の 0 から始まるインデックス位置をレポートします。 検索は指定された文字位置から開始し、文字列の開始に向かって後方に移動し、文字位置の指定された数だけ行われます。</summary>
      <returns>その文字が見つかった場合は、<paramref name="value" /> の 0 から始まるインデックス位置。見つからなかった場合、または現在のインスタンスが <see cref="F:System.String.Empty" /> と等しい場合は -1。</returns>
      <param name="value">シークする Unicode 文字。</param>
      <param name="startIndex">検索の開始位置。 検索は、このインスタンスの先頭に向かって <paramref name="startIndex" /> から開始されます。</param>
      <param name="count">検査する文字位置の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> が 0 未満か、このインスタンスの長さ以上です。 または 現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" />  -<paramref name="count" /> + 1 が 0 未満です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.String)">
      <summary>指定された文字列がこのインスタンス内で最後に見つかった 0 から始まるインデックス位置をレポートします。</summary>
      <returns>その文字列が見つかった場合は、<paramref name="value" /> の 0 から始まるインデックスでの位置。見つからなかった場合は -1。 <paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値はこのインスタンスの最後のインデックス位置です。</returns>
      <param name="value">シークする文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は null なので、</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32)">
      <summary>指定された文字列がこのインスタンス内で最後に見つかった 0 から始まるインデックス位置をレポートします。 検索は、指定された文字位置から開始され、文字列の先頭に向かって逆方向に進みます。</summary>
      <returns>その文字列が見つかった場合は、<paramref name="value" /> の 0 から始まるインデックス位置。見つからなかった場合、または現在のインスタンスが <see cref="F:System.String.Empty" /> と等しい場合は -1。 <paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は、<paramref name="startIndex" /> かこのインスタンスの最後のインデックス位置のいずれか小さい方です。</returns>
      <param name="value">シークする文字列。</param>
      <param name="startIndex">検索が開始される位置。 検索は、このインスタンスの先頭に向かって <paramref name="startIndex" /> から開始されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> が 0 未満か、現在のインスタンスの長さを超えています。 または 現在のインスタンスが <see cref="F:System.String.Empty" /> と等しく、<paramref name="startIndex" /> が 0 より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
      <summary>指定された文字列がこのインスタンス内で最後に見つかった 0 から始まるインデックス位置をレポートします。 検索は指定された文字位置から開始し、文字列の開始に向かって後方に移動し、文字位置の指定された数だけ行われます。</summary>
      <returns>その文字列が見つかった場合は、<paramref name="value" /> の 0 から始まるインデックス位置。見つからなかった場合、または現在のインスタンスが <see cref="F:System.String.Empty" /> と等しい場合は -1。 <paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は、<paramref name="startIndex" /> かこのインスタンスの最後のインデックス位置のいずれか小さい方です。</returns>
      <param name="value">シークする文字列。</param>
      <param name="startIndex">検索が開始される位置。 検索は、このインスタンスの先頭に向かって <paramref name="startIndex" /> から開始されます。</param>
      <param name="count">検査する文字位置の数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> が負の値です。 または 現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> が負です。 または 現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> がこのインスタンスの長さを超えています。 または 現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" />  -<paramref name="count" /> + 1 が、このインスタンス内に存在しない位置を示しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>指定された文字列がこのインスタンス内で最後に見つかった 0 から始まるインデックス位置をレポートします。 検索は指定された文字位置から開始し、文字列の開始に向かって後方に移動し、文字位置の指定された数だけ行われます。 指定した文字列の検索時に実行する比較の種類を指定するパラメーター。</summary>
      <returns>その文字列が見つかった場合は、<paramref name="value" /> パラメーターのインデックス位置。見つからなかった場合、または現在のインスタンスが <see cref="F:System.String.Empty" /> と等しい場合は -1。 <paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は、<paramref name="startIndex" /> かこのインスタンスの最後のインデックス位置のいずれか小さい方です。</returns>
      <param name="value">シークする文字列。</param>
      <param name="startIndex">検索が開始される位置。 検索は、このインスタンスの先頭に向かって <paramref name="startIndex" /> から開始されます。</param>
      <param name="count">検査する文字位置の数。</param>
      <param name="comparisonType">検索の規則を指定する列挙値の 1 つ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> が負の値です。 または 現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> が負です。 または 現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> がこのインスタンスの長さを超えています。 または 現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> + 1-  <paramref name="count" /> がこのインスタンス内ではない位置を指定しています。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> が有効な <see cref="T:System.StringComparison" /> 値ではありません。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>指定した文字列が現在の <see cref="T:System.String" /> オブジェクト内で最後に見つかった 0 から始まる位置のインデックスをレポートします。 検索は、指定された文字位置から開始され、文字列の先頭に向かって逆方向に進みます。 指定した文字列の検索時に実行する比較の種類を指定するパラメーター。</summary>
      <returns>その文字列が見つかった場合は、<paramref name="value" /> パラメーターのインデックス位置。見つからなかった場合、または現在のインスタンスが <see cref="F:System.String.Empty" /> と等しい場合は -1。 <paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は、<paramref name="startIndex" /> かこのインスタンスの最後のインデックス位置のいずれか小さい方です。</returns>
      <param name="value">シークする文字列。</param>
      <param name="startIndex">検索が開始される位置。 検索は、このインスタンスの先頭に向かって <paramref name="startIndex" /> から開始されます。</param>
      <param name="comparisonType">検索の規則を指定する列挙値の 1 つ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> が 0 未満か、現在のインスタンスの長さを超えています。 または 現在のインスタンスが <see cref="F:System.String.Empty" /> と等しく、<paramref name="startIndex" /> が 0 より大きい値です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> が有効な <see cref="T:System.StringComparison" /> 値ではありません。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.StringComparison)">
      <summary>指定した文字列が現在の <see cref="T:System.String" /> オブジェクト内で最後に見つかった 0 から始まる位置のインデックスをレポートします。 指定した文字列に使用する検索の種類を指定するパラメーター。</summary>
      <returns>その文字列が見つかった場合は、<paramref name="value" /> パラメーターのインデックス位置。見つからなかった場合は -1。 <paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値はこのインスタンスの最後のインデックス位置です。</returns>
      <param name="value">シークする文字列。</param>
      <param name="comparisonType">検索の規則を指定する列挙値の 1 つ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> が有効な <see cref="T:System.StringComparison" /> 値ではありません。</exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[])">
      <summary>Unicode 配列内の指定した 1 つ以上の文字がこのインスタンスで最後に見つかった 0 から始まるインデックス位置をレポートします。</summary>
      <returns>
        <paramref name="anyOf" /> 内の文字がこのインスタンスで最後に見つかった場所のインデックス位置。<paramref name="anyOf" /> 内の文字が見つからなかった場合は -1。</returns>
      <param name="anyOf">シークする 1 つ以上の文字を格納している、Unicode 文字の配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> は null なので、</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
      <summary>Unicode 配列内の指定した 1 つ以上の文字がこのインスタンスで最後に見つかった 0 から始まるインデックス位置をレポートします。 検索は、指定された文字位置から開始され、文字列の先頭に向かって逆方向に進みます。</summary>
      <returns>
        <paramref name="anyOf" /> 内の文字がこのインスタンスで最後に見つかった場所のインデックス位置。<paramref name="anyOf" /> 内の文字が見つからなかった場合、または現在のインスタンスが <see cref="F:System.String.Empty" /> と等しい場合は -1。</returns>
      <param name="anyOf">シークする 1 つ以上の文字を格納している、Unicode 文字の配列。</param>
      <param name="startIndex">検索が開始される位置。 検索は、このインスタンスの先頭に向かって <paramref name="startIndex" /> から開始されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> がこのインスタンス内ではない位置を指定しています。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>Unicode 配列内の指定した 1 つ以上の文字がこのインスタンスで最後に見つかった 0 から始まるインデックス位置をレポートします。 検索は指定された文字位置から開始し、文字列の開始に向かって後方に移動し、文字位置の指定された数だけ行われます。</summary>
      <returns>
        <paramref name="anyOf" /> 内の文字がこのインスタンスで最後に見つかった場所のインデックス位置。<paramref name="anyOf" /> 内の文字が見つからなかった場合、または現在のインスタンスが <see cref="F:System.String.Empty" /> と等しい場合は -1。</returns>
      <param name="anyOf">シークする 1 つ以上の文字を格納している、Unicode 文字の配列。</param>
      <param name="startIndex">検索が開始される位置。 検索は、このインスタンスの先頭に向かって <paramref name="startIndex" /> から開始されます。</param>
      <param name="count">検査する文字位置の数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="count" /> または <paramref name="startIndex" /> が負の値です。 または 現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> - <paramref name="count" /> + 1 が 0 未満です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.String.Length">
      <summary>現在の <see cref="T:System.String" /> オブジェクト内の文字数を取得します。</summary>
      <returns>現在の文字列の文字数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.op_Equality(System.String,System.String)">
      <summary>指定した 2 つの文字列の値が同一かどうかを判断します。</summary>
      <returns>
        <paramref name="a" /> の値が <paramref name="b" /> の値と同じ場合は true。それ以外の場合は false。</returns>
      <param name="a">比較する最初の文字列または null。</param>
      <param name="b">比較する 2 番目の文字列または null。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.String.op_Inequality(System.String,System.String)">
      <summary>指定した 2 つの文字列の値が異なるかどうかを判断します。</summary>
      <returns>
        <paramref name="a" /> の値が <paramref name="b" /> の値と異なる場合は true。それ以外の場合は false。</returns>
      <param name="a">比較する最初の文字列または null。</param>
      <param name="b">比較する 2 番目の文字列または null。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.String.PadLeft(System.Int32)">
      <summary>指定された文字数になるまで左側に空白を埋め込むことで、このインスタンス内の文字を右寄せした新しい文字列を返します。</summary>
      <returns>このインスタンスと等価な新しい文字列。ただし右揃えであり、<paramref name="totalWidth" /> の長さになるまで左側に空白が埋め込まれています。 ただし、<paramref name="totalWidth" /> がこのインスタンスの長さより短い場合、メソッドは既存のインスタンスへの参照を返します。 <paramref name="totalWidth" /> がこのインスタンスの長さと等しい場合、メソッドはこのインスタンスと同一の新しい文字列を返します。</returns>
      <param name="totalWidth">結果として生成される文字列の文字数。これは、元の文字数と、埋め込み文字がある場合はその数を加えた数に等しくなります。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> が 0 未満です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.PadLeft(System.Int32,System.Char)">
      <summary>指定された文字数になるまで左側に指定された Unicode 文字を埋め込むことで、このインスタンス内の文字を右寄せした新しい文字列を返します。</summary>
      <returns>このインスタンスと等価な新しい文字列。ただし右揃えであり、<paramref name="totalWidth" /> の長さになるまで左側に <paramref name="paddingChar" /> の文字が埋め込まれています。 ただし、<paramref name="totalWidth" /> がこのインスタンスの長さより短い場合、メソッドは既存のインスタンスへの参照を返します。 <paramref name="totalWidth" /> がこのインスタンスの長さと等しい場合、メソッドはこのインスタンスと同一の新しい文字列を返します。</returns>
      <param name="totalWidth">結果として生成される文字列の文字数。これは、元の文字数と、埋め込み文字がある場合はその数を加えた数に等しくなります。</param>
      <param name="paddingChar">Unicode 埋め込み文字。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> が 0 未満です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.PadRight(System.Int32)">
      <summary>指定された文字数になるまで右側に空白を埋め込むことで、この文字列内の文字を左寄せした新しい文字列を返します。</summary>
      <returns>このインスタンスと等価な新しい文字列。ただし左揃えであり、<paramref name="totalWidth" /> の長さになるまで右側に空白が埋め込まれています。 ただし、<paramref name="totalWidth" /> がこのインスタンスの長さより短い場合、メソッドは既存のインスタンスへの参照を返します。 <paramref name="totalWidth" /> がこのインスタンスの長さと等しい場合、メソッドはこのインスタンスと同一の新しい文字列を返します。</returns>
      <param name="totalWidth">結果として生成される文字列の文字数。これは、元の文字数と、埋め込み文字がある場合はその数を加えた数に等しくなります。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> が 0 未満です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.PadRight(System.Int32,System.Char)">
      <summary>指定された文字数になるまで右側に指定された Unicode 文字を埋め込むことで、この文字列内の文字を左寄せした新しい文字列を返します。</summary>
      <returns>このインスタンスと等価な新しい文字列。ただし左揃えであり、<paramref name="totalWidth" /> の長さになるまで右側に <paramref name="paddingChar" /> の文字が埋め込まれています。ただし、<paramref name="totalWidth" /> がこのインスタンスの長さより短い場合、メソッドは既存のインスタンスへの参照を返します。 <paramref name="totalWidth" /> がこのインスタンスの長さと等しい場合、メソッドはこのインスタンスと同一の新しい文字列を返します。</returns>
      <param name="totalWidth">結果として生成される文字列の文字数。これは、元の文字数と、埋め込み文字がある場合はその数を加えた数に等しくなります。</param>
      <param name="paddingChar">Unicode 埋め込み文字。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> が 0 未満です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Remove(System.Int32)">
      <summary>現在のインスタンスの指定した位置から指定した最後の位置までの全文字が削除された新しい文字列を返します。</summary>
      <returns>この文字列から対象となる文字を取り除いた新しい文字列。</returns>
      <param name="startIndex">文字を削除する際の 0 から始まる開始位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が 0 未満です。 または <paramref name="startIndex" /> に、この文字列の範囲外の位置が指定されています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Remove(System.Int32,System.Int32)">
      <summary>現在のインスタンス内の指定した位置から指定した文字数が削除された新しい文字列を返します。</summary>
      <returns>このインスタンスから対象となる文字を取り除いた新しい文字列。</returns>
      <param name="startIndex">文字を削除する際の 0 から始まる開始位置。</param>
      <param name="count">削除する文字数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> または <paramref name="count" /> が 0 未満です。 または <paramref name="count" /> に <paramref name="startIndex" /> を足した数が、このインスタンス内にない位置を示しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Replace(System.Char,System.Char)">
      <summary>このインスタンスに出現する指定した Unicode 文字をすべて、別に指定した Unicode 文字に置換した新しい文字列を返します。</summary>
      <returns>
        <paramref name="oldChar" /> のすべてのインスタンスが <paramref name="newChar" /> で置き換えられることを除いて、このインスタンスと等価な文字列。 <paramref name="oldChar" /> が現在のインスタンス内に見つからない場合、メソッドは現在のインスタンスを変更せずに返します。</returns>
      <param name="oldChar">置換する Unicode 文字。</param>
      <param name="newChar">出現するすべての <paramref name="oldChar" /> を置換する Unicode 文字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Replace(System.String,System.String)">
      <summary>現在のインスタンスに出現する指定した文字列をすべて、別に指定した文字列に置換した新しい文字列を返します。</summary>
      <returns>
        <paramref name="oldValue" /> のすべてのインスタンスが <paramref name="newValue" /> で置き換えられることを除いて、現在の文字列と等価な文字列。 <paramref name="oldValue" /> が現在のインスタンス内に見つからない場合、メソッドは変更なしで現在のインスタンスを返します。</returns>
      <param name="oldValue">置換される文字列。</param>
      <param name="newValue">出現するすべての <paramref name="oldValue" /> を置換する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> が空の文字列 ("") です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.Char[])">
      <summary>このインスタンス内の、指定された Unicode 文字の配列の要素で区切られた部分文字列を格納する文字列配列を返します。</summary>
      <returns>このインスタンスを、<paramref name="separator" /> 配列のいずれかまたは複数の要素 (文字) で区切ることによって取り出された部分文字列を格納する配列。 詳細については、「解説」を参照してください。</returns>
      <param name="separator">このインスタンスでの部分文字列の区切り文字である Unicode 文字の配列、区切り文字が含まれていない空の配列、または null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.Char[],System.Int32)">
      <summary>このインスタンス内の、指定された Unicode 文字の配列の要素で区切られた部分文字列を格納する文字列配列を返します。 パラメーターには、取得する部分文字列の最大数を指定します。</summary>
      <returns>このインスタンスを、<paramref name="separator" /> 配列のいずれかまたは複数の要素 (文字) で区切ることによって取り出された部分文字列を格納する配列。 詳細については、「解説」を参照してください。</returns>
      <param name="separator">このインスタンスでの部分文字列の区切り文字である Unicode 文字の配列、区切り文字が含まれていない空の配列、または null。</param>
      <param name="count">返される最大の部分文字列数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> が負の値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
      <summary>指定された Unicode 文字の配列の要素で区切られた、この文字列の部分文字列を格納する文字列配列を返します。 返される部分文字列の最大数と、空の配列要素を返すかどうかをパラメーターで指定します。</summary>
      <returns>この文字列を、<paramref name="separator" /> 配列のいずれかまたは複数の要素 (文字) で区切ることによって取り出された部分文字列を格納する配列。 詳細については、「解説」を参照してください。</returns>
      <param name="separator">この文字列での部分文字列の区切り文字である Unicode 文字の配列、区切り文字が含まれていない空の配列、または null。</param>
      <param name="count">返される最大の部分文字列数。</param>
      <param name="options">返される配列から空の配列要素を省略する場合は <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />。返される配列に空の配列要素も含める場合は <see cref="F:System.StringSplitOptions.None" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> が <see cref="T:System.StringSplitOptions" /> 値ではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.Char[],System.StringSplitOptions)">
      <summary>指定された Unicode 文字の配列の要素で区切られた、この文字列の部分文字列を格納する文字列配列を返します。 空の配列要素を返すかどうかをパラメーターで指定します。</summary>
      <returns>この文字列を、<paramref name="separator" /> 配列のいずれかまたは複数の要素 (文字) で区切ることによって取り出された部分文字列を格納する配列。 詳細については、「解説」を参照してください。</returns>
      <param name="separator">この文字列での部分文字列の区切り文字である Unicode 文字の配列、区切り文字が含まれていない空の配列、または null。</param>
      <param name="options">返される配列から空の配列要素を省略する場合は <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />。返される配列に空の配列要素も含める場合は <see cref="F:System.StringSplitOptions.None" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> が <see cref="T:System.StringSplitOptions" /> 値ではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
      <summary>指定された文字列の配列の要素で区切られた、この文字列の部分文字列を格納する文字列配列を返します。 返される部分文字列の最大数と、空の配列要素を返すかどうかをパラメーターで指定します。</summary>
      <returns>この文字列を、<paramref name="separator" /> 配列のいずれかまたは複数の要素 (文字列) で区切ることによって取り出された部分文字列を格納する配列。 詳細については、「解説」を参照してください。</returns>
      <param name="separator">この文字列から部分文字列を取り出すために区切り文字として使用する文字列の配列、区切り文字が含まれていない空の配列、または null。</param>
      <param name="count">返される最大の部分文字列数。</param>
      <param name="options">返される配列から空の配列要素を省略する場合は <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />。返される配列に空の配列要素も含める場合は <see cref="F:System.StringSplitOptions.None" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> が <see cref="T:System.StringSplitOptions" /> 値ではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.String[],System.StringSplitOptions)">
      <summary>指定された文字列の配列の要素で区切られた、この文字列の部分文字列を格納する文字列配列を返します。 空の配列要素を返すかどうかをパラメーターで指定します。</summary>
      <returns>この文字列を、<paramref name="separator" /> 配列のいずれかまたは複数の要素 (文字列) で区切ることによって取り出された部分文字列を格納する配列。 詳細については、「解説」を参照してください。</returns>
      <param name="separator">この文字列から部分文字列を取り出すために区切り文字として使用する文字列の配列、区切り文字が含まれていない空の配列、または null。</param>
      <param name="options">返される配列から空の配列要素を省略する場合は <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />。返される配列に空の配列要素も含める場合は <see cref="F:System.StringSplitOptions.None" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> が <see cref="T:System.StringSplitOptions" /> 値ではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.StartsWith(System.String)">
      <summary>この文字列インスタンスの先頭が、指定した文字列と一致するかどうかを判断します。</summary>
      <returns>この文字列の先頭が <paramref name="value" /> と一致する場合は true。それ以外の場合は false。</returns>
      <param name="value">比較対象の文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は null なので、</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.StartsWith(System.String,System.StringComparison)">
      <summary>指定された比較オプションを使って比較した場合に、この文字列インスタンスの先頭が、指定された文字列と一致するかどうかを判断します。</summary>
      <returns>インスタンスが <paramref name="value" /> で開始する場合は true。それ以外の場合は false。</returns>
      <param name="value">比較対象の文字列。</param>
      <param name="comparisonType">この文字列と <paramref name="value" /> との比較方法を決定する列挙値の 1 つ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> が <see cref="T:System.StringComparison" /> 値ではありません。</exception>
    </member>
    <member name="M:System.String.Substring(System.Int32)">
      <summary>インスタンスから部分文字列を取得します。 部分文字列は、文字列中の指定した文字の位置で開始し、文字列の末尾まで続きます。</summary>
      <returns>このインスタンスの <paramref name="startIndex" /> で始まる部分文字列と等価な文字列。または、<paramref name="startIndex" /> がこのインスタンスの長さと等しい場合は <see cref="F:System.String.Empty" />。</returns>
      <param name="startIndex">このインスタンス内の部分文字列の 0 から始まる開始文字位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が、0 未満か、このインスタンスの長さを超えています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Substring(System.Int32,System.Int32)">
      <summary>インスタンスから部分文字列を取得します。 この部分文字列は、指定した文字位置から開始し、指定した文字数の文字列です。</summary>
      <returns>このインスタンスの <paramref name="startIndex" /> から始まる <paramref name="length" /> で指定された長さの部分文字列と等価な文字列。または、<paramref name="startIndex" /> がこのインスタンスの長さと等しく、<paramref name="length" /> がゼロの場合は <see cref="F:System.String.Empty" />。</returns>
      <param name="startIndex">このインスタンス内の部分文字列の 0 から始まる開始文字位置。</param>
      <param name="length">部分文字列の文字数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> と <paramref name="length" /> を足した数が、このインスタンス内にない位置を示しています。 または <paramref name="startIndex" /> または <paramref name="length" /> が 0 未満です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.System#Collections#IEnumerable#GetEnumerator">
      <summary>現在の <see cref="T:System.String" /> オブジェクトを反復処理する列挙子を返します。</summary>
      <returns>現在の文字列を反復処理するために使用できる列挙子。</returns>
    </member>
    <member name="M:System.String.System#IComparable#CompareTo(System.Object)">
      <summary>現在のインスタンスを同じ型の別のオブジェクトと比較し、現在のインスタンスの並べ替え順序での位置が、比較対象のオブジェクトと比べて前か、後か、または同じかを示す整数を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対順序を示す符号付き整数。 
戻り値 	説明 	
0 より小さい値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも前です。 	
0 	このインスタンスは、並べ替え順序で、<paramref name="value" /> と同じ位置に出現します。 	
0 を超える値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも後ろです。 または <paramref name="value" /> は null なので、</returns>
      <param name="value">対象のインスタンスと比較する対象のオブジェクト、または null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が <see cref="T:System.String" /> ではありません。</exception>
    </member>
    <member name="M:System.String.ToCharArray">
      <summary>このインスタンスの文字を Unicode 文字配列へコピーします。</summary>
      <returns>このインスタンスの各文字を要素とする Unicode 文字配列。 このインスタンスが空の文字列である場合、返される配列は空で、長さは 0 になります。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.ToCharArray(System.Int32,System.Int32)">
      <summary>このインスタンスの指定した部分文字列の文字を Unicode 文字配列へコピーします。</summary>
      <returns>このインスタンスの文字位置 <paramref name="startIndex" /> から、<paramref name="length" /> の数の文字を要素とする Unicode 文字配列。</returns>
      <param name="startIndex">このインスタンス内の部分文字列の開始位置。</param>
      <param name="length">このインスタンス内の文字列の長さ。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> または <paramref name="length" /> が 0 未満です。 または <paramref name="startIndex" /> と <paramref name="length" /> を合計した値が、このインスタンスの長さよりも大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.ToLower">
      <summary>この文字列のコピーを小文字に変換して返します。</summary>
      <returns>小文字の文字列。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.String.ToLowerInvariant">
      <summary>インバリアント カルチャの大文字と小文字の規則を使用して、この <see cref="T:System.String" /> オブジェクトのコピーを小文字に変換して返します。</summary>
      <returns>現在の文字列を小文字にしたもの。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.String.ToString">
      <summary>
        <see cref="T:System.String" /> のこのインスタンスを返します。実際の変換処理は実行されません。</summary>
      <returns>現在の文字列。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.ToUpper">
      <summary>この文字列のコピーを大文字に変換して返します。</summary>
      <returns>現在の文字列を大文字にしたもの。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.String.ToUpperInvariant">
      <summary>インバリアント カルチャの大文字と小文字の規則を使用して、この <see cref="T:System.String" /> オブジェクトのコピーを大文字に変換して返します。</summary>
      <returns>現在の文字列を大文字にしたもの。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.String.Trim">
      <summary>現在の <see cref="T:System.String" /> オブジェクトの先頭および末尾にある空白文字をすべて削除します。</summary>
      <returns>現在の文字列の先頭および末尾から空白文字をすべて削除した後に残った文字列。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Trim(System.Char[])">
      <summary>現在の <see cref="T:System.String" /> オブジェクトの先頭および末尾から、配列で指定された文字セットをすべて削除します。</summary>
      <returns>現在の文字列の先頭および末尾から、<paramref name="trimChars" /> パラメーターの文字をすべて削除した後に残った文字列。 <paramref name="trimChars" /> が null または空の配列の場合は、代わりに空白文字が削除されます。</returns>
      <param name="trimChars">削除する Unicode 文字の配列、または null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.TrimEnd(System.Char[])">
      <summary>現在の <see cref="T:System.String" /> オブジェクトの末尾から、配列で指定された文字セットをすべて削除します。</summary>
      <returns>現在の文字列の末尾から、<paramref name="trimChars" /> パラメーターの文字をすべて削除した後に残った文字列。 <paramref name="trimChars" /> が null または空の配列の場合は、代わりに Unicode の空白文字が削除されます。</returns>
      <param name="trimChars">削除する Unicode 文字の配列、または null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.TrimStart(System.Char[])">
      <summary>現在の <see cref="T:System.String" /> オブジェクトの先頭から、配列で指定された文字セットをすべて削除します。</summary>
      <returns>現在の文字列の先頭から、<paramref name="trimChars" /> パラメーターの文字をすべて削除した後に残った文字列。 <paramref name="trimChars" /> が null または空の配列の場合は、代わりに空白文字が削除されます。</returns>
      <param name="trimChars">削除する Unicode 文字の配列、または null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.StringComparison">
      <summary>
        <see cref="M:System.String.Compare(System.String,System.String)" /> メソッドおよび <see cref="M:System.String.Equals(System.Object)" /> メソッドの特定のオーバーロードで使用するカルチャ、大文字小文字の区別、および並べ替え規則を指定します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.StringComparison.CurrentCulture">
      <summary>カルチャに依存した並べ替え規則および現在のカルチャを使用して文字列を比較します。</summary>
    </member>
    <member name="F:System.StringComparison.CurrentCultureIgnoreCase">
      <summary>カルチャに依存した並べ替え規則および現在のカルチャを使用し、比較対象の文字列の大文字と小文字の違いは無視して文字列を比較します。</summary>
    </member>
    <member name="F:System.StringComparison.Ordinal">
      <summary>序数の並べ替え規則を使用して文字列を比較します。</summary>
    </member>
    <member name="F:System.StringComparison.OrdinalIgnoreCase">
      <summary>序数の並べ替え規則を使用し、比較対象の文字列の大文字と小文字の違いは無視して文字列を比較します。</summary>
    </member>
    <member name="T:System.StringSplitOptions">
      <summary>
        <see cref="Overload:System.String.Split" /> メソッドの一連のオーバーロードの戻り値に、空の部分文字列を含めるかどうかを指定します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.StringSplitOptions.None">
      <summary>戻り値には、空の文字列を含む配列要素が格納されます。</summary>
    </member>
    <member name="F:System.StringSplitOptions.RemoveEmptyEntries">
      <summary>戻り値には、空の文字列を含む配列要素は格納されません。</summary>
    </member>
    <member name="T:System.ThreadStaticAttribute">
      <summary>静的フィールドの値がスレッドごとに一意であることを示します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ThreadStaticAttribute.#ctor">
      <summary>
        <see cref="T:System.ThreadStaticAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.TimeoutException">
      <summary>プロセスまたは操作用に割り当てられた時間が経過したときにスローされる例外。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeoutException.#ctor">
      <summary>
        <see cref="T:System.TimeoutException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String)">
      <summary>
        <see cref="T:System.TimeoutException" /> クラスの新しいインスタンスを、指定したエラー メッセージを使用して初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと内部例外を使用して、<see cref="T:System.TimeoutException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。 <paramref name="innerException" /> パラメーターが null でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.TimeSpan">
      <summary>時間間隔を表します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.TimeSpan" /> 構造体の新しいインスタンスを、指定した時間数、分数、秒数に初期化します。</summary>
      <param name="hours">時間数。</param>
      <param name="minutes">分数。</param>
      <param name="seconds">秒数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">パラメーターに <see cref="F:System.TimeSpan.MinValue" /> より小さいか、<see cref="F:System.TimeSpan.MaxValue" /> より大きい <see cref="T:System.TimeSpan" /> 値が指定されています。</exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.TimeSpan" /> 構造体の新しいインスタンスを、指定した日数、時間数、分数、秒数に初期化します。</summary>
      <param name="days">日数。</param>
      <param name="hours">時間数。</param>
      <param name="minutes">分数。</param>
      <param name="seconds">秒数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">パラメーターに <see cref="F:System.TimeSpan.MinValue" /> より小さいか、<see cref="F:System.TimeSpan.MaxValue" /> より大きい <see cref="T:System.TimeSpan" /> 値が指定されています。</exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.TimeSpan" /> 構造体の新しいインスタンスを、指定した日数、時間数、分数、秒数、ミリ秒数に初期化します。</summary>
      <param name="days">日数。</param>
      <param name="hours">時間数。</param>
      <param name="minutes">分数。</param>
      <param name="seconds">秒数。</param>
      <param name="milliseconds">ミリ秒数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">パラメーターに <see cref="F:System.TimeSpan.MinValue" /> より小さいか、<see cref="F:System.TimeSpan.MaxValue" /> より大きい <see cref="T:System.TimeSpan" /> 値が指定されています。</exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int64)">
      <summary>
        <see cref="T:System.TimeSpan" /> 構造体の新しいインスタンスを、指定したタイマー刻み数に初期化します。</summary>
      <param name="ticks">100 ナノ秒単位で表される期間。</param>
    </member>
    <member name="M:System.TimeSpan.Add(System.TimeSpan)">
      <summary>指定した <see cref="T:System.TimeSpan" /> オブジェクトとこのインスタンスを合計した値を持つ新しい <see cref="T:System.TimeSpan" /> オブジェクトを返します。</summary>
      <returns>このインスタンスの値と <paramref name="ts" /> の値の合計を表す新しいオブジェクト。</returns>
      <param name="ts">加算する時間間隔。</param>
      <exception cref="T:System.OverflowException">結果として得られる <see cref="T:System.TimeSpan" /> が <see cref="F:System.TimeSpan.MinValue" /> より小さい値か、<see cref="F:System.TimeSpan.MaxValue" /> より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)">
      <summary>2 つの <see cref="T:System.TimeSpan" /> 値を比較し、第 1 の値が第 2 の値よりも短いか、同じか、または長いかを示す整数を返します。</summary>
      <returns>次のいずれかの値です。 
値 	説明 	
-1 	<paramref name="t1" /> は <paramref name="t2" /> よりも短いです。 	
0 	<paramref name="t1" /> と <paramref name="t2" /> が等価です。 	
1 	<paramref name="t1" /> は <paramref name="t2" /> よりも長いです。</returns>
      <param name="t1">比較する最初の時間間隔。</param>
      <param name="t2">比較する 2 番目の時間間隔。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.CompareTo(System.TimeSpan)">
      <summary>このインスタンスと指定した <see cref="T:System.TimeSpan" /> オブジェクトを比較し、このインスタンスが指定した <see cref="T:System.TimeSpan" /> オブジェクトよりも短いか、同じか、または長いかを示す整数を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。 
値 	説明 	
負の整数 	このインスタンスは <paramref name="value" /> より短いです。 	
0 	このインスタンスは <paramref name="value" /> と等価です。 	
正の整数 	このインスタンスは <paramref name="value" /> より長いです。</returns>
      <param name="value">このインスタンスと比較するオブジェクト。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.Days">
      <summary>現在の <see cref="T:System.TimeSpan" /> 構造体によって表される時間間隔の日要素を取得します。</summary>
      <returns>このインスタンスの日の部分。 戻り値は、正の場合もあれば負の場合もあります。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Duration">
      <summary>値が現在の <see cref="T:System.TimeSpan" /> オブジェクトの絶対値である、新しい <see cref="T:System.TimeSpan" /> オブジェクトを返します。</summary>
      <returns>値が現在の <see cref="T:System.TimeSpan" /> オブジェクトの絶対値である新しいオブジェクト。</returns>
      <exception cref="T:System.OverflowException">このインスタンスの値が、<see cref="F:System.TimeSpan.MinValue" /> です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Equals(System.Object)">
      <summary>対象のインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="value" /> が現在の <see cref="T:System.TimeSpan" /> 構造体と同じ時間間隔を表す <see cref="T:System.TimeSpan" /> オブジェクトの場合は true。それ以外の場合は false。</returns>
      <param name="value">このインスタンスと比較するオブジェクト。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan)">
      <summary>このインスタンスが、指定した <see cref="T:System.TimeSpan" /> オブジェクトに等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> がこのインスタンスと同じ時間間隔を表している場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan,System.TimeSpan)">
      <summary>
        <see cref="T:System.TimeSpan" /> の指定した 2 つのインスタンスが等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="t1" /> の値と <paramref name="t2" /> の値が等しい場合は true。それ以外の場合は false。</returns>
      <param name="t1">比較する最初の時間間隔。</param>
      <param name="t2">比較する 2 番目の時間間隔。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromDays(System.Double)">
      <summary>指定した日数を表す <see cref="T:System.TimeSpan" /> を返します。日数は、ミリ秒単位の精度で指定します。</summary>
      <returns>
        <paramref name="value" /> を表すオブジェクト。</returns>
      <param name="value">ミリ秒単位の精度による日数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.TimeSpan.MinValue" /> より小さい値か、<see cref="F:System.TimeSpan.MaxValue" /> より大きい値です。 または <paramref name="value" /> は <see cref="F:System.Double.PositiveInfinity" /> です。 または <paramref name="value" /> は <see cref="F:System.Double.NegativeInfinity" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> と <see cref="F:System.Double.NaN" /> が等価です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromHours(System.Double)">
      <summary>指定した時間数を表す <see cref="T:System.TimeSpan" /> を返します。時間数は、ミリ秒単位の精度で指定します。</summary>
      <returns>
        <paramref name="value" /> を表すオブジェクト。</returns>
      <param name="value">ミリ秒単位の精度による時間数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.TimeSpan.MinValue" /> より小さい値か、<see cref="F:System.TimeSpan.MaxValue" /> より大きい値です。 または <paramref name="value" /> は <see cref="F:System.Double.PositiveInfinity" /> です。 または <paramref name="value" /> は <see cref="F:System.Double.NegativeInfinity" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> と <see cref="F:System.Double.NaN" /> が等価です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromMilliseconds(System.Double)">
      <summary>指定したミリ秒数を表す <see cref="T:System.TimeSpan" /> を返します。</summary>
      <returns>
        <paramref name="value" /> を表すオブジェクト。</returns>
      <param name="value">ミリ秒数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.TimeSpan.MinValue" /> より小さい値か、<see cref="F:System.TimeSpan.MaxValue" /> より大きい値です。 または <paramref name="value" /> は <see cref="F:System.Double.PositiveInfinity" /> です。 または <paramref name="value" /> は <see cref="F:System.Double.NegativeInfinity" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> と <see cref="F:System.Double.NaN" /> が等価です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromMinutes(System.Double)">
      <summary>指定した分数を表す <see cref="T:System.TimeSpan" /> を返します。分数は、ミリ秒単位の精度で指定します。</summary>
      <returns>
        <paramref name="value" /> を表すオブジェクト。</returns>
      <param name="value">ミリ秒単位の精度による分数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.TimeSpan.MinValue" /> より小さい値か、<see cref="F:System.TimeSpan.MaxValue" /> より大きい値です。 または <paramref name="value" /> は <see cref="F:System.Double.PositiveInfinity" /> です。 または <paramref name="value" /> は <see cref="F:System.Double.NegativeInfinity" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> と <see cref="F:System.Double.NaN" /> が等価です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromSeconds(System.Double)">
      <summary>指定した秒数を表す <see cref="T:System.TimeSpan" /> を返します。秒数は、ミリ秒単位の精度で指定します。</summary>
      <returns>
        <paramref name="value" /> を表すオブジェクト。</returns>
      <param name="value">ミリ秒単位の精度による秒数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.TimeSpan.MinValue" /> より小さい値か、<see cref="F:System.TimeSpan.MaxValue" /> より大きい値です。 または <paramref name="value" /> は <see cref="F:System.Double.PositiveInfinity" /> です。 または <paramref name="value" /> は <see cref="F:System.Double.NegativeInfinity" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> と <see cref="F:System.Double.NaN" /> が等価です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromTicks(System.Int64)">
      <summary>指定した時間を表す <see cref="T:System.TimeSpan" /> を返します。時間は、タイマー刻み単位で指定します。</summary>
      <returns>
        <paramref name="value" /> を表すオブジェクト。</returns>
      <param name="value">時間を表すタイマー刻み数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.TimeSpan.Hours">
      <summary>現在の <see cref="T:System.TimeSpan" /> 構造体が表す時間間隔の時間の部分を取得します。</summary>
      <returns>現在の <see cref="T:System.TimeSpan" /> 構造体の時間の部分。 戻り値の範囲は、-23 ～ 23 です。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.MaxValue">
      <summary>
        <see cref="T:System.TimeSpan" /> の最大値を表します。 このフィールドは読み取り専用です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.Milliseconds">
      <summary>現在の <see cref="T:System.TimeSpan" /> 構造体が表す時間間隔のミリ秒の部分を取得します。</summary>
      <returns>現在の <see cref="T:System.TimeSpan" /> 構造体のミリ秒の部分。 戻り値の範囲は、-999 ～ 999 です。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.Minutes">
      <summary>現在の <see cref="T:System.TimeSpan" /> 構造体が表す時間間隔の分の部分を取得します。</summary>
      <returns>現在の <see cref="T:System.TimeSpan" /> 構造体の分の部分。 戻り値の範囲は、-59 ～ 59 です。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.MinValue">
      <summary>
        <see cref="T:System.TimeSpan" /> の最小値を表します。 このフィールドは読み取り専用です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Negate">
      <summary>このインスタンスの値とは符号が逆の値を持つ新しい <see cref="T:System.TimeSpan" /> オブジェクトを返します。</summary>
      <returns>このインスタンスの値と絶対値が同じで、逆の符号を持つ新しいオブジェクト。</returns>
      <exception cref="T:System.OverflowException">このインスタンスの値と符号が逆の値を <see cref="T:System.TimeSpan" /> で表すことはできません。つまり、このインスタンスの値が <see cref="F:System.TimeSpan.MinValue" /> になります。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_Addition(System.TimeSpan,System.TimeSpan)">
      <summary>指定した 2 つの <see cref="T:System.TimeSpan" /> インスタンスを加算します。</summary>
      <returns>
        <paramref name="t1" /> と <paramref name="t2" /> を合計した値を持つオブジェクト。</returns>
      <param name="t1">加算する最初の時間間隔。</param>
      <param name="t2">加算する 2 番目の時間間隔。</param>
      <exception cref="T:System.OverflowException">結果として得られる <see cref="T:System.TimeSpan" /> が <see cref="F:System.TimeSpan.MinValue" /> より小さい値か、<see cref="F:System.TimeSpan.MaxValue" /> より大きい値です。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_Equality(System.TimeSpan,System.TimeSpan)">
      <summary>2 つの <see cref="T:System.TimeSpan" /> インスタンスが等しいかどうかを示します。</summary>
      <returns>
        <paramref name="t1" /> の値と <paramref name="t2" /> の値が等しい場合は true。それ以外の場合は false。</returns>
      <param name="t1">比較する最初の時間間隔。</param>
      <param name="t2">比較する 2 番目の時間間隔。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThan(System.TimeSpan,System.TimeSpan)">
      <summary>指定した <see cref="T:System.TimeSpan" /> が、指定したもう 1 つの <see cref="T:System.TimeSpan" /> より大きいかどうかを示します。</summary>
      <returns>
        <paramref name="t1" /> の値が <paramref name="t2" /> の値より大きい場合は true。それ以外の場合は false。</returns>
      <param name="t1">比較する最初の時間間隔。</param>
      <param name="t2">比較する 2 番目の時間間隔。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>指定した <see cref="T:System.TimeSpan" /> が、指定したもう 1 つの <see cref="T:System.TimeSpan" /> 以上かどうかを示します。</summary>
      <returns>
        <paramref name="t1" /> の値が <paramref name="t2" /> の値以上の場合は true。それ以外の場合は false。</returns>
      <param name="t1">比較する最初の時間間隔。</param>
      <param name="t2">比較する 2 番目の時間間隔。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_Inequality(System.TimeSpan,System.TimeSpan)">
      <summary>2 つの <see cref="T:System.TimeSpan" /> インスタンスが等しくないかどうかを示します。</summary>
      <returns>
        <paramref name="t1" /> の値と <paramref name="t2" /> の値が等しくない場合は true。それ以外の場合は false。</returns>
      <param name="t1">比較する最初の時間間隔。</param>
      <param name="t2">比較する 2 番目の時間間隔。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_LessThan(System.TimeSpan,System.TimeSpan)">
      <summary>指定した <see cref="T:System.TimeSpan" /> が、指定したもう 1 つの <see cref="T:System.TimeSpan" /> 未満かどうかを示します。</summary>
      <returns>
        <paramref name="t1" /> の値が <paramref name="t2" /> の値未満の場合は true。それ以外の場合は false。</returns>
      <param name="t1">比較する最初の時間間隔。</param>
      <param name="t2">比較する 2 番目の時間間隔。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_LessThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>指定した <see cref="T:System.TimeSpan" /> が、指定したもう 1 つの <see cref="T:System.TimeSpan" /> 以下かどうかを示します。</summary>
      <returns>
        <paramref name="t1" /> の値が <paramref name="t2" /> の値以下の場合は true。それ以外の場合は false。</returns>
      <param name="t1">比較する最初の時間間隔。</param>
      <param name="t2">比較する 2 番目の時間間隔。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_Subtraction(System.TimeSpan,System.TimeSpan)">
      <summary>指定したもう 1 つの <see cref="T:System.TimeSpan" /> から、指定した <see cref="T:System.TimeSpan" /> を減算します。</summary>
      <returns>
        <paramref name="t1" /> の値から <paramref name="t2" /> の値を減算した結果を値とするオブジェクト。</returns>
      <param name="t1">被減数。</param>
      <param name="t2">減数。</param>
      <exception cref="T:System.OverflowException">戻り値が <see cref="F:System.TimeSpan.MinValue" /> より小さい値か、<see cref="F:System.TimeSpan.MaxValue" /> より大きい値です。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_UnaryNegation(System.TimeSpan)">
      <summary>指定したインスタンスの値とは符号が逆の値を持つ <see cref="T:System.TimeSpan" /> を返します。</summary>
      <returns>このインスタンスの値と絶対値が同じで、逆の符号を持つオブジェクト。</returns>
      <param name="t">符号が反転される時間間隔。</param>
      <exception cref="T:System.OverflowException">このインスタンスの値と符号が逆の値を <see cref="T:System.TimeSpan" /> で表すことはできません。つまり、このインスタンスの値が <see cref="F:System.TimeSpan.MinValue" /> になります。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_UnaryPlus(System.TimeSpan)">
      <summary>
        <see cref="T:System.TimeSpan" /> の指定したインスタンスを返します。</summary>
      <returns>
        <paramref name="t" /> で指定された時間間隔。</returns>
      <param name="t">返される時間間隔。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Parse(System.String)">
      <summary>時間間隔の文字列形式を等価の <see cref="T:System.TimeSpan" /> に変換します。</summary>
      <returns>
        <paramref name="s" /> に対応する時間間隔。</returns>
      <param name="s">変換する時間間隔を指定する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の形式が無効です。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.TimeSpan.MinValue" /> 未満の数値か、<see cref="F:System.TimeSpan.MaxValue" /> を超える数値を表しています。 または 日、時間、分、秒の各構成要素のうち、少なくとも 1 つが有効値の範囲にありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Parse(System.String,System.IFormatProvider)">
      <summary>指定したカルチャ固有の書式情報を使用して、時間間隔の文字列形式を等価の <see cref="T:System.TimeSpan" /> に変換します。</summary>
      <returns>
        <paramref name="formatProvider" /> の指定に従って変換された、<paramref name="input" /> に対応する時間間隔。</returns>
      <param name="input">変換する時間間隔を指定する文字列。</param>
      <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> の形式が無効です。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> が <see cref="F:System.TimeSpan.MinValue" /> 未満の数値か、<see cref="F:System.TimeSpan.MaxValue" /> を超える数値を表しています。 または <paramref name="input" /> に含まれる日、時間、分、秒の各構成要素のうち、少なくとも 1 つが有効値の範囲にありません。</exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>指定した書式とカルチャ固有の書式情報を使用して、時間間隔の文字列形式を等価の <see cref="T:System.TimeSpan" /> に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
      <returns>
        <paramref name="format" /> および <paramref name="formatProvider" /> の指定に従って変換された、<paramref name="input" /> に対応する時間間隔。</returns>
      <param name="input">変換する時間間隔を指定する文字列。</param>
      <param name="format">
        <paramref name="input" /> に要求される書式を定義する標準またはカスタムの書式指定文字列。</param>
      <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> の形式が無効です。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> が <see cref="F:System.TimeSpan.MinValue" /> 未満の数値か、<see cref="F:System.TimeSpan.MaxValue" /> を超える数値を表しています。 または <paramref name="input" /> に含まれる日、時間、分、秒の各構成要素のうち、少なくとも 1 つが有効値の範囲にありません。</exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、時間間隔の文字列形式を等価の <see cref="T:System.TimeSpan" /> に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
      <returns>
        <paramref name="format" />、<paramref name="formatProvider" />、および <paramref name="styles" /> の指定に従って変換された、<paramref name="input" /> に対応する時間間隔。</returns>
      <param name="input">変換する時間間隔を指定する文字列。</param>
      <param name="format">
        <paramref name="input" /> に要求される書式を定義する標準またはカスタムの書式指定文字列。</param>
      <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="styles">
        <paramref name="input" /> で使用できるスタイル要素を定義する列挙値のビットごとの組み合わせ。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> が無効な <see cref="T:System.Globalization.TimeSpanStyles" /> 値です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> の形式が無効です。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> が <see cref="F:System.TimeSpan.MinValue" /> 未満の数値か、<see cref="F:System.TimeSpan.MaxValue" /> を超える数値を表しています。 または <paramref name="input" /> に含まれる日、時間、分、秒の各構成要素のうち、少なくとも 1 つが有効値の範囲にありません。</exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider)">
      <summary>指定した書式指定文字列の配列とカルチャ固有の書式情報を使用して、時間間隔の文字列形式を等価の <see cref="T:System.TimeSpan" /> に変換します。 文字列形式の書式は、指定されたいずれかの書式と完全に一致する必要があります。</summary>
      <returns>
        <paramref name="formats" /> および <paramref name="formatProvider" /> の指定に従って変換された、<paramref name="input" /> に対応する時間間隔。</returns>
      <param name="input">変換する時間間隔を指定する文字列。</param>
      <param name="formats">
        <paramref name="input" /> に要求される書式を定義する標準またはカスタムの書式指定文字列の配列。</param>
      <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> の形式が無効です。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> が <see cref="F:System.TimeSpan.MinValue" /> 未満の数値か、<see cref="F:System.TimeSpan.MaxValue" /> を超える数値を表しています。 または <paramref name="input" /> に含まれる日、時間、分、秒の各構成要素のうち、少なくとも 1 つが有効値の範囲にありません。</exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、時間間隔の文字列形式を等価の <see cref="T:System.TimeSpan" /> に変換します。 文字列形式の書式は、指定されたいずれかの書式と完全に一致する必要があります。</summary>
      <returns>
        <paramref name="formats" />、<paramref name="formatProvider" />、および <paramref name="styles" /> の指定に従って変換された、<paramref name="input" /> に対応する時間間隔。</returns>
      <param name="input">変換する時間間隔を指定する文字列。</param>
      <param name="formats">
        <paramref name="input" /> に要求される書式を定義する標準またはカスタムの書式指定文字列の配列。</param>
      <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="styles">input で使用できるスタイル要素を定義する列挙値のビットごとの組み合わせ。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> が無効な <see cref="T:System.Globalization.TimeSpanStyles" /> 値です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> の形式が無効です。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> が <see cref="F:System.TimeSpan.MinValue" /> 未満の数値か、<see cref="F:System.TimeSpan.MaxValue" /> を超える数値を表しています。 または <paramref name="input" /> に含まれる日、時間、分、秒の各構成要素のうち、少なくとも 1 つが有効値の範囲にありません。</exception>
    </member>
    <member name="P:System.TimeSpan.Seconds">
      <summary>現在の <see cref="T:System.TimeSpan" /> 構造体が表す時間間隔の秒の部分を取得します。</summary>
      <returns>現在の <see cref="T:System.TimeSpan" /> 構造体の秒の部分。 戻り値の範囲は、-59 ～ 59 です。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Subtract(System.TimeSpan)">
      <summary>指定した <see cref="T:System.TimeSpan" /> オブジェクトとこのインスタンスとの差を示す値を持つ、新しい <see cref="T:System.TimeSpan" /> オブジェクトを返します。</summary>
      <returns>このインスタンスの値から <paramref name="ts" /> の値を減算した結果を値とする新しい時間間隔。</returns>
      <param name="ts">減算される時間間隔。</param>
      <exception cref="T:System.OverflowException">戻り値が <see cref="F:System.TimeSpan.MinValue" /> より小さい値か、<see cref="F:System.TimeSpan.MaxValue" /> より大きい値です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.System#IComparable#CompareTo(System.Object)">
      <summary>現在のインスタンスを同じ型の別のオブジェクトと比較し、現在のインスタンスの並べ替え順序での位置が、比較対象のオブジェクトと比べて前か、後か、または同じかを示す整数を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対順序を示す符号付き整数。 
戻り値 	説明 	
0 より小さい値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも前です。 	
0 	このインスタンスは、並べ替え順序で、<paramref name="value" /> と同じ位置に出現します。 	
0 を超える値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも後ろです。 または <paramref name="value" /> は null です。</returns>
      <param name="value">対象のインスタンスと比較する対象のオブジェクト、または null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が <see cref="T:System.TimeSpan" /> オブジェクトではありません。</exception>
    </member>
    <member name="P:System.TimeSpan.Ticks">
      <summary>現在の <see cref="T:System.TimeSpan" /> 構造体の値を表すタイマー刻みの数を取得します。</summary>
      <returns>このインスタンス内のタイマー刻みの数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.TicksPerDay">
      <summary>タイマー刻みの数を 1 日で表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.TicksPerHour">
      <summary>タイマー刻みの数を 1 時間で表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.TicksPerMillisecond">
      <summary>タイマー刻みの数を 1 ミリ秒で表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.TicksPerMinute">
      <summary>タイマー刻みの数を 1 分で表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.TicksPerSecond">
      <summary>タイマー刻みの数を 1 秒で表します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.ToString">
      <summary>現在の <see cref="T:System.TimeSpan" /> オブジェクトの値を等価の文字列形式に変換します。</summary>
      <returns>現在の <see cref="T:System.TimeSpan" /> 値の文字列形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.ToString(System.String)">
      <summary>指定した書式を使用して、現在の <see cref="T:System.TimeSpan" /> オブジェクトの値を等価の文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> パラメーターで指定される形式で表現された、現在の <see cref="T:System.TimeSpan" /> 値の文字列形式。</returns>
      <param name="format">標準またはカスタムの <see cref="T:System.TimeSpan" /> 書式指定文字列。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> パラメーターが認識されないか、サポートされていません。</exception>
    </member>
    <member name="M:System.TimeSpan.ToString(System.String,System.IFormatProvider)">
      <summary>指定した書式とカルチャ固有の書式情報を使用して、現在の <see cref="T:System.TimeSpan" /> オブジェクトの値を等価の文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> および <paramref name="formatProvider" /> の指定に従って表現された、現在の <see cref="T:System.TimeSpan" /> 値の文字列形式。</returns>
      <param name="format">標準またはカスタムの <see cref="T:System.TimeSpan" /> 書式指定文字列。</param>
      <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> パラメーターが認識されないか、サポートされていません。</exception>
    </member>
    <member name="P:System.TimeSpan.TotalDays">
      <summary>整数部と小数部から成る日数で表される、現在の <see cref="T:System.TimeSpan" /> 構造体の値を取得します。</summary>
      <returns>このインスタンスで表される日数の合計。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.TotalHours">
      <summary>整数部と小数部から成る時間数で表される、現在の <see cref="T:System.TimeSpan" /> 構造体の値を取得します。</summary>
      <returns>このインスタンスで表される時間数の合計。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.TotalMilliseconds">
      <summary>整数部と小数部から成るミリ秒数で表される、現在の <see cref="T:System.TimeSpan" /> 構造体の値を取得します。</summary>
      <returns>このインスタンスで表されるミリ秒数の合計。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.TotalMinutes">
      <summary>整数部と小数部から成る分数で表される、現在の <see cref="T:System.TimeSpan" /> 構造体の値を取得します。</summary>
      <returns>このインスタンスで表される分数の合計。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.TotalSeconds">
      <summary>整数部と小数部から成る秒数で表される、現在の <see cref="T:System.TimeSpan" /> 構造体の値を取得します。</summary>
      <returns>このインスタンスで表される秒数の合計。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.TryParse(System.String,System.IFormatProvider,System.TimeSpan@)">
      <summary>指定したカルチャ固有の書式情報を使用して、時間間隔の文字列形式を等価の <see cref="T:System.TimeSpan" /> に変換し、変換に成功したかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="input" /> が正常に変換された場合は true。それ以外の場合は false。 <paramref name="input" /> パラメーターが null または <see cref="F:System.String.Empty" /> である場合、書式が無効な場合、表される時間間隔が <see cref="F:System.TimeSpan.MinValue" /> より短いか <see cref="F:System.TimeSpan.MaxValue" /> より長い場合、または日、時間、分、秒の各構成要素の少なくとも 1 つが有効な範囲にない場合、この操作は false を返します。</returns>
      <param name="input">変換する時間間隔を指定する文字列。</param>
      <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="result">このメソッドが返されるときに、<paramref name="input" /> で指定した時間間隔を表すオブジェクトを格納します。変換に失敗した場合は、<see cref="F:System.TimeSpan.Zero" /> を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.TimeSpan.TryParse(System.String,System.TimeSpan@)">
      <summary>時間間隔の文字列形式を等価の <see cref="T:System.TimeSpan" /> に変換し、変換に成功したかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="s" /> が正常に変換された場合は true。それ以外の場合は false。 <paramref name="s" /> パラメーターが null または <see cref="F:System.String.Empty" /> である場合、書式が無効な場合、表される時間間隔が <see cref="F:System.TimeSpan.MinValue" /> より短いか <see cref="F:System.TimeSpan.MaxValue" /> より長い場合、または日、時間、分、秒の各構成要素の少なくとも 1 つが有効な範囲にない場合、この操作は false を返します。</returns>
      <param name="s">変換する時間間隔を指定する文字列。</param>
      <param name="result">このメソッドが返されるときに、<paramref name="s" /> で指定した時間間隔を表すオブジェクトを格納します。変換に失敗した場合は、<see cref="F:System.TimeSpan.Zero" /> を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、時間間隔の文字列形式を等価の <see cref="T:System.TimeSpan" /> に変換し、変換に成功したかどうかを示す値を返します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
      <returns>
        <paramref name="input" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="input">変換する時間間隔を指定する文字列。</param>
      <param name="format">
        <paramref name="input" /> に要求される書式を定義する標準またはカスタムの書式指定文字列。</param>
      <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="styles">
        <paramref name="input" /> のスタイルを示す 1 つ以上の列挙値。</param>
      <param name="result">このメソッドが返されるときに、<paramref name="input" /> で指定した時間間隔を表すオブジェクトを格納します。変換に失敗した場合は、<see cref="F:System.TimeSpan.Zero" /> を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.TimeSpan@)">
      <summary>指定した書式とカルチャ固有の書式情報を使用して、時間間隔の文字列形式を等価の <see cref="T:System.TimeSpan" /> に変換し、変換に成功したかどうかを示す値を返します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
      <returns>
        <paramref name="input" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="input">変換する時間間隔を指定する文字列。</param>
      <param name="format">
        <paramref name="input" /> に要求される書式を定義する標準またはカスタムの書式指定文字列。</param>
      <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="result">このメソッドが返されるときに、<paramref name="input" /> で指定した時間間隔を表すオブジェクトを格納します。変換に失敗した場合は、<see cref="F:System.TimeSpan.Zero" /> を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、指定した文字列形式の時間間隔を等価の <see cref="T:System.TimeSpan" /> に変換し、変換に成功したかどうかを示す値を返します。 文字列形式の書式は、指定されたいずれかの書式と完全に一致する必要があります。</summary>
      <returns>
        <paramref name="input" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="input">変換する時間間隔を指定する文字列。</param>
      <param name="formats">
        <paramref name="input" /> に許容される書式を定義する標準またはカスタムの書式指定文字列の配列。</param>
      <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="styles">
        <paramref name="input" /> のスタイルを示す 1 つ以上の列挙値。</param>
      <param name="result">このメソッドが返されるときに、<paramref name="input" /> で指定した時間間隔を表すオブジェクトを格納します。変換に失敗した場合は、<see cref="F:System.TimeSpan.Zero" /> を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.TimeSpan@)">
      <summary>指定した書式とカルチャ固有の書式情報を使用して、指定した文字列形式の時間間隔を等価の <see cref="T:System.TimeSpan" /> に変換し、変換に成功したかどうかを示す値を返します。 文字列形式の書式は、指定されたいずれかの書式と完全に一致する必要があります。</summary>
      <returns>
        <paramref name="input" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="input">変換する時間間隔を指定する文字列。</param>
      <param name="formats">
        <paramref name="input" /> に許容される書式を定義する標準またはカスタムの書式指定文字列の配列。</param>
      <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="result">このメソッドが返されるときに、<paramref name="input" /> で指定した時間間隔を表すオブジェクトを格納します。変換に失敗した場合は、<see cref="F:System.TimeSpan.Zero" /> を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="F:System.TimeSpan.Zero">
      <summary>0 の <see cref="T:System.TimeSpan" /> 値を表します。 このフィールドは読み取り専用です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.TimeZoneInfo">
      <summary>世界中のいずれかのタイム ゾーンを表します。</summary>
    </member>
    <member name="P:System.TimeZoneInfo.BaseUtcOffset">
      <summary>現在のタイム ゾーンの標準時と世界協定時刻 (UTC) との差を返します。</summary>
      <returns>現在のタイム ゾーンの標準時と世界協定時刻 (UTC) との時差を表すオブジェクト。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)">
      <summary>時刻を特定のタイム ゾーンの時刻に変換します。</summary>
      <returns>変換先タイム ゾーンでの日付と時刻。</returns>
      <param name="dateTime">変換する日付と時刻。</param>
      <param name="destinationTimeZone">
        <paramref name="dateTime" /> の変換先タイム ゾーン。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> パラメーターの値が無効な時刻を表しています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationTimeZone" /> パラメーターの値が null です。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)">
      <summary>時刻を特定のタイム ゾーンの時刻に変換します。</summary>
      <returns>変換先タイム ゾーンでの日付と時刻。</returns>
      <param name="dateTimeOffset">変換する日付と時刻。</param>
      <param name="destinationTimeZone">
        <paramref name="dateTime" /> の変換先タイム ゾーン。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationTimeZone" /> パラメーターの値が null です。</exception>
    </member>
    <member name="P:System.TimeZoneInfo.DaylightName">
      <summary>現在のタイム ゾーンの夏時間の表示名を取得します。</summary>
      <returns>タイム ゾーンの夏時間の表示名。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.DisplayName">
      <summary>タイム ゾーンを表す標準表示名を取得します。</summary>
      <returns>タイム ゾーンの標準表示名。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)">
      <summary>現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトと別の <see cref="T:System.TimeZoneInfo" /> オブジェクトが等しいかどうかを判断します。</summary>
      <returns>2 つの <see cref="T:System.TimeZoneInfo" /> オブジェクトが等しい場合は true。それ以外の場合は false。</returns>
      <param name="other">現在のオブジェクトと比較するもう 1 つのオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)">
      <summary>あいまいな日付と時刻を割り当て可能な、日付と時刻に関する情報を返します。</summary>
      <returns>特定の日付と時刻を割り当て可能な、世界協定時刻 (UTC) オフセットを表すオブジェクトの配列。</returns>
      <param name="dateTime">日付と時刻。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> は、あいまいな時刻ではありません。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)">
      <summary>あいまいな日付と時刻を割り当て可能な、日付と時刻に関する情報を返します。</summary>
      <returns>特定の日付と時刻を割り当て可能な、世界協定時刻 (UTC) オフセットを表すオブジェクトの配列。</returns>
      <param name="dateTimeOffset">日付と時刻。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> は、あいまいな時刻ではありません。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.GetHashCode">
      <summary>ハッシュ関数として機能し、ハッシュ アルゴリズムや、ハッシュ テーブルのようなデータ構造に使用されます。</summary>
      <returns>この <see cref="T:System.TimeZoneInfo" /> オブジェクトのハッシュ コードとして機能する 32 ビット符号付き整数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)">
      <summary>特定の日付と時刻について、このタイム ゾーンでの時刻と世界協定時刻 (UTC) とのオフセットまたは差を計算します。</summary>
      <returns>2 つのタイム ゾーンの時差を示すオブジェクト。</returns>
      <param name="dateTime">オフセットの計算対象となる日付と時刻。</param>
    </member>
    <member name="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)">
      <summary>特定の日付と時刻について、このタイム ゾーンでの時刻と世界協定時刻 (UTC) とのオフセットまたは差を計算します。</summary>
      <returns>世界協定時刻 (UTC) と現在のタイム ゾーンとの時差を示すオブジェクト。</returns>
      <param name="dateTimeOffset">オフセットの計算対象となる日付と時刻。</param>
    </member>
    <member name="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)">
      <summary>特定のタイム ゾーンの特定の日付と時刻があいまいかどうか、および複数の世界協定時刻 (UTC) に割り当て可能かどうかを判断します。</summary>
      <returns>
        <paramref name="dateTime" /> パラメーターがあいまいな場合は true。それ以外の場合は false。</returns>
      <param name="dateTime">日付と時刻の値。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 値の <see cref="P:System.DateTime.Kind" /> プロパティが <see cref="F:System.DateTimeKind.Local" /> で、<paramref name="dateTime" /> が無効な時刻です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)">
      <summary>特定のタイム ゾーンの特定の日付と時刻があいまいかどうか、および複数の世界協定時刻 (UTC) に割り当て可能かどうかを判断します。</summary>
      <returns>
        <paramref name="dateTimeOffset" /> パラメーターが現在のタイム ゾーンであいまいな場合は true。それ以外の場合は false。</returns>
      <param name="dateTimeOffset">日付と時刻。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)">
      <summary>指定された日付と時刻が、現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトのタイム ゾーンの夏時間範囲内かどうかを示します。</summary>
      <returns>
        <paramref name="dateTime" /> パラメーターが夏時間の範囲内の場合は true。それ以外の場合は false。</returns>
      <param name="dateTime">日付と時刻の値。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 値の <see cref="P:System.DateTime.Kind" /> プロパティが <see cref="F:System.DateTimeKind.Local" /> で、<paramref name="dateTime" /> が無効な時刻です。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)">
      <summary>指定された日付と時刻が、現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトのタイム ゾーンの夏時間範囲内かどうかを示します。</summary>
      <returns>
        <paramref name="dateTimeOffset" /> パラメーターが夏時間範囲内の場合は true。それ以外の場合は false。</returns>
      <param name="dateTimeOffset">日付と時刻の値。</param>
    </member>
    <member name="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)">
      <summary>指定された日付と時刻が無効かどうかを示します。</summary>
      <returns>
        <paramref name="dateTime" /> が無効の場合は true。それ以外の場合は false。</returns>
      <param name="dateTime">日付と時刻の値。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.TimeZoneInfo.Local">
      <summary>ローカル タイム ゾーンを表す <see cref="T:System.TimeZoneInfo" /> オブジェクトを取得します。</summary>
      <returns>ローカル タイム ゾーンを表すオブジェクト。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.StandardName">
      <summary>タイム ゾーンの標準時の表示名を取得します。</summary>
      <returns>タイム ゾーンの標準時間の表示名。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.SupportsDaylightSavingTime">
      <summary>タイム ゾーンに夏時間規則があるかどうかを示す値を取得します。</summary>
      <returns>タイム ゾーンが夏時間をサポートする場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ToString">
      <summary>現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトの表示名を返します。</summary>
      <returns>現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトの <see cref="P:System.TimeZoneInfo.DisplayName" /> プロパティの値。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.Utc">
      <summary>世界協定時刻 (UTC) ゾーンを表す <see cref="T:System.TimeZoneInfo" /> オブジェクトを取得します。</summary>
      <returns>世界協定時刻 (UTC) ゾーンを表すオブジェクト。</returns>
    </member>
    <member name="T:System.Tuple">
      <summary>組オブジェクトを作成するための静的メソッドを提供します。</summary>
    </member>
    <member name="M:System.Tuple.Create``1(``0)">
      <summary>新しい 1 組 (1 つの要素で構成される組) を作成します。</summary>
      <returns>値が (<paramref name="item1" />) である 1 組。</returns>
      <param name="item1">組の唯一のコンポーネントの値。</param>
      <typeparam name="T1">組の唯一のコンポーネントの型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``2(``0,``1)">
      <summary>新しい 2 組 (2 つの要素で構成される組) を作成します。</summary>
      <returns>値が (<paramref name="item1" />, <paramref name="item2" />) である 2 組。</returns>
      <param name="item1">組の 1 番目のコンポーネントの値。</param>
      <param name="item2">組の 2 番目のコンポーネントの値。</param>
      <typeparam name="T1">組の 1 番目のコンポーネントの型。</typeparam>
      <typeparam name="T2">組の 2 番目のコンポーネントの型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``3(``0,``1,``2)">
      <summary>新しい 3 組 (3 つの要素で構成される組) を作成します。</summary>
      <returns>値が (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />) である 3 組。</returns>
      <param name="item1">組の 1 番目のコンポーネントの値。</param>
      <param name="item2">組の 2 番目のコンポーネントの値。</param>
      <param name="item3">組の 3 番目のコンポーネントの値。</param>
      <typeparam name="T1">組の 1 番目のコンポーネントの型。</typeparam>
      <typeparam name="T2">組の 2 番目のコンポーネントの型。</typeparam>
      <typeparam name="T3">組の 3 番目のコンポーネントの型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``4(``0,``1,``2,``3)">
      <summary>新しい 4 組 (4 つの要素で構成される組) を作成します。</summary>
      <returns>値が (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />) である 4 組。</returns>
      <param name="item1">組の 1 番目のコンポーネントの値。</param>
      <param name="item2">組の 2 番目のコンポーネントの値。</param>
      <param name="item3">組の 3 番目のコンポーネントの値。</param>
      <param name="item4">組の 4 番目のコンポーネントの値。</param>
      <typeparam name="T1">組の 1 番目のコンポーネントの型。</typeparam>
      <typeparam name="T2">組の 2 番目のコンポーネントの型。</typeparam>
      <typeparam name="T3">組の 3 番目のコンポーネントの型。</typeparam>
      <typeparam name="T4">組の 4 番目のコンポーネントの型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
      <summary>新しい 5 組 (5 つの要素で構成される組) を作成します。</summary>
      <returns>値が (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />) である 5 組。</returns>
      <param name="item1">組の 1 番目のコンポーネントの値。</param>
      <param name="item2">組の 2 番目のコンポーネントの値。</param>
      <param name="item3">組の 3 番目のコンポーネントの値。</param>
      <param name="item4">組の 4 番目のコンポーネントの値。</param>
      <param name="item5">組の 5 番目のコンポーネントの値。</param>
      <typeparam name="T1">組の 1 番目のコンポーネントの型。</typeparam>
      <typeparam name="T2">組の 2 番目のコンポーネントの型。</typeparam>
      <typeparam name="T3">組の 3 番目のコンポーネントの型。</typeparam>
      <typeparam name="T4">組の 4 番目のコンポーネントの型。</typeparam>
      <typeparam name="T5">組の 5 番目のコンポーネントの型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
      <summary>新しい 6 組 (6 つの要素で構成される組) 作成します。</summary>
      <returns>値が (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />) である 6 組。</returns>
      <param name="item1">組の 1 番目のコンポーネントの値。</param>
      <param name="item2">組の 2 番目のコンポーネントの値。</param>
      <param name="item3">組の 3 番目のコンポーネントの値。</param>
      <param name="item4">組の 4 番目のコンポーネントの値。</param>
      <param name="item5">組の 5 番目のコンポーネントの値。</param>
      <param name="item6">組の 6 番目のコンポーネントの値。</param>
      <typeparam name="T1">組の 1 番目のコンポーネントの型。</typeparam>
      <typeparam name="T2">組の 2 番目のコンポーネントの型。</typeparam>
      <typeparam name="T3">組の 3 番目のコンポーネントの型。</typeparam>
      <typeparam name="T4">組の 4 番目のコンポーネントの型。</typeparam>
      <typeparam name="T5">組の 5 番目のコンポーネントの型。</typeparam>
      <typeparam name="T6">組の 6 番目のコンポーネントの型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
      <summary>新しい 7 組 (7 つの要素で構成される組) を作成します。</summary>
      <returns>値が (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />, <paramref name="item7" />) である 7 組。</returns>
      <param name="item1">組の 1 番目のコンポーネントの値。</param>
      <param name="item2">組の 2 番目のコンポーネントの値。</param>
      <param name="item3">組の 3 番目のコンポーネントの値。</param>
      <param name="item4">組の 4 番目のコンポーネントの値。</param>
      <param name="item5">組の 5 番目のコンポーネントの値。</param>
      <param name="item6">組の 6 番目のコンポーネントの値。</param>
      <param name="item7">組の 7 番目のコンポーネントの値。</param>
      <typeparam name="T1">組の 1 番目のコンポーネントの型。</typeparam>
      <typeparam name="T2">組の 2 番目のコンポーネントの型。</typeparam>
      <typeparam name="T3">組の 3 番目のコンポーネントの型。</typeparam>
      <typeparam name="T4">組の 4 番目のコンポーネントの型。</typeparam>
      <typeparam name="T5">組の 5 番目のコンポーネントの型。</typeparam>
      <typeparam name="T6">組の 6 番目のコンポーネントの型。</typeparam>
      <typeparam name="T7">組の 7 番目のコンポーネントの型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>新しい 8 組 (8 つの要素で構成される組) を作成します。</summary>
      <returns>8 組 (8 つの要素で構成される組)。その値は (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />, <paramref name="item7" />, <paramref name="item8" />) です。</returns>
      <param name="item1">組の 1 番目のコンポーネントの値。</param>
      <param name="item2">組の 2 番目のコンポーネントの値。</param>
      <param name="item3">組の 3 番目のコンポーネントの値。</param>
      <param name="item4">組の 4 番目のコンポーネントの値。</param>
      <param name="item5">組の 5 番目のコンポーネントの値。</param>
      <param name="item6">組の 6 番目のコンポーネントの値。</param>
      <param name="item7">組の 7 番目のコンポーネントの値。</param>
      <param name="item8">組の 8 番目のコンポーネントの値。</param>
      <typeparam name="T1">組の 1 番目のコンポーネントの型。</typeparam>
      <typeparam name="T2">組の 2 番目のコンポーネントの型。</typeparam>
      <typeparam name="T3">組の 3 番目のコンポーネントの型。</typeparam>
      <typeparam name="T4">組の 4 番目のコンポーネントの型。</typeparam>
      <typeparam name="T5">組の 5 番目のコンポーネントの型。</typeparam>
      <typeparam name="T6">組の 6 番目のコンポーネントの型。</typeparam>
      <typeparam name="T7">組の 7 番目のコンポーネントの型。</typeparam>
      <typeparam name="T8">組の 8 番目のコンポーネントの型。</typeparam>
    </member>
    <member name="T:System.Tuple`1">
      <summary>1 組 (1 つの要素で構成される組) を表します。</summary>
      <typeparam name="T1">組の唯一のコンポーネントの型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Tuple`1.#ctor(`0)">
      <summary>
        <see cref="T:System.Tuple`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="item1">組の唯一のコンポーネントの値。</param>
    </member>
    <member name="M:System.Tuple`1.Equals(System.Object)">
      <summary>現在の <see cref="T:System.Tuple`1" /> オブジェクトが、指定されたオブジェクトと等しいかどうかを示す値を返します。</summary>
      <returns>現在のインスタンスが、指定したオブジェクトと同一である場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Tuple`1.GetHashCode">
      <summary>現在の <see cref="T:System.Tuple`1" /> オブジェクトのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.Tuple`1.Item1">
      <summary>
        <see cref="T:System.Tuple`1" /> オブジェクトの単一のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`1" /> オブジェクトの単一のコンポーネントの値。</returns>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>指定された比較子を使用して現在の <see cref="T:System.Tuple`1" /> オブジェクトと指定されたオブジェクトを比較し、並べ替え順序において、現在のオブジェクトの位置が指定されたオブジェクトの前になるか、後ろになるか、同じになるかを示す整数を返します。</summary>
      <returns>並べ替え順序における、このインスタンスと <paramref name="other" /> の相対的な位置を示す符号付き整数 (次の表を参照)。 
値 	説明 	
負の整数 	このインスタンスの位置が <paramref name="other" /> よりも前です。 	
0 	並べ替え順序における、このインスタンスと <paramref name="other" /> の位置が同じです。 	
正の整数 	このインスタンスの位置が <paramref name="other" /> よりも後ろです。</returns>
      <param name="other">現在のインスタンスと比較するオブジェクト。</param>
      <param name="comparer">比較のためのカスタム ルールを提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> が <see cref="T:System.Tuple`1" /> オブジェクトではありません。</exception>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>指定された比較メソッドに基づいて、現在の <see cref="T:System.Tuple`1" /> オブジェクトが指定したオブジェクトと等しいかどうかを示す値を返します。</summary>
      <returns>現在のインスタンスが、指定したオブジェクトと同一である場合は true。それ以外の場合は false。</returns>
      <param name="other">このインスタンスと比較するオブジェクト。</param>
      <param name="comparer">2 つのオブジェクトが等しいかどうかを評価するのに使用するメソッドを定義するオブジェクト。</param>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>指定した計算メソッドを使用して、現在の <see cref="T:System.Tuple`1" /> オブジェクトのハッシュ コードを計算します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <param name="comparer">現在の <see cref="T:System.Tuple`1" /> オブジェクトのハッシュ コードを計算する <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> メソッドを持つオブジェクト。</param>
    </member>
    <member name="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
      <summary>現在の <see cref="T:System.Tuple`1" /> オブジェクトと指定されたオブジェクトを比較し、並べ替え順序において、現在のオブジェクトの位置が指定されたオブジェクトの前になるか、後ろになるか、同じになるかを示す整数を返します。</summary>
      <returns>並べ替え順序における、このインスタンスと <paramref name="obj" /> の相対的な位置を示す符号付き整数 (次の表を参照)。 
値 	説明 	
負の整数 	このインスタンスの位置が <paramref name="obj" /> よりも前です。 	
0 	並べ替え順序における、このインスタンスと <paramref name="obj" /> の位置が同じです。 	
正の整数 	このインスタンスの位置が <paramref name="obj" /> よりも後ろです。</returns>
      <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> が <see cref="T:System.Tuple`1" /> オブジェクトではありません。</exception>
    </member>
    <member name="M:System.Tuple`1.ToString">
      <summary>この <see cref="T:System.Tuple`1" /> インスタンスの値を表す文字列を返します。</summary>
      <returns>この <see cref="T:System.Tuple`1" /> オブジェクトの文字列形式。</returns>
    </member>
    <member name="T:System.Tuple`2">
      <summary>2 組 (2 つの要素で構成される組) を表します。</summary>
      <typeparam name="T1">組の 1 番目のコンポーネントの型。</typeparam>
      <typeparam name="T2">組の 2 番目のコンポーネントの型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`2.#ctor(`0,`1)">
      <summary>
        <see cref="T:System.Tuple`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="item1">組の 1 番目のコンポーネントの値。</param>
      <param name="item2">組の 2 番目のコンポーネントの値。</param>
    </member>
    <member name="M:System.Tuple`2.Equals(System.Object)">
      <summary>現在の <see cref="T:System.Tuple`2" /> オブジェクトが、指定されたオブジェクトと等しいかどうかを示す値を返します。</summary>
      <returns>現在のインスタンスが、指定したオブジェクトと同一である場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Tuple`2.GetHashCode">
      <summary>現在の <see cref="T:System.Tuple`2" /> オブジェクトのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.Tuple`2.Item1">
      <summary>現在の <see cref="T:System.Tuple`2" /> オブジェクトの 1 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`2" /> オブジェクトの 1 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`2.Item2">
      <summary>現在の <see cref="T:System.Tuple`2" /> オブジェクトの 2 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`2" /> オブジェクトの 2 番目のコンポーネントの値。</returns>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>指定された比較子を使用して現在の <see cref="T:System.Tuple`2" /> オブジェクトと指定されたオブジェクトを比較し、並べ替え順序において、現在のオブジェクトの位置が指定されたオブジェクトの前になるか、後ろになるか、同じになるかを示す整数を返します。</summary>
      <returns>並べ替え順序における、このインスタンスと <paramref name="other" /> の相対的な位置を示す符号付き整数 (次の表を参照)。 
値 	説明 	
負の整数 	このインスタンスの位置が <paramref name="other" /> よりも前です。 	
0 	並べ替え順序における、このインスタンスと <paramref name="other" /> の位置が同じです。 	
正の整数 	このインスタンスの位置が <paramref name="other" /> よりも後ろです。</returns>
      <param name="other">現在のインスタンスと比較するオブジェクト。</param>
      <param name="comparer">比較のためのカスタム ルールを提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> が <see cref="T:System.Tuple`2" /> オブジェクトではありません。</exception>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>指定された比較メソッドに基づいて、現在の <see cref="T:System.Tuple`2" /> オブジェクトが指定したオブジェクトと等しいかどうかを示す値を返します。</summary>
      <returns>現在のインスタンスが、指定したオブジェクトと同一である場合は true。それ以外の場合は false。</returns>
      <param name="other">このインスタンスと比較するオブジェクト。</param>
      <param name="comparer">2 つのオブジェクトが等しいかどうかを評価するのに使用するメソッドを定義するオブジェクト。</param>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>指定した計算メソッドを使用して、現在の <see cref="T:System.Tuple`2" /> オブジェクトのハッシュ コードを計算します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <param name="comparer">現在の <see cref="T:System.Tuple`2" /> オブジェクトのハッシュ コードを計算する <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> メソッドを持つオブジェクト。</param>
    </member>
    <member name="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
      <summary>現在の <see cref="T:System.Tuple`2" /> オブジェクトと指定されたオブジェクトを比較し、並べ替え順序において、現在のオブジェクトの位置が指定されたオブジェクトの前になるか、後ろになるか、同じになるかを示す整数を返します。</summary>
      <returns>並べ替え順序における、このインスタンスと <paramref name="obj" /> の相対的な位置を示す符号付き整数 (次の表を参照)。 
値 	説明 	
負の整数 	このインスタンスの位置が <paramref name="obj" /> よりも前です。 	
0 	並べ替え順序における、このインスタンスと <paramref name="obj" /> の位置が同じです。 	
正の整数 	このインスタンスの位置が <paramref name="obj" /> よりも後ろです。</returns>
      <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> が <see cref="T:System.Tuple`2" /> オブジェクトではありません。</exception>
    </member>
    <member name="M:System.Tuple`2.ToString">
      <summary>この <see cref="T:System.Tuple`2" /> インスタンスの値を表す文字列を返します。</summary>
      <returns>この <see cref="T:System.Tuple`2" /> オブジェクトの文字列形式。</returns>
    </member>
    <member name="T:System.Tuple`3">
      <summary>3 組 (3 つの要素で構成される組) を表します。</summary>
      <typeparam name="T1">組の 1 番目のコンポーネントの型。</typeparam>
      <typeparam name="T2">組の 2 番目のコンポーネントの型。</typeparam>
      <typeparam name="T3">組の 3 番目のコンポーネントの型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`3.#ctor(`0,`1,`2)">
      <summary>
        <see cref="T:System.Tuple`3" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="item1">組の 1 番目のコンポーネントの値。</param>
      <param name="item2">組の 2 番目のコンポーネントの値。</param>
      <param name="item3">組の 3 番目のコンポーネントの値。</param>
    </member>
    <member name="M:System.Tuple`3.Equals(System.Object)">
      <summary>現在の <see cref="T:System.Tuple`3" /> オブジェクトが、指定されたオブジェクトと等しいかどうかを示す値を返します。</summary>
      <returns>現在のインスタンスが、指定したオブジェクトと同一である場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Tuple`3.GetHashCode">
      <summary>現在の <see cref="T:System.Tuple`3" /> オブジェクトのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.Tuple`3.Item1">
      <summary>現在の <see cref="T:System.Tuple`3" /> オブジェクトの 1 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`3" /> オブジェクトの 1 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`3.Item2">
      <summary>現在の <see cref="T:System.Tuple`3" /> オブジェクトの 2 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`3" /> オブジェクトの 2 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`3.Item3">
      <summary>現在の <see cref="T:System.Tuple`3" /> オブジェクトの 3 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`3" /> オブジェクトの 3 番目のコンポーネントの値。</returns>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>指定された比較子を使用して現在の <see cref="T:System.Tuple`3" /> オブジェクトと指定されたオブジェクトを比較し、並べ替え順序において、現在のオブジェクトの位置が指定されたオブジェクトの前になるか、後ろになるか、同じになるかを示す整数を返します。</summary>
      <returns>並べ替え順序における、このインスタンスと <paramref name="other" /> の相対的な位置を示す符号付き整数 (次の表を参照)。 
値 	説明 	
負の整数 	このインスタンスの位置が <paramref name="other" /> よりも前です。 	
0 	並べ替え順序における、このインスタンスと <paramref name="other" /> の位置が同じです。 	
正の整数 	このインスタンスの位置が <paramref name="other" /> よりも後ろです。</returns>
      <param name="other">現在のインスタンスと比較するオブジェクト。</param>
      <param name="comparer">比較のためのカスタム ルールを提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> が <see cref="T:System.Tuple`3" /> オブジェクトではありません。</exception>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>指定された比較メソッドに基づいて、現在の <see cref="T:System.Tuple`3" /> オブジェクトが指定したオブジェクトと等しいかどうかを示す値を返します。</summary>
      <returns>現在のインスタンスが、指定したオブジェクトと同一である場合は true。それ以外の場合は false。</returns>
      <param name="other">このインスタンスと比較するオブジェクト。</param>
      <param name="comparer">2 つのオブジェクトが等しいかどうかを評価するのに使用するメソッドを定義するオブジェクト。</param>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>指定した計算メソッドを使用して、現在の <see cref="T:System.Tuple`3" /> オブジェクトのハッシュ コードを計算します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <param name="comparer">現在の <see cref="T:System.Tuple`3" /> オブジェクトのハッシュ コードを計算する <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> メソッドを持つオブジェクト。</param>
    </member>
    <member name="M:System.Tuple`3.System#IComparable#CompareTo(System.Object)">
      <summary>現在の <see cref="T:System.Tuple`3" /> オブジェクトと指定されたオブジェクトを比較し、並べ替え順序において、現在のオブジェクトの位置が指定されたオブジェクトの前になるか、後ろになるか、同じになるかを示す整数を返します。</summary>
      <returns>並べ替え順序における、このインスタンスと <paramref name="obj" /> の相対的な位置を示す符号付き整数 (次の表を参照)。 
値 	説明 	
負の整数 	このインスタンスの位置が <paramref name="obj" /> よりも前です。 	
0 	並べ替え順序における、このインスタンスと <paramref name="obj" /> の位置が同じです。 	
正の整数 	このインスタンスの位置が <paramref name="obj" /> よりも後ろです。</returns>
      <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> が <see cref="T:System.Tuple`3" /> オブジェクトではありません。</exception>
    </member>
    <member name="M:System.Tuple`3.ToString">
      <summary>この <see cref="T:System.Tuple`3" /> インスタンスの値を表す文字列を返します。</summary>
      <returns>この <see cref="T:System.Tuple`3" /> オブジェクトの文字列形式。</returns>
    </member>
    <member name="T:System.Tuple`4">
      <summary>4 組 (4 つの要素で構成される組) を表します。</summary>
      <typeparam name="T1">組の 1 番目のコンポーネントの型。</typeparam>
      <typeparam name="T2">組の 2 番目のコンポーネントの型。</typeparam>
      <typeparam name="T3">組の 3 番目のコンポーネントの型。</typeparam>
      <typeparam name="T4">組の 4 番目のコンポーネントの型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`4.#ctor(`0,`1,`2,`3)">
      <summary>
        <see cref="T:System.Tuple`4" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="item1">組の 1 番目のコンポーネントの値。</param>
      <param name="item2">組の 2 番目のコンポーネントの値。</param>
      <param name="item3">組の 3 番目のコンポーネントの値。</param>
      <param name="item4">組の 4 番目のコンポーネントの値。</param>
    </member>
    <member name="M:System.Tuple`4.Equals(System.Object)">
      <summary>現在の <see cref="T:System.Tuple`4" /> オブジェクトが、指定されたオブジェクトと等しいかどうかを示す値を返します。</summary>
      <returns>現在のインスタンスが、指定したオブジェクトと同一である場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Tuple`4.GetHashCode">
      <summary>現在の <see cref="T:System.Tuple`4" /> オブジェクトのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.Tuple`4.Item1">
      <summary>現在の <see cref="T:System.Tuple`4" /> オブジェクトの 1 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`4" /> オブジェクトの 1 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`4.Item2">
      <summary>現在の <see cref="T:System.Tuple`4" /> オブジェクトの 2 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`4" /> オブジェクトの 2 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`4.Item3">
      <summary>現在の <see cref="T:System.Tuple`4" /> オブジェクトの 3 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`4" /> オブジェクトの 3 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`4.Item4">
      <summary>現在の <see cref="T:System.Tuple`4" /> オブジェクトの 4 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`4" /> オブジェクトの 4 番目のコンポーネントの値。</returns>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>指定された比較子を使用して現在の <see cref="T:System.Tuple`4" /> オブジェクトと指定されたオブジェクトを比較し、並べ替え順序において、現在のオブジェクトの位置が指定されたオブジェクトの前になるか、後ろになるか、同じになるかを示す整数を返します。</summary>
      <returns>並べ替え順序における、このインスタンスと <paramref name="other" /> の相対的な位置を示す符号付き整数 (次の表を参照)。 
値 	説明 	
負の整数 	このインスタンスの位置が <paramref name="other" /> よりも前です。 	
0 	並べ替え順序における、このインスタンスと <paramref name="other" /> の位置が同じです。 	
正の整数 	このインスタンスの位置が <paramref name="other" /> よりも後ろです。</returns>
      <param name="other">現在のインスタンスと比較するオブジェクト。</param>
      <param name="comparer">比較のためのカスタム ルールを提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> が <see cref="T:System.Tuple`4" /> オブジェクトではありません。</exception>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>指定された比較メソッドに基づいて、現在の <see cref="T:System.Tuple`4" /> オブジェクトが指定したオブジェクトと等しいかどうかを示す値を返します。</summary>
      <returns>現在のインスタンスが、指定したオブジェクトと同一である場合は true。それ以外の場合は false。</returns>
      <param name="other">このインスタンスと比較するオブジェクト。</param>
      <param name="comparer">2 つのオブジェクトが等しいかどうかを評価するのに使用するメソッドを定義するオブジェクト。</param>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>指定した計算メソッドを使用して、現在の <see cref="T:System.Tuple`4" /> オブジェクトのハッシュ コードを計算します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <param name="comparer">現在の <see cref="T:System.Tuple`4" /> オブジェクトのハッシュ コードを計算する <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> メソッドを持つオブジェクト。</param>
    </member>
    <member name="M:System.Tuple`4.System#IComparable#CompareTo(System.Object)">
      <summary>現在の <see cref="T:System.Tuple`4" /> オブジェクトと指定されたオブジェクトを比較し、並べ替え順序において、現在のオブジェクトの位置が指定されたオブジェクトの前になるか、後ろになるか、同じになるかを示す整数を返します。</summary>
      <returns>並べ替え順序における、このインスタンスと <paramref name="obj" /> の相対的な位置を示す符号付き整数 (次の表を参照)。 
値 	説明 	
負の整数 	このインスタンスの位置が <paramref name="obj" /> よりも前です。 	
0 	並べ替え順序における、このインスタンスと <paramref name="obj" /> の位置が同じです。 	
正の整数 	このインスタンスの位置が <paramref name="obj" /> よりも後ろです。</returns>
      <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> が <see cref="T:System.Tuple`4" /> オブジェクトではありません。</exception>
    </member>
    <member name="M:System.Tuple`4.ToString">
      <summary>この <see cref="T:System.Tuple`4" /> インスタンスの値を表す文字列を返します。</summary>
      <returns>この <see cref="T:System.Tuple`4" /> オブジェクトの文字列形式。</returns>
    </member>
    <member name="T:System.Tuple`5">
      <summary>5 組 (5 つの要素で構成される組) を表します。</summary>
      <typeparam name="T1">組の 1 番目のコンポーネントの型。</typeparam>
      <typeparam name="T2">組の 2 番目のコンポーネントの型。</typeparam>
      <typeparam name="T3">組の 3 番目のコンポーネントの型。</typeparam>
      <typeparam name="T4">組の 4 番目のコンポーネントの型。</typeparam>
      <typeparam name="T5">組の 5 番目のコンポーネントの型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`5.#ctor(`0,`1,`2,`3,`4)">
      <summary>
        <see cref="T:System.Tuple`5" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="item1">組の 1 番目のコンポーネントの値。</param>
      <param name="item2">組の 2 番目のコンポーネントの値。</param>
      <param name="item3">組の 3 番目のコンポーネントの値。</param>
      <param name="item4">組の 4 番目のコンポーネントの値。</param>
      <param name="item5">組の 5 番目のコンポーネントの値。</param>
    </member>
    <member name="M:System.Tuple`5.Equals(System.Object)">
      <summary>現在の <see cref="T:System.Tuple`5" /> オブジェクトが、指定されたオブジェクトと等しいかどうかを示す値を返します。</summary>
      <returns>現在のインスタンスが、指定したオブジェクトと同一である場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Tuple`5.GetHashCode">
      <summary>現在の <see cref="T:System.Tuple`5" /> オブジェクトのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.Tuple`5.Item1">
      <summary>現在の <see cref="T:System.Tuple`5" /> オブジェクトの 1 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`5" /> オブジェクトの 1 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`5.Item2">
      <summary>現在の <see cref="T:System.Tuple`5" /> オブジェクトの 2 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`5" /> オブジェクトの 2 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`5.Item3">
      <summary>現在の <see cref="T:System.Tuple`5" /> オブジェクトの 3 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`5" /> オブジェクトの 3 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`5.Item4">
      <summary>現在の <see cref="T:System.Tuple`5" /> オブジェクトの 4 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`5" /> オブジェクトの 4 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`5.Item5">
      <summary>現在の <see cref="T:System.Tuple`5" /> オブジェクトの 5 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`5" /> オブジェクトの 5 番目のコンポーネントの値。</returns>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>指定された比較子を使用して現在の <see cref="T:System.Tuple`5" /> オブジェクトと指定されたオブジェクトを比較し、並べ替え順序において、現在のオブジェクトの位置が指定されたオブジェクトの前になるか、後ろになるか、同じになるかを示す整数を返します。</summary>
      <returns>並べ替え順序における、このインスタンスと <paramref name="other" /> の相対的な位置を示す符号付き整数 (次の表を参照)。 
値 	説明 	
負の整数 	このインスタンスの位置が <paramref name="other" /> よりも前です。 	
0 	並べ替え順序における、このインスタンスと <paramref name="other" /> の位置が同じです。 	
正の整数 	このインスタンスの位置が <paramref name="other" /> よりも後ろです。</returns>
      <param name="other">現在のインスタンスと比較するオブジェクト。</param>
      <param name="comparer">比較のためのカスタム ルールを提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> が <see cref="T:System.Tuple`5" /> オブジェクトではありません。</exception>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>指定された比較メソッドに基づいて、現在の <see cref="T:System.Tuple`5" /> オブジェクトが指定したオブジェクトと等しいかどうかを示す値を返します。</summary>
      <returns>現在のインスタンスが、指定したオブジェクトと同一である場合は true。それ以外の場合は false。</returns>
      <param name="other">このインスタンスと比較するオブジェクト。</param>
      <param name="comparer">2 つのオブジェクトが等しいかどうかを評価するのに使用するメソッドを定義するオブジェクト。</param>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>指定した計算メソッドを使用して、現在の <see cref="T:System.Tuple`5" /> オブジェクトのハッシュ コードを計算します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <param name="comparer">現在の <see cref="T:System.Tuple`5" /> オブジェクトのハッシュ コードを計算する <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> メソッドを持つオブジェクト。</param>
    </member>
    <member name="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
      <summary>現在の <see cref="T:System.Tuple`5" /> オブジェクトと指定されたオブジェクトを比較し、並べ替え順序において、現在のオブジェクトの位置が指定されたオブジェクトの前になるか、後ろになるか、同じになるかを示す整数を返します。</summary>
      <returns>並べ替え順序における、このインスタンスと <paramref name="obj" /> の相対的な位置を示す符号付き整数 (次の表を参照)。 
値 	説明 	
負の整数 	このインスタンスの位置が <paramref name="obj" /> よりも前です。 	
0 	並べ替え順序における、このインスタンスと <paramref name="obj" /> の位置が同じです。 	
正の整数 	このインスタンスの位置が <paramref name="obj" /> よりも後ろです。</returns>
      <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> が <see cref="T:System.Tuple`5" /> オブジェクトではありません。</exception>
    </member>
    <member name="M:System.Tuple`5.ToString">
      <summary>この <see cref="T:System.Tuple`5" /> インスタンスの値を表す文字列を返します。</summary>
      <returns>この <see cref="T:System.Tuple`5" /> オブジェクトの文字列形式。</returns>
    </member>
    <member name="T:System.Tuple`6">
      <summary>6 組 (6 つの要素で構成される組) を表します。</summary>
      <typeparam name="T1">組の 1 番目のコンポーネントの型。</typeparam>
      <typeparam name="T2">組の 2 番目のコンポーネントの型。</typeparam>
      <typeparam name="T3">組の 3 番目のコンポーネントの型。</typeparam>
      <typeparam name="T4">組の 4 番目のコンポーネントの型。</typeparam>
      <typeparam name="T5">組の 5 番目のコンポーネントの型。</typeparam>
      <typeparam name="T6">組の 6 番目のコンポーネントの型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
      <summary>
        <see cref="T:System.Tuple`6" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="item1">組の 1 番目のコンポーネントの値。</param>
      <param name="item2">組の 2 番目のコンポーネントの値。</param>
      <param name="item3">組の 3 番目のコンポーネントの値。</param>
      <param name="item4">組の 4 番目のコンポーネントの値。</param>
      <param name="item5">組の 5 番目のコンポーネントの値。</param>
      <param name="item6">組の 6 番目のコンポーネントの値。</param>
    </member>
    <member name="M:System.Tuple`6.Equals(System.Object)">
      <summary>現在の <see cref="T:System.Tuple`6" /> オブジェクトが、指定されたオブジェクトと等しいかどうかを示す値を返します。</summary>
      <returns>現在のインスタンスが、指定したオブジェクトと同一である場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Tuple`6.GetHashCode">
      <summary>現在の <see cref="T:System.Tuple`6" /> オブジェクトのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.Tuple`6.Item1">
      <summary>現在の <see cref="T:System.Tuple`6" /> オブジェクトの 1 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`6" /> オブジェクトの 1 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`6.Item2">
      <summary>現在の <see cref="T:System.Tuple`6" /> オブジェクトの 2 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`6" /> オブジェクトの 2 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`6.Item3">
      <summary>現在の <see cref="T:System.Tuple`6" /> オブジェクトの 3 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`6" /> オブジェクトの 3 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`6.Item4">
      <summary>現在の <see cref="T:System.Tuple`6" /> オブジェクトの 4 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`6" /> オブジェクトの 4 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`6.Item5">
      <summary>現在の <see cref="T:System.Tuple`6" /> オブジェクトの 5 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`6" /> オブジェクトの 5 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`6.Item6">
      <summary>現在の <see cref="T:System.Tuple`6" /> オブジェクトの 6 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`6" /> オブジェクトの 6 番目のコンポーネントの値。</returns>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>指定された比較子を使用して現在の <see cref="T:System.Tuple`6" /> オブジェクトと指定されたオブジェクトを比較し、並べ替え順序において、現在のオブジェクトの位置が指定されたオブジェクトの前になるか、後ろになるか、同じになるかを示す整数を返します。</summary>
      <returns>並べ替え順序における、このインスタンスと <paramref name="other" /> の相対的な位置を示す符号付き整数 (次の表を参照)。 
値 	説明 	
負の整数 	このインスタンスの位置が <paramref name="other" /> よりも前です。 	
0 	並べ替え順序における、このインスタンスと <paramref name="other" /> の位置が同じです。 	
正の整数 	このインスタンスの位置が <paramref name="other" /> よりも後ろです。</returns>
      <param name="other">現在のインスタンスと比較するオブジェクト。</param>
      <param name="comparer">比較のためのカスタム ルールを提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> が <see cref="T:System.Tuple`6" /> オブジェクトではありません。</exception>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>指定された比較メソッドに基づいて、現在の <see cref="T:System.Tuple`6" /> オブジェクトが指定したオブジェクトと等しいかどうかを示す値を返します。</summary>
      <returns>現在のインスタンスが、指定したオブジェクトと同一である場合は true。それ以外の場合は false。</returns>
      <param name="other">このインスタンスと比較するオブジェクト。</param>
      <param name="comparer">2 つのオブジェクトが等しいかどうかを評価するのに使用するメソッドを定義するオブジェクト。</param>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>指定した計算メソッドを使用して、現在の <see cref="T:System.Tuple`6" /> オブジェクトのハッシュ コードを計算します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <param name="comparer">現在の <see cref="T:System.Tuple`6" /> オブジェクトのハッシュ コードを計算する <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> メソッドを持つオブジェクト。</param>
    </member>
    <member name="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
      <summary>現在の <see cref="T:System.Tuple`6" /> オブジェクトと指定されたオブジェクトを比較し、並べ替え順序において、現在のオブジェクトの位置が指定されたオブジェクトの前になるか、後ろになるか、同じになるかを示す整数を返します。</summary>
      <returns>並べ替え順序における、このインスタンスと <paramref name="obj" /> の相対的な位置を示す符号付き整数 (次の表を参照)。 
値 	説明 	
負の整数 	このインスタンスの位置が <paramref name="obj" /> よりも前です。 	
0 	並べ替え順序における、このインスタンスと <paramref name="obj" /> の位置が同じです。 	
正の整数 	このインスタンスの位置が <paramref name="obj" /> よりも後ろです。</returns>
      <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> が <see cref="T:System.Tuple`6" /> オブジェクトではありません。</exception>
    </member>
    <member name="M:System.Tuple`6.ToString">
      <summary>この <see cref="T:System.Tuple`6" /> インスタンスの値を表す文字列を返します。</summary>
      <returns>この <see cref="T:System.Tuple`6" /> オブジェクトの文字列形式。</returns>
    </member>
    <member name="T:System.Tuple`7">
      <summary>7 組 (7 つの要素で構成される組) を表します。</summary>
      <typeparam name="T1">組の 1 番目のコンポーネントの型。</typeparam>
      <typeparam name="T2">組の 2 番目のコンポーネントの型。</typeparam>
      <typeparam name="T3">組の 3 番目のコンポーネントの型。</typeparam>
      <typeparam name="T4">組の 4 番目のコンポーネントの型。</typeparam>
      <typeparam name="T5">組の 5 番目のコンポーネントの型。</typeparam>
      <typeparam name="T6">組の 6 番目のコンポーネントの型。</typeparam>
      <typeparam name="T7">組の 7 番目のコンポーネントの型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
      <summary>
        <see cref="T:System.Tuple`7" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="item1">組の 1 番目のコンポーネントの値。</param>
      <param name="item2">組の 2 番目のコンポーネントの値。</param>
      <param name="item3">組の 3 番目のコンポーネントの値。</param>
      <param name="item4">組の 4 番目のコンポーネントの値。</param>
      <param name="item5">組の 5 番目のコンポーネントの値。</param>
      <param name="item6">組の 6 番目のコンポーネントの値。</param>
      <param name="item7">組の 7 番目のコンポーネントの値。</param>
    </member>
    <member name="M:System.Tuple`7.Equals(System.Object)">
      <summary>現在の <see cref="T:System.Tuple`7" /> オブジェクトが、指定されたオブジェクトと等しいかどうかを示す値を返します。</summary>
      <returns>現在のインスタンスが、指定したオブジェクトと同一である場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Tuple`7.GetHashCode">
      <summary>現在の <see cref="T:System.Tuple`7" /> オブジェクトのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.Tuple`7.Item1">
      <summary>現在の <see cref="T:System.Tuple`7" /> オブジェクトの 1 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`7" /> オブジェクトの 1 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`7.Item2">
      <summary>現在の <see cref="T:System.Tuple`7" /> オブジェクトの 2 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`7" /> オブジェクトの 2 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`7.Item3">
      <summary>現在の <see cref="T:System.Tuple`7" /> オブジェクトの 3 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`7" /> オブジェクトの 3 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`7.Item4">
      <summary>現在の <see cref="T:System.Tuple`7" /> オブジェクトの 4 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`7" /> オブジェクトの 4 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`7.Item5">
      <summary>現在の <see cref="T:System.Tuple`7" /> オブジェクトの 5 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`7" /> オブジェクトの 5 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`7.Item6">
      <summary>現在の <see cref="T:System.Tuple`7" /> オブジェクトの 6 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`7" /> オブジェクトの 6 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`7.Item7">
      <summary>現在の <see cref="T:System.Tuple`7" /> オブジェクトの 7 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`7" /> オブジェクトの 7 番目のコンポーネントの値。</returns>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>指定された比較子を使用して現在の <see cref="T:System.Tuple`7" /> オブジェクトと指定されたオブジェクトを比較し、並べ替え順序において、現在のオブジェクトの位置が指定されたオブジェクトの前になるか、後ろになるか、同じになるかを示す整数を返します。</summary>
      <returns>並べ替え順序における、このインスタンスと <paramref name="other" /> の相対的な位置を示す符号付き整数 (次の表を参照)。 
値 	説明 	
負の整数 	このインスタンスの位置が <paramref name="other" /> よりも前です。 	
0 	並べ替え順序における、このインスタンスと <paramref name="other" /> の位置が同じです。 	
正の整数 	このインスタンスの位置が <paramref name="other" /> よりも後ろです。</returns>
      <param name="other">現在のインスタンスと比較するオブジェクト。</param>
      <param name="comparer">比較のためのカスタム ルールを提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> が <see cref="T:System.Tuple`7" /> オブジェクトではありません。</exception>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>指定された比較メソッドに基づいて、現在の <see cref="T:System.Tuple`7" /> オブジェクトが指定したオブジェクトと等しいかどうかを示す値を返します。</summary>
      <returns>現在のインスタンスが、指定したオブジェクトと同一である場合は true。それ以外の場合は false。</returns>
      <param name="other">このインスタンスと比較するオブジェクト。</param>
      <param name="comparer">2 つのオブジェクトが等しいかどうかを評価するのに使用するメソッドを定義するオブジェクト。</param>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>指定した計算メソッドを使用して、現在の <see cref="T:System.Tuple`7" /> オブジェクトのハッシュ コードを計算します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <param name="comparer">現在の <see cref="T:System.Tuple`7" /> オブジェクトのハッシュ コードを計算する <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> メソッドを持つオブジェクト。</param>
    </member>
    <member name="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
      <summary>現在の <see cref="T:System.Tuple`7" /> オブジェクトと指定されたオブジェクトを比較し、並べ替え順序において、現在のオブジェクトの位置が指定されたオブジェクトの前になるか、後ろになるか、同じになるかを示す整数を返します。</summary>
      <returns>並べ替え順序における、このインスタンスと <paramref name="obj" /> の相対的な位置を示す符号付き整数 (次の表を参照)。 
値 	説明 	
負の整数 	このインスタンスの位置が <paramref name="obj" /> よりも前です。 	
0 	並べ替え順序における、このインスタンスと <paramref name="obj" /> の位置が同じです。 	
正の整数 	このインスタンスの位置が <paramref name="obj" /> よりも後ろです。</returns>
      <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> が <see cref="T:System.Tuple`7" /> オブジェクトではありません。</exception>
    </member>
    <member name="M:System.Tuple`7.ToString">
      <summary>この <see cref="T:System.Tuple`7" /> インスタンスの値を表す文字列を返します。</summary>
      <returns>この <see cref="T:System.Tuple`7" /> オブジェクトの文字列形式。</returns>
    </member>
    <member name="T:System.Tuple`8">
      <summary>n 組を表します (n は 8 以上の数字)。</summary>
      <typeparam name="T1">組の 1 番目のコンポーネントの型。</typeparam>
      <typeparam name="T2">組の 2 番目のコンポーネントの型。</typeparam>
      <typeparam name="T3">組の 3 番目のコンポーネントの型。</typeparam>
      <typeparam name="T4">組の 4 番目のコンポーネントの型。</typeparam>
      <typeparam name="T5">組の 5 番目のコンポーネントの型。</typeparam>
      <typeparam name="T6">組の 6 番目のコンポーネントの型。</typeparam>
      <typeparam name="T7">組の 7 番目のコンポーネントの型。</typeparam>
      <typeparam name="TRest">組の残りのコンポーネントの型を定義する汎用 Tuple オブジェクト。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
      <summary>
        <see cref="T:System.Tuple`8" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="item1">組の 1 番目のコンポーネントの値。</param>
      <param name="item2">組の 2 番目のコンポーネントの値。</param>
      <param name="item3">組の 3 番目のコンポーネントの値。</param>
      <param name="item4">組の 4 番目のコンポーネントの値。</param>
      <param name="item5">組の 5 番目のコンポーネントの値。</param>
      <param name="item6">組の 6 番目のコンポーネントの値。</param>
      <param name="item7">組の 7 番目のコンポーネントの値。</param>
      <param name="rest">組の残りのコンポーネントの値を格納する汎用 Tuple オブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rest" /> がジェネリック Tuple オブジェクトではありません。</exception>
    </member>
    <member name="M:System.Tuple`8.Equals(System.Object)">
      <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトが、指定されたオブジェクトと等しいかどうかを示す値を返します。</summary>
      <returns>現在のインスタンスが、指定したオブジェクトと同一である場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Tuple`8.GetHashCode">
      <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトのハッシュ コードを計算します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.Tuple`8.Item1">
      <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 1 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 1 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`8.Item2">
      <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 2 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 2 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`8.Item3">
      <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 3 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 3 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`8.Item4">
      <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 4 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 4 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`8.Item5">
      <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 5 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 5 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`8.Item6">
      <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 6 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 6 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`8.Item7">
      <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 7 番目のコンポーネントの値を取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 7 番目のコンポーネントの値。</returns>
    </member>
    <member name="P:System.Tuple`8.Rest">
      <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトの残りのコンポーネントを取得します。</summary>
      <returns>現在の <see cref="T:System.Tuple`8" /> オブジェクトの残りのコンポーネントの値。</returns>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>指定された比較子を使用して現在の <see cref="T:System.Tuple`8" /> オブジェクトと指定されたオブジェクトを比較し、並べ替え順序において、現在のオブジェクトの位置が指定されたオブジェクトの前になるか、後ろになるか、同じになるかを示す整数を返します。</summary>
      <returns>並べ替え順序における、このインスタンスと <paramref name="other" /> の相対的な位置を示す符号付き整数 (次の表を参照)。 
値 	説明 	
負の整数 	このインスタンスの位置が <paramref name="other" /> よりも前です。 	
0 	並べ替え順序における、このインスタンスと <paramref name="other" /> の位置が同じです。 	
正の整数 	このインスタンスの位置が <paramref name="other" /> よりも後ろです。</returns>
      <param name="other">現在のインスタンスと比較するオブジェクト。</param>
      <param name="comparer">比較のためのカスタム ルールを提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> が <see cref="T:System.Tuple`8" /> オブジェクトではありません。</exception>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>指定された比較メソッドに基づいて、現在の <see cref="T:System.Tuple`8" /> オブジェクトが指定したオブジェクトと等しいかどうかを示す値を返します。</summary>
      <returns>現在のインスタンスが、指定したオブジェクトと同一である場合は true。それ以外の場合は false。</returns>
      <param name="other">このインスタンスと比較するオブジェクト。</param>
      <param name="comparer">2 つのオブジェクトが等しいかどうかを評価するのに使用するメソッドを定義するオブジェクト。</param>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>指定した計算メソッドを使用して、現在の <see cref="T:System.Tuple`8" /> オブジェクトのハッシュ コードを計算します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <param name="comparer">現在の <see cref="T:System.Tuple`8" /> オブジェクトのハッシュ コードを計算する <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> メソッドを持つオブジェクト。</param>
    </member>
    <member name="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
      <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトと指定されたオブジェクトを比較し、並べ替え順序において、現在のオブジェクトの位置が指定されたオブジェクトの前になるか、後ろになるか、同じになるかを示す整数を返します。</summary>
      <returns>並べ替え順序における、このインスタンスと <paramref name="obj" /> の相対的な位置を示す符号付き整数 (次の表を参照)。 
値 	説明 	
負の整数 	このインスタンスの位置が <paramref name="obj" /> よりも前です。 	
0 	並べ替え順序における、このインスタンスと <paramref name="obj" /> の位置が同じです。 	
正の整数 	このインスタンスの位置が <paramref name="obj" /> よりも後ろです。</returns>
      <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> が <see cref="T:System.Tuple`8" /> オブジェクトではありません。</exception>
    </member>
    <member name="M:System.Tuple`8.ToString">
      <summary>この <see cref="T:System.Tuple`8" /> インスタンスの値を表す文字列を返します。</summary>
      <returns>この <see cref="T:System.Tuple`8" /> オブジェクトの文字列形式。</returns>
    </member>
    <member name="T:System.Type">
      <summary>型宣言を表します。型には、クラス型、インターフェイス型、配列型、値型、列挙型、型パラメーター、ジェネリック型定義、およびオープン構築ジェネリック型またはクローズ構築ジェネリック型があります。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Type.AssemblyQualifiedName">
      <summary>
        <see cref="T:System.Type" /> の読み込み元であるアセンブリの名前を含む、<see cref="T:System.Type" /> のアセンブリ修飾名を取得します。</summary>
      <returns>
        <see cref="T:System.Type" /> の読み込み元であるアセンブリの名前を含む、<see cref="T:System.Type" /> のアセンブリ修飾名。現在のインスタンスがジェネリック型パラメーターを表す場合は null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.DeclaringType">
      <summary>現在の入れ子にされた型またはジェネリック型パラメーターを宣言する型を取得します。</summary>
      <returns>現在の型が入れ子にされた型である場合、包含する型を表す <see cref="T:System.Type" /> オブジェクト。現在の型がジェネリック型の型パラメーターである場合、ジェネリック型定義。現在の型がジェネリック メソッドの型パラメーターである場合、ジェネリック メソッドを宣言する型。それ以外の場合、null。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Type.Equals(System.Object)">
      <summary>現在の <see cref="T:System.Type" /> の基になるシステム型が、指定した <see cref="T:System.Object" /> の基になるシステム型と同じかどうかを判断します。</summary>
      <returns>
        <paramref name="o" /> の基になるシステム型が現在の <see cref="T:System.Type" /> の基になるシステム型と同じである場合は true。それ以外の場合は false。 このメソッドは、<paramref name="o" /> パラメーターで指定されたオブジェクトが Type でない場合、false も返します。</returns>
      <param name="o">基になるシステム型が、現在の <see cref="T:System.Type" /> の基になるシステム型との比較対象になるオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.Equals(System.Type)">
      <summary>現在の <see cref="T:System.Type" /> の基になるシステム型が、指定した <see cref="T:System.Type" /> の基になるシステム型と同じかどうかを判断します。</summary>
      <returns>
        <paramref name="o" /> の基になるシステム型が現在の <see cref="T:System.Type" /> の基になるシステム型と同じである場合は true。それ以外の場合は false。</returns>
      <param name="o">基になるシステム型が、現在の <see cref="T:System.Type" /> の基になるシステム型との比較対象になるオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.FullName">
      <summary>
        <see cref="T:System.Type" /> の名前空間を含み、アセンブリを含まない、<see cref="T:System.Type" /> の完全修飾名を取得します。</summary>
      <returns>
        <see cref="T:System.Type" /> の名前空間を含み、アセンブリを含まない、<see cref="T:System.Type" /> の完全修飾名。現在のインスタンスが、ジェネリック型パラメーターを表している場合、型パラメーターに基づく配列型、ポインター型、または byref 型を表している場合、またはジェネリック型定義ではないが未解決の型パラメーターを含むジェネリック型を表している場合は null。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Type.GenericParameterPosition">
      <summary>
        <see cref="T:System.Type" /> オブジェクトがジェネリック型またはジェネリック メソッドの型パラメーターを表す場合に、パラメーターを宣言したジェネリック型またはジェネリック メソッドの型パラメーター リスト内の型パラメーターの位置を取得します。</summary>
      <returns>パラメーターを宣言するジェネリック型またはジェネリック メソッドの型パラメーター リスト内の型パラメーターの位置。 位置の番号は 0 で始まります。</returns>
      <exception cref="T:System.InvalidOperationException">現在の型は型パラメーターを表しません。 つまり、<see cref="P:System.Type.IsGenericParameter" /> は false を返します。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.GenericTypeArguments">
      <summary>この型のジェネリック型引数の配列を取得します。</summary>
      <returns>この型のジェネリック型引数の配列。</returns>
    </member>
    <member name="M:System.Type.GetArrayRank">
      <summary>
        <see cref="T:System.Array" /> の次元数を取得します。</summary>
      <returns>現在の Type の次元数を保持している <see cref="T:System.Int32" />。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドの機能が基本クラスでサポートされないため、代わりに派生クラスで実装する必要があります。</exception>
      <exception cref="T:System.ArgumentException">現在の Type が配列ではありません。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetElementType">
      <summary>派生クラスによってオーバーライドされた場合、現在の配列、ポインター、または参照型によって包含または参照されるオブジェクトの <see cref="T:System.Type" /> を返します。</summary>
      <returns>現在の配列、ポインター、または参照型によって包含または参照されるオブジェクトの <see cref="T:System.Type" />。現在の <see cref="T:System.Type" /> が配列またはポインターではない場合、参照によって渡されない場合、ジェネリック型やジェネリック型またはジェネリック メソッドの定義の型パラメーターを表している場合は、null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetGenericTypeDefinition">
      <summary>現在のジェネリック型を構築する元になるジェネリック型定義を表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <returns>現在の型を構築する元になるジェネリック型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException">現在の型はジェネリック型ではありません。つまり、<see cref="P:System.Type.IsGenericType" /> は false を返します。</exception>
      <exception cref="T:System.NotSupportedException">呼び出されたメソッドは、基本クラスではサポートされません。 派生クラスには実装を指定しなければなりません。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetHashCode">
      <summary>対象のインスタンスのハッシュ コードを返します。</summary>
      <returns>対象のインスタンスのハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetType(System.String)">
      <summary>大文字と小文字を区別する検索を実行して、指定した名前の <see cref="T:System.Type" /> を取得します。</summary>
      <returns>存在する場合は、指定した名前を持つ型。それ以外の場合は null。</returns>
      <param name="typeName">取得する型のアセンブリ修飾名。 「<see cref="P:System.Type.AssemblyQualifiedName" />」を参照してください。 型が現在実行されているアセンブリ内または Mscorlib.dll にある場合は、名前空間で修飾された型名を提供するだけで十分です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> は null です。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">クラス初期化子が呼び出され、例外をスローしました。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> は、型引数の 1 つとしてポインター型、ByRef、または <see cref="T:System.Void" /> を持つジェネリック型を表しています。 または <paramref name="typeName" /> が、正しい数の型引数が格納されていないジェネリック型を表しています。 または <paramref name="typeName" /> がジェネリック型を表しており、その型引数の 1 つが対応する型パラメーターの制約を満たしていません。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> は、<see cref="T:System.TypedReference" /> の配列を表します。</exception>
      <exception cref="T:System.IO.FileLoadException">Windows ストア アプリのための .NET または汎用性のあるクラス ライブラリで、基本クラスの例外 <see cref="T:System.IO.IOException" /> を代わりにキャッチします。 アセンブリまたは依存関係が見つからず、読み込むことができませんでした。</exception>
      <exception cref="T:System.BadImageFormatException">アセンブリまたは依存関係が無効です。 または 現在バージョン 2.0 以上の共通言語ランタイムが読み込まれていますが、それよりも新しいバージョンを使用してアセンブリがコンパイルされています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean)">
      <summary>大文字と小文字を区別する検索を実行し、型が見つからない場合に例外をスローするかどうかを指定して、指定した名前の <see cref="T:System.Type" /> を取得します。</summary>
      <returns>指定した名前を持つ型。 型が見つからない場合、<paramref name="throwOnError" /> パラメーターで null を返すか例外をスローするかを指定します。 一部の場合は、<paramref name="throwOnError" /> の値に関係なく、例外がスローされます。 「例外」を参照してください。</returns>
      <param name="typeName">取得する型のアセンブリ修飾名。 「<see cref="P:System.Type.AssemblyQualifiedName" />」を参照してください。 型が現在実行されているアセンブリ内または Mscorlib.dll にある場合は、名前空間で修飾された型名を提供するだけで十分です。</param>
      <param name="throwOnError">型が見つからなかったときに例外をスローする場合は true。null を返す場合は false。 また、false を指定すると、一部の例外条件は抑制されますが、すべての例外が抑制されるわけではありません。 「例外」を参照してください。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> は null です。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">クラス初期化子が呼び出され、例外をスローしました。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> が true であり、型は見つかりません。 または <paramref name="throwOnError" /> が true であり、<paramref name="typeName" /> に埋め込まれたタブなどの無効な文字が含まれています。 または <paramref name="throwOnError" /> が true であり、<paramref name="typeName" /> が空の文字列です。 または <paramref name="throwOnError" /> が true であり、<paramref name="typeName" /> が無効なサイズの配列型を表しています。 または <paramref name="typeName" /> は、<see cref="T:System.TypedReference" /> の配列を表します。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="throwOnError" /> が true であり、<paramref name="typeName" /> に無効な構文が含まれています。 たとえば、"MyType[,*,]" です。 または <paramref name="typeName" /> は、型引数の 1 つとしてポインター型、ByRef、または <see cref="T:System.Void" /> を持つジェネリック型を表しています。 または <paramref name="typeName" /> が、正しい数の型引数が格納されていないジェネリック型を表しています。 または <paramref name="typeName" /> がジェネリック型を表しており、その型引数の 1 つが対応する型パラメーターの制約を満たしていません。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> が true で、アセンブリまたは依存関係の 1 つが見つかりませんでした。</exception>
      <exception cref="T:System.IO.FileLoadException">Windows ストア アプリのための .NET または汎用性のあるクラス ライブラリで、基本クラスの例外 <see cref="T:System.IO.IOException" /> を代わりにキャッチします。 アセンブリまたは依存関係が見つからず、読み込むことができませんでした。</exception>
      <exception cref="T:System.BadImageFormatException">アセンブリまたは依存関係が無効です。 または 現在バージョン 2.0 以上の共通言語ランタイムが読み込まれていますが、それよりも新しいバージョンを使用してアセンブリがコンパイルされています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)">
      <summary>指定した型ハンドルによって参照される型を取得します。</summary>
      <returns>指定した <see cref="T:System.RuntimeTypeHandle" /> によって参照される型。または <paramref name="handle" /> の <see cref="P:System.RuntimeTypeHandle.Value" /> プロパティが null の場合は null。</returns>
      <param name="handle">型を参照するオブジェクト。</param>
      <exception cref="T:System.Reflection.TargetInvocationException">クラス初期化子が呼び出され、例外をスローしました。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Type.HasElementType">
      <summary>現在の <see cref="T:System.Type" /> が別の型を包含または参照しているかどうか、つまり現在の <see cref="T:System.Type" /> が配列、ポインター、または参照渡しかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Type" /> が配列やポインターであるか、参照渡しである場合は true。それ以外の場合は false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsArray">
      <summary>
        <see cref="T:System.Type" /> が配列かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Type" /> が配列である場合は true。それ以外の場合は false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsByRef">
      <summary>
        <see cref="T:System.Type" /> が参照渡しかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Type" /> が参照渡しである場合は true。それ以外の場合は false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsConstructedGenericType">
      <summary>このオブジェクトが構築ジェネリック型かどうかを示す値を取得します。 構築ジェネリック型のインスタンスを作成できます。</summary>
      <returns>このオブジェクトが構築ジェネリック型を表している場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Type.IsGenericParameter">
      <summary>現在の <see cref="T:System.Type" /> がジェネリック型またはジェネリック メソッドの定義の型パラメーターを表しているかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Type" /> オブジェクトがジェネリック型定義またはジェネリック メソッド定義の型パラメーターを表している場合は true。それ以外の場合は false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsNested">
      <summary>現在の <see cref="T:System.Type" /> オブジェクトが、別の型の定義内に入れ子になっている定義で定義された型を表しているかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Type" /> が別の型に入れ子になっている場合は true。それ以外の場合は false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsPointer">
      <summary>
        <see cref="T:System.Type" /> がポインターかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Type" /> がポインターである場合は true。それ以外の場合は false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.MakeArrayType">
      <summary>下限を 0 に設定して現在の型の 1 次元配列を表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <returns>下限を 0 に設定して現在の型の 1 次元配列を表す <see cref="T:System.Type" /> オブジェクト。</returns>
      <exception cref="T:System.NotSupportedException">呼び出されたメソッドは、基本クラスではサポートされません。 派生クラスには実装を指定しなければなりません。</exception>
      <exception cref="T:System.TypeLoadException">現在の型が <see cref="T:System.TypedReference" /> です。 または 現在の型が ByRef 型です。 つまり、<see cref="P:System.Type.IsByRef" /> が true を返します。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.MakeArrayType(System.Int32)">
      <summary>次元数を指定して現在の型の配列を表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <returns>次元数を指定して現在の型の配列を表すオブジェクト。</returns>
      <param name="rank">配列の次元数。 このパラメーターには 32 以下の数値を指定する必要があります。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> が無効です。 たとえば、0 または負の値です。</exception>
      <exception cref="T:System.NotSupportedException">呼び出されたメソッドは、基本クラスではサポートされません。</exception>
      <exception cref="T:System.TypeLoadException">現在の型が <see cref="T:System.TypedReference" /> です。 または 現在の型が ByRef 型です。 つまり、<see cref="P:System.Type.IsByRef" /> が true を返します。 または <paramref name="rank" /> が 32 を超えています。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.MakeByRefType">
      <summary>ref パラメーター (Visual Basic の場合は ByRef) として渡されるときに現在の型を表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <returns>ref パラメーター (Visual Basic の場合は ByRef) として渡されるときに現在の型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
      <exception cref="T:System.NotSupportedException">呼び出されたメソッドは、基本クラスではサポートされません。</exception>
      <exception cref="T:System.TypeLoadException">現在の型が <see cref="T:System.TypedReference" /> です。 または 現在の型が ByRef 型です。 つまり、<see cref="P:System.Type.IsByRef" /> が true を返します。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.MakeGenericType(System.Type[])">
      <summary>型の配列の要素を現在のジェネリック型定義の型パラメーターで置き換え、結果の構築型を表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <returns>
        <paramref name="typeArguments" /> の要素を現在のジェネリック型の型パラメーターで置き換えることによって作られる構築型を表す <see cref="T:System.Type" />。</returns>
      <param name="typeArguments">現在のジェネリック型の型パラメーターに置き換えられる型の配列。</param>
      <exception cref="T:System.InvalidOperationException">現在の型はジェネリック型定義を表しません。 つまり、<see cref="P:System.Type.IsGenericTypeDefinition" /> は false を返します。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" /> は null です。 または <paramref name="typeArguments" /> の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArguments" /> の要素の数が現在のジェネリック型定義の型パラメーターの数と同じではありません。 または <paramref name="typeArguments" /> の要素が、現在のジェネリック型の対応する型パラメーターに指定された制約を満たしていません。 または <paramref name="typeArguments" /> に含まれる要素は、ポインター型 (<see cref="P:System.Type.IsPointer" /> は true を返す)、"参照渡し" 型 (<see cref="P:System.Type.IsByRef" /> はtrue を返す)、または <see cref="T:System.Void" /> です。</exception>
      <exception cref="T:System.NotSupportedException">呼び出されたメソッドは、基本クラスではサポートされません。 派生クラスには実装を指定しなければなりません。</exception>
    </member>
    <member name="M:System.Type.MakePointerType">
      <summary>現在の型へのポインターを表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <returns>現在の型へのポインターを表す <see cref="T:System.Type" /> オブジェクト。</returns>
      <exception cref="T:System.NotSupportedException">呼び出されたメソッドは、基本クラスではサポートされません。</exception>
      <exception cref="T:System.TypeLoadException">現在の型が <see cref="T:System.TypedReference" /> です。 または 現在の型が ByRef 型です。 つまり、<see cref="P:System.Type.IsByRef" /> が true を返します。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Type.Missing">
      <summary>
        <see cref="T:System.Type" /> 情報に不足している値を表します。 このフィールドは読み取り専用です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Type.Name">
    </member>
    <member name="P:System.Type.Namespace">
      <summary>
        <see cref="T:System.Type" /> の名前空間を取得します。</summary>
      <returns>
        <see cref="T:System.Type" /> の名前空間。現在のインスタンスに名前空間がない場合、または現在のインスタンスがジェネリック パラメーターを表す場合は null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.ToString">
      <summary>現在の Type の名前を表す String を返します。</summary>
      <returns>現在の <see cref="T:System.Type" /> の名前を表す <see cref="T:System.String" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.TypeHandle">
      <summary>現在の <see cref="T:System.Type" /> のハンドルを取得します。</summary>
      <returns>現在の <see cref="T:System.Type" /> のハンドル。</returns>
      <exception cref="T:System.NotSupportedException">.NET Compact Framework は、現在このプロパティをサポートしていません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.TypeAccessException">
      <summary>メソッドでアクセスできない型を使用しようとした場合にスローされる例外。</summary>
    </member>
    <member name="M:System.TypeAccessException.#ctor">
      <summary>エラーを説明するシステム提供のメッセージを使用して、<see cref="T:System.TypeAccessException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.String)">
      <summary>エラーを説明する指定したメッセージを使用して、<see cref="T:System.TypeAccessException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.TypeAccessException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
      <param name="inner">現在の例外の原因である例外。 <paramref name="inner" /> パラメーターが null ではない場合、現在の例外は内部例外を処理する catch ブロックで発生します。</param>
    </member>
    <member name="T:System.TypeInitializationException">
      <summary>クラス初期化子によってスローされた例外をラップするラッパーとしてスローされる例外。 このクラスは継承できません。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
      <summary>既定のエラー メッセージ、指定した型名、この例外の原因である内部例外への参照を使用して、<see cref="T:System.TypeInitializationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fullTypeName">初期化できなかった型の完全限定名。</param>
      <param name="innerException">現在の例外の原因である例外。 <paramref name="innerException" /> パラメーターが null 参照 (Visual Basic の場合は Nothing) でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="P:System.TypeInitializationException.TypeName">
      <summary>初期化できなかった型の完全限定名を取得します。</summary>
      <returns>初期化できなかった型の完全限定名。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.TypeLoadException">
      <summary>型の読み取りエラーが発生したときにスローされる例外。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TypeLoadException.#ctor">
      <summary>
        <see cref="T:System.TypeLoadException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.TypeLoadException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.TypeLoadException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="inner">現在の例外の原因である例外。 <paramref name="inner" /> パラメーターが null ではない場合、現在の例外は内部例外を処理する catch ブロックで発生します。</param>
    </member>
    <member name="P:System.TypeLoadException.Message">
      <summary>この例外のエラー メッセージを取得します。</summary>
      <returns>エラー メッセージ文字列。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.TypeLoadException.TypeName">
      <summary>この例外の原因である型の完全限定名を取得します。</summary>
      <returns>完全修飾型名。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.UInt16">
      <summary>16 ビット符号なし整数を表します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.CompareTo(System.UInt16)">
      <summary>指定した 16 ビット符号なし整数とこのインスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。 
戻り値 	説明 	
0 より小さい値 	このインスタンスは、<paramref name="value" /> よりも小さくなっています。 	
0 	このインスタンスは <paramref name="value" /> と等価です。 	
0 を超える値 	このインスタンスは <paramref name="value" /> よりも大きくなっています。</returns>
      <param name="value">比較対象の符号なし整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt16.Equals(System.Object)">
      <summary>対象のインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> が <see cref="T:System.UInt16" /> のインスタンスで、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt16.Equals(System.UInt16)">
      <summary>対象のインスタンスが、指定した <see cref="T:System.UInt16" /> 値に等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> がこのインスタンスと同じ値を保持している場合は true。それ以外の場合は false。</returns>
      <param name="obj">対象のインスタンスと比較する 16 ビット符号なし整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt16.GetHashCode">
      <summary>対象のインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.UInt16.MaxValue">
      <summary>
        <see cref="T:System.UInt16" /> の最大有効値を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UInt16.MinValue">
      <summary>
        <see cref="T:System.UInt16" /> の最小有効値を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.Parse(System.String)">
      <summary>数値の文字列形式を、それと等価な 16 ビット符号なし整数に変換します。</summary>
      <returns>
        <paramref name="s" /> に格納されている数値と等しい 16 ビット符号なし整数。</returns>
      <param name="s">変換する数値を表す文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の形式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.UInt16.MinValue" /> 未満の数値か、<see cref="F:System.UInt16.MaxValue" /> より大きい数値を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>指定したスタイルの数値の文字列形式を、それと等価な 16 ビット符号なし整数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定した数値と等しい 16 ビット符号なし整数。</returns>
      <param name="s">変換する数値を表す文字列。 文字列は、<paramref name="style" /> パラメーターで指定されたスタイルを使用して解釈されます。</param>
      <param name="style">
        <paramref name="s" /> に許可されている書式を指定する列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の書式が、<paramref name="style" /> に準拠した書式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.UInt16.MinValue" /> 未満の数値か、<see cref="F:System.UInt16.MaxValue" /> より大きい数値を表しています。 または <paramref name="s" /> は 0 以外の小数部の桁を含んでいます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>指定したスタイルおよびカルチャ固有の書式による数値の文字列形式を、それと等価な 16 ビット符号なし整数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定した数値と等しい 16 ビット符号なし整数。</returns>
      <param name="s">変換する数値を表す文字列。 文字列は、<paramref name="style" /> パラメーターで指定されたスタイルを使用して解釈されます。</param>
      <param name="style">
        <paramref name="s" /> で使用できるスタイル要素を示す列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の書式が、<paramref name="style" /> に準拠した書式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.UInt16.MinValue" /> 未満の数値か、<see cref="F:System.UInt16.MaxValue" /> を超える数値を表しています。 または <paramref name="s" /> は 0 以外の小数部の桁を含んでいます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.IFormatProvider)">
      <summary>指定したカルチャ固有の書式による数値の文字列形式を、それと等価な 16 ビット符号なし整数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定した数値と等しい 16 ビット符号なし整数。</returns>
      <param name="s">変換する数値を表す文字列。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の形式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.UInt16.MinValue" /> 未満の数値か、<see cref="F:System.UInt16.MaxValue" /> より大きい数値を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.System#IComparable#CompareTo(System.Object)">
      <summary>現在のインスタンスを同じ型の別のオブジェクトと比較し、現在のインスタンスの並べ替え順序での位置が、比較対象のオブジェクトと比べて前か、後か、または同じかを示す整数を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対順序を示す符号付き整数。 
戻り値 	説明 	
0 より小さい値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも前です。 	
0 	このインスタンスは、並べ替え順序で、<paramref name="value" /> と同じ位置に出現します。 	
0 を超える値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも後ろです。 または <paramref name="value" /> は null なので、</returns>
      <param name="value">対象のインスタンスと比較する対象のオブジェクト、または null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が <see cref="T:System.UInt16" /> オブジェクトではありません。</exception>
    </member>
    <member name="M:System.UInt16.ToString">
      <summary>このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
      <returns>0 から 9 までの一連の数字で構成され、符号または先行ゼロを含まない、このインスタンスの値の文字列形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.ToString(System.IFormatProvider)">
      <summary>このインスタンスの数値を、指定したカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
      <returns>0 から 9 までの一連の数字で構成され、符号または先行ゼロを含まない、このインスタンスの値の文字列形式。</returns>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.ToString(System.String)">
      <summary>このインスタンスの数値を、指定した書式を使用して、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="format">数値書式指定文字列。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> パラメーターが無効です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.ToString(System.String,System.IFormatProvider)">
      <summary>このインスタンスの数値を、指定した書式およびカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> および <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="format">数値書式指定文字列。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> が無効です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt16@)">
      <summary>指定したスタイルおよびカルチャ固有の書式による数値の文字列形式を、それと等価な 16 ビット符号なし整数に変換します。 戻り値は、変換が成功したか失敗したかを示します。</summary>
      <returns>
        <paramref name="s" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">変換する数値を表す文字列。 文字列は、<paramref name="style" /> パラメーターで指定されたスタイルを使用して解釈されます。</param>
      <param name="style">
        <paramref name="s" /> に許可されている書式を示す列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="result">変換が成功した場合、このメソッドが返されるときに、<paramref name="s" /> に格納された数値と等しい 16 ビット符号なし整数値を格納します。変換に失敗した場合は 0 を格納します。 <paramref name="s" /> パラメーターが特定の条件 (null である、<paramref name="style" /> に準拠した形式ではない、<see cref="F:System.UInt16.MinValue" /> より小さい数値または <see cref="F:System.UInt16.MaxValue" /> より大きい数値を表している) に該当する場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.UInt16@)">
      <summary>数値の文字列形式を、それと等価の 16 ビット符号なし整数に変換します。 戻り値は、変換が成功したか失敗したかを示します。</summary>
      <returns>
        <paramref name="s" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">変換する数値を表す文字列。</param>
      <param name="result">このメソッドから制御が返されたとき、変換に成功した場合は、<paramref name="s" /> に格納された数値と等価な 16 ビット符号なし整数値が格納されます。変換に失敗した場合は 0 が格納されます。 <paramref name="s" /> パラメーターが null の場合や、正しい形式ではない場合、変換は失敗します。また、パラメーターが <see cref="F:System.UInt16.MinValue" /> より小さい数値または <see cref="F:System.UInt16.MaxValue" /> より大きい数値を表している場合にも変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.UInt32">
      <summary>32 ビット符号なし整数を表します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.CompareTo(System.UInt32)">
      <summary>指定した 32 ビット符号なし整数とこのインスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。 
戻り値 	説明 	
0 より小さい値 	このインスタンスは、<paramref name="value" /> よりも小さくなっています。 	
0 	このインスタンスは <paramref name="value" /> と等価です。 	
0 を超える値 	このインスタンスは <paramref name="value" /> よりも大きくなっています。</returns>
      <param name="value">比較対象の符号なし整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt32.Equals(System.Object)">
      <summary>対象のインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> が <see cref="T:System.UInt32" /> のインスタンスで、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt32.Equals(System.UInt32)">
      <summary>このインスタンスが、指定した <see cref="T:System.UInt32" /> に等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> がこのインスタンスと同じ値を保持している場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較する値。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt32.GetHashCode">
      <summary>対象のインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.UInt32.MaxValue">
      <summary>
        <see cref="T:System.UInt32" /> の最大有効値を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UInt32.MinValue">
      <summary>
        <see cref="T:System.UInt32" /> の最小有効値を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.Parse(System.String)">
      <summary>数値の文字列形式を、それと等価な 32 ビット符号なし整数に変換します。</summary>
      <returns>
        <paramref name="s" /> に格納されている数値と等しい 32 ビット符号なし整数。</returns>
      <param name="s">変換する数値を表す文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> パラメーターが null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> パラメーターが適切な書式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> パラメーターが <see cref="F:System.UInt32.MinValue" /> 未満の数値か、<see cref="F:System.UInt32.MaxValue" /> より大きい数値を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>指定したスタイルの数値の文字列形式を、それと等価な 32 ビット符号なし整数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定した数値と等しい 32 ビット符号なし整数。</returns>
      <param name="s">変換する数値を表す文字列。 文字列は、<paramref name="style" /> パラメーターで指定されたスタイルを使用して解釈されます。</param>
      <param name="style">
        <paramref name="s" /> に許可されている書式を指定する列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の書式が、<paramref name="style" /> に準拠した書式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.UInt32.MinValue" /> 未満の数値か、<see cref="F:System.UInt32.MaxValue" /> を超える数値を表しています。 または <paramref name="s" /> は 0 以外の小数部の桁を含んでいます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>指定したスタイルおよびカルチャ固有の書式による数値の文字列形式を、それと等価な 32 ビット符号なし整数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定した数値と等しい 32 ビット符号なし整数。</returns>
      <param name="s">変換する数値を表す文字列。 文字列は、<paramref name="style" /> パラメーターで指定されたスタイルを使用して解釈されます。</param>
      <param name="style">
        <paramref name="s" /> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> の書式が、<paramref name="style" /> に準拠した書式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.UInt32.MinValue" /> 未満の数値か、<see cref="F:System.UInt32.MaxValue" /> を超える数値を表しています。 または <paramref name="s" /> は 0 以外の小数部の桁を含んでいます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.IFormatProvider)">
      <summary>指定したカルチャ固有の書式による数値の文字列形式を、それと等価な 32 ビット符号なし整数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定した数値と等しい 32 ビット符号なし整数。</returns>
      <param name="s">変換する数値を表す文字列。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> のスタイルが正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.UInt32.MinValue" /> 未満の数値か、<see cref="F:System.UInt32.MaxValue" /> を超える数値を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.System#IComparable#CompareTo(System.Object)">
      <summary>現在のインスタンスを同じ型の別のオブジェクトと比較し、現在のインスタンスの並べ替え順序での位置が、比較対象のオブジェクトと比べて前か、後か、または同じかを示す整数を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対順序を示す符号付き整数。 
戻り値 	説明 	
0 より小さい値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも前です。 	
0 	このインスタンスは、並べ替え順序で、<paramref name="value" /> と同じ位置に出現します。 	
0 を超える値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも後ろです。 または <paramref name="value" /> は null なので、</returns>
      <param name="value">対象のインスタンスと比較する対象のオブジェクト、または null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が <see cref="T:System.UInt32" /> オブジェクトではありません。</exception>
    </member>
    <member name="M:System.UInt32.ToString">
      <summary>このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
      <returns>0 から 9 までの一連の数字から構成され、符号または先行ゼロを含まない、このインスタンスの値の文字列形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.ToString(System.IFormatProvider)">
      <summary>このインスタンスの数値を、指定したカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
      <returns>0 から 9 までの一連の数字で構成され、符号または先行ゼロを含まない、このインスタンスの値の文字列形式。</returns>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.ToString(System.String)">
      <summary>このインスタンスの数値を、指定した書式を使用して、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="format">数値書式指定文字列。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> パラメーターが無効です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.ToString(System.String,System.IFormatProvider)">
      <summary>このインスタンスの数値を、指定した書式およびカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> および <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="format">数値書式指定文字列。</param>
      <param name="provider">このインスタンスに関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> パラメーターが無効です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)">
      <summary>指定したスタイルおよびカルチャ固有の書式による数値の文字列形式を、それと等価な 32 ビット符号なし整数に変換します。 戻り値は、変換が成功したか失敗したかを示します。</summary>
      <returns>
        <paramref name="s" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">変換する数値を表す文字列。 文字列は、<paramref name="style" /> パラメーターで指定されたスタイルを使用して解釈されます。</param>
      <param name="style">
        <paramref name="s" /> に許可されている書式を示す列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="result">変換が成功した場合、このメソッドが返されるときに、<paramref name="s" /> に格納された数値と等価の 32 ビット符号なし整数値を格納します。変換に失敗した場合は 0 を格納します。 <paramref name="s" /> パラメーターが null または <see cref="F:System.String.Empty" /> である、<paramref name="style" /> に準拠した形式ではない、または <see cref="F:System.UInt32.MinValue" /> 未満か <see cref="F:System.UInt32.MaxValue" />を超える数値を表している場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.UInt32@)">
      <summary>数値の文字列形式を、それと等価の 32 ビット符号なし整数に変換します。 戻り値は、変換が成功したか失敗したかを示します。</summary>
      <returns>
        <paramref name="s" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">変換する数値を表す文字列。</param>
      <param name="result">このメソッドから制御が返されたとき、変換に成功した場合は、<paramref name="s" /> に格納された数値と等価な 32 ビット符号なし整数値が格納されます。変換に失敗した場合は 0 が格納されます。 <paramref name="s" /> パラメーターが null または <see cref="F:System.String.Empty" /> であるか、正しい形式ではない、または <see cref="F:System.UInt32.MinValue" /> 未満か <see cref="F:System.UInt32.MaxValue" /> を超える数値を表している場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.UInt64">
      <summary>64 ビット符号なし整数を表します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.CompareTo(System.UInt64)">
      <summary>指定した 64 ビット符号なし整数とこのインスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。 
戻り値 	説明 	
0 より小さい値 	このインスタンスは、<paramref name="value" /> よりも小さくなっています。 	
0 	このインスタンスは <paramref name="value" /> と等価です。 	
0 を超える値 	このインスタンスは <paramref name="value" /> よりも大きくなっています。</returns>
      <param name="value">比較対象の符号なし整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt64.Equals(System.Object)">
      <summary>対象のインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> が <see cref="T:System.UInt64" /> のインスタンスで、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt64.Equals(System.UInt64)">
      <summary>対象のインスタンスが、指定した <see cref="T:System.UInt64" /> 値に等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> がこのインスタンスと同じ値を保持している場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較する <see cref="T:System.UInt64" /> 値。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt64.GetHashCode">
      <summary>対象のインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.UInt64.MaxValue">
      <summary>
        <see cref="T:System.UInt64" /> の最大有効値を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UInt64.MinValue">
      <summary>
        <see cref="T:System.UInt64" /> の最小有効値を表します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.Parse(System.String)">
      <summary>数値の文字列形式を、それと等価な 64 ビット符号なし整数に変換します。</summary>
      <returns>
        <paramref name="s" /> に格納されている数値と等しい 64 ビット符号なし整数。</returns>
      <param name="s">変換する数値を表す文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> パラメーターが null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> パラメーターが正しい書式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> パラメーターが <see cref="F:System.UInt64.MinValue" /> 未満の数値か、<see cref="F:System.UInt64.MaxValue" /> より大きい数値を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>指定したスタイルの数値の文字列形式を、それと等価な 64 ビット符号なし整数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定した数値と等しい 64 ビット符号なし整数。</returns>
      <param name="s">変換する数値を表す文字列。 文字列は、<paramref name="style" /> パラメーターで指定されたスタイルを使用して解釈されます。</param>
      <param name="style">
        <paramref name="s" /> に許可されている形式を指定する列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> パラメーターの書式が、<paramref name="style" /> に準拠した書式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> パラメーターが <see cref="F:System.UInt64.MinValue" /> 未満の数値か、<see cref="F:System.UInt64.MaxValue" /> より大きい数値を表しています。 または <paramref name="s" /> は 0 以外の小数部の桁を含んでいます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>指定したスタイルおよびカルチャ固有の書式による数値の文字列形式を、それと等価な 64 ビット符号なし整数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定した数値と等しい 64 ビット符号なし整数。</returns>
      <param name="s">変換する数値を表す文字列。 文字列は、<paramref name="style" /> パラメーターで指定されたスタイルを使用して解釈されます。</param>
      <param name="style">
        <paramref name="s" /> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> パラメーターの書式が、<paramref name="style" /> に準拠した書式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> パラメーターが <see cref="F:System.UInt64.MinValue" /> 未満の数値か、<see cref="F:System.UInt64.MaxValue" /> より大きい数値を表しています。 または <paramref name="s" /> は 0 以外の小数部の桁を含んでいます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.IFormatProvider)">
      <summary>指定したカルチャ固有の書式による数値の文字列形式を、それと等価な 64 ビット符号なし整数に変換します。</summary>
      <returns>
        <paramref name="s" /> で指定した数値と等しい 64 ビット符号なし整数。</returns>
      <param name="s">変換する数値を表す文字列。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> パラメーターが null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が適切なスタイルではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> パラメーターが <see cref="F:System.UInt64.MinValue" /> 未満の数値か、<see cref="F:System.UInt64.MaxValue" /> より大きい数値を表しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.System#IComparable#CompareTo(System.Object)">
      <summary>現在のインスタンスを同じ型の別のオブジェクトと比較し、現在のインスタンスの並べ替え順序での位置が、比較対象のオブジェクトと比べて前か、後か、または同じかを示す整数を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対順序を示す符号付き整数。 
戻り値 	説明 	
0 より小さい値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも前です。 	
0 	このインスタンスは、並べ替え順序で、<paramref name="value" /> と同じ位置に出現します。 	
0 を超える値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも後ろです。 または <paramref name="value" /> は null なので、</returns>
      <param name="value">対象のインスタンスと比較する対象のオブジェクト、または null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が <see cref="T:System.UInt64" /> オブジェクトではありません。</exception>
    </member>
    <member name="M:System.UInt64.ToString">
      <summary>このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
      <returns>0 から 9 までの一連の数字から構成され、符号または先行ゼロを含まない、このインスタンスの値の文字列形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.ToString(System.IFormatProvider)">
      <summary>このインスタンスの数値を、指定したカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.ToString(System.String)">
      <summary>このインスタンスの数値を、指定した書式を使用して、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="format">数値書式指定文字列。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> パラメーターが無効です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.ToString(System.String,System.IFormatProvider)">
      <summary>このインスタンスの数値を、指定した書式およびカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
      <returns>
        <paramref name="format" /> および <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</returns>
      <param name="format">数値書式指定文字列。</param>
      <param name="provider">このインスタンスに関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> パラメーターが無効です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64@)">
      <summary>指定したスタイルおよびカルチャ固有の書式による数値の文字列形式を、それと等価な 64 ビット符号なし整数に変換します。 戻り値は、変換が成功したか失敗したかを示します。</summary>
      <returns>
        <paramref name="s" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">変換する数値を表す文字列。 文字列は、<paramref name="style" /> パラメーターで指定されたスタイルを使用して解釈されます。</param>
      <param name="style">
        <paramref name="s" /> に許可されている書式を示す列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
      <param name="provider">
        <paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="result">変換が成功した場合、このメソッドが返されるときに、<paramref name="s" /> に格納された数値と等価の 64 ビット符号なし整数値を格納します。変換に失敗した場合は 0 を格納します。 <paramref name="s" /> パラメーターが null または <see cref="F:System.String.Empty" /> であるか、<paramref name="style" /> に準拠した形式ではない、または <see cref="F:System.UInt64.MinValue" /> より小さいか <see cref="F:System.UInt64.MaxValue" /> より大きい数値を表している場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。 または <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.UInt64@)">
      <summary>数値の文字列形式を、それと等価の 64 ビット符号なし整数に変換します。 戻り値は、変換が成功したか失敗したかを示します。</summary>
      <returns>
        <paramref name="s" /> が正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="s">変換する数値を表す文字列。</param>
      <param name="result">このメソッドから制御が戻るときに、変換に成功した場合は、<paramref name="s" /> に格納されている数値と等価な 64 ビット符号なし整数値が格納されます。変換に失敗した場合は 0 が格納されます。 <paramref name="s" /> パラメーターが null または <see cref="F:System.String.Empty" /> であるか、正しい形式ではない、または <see cref="F:System.UInt64.MinValue" /> より小さいか <see cref="F:System.UInt64.MaxValue" /> より大きい数値を表している場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.UIntPtr">
      <summary>ポインターまたはハンドルを表すときに使用されるプラットフォーム固有の型。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt32)">
      <summary>指定した 32 ビットのポインターまたはハンドルを使用して、<see cref="T:System.UIntPtr" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="value">32 ビット符号なし整数に含まれているポインターまたはハンドル。</param>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt64)">
      <summary>指定した 64 ビットのポインターまたはハンドルを使用して、<see cref="T:System.UIntPtr" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">64 ビット符号なし整数に含まれているポインターまたはハンドル。</param>
      <exception cref="T:System.OverflowException">32 ビット プラットフォームでは、<paramref name="value" /> が大きすぎて、<see cref="T:System.UIntPtr" /> として表すことができません。</exception>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.Void*)">
      <summary>指定されていない型へのポインターを使用して、<see cref="T:System.UIntPtr" /> の新しいインスタンスを初期化します。</summary>
      <param name="value">指定されていない型を指すポインター。</param>
    </member>
    <member name="M:System.UIntPtr.Add(System.UIntPtr,System.Int32)">
      <summary>符号なしポインターの値にオフセットを加算します。</summary>
      <returns>
        <paramref name="pointer" /> への <paramref name="offset" /> の加算が反映された新しい符号なしポインター。</returns>
      <param name="pointer">オフセットを加算する符号なしポインター。</param>
      <param name="offset">加算するオフセット。</param>
    </member>
    <member name="M:System.UIntPtr.Equals(System.Object)">
      <summary>対象のインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="obj" /> が <see cref="T:System.UIntPtr" /> のインスタンスで、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト、または null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UIntPtr.GetHashCode">
      <summary>対象のインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Addition(System.UIntPtr,System.Int32)">
      <summary>符号なしポインターの値にオフセットを加算します。</summary>
      <returns>
        <paramref name="pointer" /> への <paramref name="offset" /> の加算が反映された新しい符号なしポインター。</returns>
      <param name="pointer">オフセットを加算する符号なしポインター。</param>
      <param name="offset">加算するオフセット。</param>
    </member>
    <member name="M:System.UIntPtr.op_Equality(System.UIntPtr,System.UIntPtr)">
      <summary>
        <see cref="T:System.UIntPtr" /> の 2 つの指定したインスタンスが等しいかどうかを判断します。</summary>
      <returns>
        <paramref name="value1" /> が <paramref name="value2" /> に等しい場合は true。それ以外の場合は false。</returns>
      <param name="value1">比較する最初のポインターまたはハンドル。</param>
      <param name="value2">比較する 2 番目のポインターまたはハンドル。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt32)~System.UIntPtr">
      <summary>32 ビット符号なし整数の値を <see cref="T:System.UIntPtr" /> に変換します。</summary>
      <returns>
        <paramref name="value" /> に初期化される <see cref="T:System.UIntPtr" /> の新しいインスタンス。</returns>
      <param name="value">32 ビット符号なし整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt64)~System.UIntPtr">
      <summary>64 ビット符号なし整数の値を <see cref="T:System.UIntPtr" /> に変換します。</summary>
      <returns>
        <paramref name="value" /> に初期化される <see cref="T:System.UIntPtr" /> の新しいインスタンス。</returns>
      <param name="value">64 ビット符号なし整数。</param>
      <exception cref="T:System.OverflowException">32 ビット プラットフォームでは、<paramref name="value" /> が大きすぎて、<see cref="T:System.UIntPtr" /> として表すことができません。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt64">
      <summary>指定した <see cref="T:System.UIntPtr" /> の値を 64 ビット符号なし整数に変換します。</summary>
      <returns>
        <paramref name="value" /> の内容。</returns>
      <param name="value">変換するポインターまたはハンドル。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.Void*">
      <summary>指定した <see cref="T:System.UIntPtr" /> の値を指定されていない型のポインターに変換します。</summary>
      <returns>
        <paramref name="value" /> の内容。</returns>
      <param name="value">変換するポインターまたはハンドル。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt32">
      <summary>指定した <see cref="T:System.UIntPtr" /> の値を 32 ビット符号なし整数に変換します。</summary>
      <returns>
        <paramref name="value" /> の内容。</returns>
      <param name="value">変換するポインターまたはハンドル。</param>
      <exception cref="T:System.OverflowException">64 ビット プラットフォームでは、<paramref name="value" /> の値が大きすぎて 32 ビット符号なし整数として表すことができません。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.Void*)~System.UIntPtr">
      <summary>指定されていない型の指定のポインターを <see cref="T:System.UIntPtr" /> に変換します。</summary>
      <returns>
        <paramref name="value" /> に初期化される <see cref="T:System.UIntPtr" /> の新しいインスタンス。</returns>
      <param name="value">指定されていない型を指すポインター。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Inequality(System.UIntPtr,System.UIntPtr)">
      <summary>
        <see cref="T:System.UIntPtr" /> の 2 つの指定したインスタンスが等しくないかどうかを判断します。</summary>
      <returns>
        <paramref name="value1" /> が <paramref name="value2" /> と等しくない場合は true。それ以外の場合は false。</returns>
      <param name="value1">比較する最初のポインターまたはハンドル。</param>
      <param name="value2">比較する 2 番目のポインターまたはハンドル。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Subtraction(System.UIntPtr,System.Int32)">
      <summary>符号なしポインターの値からオフセットを減算します。</summary>
      <returns>
        <paramref name="pointer" /> からの <paramref name="offset" /> の減算が反映された新しい符号なしポインター。</returns>
      <param name="pointer">オフセットを減算する符号なしポインター。</param>
      <param name="offset">減算するオフセット。</param>
    </member>
    <member name="P:System.UIntPtr.Size">
      <summary>このインスタンスのサイズを取得します。</summary>
      <returns>このプラットフォームでのポインターまたはハンドルのサイズ (バイト)。 このプロパティの値は 32 ビット プラットフォームでは 4、64 ビット プラットフォームでは 8 です。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UIntPtr.Subtract(System.UIntPtr,System.Int32)">
      <summary>符号なしポインターの値からオフセットを減算します。</summary>
      <returns>
        <paramref name="pointer" /> からの <paramref name="offset" /> の減算が反映された新しい符号なしポインター。</returns>
      <param name="pointer">オフセットを減算する符号なしポインター。</param>
      <param name="offset">減算するオフセット。</param>
    </member>
    <member name="M:System.UIntPtr.ToPointer">
      <summary>このインスタンスの値を指定されていない型のポインターに変換します。</summary>
      <returns>
        <see cref="T:System.Void" /> のポインター。つまり指定されていない型のデータが格納されているメモリのポインター。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UIntPtr.ToString">
      <summary>このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
      <returns>このインスタンスの値の文字列形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UIntPtr.ToUInt32">
      <summary>このインスタンスの値を 32 ビット符号なし整数に変換します。</summary>
      <returns>このインスタンスの値と等価な 32 ビット符号なし整数。</returns>
      <exception cref="T:System.OverflowException">64 ビット プラットフォームでは、このインスタンスの値が大きすぎて 32 ビット符号なし整数として表すことができません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UIntPtr.ToUInt64">
      <summary>このインスタンスの値を 64 ビット符号なし整数に変換します。</summary>
      <returns>このインスタンスの値と等価な 64 ビット符号なし整数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UIntPtr.Zero">
      <summary>0 に初期化されたポインターまたはハンドルを表す読み取り専用フィールド。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.UnauthorizedAccessException">
      <summary>オペレーティング システムが I/O エラーまたは特定の種類のセキュリティ エラーのためにアクセスを拒否する場合、スローされる例外。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor">
      <summary>
        <see cref="T:System.UnauthorizedAccessException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.UnauthorizedAccessException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.UnauthorizedAccessException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="inner">現在の例外の原因である例外。 <paramref name="inner" /> パラメーターが null 参照 (Visual Basic の場合は Nothing) でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Uri">
      <summary>URI (Uniform Resource Identifier) のオブジェクト表現を可能にし、URI の一部へ簡単にアクセスできるようにします。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.#ctor(System.String)">
      <summary>指定した URI を使用して、<see cref="T:System.Uri" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="uriString">URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> は null です。</exception>
      <exception cref="T:System.UriFormatException">Windows ストア アプリのための .NET または汎用性のあるクラス ライブラリで、基本クラスの例外 <see cref="T:System.FormatException" /> を代わりにキャッチします。 <paramref name="uriString" /> が空です。 または <paramref name="uriString" /> に指定されたスキームの形式が誤っています。 「<see cref="M:System.Uri.CheckSchemeName(System.String)" />」を参照してください。 または <paramref name="uriString" /> に含まれているスラッシュが多すぎます。 または <paramref name="uriString" /> に指定されたパスワードが無効です。 または <paramref name="uriString" /> に指定されたホスト名が無効です。 または <paramref name="uriString" /> に指定されたファイル名が無効です。 または <paramref name="uriString" /> に指定されたユーザー名が無効です。 または <paramref name="uriString" /> に指定するホスト名または権限名の末尾には、円記号を使用できません。 または <paramref name="uriString" /> に指定されたポート番号が無効であるか、解析できません。 または <paramref name="uriString" /> の長さが 65,519 文字を超えています。 または <paramref name="uriString" /> に指定されたスキームの長さが 1023 文字を超えています。 または <paramref name="uriString" /> に無効な文字シーケンスが含まれています。 または <paramref name="uriString" /> に指定する MS-DOS パスは、c:\\ で始める必要があります。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String,System.UriKind)">
      <summary>指定した URI を使用して、<see cref="T:System.Uri" /> クラスの新しいインスタンスを初期化します。 このコンストラクターでは、URI を相対 URI、絶対 URI、または不確定のいずれかに指定できます。</summary>
      <param name="uriString">
        <see cref="T:System.Uri" /> インスタンスで表されるリソースを表す文字列。</param>
      <param name="uriKind">URI 文字列が相対 URI、絶対 URI、または不確定のいずれであるかを指定します。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="uriKind" /> が無効です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> は null です。</exception>
      <exception cref="T:System.UriFormatException">Windows ストア アプリのための .NET または汎用性のあるクラス ライブラリで、基本クラスの例外 <see cref="T:System.FormatException" /> を代わりにキャッチします。 <paramref name="uriString" /> に相対 URI が格納されており、<paramref name="uriKind" /> が <see cref="F:System.UriKind.Absolute" /> です。 または <paramref name="uriString" /> に絶対 URI が格納されており、<paramref name="uriKind" /> が <see cref="F:System.UriKind.Relative" /> です。 または <paramref name="uriString" /> が空です。 または <paramref name="uriString" /> に指定されたスキームの形式が誤っています。 「<see cref="M:System.Uri.CheckSchemeName(System.String)" />」を参照してください。 または <paramref name="uriString" /> に含まれているスラッシュが多すぎます。 または <paramref name="uriString" /> に指定されたパスワードが無効です。 または <paramref name="uriString" /> に指定されたホスト名が無効です。 または <paramref name="uriString" /> に指定されたファイル名が無効です。 または <paramref name="uriString" /> に指定されたユーザー名が無効です。 または <paramref name="uriString" /> に指定するホスト名または権限名の末尾には、円記号を使用できません。 または <paramref name="uriString" /> に指定されたポート番号が無効であるか、解析できません。 または <paramref name="uriString" /> の長さが 65,519 文字を超えています。 または <paramref name="uriString" /> に指定されたスキームの長さが 1023 文字を超えています。 または <paramref name="uriString" /> に無効な文字シーケンスが含まれています。 または <paramref name="uriString" /> に指定する MS-DOS パスは、c:\\ で始める必要があります。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String)">
      <summary>指定したベース URI と相対 URI 文字列に基づいて、<see cref="T:System.Uri" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="baseUri">ベース URI。</param>
      <param name="relativeUri">ベース URI に追加する相対 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> は、絶対 <see cref="T:System.Uri" /> のインスタンスではありません。</exception>
      <exception cref="T:System.UriFormatException">Windows ストア アプリのための .NET または汎用性のあるクラス ライブラリで、基本クラスの例外 <see cref="T:System.FormatException" /> を代わりにキャッチします。 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI が空であるか、または空白文字だけが含まれています。 または <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたスキームが無効です。 または <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI のスラッシュが多すぎます。 または <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたパスワードが無効です。 または <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたホスト名が無効です。 または <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたファイル名が無効です。 または <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたユーザー名が無効です。 または <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI で指定するホスト名または権限名の末尾には、円記号を使用できません。 または <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたポート番号が無効であるか、または解析できません。 または <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI の長さが 65519 文字を超えています。 または <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたスキームの長さが 1023 文字を超えています。 または <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に無効な文字シーケンスが含まれています。 または <paramref name="uriString" /> に指定する MS-DOS パスは、c:\\ で始める必要があります。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.Uri)">
      <summary>指定したベース <see cref="T:System.Uri" /> のインスタンスと相対 <see cref="T:System.Uri" /> のインスタンスの組み合わせに基づいて、<see cref="T:System.Uri" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="baseUri">新しい <see cref="T:System.Uri" /> インスタンスのベースとなる絶対 <see cref="T:System.Uri" />。</param>
      <param name="relativeUri">
        <paramref name="baseUri" /> と組み合わせる相対 <see cref="T:System.Uri" /> インスタンス。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="baseUri" /> は、絶対 <see cref="T:System.Uri" /> のインスタンスではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> は、絶対 <see cref="T:System.Uri" /> のインスタンスではありません。</exception>
      <exception cref="T:System.UriFormatException">Windows ストア アプリのための .NET または汎用性のあるクラス ライブラリで、基本クラスの例外 <see cref="T:System.FormatException" /> を代わりにキャッチします。 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI が空であるか、または空白文字だけが含まれています。 または <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたスキームが無効です。 または <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI のスラッシュが多すぎます。 または <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたパスワードが無効です。 または <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたホスト名が無効です。 または <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたファイル名が無効です。 または <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたユーザー名が無効です。 または <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI で指定するホスト名または権限名の末尾には、円記号を使用できません。 または <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたポート番号が無効であるか、または解析できません。 または <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI の長さが 65519 文字を超えています。 または <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたスキームの長さが 1023 文字を超えています。 または <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に無効な文字シーケンスが含まれています。 または <paramref name="uriString" /> に指定する MS-DOS パスは、c:\\ で始める必要があります。</exception>
    </member>
    <member name="P:System.Uri.AbsolutePath">
      <summary>URI の絶対パスを取得します。</summary>
      <returns>リソースの絶対パスを含む <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.AbsoluteUri">
      <summary>絶対 URI を取得します。</summary>
      <returns>URI 全体を含む <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Authority">
      <summary>サーバーの DNS (Domain Name System) ホスト名または IP アドレスと、ポート番号を取得します。</summary>
      <returns>このインスタンスで表される URI の権限構成要素を格納している <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.CheckHostName(System.String)">
      <summary>指定したホスト名が有効な DNS 名であるかどうかを判断します。</summary>
      <returns>ホスト名の型を示す <see cref="T:System.UriHostNameType" />。 ホスト名の型を判断できない場合、またはホスト名が null か長さ 0 の文字列の場合、このメソッドは <see cref="F:System.UriHostNameType.Unknown" /> を返します。</returns>
      <param name="name">検証対象のホスト名。 値は、IPv4 アドレス、IPv6 アドレス、またはインターネット ホスト名です。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.CheckSchemeName(System.String)">
      <summary>指定したスキーム名が有効かどうかを判断します。</summary>
      <returns>スキーム名が有効な場合は <see cref="T:System.Boolean" /> 値が true。それ以外の場合は false。</returns>
      <param name="schemeName">検証対象のスキーム名。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.Compare(System.Uri,System.Uri,System.UriComponents,System.UriFormat,System.StringComparison)">
      <summary>指定した比較規則を使用して、2 つの URI の指定部分を比較します。</summary>
      <returns>比較する <see cref="T:System.Uri" /> 構成要素の構文上の関係を示す <see cref="T:System.Int32" /> 値。 
値 	説明 	
0 より小さい値 	<paramref name="uri1" /> が <paramref name="uri2" /> より小さい。 	
0 	<paramref name="uri1" /> と <paramref name="uri2" /> が等しい。 	
0 を超える値 	<paramref name="uri1" /> が <paramref name="uri2" /> より大きくなっています。</returns>
      <param name="uri1">最初の <see cref="T:System.Uri" />。</param>
      <param name="uri2">第 2 の <see cref="T:System.Uri" />。</param>
      <param name="partsToCompare">比較する <paramref name="uri1" /> と <paramref name="uri2" /> の部分を指定する <see cref="T:System.UriComponents" /> 値のビットごとの組み合わせ。</param>
      <param name="compareFormat">URI の構成要素の比較時に使用する文字エスケープを指定する <see cref="T:System.UriFormat" /> 値の 1 つ。</param>
      <param name="comparisonType">
        <see cref="T:System.StringComparison" /> 値の 1 つ。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> が有効な <see cref="T:System.StringComparison" /> 値ではありません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Uri.DnsSafeHost">
      <summary>DNS の解決に安全に使用できるエスケープ解除されたホスト名を取得します。</summary>
      <returns>DNS の解決に適した URI のエスケープ解除されたホスト部分を格納している <see cref="T:System.String" />。または、エスケープ解除された元のホスト文字列が解決に適している場合はその文字列。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.Equals(System.Object)">
      <summary>2 つの <see cref="T:System.Uri" /> インスタンスを比較し、相互に等価かどうかを判断します。</summary>
      <returns>2 つのインスタンスが同じ URI を表す場合は、<see cref="T:System.Boolean" /> 値が true。それ以外の場合は false。</returns>
      <param name="comparand">現在のインスタンスと比較する <see cref="T:System.Uri" /> インスタンスまたは URI 識別子。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Uri.EscapeDataString(System.String)">
      <summary>文字列をエスケープ表現に変換します。</summary>
      <returns>
        <paramref name="stringToEscape" /> のエスケープ表現を格納する <see cref="T:System.String" />。</returns>
      <param name="stringToEscape">エスケープする文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> は null です。</exception>
      <exception cref="T:System.UriFormatException">Windows ストア アプリのための .NET または汎用性のあるクラス ライブラリで、基本クラスの例外 <see cref="T:System.FormatException" /> を代わりにキャッチします。 <paramref name="stringToEscape" /> の長さが 32766 文字を超えています。</exception>
    </member>
    <member name="M:System.Uri.EscapeUriString(System.String)">
      <summary>URI 文字列をエスケープ表現に変換します。</summary>
      <returns>
        <paramref name="stringToEscape" /> のエスケープ表現を格納する <see cref="T:System.String" />。</returns>
      <param name="stringToEscape">エスケープする文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> は null です。</exception>
      <exception cref="T:System.UriFormatException">Windows ストア アプリのための .NET または汎用性のあるクラス ライブラリで、基本クラスの例外 <see cref="T:System.FormatException" /> を代わりにキャッチします。 <paramref name="stringToEscape" /> の長さが 32766 文字を超えています。</exception>
    </member>
    <member name="P:System.Uri.Fragment">
      <summary>エスケープ URI フラグメントを取得します。</summary>
      <returns>URI フラグメント情報を含む <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.GetComponents(System.UriComponents,System.UriFormat)">
      <summary>指定した特殊文字エスケープを使用して、現在のインスタンスの指定した構成要素を取得します。</summary>
      <returns>構成要素を格納した <see cref="T:System.String" />。</returns>
      <param name="components">現在のインスタンスの中で呼び出し元に返す部分を指定する <see cref="T:System.UriComponents" /> 値のビットごとの組み合わせ。</param>
      <param name="format">特殊文字のエスケープ方法を制御する <see cref="T:System.UriFormat" /> の値の 1 つ。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="uriComponents" /> が、有効な <see cref="T:System.UriComponents" /> 値の組み合わせではありません。</exception>
      <exception cref="T:System.InvalidOperationException">現在の <see cref="T:System.Uri" /> が絶対 URI ではありません。 相対 URI は、このメソッドでは使用できません。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.GetHashCode">
      <summary>URI を処理するためのハッシュ コードを取得します。</summary>
      <returns>この URI に対して作成されたハッシュ コードを格納している <see cref="T:System.Int32" />。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Host">
      <summary>このインスタンスのホスト構成要素を取得します。</summary>
      <returns>ホスト名を含む <see cref="T:System.String" />。 通常は、サーバーの DNS ホスト名または IP アドレスです。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.HostNameType">
      <summary>URI に指定したホスト名の型を取得します。</summary>
      <returns>
        <see cref="T:System.UriHostNameType" /> 列挙体のメンバー。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IsAbsoluteUri">
      <summary>
        <see cref="T:System.Uri" /> インスタンスが絶対インスタンスであるかどうかの値を取得します。</summary>
      <returns>
        <see cref="T:System.Uri" /> インスタンスが絶対インスタンスである場合は <see cref="T:System.Boolean" /> 値が true、それ以外の場合は false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.IsBaseOf(System.Uri)">
      <summary>現在の <see cref="T:System.Uri" /> インスタンスが、指定した <see cref="T:System.Uri" /> のベースかどうかを判断します。</summary>
      <returns>現在の <see cref="T:System.Uri" /> インスタンスが <paramref name="uri" /> のベースである場合は true。それ以外の場合は false。</returns>
      <param name="uri">テスト対象に指定する <see cref="T:System.Uri" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> は null です。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IsDefaultPort">
      <summary>URI のポート値が、このスキームの既定のポート値かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="P:System.Uri.Port" /> プロパティの値がこのスキームの既定ポートの場合は <see cref="T:System.Boolean" /> 値が true。それ以外の場合は false。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IsFile">
      <summary>指定した <see cref="T:System.Uri" /> がファイル URI かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Uri" /> がファイル URI の場合は <see cref="T:System.Boolean" /> 値が true。それ以外の場合は false。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IsLoopback">
      <summary>指定した <see cref="T:System.Uri" /> がローカル ホストを参照するかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Uri" /> がローカルホストを参照する場合は <see cref="T:System.Boolean" /> 値が true。それ以外の場合は false。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IsUnc">
      <summary>指定した <see cref="T:System.Uri" /> が UNC (Universal Naming Convention) パスかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Uri" /> が UNC パスの場合は <see cref="T:System.Boolean" /> 値が true。それ以外の場合は false。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.IsWellFormedOriginalString">
      <summary>この <see cref="T:System.Uri" /> の作成に使用された文字列が正しい形式かどうか、およびこれ以上エスケープする必要がないかどうかを示します。</summary>
      <returns>文字列が整形式である場合は true、それ以外の場合は false である <see cref="T:System.Boolean" /> 値。</returns>
    </member>
    <member name="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)">
      <summary>文字列を使用して URI を作成する際に、文字列の形式が正しいかどうかを示し、文字列をそれ以上エスケープする必要がないことを確認します。</summary>
      <returns>文字列が整形式である場合は true 、それ以外の場合は false である <see cref="T:System.Boolean" /> 値。</returns>
      <param name="uriString">
        <see cref="T:System.Uri" /> の構築に使用される文字列。</param>
      <param name="uriKind">
        <paramref name="uriString" /> 内の <see cref="T:System.Uri" /> の型。</param>
    </member>
    <member name="P:System.Uri.LocalPath">
      <summary>ローカル オペレーティング システムでのファイル名表現を取得します。</summary>
      <returns>ローカル オペレーティング システムでのファイル名表現を含む <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.MakeRelativeUri(System.Uri)">
      <summary>2 つの <see cref="T:System.Uri" /> インスタンスの相違点を判断します。</summary>
      <returns>この URI インスタンスと <paramref name="uri" /> のホスト名とスキームが同じ場合、現在の URI インスタンスに追加したときに <paramref name="uri" /> を作成する相対 <see cref="T:System.Uri" /> がこのメソッドから返されます。 ホスト名またはスキームが異なる場合は、<paramref name="uri" /> パラメーターを表す <see cref="T:System.Uri" /> がこのメソッドから返されます。</returns>
      <param name="uri">現在の URI と比較する URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> は null です。</exception>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
    </member>
    <member name="M:System.Uri.op_Equality(System.Uri,System.Uri)">
      <summary>2 つの <see cref="T:System.Uri" /> インスタンスの値が同一かどうかを判断します。</summary>
      <returns>
        <see cref="T:System.Uri" /> の各インスタンスが等しい場合は <see cref="T:System.Boolean" /> 値が true。それ以外の場合は false。</returns>
      <param name="uri1">
        <paramref name="uri2" /> と比較する <see cref="T:System.Uri" /> インスタンス。</param>
      <param name="uri2">
        <paramref name="uri1" /> と比較する <see cref="T:System.Uri" /> インスタンス。</param>
      <filterpriority>3</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.op_Inequality(System.Uri,System.Uri)">
      <summary>2 つの <see cref="T:System.Uri" /> インスタンスの値が同一でないかどうかを判断します。</summary>
      <returns>2 つの <see cref="T:System.Uri" /> インスタンスが等しくない場合は <see cref="T:System.Boolean" /> 値が true。それ以外の場合は false。 どちらかのパラメーターが null の場合、このメソッドは true を返します。</returns>
      <param name="uri1">
        <paramref name="uri2" /> と比較する <see cref="T:System.Uri" /> インスタンス。</param>
      <param name="uri2">
        <paramref name="uri1" /> と比較する <see cref="T:System.Uri" /> インスタンス。</param>
      <filterpriority>3</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.OriginalString">
      <summary>
        <see cref="T:System.Uri" /> コンストラクターに渡された元の URI 文字列を取得します。</summary>
      <returns>このインスタンスの作成時に指定した URI 自体を含む <see cref="T:System.String" />。それ以外の場合は <see cref="F:System.String.Empty" />。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.PathAndQuery">
      <summary>
        <see cref="P:System.Uri.AbsolutePath" /> プロパティと <see cref="P:System.Uri.Query" /> プロパティを疑問符 (?) で区切った形式で取得します。</summary>
      <returns>
        <see cref="P:System.Uri.AbsolutePath" /> プロパティと <see cref="P:System.Uri.Query" /> プロパティが疑問符 (?) で区切られた形式で含まれている <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Port">
      <summary>この URI のポート番号を取得します。</summary>
      <returns>この URI のポート番号を格納している <see cref="T:System.Int32" /> 値。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Query">
      <summary>指定した URI に含まれているクエリ情報を取得します。</summary>
      <returns>指定した URI のクエリ情報を含む <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Scheme">
      <summary>この URI のスキーム名を取得します。</summary>
      <returns>この URI のスキームを含み、小文字に変換された <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Segments">
      <summary>指定した URI を構成するパス セグメントを格納している配列を取得します。</summary>
      <returns>指定した URI を構成するパス セグメントを格納している <see cref="T:System.String" /> 配列。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.ToString">
      <summary>指定した <see cref="T:System.Uri" /> インスタンスの正規文字列表現を取得します。</summary>
      <returns>エスケープ解除された正規形式の <see cref="T:System.Uri" /> インスタンスを格納している <see cref="T:System.String" /> インスタンス。 #、?、および % 以外のすべての文字は、エスケープ解除されます。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.TryCreate(System.String,System.UriKind,System.Uri@)">
      <summary>指定した <see cref="T:System.String" /> インスタンスと <see cref="T:System.UriKind" /> を使用して、新しい <see cref="T:System.Uri" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Uri" /> が正常に作成された場合は <see cref="T:System.Boolean" /> 値が true。それ以外の場合は false。</returns>
      <param name="uriString">
        <see cref="T:System.Uri" /> を表す <see cref="T:System.String" />。</param>
      <param name="uriKind">URI の種類。</param>
      <param name="result">このメソッドから制御が戻るときに、作成された <see cref="T:System.Uri" /> を格納します。</param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.String,System.Uri@)">
      <summary>指定したベース <see cref="T:System.Uri" /> および相対 <see cref="T:System.String" /> インスタンスを使用して、新しい Uri を作成します。</summary>
      <returns>
        <see cref="T:System.Uri" /> が正常に作成された場合は <see cref="T:System.Boolean" /> 値が true。それ以外の場合は false。</returns>
      <param name="baseUri">ベース <see cref="T:System.Uri" />。</param>
      <param name="relativeUri">ベース <see cref="T:System.Uri" /> に追加する <see cref="T:System.String" /> として表される相対 <see cref="T:System.Uri" />。</param>
      <param name="result">このメソッドから制御が戻るときに、<paramref name="baseUri" /> および <paramref name="relativeUri" /> から作成される <see cref="T:System.Uri" /> を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.Uri,System.Uri@)">
      <summary>指定したベースおよび相対 <see cref="T:System.Uri" /> のインスタンスを使用して、新しい <see cref="T:System.Uri" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Uri" /> が正常に作成された場合は <see cref="T:System.Boolean" /> 値が true。それ以外の場合は false。</returns>
      <param name="baseUri">ベース <see cref="T:System.Uri" />。</param>
      <param name="relativeUri">ベース <see cref="T:System.Uri" /> に追加する相対 <see cref="T:System.Uri" />。</param>
      <param name="result">このメソッドから制御が戻るときに、<paramref name="baseUri" /> および <paramref name="relativeUri" /> から作成される <see cref="T:System.Uri" /> を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> は null です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.UnescapeDataString(System.String)">
      <summary>文字列をエスケープ解除された表現に変換します。</summary>
      <returns>
        <paramref name="stringToUnescape" /> のエスケープ解除された表現を格納する <see cref="T:System.String" />。</returns>
      <param name="stringToUnescape">エスケープ解除する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToUnescape" /> は null です。</exception>
    </member>
    <member name="P:System.Uri.UserEscaped">
      <summary>
        <see cref="T:System.Uri" /> インスタンスの作成前に、URI 文字列が完全にエスケープされたことを示します。</summary>
      <returns>
        <see cref="T:System.Uri" /> インスタンスの作成時に <paramref name="dontEscape" /> パラメーターが true に設定されている場合は <see cref="T:System.Boolean" /> 値が true。それ以外の場合は false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Uri.UserInfo">
      <summary>指定した URI に関連付けられているユーザー名、パスワードなどのユーザー固有の情報を取得します。</summary>
      <returns>URI に関連付けられたユーザー情報を格納する <see cref="T:System.String" />。 戻り値には、URI のユーザー情報部分の区切り記号として予約されている '@' 文字が含まれません。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.UriComponents">
      <summary>
        <see cref="T:System.Uri" /> の各部分を指定します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UriComponents.AbsoluteUri">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.UserInfo" />、<see cref="P:System.Uri.Host" />、<see cref="P:System.Uri.Port" />、<see cref="P:System.Uri.LocalPath" />、<see cref="P:System.Uri.Query" />、および <see cref="P:System.Uri.Fragment" /> の各データ。</summary>
    </member>
    <member name="F:System.UriComponents.Fragment">
      <summary>
        <see cref="P:System.Uri.Fragment" /> データ。</summary>
    </member>
    <member name="F:System.UriComponents.Host">
      <summary>
        <see cref="P:System.Uri.Host" /> データ。</summary>
    </member>
    <member name="F:System.UriComponents.HostAndPort">
      <summary>
        <see cref="P:System.Uri.Host" /> データおよび <see cref="P:System.Uri.Port" /> データ。 URI 内にポート データがなく、既定のポートが <see cref="P:System.Uri.Scheme" /> に割り当てられている場合、既定のポートが返されます。 既定のポートがない場合、-1 が返されます。</summary>
    </member>
    <member name="F:System.UriComponents.HttpRequestUrl">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.Host" />、<see cref="P:System.Uri.Port" />、<see cref="P:System.Uri.LocalPath" />、および <see cref="P:System.Uri.Query" /> の各データ。</summary>
    </member>
    <member name="F:System.UriComponents.KeepDelimiter">
      <summary>区切り記号を含めるように指定します。</summary>
    </member>
    <member name="F:System.UriComponents.NormalizedHost">
      <summary>
        <see cref="P:System.Uri.Host" /> の正規化形式。</summary>
    </member>
    <member name="F:System.UriComponents.Path">
      <summary>
        <see cref="P:System.Uri.LocalPath" /> データ。</summary>
    </member>
    <member name="F:System.UriComponents.PathAndQuery">
      <summary>
        <see cref="P:System.Uri.LocalPath" /> データおよび <see cref="P:System.Uri.Query" /> データ。 「<see cref="P:System.Uri.PathAndQuery" />」も参照してください。</summary>
    </member>
    <member name="F:System.UriComponents.Port">
      <summary>
        <see cref="P:System.Uri.Port" /> データ。</summary>
    </member>
    <member name="F:System.UriComponents.Query">
      <summary>
        <see cref="P:System.Uri.Query" /> データ。</summary>
    </member>
    <member name="F:System.UriComponents.Scheme">
      <summary>
        <see cref="P:System.Uri.Scheme" /> データ。</summary>
    </member>
    <member name="F:System.UriComponents.SchemeAndServer">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.Host" />、および <see cref="P:System.Uri.Port" /> の各データ。</summary>
    </member>
    <member name="F:System.UriComponents.SerializationInfoString">
      <summary>URI シリアライザーに必要な完全な <see cref="T:System.Uri" /> コンテキスト。 コンテキストには、IPv6 スコープが含まれます。</summary>
    </member>
    <member name="F:System.UriComponents.StrongAuthority">
      <summary>
        <see cref="P:System.Uri.UserInfo" />、<see cref="P:System.Uri.Host" />、および <see cref="P:System.Uri.Port" /> の各データ。 <see cref="T:System.Uri" /> 内にポート データがなく、既定のポートが <see cref="P:System.Uri.Scheme" /> に割り当てられている場合、既定のポートが返されます。 既定のポートがない場合、-1 が返されます。</summary>
    </member>
    <member name="F:System.UriComponents.StrongPort">
      <summary>
        <see cref="P:System.Uri.Port" /> データ。 <see cref="T:System.Uri" /> 内にポート データがなく、既定のポートが <see cref="P:System.Uri.Scheme" /> に割り当てられている場合、既定のポートが返されます。 既定のポートがない場合、-1 が返されます。</summary>
    </member>
    <member name="F:System.UriComponents.UserInfo">
      <summary>
        <see cref="P:System.Uri.UserInfo" /> データ。</summary>
    </member>
    <member name="T:System.UriFormat">
      <summary>URI 情報のエスケープ方法を制御します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UriFormat.SafeUnescaped">
      <summary>要求された URI コンポーネントで意味が予約されている文字は、エスケープされます。 その他は、すべてエスケープされません。 「解説」を参照してください。</summary>
    </member>
    <member name="F:System.UriFormat.Unescaped">
      <summary>エスケープは実行されません。</summary>
    </member>
    <member name="F:System.UriFormat.UriEscaped">
      <summary>RFC 2396 の規則に基づいて、エスケープが実行されます。</summary>
    </member>
    <member name="T:System.UriHostNameType">
      <summary>
        <see cref="M:System.Uri.CheckHostName(System.String)" /> メソッドのホスト名の型を定義します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.UriHostNameType.Basic">
      <summary>ホストは設定されましたが、型を決定できません。</summary>
    </member>
    <member name="F:System.UriHostNameType.Dns">
      <summary>ホスト名は、ドメイン名システム (DNS: Domain Name System) 形式のホスト名です。</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv4">
      <summary>ホスト名は、Internet Protocol (IP) Version 4 形式のホスト アドレスです。</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv6">
      <summary>ホスト名は、Internet Protocol (IP) Version 6 形式のホスト アドレスです。</summary>
    </member>
    <member name="F:System.UriHostNameType.Unknown">
      <summary>ホスト名の型が指定されていません。</summary>
    </member>
    <member name="T:System.UriKind">
      <summary>
        <see cref="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)" /> と <see cref="Overload:System.Uri.#ctor" /> のメソッドの <see cref="T:System.Uri" /> の種類を定義します。</summary>
    </member>
    <member name="F:System.UriKind.Absolute">
      <summary>この URI は、絶対 URI です。</summary>
    </member>
    <member name="F:System.UriKind.Relative">
      <summary>この URI は、相対 URI です。</summary>
    </member>
    <member name="F:System.UriKind.RelativeOrAbsolute">
      <summary>URI の種類は、不確定です。</summary>
    </member>
    <member name="T:System.ValueType">
      <summary>値型の基本クラスを提供します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ValueType.#ctor">
      <summary>
        <see cref="T:System.ValueType" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ValueType.Equals(System.Object)">
      <summary>このインスタンスと指定したオブジェクトが等しいかどうかを示します。</summary>
      <returns>
        <paramref name="obj" /> とこのインスタンスが同じ型で、同じ値を表している場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ValueType.GetHashCode">
      <summary>対象のインスタンスのハッシュ コードを返します。</summary>
      <returns>このインスタンスのハッシュ コードである 32 ビット符号付き整数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ValueType.ToString">
      <summary>このインスタンスの完全修飾型名を返します。</summary>
      <returns>完全修飾型名を格納している <see cref="T:System.String" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Version">
      <summary>アセンブリ、オペレーティング システム、または共通言語ランタイムのバージョン番号を表します。 このクラスは継承できません。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32)">
      <summary>メジャー値とマイナー値を指定して、<see cref="T:System.Version" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="major">メジャー バージョン番号。</param>
      <param name="minor">マイナー バージョン番号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" /> または <paramref name="minor" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>メジャー値、マイナー値、およびビルド値を指定して、<see cref="T:System.Version" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="major">メジャー バージョン番号。</param>
      <param name="minor">マイナー バージョン番号。</param>
      <param name="build">ビルド番号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" />、<paramref name="minor" />、または <paramref name="build" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>メジャー番号、マイナー番号、ビルド番号、およびリビジョン番号を指定して、<see cref="T:System.Version" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="major">メジャー バージョン番号。</param>
      <param name="minor">マイナー バージョン番号。</param>
      <param name="build">ビルド番号。</param>
      <param name="revision">リビジョン番号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" />、<paramref name="minor" />、<paramref name="build" />、または <paramref name="revision" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Version.#ctor(System.String)">
      <summary>指定した文字列を使用して、<see cref="T:System.Version" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="version">メジャー、マイナー、ビルド、リビジョンの各番号が、ピリオド文字 (.) によって区切られている文字列。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="version" /> の構成要素数が 2 よりも少ないか、または 4 よりも多くなっています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">メジャー、マイナー、ビルド、リビジョンの各構成要素が 0 よりも小さくなっています。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="version" /> の構成要素のうちの少なくとも 1 つが整数に解析されません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="version" /> の構成要素のうちの少なくとも 1 つが <see cref="F:System.Int32.MaxValue" /> より大きい値を示しています。</exception>
    </member>
    <member name="P:System.Version.Build">
      <summary>現在の <see cref="T:System.Version" /> オブジェクトのバージョン番号のビルド構成要素の値を取得します。</summary>
      <returns>ビルド番号。ビルド番号が未定義の場合は -1。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.CompareTo(System.Version)">
      <summary>指定した <see cref="T:System.Version" /> オブジェクトと現在の <see cref="T:System.Version" /> オブジェクトを比較し、これらの相対値を示す値を返します。</summary>
      <returns>2 つのオブジェクトの相対的な値を示す符号付き整数 (次の表を参照)。 
戻り値 	説明 	
0 より小さい値 	現在の <see cref="T:System.Version" /> オブジェクトは、<paramref name="value" /> より前のバージョンです。 	
0 	現在の <see cref="T:System.Version" /> オブジェクトは、<paramref name="value" /> と同じバージョンです。 	
0 を超える値 	現在の <see cref="T:System.Version" /> オブジェクトは、<paramref name="value" /> より後のバージョンです。 または <paramref name="value" /> は null です。</returns>
      <param name="value">現在の <see cref="T:System.Version" /> オブジェクトと比較する <see cref="T:System.Version" /> オブジェクト、または null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.Equals(System.Object)">
      <summary>指定されたオブジェクトと現在の <see cref="T:System.Version" /> オブジェクトが等しいかどうかを示す値を返します。</summary>
      <returns>現在の <see cref="T:System.Version" /> オブジェクトと <paramref name="obj" /> がどちらも <see cref="T:System.Version" /> オブジェクトであり、現在の <see cref="T:System.Version" /> オブジェクトのすべての構成要素が <paramref name="obj" /> オブジェクトの対応する構成要素に一致する場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在の <see cref="T:System.Version" /> オブジェクトと比較するオブジェクト、または null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.Equals(System.Version)">
      <summary>現在の <see cref="T:System.Version" /> オブジェクトと指定した <see cref="T:System.Version" /> オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
      <returns>現在の <see cref="T:System.Version" /> オブジェクトのすべての構成要素が <paramref name="obj" /> パラメーターの対応する構成要素に一致する場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在の <see cref="T:System.Version" /> オブジェクトと比較する <see cref="T:System.Version" /> オブジェクト、または null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.GetHashCode">
      <summary>現在の <see cref="T:System.Version" /> オブジェクトのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Version.Major">
      <summary>現在の <see cref="T:System.Version" /> オブジェクトのバージョン番号のメジャー構成要素の値を取得します。</summary>
      <returns>メジャー バージョン番号。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Version.MajorRevision">
      <summary>リビジョン番号の上位 16 ビットを取得します。</summary>
      <returns>16 ビット符号付き整数。</returns>
    </member>
    <member name="P:System.Version.Minor">
      <summary>現在の <see cref="T:System.Version" /> オブジェクトのバージョン番号のマイナー構成要素の値を取得します。</summary>
      <returns>マイナー バージョン番号。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Version.MinorRevision">
      <summary>リビジョン番号の下位 16 ビットを取得します。</summary>
      <returns>16 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Version.op_Equality(System.Version,System.Version)">
      <summary>指定した 2 つの <see cref="T:System.Version" /> オブジェクトが等しいかどうかを判断します。</summary>
      <returns>
        <paramref name="v1" /> が <paramref name="v2" /> に等しい場合は true。それ以外の場合は false。</returns>
      <param name="v1">最初の <see cref="T:System.Version" /> オブジェクト。</param>
      <param name="v2">2 番目の <see cref="T:System.Version" /> オブジェクト。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.op_GreaterThan(System.Version,System.Version)">
      <summary>最初に指定した <see cref="T:System.Version" /> オブジェクトが 2 番目に指定した <see cref="T:System.Version" /> オブジェクトよりも大きいかどうかを判断します。</summary>
      <returns>
        <paramref name="v1" /> が <paramref name="v2" /> より大きい場合は true。それ以外の場合は false。</returns>
      <param name="v1">最初の <see cref="T:System.Version" /> オブジェクト。</param>
      <param name="v2">2 番目の <see cref="T:System.Version" /> オブジェクト。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.op_GreaterThanOrEqual(System.Version,System.Version)">
      <summary>最初に指定した <see cref="T:System.Version" /> オブジェクトが 2 番目に指定した <see cref="T:System.Version" /> オブジェクト以上であるかどうかを判断します。</summary>
      <returns>
        <paramref name="v1" /> が <paramref name="v2" /> 以上の場合は true。それ以外の場合は false。</returns>
      <param name="v1">最初の <see cref="T:System.Version" /> オブジェクト。</param>
      <param name="v2">2 番目の <see cref="T:System.Version" /> オブジェクト。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.op_Inequality(System.Version,System.Version)">
      <summary>指定した 2 つの <see cref="T:System.Version" /> オブジェクトが等しくないかどうかを判断します。</summary>
      <returns>
        <paramref name="v1" /> が <paramref name="v2" /> と等しくない場合は true。それ以外の場合は false。</returns>
      <param name="v1">最初の <see cref="T:System.Version" /> オブジェクト。</param>
      <param name="v2">2 番目の <see cref="T:System.Version" /> オブジェクト。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.op_LessThan(System.Version,System.Version)">
      <summary>最初に指定した <see cref="T:System.Version" /> オブジェクトが 2 番目に指定した <see cref="T:System.Version" /> オブジェクトより小さいかどうかを判断します。</summary>
      <returns>
        <paramref name="v1" /> が <paramref name="v2" /> より小さい場合は true。それ以外の場合は false。</returns>
      <param name="v1">最初の <see cref="T:System.Version" /> オブジェクト。</param>
      <param name="v2">2 番目の <see cref="T:System.Version" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v1" /> は null です。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.op_LessThanOrEqual(System.Version,System.Version)">
      <summary>最初に指定した <see cref="T:System.Version" /> オブジェクトが 2 番目に指定した <see cref="T:System.Version" /> オブジェクト以下かどうかを判断します。</summary>
      <returns>
        <paramref name="v1" /> が <paramref name="v2" /> 以下の場合は true。それ以外の場合は false。</returns>
      <param name="v1">最初の <see cref="T:System.Version" /> オブジェクト。</param>
      <param name="v2">2 番目の <see cref="T:System.Version" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v1" /> は null です。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.Parse(System.String)">
      <summary>バージョン番号の文字列形式を等価の <see cref="T:System.Version" /> オブジェクトに変換します。</summary>
      <returns>
        <paramref name="input" /> パラメーターで指定されているバージョン番号と等価のオブジェクト。</returns>
      <param name="input">変換するバージョン番号を含んだ文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> のバージョン構成要素数が 2 未満であるか、4 を上回っています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="input" /> 内の少なくとも 1 つの構成要素が 0 未満です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 内の少なくとも 1 つの構成要素が整数ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> の構成要素のうちの少なくとも 1 つが <see cref="F:System.Int32.MaxValue" /> より大きい値を示しています。</exception>
    </member>
    <member name="P:System.Version.Revision">
      <summary>現在の <see cref="T:System.Version" /> オブジェクトのバージョン番号のリビジョン構成要素の値を取得します。</summary>
      <returns>リビジョン番号。リビジョン番号が未定義の場合は -1。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.System#IComparable#CompareTo(System.Object)">
      <summary>現在のインスタンスを同じ型の別のオブジェクトと比較し、現在のインスタンスの並べ替え順序での位置が、比較対象のオブジェクトと比べて前か、後か、または同じかを示す整数を返します。</summary>
      <returns>このインスタンスと <paramref name="value" /> の相対順序を示す符号付き整数。 
戻り値 	説明 	
0 より小さい値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも前です。 	
0 	このインスタンスは、並べ替え順序で、<paramref name="value" /> と同じ位置に出現します。 	
0 を超える値 	このインスタンスの位置が、並べ替え順序において <paramref name="value" /> よりも後ろです。 または <paramref name="value" /> は null です。</returns>
      <param name="version">対象のインスタンスと比較する対象のオブジェクト、または null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が <see cref="T:System.Version" /> オブジェクトではありません。</exception>
    </member>
    <member name="M:System.Version.ToString">
      <summary>現在の <see cref="T:System.Version" /> オブジェクトの値を、それと等価な <see cref="T:System.String" /> 形式に変換します。</summary>
      <returns>現在の <see cref="T:System.Version" /> オブジェクトの各構成要素 (メジャー、マイナー、ビルド、リビジョン) の値を、次に説明する書式で表した <see cref="T:System.String" /> 形式。 各構成要素はピリオド文字 (.) で区切ります。 角かっこ ("[" および "]") は、定義されていない場合は戻り値に現れない構成要素を示します。 major.minor[.build[.revision]] たとえば、コンストラクター Version(1,1) を使用して  <see cref="T:System.Version" /> オブジェクトを作成した場合は、文字列 "1.1" が返されます。 コンストラクター Version(1,3,4,2) を使用して <see cref="T:System.Version" /> オブジェクトを作成した場合は、文字列 "1.3.4.2" が返されます。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.ToString(System.Int32)">
      <summary>現在の <see cref="T:System.Version" /> オブジェクトの値を、それと等価な <see cref="T:System.String" /> 形式に変換します。 指定された数は、返される構成要素の数を示します。</summary>
      <returns>現在の <see cref="T:System.Version" /> オブジェクトの各構成要素 (メジャー、マイナー、ビルド、リビジョン) の値をピリオド文字 (.) で区切って表した <see cref="T:System.String" /> 形式。 <paramref name="fieldCount" /> パラメーターは、返される構成要素の数を決定します。 
fieldCount 	戻り値 	
0 	空の文字列 ("")。 	
1 	メジャー 	
2 	メジャー.マイナー 	
3 	メジャー.マイナー.ビルド 	
4 	メジャー.マイナー.ビルド.リビジョン 	
たとえば、コンストラクター Version(1,3,5) を使用して <see cref="T:System.Version" /> オブジェクトを作成した場合、ToString(2) は "1.3" を返し、ToString(4) は例外をスローします。</returns>
      <param name="fieldCount">返される構成要素の数。 <paramref name="fieldCount" /> は 0 ～ 4 です。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldCount" /> が 0 未満であるか、4 を超えています。 または <paramref name="fieldCount" /> が、現在の <see cref="T:System.Version" /> オブジェクトに定義した構成要素の数を超えています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.TryParse(System.String,System.Version@)">
      <summary>バージョン番号の文字列形式から等価の <see cref="T:System.Version" /> オブジェクトへの変換を試行し、変換が成功したかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="input" /> パラメーターが正常に変換された場合は true。それ以外の場合は false。</returns>
      <param name="input">変換するバージョン番号を含んだ文字列。</param>
      <param name="result">変換に成功した場合は、このメソッドから戻るときに、<paramref name="input" /> が表す番号と等価の <see cref="T:System.Version" /> が格納されます。変換に失敗した場合は、メジャー バージョン番号とマイナー バージョン番号が 0 の <see cref="T:System.Version" /> オブジェクトが格納されます。</param>
    </member>
    <member name="T:System.Void">
      <summary>値を返さないメソッドの戻り値の型を指定します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.WeakReference">
      <summary>"弱い参照" を表します。弱い参照は、オブジェクトがガベージ コレクションによるクリアの対象になっている状態のままで、そのオブジェクトを参照します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object)">
      <summary>指定したオブジェクトを参照する、<see cref="T:System.WeakReference" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="target">追跡するオブジェクトまたは null。</param>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
      <summary>指定したオブジェクトを参照し、指定した再生処理追跡を使用する <see cref="T:System.WeakReference" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="target">追跡するオブジェクト。</param>
      <param name="trackResurrection">オブジェクト追跡の停止時期を示します。 true を設定すると、終了後にオブジェクトが追跡されます。false を設定すると、オブジェクトの追跡は終了が実行される時点で停止します。</param>
    </member>
    <member name="M:System.WeakReference.Finalize">
      <summary>現在の <see cref="T:System.WeakReference" /> オブジェクトが表すターゲットへの参照を破棄します。</summary>
    </member>
    <member name="P:System.WeakReference.IsAlive">
      <summary>現在の <see cref="T:System.WeakReference" /> オブジェクトが参照するオブジェクトが、ガベージ コレクションで収集されているかどうかを示す値を取得します。</summary>
      <returns>現在の <see cref="T:System.WeakReference" /> オブジェクトが参照するオブジェクトがガベージ コレクションで収集されておらず、アクセス可能な状態にある場合は true。それ以外の場合は false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.WeakReference.Target">
      <summary>現在の <see cref="T:System.WeakReference" /> オブジェクトが参照するオブジェクト (ターゲット) を取得または設定します。</summary>
      <returns>現在の <see cref="T:System.WeakReference" /> オブジェクトが参照するオブジェクトが、ガベージ コレクションで既に収集されている場合は null。それ以外の場合は、現在の <see cref="T:System.WeakReference" /> オブジェクトが参照するオブジェクトへの参照。</returns>
      <exception cref="T:System.InvalidOperationException">ターゲット オブジェクトへの参照が無効です。 この例外は、値が null 参照である場合、または設定操作中にオブジェクトが終了した場合にこのプロパティを設定するときにスローされます。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.WeakReference.TrackResurrection">
      <summary>現在の <see cref="T:System.WeakReference" /> オブジェクトが参照するオブジェクトを、その終了後に追跡するかどうかを示す値を取得します。</summary>
      <returns>現在の <see cref="T:System.WeakReference" /> オブジェクトが参照するオブジェクトを、その終了後に追跡する場合は true。オブジェクトを終了時点まで追跡し、終了後は追跡しない場合は false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.WeakReference`1">
      <summary>型指定された "弱い参照" を表します。弱い参照は、オブジェクトがガベージ コレクションによるクリアの対象になっている状態のままで、そのオブジェクトを参照します。</summary>
      <typeparam name="T">参照されるオブジェクトの型。</typeparam>
    </member>
    <member name="M:System.WeakReference`1.#ctor(`0)">
      <summary>指定したオブジェクトを参照する <see cref="T:System.WeakReference`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="target">参照するオブジェクト、または null。</param>
    </member>
    <member name="M:System.WeakReference`1.#ctor(`0,System.Boolean)">
      <summary>指定したオブジェクトを参照し、指定した再生処理追跡を使用する <see cref="T:System.WeakReference`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="target">参照するオブジェクト、または null。</param>
      <param name="trackResurrection">オブジェクトを終了後に追跡する場合は true。オブジェクトを終了時点まで追跡し、終了後は追跡しない場合は false。</param>
    </member>
    <member name="M:System.WeakReference`1.SetTarget(`0)">
      <summary>この <see cref="T:System.WeakReference`1" /> オブジェクトが参照するターゲット オブジェクトを設定します。</summary>
      <param name="target">新しい対象オブジェクト。</param>
    </member>
    <member name="M:System.WeakReference`1.TryGetTarget(`0@)">
      <summary>現在の <see cref="T:System.WeakReference`1" /> オブジェクトが参照するターゲット オブジェクトの取得を試みます。</summary>
      <returns>ターゲットが取得された場合は true。それ以外の場合は false。</returns>
      <param name="target">このメソッドから制御が戻るときに、可能であればターゲット オブジェクトが格納されます。 このパラメーターは初期化前として処理されます。</param>
    </member>
    <member name="T:System.Collections.DictionaryEntry">
      <summary>設定または取得できる、ディクショナリのキー/値ペアを定義します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.DictionaryEntry.#ctor(System.Object,System.Object)">
      <summary>指定したキーと値を使用して、<see cref="T:System.Collections.DictionaryEntry" /> 型のインスタンスを初期化します。</summary>
      <param name="key">キー/値ペアで定義されているオブジェクト。</param>
      <param name="value">
        <paramref name="key" /> に関連付けられている定義。</param>
      <exception cref="T:System.ArgumentNullException">.NET Framework のバージョンが 1.0 または 1.1 であるにもかかわらず、<paramref name="key" /> が null です。</exception>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Key">
      <summary>キー/値ペア内のキーを取得または設定します。</summary>
      <returns>キー/値ペア内のキー。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Value">
      <summary>キー/値ペア内の値を取得または設定します。</summary>
      <returns>キー/値ペア内の値。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Collections.ICollection">
      <summary>すべての非ジェネリック コレクションについて、サイズ、列挙子、および同期メソッドを定義します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array">
        <see cref="T:System.Collections.ICollection" /> から要素がコピーされる 1 次元の <see cref="T:System.Array" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index">コピーの開始位置となる、<paramref name="array" /> 内の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。 または コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、<paramref name="index" /> からコピー先の <paramref name="array" /> の末尾までに格納できる数を超えています。 または コピー元の <see cref="T:System.Collections.ICollection" /> の型が、コピー先の <paramref name="array" /> の型に自動的にキャストできません。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.ICollection.Count">
      <summary>
        <see cref="T:System.Collections.ICollection" /> に格納されている要素の数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> に格納されている要素の数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.ICollection.IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) 場合は true。それ以外の場合は false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.ICollection.SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IComparer">
      <summary>2 つのオブジェクトを比較するメソッドを公開します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.IComparer.Compare(System.Object,System.Object)">
      <summary>2 つのオブジェクトを比較して、一方が他方より小さいか、同じか、または大きいかを示す値を返します。</summary>
      <returns>
        <paramref name="x" /> と <paramref name="y" /> の相対値を示す符号付き整数。次の表を参照してください。 
値 	説明 	
0 より小さい値 	<paramref name="x" /> が <paramref name="y" /> より小さい。 	
0 	<paramref name="x" /> と <paramref name="y" /> が等しい。 	
0 を超える値 	<paramref name="x" /> が <paramref name="y" /> より大きくなっています。</returns>
      <param name="x">比較対象の第 1 オブジェクト。</param>
      <param name="y">2 番目に比較するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> と <paramref name="y" /> が、いずれも <see cref="T:System.IComparable" /> インターフェイスを実装していません。 または <paramref name="x" /> と <paramref name="y" /> の型が異なっていて、両者を比較できません。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IDictionary">
      <summary>キー/値ペアの非ジェネリック コレクションを表します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
      <summary>指定したキーおよび値を持つ要素を <see cref="T:System.Collections.IDictionary" /> オブジェクトに追加します。</summary>
      <param name="key">追加する要素のキーとして使用する <see cref="T:System.Object" />。</param>
      <param name="value">追加する要素の値として使用する <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は null です。</exception>
      <exception cref="T:System.ArgumentException">同じキーを持つ要素が、<see cref="T:System.Collections.IDictionary" /> オブジェクトに既に存在します。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IDictionary" /> は読み取り専用です。 または <see cref="T:System.Collections.IDictionary" /> が固定サイズです。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IDictionary.Clear">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> オブジェクトからすべての要素を削除します。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IDictionary" /> が読み取り専用です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IDictionary.Contains(System.Object)">
      <summary>指定したキーを持つ要素が <see cref="T:System.Collections.IDictionary" /> オブジェクトに格納されているかどうかを確認します。</summary>
      <returns>指定したキーを持つ要素を <see cref="T:System.Collections.IDictionary" /> が保持している場合は true。それ以外の場合は false。</returns>
      <param name="key">
        <see cref="T:System.Collections.IDictionary" /> オブジェクト内で検索されるキー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は null です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IDictionary.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> オブジェクトの <see cref="T:System.Collections.IDictionaryEnumerator" /> オブジェクトを返します。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> オブジェクトの <see cref="T:System.Collections.IDictionaryEnumerator" /> オブジェクト。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionary.IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> オブジェクトが固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> オブジェクトが固定サイズの場合は true。それ以外の場合は false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionary.IsReadOnly">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> オブジェクトが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> オブジェクトが読み取り専用の場合は true。それ以外の場合は false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionary.Item(System.Object)">
      <summary>指定したキーを持つ要素を取得または設定します。</summary>
      <returns>指定したキーの要素。該当するキーが存在しない場合は null。</returns>
      <param name="key">取得または設定する要素のキー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は null です。</exception>
      <exception cref="T:System.NotSupportedException">このプロパティが設定されていますが、<see cref="T:System.Collections.IDictionary" /> オブジェクトが読み取り専用です。 または このプロパティが設定されていますが、<paramref name="key" /> がコレクション内に存在しません。また、<see cref="T:System.Collections.IDictionary" /> が固定サイズです。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionary.Keys">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> オブジェクトのキーを保持している <see cref="T:System.Collections.ICollection" /> オブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> オブジェクトのキーを保持している <see cref="T:System.Collections.ICollection" /> オブジェクト。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IDictionary.Remove(System.Object)">
      <summary>指定したキーを持つ要素を <see cref="T:System.Collections.IDictionary" /> オブジェクトから削除します。</summary>
      <param name="key">削除する要素のキー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は null です。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IDictionary" /> が読み取り専用です。 または <see cref="T:System.Collections.IDictionary" /> が固定サイズです。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionary.Values">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> オブジェクト内の値を格納している <see cref="T:System.Collections.ICollection" /> オブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> オブジェクト内の値を格納している <see cref="T:System.Collections.ICollection" /> オブジェクト。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IDictionaryEnumerator">
      <summary>非ジェネリック ディクショナリの要素を列挙します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Entry">
      <summary>現在のディクショナリ エントリのキーと値の両方を取得します。</summary>
      <returns>現在のディクショナリ エントリのキーと値の両方を格納している <see cref="T:System.Collections.DictionaryEntry" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> が、ディクショナリの最初のエントリの前、または最後のエントリの後に位置しています。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Key">
      <summary>現在のディクショナリ エントリのキーを取得します。</summary>
      <returns>列挙体の現在の要素のキー。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> が、ディクショナリの最初のエントリの前、または最後のエントリの後に位置しています。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Value">
      <summary>現在のディクショナリ エントリの値を取得します。</summary>
      <returns>列挙体の現在の要素の値。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> が、ディクショナリの最初のエントリの前、または最後のエントリの後に位置しています。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IEnumerable">
      <summary>非ジェネリック コレクションに対する単純な反復処理をサポートする列挙子を公開します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.IEnumerable.GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IEnumerator">
      <summary>非ジェネリック コレクションに対する単純な反復処理をサポートします。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Collections.IEnumerator.Current">
      <summary>コレクション内の現在の要素を取得します。</summary>
      <returns>コレクション内の現在の要素。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IEnumerator.MoveNext">
      <summary>列挙子をコレクションの次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は true。列挙子がコレクションの末尾を越えた場合は false。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子が作成された後に、コレクションが変更されました。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IEnumerator.Reset">
      <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException">列挙子が作成された後に、コレクションが変更されました。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IEqualityComparer">
      <summary>オブジェクトが等しいかどうかの比較をサポートするメソッドを定義します。</summary>
    </member>
    <member name="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)">
      <summary>指定したオブジェクトが等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが等しい場合は true。それ以外の場合は false。</returns>
      <param name="x">比較対象の第 1 オブジェクト。</param>
      <param name="y">2 番目に比較するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> と <paramref name="y" /> の型が異なっていて、両者を比較できません。</exception>
    </member>
    <member name="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)">
      <summary>指定したオブジェクトのハッシュ コードを返します。</summary>
      <returns>指定したオブジェクトのハッシュ コード。</returns>
      <param name="obj">ハッシュ コードが返される対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> の型が参照型で、<paramref name="obj" /> が null です。</exception>
    </member>
    <member name="T:System.Collections.IList">
      <summary>インデックスによって個別にアクセスできる非ジェネリック オブジェクトのコレクションを表します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.IList.Add(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" /> に項目を追加します。</summary>
      <returns>新しい要素が挿入された位置。または、項目がコレクションに挿入されなかった場合は -1。</returns>
      <param name="value">
        <see cref="T:System.Collections.IList" /> に追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> は読み取り専用です。 または <see cref="T:System.Collections.IList" /> が固定サイズです。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.Clear">
      <summary>
        <see cref="T:System.Collections.IList" /> からすべての項目を削除します。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> は読み取り専用です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.Contains(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" /> に特定の値が格納されているかどうかを判断します。</summary>
      <returns>
        <see cref="T:System.Object" /> が <see cref="T:System.Collections.IList" /> に存在する場合は true。それ以外の場合は false。</returns>
      <param name="value">
        <see cref="T:System.Collections.IList" /> 内で検索するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.IndexOf(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" /> 内での指定した項目のインデックスを調べます。</summary>
      <returns>リストに存在する場合は <paramref name="value" /> のインデックス。それ以外の場合は -1。</returns>
      <param name="value">
        <see cref="T:System.Collections.IList" /> 内で検索するオブジェクト。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.Insert(System.Int32,System.Object)">
      <summary>指定したインデックスの <see cref="T:System.Collections.IList" /> に項目を挿入します。</summary>
      <param name="index">
        <paramref name="value" /> を挿入する位置の、0 から始まるインデックス番号。</param>
      <param name="value">
        <see cref="T:System.Collections.IList" /> に挿入するオブジェクト。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が <see cref="T:System.Collections.IList" /> の有効なインデックスではありません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> は読み取り専用です。 または <see cref="T:System.Collections.IList" /> が固定サイズです。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> は、<see cref="T:System.Collections.IList" /> 内の null 参照です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IList.IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IList" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.IList" /> が固定サイズの場合は true。それ以外の場合は false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IList.IsReadOnly">
      <summary>
        <see cref="T:System.Collections.IList" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.IList" /> が読み取り専用の場合は true。それ以外の場合は false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IList.Item(System.Int32)">
      <summary>指定したインデックスにある要素を取得または設定します。</summary>
      <returns>指定したインデックスにある要素。</returns>
      <param name="index">取得または設定する要素の、0 から始まるインデックス番号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が <see cref="T:System.Collections.IList" /> の有効なインデックスではありません。</exception>
      <exception cref="T:System.NotSupportedException">このプロパティが設定されていますが、<see cref="T:System.Collections.IList" /> が読み取り専用です。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.Remove(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" /> 内で最初に見つかった特定のオブジェクトを削除します。</summary>
      <param name="value">
        <see cref="T:System.Collections.IList" /> から削除するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> は読み取り専用です。 または <see cref="T:System.Collections.IList" /> が固定サイズです。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.RemoveAt(System.Int32)">
      <summary>指定したインデックスにある <see cref="T:System.Collections.IList" /> 項目を削除します。</summary>
      <param name="index">削除する項目の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が <see cref="T:System.Collections.IList" /> の有効なインデックスではありません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> は読み取り専用です。 または <see cref="T:System.Collections.IList" /> が固定サイズです。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IStructuralComparable">
      <summary>コレクション オブジェクトの構造比較をサポートします。</summary>
    </member>
    <member name="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)">
      <summary>現在のコレクション オブジェクトの並べ替え順序での位置が、別のオブジェクトと比べて前か、後か、または同じかを判断します。</summary>
      <returns>現在のコレクション オブジェクトと <paramref name="other" /> との関係を示す整数。次の表を参照してください。 
戻り値 	説明 	
-1 	現在のインスタンスが <paramref name="other" /> よりも前。 	
0	現在のインスタンスと <paramref name="other" /> とが等しい。 	
1	現在のインスタンスが <paramref name="other" /> よりも後。</returns>
      <param name="other">現在のインスタンスと比較するオブジェクト。</param>
      <param name="comparer">現在のコレクション オブジェクトのメンバーを <paramref name="other" /> の対応するメンバーと比較するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">このインスタンスと <paramref name="other" /> は型が異なっています。</exception>
    </member>
    <member name="T:System.Collections.IStructuralEquatable">
      <summary>オブジェクトの構造上の等価性比較をサポートするメソッドを定義します。</summary>
    </member>
    <member name="M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>オブジェクトが現在のインスタンスと構造的に等しいかどうかを判断します。</summary>
      <returns>2 つのオブジェクトが等しい場合は true。それ以外の場合は false。</returns>
      <param name="other">現在のインスタンスと比較するオブジェクト。</param>
      <param name="comparer">現在のインスタンスと <paramref name="other" /> が等しいかどうかを判断するオブジェクト。</param>
    </member>
    <member name="M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)">
      <summary>現在のインスタンスのハッシュ コードを返します。</summary>
      <returns>現在のインスタンスのハッシュ コード。</returns>
      <param name="comparer">現在のオブジェクトのハッシュ コードを計算するオブジェクト。</param>
    </member>
    <member name="T:System.Collections.Generic.ICollection`1">
      <summary>ジェネリック コレクションを操作するメソッドを定義します。</summary>
      <typeparam name="T">コレクション内の要素の型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Add(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> に項目を追加します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> に追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> は読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> からすべての項目を削除します。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> は読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Contains(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> に特定の値が格納されているかどうかを判断します。</summary>
      <returns>
        <paramref name="item" /> が <see cref="T:System.Collections.Generic.ICollection`1" /> に存在する場合は true。それ以外の場合は false。</returns>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内で検索するオブジェクト。</param>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.ICollection`1" /> から要素がコピーされる 1 次元の <see cref="T:System.Array" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="arrayIndex">コピーの開始位置となる、<paramref name="array" /> 内の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.Generic.ICollection`1" /> の要素数が、<paramref name="arrayIndex" /> からコピー先の <paramref name="array" /> の末尾までに格納できる数を超えています。</exception>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.Count">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> に格納されている要素の数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> に格納されている要素の数。</returns>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Remove(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内で最初に見つかった特定のオブジェクトを削除します。</summary>
      <returns>
        <paramref name="item" /> が <see cref="T:System.Collections.Generic.ICollection`1" /> から正常に削除された場合は true。それ以外の場合は false。 このメソッドは、<paramref name="item" /> が元の <see cref="T:System.Collections.Generic.ICollection`1" /> に見つからない場合にも false を返します。</returns>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> から削除するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> は読み取り専用です。</exception>
    </member>
    <member name="T:System.Collections.Generic.IComparer`1">
      <summary>2 つのオブジェクトを比較するために型が実装するメソッドを定義します。</summary>
      <typeparam name="T">比較するオブジェクトの型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)">
      <summary>2 つのオブジェクトを比較して、一方が他方より小さいか、同じか、または大きいかを示す値を返します。</summary>
      <returns>
        <paramref name="x" /> と <paramref name="y" /> の相対値を示す符号付き整数。次の表を参照してください。 
値 	説明 	
0 より小さい値 	<paramref name="x" /> が <paramref name="y" /> より小さい。 	
0 	<paramref name="x" /> と <paramref name="y" /> が等しい。 	
0 を超える値 	<paramref name="x" /> が <paramref name="y" /> より大きくなっています。</returns>
      <param name="x">比較対象の第 1 オブジェクト。</param>
      <param name="y">2 番目に比較するオブジェクト。</param>
    </member>
    <member name="T:System.Collections.Generic.IDictionary`2">
      <summary>キーと値のペアのジェネリック コレクションを表します。</summary>
      <typeparam name="TKey">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリ内の値の型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
      <summary>指定したキーおよび値を持つ要素を <see cref="T:System.Collections.Generic.IDictionary`2" /> に追加します。</summary>
      <param name="key">追加する要素のキーとして使用するオブジェクト。</param>
      <param name="value">追加する要素の値として使用するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は null です。</exception>
      <exception cref="T:System.ArgumentException">同じキーを持つ要素が、<see cref="T:System.Collections.Generic.IDictionary`2" /> に既に存在します。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> は読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
      <summary>指定したキーの要素が <see cref="T:System.Collections.Generic.IDictionary`2" /> に格納されているかどうかを確認します。</summary>
      <returns>指定したキーを持つ要素を <see cref="T:System.Collections.Generic.IDictionary`2" /> が保持している場合は true。それ以外の場合は false。</returns>
      <param name="key">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 内で検索されるキー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は null です。</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Item(`0)">
      <summary>指定したキーを持つ要素を取得または設定します。</summary>
      <returns>指定したキーを持つ要素。</returns>
      <param name="key">取得または設定する要素のキー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は null です。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">プロパティは取得されますが、<paramref name="key" /> が見つかりません。</exception>
      <exception cref="T:System.NotSupportedException">このプロパティが設定されていますが、<see cref="T:System.Collections.Generic.IDictionary`2" /> が読み取り専用です。</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Keys">
      <summary>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> のキーを保持している <see cref="T:System.Collections.Generic.ICollection`1" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> を実装するオブジェクトのキーを保持している <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
      <summary>指定したキーを持つ要素を <see cref="T:System.Collections.Generic.IDictionary`2" /> から削除します。</summary>
      <returns>要素が正常に削除された場合は true。それ以外の場合は false。このメソッドは、<paramref name="key" /> が元の <see cref="T:System.Collections.Generic.IDictionary`2" /> に見つからなかった場合にも false を返します。</returns>
      <param name="key">削除する要素のキー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は null です。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> は読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
      <summary>指定したキーに関連付けられている値を取得します。</summary>
      <returns>指定したキーを持つ要素が <see cref="T:System.Collections.Generic.IDictionary`2" /> を実装するオブジェクトに格納されている場合は true。それ以外の場合は false。</returns>
      <param name="key">値を取得する対象のキー。</param>
      <param name="value">このメソッドが返されるときに、キーが見つかった場合は、指定したキーに関連付けられている値。それ以外の場合は <paramref name="value" /> パラメーターの型に対する既定の値。 このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は null です。</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Values">
      <summary>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 内の値を格納している <see cref="T:System.Collections.Generic.ICollection`1" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> を実装するオブジェクトの値を保持している <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
    </member>
    <member name="T:System.Collections.Generic.IEnumerable`1">
      <summary>指定した型のコレクションに対する単純な反復処理をサポートする列挙子を公開します。</summary>
      <typeparam name="T">列挙するオブジェクトの型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Collections.Generic.IEnumerator`1">
      <summary>ジェネリック コレクションに対する単純な反復処理をサポートします。</summary>
      <typeparam name="T">列挙するオブジェクトの型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Collections.Generic.IEnumerator`1.Current">
      <summary>列挙子の現在位置にあるコレクション内の要素を取得します。</summary>
      <returns>コレクション内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="T:System.Collections.Generic.IEqualityComparer`1">
      <summary>オブジェクトが等しいかどうかの比較をサポートするメソッドを定義します。</summary>
      <typeparam name="T">比較するオブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)">
      <summary>指定したオブジェクトが等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが等しい場合は true。それ以外の場合は false。</returns>
      <param name="x">比較対象の <paramref name="T" /> 型の第 1 オブジェクト。</param>
      <param name="y">比較対象の <paramref name="T" /> 型の第 2 オブジェクト。</param>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)">
      <summary>指定したオブジェクトのハッシュ コードを返します。</summary>
      <returns>指定したオブジェクトのハッシュ コード。</returns>
      <param name="obj">ハッシュ コードが返される対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> の型が参照型で、<paramref name="obj" /> が null です。</exception>
    </member>
    <member name="T:System.Collections.Generic.IList`1">
      <summary>インデックスによって個別にアクセスできるオブジェクトのコレクションを表します。</summary>
      <typeparam name="T">リスト内の要素の型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.IList`1.IndexOf(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.IList`1" /> 内での指定した項目のインデックスを調べます。</summary>
      <returns>リストに存在する場合は <paramref name="item" /> のインデックス。それ以外の場合は -1。</returns>
      <param name="item">
        <see cref="T:System.Collections.Generic.IList`1" /> 内で検索するオブジェクト。</param>
    </member>
    <member name="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)">
      <summary>指定したインデックスの <see cref="T:System.Collections.Generic.IList`1" /> に項目を挿入します。</summary>
      <param name="index">
        <paramref name="item" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="item">
        <see cref="T:System.Collections.Generic.IList`1" /> に挿入するオブジェクト。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が <see cref="T:System.Collections.Generic.IList`1" /> の有効なインデックスではありません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IList`1" /> は読み取り専用です。</exception>
    </member>
    <member name="P:System.Collections.Generic.IList`1.Item(System.Int32)">
      <summary>指定したインデックスにある要素を取得または設定します。</summary>
      <returns>指定したインデックスにある要素。</returns>
      <param name="index">取得または設定する要素の、0 から始まるインデックス番号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が <see cref="T:System.Collections.Generic.IList`1" /> の有効なインデックスではありません。</exception>
      <exception cref="T:System.NotSupportedException">このプロパティが設定されていますが、<see cref="T:System.Collections.Generic.IList`1" /> が読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)">
      <summary>指定したインデックス位置にある <see cref="T:System.Collections.Generic.IList`1" /> 項目を削除します。</summary>
      <param name="index">削除する項目の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が <see cref="T:System.Collections.Generic.IList`1" /> の有効なインデックスではありません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IList`1" /> は読み取り専用です。</exception>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyCollection`1">
      <summary>要素の厳密に型指定された読み取り専用のコレクションを表します。</summary>
      <typeparam name="T">要素の型。</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyCollection`1.Count">
      <summary>コレクション内の要素の数を取得します。</summary>
      <returns>コレクション内の要素の数。</returns>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyDictionary`2">
      <summary>キーと値のペアの読み取り専用ジェネリック コレクションを表します。</summary>
      <typeparam name="TKey">読み取り専用ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">読み取り専用ディクショナリ内の値の型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)">
      <summary>指定されたキーを持つ要素が読み取り専用ディクショナリに格納されているかどうかを確認します。</summary>
      <returns>指定したキーを持つ要素が読み取り専用ディクショナリに格納されている場合は true。それ以外の場合は false。</returns>
      <param name="key">検索するキー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は null です。</exception>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)">
      <summary>読み取り専用ディクショナリに指定されたキーを持つ要素を取得します。</summary>
      <returns>読み取り専用ディクショナリに指定されたキーを持つ要素。</returns>
      <param name="key">検索するキー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は null です。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">プロパティは取得されますが、<paramref name="key" /> が見つかりません。</exception>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Keys">
      <summary>読み取り専用のディクショナリのキーを含む列挙可能なコレクションを取得します。</summary>
      <returns>読み取り専用のディクショナリのキーを含む列挙可能なコレクション。</returns>
    </member>
    <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)">
      <summary>指定されたキーに関連付けられている値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> インターフェイスを実装するオブジェクトに、指定されたキーを持つ要素が含まれる場合は true。それ以外の場合は false。</returns>
      <param name="key">検索するキー。</param>
      <param name="value">このメソッドが返されるときに、キーが見つかった場合は、指定したキーに関連付けられている値。それ以外の場合は <paramref name="value" /> パラメーターの型に対する既定の値。 このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は null です。</exception>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Values">
      <summary>読み取り専用のディクショナリの値を含む列挙可能なコレクションを取得します。</summary>
      <returns>読み取り専用のディクショナリの値を含む列挙可能なコレクション。</returns>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyList`1">
      <summary>インデックスによってアクセスできる要素の読み取り専用コレクションを表します。</summary>
      <typeparam name="T">読み取り専用リストに含まれる要素の型。</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)">
      <summary>読み取り専用のリスト内の指定したインデックスにある要素を取得します。</summary>
      <returns>読み取り専用のリスト内の指定したインデックスにある要素。</returns>
      <param name="index">取得する要素の 0 から始まるインデックス。</param>
    </member>
    <member name="T:System.Collections.Generic.ISet`1">
      <summary>セットの抽象化のための基本インターフェイスを提供します。</summary>
      <typeparam name="T">セット内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Add(`0)">
      <summary>現在のセットに要素を追加し、その要素が正常に追加されたかどうかを示す値を返します。</summary>
      <returns>要素がセットに追加された場合は true。セットに既存の要素が存在していた場合は false。</returns>
      <param name="item">セットに追加する要素。</param>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットから、指定されたコレクションに含まれる要素をすべて削除します。</summary>
      <param name="other">セットから削除する項目のコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> は null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定されたコレクションに存在する要素だけが含まれるように現在のセットを変更します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> は null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットが、指定されたコレクションの真のサブセット (真部分集合) であるかどうかを判断します。</summary>
      <returns>現在のセットが <paramref name="other" /> の適切なサブセットの場合は true。それ以外の場合は false。</returns>
      <param name="other">現在のセットと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> は null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットが、指定されたコレクションの真のスーパーセット (真部分集合) であるかどうかを判断します。</summary>
      <returns>現在のセットが <paramref name="other" /> の適切なスーパーセットの場合は true。それ以外の場合は false。</returns>
      <param name="other">現在のセットと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> は null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>セットが、指定されたコレクションのサブセットであるかどうかを判断します。</summary>
      <returns>現在のセットが <paramref name="other" /> パラメーターのサブセットの場合は true。それ以外の場合は false。</returns>
      <param name="other">現在のセットと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> は null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットが、指定されたコレクションのスーパーセットであるかどうかを判断します。</summary>
      <returns>現在のセットが <paramref name="other" /> パラメーターのスーパーセットの場合は true。それ以外の場合は false。</returns>
      <param name="other">現在のセットと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> は null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットと、指定されたコレクションとで重なり合う部分が存在するかどうかを判断します。</summary>
      <returns>現在のセットと <paramref name="other" /> との間に共通する要素が 1 つでも存在する場合は true。それ以外の場合は false。</returns>
      <param name="other">現在のセットと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> は null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットと指定されたコレクションに同じ要素が存在するかどうかを判断します。</summary>
      <returns>現在のセットが <paramref name="other" /> と等しい場合は true。それ以外の場合は false。</returns>
      <param name="other">現在のセットと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> は null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットを、そのセットと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納されるように変更します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> は null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットを、現在のセットまたは指定したコレクションのいずれかに存在するすべての要素が格納されるように変更します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> は null です。</exception>
    </member>
    <member name="T:System.Collections.Generic.KeyNotFoundException">
      <summary>コレクション内の要素にアクセスするために指定されたキーが、コレクションのいずれのキーとも一致しない場合にスローされる例外。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor">
      <summary>既定のプロパティ値を使用して <see cref="T:System.Collections.Generic.KeyNotFoundException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Collections.Generic.KeyNotFoundException" /> クラスの新しいインスタンスを、指定したエラー メッセージを使用して初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.Collections.Generic.KeyNotFoundException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。 <paramref name="innerException" /> パラメーターが null でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Collections.Generic.KeyValuePair`2">
      <summary>設定または取得できる、キー/値ペアを定義します。</summary>
      <typeparam name="TKey">キーの型。</typeparam>
      <typeparam name="TValue">値の型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.#ctor(`0,`1)">
      <summary>指定したキーと値を使用して、<see cref="T:System.Collections.Generic.KeyValuePair`2" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="key">キー/値ペアで定義されているオブジェクト。</param>
      <param name="value">
        <paramref name="key" /> に関連付けられている定義。</param>
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Key">
      <summary>キー/値ペア内のキーを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 内のキーを表す <paramref name="TKey" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.ToString">
      <summary>キーと値の文字列形式を使用して、<see cref="T:System.Collections.Generic.KeyValuePair`2" /> の文字列形式を返します。</summary>
      <returns>キーと値の文字列形式を含む、<see cref="T:System.Collections.Generic.KeyValuePair`2" /> の文字列形式。</returns>
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Value">
      <summary>キー/値ペア内の値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 内の値を表す <paramref name="TValue" />。</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.Collection`1">
      <summary>ジェネリック コレクションの基本クラスです。</summary>
      <typeparam name="T">コレクション内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.#ctor">
      <summary>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> クラスの新しい空のインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>指定したリストのラッパーとして <see cref="T:System.Collections.ObjectModel.Collection`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="list">新しいコレクションによってラップされているリスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> は null です。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Add(`0)">
      <summary>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> の末尾にオブジェクトを追加します。</summary>
      <param name="item">
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> の末尾に追加するオブジェクト。 参照型の場合、null の値を使用できます。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Clear">
      <summary>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> からすべての要素を削除します。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.ClearItems">
      <summary>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> からすべての要素を削除します。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Contains(`0)">
      <summary>ある要素が <see cref="T:System.Collections.ObjectModel.Collection`1" /> 内に存在するかどうかを判断します。</summary>
      <returns>
        <paramref name="item" /> が <see cref="T:System.Collections.ObjectModel.Collection`1" /> に存在する場合は true。それ以外の場合は false。</returns>
      <param name="item">
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> 内で検索するオブジェクト。 参照型の場合、null の値を使用できます。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> 全体を互換性のある 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まります。</summary>
      <param name="array">
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> から要素がコピーされる 1 次元の <see cref="T:System.Array" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index">コピーの開始位置となる、<paramref name="array" /> 内の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.ObjectModel.Collection`1" /> の要素数が、<paramref name="index" /> からコピー先の <paramref name="array" /> の末尾までに格納できる数を超えています。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Count">
      <summary>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> に実際に格納されている要素の数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> に実際に格納されている要素の数。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> を反復処理する列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> の <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
      <summary>指定したオブジェクトを検索し、<see cref="T:System.Collections.ObjectModel.Collection`1" /> 全体内で最初に見つかった位置の 0 から始まるインデックスを返します。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> 全体内で <paramref name="item" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
      <param name="item">
        <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合、null の値を使用できます。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)">
      <summary>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> 内の指定したインデックスの位置に要素を挿入します。</summary>
      <param name="index">
        <paramref name="item" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="item">挿入するオブジェクト。 参照型の場合、null の値を使用できます。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。 または <paramref name="index" /> が <see cref="P:System.Collections.ObjectModel.Collection`1.Count" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
      <summary>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> 内の指定したインデックスの位置に要素を挿入します。</summary>
      <param name="index">
        <paramref name="item" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="item">挿入するオブジェクト。 参照型の場合、null の値を使用できます。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。 または <paramref name="index" /> が <see cref="P:System.Collections.ObjectModel.Collection`1.Count" /> より大きくなっています。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
      <summary>指定したインデックスにある要素を取得または設定します。</summary>
      <returns>指定したインデックスにある要素。</returns>
      <param name="index">取得または設定する要素の、0 から始まるインデックス番号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。 または <paramref name="index" /> が <see cref="P:System.Collections.ObjectModel.Collection`1.Count" /> 以上です。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Items">
      <summary>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> をラップする <see cref="T:System.Collections.Generic.IList`1" /> ラッパーを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> をラップする <see cref="T:System.Collections.Generic.IList`1" /> ラッパー。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
      <summary>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> 内で最初に見つかった特定のオブジェクトを削除します。</summary>
      <returns>
        <paramref name="item" /> が正常に削除された場合は true。それ以外の場合は false。このメソッドは、<paramref name="item" /> が元の <see cref="T:System.Collections.ObjectModel.Collection`1" /> に見つからなかった場合にも false を返します。</returns>
      <param name="item">
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> から削除するオブジェクト。 参照型の場合、null の値を使用できます。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
      <summary>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> の指定したインデックスにある要素を削除します。</summary>
      <param name="index">削除する要素の、0 から始まるインデックス番号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。 または <paramref name="index" /> が <see cref="P:System.Collections.ObjectModel.Collection`1.Count" /> 以上です。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)">
      <summary>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> の指定したインデックスにある要素を削除します。</summary>
      <param name="index">削除する要素の、0 から始まるインデックス番号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。 または <paramref name="index" /> が <see cref="P:System.Collections.ObjectModel.Collection`1.Count" /> 以上です。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)">
      <summary>指定したインデックス位置にある要素を置き換えます。</summary>
      <param name="index">置き換える要素の 0 から始まるインデックス番号。</param>
      <param name="item">指定したインデックス位置に存在する要素の新しい値。 参照型の場合、null の値を使用できます。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。 または <paramref name="index" /> が <see cref="P:System.Collections.ObjectModel.Collection`1.Count" /> より大きくなっています。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用である場合は true。それ以外の場合は false。<see cref="T:System.Collections.ObjectModel.Collection`1" /> の既定の実装では、このプロパティは常に false を返します。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array">
        <see cref="T:System.Collections.ICollection" /> から要素がコピーされる 1 次元の <see cref="T:System.Array" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index">コピーの開始位置となる、<paramref name="array" /> 内の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。 または <paramref name="array" /> に 0 から始まるインデックス番号がありません。 または コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、<paramref name="index" /> からコピー先の <paramref name="array" /> の末尾までに格納できる数を超えています。 または コピー元の <see cref="T:System.Collections.ICollection" /> の型が、コピー先の <paramref name="array" /> の型に自動的にキャストできません。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) 場合は true。それ以外の場合は false。<see cref="T:System.Collections.ObjectModel.Collection`1" /> の既定の実装では、このプロパティは常に false を返します。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。<see cref="T:System.Collections.ObjectModel.Collection`1" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" /> に項目を追加します。</summary>
      <returns>新しい要素が挿入された位置。</returns>
      <param name="value">
        <see cref="T:System.Collections.IList" /> に追加する <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が、<see cref="T:System.Collections.IList" /> に代入できない型です。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" /> に特定の値が格納されているかどうかを判断します。</summary>
      <returns>
        <see cref="T:System.Object" /> が <see cref="T:System.Collections.IList" /> に存在する場合は true。それ以外の場合は false。</returns>
      <param name="value">
        <see cref="T:System.Collections.IList" /> 内で検索される <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が、<see cref="T:System.Collections.IList" /> に代入できない型です。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" /> 内での指定した項目のインデックスを調べます。</summary>
      <returns>リストに存在する場合は <paramref name="value" /> のインデックス。それ以外の場合は -1。</returns>
      <param name="value">
        <see cref="T:System.Collections.IList" /> 内で検索される <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が、<see cref="T:System.Collections.IList" /> に代入できない型です。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" /> 内の指定したインデックスの位置に項目を挿入します。</summary>
      <param name="index">
        <paramref name="value" /> を挿入する位置の、0 から始まるインデックス番号。</param>
      <param name="value">
        <see cref="T:System.Collections.IList" /> に挿入する <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が <see cref="T:System.Collections.IList" /> の有効なインデックスではありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が、<see cref="T:System.Collections.IList" /> に代入できない型です。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IList" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.IList" /> が固定サイズの場合は true。それ以外の場合は false。<see cref="T:System.Collections.ObjectModel.Collection`1" /> の既定の実装では、このプロパティは常に false を返します。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.IList" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.IList" /> が読み取り専用の場合は true。それ以外の場合は false。<see cref="T:System.Collections.ObjectModel.Collection`1" /> の既定の実装では、このプロパティは常に false を返します。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)">
      <summary>指定したインデックスにある要素を取得または設定します。</summary>
      <returns>指定したインデックスにある要素。</returns>
      <param name="index">取得または設定する要素の、0 から始まるインデックス番号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が <see cref="T:System.Collections.IList" /> の有効なインデックスではありません。</exception>
      <exception cref="T:System.ArgumentException">プロパティが設定されていて、<paramref name="value" /> が、<see cref="T:System.Collections.IList" /> に代入できない型です。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" /> 内で最初に見つかった特定のオブジェクトを削除します。</summary>
      <param name="value">
        <see cref="T:System.Collections.IList" /> から削除する <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が、<see cref="T:System.Collections.IList" /> に代入できない型です。</exception>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyCollection`1">
      <summary>読み取り専用のジェネリック コレクションの基本クラスです。</summary>
      <typeparam name="T">コレクション内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>指定したリストをラップする読み取り専用のラッパーである、<see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="list">ラップするリスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> は null です。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)">
      <summary>ある要素が <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 内に存在するかどうかを判断します。</summary>
      <returns>
        <paramref name="value" /> が <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> に存在する場合は true。それ以外の場合は false。</returns>
      <param name="value">
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 内で検索するオブジェクト。 参照型の場合、null の値を使用できます。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 全体を互換性のある 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まります。</summary>
      <param name="array">
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> から要素がコピーされる 1 次元の <see cref="T:System.Array" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index">コピーの開始位置となる、<paramref name="array" /> 内の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> の要素数が、<paramref name="index" /> からコピー先の <paramref name="array" /> の末尾までに格納できる数を超えています。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count">
      <summary>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> インスタンスに格納されている要素の数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> インスタンスに格納されている要素の数。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> を反復処理する列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> の <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)">
      <summary>指定したオブジェクトを検索し、<see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 全体内で最初に見つかった位置の 0 から始まるインデックスを返します。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 全体内で <paramref name="item" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
      <param name="value">
        <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合、null の値を使用できます。</param>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)">
      <summary>指定したインデックス位置にある要素を取得します。</summary>
      <returns>指定したインデックスにある要素。</returns>
      <param name="index">取得する要素の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。 または <paramref name="index" /> が <see cref="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count" /> 以上です。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Items">
      <summary>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> によってラップされる <see cref="T:System.Collections.Generic.IList`1" /> を返します。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> によってラップされる <see cref="T:System.Collections.Generic.IList`1" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> に項目を追加します。この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.ICollection`1" /> に追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> からすべての項目を削除します。この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用である場合は true。それ以外の場合は false。<see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> の既定の実装では、このプロパティは常に true を返します。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内で最初に見つかった特定のオブジェクトを削除します。この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>
        <paramref name="value" /> が <see cref="T:System.Collections.Generic.ICollection`1" /> から正常に削除された場合は true。それ以外の場合は false。</returns>
      <param name="value">
        <see cref="T:System.Collections.Generic.ICollection`1" /> から削除するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>指定したインデックスの <see cref="T:System.Collections.Generic.IList`1" /> に項目を挿入します。この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="index">
        <paramref name="value" /> を挿入する位置の、0 から始まるインデックス番号。</param>
      <param name="value">
        <see cref="T:System.Collections.Generic.IList`1" /> に挿入するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>指定したインデックスにある要素を取得または設定します。</summary>
      <returns>指定したインデックスにある要素。</returns>
      <param name="index">取得または設定する要素の、0 から始まるインデックス番号。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>指定したインデックス位置にある <see cref="T:System.Collections.Generic.IList`1" /> 項目を削除します。この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="index">削除する項目の 0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array">
        <see cref="T:System.Collections.ICollection" /> から要素がコピーされる 1 次元の <see cref="T:System.Array" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index">コピーの開始位置となる、<paramref name="array" /> 内の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。 または <paramref name="array" /> に 0 から始まるインデックス番号がありません。 または コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、<paramref name="index" /> からコピー先の <paramref name="array" /> の末尾までに格納できる数を超えています。 または コピー元の <see cref="T:System.Collections.ICollection" /> の型が、コピー先の <paramref name="array" /> の型に自動的にキャストできません。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) 場合は true。それ以外の場合は false。<see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> の既定の実装では、このプロパティは常に false を返します。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。<see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" /> に項目を追加します。この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>新しい要素が挿入された位置。</returns>
      <param name="value">
        <see cref="T:System.Collections.IList" /> に追加する <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear">
      <summary>
        <see cref="T:System.Collections.IList" /> からすべての項目を削除します。この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" /> に特定の値が格納されているかどうかを判断します。</summary>
      <returns>
        <see cref="T:System.Object" /> が <see cref="T:System.Collections.IList" /> に存在する場合は true。それ以外の場合は false。</returns>
      <param name="value">
        <see cref="T:System.Collections.IList" /> 内で検索される <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> がジェネリック型パラメーター <paramref name="T" /> に指定された型ではありません。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" /> 内での指定した項目のインデックスを調べます。</summary>
      <returns>リストに存在する場合は <paramref name="value" /> のインデックス。それ以外の場合は -1。</returns>
      <param name="value">
        <see cref="T:System.Collections.IList" /> 内で検索される <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> がジェネリック型パラメーター <paramref name="T" /> に指定された型ではありません。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>指定したインデックスの <see cref="T:System.Collections.IList" /> に項目を挿入します。この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="index">
        <paramref name="value" /> を挿入する位置の、0 から始まるインデックス番号。</param>
      <param name="value">
        <see cref="T:System.Collections.IList" /> に挿入する <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IList" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.IList" /> が固定サイズの場合は true。それ以外の場合は false。<see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> の既定の実装では、このプロパティは常に true を返します。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.IList" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.IList" /> が読み取り専用の場合は true。それ以外の場合は false。<see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> の既定の実装では、このプロパティは常に true を返します。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>指定したインデックスにある要素を取得または設定します。</summary>
      <returns>指定したインデックスにある要素。</returns>
      <param name="index">取得する要素の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が <see cref="T:System.Collections.IList" /> の有効なインデックスではありません。</exception>
      <exception cref="T:System.NotSupportedException">プロパティが設定されている場合は、常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" /> 内で最初に見つかった特定のオブジェクトを削除します。この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="value">
        <see cref="T:System.Collections.IList" /> から削除する <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>指定したインデックスにある <see cref="T:System.Collections.IList" /> 項目を削除します。この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="index">削除する項目の 0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="T:System.ComponentModel.DefaultValueAttribute">
      <summary>プロパティの既定値を指定します。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.DefaultValueAttribute" /> クラスの新しいインスタンスを <see cref="T:System.Boolean" /> 値に初期化します。</summary>
      <param name="value">既定値の <see cref="T:System.Boolean" />。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Byte)">
      <summary>
        <see cref="T:System.ComponentModel.DefaultValueAttribute" /> クラスの新しいインスタンスを 8 ビット符号なし整数に初期化します。</summary>
      <param name="value">既定値の 8 ビット符号なし整数。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Char)">
      <summary>
        <see cref="T:System.ComponentModel.DefaultValueAttribute" /> クラスの新しいインスタンスを Unicode 文字に初期化します。</summary>
      <param name="value">既定値の Unicode 文字。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Double)">
      <summary>
        <see cref="T:System.ComponentModel.DefaultValueAttribute" /> クラスの新しいインスタンスを倍精度浮動小数点数に初期化します。</summary>
      <param name="value">既定値の倍精度浮動小数点数。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int16)">
      <summary>
        <see cref="T:System.ComponentModel.DefaultValueAttribute" /> クラスの新しいインスタンスを 16 ビット符号付き整数に初期化します。</summary>
      <param name="value">既定値の 16 ビット符号付き整数。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int32)">
      <summary>
        <see cref="T:System.ComponentModel.DefaultValueAttribute" /> クラスの新しいインスタンスを 32 ビット符号付き整数に初期化します。</summary>
      <param name="value">既定値の 32 ビット符号付き整数。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int64)">
      <summary>
        <see cref="T:System.ComponentModel.DefaultValueAttribute" /> クラスの新しいインスタンスを 64 ビット符号付き整数に初期化します。</summary>
      <param name="value">既定値の 64 ビット符号付き整数。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Object)">
      <summary>
        <see cref="T:System.ComponentModel.DefaultValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">既定値を表す <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Single)">
      <summary>
        <see cref="T:System.ComponentModel.DefaultValueAttribute" /> クラスの新しいインスタンスを単精度浮動小数点数に初期化します。</summary>
      <param name="value">既定値の単精度浮動小数点数。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.ComponentModel.DefaultValueAttribute" /> クラスの新しいインスタンスを <see cref="T:System.String" /> に初期化します。</summary>
      <param name="value">既定値の <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Type,System.String)">
      <summary>
        <see cref="T:System.ComponentModel.DefaultValueAttribute" /> クラスの新しいインスタンスを初期化し、インバリアント カルチャを変換コンテキストとして使用して、指定した値を指定した型に変換します。</summary>
      <param name="type">値の変換後の型を表す <see cref="T:System.Type" />。</param>
      <param name="value">指定した型の <see cref="T:System.ComponentModel.TypeConverter" /> と英語 (U.S.) カルチャを使用して、その型に変換できる <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.Equals(System.Object)">
      <summary>指定したオブジェクトの値が現在の <see cref="T:System.ComponentModel.DefaultValueAttribute" /> と等しいかどうかを示す値を返します。</summary>
      <returns>指定したオブジェクトの値が現在の値と等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">値が等しいかどうかを確認するオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.GetHashCode">
    </member>
    <member name="P:System.ComponentModel.DefaultValueAttribute.Value">
      <summary>この属性が関連付けられているプロパティの既定値を取得します。</summary>
      <returns>この属性が関連付けられているプロバティの既定値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableAttribute">
      <summary>プロパティまたはメソッドをエディターで表示できるように指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor(System.ComponentModel.EditorBrowsableState)">
      <summary>
        <see cref="T:System.ComponentModel.EditorBrowsableState" /> を指定して、<see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="state">
        <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" /> を設定する <see cref="T:System.ComponentModel.EditorBrowsableState" />。</param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.Equals(System.Object)">
      <summary>指定したオブジェクトの値が現在の <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> と等しいかどうかを示す値を返します。</summary>
      <returns>指定したオブジェクトの値が現在の値と等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">値が等しいかどうかを確認するオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.GetHashCode">
    </member>
    <member name="P:System.ComponentModel.EditorBrowsableAttribute.State">
      <summary>プロパティまたはメソッドが参照可能な状態かどうかを示す値を取得します。</summary>
      <returns>プロパティまたはメソッドが参照可能な状態かどうかを示す <see cref="T:System.ComponentModel.EditorBrowsableState" />。</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableState">
      <summary>プロパティまたはメソッドがエディター内から参照できる状態かどうかを指定します。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Advanced">
      <summary>このプロパティまたはメソッドは、高度なユーザーだけが参照すべき機能です。 これらのプロパティは、エディターで表示することも非表示にすることもできます。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Always">
      <summary>このプロパティまたはメソッドは、エディター内から常に参照できます。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Never">
      <summary>このプロパティまたはメソッドは、エディター内からは参照できません。</summary>
    </member>
    <member name="T:System.Diagnostics.ConditionalAttribute">
      <summary>指定した条件付きコンパイルのシンボルが定義されていない限り、メソッド呼び出しまたは属性を無視するようにコンパイラに指示します。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.ConditionalAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Diagnostics.ConditionalAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="conditionString">大文字小文字が区別される、属性に関連付けられた条件付きコンパイルのシンボルを指定する文字列。</param>
    </member>
    <member name="P:System.Diagnostics.ConditionalAttribute.ConditionString">
      <summary>
        <see cref="T:System.Diagnostics.ConditionalAttribute" /> 属性に関連付けられた条件付きコンパイル シンボルを取得します。</summary>
      <returns>大文字小文字が区別される、<see cref="T:System.Diagnostics.ConditionalAttribute" /> 属性に関連付けられた条件付きコンパイル シンボルを指定する文字列。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute">
      <summary>ランタイム ジャスト イン タイム (JIT: just-in-time) デバッグ用のコード生成を変更します。 このクラスは継承できません。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.DebuggableAttribute.#ctor(System.Diagnostics.DebuggableAttribute.DebuggingModes)">
      <summary>Just-In-Time (JIT) コンパイラに対して指定したデバッグ モードを使用して、<see cref="T:System.Diagnostics.DebuggableAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="modes">JIT コンパイラのデバッグ モードを指定する <see cref="T:System.Diagnostics.DebuggableAttribute.DebuggingModes" /> 値のビットごとの組み合わせ。</param>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute.DebuggingModes">
      <summary>Just-In-Time (JIT) コンパイラ用のデバッグ モードを指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default">
      <summary>最適化の有効化、エディット コンティニュのサポートの無効化、シンボル ストア シーケンス ポイントの使用 (存在する場合) など、既定の動作を使用するよう Just-In-Time (JIT) コンパイラに指示します。 .NET Framework Version 2.0 では、JIT 追跡情報 (メソッド内のネイティブ コード オフセットに対する MSIL (Microsoft Intermediate Language) オフセットの情報) が常に生成されます。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations">
      <summary>コンパイラで実行する最適化を無効にします。最適化は、出力ファイルのサイズを小さくして、速度と効率を向上させるために実行します。 最適化によって出力ファイルのコードの配置が変更されると、デバッグが困難になる可能性があります。 通常、デバッグ中は最適化を無効にします。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.EnableEditAndContinue">
      <summary>エディット コンティニュを有効にします。 エディット コンティニュを使用すると、プログラムの中断モード時にソース コードに変更を加えることができます。 エディット コンティニュ機能はコンパイラに依存します。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints">
      <summary>プログラム データベース (PDB) シーケンス ポイントではなく、暗黙の MSIL シーケンス ポイントを使用します。 通常、シンボリック情報には、ソース行ごとに少なくとも 1 つの MSIL オフセットが含まれています。 ジャスト イン タイム (JIT) コンパイラは、メソッドをコンパイルするとき、保存する必要がある MSIL オフセットのリストをプロファイリング サービスに要求します。 この MSIL オフセットをシーケンス ポイントと呼びます。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.None">
      <summary>.NET Framework Version 2.0 では、JIT 追跡情報が常に生成されます。このフラグは、<see cref="P:System.Diagnostics.DebuggableAttribute.IsJITTrackingEnabled" /> プロパティが false である場合を除き (これは Version 2.0 では効果はありません)、<see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default" /> と同じ効果があります。</summary>
    </member>
    <member name="T:System.Globalization.DateTimeStyles">
      <summary>いくつかの日時解析メソッドによる文字列の解析をカスタマイズする形式指定オプションを定義します。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AdjustToUniversal">
      <summary>日付と時刻を世界協定時刻 (UTC) として返します。 入力文字列に現地時刻が指定されている場合 (タイム ゾーン指定子または <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> を使用)、日付と時刻は現地時刻から UTC に変換されます。 入力文字列に UTC 時刻が指定されている場合 (タイム ゾーン指定子または <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> を使用)、変換は実行されません。 入力文字列に現地時刻も UTC 時刻も指定されていない場合、変換は実行されず、結果の <see cref="P:System.DateTime.Kind" /> プロパティは <see cref="F:System.DateTimeKind.Unspecified" /> になります。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowInnerWhite">
      <summary>
        <see cref="T:System.Globalization.DateTimeFormatInfo" /> 形式パターンに従っている場合を除き、解析中に文字列の中間部分に存在する空白文字を無視します。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowLeadingWhite">
      <summary>
        <see cref="T:System.Globalization.DateTimeFormatInfo" /> 形式パターンに従っている場合を除き、解析中に先行する空白文字を無視します。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowTrailingWhite">
      <summary>
        <see cref="T:System.Globalization.DateTimeFormatInfo" /> 形式パターンに従っている場合を除き、解析中に末尾の空白文字を無視します。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces">
      <summary>
        <see cref="T:System.Globalization.DateTimeFormatInfo" /> 形式パターンに従っている場合を除き、解析中に文字列に含まれている空白文字を無視します。 この値は、<see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" />、<see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" /> の各値の組み合わせです。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AssumeLocal">
      <summary>解析対象文字列にタイム ゾーン指定がない場合、その文字列は現地時間を示していると見なされます。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AssumeUniversal">
      <summary>解析対象文字列にタイム ゾーン指定がない場合、その文字列は UTC を示していると見なされます。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault">
      <summary>解析した文字列に含まれているのが時刻のみで日付がない場合、解析を行うメソッドは、年 = 1、月 = 1、および日 = 1 のグレゴリオ暦の日付であると想定します。 この値を使用しない場合は、現在の日付が想定されます。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.None">
      <summary>既定の形式指定オプションを使用します。 この値は、<see cref="M:System.DateTime.Parse(System.String)" />、<see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />、および <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)" /> の各メソッドの既定のスタイルを表します。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.RoundtripKind">
      <summary>日付の <see cref="T:System.DateTimeKind" /> フィールドは、<see cref="T:System.DateTime" /> オブジェクトが標準の書式指定子文字列である "o" または "r" を使用して文字列に変換され、その文字列が <see cref="T:System.DateTime" /> オブジェクトに戻されても保持されます。</summary>
    </member>
    <member name="T:System.Globalization.NumberStyles">
      <summary>整数数値型と浮動小数点数値型の Parse メソッドおよび TryParse メソッドに渡される数値文字列引数で使用できるスタイルを決定します。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowCurrencySymbol">
      <summary>数値文字列に通貨記号を含めることができることを示します。 有効な通貨記号は、<see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> プロパティによって決定します。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowDecimalPoint">
      <summary>数値文字列に小数点を使用できることを示します。 <see cref="T:System.Globalization.NumberStyles" /> 値に <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" /> フラグが含まれ、解析された文字列に通貨記号が含まれる場合、小数点記号は <see cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" /> プロパティによって決定されます。 それ以外の場合、小数点記号は、<see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" /> プロパティによって決まります。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowExponent">
      <summary>数値文字列に指数表記を使用できることを示します。 <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> フラグを使用すると、"E" または "e" で始まり、その後に省略可能な正または負の符号と整数が続く指数を、解析対象文字列に含めることができます。 つまり、nnnExx、nnnE+xx、および nnnE-xx 形式の文字列を正常に解析します。 仮数または仮数部では小数点記号または符号を使用することはできません。解析対象の文字列にこれらの要素を含めるには、<see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> フラグと <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> フラグを使用するか、これらの個々のフラグを含む複合スタイルを使用します。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowHexSpecifier">
      <summary>数値文字列が 16 進数値を表すことを示します。 有効な 16 進数値には、0-9 の数字と A-F および a-f の 16 進数の数字を使用できます。 このスタイルを使用して解析する文字列に、"0x" または "&amp;h" のプレフィックスを付けることはできません。 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> スタイルで解析される文字列は、常に 16 進値として解釈されます。 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> と組み合わせることのできるフラグは、<see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" /> と <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" /> のみです。 <see cref="T:System.Globalization.NumberStyles" /> 列挙体には複合スタイル <see cref="F:System.Globalization.NumberStyles.HexNumber" /> があり、これら 3 つのフラグで構成されます。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingSign">
      <summary>数値文字列に先行する符号を使用できることを示します。 有効な先行する符号の文字は、<see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> プロパティと <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> プロパティによって決定します。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingWhite">
      <summary>先行する空白文字を解析対象の文字列に使用できることを示します。 有効な空白文字の Unicode 値は、U+0009、U+000A、U+000B、U+000C、U+000D、および U+0020 です。 これは、<see cref="M:System.Char.IsWhiteSpace(System.Char)" /> メソッドが true を返す文字のサブセットです。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowParentheses">
      <summary>数値文字列に、その数値を囲む 1 ペアのかっこを使用できることを示します。 かっこは、解析対象の文字列が負の値を表すことを示します。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowThousands">
      <summary>数値文字列に、グループ区切り文字 (たとえば 100 の桁と 1000 の桁を区切る記号) を使用できることを示します。 <see cref="T:System.Globalization.NumberStyles" /> 値に <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" /> フラグが含まれ、解析される文字列に通貨記号が含まれる場合、有効なグループ区切り記号は <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" /> プロパティによって決定され、各グループの桁数は <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" /> プロパティによって決定されます。 それ以外の場合、有効なグループ区切り文字は、<see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" /> プロパティによって決定し、各グループの桁数は、<see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" /> プロパティによって決定します。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingSign">
      <summary>数値文字列に、後続する符号を使用できることを示します。 有効な末尾の符号の文字は、<see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> プロパティと <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> プロパティによって決定します。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingWhite">
      <summary>末尾の空白文字を解析対象の文字列に使用できることを示します。 有効な空白文字の Unicode 値は、U+0009、U+000A、U+000B、U+000C、U+000D、および U+0020 です。 これは、<see cref="M:System.Char.IsWhiteSpace(System.Char)" /> メソッドが true を返す文字のサブセットです。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Any">
      <summary>
        <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> を除くすべてのスタイルを使用することを示します。 これは複合数値スタイルです。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Currency">
      <summary>
        <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> と <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> を除くすべてのスタイルを使用することを示します。 これは複合数値スタイルです。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Float">
      <summary>
        <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />、<see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" />、および <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> の各スタイルを使用することを示します。 これは複合数値スタイルです。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.HexNumber">
      <summary>
        <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />、および <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> の各スタイルを使用することを示します。 これは複合数値スタイルです。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Integer">
      <summary>
        <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />、および <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> の各スタイルを使用することを示します。 これは複合数値スタイルです。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.None">
      <summary>スタイル要素 (先行する空白、後続の空白、桁区切り記号、小数点の記号など) を解析対象の文字列に含めることができないことを示します。 解析対象の文字列は、整数部のみで構成されている必要があります。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Number">
      <summary>
        <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingSign" />、<see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" />、および <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> の各スタイルを使用することを示します。 これは複合数値スタイルです。</summary>
    </member>
    <member name="T:System.Globalization.TimeSpanStyles">
      <summary>
        <see cref="Overload:System.TimeSpan.ParseExact" /> メソッドと <see cref="Overload:System.TimeSpan.TryParseExact" /> メソッドによる文字列の解析をカスタマイズする形式指定オプションを定義します。</summary>
    </member>
    <member name="F:System.Globalization.TimeSpanStyles.AssumeNegative">
      <summary>入力が常に負の時間間隔として解釈されることを示します。</summary>
    </member>
    <member name="F:System.Globalization.TimeSpanStyles.None">
      <summary>負の符号がある場合にのみ、入力が負の時間間隔として解釈されることを示します。</summary>
    </member>
    <member name="T:System.Reflection.AssemblyCompanyAttribute">
      <summary>アセンブリ マニフェストに含める、会社名に関するカスタム属性を定義します。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCompanyAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Reflection.AssemblyCompanyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="company">会社名情報。</param>
    </member>
    <member name="P:System.Reflection.AssemblyCompanyAttribute.Company">
      <summary>会社名情報を取得します。</summary>
      <returns>会社名を保持している文字列。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyConfigurationAttribute">
      <summary>製品版またはデバッグなど、アセンブリのビルド構成を指定します。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyConfigurationAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Reflection.AssemblyConfigurationAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="configuration">アセンブリ構成。</param>
    </member>
    <member name="P:System.Reflection.AssemblyConfigurationAttribute.Configuration">
      <summary>アセンブリ構成情報を取得します。</summary>
      <returns>アセンブリ構成情報を保持している文字列。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCopyrightAttribute">
      <summary>アセンブリ マニフェストに含める、著作権に関するカスタム属性を定義します。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCopyrightAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Reflection.AssemblyCopyrightAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="copyright">著作権情報。</param>
    </member>
    <member name="P:System.Reflection.AssemblyCopyrightAttribute.Copyright">
      <summary>著作権情報を取得します。</summary>
      <returns>著作権情報を保持している文字列。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCultureAttribute">
      <summary>アセンブリがサポートするカルチャを指定します。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCultureAttribute.#ctor(System.String)">
      <summary>属性を付けるアセンブリがサポートするカルチャを使用して、<see cref="T:System.Reflection.AssemblyCultureAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="culture">属性付きアセンブリがサポートするカルチャ。</param>
    </member>
    <member name="P:System.Reflection.AssemblyCultureAttribute.Culture">
      <summary>属性付きアセンブリがサポートするカルチャを取得します。</summary>
      <returns>サポートされるカルチャの名前を格納している文字列。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDefaultAliasAttribute">
      <summary>アセンブリ マニフェストに含める、わかりやすい既定のエイリアスを定義します。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDefaultAliasAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Reflection.AssemblyDefaultAliasAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="defaultAlias">アセンブリの既定のエイリアス情報。</param>
    </member>
    <member name="P:System.Reflection.AssemblyDefaultAliasAttribute.DefaultAlias">
      <summary>既定のエイリアス情報を取得します。</summary>
      <returns>既定のエイリアス情報を保持している文字列。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDelaySignAttribute">
      <summary>作成されたときにアセンブリが完全に署名されていないことを示します。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDelaySignAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.Reflection.AssemblyDelaySignAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="delaySign">この属性が表す機能がアクティブな場合は true。それ以外の場合は false。</param>
    </member>
    <member name="P:System.Reflection.AssemblyDelaySignAttribute.DelaySign">
      <summary>属性の状態を示す値を取得します。</summary>
      <returns>アセンブリが遅延署名として構築された場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDescriptionAttribute">
      <summary>アセンブリについてテキストで記述できます。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDescriptionAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Reflection.AssemblyDescriptionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="description">アセンブリの説明。</param>
    </member>
    <member name="P:System.Reflection.AssemblyDescriptionAttribute.Description">
      <summary>アセンブリの説明情報を取得します。</summary>
      <returns>アセンブリの説明を保持している文字列。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyFileVersionAttribute">
      <summary>Win32 ファイル バージョン リソースとして特定のバージョン番号を使用するようにコンパイラに命令します。 Win32 ファイル バージョンは、アセンブリのバージョン番号と同じにする必要はありません。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyFileVersionAttribute.#ctor(System.String)">
      <summary>ファイル バージョンを指定して、<see cref="T:System.Reflection.AssemblyFileVersionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="version">ファイル バージョン。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> は null です。</exception>
    </member>
    <member name="P:System.Reflection.AssemblyFileVersionAttribute.Version">
      <summary>Win32 ファイルのバージョン リソース名を取得します。</summary>
      <returns>ファイル バージョン リソース名を含む文字列。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyFlagsAttribute">
      <summary>Just-In-Time (JIT) コンパイラのオプション、そのアセンブリが再ターゲット可能かどうか、およびそのアセンブリが完全な公開キーとトークン化された公開キーのどちらを保有しているのかなどを示す、アセンブリの <see cref="T:System.Reflection.AssemblyNameFlags" /> フラグの、ビットごとの組み合わせを指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.Reflection.AssemblyNameFlags)">
      <summary>
        <see cref="T:System.Reflection.AssemblyNameFlags" /> フラグの組み合わせを指定して <see cref="T:System.Reflection.AssemblyFlagsAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="assemblyFlags">Just-In-Time (JIT) コンパイラのオプション、有効期限、そのアセンブリが再ターゲット可能かどうか、およびそのアセンブリが完全な公開キーとトークン化された公開キーのどちらを保有しているのかを示す <see cref="T:System.Reflection.AssemblyNameFlags" /> フラグの、ビットごとの組み合わせ。</param>
    </member>
    <member name="P:System.Reflection.AssemblyFlagsAttribute.AssemblyFlags">
      <summary>この属性のインスタンスが作成されたときに指定された、<see cref="T:System.Reflection.AssemblyNameFlags" /> フラグの組み合わせを表す整数値を取得します。</summary>
      <returns>
        <see cref="T:System.Reflection.AssemblyNameFlags" /> フラグのビットごとの組み合わせを表す整数値。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyInformationalVersionAttribute">
      <summary>アセンブリ マニフェストの追加バージョン情報を定義します。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyInformationalVersionAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="informationalVersion">アセンブリのバージョン情報。</param>
    </member>
    <member name="P:System.Reflection.AssemblyInformationalVersionAttribute.InformationalVersion">
      <summary>バージョン情報を取得します。</summary>
      <returns>バージョン情報を保持している文字列。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyKeyFileAttribute">
      <summary>厳密な名前を生成するために使用するキー ペアを格納しているファイルの名前を指定します。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)">
      <summary>属性を付けるアセンブリの厳密な名前を生成するために、キー ペアを格納しているファイルの名前を使用して、AssemblyKeyFileAttribute クラスの新しいインスタンスを初期化します。</summary>
      <param name="keyFile">キー ペアを格納しているファイルの名前。</param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyFileAttribute.KeyFile">
      <summary>属性付きアセンブリの厳密な名前を生成するために使用するキー ペアを格納しているファイルの名前を取得します。</summary>
      <returns>キー ペアを格納しているファイルの名前を含む文字列。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyKeyNameAttribute">
      <summary>厳密な名前を生成するために使用するキー ペアを格納している CSP 内のキー コンテナーの名前を指定します。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyNameAttribute.#ctor(System.String)">
      <summary>属性を付けるアセンブリの厳密な名前を生成するために、キー ペアを保持しているコンテナーの名前を使用して、<see cref="T:System.Reflection.AssemblyKeyNameAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="keyName">キー ペアを格納しているコンテナーの名前。</param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyNameAttribute.KeyName">
      <summary>属性付きアセンブリの厳密な名前を生成するために使用するキー ペアを格納しているコンテナーの名前を取得します。</summary>
      <returns>関連するキー ペアを格納しているコンテナーの名前を含む文字列。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyMetadataAttribute">
      <summary>装飾されるアセンブリに対してキーと値のメタデータ ペアを定義します。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyMetadataAttribute.#ctor(System.String,System.String)">
      <summary>指定したメタデータと値を使用して、<see cref="T:System.Reflection.AssemblyMetadataAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="key">メタデータ キー。</param>
      <param name="value">メタデータ値。</param>
    </member>
    <member name="P:System.Reflection.AssemblyMetadataAttribute.Key">
      <summary>メタデータ キーを取得します。</summary>
      <returns>メタデータ キー。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyMetadataAttribute.Value">
      <summary>メタデータ値を取得します。</summary>
      <returns>メタデータ値。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyNameFlags">
      <summary>
        <see cref="T:System.Reflection.Assembly" /> 参照に関する情報を提供します。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.None">
      <summary>すべてのフラグが無効であることを示します。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.PublicKey">
      <summary>公開キーが、公開キー トークンではなく完全な公開キーから形成されていることを示します。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.Retargetable">
      <summary>アセンブリを実行時に別の発行元のアセンブリに再ターゲットできることを示します。 この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="T:System.Reflection.AssemblyProductAttribute">
      <summary>アセンブリ マニフェストに含める、製品名に関するカスタム属性を定義します。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyProductAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Reflection.AssemblyProductAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="product">製品名情報。</param>
    </member>
    <member name="P:System.Reflection.AssemblyProductAttribute.Product">
      <summary>製品名情報を取得します。</summary>
      <returns>製品名を保持している文字列。</returns>
    </member>
    <member name="T:System.Reflection.AssemblySignatureKeyAttribute">
      <summary>古い、単純な厳密名キーから、より強力なハッシュ アルゴリズムを持つ、より大きなキーへの移行を提供します。</summary>
    </member>
    <member name="M:System.Reflection.AssemblySignatureKeyAttribute.#ctor(System.String,System.String)">
      <summary>指定したパブリック キーと副署名を使用して、<see cref="T:System.Reflection.AssemblySignatureKeyAttribute" /> クラスの新しいインスタンスを作成します。</summary>
      <param name="publicKey">公開キーまたは ID キー。</param>
      <param name="countersignature">厳密な名前のキーの一部のデジタル署名キーである副署名。</param>
    </member>
    <member name="P:System.Reflection.AssemblySignatureKeyAttribute.Countersignature">
      <summary>このアセンブリの厳密な名前の副署名を取得します。</summary>
      <returns>デジタル署名キーの副署名。</returns>
    </member>
    <member name="P:System.Reflection.AssemblySignatureKeyAttribute.PublicKey">
      <summary>アセンブリに署名するために使用される厳密な名前の公開キーを取得します。</summary>
      <returns>このアセンブリの公開キー。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyTitleAttribute">
      <summary>アセンブリの説明を指定します。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyTitleAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Reflection.AssemblyTitleAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="title">アセンブリのタイトル。</param>
    </member>
    <member name="P:System.Reflection.AssemblyTitleAttribute.Title">
      <summary>アセンブリのタイトル情報を取得します。</summary>
      <returns>アセンブリのタイトル。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyTrademarkAttribute">
      <summary>アセンブリ マニフェストに含める、商標に関するカスタム属性を定義します。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyTrademarkAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Reflection.AssemblyTrademarkAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="trademark">商標情報。</param>
    </member>
    <member name="P:System.Reflection.AssemblyTrademarkAttribute.Trademark">
      <summary>商標情報を取得します。</summary>
      <returns>商標情報を保持している文字列。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyVersionAttribute">
      <summary>属性を付けるアセンブリのバージョンを指定します。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyVersionAttribute.#ctor(System.String)">
      <summary>属性を付けるアセンブリのバージョン番号を指定して、AssemblyVersionAttribute クラスの新しいインスタンスを初期化します。</summary>
      <param name="version">属性付きアセンブリのバージョン番号。</param>
    </member>
    <member name="P:System.Reflection.AssemblyVersionAttribute.Version">
      <summary>属性付きアセンブリのバージョン番号を取得します。</summary>
      <returns>アセンブリのバージョン番号を格納している文字列。</returns>
    </member>
    <member name="T:System.Reflection.DefaultMemberAttribute">
      <summary>
        <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> が使用する既定のメンバーである型のメンバーを定義します。</summary>
    </member>
    <member name="M:System.Reflection.DefaultMemberAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Reflection.DefaultMemberAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="memberName">呼び出すメンバーの名前を保持している文字列。 コンストラクター、メソッド、プロパティ、フィールドなどを指定できます。 メンバーを呼び出す場合は、適切な呼び出し属性を指定する必要があります。 メンバーの名前として空の String を渡すことによって、クラスの既定のメンバーを指定できます。 型の既定のメンバーは、DefaultMemberAttribute カスタム属性でマークされるか、通常の方法で COM 内でマークされます。</param>
    </member>
    <member name="P:System.Reflection.DefaultMemberAttribute.MemberName">
      <summary>属性から名前を取得します。</summary>
      <returns>メンバー名を表す文字列。</returns>
    </member>
    <member name="T:System.Runtime.GCLargeObjectHeapCompactionMode">
      <summary>次のブロッキング ガベージ コレクションが大きなオブジェクト ヒープ (LOH) を圧縮するかどうかを示します。</summary>
    </member>
    <member name="F:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce">
      <summary>次のブロッキング generation 2 ガベージ コレクション中に圧縮される大きなオブジェクト ヒープ (LOH) です。</summary>
    </member>
    <member name="F:System.Runtime.GCLargeObjectHeapCompactionMode.Default">
      <summary>大きなオブジェクト ヒープ (LOH) は圧縮されません。</summary>
    </member>
    <member name="T:System.Runtime.GCLatencyMode">
      <summary>ガベージ コレクターがアプリケーションに関与する時間を調整します。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.Batch">
      <summary>ガベージ コレクションの同時実行を無効にし、バッチ呼び出しでオブジェクトを解放します。 これは、関与するレベルが最も高いモードです。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.Interactive">
      <summary>ガベージ コレクションの同時実行を有効にし、アプリケーションの実行中にオブジェクトを解放します。 これは、ワークステーション上のガベージ コレクションの既定のモードで、関与するレベルは <see cref="F:System.Runtime.GCLatencyMode.Batch" /> より低くなります。 応答とスループットのバランスが保たれます。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.LowLatency">
      <summary>オブジェクトの解放時に、保守的なガベージ コレクションを有効にします。 システムがメモリ圧迫の状態でありながら、ジェネレーション 0 とジェネレーション 1 のコレクションが頻繁に発生する可能性がある場合のみ、すべてのコレクションが発生します</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.SustainedLowLatency">
      <summary>長期間にわたって待機時間を最小限に抑えることを試みるガベージ コレクションを有効にします。 コレクターは、生成 0、生成 1、同時実行生成 2 のコレクションのみ実行しようとしています。 それでも、システムがメモリ圧迫の状態にある場合は、完全なブロック コレクションが発生することがあります。</summary>
    </member>
    <member name="T:System.Runtime.GCSettings">
      <summary>現在のプロセスのガベージ コレクション設定を指定します。</summary>
    </member>
    <member name="P:System.Runtime.GCSettings.IsServerGC">
      <summary>サーバーのガベージ コレクションが有効であるかどうかを示す値を取得します。</summary>
      <returns>サーバーのガベージ コレクションが有効な場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Runtime.GCSettings.LargeObjectHeapCompactionMode">
      <summary>フル ブロッキング ガベージ コレクションが大きなオブジェクト ヒープ (LOH) を圧縮するかどうかを示す値を取得または設定します。</summary>
      <returns>フル ブロッキング ガベージ コレクションが LOH を圧縮するかどうかを示す、列挙値の 1 つです。</returns>
    </member>
    <member name="P:System.Runtime.GCSettings.LatencyMode">
      <summary>ガベージ コレクションの現在の待機モードを取得または設定します。</summary>
      <returns>待機モードを指定する列挙値の 1 つ。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="T:System.Runtime.GCLatencyMode" /> は無効な値に設定されています。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute">
      <summary>属性付きフィールドにアクセスするプロパティの名前を指定します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.#ctor(System.String)">
      <summary>属性付きフィールドにアクセスするために使用するプロパティの名前を指定して、AccessedThroughPropertyAttribute クラスの新しいインスタンスを初期化します。</summary>
      <param name="propertyName">属性付きフィールドにアクセスするために使用するプロパティの名前。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.PropertyName">
      <summary>属性付きフィールドにアクセスするために使用するプロパティの名前を取得します。</summary>
      <returns>属性付きフィールドにアクセスするために使用するプロパティの名前。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncStateMachineAttribute">
      <summary>メソッドが Async (Visual Basic) または async (C# リファレンス) 修飾子でマークされているかどうかを示します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncStateMachineAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.AsyncStateMachineAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="stateMachineType">ステート マシン メソッドを実装するために使用される、基になるステート マシン型の型オブジェクト。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
      <summary>呼び出し元を含むソース ファイルの完全パスを取得できます。 これは、コンパイル時のファイル パスです。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerFilePathAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.CallerFilePathAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
      <summary>メソッドが呼び出されるソース ファイルの行番号を取得できます。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerLineNumberAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
      <summary>メソッドの呼び出し元のメソッド名またはプロパティ名を取得できます。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerMemberNameAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute">
      <summary>共通言語ランタイムの Just-In-Time (JIT) コンパイラが生成するコードの厳格度を制御します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.#ctor(System.Int32)">
      <summary>コンパイル リラクゼーションを指定して、<see cref="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="relaxations">コンパイル リラクゼーション。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations">
      <summary>現在のオブジェクトを構築したときに指定したコンパイル リラクゼーションを取得します。</summary>
      <returns>現在のオブジェクトを構築したときに指定したコンパイル リラクゼーション。 <see cref="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations" /> プロパティで <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> 列挙体を使用します。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute">
      <summary>コンパイラが生成した要素をユーザーが生成した要素と区別します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilerGeneratedAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CustomConstantAttribute">
      <summary>コンパイラがフィールドまたはメソッド パラメーターに対して永続化できる定数値を定義します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CustomConstantAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.CustomConstantAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CustomConstantAttribute.Value">
      <summary>属性に格納されている定数値を取得します。</summary>
      <returns>属性に格納されている定数値。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DateTimeConstantAttribute">
      <summary>フィールドまたはパラメーターに対して 8 バイトの <see cref="T:System.DateTime" /> 定数を永続化します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DateTimeConstantAttribute.#ctor(System.Int64)">
      <summary>DateTimeConstantAttribute クラスの新しいインスタンスの日時を表す 100 ナノ秒刻みの数値を指定して、そのインスタンスを初期化します。</summary>
      <param name="ticks">インスタンスの日時を表す 100 ナノ秒刻みの数値。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DateTimeConstantAttribute.Value">
      <summary>対象となるインスタンスの日時を表す 100 ナノ秒刻みの数値を取得します。</summary>
      <returns>インスタンスの日時を表す 100 ナノ秒刻みの数値。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DecimalConstantAttribute">
      <summary>メタデータに <see cref="T:System.Decimal" /> の定数値を格納します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.Int32,System.Int32,System.Int32)">
      <summary>指定した符号付き整数値を使用して、<see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="scale">小数点以下の桁数を示す 10 スケール ファクターの累乗。 有効な値は 0 以上、28 以下です。</param>
      <param name="sign">0 は正の値を示し、1 は負の値を示します。</param>
      <param name="hi">96 ビット <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> の上位 32 ビット。</param>
      <param name="mid">96 ビット <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> の中位 32 ビット。</param>
      <param name="low">96 ビット <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> の下位 32 ビット。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)">
      <summary>指定した符号なし整数値を使用して、<see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="scale">小数点以下の桁数を示す 10 スケール ファクターの累乗。 有効な値は 0 以上、28 以下です。</param>
      <param name="sign">0 は正の値を示し、1 は負の値を示します。</param>
      <param name="hi">96 ビット <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> の上位 32 ビット。</param>
      <param name="mid">96 ビット <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> の中位 32 ビット。</param>
      <param name="low">96 ビット <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> の下位 32 ビット。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scale" /> &gt; 28。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value">
      <summary>この属性に格納されている 10 進の定数を取得します。</summary>
      <returns>この属性に格納されている 10 進の定数。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
      <summary>メソッドが拡張メソッドであること、またはクラスやアセンブリに拡張メソッドが含まれていることを示します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExtensionAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.ExtensionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.FixedBufferAttribute">
      <summary>指定したプリミティブ型の要素を一定数だけ格納しているものとしてフィールドを処理する必要があることを示します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FixedBufferAttribute.#ctor(System.Type,System.Int32)">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.FixedBufferAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="elementType">バッファー内に格納されている要素の型。</param>
      <param name="length">バッファー内の要素の数。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.ElementType">
      <summary>固定バッファーに格納されている要素の型を取得します。</summary>
      <returns>要素の型。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.Length">
      <summary>固定バッファー内の要素の数を取得します。</summary>
      <returns>固定バッファー内の要素の数。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IndexerNameAttribute">
      <summary>インデクサーを直接サポートしていないプログラミング言語でインデクサーを確認できる名前を示します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.IndexerNameAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="indexerName">他の言語に示された、インデクサーの名前。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
      <summary>通常は現在のアセンブリ内でのみ参照できる型が、指定したアセンブリから参照可能であることを指定します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
      <summary>指定したフレンド アセンブリの名前を使用して <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="assemblyName">フレンド アセンブリの名前。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName">
      <summary>internal キーワードを使用してマークされている型と型のメンバーをすべて参照できるようにする、フレンド アセンブリの名前を取得します。</summary>
      <returns>フレンド アセンブリの名前を表す文字列。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IStrongBox">
      <summary>オブジェクトが参照する値にアクセスするためのプロパティを定義します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.CompilerServices.IStrongBox.Value">
      <summary>オブジェクトが参照する値を取得または設定します。</summary>
      <returns>オブジェクトが参照する値。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsVolatile">
      <summary>フィールドを volatile としてマークします。 このクラスは継承できません。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IteratorStateMachineAttribute">
      <summary>Visual Basic のメソッドが Iterator 修飾子でマークされているかどうかを示します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IteratorStateMachineAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.IteratorStateMachineAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="stateMachineType">ステート マシン メソッドを実装するために使用される、基になるステート マシン型の型オブジェクト。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplAttribute">
      <summary>メソッドを実装する方法の詳細を定義します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Runtime.CompilerServices.MethodImplOptions)">
      <summary>指定した <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 値を使用して、<see cref="T:System.Runtime.CompilerServices.MethodImplAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="methodImplOptions">属性付きメソッドのプロパティを指定する <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 値。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.MethodImplAttribute.Value">
      <summary>属性付きメソッドを記述する <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 値を取得します。</summary>
      <returns>属性付きメソッドを記述する <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 値。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplOptions">
      <summary>メソッドを実装する方法の詳細を定義します。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining">
      <summary>可能な場合は、メソッドを常にインライン展開する必要があります。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoInlining">
      <summary>メソッドをインライン展開できません。 インライン展開とは、メソッド呼び出しをメソッド本体に置換する最適化のことです。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoOptimization">
      <summary>コード生成の問題をデバッグする場合に、メソッドを最適化するために Just-In-Time (JIT) コンパイラまたはネイティブ コードによる生成を使用しません (Ngen.exe を参照)。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.PreserveSig">
      <summary>メソッド シグネチャは宣言どおりにエクスポートされます。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute">
      <summary>メタデータは含むが、実行可能なコードは含まない参照アセンブリとして、アセンブリを指定します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor(System.String)">
      <summary>指定した説明を使用して、<see cref="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="description">参照アセンブリの説明。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.Description">
      <summary>参照アセンブリの説明を取得します。</summary>
      <returns>参照アセンブリの説明。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute">
      <summary>
        <see cref="T:System.Exception" /> クラスから派生していない例外を <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> オブジェクトでラップするかどうかを指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows">
      <summary>
        <see cref="T:System.Exception" /> クラスから派生していない例外を <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> オブジェクトでラップするかどうかを指定する値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Exception" /> クラスから派生していない例外を <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> オブジェクトでラップする場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeHelpers">
      <summary>コンパイラのサポートを提供する静的メソッドと静的プロパティのセットを提供します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)">
      <summary>特定のオブジェクトのハッシュ関数として機能し、ハッシュ アルゴリズムやハッシュ テーブルのようなハッシュ コードを使うデータ構造での使用に適しています。</summary>
      <returns>
        <paramref name="o" /> パラメーターで識別されるオブジェクトのハッシュ コード。</returns>
      <param name="o">ハッシュ コードを取得するオブジェクト。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetObjectValue(System.Object)">
      <summary>値型をボックスに格納します。</summary>
      <returns>値クラスの場合は <paramref name="obj" /> のボックス化されたコピー。それ以外の場合は <paramref name="obj" />。</returns>
      <param name="obj">ボックスに格納する値型。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.InitializeArray(System.Array,System.RuntimeFieldHandle)">
      <summary>モジュールに格納されているデータから配列を高速に初期化する方法を提供します。</summary>
      <param name="array">初期化する配列。</param>
      <param name="fldHandle">配列の初期化に使用するデータの位置を指定するフィールド ハンドル。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeHelpers.OffsetToStringData">
      <summary>特定の文字列のデータへのオフセットをバイト単位で取得します。</summary>
      <returns>
        <see cref="T:System.String" /> オブジェクトの先頭から、文字列の最初の文字までのバイト オフセット。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(System.RuntimeTypeHandle)">
      <summary>指定したクラスのコンストラクター メソッドを実行します。</summary>
      <param name="type">実行するクラス コンストラクター メソッドを指定する型ハンドル。</param>
      <exception cref="T:System.TypeInitializationException">クラス初期化子は例外をスローします。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.StateMachineAttribute">
      <summary>メソッドがステート マシンのメソッドかどうかを確認できます。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StateMachineAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.StateMachineAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="stateMachineType">ステート マシン メソッドを実装するためにコンパイラによって生成された、基になるステート マシン型の型オブジェクト。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.StateMachineAttribute.StateMachineType">
      <summary>ステート マシン メソッドを実装するためにコンパイラによって生成された、基になるステート マシン型の型オブジェクトを返します。</summary>
      <returns>ステート マシン メソッドを実装するためにコンパイラによって生成された、基になるステート マシン型の型オブジェクトを取得します。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.StrongBox`1">
      <summary>値への参照を保持します。</summary>
      <typeparam name="T">
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> が参照する値の型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor">
      <summary>参照呼び出しで使用して値を受け取ることができる、新しい StrongBox を初期化します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor(`0)">
      <summary>指定された値を使用して、<see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> が参照する値。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.CompilerServices.StrongBox`1.System#Runtime#CompilerServices#IStrongBox#Value">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> が参照する値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> が参照する値。</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.StrongBox`1.Value">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> が参照する値を表します。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedFromAttribute">
      <summary>別のアセンブリ内にある転送元の <see cref="T:System.Type" /> を指定します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedFromAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.TypeForwardedFromAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="assemblyFullName">別のアセンブリ内にある転送元の <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFullName" /> が null または空です。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedFromAttribute.AssemblyFullName">
      <summary>転送元の型のアセンブリ修飾名を取得します。</summary>
      <returns>転送元の型のアセンブリ修飾名。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedToAttribute">
      <summary>別のアセンブリ内にある転送先の <see cref="T:System.Type" /> を指定します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedToAttribute.#ctor(System.Type)">
      <summary>転送先の <see cref="T:System.Type" /> を指定して、<see cref="T:System.Runtime.CompilerServices.TypeForwardedToAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="destination">別のアセンブリ内にある転送先の <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedToAttribute.Destination">
      <summary>別のアセンブリ内にある転送先の <see cref="T:System.Type" /> を取得します。</summary>
      <returns>別のアセンブリ内にある転送先の <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute">
      <summary>オーバーフローする可能性があるアンマネージ配列を型に格納することを指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.UnsafeValueTypeAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo">
      <summary>状態がコード内の特定の位置でキャプチャされた例外を表します。</summary>
    </member>
    <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(System.Exception)">
      <summary>コード内の現在の点で指定された例外を表す <see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo" /> オブジェクトを作成します。</summary>
      <returns>コード内の現在の地点に指定された例外を表すオブジェクト。</returns>
      <param name="source">状態がキャプチャされ、返されたオブジェクトによって表される例外。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> は null です。</exception>
    </member>
    <member name="P:System.Runtime.ExceptionServices.ExceptionDispatchInfo.SourceException">
      <summary>現在のインスタンスで表される例外を取得します。</summary>
      <returns>現在のインスタンスで表される例外。</returns>
    </member>
    <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw">
      <summary>例外をキャプチャしたときに保存された状態を復元した後に、現在の <see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo" /> オブジェクトで表される例外をスローします。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CharSet">
      <summary>マーシャリングされた文字列で使用する文字セットを指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Ansi">
      <summary>マルチバイト文字として文字列をマーシャリングします。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Unicode">
      <summary>Unicode 2 バイト文字として文字列をマーシャリングします。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComVisibleAttribute">
      <summary>個々のマネージ型またはマネージ メンバー、またはアセンブリ内のすべての型の COM 参照可能範囲を制御します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)">
      <summary>ComVisibleAttribute クラスの新しいインスタンスを初期化します。</summary>
      <param name="visibility">型が COM から参照できることを示す場合は true。それ以外の場合は false。 既定値は、true です。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComVisibleAttribute.Value">
      <summary>COM 型が参照可能かどうかを示す値を取得します。</summary>
      <returns>型が参照可能な場合は true。それ以外の場合は false。 既定値は true です。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.FieldOffsetAttribute">
      <summary>クラスまたは構造体のアンマネージ表現内にあるフィールドの物理的な位置を示します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.FieldOffsetAttribute.#ctor(System.Int32)">
      <summary>フィールドの先頭に対する構造体でのオフセットを指定して、<see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="offset">構造体の先頭からフィールドの先頭までのバイト単位のオフセット。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.FieldOffsetAttribute.Value">
      <summary>構造体の先頭からフィールドの先頭までのオフセットを取得します。</summary>
      <returns>構造体の先頭からフィールドの先頭までのオフセット。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.LayoutKind">
      <summary>アンマネージ コードにエクスポートするときにオブジェクトのレイアウトを制御します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Auto">
      <summary>ランタイムは、アンマネージ メモリ内のオブジェクトのメンバーに対して適切なレイアウトを自動的に選択します。 この列挙体メンバーで定義されたオブジェクトは、マネージ コードの外に公開できません。 公開しようとすると、例外が生成されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Explicit">
      <summary>アンマネージ メモリ内にあるオブジェクトの各メンバーの正確な位置は、<see cref="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" /> フィールドの設定によって明示的に制御されます。 各メンバーは <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" /> を使用して、その型内のフィールドの位置を指定する必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Sequential">
      <summary>オブジェクトのメンバーは、アンマネージ メモリにエクスポートするときに表示される順番に従ってレイアウトされます。 メンバーは、<see cref="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" /> で指定したパッキングに従ってレイアウトされます。メンバーは非連続にできます。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.OutAttribute">
      <summary>呼び出し先から呼び出し元へ、データをマーシャリングすることを示します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OutAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.InteropServices.OutAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.StructLayoutAttribute">
      <summary>クラスまたは構造体のデータ フィールドの物理的なレイアウトを制御できます。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)">
      <summary>指定した <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 列挙体メンバーを使用して、<see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="layoutKind">クラスまたは構造体を整列する方法を指定する列挙値の 1 つ。</param>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet">
      <summary>クラス内の文字列データ フィールドを既定で LPWSTR または LPSTR としてマーシャリングするかどうかを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
      <summary>メモリ内のクラスまたは構造体のデータ フィールドのアライメントを制御します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Size">
      <summary>クラスまたは構造体の絶対サイズを示します。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.StructLayoutAttribute.Value">
      <summary>クラスまたは構造体を整列する方法を指定する <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 値を取得します。</summary>
      <returns>クラスまたは構造体を整列する方法を指定する列挙値の 1 つ。</returns>
    </member>
    <member name="T:System.Runtime.Versioning.TargetFrameworkAttribute">
      <summary>特定のアセンブリがコンパイルされた対象の .NET Framework のバージョンを識別します。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.TargetFrameworkAttribute.#ctor(System.String)">
      <summary>アセンブリがビルドされた対象の .NET Framework のバージョンを指定することで、<see cref="T:System.Runtime.Versioning.TargetFrameworkAttribute" /> クラスのインスタンスを初期化します。</summary>
      <param name="frameworkName">アセンブリがビルドされた対象の .NET Framework のバージョン。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frameworkName" /> は null です。</exception>
    </member>
    <member name="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkDisplayName">
      <summary>アセンブリがビルドされた対象の .NET Framework のバージョンの表示名を取得します。</summary>
      <returns>.NET Framework のバージョンの表示名。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName">
      <summary>特定のアセンブリがコンパイルされた対象の .NET Framework のバージョンの名前を取得します。</summary>
      <returns>アセンブリがコンパイルされた対象の .NET Framework のバージョンの名前。</returns>
    </member>
    <member name="T:System.Security.AllowPartiallyTrustedCallersAttribute">
      <summary>部分的に信頼されているコードからアセンブリを呼び出すことができるようにします。 この宣言がない場合、アセンブリを使用できるのは、完全に信頼されている呼び出し元だけです。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Security.AllowPartiallyTrustedCallersAttribute.#ctor">
      <summary>
        <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Security.SecurityCriticalAttribute">
      <summary>コードまたはアセンブリでセキュリティが重要な操作を実行するように指定します。</summary>
    </member>
    <member name="M:System.Security.SecurityCriticalAttribute.#ctor">
      <summary>
        <see cref="T:System.Security.SecurityCriticalAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Security.SecurityException">
      <summary>セキュリティ エラーが検出されたときにスローされる例外。</summary>
    </member>
    <member name="M:System.Security.SecurityException.#ctor">
      <summary>
        <see cref="T:System.Security.SecurityException" /> クラスの新しいインスタンスを既定のプロパティを使用して初期化します。</summary>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.Security.SecurityException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.Security.SecurityException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="inner">現在の例外の原因である例外。 <paramref name="inner" /> パラメーターが null ではない場合、現在の例外は内部例外を処理する catch ブロックで発生します。</param>
    </member>
    <member name="M:System.Security.SecurityException.ToString">
      <summary>現在の <see cref="T:System.Security.SecurityException" /> の表現を返します。</summary>
      <returns>現在の <see cref="T:System.Security.SecurityException" /> の文字列形式。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="T:System.Security.SecuritySafeCriticalAttribute">
      <summary>セキュリティが重要で、透過的なコードから安全にアクセスできる型またはメンバーとして識別します。</summary>
    </member>
    <member name="M:System.Security.SecuritySafeCriticalAttribute.#ctor">
      <summary>
        <see cref="T:System.Security.SecuritySafeCriticalAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Security.SecurityTransparentAttribute">
      <summary>アセンブリが特権の昇格を実行できないことを指定します。</summary>
    </member>
    <member name="M:System.Security.SecurityTransparentAttribute.#ctor">
      <summary>
        <see cref="T:System.Security.SecurityTransparentAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Security.VerificationException">
      <summary>セキュリティ ポリシーでコードをタイプ セーフにする必要があり、検証プロセスでコードがタイプ セーフかどうかを検証できないときにスローされる例外。</summary>
    </member>
    <member name="M:System.Security.VerificationException.#ctor">
      <summary>
        <see cref="T:System.Security.VerificationException" /> クラスの新しいインスタンスを既定のプロパティを使用して初期化します。</summary>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.String)">
      <summary>説明メッセージを指定して、<see cref="T:System.Security.VerificationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外が発生した理由を示すメッセージ。</param>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.Security.VerificationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。 <paramref name="innerException" /> パラメーターが null でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Text.StringBuilder">
      <summary>可変型の文字列を表します。 このクラスは継承できません。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor">
      <summary>
        <see cref="T:System.Text.StringBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32)">
      <summary>指定した容量を使用して、<see cref="T:System.Text.StringBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="capacity">このインスタンスの推奨される開始サイズ。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)">
      <summary>指定した容量で始まり、指定した最大容量まで大きくなる <see cref="T:System.Text.StringBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="capacity">
        <see cref="T:System.Text.StringBuilder" /> の推奨される開始サイズ。</param>
      <param name="maxCapacity">現在の文字列が含むことができる最大文字数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxCapacity" /> が 1 未満で、<paramref name="capacity" /> が 0 未満です。または <paramref name="capacity" /> が <paramref name="maxCapacity" /> を超えています。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String)">
      <summary>指定した文字列を使用して、<see cref="T:System.Text.StringBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">インスタンスの値を初期化するために使用される文字列。 <paramref name="value" /> が null の場合、新しい <see cref="T:System.Text.StringBuilder" /> は空の文字列、つまり、<see cref="F:System.String.Empty" /> を含みます。</param>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32)">
      <summary>指定した文字列および容量を使用して、<see cref="T:System.Text.StringBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">インスタンスの値を初期化するために使用される文字列。 <paramref name="value" /> が null の場合、新しい <see cref="T:System.Text.StringBuilder" /> は空の文字列、つまり、<see cref="F:System.String.Empty" /> を含みます。</param>
      <param name="capacity">
        <see cref="T:System.Text.StringBuilder" /> の推奨される開始サイズ。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>指定した部分文字列および容量から <see cref="T:System.Text.StringBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">このインスタンスの値を初期化するために使用される部分文字列を含む文字列。 <paramref name="value" /> が null の場合、新しい <see cref="T:System.Text.StringBuilder" /> は空の文字列、つまり、<see cref="F:System.String.Empty" /> を含みます。</param>
      <param name="startIndex">
        <paramref name="value" /> における部分文字列の開始位置。</param>
      <param name="length">部分文字列の文字数。</param>
      <param name="capacity">
        <see cref="T:System.Text.StringBuilder" /> の推奨される開始サイズ。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> が 0 未満です。 または <paramref name="startIndex" /> に <paramref name="length" /> を加算した値が、<paramref name="value" /> 内にない位置を示しています。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Boolean)">
      <summary>指定した Boolean 値の文字列形式をこのインスタンスに追加します。</summary>
      <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="value">追加する Boolean 型の値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Byte)">
      <summary>指定した 8 ビット符号なし整数の文字列形式をこのインスタンスに追加します。</summary>
      <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="value">追加する値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char)">
      <summary>指定した Unicode 文字の文字列形式をこのインスタンスに追加します。</summary>
      <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="value">追加する Unicode 文字。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char,System.Int32)">
      <summary>Unicode 文字の文字列形式の、指定した数のコピーをこのインスタンスに追加します。</summary>
      <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="value">追加する文字。</param>
      <param name="repeatCount">
        <paramref name="value" /> を追加する回数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="repeatCount" /> が 0 未満です。 または このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <exception cref="T:System.OutOfMemoryException">メモリが不足しています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[])">
      <summary>指定した配列内の Unicode 文字の文字列形式をこのインスタンスに追加します。</summary>
      <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="value">追加する文字の配列。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)">
      <summary>Unicode 文字の指定した部分配列の文字列形式をこのインスタンスに追加します。</summary>
      <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="value">文字配列。</param>
      <param name="startIndex">
        <paramref name="value" /> 内の開始位置。</param>
      <param name="charCount">追加する文字数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が null であり、<paramref name="startIndex" /> と <paramref name="charCount" /> が 0 以外の値です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> が 0 未満です。 または <paramref name="startIndex" /> が 0 未満です。 または <paramref name="startIndex" /> + <paramref name="charCount" /> が <paramref name="value" /> の長さを超えています。 または このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Decimal)">
      <summary>指定した 10 進数の文字列形式をこのインスタンスに追加します。</summary>
      <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="value">追加する値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Double)">
      <summary>指定した倍精度浮動小数点数の文字列形式をこのインスタンスに追加します。</summary>
      <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="value">追加する値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int16)">
      <summary>指定した 16 ビット符号付き整数の文字列形式をこのインスタンスに追加します。</summary>
      <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="value">追加する値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int32)">
      <summary>指定した 32 ビット符号付き整数の文字列形式をこのインスタンスに追加します。</summary>
      <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="value">追加する値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int64)">
      <summary>指定した 64 ビット符号付き整数の文字列形式をこのインスタンスに追加します。</summary>
      <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="value">追加する値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Object)">
      <summary>指定したオブジェクトの文字列形式をこのインスタンスに追加します。</summary>
      <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="value">追加するオブジェクト。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.SByte)">
      <summary>指定した 8 ビット符号付き整数の文字列形式をこのインスタンスに追加します。</summary>
      <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="value">追加する値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Single)">
      <summary>指定した単精度浮動小数点数の文字列形式をこのインスタンスに追加します。</summary>
      <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="value">追加する値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String)">
      <summary>指定した文字列のコピーをこのインスタンスに追加します。</summary>
      <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="value">追加する文字列。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)">
      <summary>指定した部分文字列のコピーをこのインスタンスに追加します。</summary>
      <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="value">追加する部分文字列を含む文字列。</param>
      <param name="startIndex">
        <paramref name="value" /> における部分文字列の開始位置。</param>
      <param name="count">
        <paramref name="value" /> 内の追加する文字数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が null であり、<paramref name="startIndex" /> と <paramref name="count" /> が 0 以外の値です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> が 0 未満です。 または <paramref name="startIndex" /> が 0 未満です。 または <paramref name="startIndex" /> + <paramref name="count" /> が <paramref name="value" /> の長さを超えています。 または このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt16)">
      <summary>指定した 16 ビット符号なし整数の文字列形式をこのインスタンスに追加します。</summary>
      <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="value">追加する値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt32)">
      <summary>指定した 32 ビット符号なし整数の文字列形式をこのインスタンスに追加します。</summary>
      <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="value">追加する値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt64)">
      <summary>指定した 64 ビット符号なし整数の文字列形式をこのインスタンスに追加します。</summary>
      <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="value">追加する値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>0 個以上の書式項目を含んでいる複合書式指定文字列を処理することで返される文字列を、このインスタンスに付加します。 各書式項目は、指定された書式プロバイダーを使用した、パラメーター配列内の対応する引数の文字列形式に置換されます。</summary>
      <returns>追加操作が完了した後のこのインスタンスへの参照。 追加操作の完了後、このインスタンスには、操作前に存在していたデータの末尾に <paramref name="format" /> のコピーが付加されたものが含まれます。このコピーでは、書式指定が、対応するオブジェクト引数の文字列形式に置換されています。</returns>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <param name="format">複合書式指定文字列 (「解説」を参照)。</param>
      <param name="args">書式指定するオブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> が無効です。 または 書式項目のインデックスが 0 より小さいか、<paramref name="args" /> 配列の長さ以上です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">文字列を展開すると、長さが <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])">
      <summary>0 個以上の書式項目を含んでいる複合書式指定文字列を処理することで返される文字列を、このインスタンスに付加します。 各書式項目は、パラメーター配列内の対応するオブジェクト引数の文字列形式に置換されます。</summary>
      <returns>
        <paramref name="format" /> が追加されたこのインスタンスへの参照。 <paramref name="format" /> の各書式項目は、対応するオブジェクト引数の文字列形式に置換されます。</returns>
      <param name="format">複合書式指定文字列 (「解説」を参照)。</param>
      <param name="args">書式指定するオブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> または <paramref name="args" /> が null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> が無効です。 または 書式項目のインデックスが 0 より小さいか、<paramref name="args" /> 配列の長さ以上です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">文字列を展開すると、長さが <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendLine">
      <summary>既定の行終端記号を現在の <see cref="T:System.Text.StringBuilder" /> オブジェクトの末尾に追加します。</summary>
      <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendLine(System.String)">
      <summary>指定した文字列のコピーと既定の行終端記号を、現在の <see cref="T:System.Text.StringBuilder" /> オブジェクトの末尾に追加します。</summary>
      <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="value">追加する文字列。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.StringBuilder.Capacity">
      <summary>現在のインスタンスによって割り当てられたメモリに格納できる最大文字数を取得または設定します。</summary>
      <returns>現在のインスタンスによって割り当てられたメモリに格納できる最大文字数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">設定操作に指定された値がこのインスタンスの現在の長さを下回っています。 または 設定操作に指定された値が最大容量を超えています。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.StringBuilder.Chars(System.Int32)">
      <summary>このインスタンス内の指定した文字位置の文字を取得または設定します。</summary>
      <returns>
        <paramref name="index" /> 位置の Unicode 文字。</returns>
      <param name="index">文字の位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">文字の設定中、<paramref name="index" /> はこのインスタンスの境界外にあります。</exception>
      <exception cref="T:System.IndexOutOfRangeException">文字の取得中、<paramref name="index" /> はこのインスタンスの境界外にあります。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Clear">
      <summary>現在の <see cref="T:System.Text.StringBuilder" /> インスタンスからすべての文字を削除します。</summary>
      <returns>
        <see cref="P:System.Text.StringBuilder.Length" /> が 0 (ゼロ) であるオブジェクト。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>このインスタンスの指定したセグメントにある文字を、特定の <see cref="T:System.Char" /> 配列の指定したセグメントにコピーします。</summary>
      <param name="sourceIndex">このインスタンスにおける文字のコピーの開始位置。 インデックスの値は、0 から始まります。</param>
      <param name="destination">文字のコピー先となる配列。</param>
      <param name="destinationIndex">
        <paramref name="destination" /> における文字のコピーの開始位置。 インデックスの値は、0 から始まります。</param>
      <param name="count">コピーする文字数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" />、<paramref name="destinationIndex" />、または <paramref name="count" /> が 0 未満です。 または <paramref name="sourceIndex" /> がこのインスタンスの長さを超えています。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceIndex" /> + <paramref name="count" /> がこのインスタンスの長さを超えています。 または <paramref name="destinationIndex" /> + <paramref name="count" /> が <paramref name="destination" /> の長さを超えています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.EnsureCapacity(System.Int32)">
      <summary>このインスタンスの <see cref="T:System.Text.StringBuilder" /> の容量が、指定した値以上になるようにします。</summary>
      <returns>このインスタンスの新しい容量。</returns>
      <param name="capacity">必要な最小容量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> が 0 未満です。 または このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Equals(System.Text.StringBuilder)">
      <summary>対象のインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
      <returns>このインスタンスと <paramref name="sb" /> が同じ文字列、<see cref="P:System.Text.StringBuilder.Capacity" /> 値、および <see cref="P:System.Text.StringBuilder.MaxCapacity" /> 値を保持している場合は true。それ以外の場合は false。</returns>
      <param name="sb">対象のインスタンスと比較する対象のオブジェクト、または null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Boolean)">
      <summary>Boolean 値の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
      <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="index">このインスタンスにおける挿入の開始位置。</param>
      <param name="value">挿入する値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が、0 未満か、このインスタンスの長さを超えています。</exception>
      <exception cref="T:System.OutOfMemoryException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Byte)">
      <summary>指定した 8 ビット符号なし整数の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
      <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="index">このインスタンスにおける挿入の開始位置。</param>
      <param name="value">挿入する値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が、0 未満か、このインスタンスの長さを超えています。</exception>
      <exception cref="T:System.OutOfMemoryException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char)">
      <summary>指定した Unicode 文字の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
      <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="index">このインスタンスにおける挿入の開始位置。</param>
      <param name="value">挿入する値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が、0 未満か、このインスタンスの長さを超えています。 または このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[])">
      <summary>指定した Unicode 文字の配列の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
      <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="index">このインスタンスにおける挿入の開始位置。</param>
      <param name="value">挿入する文字配列。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が、0 未満か、このインスタンスの長さを超えています。 または このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>Unicode 文字の指定した部分配列の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
      <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="index">このインスタンスにおける挿入の開始位置。</param>
      <param name="value">文字配列。</param>
      <param name="startIndex">
        <paramref name="value" /> 内の開始インデックス。</param>
      <param name="charCount">挿入する文字数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が null であり、<paramref name="startIndex" /> と <paramref name="charCount" /> が 0 以外の値です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />、<paramref name="startIndex" />、または <paramref name="charCount" /> が 0 未満です。 または <paramref name="index" /> がこのインスタンスの長さを超えています。 または <paramref name="startIndex" /> に <paramref name="charCount" /> を加算した値が、<paramref name="value" /> 内にない位置を示しています。 または このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Decimal)">
      <summary>10 進数の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
      <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="index">このインスタンスにおける挿入の開始位置。</param>
      <param name="value">挿入する値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が、0 未満か、このインスタンスの長さを超えています。</exception>
      <exception cref="T:System.OutOfMemoryException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Double)">
      <summary>倍精度浮動小数点数の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
      <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="index">このインスタンスにおける挿入の開始位置。</param>
      <param name="value">挿入する値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が、0 未満か、このインスタンスの長さを超えています。</exception>
      <exception cref="T:System.OutOfMemoryException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int16)">
      <summary>指定した 16 ビット符号付き整数の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
      <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="index">このインスタンスにおける挿入の開始位置。</param>
      <param name="value">挿入する値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が、0 未満か、このインスタンスの長さを超えています。</exception>
      <exception cref="T:System.OutOfMemoryException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int32)">
      <summary>指定した 32 ビット符号付き整数の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
      <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="index">このインスタンスにおける挿入の開始位置。</param>
      <param name="value">挿入する値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が、0 未満か、このインスタンスの長さを超えています。</exception>
      <exception cref="T:System.OutOfMemoryException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int64)">
      <summary>64 ビット符号付き整数の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
      <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="index">このインスタンスにおける挿入の開始位置。</param>
      <param name="value">挿入する値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が、0 未満か、このインスタンスの長さを超えています。</exception>
      <exception cref="T:System.OutOfMemoryException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Object)">
      <summary>オブジェクトの文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
      <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="index">このインスタンスにおける挿入の開始位置。</param>
      <param name="value">挿入するオブジェクト、または null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が、0 未満か、このインスタンスの長さを超えています。</exception>
      <exception cref="T:System.OutOfMemoryException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.SByte)">
      <summary>指定した 8 ビット符号付き整数の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
      <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="index">このインスタンスにおける挿入の開始位置。</param>
      <param name="value">挿入する値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が、0 未満か、このインスタンスの長さを超えています。</exception>
      <exception cref="T:System.OutOfMemoryException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Single)">
      <summary>単精度浮動小数点数の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
      <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="index">このインスタンスにおける挿入の開始位置。</param>
      <param name="value">挿入する値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が、0 未満か、このインスタンスの長さを超えています。</exception>
      <exception cref="T:System.OutOfMemoryException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String)">
      <summary>文字列をこのインスタンスの指定した文字位置に挿入します。</summary>
      <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="index">このインスタンスにおける挿入の開始位置。</param>
      <param name="value">挿入する文字列。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が、0 未満か、このインスタンスの現在の長さを超えています。 または この <see cref="T:System.Text.StringBuilder" /> オブジェクトの現在の長さと <paramref name="value" /> の長さを足した値が <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)">
      <summary>指定した文字列の 1 つ以上のコピーをこのインスタンスの指定した文字位置に挿入します。</summary>
      <returns>挿入が完了した後のこのインスタンスへの参照。</returns>
      <param name="index">このインスタンスにおける挿入の開始位置。</param>
      <param name="value">挿入する文字列。</param>
      <param name="count">
        <paramref name="value" /> を挿入する回数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が、0 未満か、このインスタンスの現在の長さを超えています。 または <paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.OutOfMemoryException">この <see cref="T:System.Text.StringBuilder" /> オブジェクトの現在の長さと、<paramref name="value" /> に <paramref name="count" /> をかけたものを足した値が、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt16)">
      <summary>16 ビット符号なし整数の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
      <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="index">このインスタンスにおける挿入の開始位置。</param>
      <param name="value">挿入する値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が、0 未満か、このインスタンスの長さを超えています。</exception>
      <exception cref="T:System.OutOfMemoryException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt32)">
      <summary>32 ビット符号なし整数の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
      <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="index">このインスタンスにおける挿入の開始位置。</param>
      <param name="value">挿入する値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が、0 未満か、このインスタンスの長さを超えています。</exception>
      <exception cref="T:System.OutOfMemoryException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt64)">
      <summary>64 ビット符号なし整数の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
      <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="index">このインスタンスにおける挿入の開始位置。</param>
      <param name="value">挿入する値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が、0 未満か、このインスタンスの長さを超えています。</exception>
      <exception cref="T:System.OutOfMemoryException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.StringBuilder.Length">
      <summary>現在の <see cref="T:System.Text.StringBuilder" /> オブジェクトの長さを取得または設定します。</summary>
      <returns>このインスタンスの長さ。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">set 操作に指定された値が 0 より小さいか、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.StringBuilder.MaxCapacity">
      <summary>このインスタンスの最大容量を取得します。</summary>
      <returns>このインスタンスが保持できる最大文字数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)">
      <summary>このインスタンスから、指定した範囲の文字を削除します。</summary>
      <returns>削除操作が完了した後のこのインスタンスへの参照。</returns>
      <param name="startIndex">このインスタンスにおける 0 から始まる削除の開始位置。</param>
      <param name="length">削除する文字数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> または <paramref name="length" /> が 0 未満か、または <paramref name="startIndex" /> に <paramref name="length" /> を加算した値がこのインスタンスの長さを超えています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char)">
      <summary>このインスタンスに出現する指定文字をすべて、別に指定した文字に置換します。</summary>
      <returns>
        <paramref name="oldChar" /> が <paramref name="newChar" /> に置換されたこのインスタンスへの参照。</returns>
      <param name="oldChar">置換する文字。</param>
      <param name="newChar">
        <paramref name="oldChar" /> を置換する文字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)">
      <summary>このインスタンスの部分文字列に出現するすべての指定した文字を、別の指定した文字に置換します。</summary>
      <returns>
        <paramref name="startIndex" /> から <paramref name="startIndex" /> + <paramref name="count" /> -1 までの範囲内で、<paramref name="oldChar" /> が <paramref name="newChar" /> に置換されたこのインスタンスへの参照。</returns>
      <param name="oldChar">置換する文字。</param>
      <param name="newChar">
        <paramref name="oldChar" /> を置換する文字。</param>
      <param name="startIndex">このインスタンスにおける部分文字列の開始位置。</param>
      <param name="count">部分文字列の長さ。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> に <paramref name="count" /> を加算した値が、このインスタンスの値の長さを超えています。 または <paramref name="startIndex" /> または <paramref name="count" /> が 0 未満です。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String)">
      <summary>このインスタンスに出現するすべての指定した文字列を、別の指定した文字列に置換します。</summary>
      <returns>
        <paramref name="oldValue" /> のすべてのインスタンスが <paramref name="newValue" /> に置換されたこのインスタンスへの参照。</returns>
      <param name="oldValue">置換する文字列。</param>
      <param name="newValue">
        <paramref name="oldValue" /> を置換する文字列、または null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> の長さがゼロです。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>このインスタンスの部分文字列に出現するすべての指定した文字列を、別の指定した文字列に置換します。</summary>
      <returns>
        <paramref name="startIndex" /> から <paramref name="startIndex" /> に <paramref name="count" /> を加算した値 - 1 までの範囲内で、<paramref name="oldValue" /> のすべてのインスタンスが <paramref name="newValue" /> に置換されたこのインスタンスへの参照。</returns>
      <param name="oldValue">置換する文字列。</param>
      <param name="newValue">
        <paramref name="oldValue" /> を置換する文字列、または null。</param>
      <param name="startIndex">このインスタンスにおける部分文字列の開始位置。</param>
      <param name="count">部分文字列の長さ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> の長さがゼロです。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> または <paramref name="count" /> が 0 未満です。 または <paramref name="startIndex" /> と <paramref name="count" /> を足した数が、このインスタンス内にない文字位置を示しています。 または このインスタンスの値を増やすと、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.ToString">
      <summary>このインスタンスの値を <see cref="T:System.String" /> に変換します。</summary>
      <returns>このインスタンスと同じ値の文字列。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.ToString(System.Int32,System.Int32)">
      <summary>このインスタンスの部分文字列の値を <see cref="T:System.String" /> に変換します。</summary>
      <returns>このインスタンスの指定した部分文字列と同じ値の文字列。</returns>
      <param name="startIndex">このインスタンス内の部分文字列の開始位置。</param>
      <param name="length">部分文字列の長さ。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> または <paramref name="length" /> が 0 未満です。 または <paramref name="startIndex" /> と <paramref name="length" /> の合計値が、現在のインスタンスの長さを超えています。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Threading.LazyThreadSafetyMode">
      <summary>
        <see cref="T:System.Lazy`1" /> インスタンスが複数のスレッド間のアクセスを同期する方法を指定します。</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
      <summary>ロックは、シングル スレッドだけがスレッド セーフな方法で <see cref="T:System.Lazy`1" /> インスタンスを初期化できるようにするために使用されます。 初期化メソッド (初期化メソッドがない場合は既定のコンストラクター) がロックを内部的に使用すると、デッドロックが発生する可能性があります。 初期化メソッドを指定する <see cref="T:System.Lazy`1" /> コンストラクターを使用した場合 (<paramref name="valueFactory" /> パラメーター)、<see cref="P:System.Lazy`1.Value" /> プロパティを最初に呼び出したときにこの初期化メソッドが例外をスローすると (または例外の処理に失敗すると)、その例外はキャッシュされ、これ以降の <see cref="P:System.Lazy`1.Value" /> プロパティの呼び出しで再びスローされます。 初期化メソッドを指定しない <see cref="T:System.Lazy`1" /> コンストラクターを使用する場合、<paramref name="T" /> の既定のコンストラクターによってスローされる例外はキャッシュされません。 その場合、以降の <see cref="P:System.Lazy`1.Value" /> プロパティの呼び出しで <see cref="T:System.Lazy`1" /> インスタンスを正常に初期化できる可能性があります。 初期化メソッドが <see cref="T:System.Lazy`1" /> インスタンスの <see cref="P:System.Lazy`1.Value" /> プロパティに再帰的にアクセスすると、<see cref="T:System.InvalidOperationException" /> がスローされます。</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.None">
      <summary>
        <see cref="T:System.Lazy`1" /> インスタンスはスレッド セーフではありません。このインスタンスが複数のスレッドからアクセスされる場合の動作は未定義です。 このモードは、高パフォーマンスが重要で、<see cref="T:System.Lazy`1" /> インスタンスが複数のスレッドから初期化されないことが保証されている場合にのみ使用してください。 初期化メソッドを指定する <see cref="T:System.Lazy`1" /> コンストラクターを使用した場合 (<paramref name="valueFactory" /> パラメーター)、<see cref="P:System.Lazy`1.Value" /> プロパティを最初に呼び出したときにこの初期化メソッドが例外をスローすると (または例外の処理に失敗すると)、その例外はキャッシュされ、これ以降の <see cref="P:System.Lazy`1.Value" /> プロパティの呼び出しで再びスローされます。 初期化メソッドを指定しない <see cref="T:System.Lazy`1" /> コンストラクターを使用する場合、<paramref name="T" /> の既定のコンストラクターによってスローされる例外はキャッシュされません。 その場合、以降の <see cref="P:System.Lazy`1.Value" /> プロパティの呼び出しで <see cref="T:System.Lazy`1" /> インスタンスを正常に初期化できる可能性があります。 初期化メソッドが <see cref="T:System.Lazy`1" /> インスタンスの <see cref="P:System.Lazy`1.Value" /> プロパティに再帰的にアクセスすると、<see cref="T:System.InvalidOperationException" /> がスローされます。</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
      <summary>複数のスレッドが同時に <see cref="T:System.Lazy`1" /> インスタンスを初期化しようとすると、すべてのスレッドで初期化メソッド (初期化メソッドがない場合は既定のコンストラクター) の実行が許可されます。 最初に初期化を完了したスレッドが <see cref="T:System.Lazy`1" /> インスタンスの値を設定します。 この値は、初期化メソッドを同時に実行していたその他すべてのスレッドに返されます。ただし、この初期化メソッドがそれらのスレッドで例外をスローする場合は除きます。 競合するスレッドによって作成された <paramref name="T" /> のインスタンスは破棄されます。 初期化メソッドが任意のスレッドで例外をスローすると、その例外はスレッド上の <see cref="P:System.Lazy`1.Value" /> プロパティまたに反映されます。 例外はキャッシュされません。 <see cref="P:System.Lazy`1.IsValueCreated" /> プロパティの値は false のままになります。その後、例外がスローされたスレッドまたは他のスレッドが <see cref="P:System.Lazy`1.Value" /> プロパティを呼び出すと、初期化メソッドは再実行されます。 初期化メソッドが <see cref="T:System.Lazy`1" /> インスタンスの <see cref="P:System.Lazy`1.Value" /> プロパティに再帰的にアクセスする場合、例外はスローされません。</summary>
    </member>
    <member name="T:System.Threading.Timeout">
      <summary>無限タイムアウト間隔を指定する定数を格納します。 このクラスは継承できません。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Threading.Timeout.Infinite">
      <summary>無期限の待機期間を指定するために使用される定数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Threading.Timeout.InfiniteTimeSpan">
      <summary>
        <see cref="T:System.TimeSpan" /> パラメーターを許可するメソッドに、無期限の待機期間を指定するために使用される定数。</summary>
    </member>
    <member name="T:System.Threading.WaitHandle">
      <summary>共有リソースへの排他アクセスの待機に使用するオペレーティング システム固有のオブジェクトをカプセル化します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.#ctor">
      <summary>
        <see cref="T:System.Threading.WaitHandle" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose">
      <summary>
        <see cref="T:System.Threading.WaitHandle" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose(System.Boolean)">
      <summary>派生クラスでオーバーライドされると、<see cref="T:System.Threading.WaitHandle" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
      <param name="explicitDisposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true。アンマネージ リソースだけを解放する場合は false。</param>
    </member>
    <member name="F:System.Threading.WaitHandle.InvalidHandle">
      <summary>無効なネイティブ オペレーティング システム ハンドルを表します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
      <summary>指定した配列内のすべての要素がシグナルを受信するまで待機します。</summary>
      <returns>
        <paramref name="waitHandles" /> 内のすべての要素がシグナルを受信した場合は true。それ以外の場合は、待機を続けます。</returns>
      <param name="waitHandles">現在のインスタンスが待機する対象のオブジェクトを格納している WaitHandle 配列。 この配列には、同一オブジェクトに対する複数の参照を含めることはできません。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> パラメーターが null です。または <paramref name="waitHandles" /> 配列内の 1 つ以上のオブジェクトが null です。 または .NET Framework のバージョンが 2.0 以降であるにもかかわらず、<paramref name="waitHandles" /> が要素のない配列です。</exception>
      <exception cref="T:System.DuplicateWaitObjectException">Windows ストア アプリのための .NET または汎用性のあるクラス ライブラリで、基本クラスの例外 <see cref="T:System.ArgumentException" /> を代わりにキャッチします。 <paramref name="waitHandles" /> 配列に、重複する要素が格納されています。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 内のオブジェクト数がシステムによって許可されている数を超えています。 または 現在のスレッドのスレッド プロシージャに <see cref="T:System.STAThreadAttribute" /> 属性が適用され、<paramref name="waitHandles" /> に複数の要素が格納されています。</exception>
      <exception cref="T:System.ApplicationException">.NET Framework のバージョンが 1.0 または 1.1 であるにもかかわらず、<paramref name="waitHandles" /> が要素のない配列です。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">スレッドがミューテックスを解放せずに終了したため、待機が終了しました。 この例外は、Windows 98 および Windows Millennium Edition ではスローされません。</exception>
      <exception cref="T:System.InvalidOperationException">別のアプリケーション ドメインでは、<paramref name="waitHandles" /> 配列に <see cref="T:System.Threading.WaitHandle" /> の透過プロキシが含まれます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
      <summary>
        <see cref="T:System.Int32" /> 値を使用して時間間隔を指定し、指定した配列内のすべての要素がシグナルを受信するまで待機します。</summary>
      <returns>
        <paramref name="waitHandles" /> 内のすべての要素がシグナルを受信した場合は true。それ以外の場合は false。</returns>
      <param name="waitHandles">現在のインスタンスが待機する対象のオブジェクトを格納している WaitHandle 配列。 この配列には、同一オブジェクトに対する複数の参照 (重複) を含めることはできません。</param>
      <param name="millisecondsTimeout">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> パラメーターが null です。 または <paramref name="waitHandles" /> 配列内の 1 つ以上のオブジェクトが null です。 または <paramref name="waitHandles" /> は要素のない配列です。</exception>
      <exception cref="T:System.DuplicateWaitObjectException">Windows ストア アプリのための .NET または汎用性のあるクラス ライブラリで、基本クラスの例外 <see cref="T:System.ArgumentException" /> を代わりにキャッチします。 <paramref name="waitHandles" /> 配列に、重複する要素が格納されています。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 内のオブジェクト数がシステムによって許可されている数を超えています。 または 現在のスレッドのスレッド プロシージャに <see cref="T:System.STAThreadAttribute" /> 属性が適用され、<paramref name="waitHandles" /> に複数の要素が格納されています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> が -1 以外の負数です。-1 は無制限のタイムアウトを表します。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">スレッドがミューテックスを解放せずに終了したため、待機が完了しました。 この例外は、Windows 98 および Windows Millennium Edition ではスローされません。</exception>
      <exception cref="T:System.InvalidOperationException">別のアプリケーション ドメインでは、<paramref name="waitHandles" /> 配列に <see cref="T:System.Threading.WaitHandle" /> の透過プロキシが含まれます。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
      <summary>
        <see cref="T:System.TimeSpan" /> 値を使用して時間間隔を指定し、指定した配列内のすべての要素がシグナルを受信するまで待機します。</summary>
      <returns>
        <paramref name="waitHandles" /> 内のすべての要素がシグナルを受信した場合は true。それ以外の場合は false。</returns>
      <param name="waitHandles">現在のインスタンスが待機する対象のオブジェクトを格納している WaitHandle 配列。 この配列には、同一オブジェクトに対する複数の参照を含めることはできません。</param>
      <param name="timeout">待機するミリ秒数を表す <see cref="T:System.TimeSpan" />。無制限に待機する場合は、-1 ミリ秒を表す <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> パラメーターが null です。 または <paramref name="waitHandles" /> 配列内の 1 つ以上のオブジェクトが null です。 または <paramref name="waitHandles" /> は要素のない配列です。</exception>
      <exception cref="T:System.DuplicateWaitObjectException">Windows ストア アプリのための .NET または汎用性のあるクラス ライブラリで、基本クラスの例外 <see cref="T:System.ArgumentException" /> を代わりにキャッチします。 <paramref name="waitHandles" /> 配列に、重複する要素が格納されています。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 内のオブジェクト数がシステムによって許可されている数を超えています。 または 現在のスレッドのスレッド プロシージャに <see cref="T:System.STAThreadAttribute" /> 属性が適用され、<paramref name="waitHandles" /> に複数の要素が格納されています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> が -1 ミリ秒以外の負数です。-1 は無制限のタイムアウトを表します。 または <paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">スレッドがミューテックスを解放せずに終了したため、待機が終了しました。 この例外は、Windows 98 および Windows Millennium Edition ではスローされません。</exception>
      <exception cref="T:System.InvalidOperationException">別のアプリケーション ドメインでは、<paramref name="waitHandles" /> 配列に <see cref="T:System.Threading.WaitHandle" /> の透過プロキシが含まれます。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
      <summary>指定した配列内のいずれかの要素がシグナルを受信するまで待機します。</summary>
      <returns>待機を実行するオブジェクトの配列インデックス。</returns>
      <param name="waitHandles">現在のインスタンスが待機する対象のオブジェクトを格納している WaitHandle 配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> パラメーターが null です。 または <paramref name="waitHandles" /> 配列内の 1 つ以上のオブジェクトが null です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 内のオブジェクト数がシステムによって許可されている数を超えています。</exception>
      <exception cref="T:System.ApplicationException">.NET Framework のバージョンが 1.0 または 1.1 であるにもかかわらず、<paramref name="waitHandles" /> が要素のない配列です。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">スレッドがミューテックスを解放せずに終了したため、待機が完了しました。 この例外は、Windows 98 および Windows Millennium Edition ではスローされません。</exception>
      <exception cref="T:System.ArgumentException">.NET Framework のバージョンが 2.0 以降であるにもかかわらず、<paramref name="waitHandles" /> が要素のない配列です。</exception>
      <exception cref="T:System.InvalidOperationException">別のアプリケーション ドメインでは、<paramref name="waitHandles" /> 配列に <see cref="T:System.Threading.WaitHandle" /> の透過プロキシが含まれます。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
      <summary>32 ビット符号付き整数を使用して時間間隔を指定し、指定した配列内のいずれかの要素がシグナルを受信するまで待機します。</summary>
      <returns>待機を実行したオブジェクトの配列インデックス。つまり、待機を実行したオブジェクトがない場合や <paramref name="millisecondsTimeout" /> で渡された時間間隔と等しい場合は <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> となります。</returns>
      <param name="waitHandles">現在のインスタンスが待機する対象のオブジェクトを格納している WaitHandle 配列。</param>
      <param name="millisecondsTimeout">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> パラメーターが null です。 または <paramref name="waitHandles" /> 配列内の 1 つ以上のオブジェクトが null です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 内のオブジェクト数がシステムによって許可されている数を超えています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> が -1 以外の負数です。-1 は無制限のタイムアウトを表します。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">スレッドがミューテックスを解放せずに終了したため、待機が完了しました。 この例外は、Windows 98 および Windows Millennium Edition ではスローされません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> は要素のない配列です。</exception>
      <exception cref="T:System.InvalidOperationException">別のアプリケーション ドメインでは、<paramref name="waitHandles" /> 配列に <see cref="T:System.Threading.WaitHandle" /> の透過プロキシが含まれます。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
      <summary>
        <see cref="T:System.TimeSpan" /> を使用して時間間隔を指定し、指定した配列内のいずれかの要素がシグナルを受信するまで待機します。</summary>
      <returns>待機を実行したオブジェクトの配列インデックス。つまり、待機を実行したオブジェクトがない場合や <paramref name="timeout" /> で渡された時間間隔と等しい場合は <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> となります。</returns>
      <param name="waitHandles">現在のインスタンスが待機する対象のオブジェクトを格納している WaitHandle 配列。</param>
      <param name="timeout">待機するミリ秒数を表す <see cref="T:System.TimeSpan" />。無制限に待機する場合は、-1 ミリ秒を表す <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> パラメーターが null です。 または <paramref name="waitHandles" /> 配列内の 1 つ以上のオブジェクトが null です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 内のオブジェクト数がシステムによって許可されている数を超えています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> が -1 ミリ秒以外の負数です。-1 は無制限のタイムアウトを表します。 または <paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">スレッドがミューテックスを解放せずに終了したため、待機が完了しました。 この例外は、Windows 98 および Windows Millennium Edition ではスローされません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> は要素のない配列です。</exception>
      <exception cref="T:System.InvalidOperationException">別のアプリケーション ドメインでは、<paramref name="waitHandles" /> 配列に <see cref="T:System.Threading.WaitHandle" /> の透過プロキシが含まれます。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne">
      <summary>現在の <see cref="T:System.Threading.WaitHandle" /> が信号を受信するまで、現在のスレッドをブロックします。</summary>
      <returns>現在のインスタンスがシグナルを受け取った場合は true。 現在のインスタンスがシグナルを受信しない場合は、<see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> はシグナルが受信されるまで待機を続けます。</returns>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは既に破棄されています。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">スレッドがミューテックスを解放せずに終了したため、待機が完了しました。 この例外は、Windows 98 および Windows Millennium Edition ではスローされません。</exception>
      <exception cref="T:System.InvalidOperationException">別のアプリケーション ドメインでは、現在のインスタンスは <see cref="T:System.Threading.WaitHandle" /> の透過プロキシです。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
      <summary>32 ビット符号付き整数を使用して時間間隔を指定し、現在の <see cref="T:System.Threading.WaitHandle" /> が信号を受信するまで、現在のスレッドをブロックします。</summary>
      <returns>現在のインスタンスがシグナルを受け取る場合は true。それ以外の場合は false。</returns>
      <param name="millisecondsTimeout">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは既に破棄されています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> が -1 以外の負数です。-1 は無制限のタイムアウトを表します。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">スレッドがミューテックスを解放せずに終了したため、待機が完了しました。 この例外は、Windows 98 および Windows Millennium Edition ではスローされません。</exception>
      <exception cref="T:System.InvalidOperationException">別のアプリケーション ドメインでは、現在のインスタンスは <see cref="T:System.Threading.WaitHandle" /> の透過プロキシです。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
      <summary>
        <see cref="T:System.TimeSpan" /> を使用して時間間隔を指定し、現在のインスタンスがシグナルを受信するまで現在のスレッドをブロックします。</summary>
      <returns>現在のインスタンスがシグナルを受け取る場合は true。それ以外の場合は false。</returns>
      <param name="timeout">待機するミリ秒数を表す <see cref="T:System.TimeSpan" />。無制限に待機する場合は、-1 ミリ秒を表す <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは既に破棄されています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> が -1 ミリ秒以外の負数です。-1 は無制限のタイムアウトを表します。 または <paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">スレッドがミューテックスを解放せずに終了したため、待機が完了しました。 この例外は、Windows 98 および Windows Millennium Edition ではスローされません。</exception>
      <exception cref="T:System.InvalidOperationException">別のアプリケーション ドメインでは、現在のインスタンスは <see cref="T:System.Threading.WaitHandle" /> の透過プロキシです。</exception>
    </member>
    <member name="F:System.Threading.WaitHandle.WaitTimeout">
      <summary>待機ハンドルがシグナル状態になる前に <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> 操作がタイムアウトになったことを示します。 このフィールドは定数です。</summary>
      <filterpriority>1</filterpriority>
    </member>
  </members>
</doc>