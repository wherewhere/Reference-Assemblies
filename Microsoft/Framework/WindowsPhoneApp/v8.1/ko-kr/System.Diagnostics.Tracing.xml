<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Diagnostics.Tracing</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.Tracing.EventAttribute">
      <summary>이벤트에 대한 추가 이벤트 스키마 정보를 지정합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventAttribute.#ctor(System.Int32)">
      <summary>지정된 이벤트 식별자를 사용하여 <see cref="T:System.Diagnostics.Tracing.EventAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="eventId">이벤트의 이벤트 식별자입니다.</param>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventAttribute.EventId">
      <summary>이벤트의 식별자를 가져오거나 설정합니다.</summary>
      <returns>이벤트 식별자입니다. 이 값은 0보다 커야 합니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventAttribute.Keywords">
      <summary>이벤트에 대한 키워드를 가져오거나 설정합니다.</summary>
      <returns>열거형 값의 비트 조합입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventAttribute.Level">
      <summary>이벤트의 수준을 가져오거나 설정합니다.</summary>
      <returns>이벤트 수준을 지정하는 열거형 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventAttribute.Message">
      <summary>이벤트에 대한 메시지를 가져오거나 설정합니다.</summary>
      <returns>이벤트의 메시지입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventAttribute.Opcode">
      <summary>이벤트의 작업 코드를 가져오거나 설정합니다.</summary>
      <returns>작업 코드를 지정하는 열거형 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventAttribute.Task">
      <summary>이벤트의 작업을 가져오거나 설정합니다.</summary>
      <returns>이벤트에 대한 작업입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventAttribute.Version">
      <summary>이벤트 버전을 가져오거나 설정합니다.</summary>
      <returns>이벤트의 버전입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.Tracing.EventCommand">
      <summary>
        <see cref="M:System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)" /> 콜백에 전달되는 명령(<see cref="P:System.Diagnostics.Tracing.EventCommandEventArgs.Command" /> 속성)에 대해 설명합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventCommand.Disable">
      <summary>이벤트를 사용하지 않도록 설정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventCommand.Enable">
      <summary>이벤트를 사용하도록 설정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventCommand.SendManifest">
      <summary>매니페스트를 보냅니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventCommand.Update">
      <summary>이벤트를 업데이트합니다.</summary>
    </member>
    <member name="T:System.Diagnostics.Tracing.EventCommandEventArgs">
      <summary>
        <see cref="M:System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)" /> 콜백의 인수를 제공합니다.</summary>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventCommandEventArgs.Arguments">
      <summary>콜백에 대한 인수 배열을 가져옵니다.</summary>
      <returns>콜백 인수의 배열입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventCommandEventArgs.Command">
      <summary>콜백 명령을 가져옵니다.</summary>
      <returns>콜백 명령입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventCommandEventArgs.DisableEvent(System.Int32)">
      <summary>지정된 식별자가 있는 이벤트를 사용하지 않도록 설정합니다.</summary>
      <returns>
        <paramref name="eventId" />가 범위에 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="eventId">사용하지 않도록 설정할 이벤트의 식별자입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventCommandEventArgs.EnableEvent(System.Int32)">
      <summary>지정된 식별자가 있는 이벤트를 사용하도록 설정합니다.</summary>
      <returns>
        <paramref name="eventId" />가 범위에 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="eventId">사용하도록 설정할 이벤트의 식별자입니다.</param>
    </member>
    <member name="T:System.Diagnostics.Tracing.EventKeywords">
      <summary>이벤트에 적용되는 표준 키워드를 정의합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventKeywords.AuditFailure">
      <summary>모든 실패한 보안 감사 이벤트에 연결됩니다. 이 키워드는 보안 로그의 이벤트에 사용합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventKeywords.AuditSuccess">
      <summary>모든 성공적인 보안 감사 이벤트에 연결됩니다. 이 키워드는 보안 로그의 이벤트에 사용합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventKeywords.CorrelationHint">
      <summary>관련 작업 ID(상관 관계 ID)가 계산된 값이고 실제 GUID가 아니므로 고유하지 않을 수 있는 경우 전송 이벤트에 연결됩니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventKeywords.EventLogClassic">
      <summary>RaiseEvent 함수를 사용하여 발생한 이벤트에 연결됩니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventKeywords.None">
      <summary>이벤트를 게시할 때 키워드에 따라 필터링하지 않습니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventKeywords.Sqm">
      <summary>모든 SQM(Service Quality Mechanism) 이벤트에 연결됩니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventKeywords.WdiContext">
      <summary>모든 WDI(Windows Diagnostic Infrastructure) 컨텍스트 이벤트에 연결됩니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventKeywords.WdiDiagnostic">
      <summary>모든 WDI(Windows Diagnostic Infrastructure) 진단 이벤트에 연결됩니다.</summary>
    </member>
    <member name="T:System.Diagnostics.Tracing.EventLevel">
      <summary>이벤트의 수준을 식별합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventLevel.Critical">
      <summary>이 수준은 중대한 작업 실패를 일으킨 심각한 오류에 해당합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventLevel.Error">
      <summary>이 수준은 문제를 알리는 표준 오류를 추가합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventLevel.Informational">
      <summary>이 수준은 오류가 아닌 정보 이벤트 또는 메시지를 추가합니다. 이러한 이벤트를 통해 응용 프로그램의 진행률이나 상태를 추적할 수 있습니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventLevel.LogAlways">
      <summary>이벤트에서 수준 필터링을 수행하지 않습니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventLevel.Verbose">
      <summary>이 수준은 길이가 긴 이벤트 또는 메시지를 추가합니다. 모든 이벤트가 기록되도록 합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventLevel.Warning">
      <summary>이 수준은 경고 이벤트를 추가합니다(예: 디스크 용량이 거의 꽉 찰 때 게시되는 이벤트).</summary>
    </member>
    <member name="T:System.Diagnostics.Tracing.EventListener">
      <summary>이벤트 소스에서 이벤트를 활성화 및 비활성화하기 위한 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventListener.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.Tracing.EventListener" /> 클래스의 새 인스턴스를 만듭니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventListener.DisableEvents(System.Diagnostics.Tracing.EventSource)">
      <summary>지정된 이벤트 소스에 대한 모든 이벤트를 사용하지 않도록 설정합니다.</summary>
      <param name="eventSource">이벤트를 사용하지 않도록 설정하는 이벤트 소스입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventListener.Dispose">
      <summary>
        <see cref="T:System.Diagnostics.Tracing.EventListener" /> 클래스의 현재 인스턴스에서 사용하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel)">
      <summary>지정된 자세한 정도 수준 이하인 지정된 이벤트 소스에 대한 이벤트를 사용하도록 설정합니다.</summary>
      <param name="eventSource">이벤트를 사용하도록 설정하는 이벤트 소스입니다.</param>
      <param name="level">사용할 수 있는 이벤트 수준입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)">
      <summary>지정된 자세한 정도 수준 이하이고 일치하는 키워드 플래그가 있는 지정된 이벤트 소스에 대한 이벤트를 사용하도록 설정합니다.</summary>
      <param name="eventSource">이벤트를 사용하도록 설정하는 이벤트 소스입니다.</param>
      <param name="level">사용할 수 있는 이벤트 수준입니다.</param>
      <param name="matchAnyKeyword">이벤트를 사용하는 데 필요한 키워드 플래그입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>지정된 자세한 정도 수준 이하이고 일치하는 이벤트 키워드 플래그 및 일치하는 인수가 있는 지정된 이벤트 소스에 대한 이벤트를 사용하도록 설정합니다.</summary>
      <param name="eventSource">이벤트를 사용하도록 설정하는 이벤트 소스입니다.</param>
      <param name="level">사용할 수 있는 이벤트 수준입니다.</param>
      <param name="matchAnyKeyword">이벤트를 사용하는 데 필요한 키워드 플래그입니다.</param>
      <param name="arguments">이벤트를 사용하기 위해 일치해야 하는 인수입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventListener.EventSourceIndex(System.Diagnostics.Tracing.EventSource)">
      <summary>지정된 이벤트 소스를 나타내는 음수가 아닌 작은 숫자를 가져옵니다.</summary>
      <returns>지정된 이벤트 소스를 나타내는 음수가 아닌 작은 숫자입니다.</returns>
      <param name="eventSource">인덱스를 찾을 이벤트 소스입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)">
      <summary>이벤트 수신기가 만들어질 때와 새 이벤트 소스가 수신기에 연결될 때 모든 기존 이벤트 소스에 대해 호출됩니다.</summary>
      <param name="eventSource">이벤트 소스입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)">
      <summary>이벤트 수신기가 이벤트를 설정한 이벤트 소스에 의해 이벤트가 작성될 때마다 호출됩니다.</summary>
      <param name="eventData">이벤트를 설명하는 이벤트 인수입니다.</param>
    </member>
    <member name="T:System.Diagnostics.Tracing.EventOpcode">
      <summary>이벤트 소스가 이벤트에 추가하는 표준 작업 코드를 정의합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventOpcode.DataCollectionStart">
      <summary>추적 컬렉션 시작 이벤트입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventOpcode.DataCollectionStop">
      <summary>추적 컬렉션 중지 이벤트입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventOpcode.Extension">
      <summary>확장 이벤트입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventOpcode.Info">
      <summary>정보 이벤트로,</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventOpcode.Receive">
      <summary>응용 프로그램의 작업 중 하나가 데이터를 받을 때 게시되는 이벤트입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventOpcode.Reply">
      <summary>응용 프로그램의 작업이 이벤트에 응답한 후 게시되는 이벤트입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventOpcode.Resume">
      <summary>응용 프로그램에서 일시 중단된 작업이 다시 시작될 때 게시되는 이벤트입니다. 이벤트는 <see cref="F:System.Diagnostics.Tracing.EventOpcode.Suspend" /> 작업 코드가 있는 이벤트 다음에 나와야 합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventOpcode.Send">
      <summary>응용 프로그램의 작업 중 하나에서 데이터 또는 시스템 리소스를 다른 작업에 전송할 때 게시되는 이벤트입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventOpcode.Start">
      <summary>응용 프로그램에서 새 트랜잭션 또는 작업을 시작할 때 게시되는 이벤트입니다. <see cref="F:System.Diagnostics.Tracing.EventOpcode.Stop" /> 코드가 있는 이벤트를 방해하지 않으면서 <see cref="F:System.Diagnostics.Tracing.EventOpcode.Start" /> 코드가 있는 여러 이벤트가 서로를 따르는 경우에는 이 작업 코드를 다른 트랜잭션이나 동작 안에 포함할 수 있습니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventOpcode.Stop">
      <summary>응용 프로그램에서 작업 또는 트랜잭션이 종료될 때 게시되는 이벤트입니다. 이벤트는 <see cref="F:System.Diagnostics.Tracing.EventOpcode.Start" /> 작업 코드가 있는 이벤트 중 짝이 없는 마지막 이벤트에 대응됩니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventOpcode.Suspend">
      <summary>응용 프로그램의 작업이 일시 중지될 때 게시되는 이벤트입니다.</summary>
    </member>
    <member name="T:System.Diagnostics.Tracing.EventSource">
      <summary>ETW(Windows용 이벤트 추적) 이벤트를 만들 수 있는 기능을 제공합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.Tracing.EventSource" /> 클래스의 새 인스턴스를 만듭니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.Diagnostics.Tracing.EventSource" /> 클래스의 새 인스턴스를 만들고 기본 Windows 코드에서 오류가 발생할 때 예외를 throw할지 여부를 지정합니다.</summary>
      <param name="throwOnEventWriteErrors">기본 Windows 코드에서 오류가 발생할 때 예외를 throw하려면 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventSource.ConstructionException">
      <summary>이벤트 소스 생성 중에 throw된 모든 예외를 가져옵니다.</summary>
      <returns>이벤트 소스 생성 중에 throw된 예외 또는 예외가 throw되지 않은 경우 null입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventSource.CurrentThreadActivityId">
      <summary>현재 스레드의 작업 ID를 가져옵니다.</summary>
      <returns>현재 스레드의 작업 ID입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.Dispose">
      <summary>
        <see cref="T:System.Diagnostics.Tracing.EventSource" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Diagnostics.Tracing.EventSource" /> 클래스에 사용되는 관리되지 않는 리소스를 해제하고 선택적으로 관리되는 리소스를 해제합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 true로 설정하고, 관리되지 않는 리소스만 해제하려면 false로 설정합니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.Finalize">
      <summary>가비지 수집기에서 개체 회수하기 전에 <see cref="T:System.Diagnostics.Tracing.EventSource" /> 개체에서 리소스를 해제하고 다른 정리 작업을 수행할 수 있게 합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String)">
      <summary>현재 이벤트 소스와 연결된 XML 매니페스트의 문자열을 반환합니다.</summary>
      <returns>XML 데이터 문자열입니다.</returns>
      <param name="eventSourceType">이벤트 소스의 형식입니다.</param>
      <param name="assemblyPathToIncludeInManifest">매니페스트에 포함할 .dll 파일의 경로입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.GetGuid(System.Type)">
      <summary>이 이벤트 소스 구현에 대한 고유 식별자를 가져옵니다.</summary>
      <returns>이 이벤트 소스 유형에 대한 고유 식별자입니다.</returns>
      <param name="eventSourceType">이벤트 소스의 형식입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.GetName(System.Type)">
      <summary>이벤트 소스의 이름을 가져옵니다.</summary>
      <returns>이벤트 소스의 이름입니다. 기본값은 클래스의 단순한 이름입니다.</returns>
      <param name="eventSourceType">이벤트 소스의 형식입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.GetSources">
      <summary>응용 프로그램 도메인에 대한 모든 이벤트 소스의 스냅숏을 가져옵니다.</summary>
      <returns>응용 프로그램 도메인에 있는 모든 이벤트 소스의 열거형입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventSource.Guid">
      <summary>이벤트 소스에 대한 고유 식별자입니다.</summary>
      <returns>이벤트 소스에 대한 고유 식별자입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.IsEnabled">
      <summary>현재 이벤트 소스를 사용할 수 있는지 여부를 확인합니다.</summary>
      <returns>현재 이벤트 소스를 사용할 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)">
      <summary>지정된 수준 및 키워드가 있는 현재 이벤트 소스를 사용할 수 있는지 여부를 확인합니다.</summary>
      <returns>이벤트 소스를 사용할 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="level">이벤트 소스의 수준입니다.</param>
      <param name="keywords">이벤트 소스의 키워드입니다.</param>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventSource.Name">
      <summary>이벤트 소스에서 파생되는 클래스의 이름입니다.</summary>
      <returns>파생된 클래스의 이름입니다.  기본값은 클래스의 단순한 이름입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)">
      <summary>현재 이벤트 소스가 컨트롤러에 의해 업데이트되면 호출됩니다.</summary>
      <param name="command">이벤트에 대한 인수입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventCommand,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>명령을 지정된 이벤트 소스로 보냅니다.</summary>
      <param name="eventSource">명령을 보낼 이벤트 소스입니다.</param>
      <param name="command">보낼 이벤트 명령입니다.</param>
      <param name="commandArguments">이벤트 명령에 대한 인수입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)">
      <summary>현재 스레드의 작업 ID를 설정합니다.</summary>
      <param name="activityId">현재 스레드의 새 작업 ID 또는 현재 스레드에 대한 작업이 다른 작업과 연결되지 않았음을 나타내는 <see cref="F:System.Guid.Empty" />입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid,System.Guid@)">
      <summary>현재 스레드에서 작업 ID를 설정하고 이전 작업 ID를 반환합니다.</summary>
      <param name="activityId">현재 스레드의 새 작업 ID 또는 현재 스레드에 대한 작업이 다른 작업과 연결되지 않았음을 나타내는 <see cref="F:System.Guid.Empty" />입니다.</param>
      <param name="oldActivityThatWillContinue">이 메서드가 결과를 반환할 때는 현재 스레드의 이전 작업 ID가 포함됩니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.ToString">
      <summary>현재 이벤트 소스 인스턴스에 대한 문자열 표현을 가져옵니다.</summary>
      <returns>현재 이벤트 소스를 식별하는 이름 및 고유 식별자입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)">
      <summary>제공된 이벤트 식별자를 사용하여 이벤트를 씁니다.</summary>
      <param name="eventId">이벤트 식별자입니다. 이 값은 0보다 커야 합니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32)">
      <summary>제공된 이벤트 식별자와 32비트 정수 인수를 사용하여 이벤트를 씁니다.</summary>
      <param name="eventId">이벤트 식별자입니다. 이 값은 0보다 커야 합니다.</param>
      <param name="arg1">정수 인수입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32)">
      <summary>제공된 이벤트 식별자와 32비트 정수 인수를 사용하여 이벤트를 씁니다.</summary>
      <param name="eventId">이벤트 식별자입니다. 이 값은 0보다 커야 합니다.</param>
      <param name="arg1">정수 인수입니다.</param>
      <param name="arg2">정수 인수입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>제공된 이벤트 식별자와 32비트 정수 인수를 사용하여 이벤트를 씁니다.</summary>
      <param name="eventId">이벤트 식별자입니다. 이 값은 0보다 커야 합니다.</param>
      <param name="arg1">정수 인수입니다.</param>
      <param name="arg2">정수 인수입니다.</param>
      <param name="arg3">정수 인수입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64)">
      <summary>제공된 이벤트 식별자와 64비트 정수 인수를 사용하여 이벤트를 씁니다.</summary>
      <param name="eventId">이벤트 식별자입니다. 이 값은 0보다 커야 합니다.</param>
      <param name="arg1">64비트 정수 인수입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64)">
      <summary>제공된 이벤트 식별자와 64비트 인수를 사용하여 이벤트를 씁니다.</summary>
      <param name="eventId">이벤트 식별자입니다. 이 값은 0보다 커야 합니다.</param>
      <param name="arg1">64비트 정수 인수입니다.</param>
      <param name="arg2">64비트 정수 인수입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64,System.Int64)">
      <summary>제공된 이벤트 식별자와 64비트 인수를 사용하여 이벤트를 씁니다.</summary>
      <param name="eventId">이벤트 식별자입니다. 이 값은 0보다 커야 합니다.</param>
      <param name="arg1">64비트 정수 인수입니다.</param>
      <param name="arg2">64비트 정수 인수입니다.</param>
      <param name="arg3">64비트 정수 인수입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Object[])">
      <summary>제공된 이벤트 식별자와 인수 배열을 사용하여 이벤트를 씁니다.</summary>
      <param name="eventId">이벤트 식별자입니다. 이 값은 0보다 커야 합니다.</param>
      <param name="args">개체의 배열입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String)">
      <summary>제공된 이벤트 식별자와 문자열 인수를 사용하여 이벤트를 씁니다.</summary>
      <param name="eventId">이벤트 식별자입니다. 이 값은 0보다 커야 합니다.</param>
      <param name="arg1">문자열 인수입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32)">
      <summary>제공된 이벤트 식별자와 인수를 사용하여 이벤트를 씁니다.</summary>
      <param name="eventId">이벤트 식별자입니다. 이 값은 0보다 커야 합니다.</param>
      <param name="arg1">문자열 인수입니다.</param>
      <param name="arg2">32비트 정수 인수입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32,System.Int32)">
      <summary>제공된 이벤트 식별자와 인수를 사용하여 이벤트를 씁니다.</summary>
      <param name="eventId">이벤트 식별자입니다. 이 값은 0보다 커야 합니다.</param>
      <param name="arg1">문자열 인수입니다.</param>
      <param name="arg2">32비트 정수 인수입니다.</param>
      <param name="arg3">32비트 정수 인수입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int64)">
      <summary>제공된 이벤트 식별자와 인수를 사용하여 이벤트를 씁니다.</summary>
      <param name="eventId">이벤트 식별자입니다. 이 값은 0보다 커야 합니다.</param>
      <param name="arg1">문자열 인수입니다.</param>
      <param name="arg2">64비트 정수 인수입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String)">
      <summary>제공된 이벤트 식별자와 문자열 인수를 사용하여 이벤트를 씁니다.</summary>
      <param name="eventId">이벤트 식별자입니다. 이 값은 0보다 커야 합니다.</param>
      <param name="arg1">문자열 인수입니다.</param>
      <param name="arg2">문자열 인수입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String,System.String)">
      <summary>제공된 이벤트 식별자와 문자열 인수를 사용하여 이벤트를 씁니다.</summary>
      <param name="eventId">이벤트 식별자입니다. 이 값은 0보다 커야 합니다.</param>
      <param name="arg1">문자열 인수입니다.</param>
      <param name="arg2">문자열 인수입니다.</param>
      <param name="arg3">문자열 인수입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)">
      <summary>제공된 이벤트 식별자 및 이벤트 데이터를 사용하여 새 <see cref="Overload:System.Diagnostics.Tracing.EventSource.WriteEvent" /> 오버로드를 만듭니다.</summary>
      <param name="eventId">이벤트 식별자입니다.</param>
      <param name="eventDataCount">이벤트 데이터 항목의 수입니다.</param>
      <param name="data">이벤트 데이터가 들어 있는 구조체입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])">
      <summary>현재 작업이 다른 작업과 연관되어 있음을 나타내는 이벤트를 기록합니다.</summary>
      <param name="eventId">
        <see cref="T:System.Diagnostics.Tracing.EventSource" /> 내에서 이 이벤트를 고유하게 식별하는 식별자입니다.</param>
      <param name="childActivityID">관련 작업 식별자입니다.</param>
      <param name="args">이벤트에 대한 데이터가 포함된 개체 배열입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)">
      <summary>현재 작업이 다른 작업과 연관되어 있음을 나타내는 이벤트를 기록합니다.</summary>
      <param name="eventId">
        <see cref="T:System.Diagnostics.Tracing.EventSource" /> 내에서 이 이벤트를 고유하게 식별하는 식별자입니다.</param>
      <param name="childActivityID">하위 작업 ID의 GUID에 대한 포인터입니다.</param>
      <param name="eventDataCount">
        <paramref name="data" /> 필드의 항목 수입니다.</param>
      <param name="data">이벤트 데이터 필드에서 첫 번째 항목에 대한 포인터입니다.</param>
    </member>
    <member name="T:System.Diagnostics.Tracing.EventSource.EventData">
      <summary>
        <see cref="M:System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)" /> 메서드를 사용하여 빠른 <see cref="Overload:System.Diagnostics.Tracing.EventSource.WriteEvent" /> 오버로드를 만들기 위한 이벤트 데이터를 제공합니다.</summary>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventSource.EventData.DataPointer">
      <summary>새 <see cref="Overload:System.Diagnostics.Tracing.EventSource.WriteEvent" /> 오버로드의 데이터에 대한 포인터를 가져오거나 설정합니다.</summary>
      <returns>데이터에 대한 포인터입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventSource.EventData.Size">
      <summary>새 <see cref="Overload:System.Diagnostics.Tracing.EventSource.WriteEvent" /> 오버로드의 페이로드 항목 수를 가져오거나 설정합니다.</summary>
      <returns>새 오버로드의 페이로드 항목 수입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.Tracing.EventSourceAttribute">
      <summary>ETW(Windows용 이벤트 추적) 이름이 이벤트 소스 클래스의 이름과 독립적으로 정의될 수 있도록 합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSourceAttribute.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.Tracing.EventSourceAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventSourceAttribute.Guid">
      <summary>이벤트 소스 식별자 가져오거나 설정합니다.</summary>
      <returns>이벤트 소스 식별자입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventSourceAttribute.LocalizationResources">
      <summary>지역화 리소스 파일의 이름을 가져오거나 설정합니다.</summary>
      <returns>지역화된 리소스 파일의 이름이거나, 지역화 리소스 파일이 없을 경우 null입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventSourceAttribute.Name">
      <summary>이벤트 소스의 이름을 가져오거나 설정합니다.</summary>
      <returns>이벤트 소스의 이름입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.Tracing.EventSourceException">
      <summary>ETW(Windows용 이벤트 추적) 중 오류가 발생한 경우 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSourceException.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.Tracing.EventSourceException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSourceException.#ctor(System.String)">
      <summary>지정된 오류 메시지를 사용하여 <see cref="T:System.Diagnostics.Tracing.EventSourceException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류를 설명하는 메시지입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSourceException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 근본 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Diagnostics.Tracing.EventSourceException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="innerException">현재 예외의 원인이 되는 예외이거나, 내부 예외를 지정하지 않았으면 null입니다.</param>
    </member>
    <member name="T:System.Diagnostics.Tracing.EventTask">
      <summary>이벤트에 적용되는 작업을 정의합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventTask.None">
      <summary>정의되어 있지 않은 작업입니다.</summary>
    </member>
    <member name="T:System.Diagnostics.Tracing.EventWrittenEventArgs">
      <summary>
        <see cref="M:System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)" /> 콜백에 데이터를 제공합니다.</summary>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.ActivityId">
      <summary>이벤트가 작성된 스레드의 작업 ID를 가져옵니다.</summary>
      <returns>이벤트가 작성된 스레드의 작업 ID입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.EventId">
      <summary>이벤트 식별자를 가져옵니다.</summary>
      <returns>이벤트 식별자입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.EventSource">
      <summary>이벤트 소스 개체를 가져옵니다.</summary>
      <returns>이벤트 소스 개체입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.Keywords">
      <summary>이벤트에 대한 키워드를 가져옵니다.</summary>
      <returns>이벤트에 대한 키워드입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.Level">
      <summary>이벤트의 수준을 가져옵니다.</summary>
      <returns>이벤트의 수준입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.Message">
      <summary>이벤트의 메시지를 가져옵니다.</summary>
      <returns>이벤트의 메시지입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.Opcode">
      <summary>이벤트의 작업 코드를 가져옵니다.</summary>
      <returns>이벤트의 작업 코드입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.Payload">
      <summary>이벤트의 페이로드를 가져옵니다.</summary>
      <returns>이벤트에 대한 페이로드입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.RelatedActivityId">
      <summary>현재 인스턴스에서 나타내는 작업과 관련된 작업의 식별자를 가져옵니다.</summary>
      <returns>관련 동작의 식별자이며, 관련 동작이 없는 경우 <see cref="F:System.Guid.Empty" />입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.Task">
      <summary>이벤트의 작업을 가져옵니다.</summary>
      <returns>이벤트에 대한 작업입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.Version">
      <summary>이벤트의 버전을 가져옵니다.</summary>
      <returns>이벤트의 버전입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.Tracing.NonEventAttribute">
      <summary>이벤트를 생성하지 않는 메서드를 식별합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Tracing.NonEventAttribute.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.Tracing.NonEventAttribute" /> 클래스의 새 인스턴스를 만듭니다.</summary>
    </member>
  </members>
</doc>