<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Core</name>
  </assembly>
  <members>
    <member name="T:System.Action`10">
      <summary>10 個のパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</summary>
      <param name="arg1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーター。</param>
      <param name="arg2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーター。</param>
      <param name="arg3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーター。</param>
      <param name="arg4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーター。</param>
      <param name="arg5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーター。</param>
      <param name="arg6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーター。</param>
      <param name="arg7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーター。</param>
      <param name="arg8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーター。</param>
      <param name="arg9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーター。</param>
      <param name="arg10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーター。</param>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。この型パラメーターは反変です。つまり、指定した種類または弱い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
    </member>
    <member name="T:System.Action`11">
      <summary>11 個のパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</summary>
      <param name="arg1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーター。</param>
      <param name="arg2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーター。</param>
      <param name="arg3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーター。</param>
      <param name="arg4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーター。</param>
      <param name="arg5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーター。</param>
      <param name="arg6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーター。</param>
      <param name="arg7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーター。</param>
      <param name="arg8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーター。</param>
      <param name="arg9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーター。</param>
      <param name="arg10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーター。</param>
      <param name="arg11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーター。</param>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。この型パラメーターは反変です。つまり、指定した種類または弱い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <typeparam name="T11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーターの型。</typeparam>
    </member>
    <member name="T:System.Action`12">
      <summary>12 個のパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</summary>
      <param name="arg1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーター。</param>
      <param name="arg2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーター。</param>
      <param name="arg3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーター。</param>
      <param name="arg4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーター。</param>
      <param name="arg5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーター。</param>
      <param name="arg6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーター。</param>
      <param name="arg7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーター。</param>
      <param name="arg8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーター。</param>
      <param name="arg9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーター。</param>
      <param name="arg10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーター。</param>
      <param name="arg11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーター。</param>
      <param name="arg12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーター。</param>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。この型パラメーターは反変です。つまり、指定した種類または弱い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <typeparam name="T11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーターの型。</typeparam>
      <typeparam name="T12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーターの型。</typeparam>
    </member>
    <member name="T:System.Action`13">
      <summary>13 個のパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</summary>
      <param name="arg1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーター。</param>
      <param name="arg2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーター。</param>
      <param name="arg3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーター。</param>
      <param name="arg4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーター。</param>
      <param name="arg5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーター。</param>
      <param name="arg6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーター。</param>
      <param name="arg7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーター。</param>
      <param name="arg8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーター。</param>
      <param name="arg9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーター。</param>
      <param name="arg10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーター。</param>
      <param name="arg11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーター。</param>
      <param name="arg12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーター。</param>
      <param name="arg13">このデリゲートによってカプセル化されるメソッドの第 13 パラメーター。</param>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。この型パラメーターは反変です。つまり、指定した種類または弱い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <typeparam name="T11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーターの型。</typeparam>
      <typeparam name="T12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーターの型。</typeparam>
      <typeparam name="T13">このデリゲートによってカプセル化されるメソッドの第 13 パラメーターの型。</typeparam>
    </member>
    <member name="T:System.Action`14">
      <summary>14 個のパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</summary>
      <param name="arg1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーター。</param>
      <param name="arg2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーター。</param>
      <param name="arg3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーター。</param>
      <param name="arg4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーター。</param>
      <param name="arg5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーター。</param>
      <param name="arg6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーター。</param>
      <param name="arg7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーター。</param>
      <param name="arg8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーター。</param>
      <param name="arg9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーター。</param>
      <param name="arg10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーター。</param>
      <param name="arg11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーター。</param>
      <param name="arg12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーター。</param>
      <param name="arg13">このデリゲートによってカプセル化されるメソッドの第 13 パラメーター。</param>
      <param name="arg14">このデリゲートによってカプセル化されるメソッドの第 14 パラメーター。</param>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。この型パラメーターは反変です。つまり、指定した種類または弱い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <typeparam name="T11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーターの型。</typeparam>
      <typeparam name="T12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーターの型。</typeparam>
      <typeparam name="T13">このデリゲートによってカプセル化されるメソッドの第 13 パラメーターの型。</typeparam>
      <typeparam name="T14">このデリゲートによってカプセル化されるメソッドの第 14 パラメーターの型。</typeparam>
    </member>
    <member name="T:System.Action`15">
      <summary>15 個のパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</summary>
      <param name="arg1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーター。</param>
      <param name="arg2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーター。</param>
      <param name="arg3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーター。</param>
      <param name="arg4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーター。</param>
      <param name="arg5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーター。</param>
      <param name="arg6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーター。</param>
      <param name="arg7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーター。</param>
      <param name="arg8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーター。</param>
      <param name="arg9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーター。</param>
      <param name="arg10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーター。</param>
      <param name="arg11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーター。</param>
      <param name="arg12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーター。</param>
      <param name="arg13">このデリゲートによってカプセル化されるメソッドの第 13 パラメーター。</param>
      <param name="arg14">このデリゲートによってカプセル化されるメソッドの第 14 パラメーター。</param>
      <param name="arg15">このデリゲートによってカプセル化されるメソッドの第 15 パラメーター。</param>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。この型パラメーターは反変です。つまり、指定した種類または弱い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <typeparam name="T11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーターの型。</typeparam>
      <typeparam name="T12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーターの型。</typeparam>
      <typeparam name="T13">このデリゲートによってカプセル化されるメソッドの第 13 パラメーターの型。</typeparam>
      <typeparam name="T14">このデリゲートによってカプセル化されるメソッドの第 14 パラメーターの型。</typeparam>
      <typeparam name="T15">このデリゲートによってカプセル化されるメソッドの第 15 パラメーターの型。</typeparam>
    </member>
    <member name="T:System.Action`16">
      <summary>16 個のパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</summary>
      <param name="arg1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーター。</param>
      <param name="arg2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーター。</param>
      <param name="arg3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーター。</param>
      <param name="arg4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーター。</param>
      <param name="arg5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーター。</param>
      <param name="arg6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーター。</param>
      <param name="arg7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーター。</param>
      <param name="arg8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーター。</param>
      <param name="arg9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーター。</param>
      <param name="arg10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーター。</param>
      <param name="arg11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーター。</param>
      <param name="arg12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーター。</param>
      <param name="arg13">このデリゲートによってカプセル化されるメソッドの第 13 パラメーター。</param>
      <param name="arg14">このデリゲートによってカプセル化されるメソッドの第 14 パラメーター。</param>
      <param name="arg15">このデリゲートによってカプセル化されるメソッドの第 15 パラメーター。</param>
      <param name="arg16">このデリゲートによってカプセル化されるメソッドの第 16 パラメーター。</param>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。この型パラメーターは反変です。つまり、指定した種類または弱い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <typeparam name="T11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーターの型。</typeparam>
      <typeparam name="T12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーターの型。</typeparam>
      <typeparam name="T13">このデリゲートによってカプセル化されるメソッドの第 13 パラメーターの型。</typeparam>
      <typeparam name="T14">このデリゲートによってカプセル化されるメソッドの第 14 パラメーターの型。</typeparam>
      <typeparam name="T15">このデリゲートによってカプセル化されるメソッドの第 15 パラメーターの型。</typeparam>
      <typeparam name="T16">このデリゲートによってカプセル化されるメソッドの第 16 パラメーターの型。</typeparam>
    </member>
    <member name="T:System.Action`9">
      <summary>9 つのパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</summary>
      <param name="arg1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーター。</param>
      <param name="arg2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーター。</param>
      <param name="arg3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーター。</param>
      <param name="arg4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーター。</param>
      <param name="arg5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーター。</param>
      <param name="arg6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーター。</param>
      <param name="arg7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーター。</param>
      <param name="arg8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーター。</param>
      <param name="arg9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーター。</param>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。この型パラメーターは反変です。つまり、指定した種類または弱い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
    </member>
    <member name="T:System.Func`10">
      <summary>9 個のパラメーターを受け取り、<paramref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
      <returns>このデリゲートによってカプセル化されるメソッドの戻り値。</returns>
      <param name="arg1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーター。</param>
      <param name="arg2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーター。</param>
      <param name="arg3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーター。</param>
      <param name="arg4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーター。</param>
      <param name="arg5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーター。</param>
      <param name="arg6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーター。</param>
      <param name="arg7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーター。</param>
      <param name="arg8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーター。</param>
      <param name="arg9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーター。</param>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。この型パラメーターは反変です。つまり、指定した種類または弱い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。この型パラメーターは共変です。つまり、指定した種類または強い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
    </member>
    <member name="T:System.Func`11">
      <summary>10 個のパラメーターを受け取り、<paramref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
      <returns>このデリゲートによってカプセル化されるメソッドの戻り値。</returns>
      <param name="arg1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーター。</param>
      <param name="arg2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーター。</param>
      <param name="arg3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーター。</param>
      <param name="arg4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーター。</param>
      <param name="arg5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーター。</param>
      <param name="arg6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーター。</param>
      <param name="arg7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーター。</param>
      <param name="arg8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーター。</param>
      <param name="arg9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーター。</param>
      <param name="arg10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーター。</param>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。この型パラメーターは反変です。つまり、指定した種類または弱い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。この型パラメーターは共変です。つまり、指定した種類または強い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
    </member>
    <member name="T:System.Func`12">
      <summary>11 個のパラメーターを受け取り、<paramref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
      <returns>このデリゲートによってカプセル化されるメソッドの戻り値。</returns>
      <param name="arg1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーター。</param>
      <param name="arg2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーター。</param>
      <param name="arg3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーター。</param>
      <param name="arg4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーター。</param>
      <param name="arg5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーター。</param>
      <param name="arg6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーター。</param>
      <param name="arg7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーター。</param>
      <param name="arg8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーター。</param>
      <param name="arg9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーター。</param>
      <param name="arg10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーター。</param>
      <param name="arg11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーター。</param>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。この型パラメーターは反変です。つまり、指定した種類または弱い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <typeparam name="T11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーターの型。</typeparam>
      <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。この型パラメーターは共変です。つまり、指定した種類または強い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
    </member>
    <member name="T:System.Func`13">
      <summary>12 個のパラメーターを受け取り、<paramref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
      <returns>このデリゲートによってカプセル化されるメソッドの戻り値。</returns>
      <param name="arg1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーター。</param>
      <param name="arg2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーター。</param>
      <param name="arg3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーター。</param>
      <param name="arg4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーター。</param>
      <param name="arg5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーター。</param>
      <param name="arg6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーター。</param>
      <param name="arg7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーター。</param>
      <param name="arg8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーター。</param>
      <param name="arg9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーター。</param>
      <param name="arg10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーター。</param>
      <param name="arg11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーター。</param>
      <param name="arg12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーター。</param>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。この型パラメーターは反変です。つまり、指定した種類または弱い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <typeparam name="T11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーターの型。</typeparam>
      <typeparam name="T12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーターの型。</typeparam>
      <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。この型パラメーターは共変です。つまり、指定した種類または強い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
    </member>
    <member name="T:System.Func`14">
      <summary>13 個のパラメーターを受け取り、<paramref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
      <returns>このデリゲートによってカプセル化されるメソッドの戻り値。</returns>
      <param name="arg1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーター。</param>
      <param name="arg2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーター。</param>
      <param name="arg3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーター。</param>
      <param name="arg4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーター。</param>
      <param name="arg5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーター。</param>
      <param name="arg6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーター。</param>
      <param name="arg7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーター。</param>
      <param name="arg8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーター。</param>
      <param name="arg9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーター。</param>
      <param name="arg10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーター。</param>
      <param name="arg11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーター。</param>
      <param name="arg12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーター。</param>
      <param name="arg13">このデリゲートによってカプセル化されるメソッドの第 13 パラメーター。</param>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。この型パラメーターは反変です。つまり、指定した種類または弱い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <typeparam name="T11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーターの型。</typeparam>
      <typeparam name="T12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーターの型。</typeparam>
      <typeparam name="T13">このデリゲートによってカプセル化されるメソッドの第 13 パラメーターの型。</typeparam>
      <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。この型パラメーターは共変です。つまり、指定した種類または強い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
    </member>
    <member name="T:System.Func`15">
      <summary>14 個のパラメーターを受け取り、<paramref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
      <returns>このデリゲートによってカプセル化されるメソッドの戻り値。</returns>
      <param name="arg1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーター。</param>
      <param name="arg2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーター。</param>
      <param name="arg3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーター。</param>
      <param name="arg4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーター。</param>
      <param name="arg5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーター。</param>
      <param name="arg6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーター。</param>
      <param name="arg7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーター。</param>
      <param name="arg8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーター。</param>
      <param name="arg9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーター。</param>
      <param name="arg10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーター。</param>
      <param name="arg11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーター。</param>
      <param name="arg12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーター。</param>
      <param name="arg13">このデリゲートによってカプセル化されるメソッドの第 13 パラメーター。</param>
      <param name="arg14">このデリゲートによってカプセル化されるメソッドの第 14 パラメーター。</param>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。この型パラメーターは反変です。つまり、指定した種類または弱い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <typeparam name="T11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーターの型。</typeparam>
      <typeparam name="T12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーターの型。</typeparam>
      <typeparam name="T13">このデリゲートによってカプセル化されるメソッドの第 13 パラメーターの型。</typeparam>
      <typeparam name="T14">このデリゲートによってカプセル化されるメソッドの第 14 パラメーターの型。</typeparam>
      <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。この型パラメーターは共変です。つまり、指定した種類または強い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
    </member>
    <member name="T:System.Func`16">
      <summary>15 個のパラメーターを受け取り、<paramref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
      <returns>このデリゲートによってカプセル化されるメソッドの戻り値。</returns>
      <param name="arg1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーター。</param>
      <param name="arg2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーター。</param>
      <param name="arg3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーター。</param>
      <param name="arg4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーター。</param>
      <param name="arg5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーター。</param>
      <param name="arg6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーター。</param>
      <param name="arg7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーター。</param>
      <param name="arg8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーター。</param>
      <param name="arg9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーター。</param>
      <param name="arg10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーター。</param>
      <param name="arg11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーター。</param>
      <param name="arg12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーター。</param>
      <param name="arg13">このデリゲートによってカプセル化されるメソッドの第 13 パラメーター。</param>
      <param name="arg14">このデリゲートによってカプセル化されるメソッドの第 14 パラメーター。</param>
      <param name="arg15">このデリゲートによってカプセル化されるメソッドの第 15 パラメーター。</param>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。この型パラメーターは反変です。つまり、指定した種類または弱い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <typeparam name="T11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーターの型。</typeparam>
      <typeparam name="T12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーターの型。</typeparam>
      <typeparam name="T13">このデリゲートによってカプセル化されるメソッドの第 13 パラメーターの型。</typeparam>
      <typeparam name="T14">このデリゲートによってカプセル化されるメソッドの第 14 パラメーターの型。</typeparam>
      <typeparam name="T15">このデリゲートによってカプセル化されるメソッドの第 15 パラメーターの型。</typeparam>
      <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。この型パラメーターは共変です。つまり、指定した種類または強い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
    </member>
    <member name="T:System.Func`17">
      <summary>16 個のパラメーターを受け取り、<paramref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
      <returns>このデリゲートによってカプセル化されるメソッドの戻り値。</returns>
      <param name="arg1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーター。</param>
      <param name="arg2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーター。</param>
      <param name="arg3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーター。</param>
      <param name="arg4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーター。</param>
      <param name="arg5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーター。</param>
      <param name="arg6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーター。</param>
      <param name="arg7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーター。</param>
      <param name="arg8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーター。</param>
      <param name="arg9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーター。</param>
      <param name="arg10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーター。</param>
      <param name="arg11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーター。</param>
      <param name="arg12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーター。</param>
      <param name="arg13">このデリゲートによってカプセル化されるメソッドの第 13 パラメーター。</param>
      <param name="arg14">このデリゲートによってカプセル化されるメソッドの第 14 パラメーター。</param>
      <param name="arg15">このデリゲートによってカプセル化されるメソッドの第 15 パラメーター。</param>
      <param name="arg16">このデリゲートによってカプセル化されるメソッドの第 16 パラメーター。</param>
      <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの第 1 パラメーターの型。この型パラメーターは反変です。つまり、指定した種類または弱い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
      <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの第 2 パラメーターの型。</typeparam>
      <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの第 3 パラメーターの型。</typeparam>
      <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの第 4 パラメーターの型。</typeparam>
      <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの第 5 パラメーターの型。</typeparam>
      <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの第 6 パラメーターの型。</typeparam>
      <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの第 7 パラメーターの型。</typeparam>
      <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの第 8 パラメーターの型。</typeparam>
      <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの第 9 パラメーターの型。</typeparam>
      <typeparam name="T10">このデリゲートによってカプセル化されるメソッドの第 10 パラメーターの型。</typeparam>
      <typeparam name="T11">このデリゲートによってカプセル化されるメソッドの第 11 パラメーターの型。</typeparam>
      <typeparam name="T12">このデリゲートによってカプセル化されるメソッドの第 12 パラメーターの型。</typeparam>
      <typeparam name="T13">このデリゲートによってカプセル化されるメソッドの第 13 パラメーターの型。</typeparam>
      <typeparam name="T14">このデリゲートによってカプセル化されるメソッドの第 14 パラメーターの型。</typeparam>
      <typeparam name="T15">このデリゲートによってカプセル化されるメソッドの第 15 パラメーターの型。</typeparam>
      <typeparam name="T16">このデリゲートによってカプセル化されるメソッドの第 16 パラメーターの型。</typeparam>
      <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。この型パラメーターは共変です。つまり、指定した種類または強い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1">
      <summary>値のセットを表します。</summary>
      <typeparam name="T">ハッシュ セット内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> クラスの新しいインスタンスを初期化します。初期化後のインスタンスの内容は空です。このセット型には既定の等値比較子が使用されます。</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> クラスの新しいインスタンスを初期化します。このセット型には既定の等値比較子が使用されます。指定されたコレクションからコピーされた要素が格納され、コピー対象の要素数を格納できるだけの十分な容量が確保されます。</summary>
      <param name="collection">新しいセットの要素のコピー元となるコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> クラスの新しいインスタンスを初期化します。このセット型には、指定された等値比較子が使用されます。指定されたコレクションからコピーされた要素が格納され、コピー対象の要素数を格納できるだけの十分な容量が確保されます。</summary>
      <param name="collection">新しいセットの要素のコピー元となるコレクション。</param>
      <param name="comparer">セット内の値を比較する際に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> の実装。このセット型に、既定の <see cref="T:System.Collections.Generic.EqualityComparer`1" /> の実装を使用する場合は null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> クラスの新しいインスタンスを初期化します。初期化後のインスタンスの内容は空です。このセット型には、指定された等値比較子が使用されます。</summary>
      <param name="comparer">セット内の値を比較する際に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> の実装。このセット型に、既定の <see cref="T:System.Collections.Generic.EqualityComparer`1" /> の実装を使用する場合は null。</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Add(`0)">
      <summary>指定された要素をセットに追加します。</summary>
      <returns>要素が <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトに追加される場合は true。要素が既に存在する場合は false。</returns>
      <param name="item">セットに追加する要素。</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトからすべての要素を削除します。</summary>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Comparer">
      <summary>セット内の値が等しいかどうかを調べるための <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> オブジェクトを取得します。</summary>
      <returns>セット内の値が等しいかどうかを調べるための <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Contains(`0)">
      <summary>指定した要素が <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトに含まれているかどうかを判断します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが指定された要素を含む場合は true。それ以外の場合は false。</returns>
      <param name="item">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクト内で検索する要素。</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[])">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトの要素を配列にコピーします。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトから要素がコピーされる 1 次元配列。配列のインデックスは 0 から始まっている必要があります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)">
      <summary>指定された配列インデックスを開始位置として、<see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトの要素を配列にコピーします。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトから要素がコピーされる 1 次元配列。配列のインデックスは 0 から始まっている必要があります。</param>
      <param name="arrayIndex">コピーの開始位置となる、<paramref name="array" /> の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> が、コピー先の <paramref name="array" /> の長さを超えています。または<paramref name="count" /> が、コピー先の <paramref name="array" /> のサイズを超えています。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>指定された配列インデックスを開始位置とし、<see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトから、指定された数の要素を配列にコピーします。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトから要素がコピーされる 1 次元配列。配列のインデックスは 0 から始まっている必要があります。</param>
      <param name="arrayIndex">コピーの開始位置となる、<paramref name="array" /> の 0 から始まるインデックス。</param>
      <param name="count">
        <paramref name="array" /> にコピーする要素の数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。または<paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> が、コピー先の <paramref name="array" /> の長さを超えています。または<paramref name="count" /> が、コピー先の <paramref name="array" /> の <paramref name="index" /> から末尾までに格納できる数を超えています。</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Count">
      <summary>セットに格納されている要素の数を取得します。</summary>
      <returns>セットに格納されている要素の数。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトから、指定されたコレクションに含まれる要素をすべて削除します。</summary>
      <param name="other">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトから削除する項目のコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトを反復処理する列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトの <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトを、そのオブジェクトと指定されたコレクションの両方に存在する要素だけが格納されるように変更します。</summary>
      <param name="other">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが、指定されたコレクションの真のサブセット (真部分集合) であるかどうかを判断します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが <paramref name="other" /> の真のサブセットである場合は true。それ以外の場合は false。</returns>
      <param name="other">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが、指定されたコレクションの真のスーパーセット (真上位集合) であるかどうかを判断します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが <paramref name="other" /> の真のスーパーセットである場合は true。それ以外の場合は false。</returns>
      <param name="other">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが、指定されたコレクションのサブセットであるかどうかを判断します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが <paramref name="other" /> のサブセットである場合は true。それ以外の場合は false。</returns>
      <param name="other">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが、指定されたコレクションのスーパーセットであるかどうかを判断します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが <paramref name="other" /> のスーパーセットである場合は true。それ以外の場合は false。</returns>
      <param name="other">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと指定されたコレクションとが共通の要素を共有しているかどうかを判断します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと<paramref name="other" /> との間に共通する要素が 1 つでも存在する場合は true。それ以外の場合は false。</returns>
      <param name="other">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Remove(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトから指定された要素を削除します。</summary>
      <returns>要素が見つかり、正常に削除された場合は true。それ以外の場合は false。このメソッドは、<paramref name="item" /> が <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトに見つからなかった場合にも false を返します。</returns>
      <param name="item">削除する要素。</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>指定の述語によって定義された条件に一致するすべての要素を <see cref="T:System.Collections.Generic.HashSet`1" /> コレクションから削除します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> コレクションから削除された要素数。</returns>
      <param name="match">削除する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと指定されたコレクションに同じ要素が存在するかどうかを判断します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが <paramref name="other" /> と等しい場合は true。それ以外の場合は false。</returns>
      <param name="other">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトを、そのオブジェクトと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納されるように変更します。</summary>
      <param name="other">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトに項目を追加します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトに追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> は読み取り専用です。</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>コレクションが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>コレクションが読み取り専用の場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる <see cref="T:System.Collections.IEnumerator" /> オブジェクトを返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TrimExcess">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトの容量を、そこに格納されている実際の要素数を最も近い実装に固有の値に切り上げて設定します。</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトを、そのオブジェクトと指定されたコレクションに存在するすべての要素が格納されるように変更します。</summary>
      <param name="other">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトの要素を列挙します。</summary>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> コレクション内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> オブジェクトによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.MoveNext">
      <summary>列挙子を <see cref="T:System.Collections.Generic.HashSet`1" /> コレクションの次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は true。列挙子がコレクションの末尾を越えた場合は false。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子が作成された後に、コレクションが変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>コレクション内の列挙子の現在位置にある、<see cref="T:System.Object" /> としての要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子が、コレクションの最初の要素の前、または最後の要素の後に位置しています。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException">列挙子が作成された後に、コレクションが変更されました。 </exception>
    </member>
    <member name="T:System.Dynamic.BinaryOperationBinder">
      <summary>呼び出しサイトでの動的二項演算を表し、バインディングのセマンティクスと、操作に関する詳細な情報を提供します。</summary>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>
        <see cref="T:System.Dynamic.BinaryOperationBinder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="operation">二項演算の種類。</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>動的二項演算のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的操作のターゲット。</param>
      <param name="args">動的操作の引数の配列。</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>ターゲットの動的オブジェクトがバインドできない場合に、動的二項演算のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的二項演算のターゲット。</param>
      <param name="arg">動的二項演算の右側のオペランド。</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>派生クラスでオーバーライドされた場合、ターゲットの動的オブジェクトがバインドできない場合に、動的二項演算のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的二項演算のターゲット。</param>
      <param name="arg">動的二項演算の右項のオペランド。</param>
      <param name="errorSuggestion">バインディングに失敗した場合のバインディングの結果または null。</param>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.Operation">
      <summary>二項演算の種類。</summary>
      <returns>二項演算の種類を表す <see cref="T:System.Linq.Expressions.ExpressionType" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.ReturnType">
      <summary>操作の結果の型。</summary>
      <returns>操作の結果の型。</returns>
    </member>
    <member name="T:System.Dynamic.BindingRestrictions">
      <summary>動的バインディングが有効な <see cref="T:System.Dynamic.DynamicMetaObject" /> の一連のバインディング制限を表します。</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})">
      <summary>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> インスタンスのリストのバインディング制限を 1 つのセットにまとめます。</summary>
      <returns>新しいバインディング制限のセット。</returns>
      <param name="contributingObjects">制限をまとめる <see cref="T:System.Dynamic.DynamicMetaObject" /> インスタンスのリスト。</param>
    </member>
    <member name="F:System.Dynamic.BindingRestrictions.Empty">
      <summary>空のバインディング制限のセットを表します。このフィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)">
      <summary>任意の不変のプロパティに関して式をチェックするバインディング制限を作成します。</summary>
      <returns>新しいバインディング制限。</returns>
      <param name="expression">制限を表す式。</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)">
      <summary>オブジェクト インスタンス ID に関して式をチェックするバインディング制限を作成します。</summary>
      <returns>新しいバインディング制限。</returns>
      <param name="expression">テストする式。</param>
      <param name="instance">テストする実際のオブジェクト インスタンス。</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)">
      <summary>ランタイム型 ID に関して式をチェックするバインディング制限を作成します。</summary>
      <returns>新しいバインディング制限。</returns>
      <param name="expression">テストする式。</param>
      <param name="type">テストする実際の型。</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)">
      <summary>バインディング制限のセットを現在のバインディング制限にマージします。</summary>
      <returns>新しいバインディング制限のセット。</returns>
      <param name="restrictions">現在のバインディング制限にマージするバインディング制限のセット。</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.ToExpression">
      <summary>バインディング制限を表す <see cref="T:System.Linq.Expressions.Expression" /> を作成します。</summary>
      <returns>制限を表す式ツリー。</returns>
    </member>
    <member name="T:System.Dynamic.CallInfo">
      <summary>動的バインディング プロセスの引数を定義します。</summary>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary>動的バインディング プロセスの引数を表す新しい CallInfo を作成します。</summary>
      <param name="argCount">引数の個数。</param>
      <param name="argNames">引数の名前。</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])">
      <summary>新しい PositionalArgumentInfo を作成します。</summary>
      <param name="argCount">引数の個数。</param>
      <param name="argNames">引数の名前。</param>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentCount">
      <summary>引数の個数。</summary>
      <returns>引数の個数。</returns>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentNames">
      <summary>引数の名前。</summary>
      <returns>引数名の読み取り専用コレクション。</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.Equals(System.Object)">
      <summary>指定された CallInfo インスタンスが現在のインスタンスと等しいかどうかを判断します。</summary>
      <returns>指定したインスタンスが現在のインスタンスと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在のインスタンスと比較する <see cref="T:System.Dynamic.CallInfo" /> のインスタンス。</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.GetHashCode">
      <summary>現在の <see cref="T:System.Dynamic.CallInfo" /> のハッシュ関数として機能します。</summary>
      <returns>現在の <see cref="T:System.Dynamic.CallInfo" /> のハッシュ コード。</returns>
    </member>
    <member name="T:System.Dynamic.ConvertBinder">
      <summary>呼び出しサイトでの動的変換操作を表し、バインディングのセマンティクスと、操作に関する詳細な情報を提供します。</summary>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.#ctor(System.Type,System.Boolean)">
      <summary>
        <see cref="T:System.Dynamic.ConvertBinder" /> の新しいインスタンスを初期化します。</summary>
      <param name="type">変換後の型。</param>
      <param name="explicit">明示的な変換を考慮する必要がある場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>動的変換操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的変換操作のターゲット。</param>
      <param name="args">動的変換操作の引数の配列。</param>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Explicit">
      <summary>明示的な変換を考慮する必要があるかどうかを示す値を取得します。</summary>
      <returns>明示的な変換がある場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject)">
      <summary>ターゲットの動的オブジェクトがバインドできない場合に、動的変換操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的変換操作のターゲット。</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>派生クラスでオーバーライドされた場合、ターゲットの動的オブジェクトがバインドできない場合に、動的変換操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的変換操作のターゲット。</param>
      <param name="errorSuggestion">バインディングに失敗した場合に使用するバインディングの結果または null。</param>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.ReturnType">
      <summary>操作の結果の型。</summary>
      <returns>操作の結果の型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Type">
      <summary>変換先の型。</summary>
      <returns>変換後の型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Dynamic.CreateInstanceBinder">
      <summary>呼び出しサイトでの動的作成操作を表し、バインディングのセマンティクスと、操作に関する詳細な情報を提供します。</summary>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>
        <see cref="T:System.Dynamic.CreateInstanceBinder" /> の新しいインスタンスを初期化します。</summary>
      <param name="callInfo">呼び出しサイトの引数のシグネチャ。</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>動的作成操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的作成操作のターゲット。</param>
      <param name="args">動的作成操作の引数の配列。</param>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.CallInfo">
      <summary>呼び出しサイトの引数のシグネチャを取得します。</summary>
      <returns>呼び出しサイトの引数のシグネチャ。</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>ターゲットの動的オブジェクトがバインドできない場合に、動的作成操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的作成操作のターゲット。</param>
      <param name="args">動的作成操作の引数。</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>派生クラスでオーバーライドされた場合、ターゲットの動的オブジェクトがバインドできない場合に、動的作成操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的作成操作のターゲット。</param>
      <param name="args">動的作成操作の引数。</param>
      <param name="errorSuggestion">バインディングに失敗した場合に使用するバインディングの結果または null。</param>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.ReturnType">
      <summary>操作の結果の型。</summary>
      <returns>操作の結果の型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Dynamic.DeleteIndexBinder">
      <summary>呼び出しサイトでの動的インデックス削除操作を表し、バインディングのセマンティクスと、操作に関する詳細な情報を提供します。</summary>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>
        <see cref="T:System.Dynamic.DeleteIndexBinder" /> の新しいインスタンスを初期化します。</summary>
      <param name="callInfo">呼び出しサイトの引数のシグネチャ。</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>動的インデックス削除操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的インデックス削除操作のターゲット。</param>
      <param name="args">動的インデックス削除操作の引数の配列。</param>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.CallInfo">
      <summary>呼び出しサイトの引数のシグネチャを取得します。</summary>
      <returns>呼び出しサイトの引数のシグネチャ。</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>ターゲットの動的オブジェクトがバインドできない場合に、動的インデックス削除操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的インデックス削除操作のターゲット。</param>
      <param name="indexes">動的インデックス削除操作の引数。</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>派生クラスでオーバーライドされた場合、ターゲットの動的オブジェクトがバインドできない場合に、動的インデックス削除操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的インデックス削除操作のターゲット。</param>
      <param name="indexes">動的インデックス削除操作の引数。</param>
      <param name="errorSuggestion">バインディングに失敗した場合に使用するバインディングの結果または null。</param>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.ReturnType">
      <summary>操作の結果の型。</summary>
      <returns>操作の結果の型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Dynamic.DeleteMemberBinder">
      <summary>呼び出しサイトでの動的メンバー削除操作を表し、バインディングのセマンティクスと、操作に関する詳細な情報を提供します。</summary>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>
        <see cref="T:System.Dynamic.DeleteIndexBinder" /> の新しいインスタンスを初期化します。</summary>
      <param name="name">削除するメンバーの名前。</param>
      <param name="ignoreCase">大文字と小文字を区別しないで名前を一致させる場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>動的メンバー削除操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的メンバー削除操作のターゲット。</param>
      <param name="args">動的メンバー削除操作の引数の配列。</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject)">
      <summary>ターゲットの動的オブジェクトがバインドできない場合に、動的メンバー削除操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的メンバー削除操作のターゲット。</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>派生クラスでオーバーライドされた場合、ターゲットの動的オブジェクトがバインドできない場合に、動的メンバー削除操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的メンバー削除操作のターゲット。</param>
      <param name="errorSuggestion">バインディングに失敗した場合に使用するバインディングの結果または null。</param>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.IgnoreCase">
      <summary>文字列の比較で、メンバー名の大文字と小文字を区別するかどうかを示す値を取得します。</summary>
      <returns>文字列比較で大文字と小文字を区別しない場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.Name">
      <summary>削除するメンバーの名前を取得します。</summary>
      <returns>削除するメンバーの名前。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.ReturnType">
      <summary>操作の結果の型。</summary>
      <returns>操作の結果の型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObject">
      <summary>動的バインディングと、動的バインディングに参加しているオブジェクトのバインディング ロジックを表します。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)">
      <summary>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="expression">動的バインディング プロセスにおいてこの <see cref="T:System.Dynamic.DynamicMetaObject" /> を表す式。</param>
      <param name="restrictions">バインディングが有効となるバインディング制限のセット。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)">
      <summary>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="expression">動的バインディング プロセスにおいてこの <see cref="T:System.Dynamic.DynamicMetaObject" /> を表す式。</param>
      <param name="restrictions">バインディングが有効となるバインディング制限のセット。</param>
      <param name="value">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> が表すランタイム値。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
      <summary>動的二項演算のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">動的な操作の詳細を表す、<see cref="T:System.Dynamic.BinaryOperationBinder" /> のインスタンス。</param>
      <param name="arg">二項演算の右辺を表す <see cref="T:System.Dynamic.DynamicMetaObject" /> のインスタンス。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
      <summary>動的変換操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">動的な操作の詳細を表す、<see cref="T:System.Dynamic.ConvertBinder" /> のインスタンス。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>動的インスタンス作成操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">動的な操作の詳細を表す、<see cref="T:System.Dynamic.CreateInstanceBinder" /> のインスタンス。</param>
      <param name="args">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> インスタンスの配列 (インスタンス作成操作に対する引数)。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>動的インデックス削除操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">動的な操作の詳細を表す、<see cref="T:System.Dynamic.DeleteIndexBinder" /> のインスタンス。</param>
      <param name="indexes">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> インスタンスの配列 (インデックス削除操作のインデックス)。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>動的メンバー削除操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">動的な操作の詳細を表す、<see cref="T:System.Dynamic.DeleteMemberBinder" /> のインスタンス。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>動的インデックス取得操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">動的な操作の詳細を表す、<see cref="T:System.Dynamic.GetIndexBinder" /> のインスタンス。</param>
      <param name="indexes">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> インスタンスの配列 (インデックス取得操作のインデックス)。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
      <summary>動的メンバー取得操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">動的な操作の詳細を表す、<see cref="T:System.Dynamic.GetMemberBinder" /> のインスタンス。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>動的呼び出し操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">動的な操作の詳細を表す、<see cref="T:System.Dynamic.InvokeBinder" /> のインスタンス。</param>
      <param name="args">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> インスタンスの配列 (呼び出し操作対する引数)。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>動的メンバー呼び出し操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">動的な操作の詳細を表す、<see cref="T:System.Dynamic.InvokeMemberBinder" /> のインスタンス。</param>
      <param name="args">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> インスタンスの配列 (メンバー呼び出し操作に対する引数)。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>動的インデックス設定操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">動的な操作の詳細を表す、<see cref="T:System.Dynamic.SetIndexBinder" /> のインスタンス。</param>
      <param name="indexes">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> インスタンスの配列 (インデックス設定操作のインデックス)。</param>
      <param name="value">インデックス設定操作の値を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
      <summary>動的メンバー設定操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">動的な操作の詳細を表す、<see cref="T:System.Dynamic.SetMemberBinder" /> のインスタンス。</param>
      <param name="value">メンバー設定操作の値を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
      <summary>動的単項演算のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">動的な操作の詳細を表す、<see cref="T:System.Dynamic.UnaryOperationBinder" /> のインスタンス。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)">
      <summary>指定されたオブジェクトのメタオブジェクトを作成します。</summary>
      <returns>指定されたオブジェクトが <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" /> を実装し、なおかつ (現在の AppDomain 外の) リモート オブジェクトではない場合、<see cref="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)" /> が返すオブジェクトの固有のメタオブジェクトが返されます。それ以外の場合は、制限のない通常のメタオブジェクトが新たに作成されて、返されます。</returns>
      <param name="value">メタオブジェクトの取得対象となるオブジェクト。</param>
      <param name="expression">動的バインディング プロセスにおいてこの <see cref="T:System.Dynamic.DynamicMetaObject" /> を表す式。</param>
    </member>
    <member name="F:System.Dynamic.DynamicMetaObject.EmptyMetaObjects">
      <summary>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 型の空の配列を表します。このフィールドは読み取り専用です。</summary>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Expression">
      <summary>動的バインディング プロセスにおいて <see cref="T:System.Dynamic.DynamicMetaObject" /> を表す式。</summary>
      <returns>動的バインディング プロセスにおいて <see cref="T:System.Dynamic.DynamicMetaObject" /> を表す式。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.GetDynamicMemberNames">
      <summary>すべての動的メンバー名の列挙値を返します。</summary>
      <returns>動的メンバー名のリスト。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.HasValue">
      <summary>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> にランタイム値を存在するかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> にランタイム値が存在する場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.LimitType">
      <summary>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> の制限型を取得します。</summary>
      <returns>ランタイム値が利用できる場合は <see cref="P:System.Dynamic.DynamicMetaObject.RuntimeType" />。それ以外の場合は <see cref="P:System.Dynamic.DynamicMetaObject.Expression" /> の型。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Restrictions">
      <summary>バインディングが有効となるバインディング制限のセット。</summary>
      <returns>バインディング制限のセット。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.RuntimeType">
      <summary>ランタイム値の <see cref="T:System.Type" /> を取得します。<see cref="T:System.Dynamic.DynamicMetaObject" /> に値が関連付けられていない場合は null です。</summary>
      <returns>ランタイム値の <see cref="T:System.Type" /> または null。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Value">
      <summary>この <see cref="T:System.Dynamic.DynamicMetaObject" /> によって表されるランタイム値。</summary>
      <returns>この <see cref="T:System.Dynamic.DynamicMetaObject" /> によって表されるランタイム値。</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObjectBinder">
      <summary>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> バインディング プロトコルに参加する動的呼び出しサイトのバインダー。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.#ctor">
      <summary>
        <see cref="T:System.Dynamic.DynamicMetaObjectBinder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>派生クラスでオーバーライドされた場合、動的操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的操作のターゲット。</param>
      <param name="args">動的操作の引数の配列。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>引数のセットに対して動的な操作のランタイム バインドを実行します。</summary>
      <returns>動的な操作の引数についてテストを実行し、テストに成功した場合は動的な操作を実行する式。後続の動的操作でテストが失敗した場合、Bind が再び呼び出され、新しい引数の型の新しい <see cref="T:System.Linq.Expressions.Expression" /> が生成されます。</returns>
      <param name="args">動的な操作の引数の配列。</param>
      <param name="parameters">バインド プロセスでの呼び出しサイトのパラメーターを表す <see cref="T:System.Linq.Expressions.ParameterExpression" /> インスタンスの配列。</param>
      <param name="returnLabel">動的なバインドの結果を返すために使用する LabelTarget。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>動的操作の引数のランタイム値がすべて計算されるまで、操作のバインディングを保留します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的操作のターゲット。</param>
      <param name="args">動的操作の引数の配列。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject[])">
      <summary>動的操作の引数のランタイム値がすべて計算されるまで、操作のバインディングを保留します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="args">動的操作の引数の配列。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.GetUpdateExpression(System.Type)">
      <summary>バインディングを更新する式を取得します。式のバインドが無効であることを示します。通常は、動的オブジェクトの "バージョン" が変更された場合に使用します。</summary>
      <returns>更新式。</returns>
      <param name="type">結果として得られる式の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ。任意の型を指定できます。</param>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObjectBinder.ReturnType">
      <summary>操作の結果の型。</summary>
      <returns>操作の結果の型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Dynamic.DynamicObject">
      <summary>実行時の動的な動作を指定するための基本クラスを提供します。このクラスは継承する必要があり、直接インスタンス化することはできません。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.#ctor">
      <summary>派生タイプが <see cref="T:System.Dynamic.DynamicObject" /> 型の新しいインスタンスを初期化できるようにします。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
      <summary>すべての動的メンバー名の列挙値を返します。</summary>
      <returns>動的メンバー名を含むシーケンス。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>動的な仮想メソッドにディスパッチする <see cref="T:System.Dynamic.DynamicMetaObject" /> を提供します。このオブジェクトを別の <see cref="T:System.Dynamic.DynamicMetaObject" /> の内部にカプセル化することにより、個々のアクションのカスタム動作を指定することができます。このメソッドは言語実装者向けの DLR (動的言語ランタイム) インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 型のオブジェクト。</returns>
      <param name="parameter">動的な仮想メソッドにディスパッチする <see cref="T:System.Dynamic.DynamicMetaObject" /> を表す式。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
      <summary>二項演算の実装を提供します。<see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、加算や乗算などの演算の動的な動作を指定できます。</summary>
      <returns>操作が成功した場合は true。それ以外の場合は false。このメソッドが false を返す場合、言語のランタイム バインダーが動作を決定します。(ほとんどの場合、言語固有のランタイム例外がスローされます。)</returns>
      <param name="binder">二項演算に関する情報を提供します。binder.Operation プロパティは、<see cref="T:System.Linq.Expressions.ExpressionType" /> オブジェクトを返します。たとえば、first および second が DynamicObject クラスから派生している sum = first + second ステートメントの場合、binder.Operation は ExpressionType.Add を返します。</param>
      <param name="arg">二項演算の右オペランド。たとえば、first および second が DynamicObject クラスから派生している sum = first + second ステートメントの場合、<paramref name="arg" /> は second と等価です。</param>
      <param name="result">二項演算の結果。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
      <summary>型変換演算の実装を提供します。<see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、オブジェクトの型を別の型に変換する演算の動的な動作を指定できます。</summary>
      <returns>操作が成功した場合は true。それ以外の場合は false。このメソッドが false を返す場合、言語のランタイム バインダーが動作を決定します。(ほとんどの場合、言語固有のランタイム例外がスローされます。)</returns>
      <param name="binder">変換演算に関する情報を提供します。binder.Type プロパティは、オブジェクトの変換後の型を提供します。たとえば、sampleObject が <see cref="T:System.Dynamic.DynamicObject" /> クラスから派生したクラスのインスタンスである C# の (String)sampleObject ステートメント (Visual Basic では CType(sampleObject, Type)) の場合、binder.Type は <see cref="T:System.String" /> 型を返します。binder.Explicit プロパティは、行われる変換の種類に関する情報を提供します。明示的な変換の場合は true、暗示的な変換の場合は false を返します。</param>
      <param name="result">型変換演算の結果。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
      <summary>動的オブジェクトの新しいインスタンスを初期化する演算の実装を提供します。このメソッドは、C# または Visual Basic で使用するためのものではありません。</summary>
      <returns>操作が成功した場合は true。それ以外の場合は false。このメソッドが false を返す場合、言語のランタイム バインダーが動作を決定します。(ほとんどの場合、言語固有のランタイム例外がスローされます。)</returns>
      <param name="binder">初期化演算に関する情報を提供します。</param>
      <param name="args">初期化中にオブジェクトに渡される引数。たとえば、SampleType が <see cref="T:System.Dynamic.DynamicObject" /> クラスから派生している型である new SampleType(100) 演算の場合、<paramref name="args[0]" /> と 100 は等価です。</param>
      <param name="result">初期化の結果。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
      <summary>インデックスを使用してオブジェクトを削除する演算の実装を提供します。このメソッドは、C# または Visual Basic で使用するためのものではありません。</summary>
      <returns>操作が成功した場合は true。それ以外の場合は false。このメソッドが false を返す場合、言語のランタイム バインダーが動作を決定します。(ほとんどの場合、言語固有のランタイム例外がスローされます。)</returns>
      <param name="binder">削除に関する情報を提供します。</param>
      <param name="indexes">削除するインデックス。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>オブジェクト メンバーを削除する演算の実装を提供します。このメソッドは、C# または Visual Basic で使用するためのものではありません。</summary>
      <returns>操作が成功した場合は true。それ以外の場合は false。このメソッドが false を返す場合、言語のランタイム バインダーが動作を決定します。(ほとんどの場合、言語固有のランタイム例外がスローされます。)</returns>
      <param name="binder">削除に関する情報を提供します。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary>インデックスを使用して値を取得する演算の実装を提供します。<see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、インデックス演算の動的な動作を指定できます。</summary>
      <returns>操作が成功した場合は true。それ以外の場合は false。このメソッドが false を返す場合、言語のランタイム バインダーが動作を決定します。(ほとんどの場合、ランタイム例外がスローされます。)</returns>
      <param name="binder">操作に関する情報を提供します。</param>
      <param name="indexes">演算に使用されるインデックス。たとえば、sampleObject が DynamicObject クラスから派生している C# の sampleObject[3] 演算 (Visual Basic では sampleObject(3)) の場合、<paramref name="indexes[0]" /> と 3 は等価です。</param>
      <param name="result">インデックス演算の結果。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>メンバー値を取得する演算の実装を提供します。<see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、プロパティ値の取得などの演算の動的な動作を指定できます。</summary>
      <returns>操作が成功した場合は true。それ以外の場合は false。このメソッドが false を返す場合、言語のランタイム バインダーが動作を決定します。(ほとんどの場合、ランタイム例外がスローされます。)</returns>
      <param name="binder">動的演算を呼び出したオブジェクトに関する情報を提供します。binder.Name プロパティは、動的演算の対象であるメンバーの名前を提供します。たとえば、sampleObject が <see cref="T:System.Dynamic.DynamicObject" /> クラスから派生したクラスのインスタンスである Console.WriteLine(sampleObject.SampleProperty) ステートメントの場合、binder.Name は "SampleProperty" を返します。メンバー名で大文字と小文字を区別するかどうかを binder.IgnoreCase プロパティで指定します。</param>
      <param name="result">取得操作の結果。たとえば、このメソッドがプロパティに対して呼び出された場合、プロパティ値を <paramref name="result" /> に割り当てることができます。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
      <summary>オブジェクトを呼び出す演算の実装を提供します。<see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、オブジェクトやデリゲートの呼び出しなどの演算の動的な動作を指定できます。</summary>
      <returns>操作が成功した場合は true。それ以外の場合は false。このメソッドが false を返す場合、言語のランタイム バインダーが動作を決定します。(ほとんどの場合、言語固有のランタイム例外がスローされます。)</returns>
      <param name="binder">呼び出し演算に関する情報を提供します。</param>
      <param name="args">呼び出し演算でオブジェクトに渡される引数。たとえば、sampleObject が <see cref="T:System.Dynamic.DynamicObject" /> クラスから派生している sampleObject(100) 演算の場合、<paramref name="args[0]" /> と 100 は等価です。</param>
      <param name="result">オブジェクト呼び出しの結果。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>メンバーを呼び出す演算の実装を提供します。<see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、メソッドの呼び出しなどの演算の動的な動作を指定できます。</summary>
      <returns>操作が成功した場合は true。それ以外の場合は false。このメソッドが false を返す場合、言語のランタイム バインダーが動作を決定します。(ほとんどの場合、言語固有のランタイム例外がスローされます。)</returns>
      <param name="binder">動的な演算に関する情報を提供します。binder.Name プロパティは、動的演算の対象であるメンバーの名前を提供します。たとえば、sampleObject が <see cref="T:System.Dynamic.DynamicObject" /> クラスから派生したクラスのインスタンスである sampleObject.SampleMethod(100) ステートメントの場合、binder.Name は "SampleMethod" を返します。メンバー名で大文字と小文字を区別するかどうかを binder.IgnoreCase プロパティで指定します。</param>
      <param name="args">呼び出し演算でオブジェクト メンバーに渡される引数。たとえば、sampleObject が <see cref="T:System.Dynamic.DynamicObject" /> クラスから派生している sampleObject.SampleMethod(100) ステートメントの場合、<paramref name="args[0]" /> と 100 は等価です。</param>
      <param name="result">メンバー呼び出しの結果。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
      <summary>インデックスを使用して値を設定する演算の実装を提供します。<see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、指定したインデックスを使用してオブジェクトにアクセスする演算の動的な動作を指定できます。</summary>
      <returns>操作が成功した場合は true。それ以外の場合は false。このメソッドが false を返す場合、言語のランタイム バインダーが動作を決定します。(ほとんどの場合、言語固有のランタイム例外がスローされます。)</returns>
      <param name="binder">操作に関する情報を提供します。</param>
      <param name="indexes">演算に使用されるインデックス。たとえば、sampleObject が <see cref="T:System.Dynamic.DynamicObject" /> クラスから派生している C# の sampleObject[3] = 10 演算 (Visual Basic では sampleObject(3) = 10) の場合、<paramref name="indexes[0]" /> と 3 は等価です。</param>
      <param name="value">指定したインデックスのオブジェクトに設定する値。たとえば、sampleObject が <see cref="T:System.Dynamic.DynamicObject" /> クラスから派生している C# の sampleObject[3] = 10 演算 (Visual Basic では sampleObject(3) = 10) の場合、<paramref name="value" /> と 10 は等価です。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>メンバー値を設定する演算の実装を提供します。<see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、プロパティ値の設定などの演算の動的な動作を指定できます。</summary>
      <returns>操作が成功した場合は true。それ以外の場合は false。このメソッドが false を返す場合、言語のランタイム バインダーが動作を決定します。(ほとんどの場合、言語固有のランタイム例外がスローされます。)</returns>
      <param name="binder">動的演算を呼び出したオブジェクトに関する情報を提供します。binder.Name プロパティは、値の割り当て先のメンバーの名前を提供します。たとえば、sampleObject が <see cref="T:System.Dynamic.DynamicObject" /> クラスから派生したクラスのインスタンスである sampleObject.SampleProperty = "Test" ステートメントの場合、binder.Name は "SampleProperty" を返します。メンバー名で大文字と小文字を区別するかどうかを binder.IgnoreCase プロパティで指定します。</param>
      <param name="value">メンバーに設定する値。たとえば、sampleObject が <see cref="T:System.Dynamic.DynamicObject" /> クラスから派生したクラスのインスタンスである sampleObject.SampleProperty = "Test" の場合、<paramref name="value" /> は "Test" です。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
      <summary>単項演算の実装を提供します。<see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、否定、インクリメント、デクリメントなどの演算の動的な動作を指定できます。</summary>
      <returns>操作が成功した場合は true。それ以外の場合は false。このメソッドが false を返す場合、言語のランタイム バインダーが動作を決定します。(ほとんどの場合、言語固有のランタイム例外がスローされます。)</returns>
      <param name="binder">単項演算に関する情報を提供します。binder.Operation プロパティは、<see cref="T:System.Linq.Expressions.ExpressionType" /> オブジェクトを返します。たとえば、number が DynamicObject クラスから派生している negativeNumber = -number ステートメントの場合、binder.Operation は "Negate" を返します。</param>
      <param name="result">単項演算の結果。</param>
    </member>
    <member name="T:System.Dynamic.ExpandoObject">
      <summary>実行時にメンバーを動的に追加および削除できるオブジェクトを表します。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.#ctor">
      <summary>メンバーを持たない新しい ExpandoObject を初期化します。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>指定されたキーを持つ <see cref="T:System.Collections.Generic.ICollection`1" /> に指定された値を追加します。</summary>
      <param name="item">コレクションに追加するキーと値を表す <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 構造。</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Clear">
      <summary>コレクションからすべての項目を削除します。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> に特定のキーと値が格納されているかどうかを判断します。</summary>
      <returns>コレクションに指定のキーと値が格納されている場合は true。それ以外の場合は false。</returns>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内で検索する <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 構造体。</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>指定した配列インデックスから開始して、<see cref="T:System.Collections.Generic.ICollection`1" /> の要素を <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 型の配列にコピーします。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.ICollection`1" /> からコピーされる <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 要素のコピー先である <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 型の 1 次元配列。配列には 0 から始まるインデックスが必要です。</param>
      <param name="arrayIndex">コピーを開始する <paramref name="array" /> の 0 から始まるインデックス。</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Count">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> の要素数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> にある要素の数。</returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用であるかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>コレクションからキーと値を削除します。</summary>
      <returns>キーと値が見つかり正常に削除された場合は true。それ以外の場合は false。キーと値が <see cref="T:System.Collections.Generic.ICollection`1" /> にない場合、このメソッドは false を返します。</returns>
      <param name="item">コレクションから削除するキーと値を表す <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 構造体。</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Add(System.String,System.Object)">
      <summary>指定したキーと値をディクショナリに追加します。</summary>
      <param name="key">キーとして使用するオブジェクト。</param>
      <param name="value">値として使用するオブジェクト。</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#ContainsKey(System.String)">
      <summary>指定したキーがディクショナリに格納されているかどうかを確認します。</summary>
      <returns>ディクショナリに指定されたキーを持つ要素が格納されている場合は true。それ以外の場合は false。</returns>
      <param name="key">ディクショナリ内で検索するキー。</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Item(System.String)">
      <summary>指定したキーを持つ要素を取得または設定します。</summary>
      <returns>指定したキーを持つ要素。</returns>
      <param name="key">取得または設定する要素のキー。</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> のキーを含む <see cref="T:System.Collections.Generic.ICollection`1" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> を実装するオブジェクトのキーを含む <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(System.String)">
      <summary>指定されたキーを持つ要素を <see cref="T:System.Collections.IDictionary" /> から削除します。</summary>
      <returns>要素が正常に削除された場合は true。それ以外の場合は false。このメソッドは、<paramref name="key" /> が元の <see cref="T:System.Collections.Generic.IDictionary`2" /> で見つからなかった場合にも false を返します。</returns>
      <param name="key">削除する要素のキー。</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#TryGetValue(System.String,System.Object@)">
      <summary>指定したキーに関連付けられいている値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> を実装するオブジェクトに指定されたキーを持つ要素が含まれる場合は true。それ以外の場合は false。</returns>
      <param name="key">取得する値のキー。</param>
      <param name="value">このメソッドが返されるときに、キーが見つかった場合は、指定したキーに関連付けられている値を格納します。それ以外の場合は <paramref name="value" /> パラメーターの型の既定値を格納します。このパラメーターは初期化されずに渡されます。</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> の値を含む <see cref="T:System.Collections.Generic.ICollection`1" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> を実装するオブジェクトの値を含む <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="E:System.Dynamic.ExpandoObject.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>プロパティ値が変更されたときに発生します。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>指定された MetaObject は動的仮想メソッドにディスパッチされます。このオブジェクトを別の MetaObject の内部にカプセル化することにより、個々のアクションのカスタム動作を指定することができます。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 型のオブジェクト。</returns>
      <param name="parameter">動的仮想メソッドにディスパッチされる MetaObject を表す式。</param>
    </member>
    <member name="T:System.Dynamic.GetIndexBinder">
      <summary>呼び出しサイトでの動的インデックス取得操作を表し、バインディングのセマンティクスと、操作に関する詳細な情報を提供します。</summary>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>
        <see cref="T:System.Dynamic.GetIndexBinder" /> の新しいインスタンスを初期化します。</summary>
      <param name="callInfo">呼び出しサイトの引数のシグネチャ。</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>動的インデックス取得操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的インデックス取得操作のターゲット。</param>
      <param name="args">動的インデックス取得操作の引数の配列。</param>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.CallInfo">
      <summary>呼び出しサイトの引数のシグネチャを取得します。</summary>
      <returns>呼び出しサイトの引数のシグネチャ。</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>ターゲットの動的オブジェクトがバインドできない場合に、動的インデックス取得操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的インデックス取得操作のターゲット。</param>
      <param name="indexes">動的インデックス取得操作の引数。</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>派生クラスでオーバーライドされた場合、ターゲットの動的オブジェクトがバインドできない場合に、動的インデックス取得操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的インデックス取得操作のターゲット。</param>
      <param name="indexes">動的インデックス取得操作の引数。</param>
      <param name="errorSuggestion">バインディングに失敗した場合に使用するバインディングの結果または null。</param>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.ReturnType">
      <summary>操作の結果の型。</summary>
      <returns>操作の結果の型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Dynamic.GetMemberBinder">
      <summary>呼び出しサイトでの動的メンバー取得操作を表し、バインディングのセマンティクスと、操作に関する詳細な情報を提供します。</summary>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>
        <see cref="T:System.Dynamic.GetMemberBinder" /> の新しいインスタンスを初期化します。</summary>
      <param name="name">取得するメンバーの名前。</param>
      <param name="ignoreCase">大文字と小文字を区別しないで名前を一致させる場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>動的メンバー取得操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的メンバー取得操作のターゲット。</param>
      <param name="args">動的メンバー取得操作の引数の配列。</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject)">
      <summary>ターゲットの動的オブジェクトがバインドできない場合に、動的メンバー取得操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的メンバー取得操作のターゲット。</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>派生クラスでオーバーライドされた場合、ターゲットの動的オブジェクトがバインドできない場合に、動的メンバー取得操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的メンバー取得操作のターゲット。</param>
      <param name="errorSuggestion">バインディングに失敗した場合に使用するバインディングの結果または null。</param>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.IgnoreCase">
      <summary>文字列の比較で、メンバー名の大文字と小文字を区別するかどうかを示す値を取得します。</summary>
      <returns>大文字と小文字を区別しない場合は true。それ場合は false。</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.Name">
      <summary>メンバーの名前を取得します。</summary>
      <returns>取得するメンバーの名前。</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.ReturnType">
      <summary>操作の結果の型。</summary>
      <returns>操作の結果の型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Dynamic.IDynamicMetaObjectProvider">
      <summary>実行時に操作をバインドできる動的オブジェクトを表します。</summary>
    </member>
    <member name="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>このオブジェクトで実行される操作をバインドする <see cref="T:System.Dynamic.DynamicMetaObject" /> を返します。</summary>
      <returns>このオブジェクトをバインドする <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="parameter">ランタイム値の式ツリー表現。</param>
    </member>
    <member name="T:System.Dynamic.IInvokeOnGetBinder">
      <summary>プロパティが取得操作を実行するときにメンバー取得がプロパティを呼び出す必要があるかどうかを示す、動的メンバー取得操作についての情報を表します。</summary>
    </member>
    <member name="P:System.Dynamic.IInvokeOnGetBinder.InvokeOnGet">
      <summary>プロパティが取得操作を実行するときにこのメンバー取得操作がプロパティを呼び出す必要があるかどうかを示す値を取得します。このインターフェイスがないときの既定値は true です。</summary>
      <returns>プロパティが取得操作を実行するときにこのメンバー取得操作がプロパティを呼び出す必要がある場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:System.Dynamic.InvokeBinder">
      <summary>呼び出しサイトでの動的呼び出し操作を表し、バインディングのセマンティクスと、操作に関する詳細な情報を提供します。</summary>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>
        <see cref="T:System.Dynamic.InvokeBinder" /> の新しいインスタンスを初期化します。</summary>
      <param name="callInfo">呼び出しサイトの引数のシグネチャ。</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>動的呼び出し操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的な呼び出し操作のターゲット。</param>
      <param name="args">動的呼び出し操作の引数の配列。</param>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.CallInfo">
      <summary>呼び出しサイトの引数のシグネチャを取得します。</summary>
      <returns>呼び出しサイトの引数のシグネチャ。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>ターゲットの動的オブジェクトがバインドできない場合に、動的呼び出し操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的な呼び出し操作のターゲット。</param>
      <param name="args">動的な呼び出し操作の引数。</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>ターゲットの動的オブジェクトがバインドできない場合に、動的呼び出し操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的な呼び出し操作のターゲット。</param>
      <param name="args">動的呼び出し操作の引数。</param>
      <param name="errorSuggestion">バインディングに失敗した場合に使用するバインディングの結果または null。</param>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.ReturnType">
      <summary>操作の結果の型。</summary>
      <returns>操作の結果の型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Dynamic.InvokeMemberBinder">
      <summary>呼び出しサイトでの動的メンバー呼び出し操作を表し、バインディングのセマンティクスと、操作に関する詳細な情報を提供します。</summary>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.#ctor(System.String,System.Boolean,System.Dynamic.CallInfo)">
      <summary>
        <see cref="T:System.Dynamic.InvokeMemberBinder" /> の新しいインスタンスを初期化します。</summary>
      <param name="name">呼び出されるメンバーの名前。</param>
      <param name="ignoreCase">名前の照合で大文字と小文字の区別を無視する場合は true。それ以外の場合は false。</param>
      <param name="callInfo">呼び出しサイトの引数のシグネチャ。</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>動的メンバー呼び出し操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的なメンバー呼び出し操作のターゲット。</param>
      <param name="args">動的メンバー呼び出し操作の引数の配列。</param>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.CallInfo">
      <summary>呼び出しサイトの引数のシグネチャを取得します。</summary>
      <returns>呼び出しサイトの引数のシグネチャ。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>派生クラスでオーバーライドされた場合、ターゲットの動的オブジェクトがバインドできない場合に、動的呼び出し操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的な呼び出し操作のターゲット。</param>
      <param name="args">動的な呼び出し操作の引数。</param>
      <param name="errorSuggestion">バインディングに失敗した場合に使用するバインディングの結果または null。</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>ターゲットの動的オブジェクトがバインドできない場合に、動的メンバー呼び出し操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的なメンバー呼び出し操作のターゲット。</param>
      <param name="args">動的なメンバー呼び出し操作の引数。</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>派生クラスでオーバーライドされた場合、ターゲットの動的オブジェクトがバインドできない場合に、動的メンバー呼び出し操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的なメンバー呼び出し操作のターゲット。</param>
      <param name="args">動的メンバー呼び出し操作の引数。</param>
      <param name="errorSuggestion">バインディングに失敗した場合に使用するバインディングの結果または null。</param>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.IgnoreCase">
      <summary>文字列の比較で、メンバー名の大文字と小文字を区別するかどうかを示す値を取得します。</summary>
      <returns>大文字と小文字を区別しない場合は true。それ場合は false。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.Name">
      <summary>呼び出すメンバーの名前を取得します。</summary>
      <returns>呼び出されるメンバーの名前。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.ReturnType">
      <summary>操作の結果の型。</summary>
      <returns>操作の結果の型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Dynamic.SetIndexBinder">
      <summary>呼び出しサイトでの動的インデックス設定操作を表し、バインディングのセマンティクスと、操作に関する詳細な情報を提供します。</summary>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>
        <see cref="T:System.Dynamic.SetIndexBinder" /> の新しいインスタンスを初期化します。</summary>
      <param name="callInfo">呼び出しサイトの引数のシグネチャ。</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>動的インデックス設定操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的インデックス設定操作のターゲット。</param>
      <param name="args">動的インデックス設定操作の引数の配列。</param>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.CallInfo">
      <summary>呼び出しサイトの引数のシグネチャを取得します。</summary>
      <returns>呼び出しサイトの引数のシグネチャ。</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>ターゲットの動的オブジェクトがバインドできない場合に、動的インデックス設定操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的インデックス設定操作のターゲット。</param>
      <param name="indexes">動的インデックス設定操作の引数。</param>
      <param name="value">コレクションに設定する値。</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>派生クラスでオーバーライドされた場合、ターゲットの動的オブジェクトがバインドできない場合に、動的インデックス設定操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的インデックス設定操作のターゲット。</param>
      <param name="indexes">動的インデックス設定操作の引数。</param>
      <param name="value">コレクションに設定する値。</param>
      <param name="errorSuggestion">バインディングに失敗した場合に使用するバインディングの結果または null。</param>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.ReturnType">
      <summary>操作の結果の型。</summary>
      <returns>操作の結果の型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Dynamic.SetMemberBinder">
      <summary>呼び出しサイトでの動的メンバー設定操作を表し、バインディングのセマンティクスと、操作に関する詳細な情報を提供します。</summary>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>
        <see cref="T:System.Dynamic.SetMemberBinder" /> の新しいインスタンスを初期化します。</summary>
      <param name="name">取得するメンバーの名前。</param>
      <param name="ignoreCase">大文字と小文字を区別しないで名前を一致させる場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>動的メンバー設定操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的メンバー設定操作のターゲット。</param>
      <param name="args">動的メンバー設定操作の引数の配列。</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>ターゲットの動的オブジェクトがバインドできない場合に、動的メンバー設定操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的メンバー設定操作のターゲット。</param>
      <param name="value">メンバーに設定する値。</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>ターゲットの動的オブジェクトがバインドできない場合に、動的メンバー設定操作のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的メンバー設定操作のターゲット。</param>
      <param name="value">メンバーに設定する値。</param>
      <param name="errorSuggestion">バインディングに失敗した場合に使用するバインディングの結果または null。</param>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.IgnoreCase">
      <summary>文字列の比較で、メンバー名の大文字と小文字を区別するかどうかを示す値を取得します。</summary>
      <returns>大文字と小文字を区別しない場合は true。それ場合は false。</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.Name">
      <summary>メンバーの名前を取得します。</summary>
      <returns>取得するメンバーの名前。</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.ReturnType">
      <summary>操作の結果の型。</summary>
      <returns>操作の結果の型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Dynamic.UnaryOperationBinder">
      <summary>呼び出しサイトでの動的単項演算を表し、バインディングのセマンティクスと、操作に関する詳細な情報を提供します。</summary>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>
        <see cref="T:System.Dynamic.BinaryOperationBinder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="operation">単項演算の種類。</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>動的単項演算のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的操作のターゲット。</param>
      <param name="args">動的操作の引数の配列。</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)">
      <summary>ターゲットの動的オブジェクトがバインドできない場合に、動的単項演算のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的単項演算のターゲット。</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>ターゲットの動的オブジェクトがバインドできない場合に、動的単項演算のバインディングを実行します。</summary>
      <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">動的単項演算のターゲット。</param>
      <param name="errorSuggestion">バインディングに失敗した場合のバインディングの結果または null。</param>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.Operation">
      <summary>単項演算の種類。</summary>
      <returns>単項演算の種類を表す <see cref="T:System.Linq.Expressions.ExpressionType" /> のオブジェクト。</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.ReturnType">
      <summary>操作の結果の型。</summary>
      <returns>操作の結果の型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Linq.Enumerable">
      <summary>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> を実装するオブジェクトを問い合わせる static (Visual Basic では Shared) メソッドのセットを提供します。</summary>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
      <summary>シーケンスにアキュムレータ関数を適用します。</summary>
      <returns>最終的なアキュムレータ値。</returns>
      <param name="source">集計する対象の <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="func">各要素に対して呼び出すアキュムレータ関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="func" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
      <summary>シーケンスにアキュムレータ関数を適用します。指定されたシード値が最初のアキュムレータ値として使用されます。</summary>
      <returns>最終的なアキュムレータ値。</returns>
      <param name="source">集計する対象の <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="seed">最初のアキュムレータ値。</param>
      <param name="func">各要素に対して呼び出すアキュムレータ関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TAccumulate">アキュムレータ値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="func" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>シーケンスにアキュムレータ関数を適用します。指定したシード値は最初のアキュムレータ値として使用され、指定した関数は結果値の選択に使用されます。</summary>
      <returns>変換された最終的なアキュムレータ値。</returns>
      <param name="source">集計する対象の <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="seed">最初のアキュムレータ値。</param>
      <param name="func">各要素に対して呼び出すアキュムレータ関数。</param>
      <param name="resultSelector">最終的なアキュムレータ値を結果値に変換する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TAccumulate">アキュムレータ値の型。</typeparam>
      <typeparam name="TResult">結果の値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="func" /> または <paramref name="resultSelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>シーケンスのすべての要素が条件を満たしているかどうかを判断します。</summary>
      <returns>指定した述語内でソース シーケンスの各要素がテストに合格する場合、またはシーケンスが空の場合は true。それ以外の場合は、false。</returns>
      <param name="source">述語を適用する要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>シーケンスに要素が含まれているかどうかを判断します。</summary>
      <returns>ソース シーケンスに要素が含まれている場合は true。それ以外の場合は false。</returns>
      <param name="source">空であることを確認する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>シーケンスの任意の要素が条件を満たしているかどうかを判断します。</summary>
      <returns>指定された述語でソース シーケンスのいずれかの要素がテストに合格した場合は true。それ以外の場合は false。</returns>
      <param name="source">述語を適用する要素の <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> として型指定された入力を返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> として型指定された入力シーケンス。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> として型指定するシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
        <see cref="T:System.Decimal" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均を計算する <see cref="T:System.Decimal" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
        <see cref="T:System.Double" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均を計算する <see cref="T:System.Double" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
        <see cref="T:System.Int32" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均を計算する <see cref="T:System.Int32" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
        <see cref="T:System.Int64" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均を計算する <see cref="T:System.Int64" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>null 許容の <see cref="T:System.Decimal" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均。ソース シーケンスが空の場合か、ソース シーケンスに null 値しか含まれない場合は null。</returns>
      <param name="source">平均を計算する、null 許容の <see cref="T:System.Decimal" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.OverflowException">シーケンス内の要素の合計が <see cref="F:System.Decimal.MaxValue" /> を上回っています。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>null 許容の <see cref="T:System.Double" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均。ソース シーケンスが空の場合か、ソース シーケンスに null 値しか含まれない場合は null。</returns>
      <param name="source">平均を計算する、null 許容の <see cref="T:System.Double" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>null 許容の <see cref="T:System.Int32" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均。ソース シーケンスが空の場合か、ソース シーケンスに null 値しか含まれない場合は null。</returns>
      <param name="source">平均を計算する、null 許容の <see cref="T:System.Int32" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.OverflowException">シーケンス内の要素の合計が <see cref="F:System.Int64.MaxValue" /> を上回っています。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>null 許容の <see cref="T:System.Int64" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均。ソース シーケンスが空の場合か、ソース シーケンスに null 値しか含まれない場合は null。</returns>
      <param name="source">平均を計算する、null 許容の <see cref="T:System.Int64" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.OverflowException">シーケンス内の要素の合計が <see cref="F:System.Int64.MaxValue" /> を上回っています。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>null 許容の <see cref="T:System.Single" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均。ソース シーケンスが空の場合か、ソース シーケンスに null 値しか含まれない場合は null。</returns>
      <param name="source">平均を計算する、null 許容の <see cref="T:System.Single" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
        <see cref="T:System.Single" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均を計算する <see cref="T:System.Single" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことで取得される、<see cref="T:System.Decimal" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値の計算に使用される値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
      <exception cref="T:System.OverflowException">シーケンス内の要素の合計が <see cref="F:System.Decimal.MaxValue" /> を上回っています。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことで取得される、<see cref="T:System.Double" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値計算の対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことで取得される、<see cref="T:System.Int32" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値計算の対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
      <exception cref="T:System.OverflowException">シーケンス内の要素の合計が <see cref="F:System.Int64.MaxValue" /> を上回っています。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことで取得される、<see cref="T:System.Int64" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値計算の対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">ソースの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
      <exception cref="T:System.OverflowException">シーケンス内の要素の合計が <see cref="F:System.Int64.MaxValue" /> を上回っています。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことで取得される、null 許容の <see cref="T:System.Decimal" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均。ソース シーケンスが空の場合か、ソース シーケンスに null 値しか含まれない場合は null。</returns>
      <param name="source">平均値計算の対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.OverflowException">シーケンス内の要素の合計が <see cref="F:System.Decimal.MaxValue" /> を上回っています。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことで取得される、null 許容の <see cref="T:System.Double" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均。ソース シーケンスが空の場合か、ソース シーケンスに null 値しか含まれない場合は null。</returns>
      <param name="source">平均値計算の対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことで取得される、null 許容の <see cref="T:System.Int32" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均。ソース シーケンスが空の場合か、ソース シーケンスに null 値しか含まれない場合は null。</returns>
      <param name="source">平均値計算の対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.OverflowException">シーケンス内の要素の合計が <see cref="F:System.Int64.MaxValue" /> を上回っています。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことで取得される、null 許容の <see cref="T:System.Int64" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均。ソース シーケンスが空の場合か、ソース シーケンスに null 値しか含まれない場合は null。</returns>
      <param name="source">平均値計算の対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことで取得される、null 許容の <see cref="T:System.Single" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均。ソース シーケンスが空の場合か、ソース シーケンスに null 値しか含まれない場合は null。</returns>
      <param name="source">平均値計算の対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことで取得される、<see cref="T:System.Single" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値計算の対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
      <summary>指定した型に <see cref="T:System.Collections.IEnumerable" /> の要素を変換します。</summary>
      <returns>指定した型に変換されたソース シーケンスの各要素が格納されている <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="source">変換される要素を含む <see cref="T:System.Collections.IEnumerable" />。</param>
      <typeparam name="TResult">
        <paramref name="source" /> の要素の変換後の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidCastException">シーケンスの要素を <paramref name="TResult" /> 型にキャストできません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>2 つのシーケンスを連結します。</summary>
      <returns>2 つの入力シーケンスの連結された要素が格納されている <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="first">連結する最初のシーケンス。</param>
      <param name="second">最初のシーケンスに連結するシーケンス。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> または <paramref name="second" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>既定の等値比較子を使用して、指定した要素がシーケンスに含まれているかどうかを判断します。</summary>
      <returns>指定した値を持つ要素がソース シーケンスに含まれている場合は true。それ以外の場合は false。</returns>
      <param name="source">値の検索対象となるシーケンス。</param>
      <param name="value">シーケンス内で検索する値。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>指定した <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用して、指定した要素がシーケンスに含まれているかどうかを判断します。</summary>
      <returns>指定した値を持つ要素がソース シーケンスに含まれている場合は true。それ以外の場合は false。</returns>
      <param name="source">値の検索対象となるシーケンス。</param>
      <param name="value">シーケンス内で検索する値。</param>
      <param name="comparer">値を比較する等値比較子。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>シーケンス内の要素数を返します。</summary>
      <returns>入力シーケンス内の要素数。</returns>
      <param name="source">カウントする要素が格納されているシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> に含まれる要素の数が、<see cref="F:System.Int32.MaxValue" /> を上回っています。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>条件を満たす、指定されたシーケンス内の要素の数を表す数値を返します。</summary>
      <returns>述語関数の条件を満たす、シーケンス内の要素数を表す数値。</returns>
      <param name="source">テストおよびカウントする要素が格納されているシーケンス。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> に含まれる要素の数が、<see cref="F:System.Int32.MaxValue" /> を上回っています。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>指定したシーケンスの要素を返します。シーケンスが空の場合はシングルトン コレクションにある型パラメーターの既定値を返します。</summary>
      <returns>
        <paramref name="source" /> が空の場合、<paramref name="TSource" /> 型の既定値を格納する <see cref="T:System.Collections.Generic.IEnumerable`1" /> オブジェクト。それ以外の場合は <paramref name="source" />。</returns>
      <param name="source">シーケンスが空の場合に、既定値を返すシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>指定されたシーケンスの要素を返します。シーケンスが空の場合はシングルトン コレクションにある指定の値を返します。</summary>
      <returns>
        <paramref name="source" /> が空の場合は <paramref name="defaultValue" /> が格納されている <see cref="T:System.Collections.Generic.IEnumerable`1" />。それ以外の場合は <paramref name="source" />。</returns>
      <param name="source">シーケンスが空の場合に、指定された値を返すシーケンス。</param>
      <param name="defaultValue">シーケンスが空の場合に返す値。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>既定の等値比較子を使用して値を比較することにより、シーケンスから一意の要素を返します。</summary>
      <returns>ソース シーケンスの一意の要素を格納する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="source">重複する要素を削除する対象となるシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>指定した <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用して値を比較することで、シーケンス内の一意の要素を返します。</summary>
      <returns>ソース シーケンスの一意の要素を格納する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="source">重複する要素を削除する対象となるシーケンス。</param>
      <param name="comparer">値を比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>シーケンス内の指定されたインデックス位置にある要素を返します。</summary>
      <returns>ソース シーケンス内の指定された位置にある要素。</returns>
      <param name="source">返す要素が含まれている <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="index">取得する要素の、0 から始まるインデックス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満か <paramref name="source" /> に含まれている要素数以上の値です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>シーケンス内の指定されたインデックス位置にある要素を返します。インデックスが範囲外の場合は既定値を返します。</summary>
      <returns>インデックスがソース シーケンスの範囲外の場合は default(<paramref name="TSource" />)。それ以外の場合は、ソース シーケンスの指定した位置にある要素。</returns>
      <param name="source">返す要素が含まれている <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="index">取得する要素の、0 から始まるインデックス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Empty``1">
      <summary>指定された型引数を持つ空の <see cref="T:System.Collections.Generic.IEnumerable`1" /> を返します。</summary>
      <returns>型引数が <paramref name="TResult" /> である空の <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <typeparam name="TResult">返されるジェネリック <see cref="T:System.Collections.Generic.IEnumerable`1" /> の型パラメーターに割り当てる型。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>既定の等値比較子を使用して値を比較することにより、2 つのシーケンスの差集合を生成します。</summary>
      <returns>2 つのシーケンスの要素の差集合が格納されているシーケンス。</returns>
      <param name="first">
        <paramref name="second" /> にも含まれない要素が返される <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="second">最初のシーケンスにも含まれ、返されたシーケンスからは削除される要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> または <paramref name="second" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>指定した <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用して値を比較することで、2 つのシーケンスの差集合を生成します。</summary>
      <returns>2 つのシーケンスの要素の差集合が格納されているシーケンス。</returns>
      <param name="first">
        <paramref name="second" /> にも含まれない要素が返される <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="second">最初のシーケンスにも含まれ、返されたシーケンスからは削除される要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="comparer">値を比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> または <paramref name="second" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>シーケンスの最初の要素を返します。</summary>
      <returns>指定されたシーケンスの最初の要素。</returns>
      <param name="source">最初の要素が返される <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">ソース シーケンスが空です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>指定された条件を満たす、シーケンスの最初の要素を返します。</summary>
      <returns>指定された述語関数でテストに合格する、シーケンスの最初の要素。</returns>
      <param name="source">返す要素が含まれている <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" />. の条件を満たす要素がありません。またはソース シーケンスが空です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>シーケンスの最初の要素を返します。シーケンスに要素が含まれていない場合は既定値を返します。</summary>
      <returns>
        <paramref name="source" /> が空の場合は default(<paramref name="TSource" />)。それ以外の場合は、<paramref name="source" /> の最初の要素。</returns>
      <param name="source">最初の要素が返される <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>条件を満たす、シーケンスの最初の要素を返します。このような要素が見つからない場合は既定値を返します。</summary>
      <returns>
        <paramref name="source" /> が空の場合または <paramref name="predicate" /> で指定されたテストに合格する要素がない場合は default(<paramref name="TSource" />)。それ以外の場合は、<paramref name="predicate" /> で指定されたテストに合格する、<paramref name="source" /> の最初の要素。</returns>
      <param name="source">返す要素が含まれている <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>指定されたキー セレクター関数に従ってシーケンスの要素をグループ化します。</summary>
      <returns>C# では IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;、Visual Basic では IEnumerable(Of IGrouping(Of TKey, TSource))。ここでは、各 <see cref="T:System.Linq.IGrouping`2" /> オブジェクトに、オブジェクトのシーケンス、およびキーが格納されています。</returns>
      <param name="source">要素をグループ化する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">各要素のキーを抽出する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>指定されたキー セレクター関数に従ってシーケンスの要素をグループ化し、指定された比較子を使用してキーを比較します。</summary>
      <returns>C# では IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;、Visual Basic では IEnumerable(Of IGrouping(Of TKey, TSource))。ここでは、各 <see cref="T:System.Linq.IGrouping`2" /> オブジェクトに、オブジェクトのシーケンス、およびキーが格納されています。</returns>
      <param name="source">要素をグループ化する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">各要素のキーを抽出する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>指定されたキー セレクター関数に従ってシーケンスの要素をグループ化し、指定された関数を使用して各グループの要素を射影します。</summary>
      <returns>C# では IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;、Visual Basic では IEnumerable(Of IGrouping(Of TKey, TElement))。ここで、各 <see cref="T:System.Linq.IGrouping`2" /> オブジェクトには、<paramref name="TElement" /> 型のオブジェクトのコレクションとキーが格納されます。</returns>
      <param name="source">要素をグループ化する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">各要素のキーを抽出する関数。</param>
      <param name="elementSelector">各ソース要素を <see cref="T:System.Linq.IGrouping`2" /> の要素にマップする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.IGrouping`2" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> または <paramref name="elementSelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>キー セレクター関数に従ってシーケンスの要素をグループ化します。キーの比較には、比較子を使用し、各グループの要素の射影には、指定された関数を使用します。</summary>
      <returns>C# では IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;、Visual Basic では IEnumerable(Of IGrouping(Of TKey, TElement))。ここで、各 <see cref="T:System.Linq.IGrouping`2" /> オブジェクトには、<paramref name="TElement" /> 型のオブジェクトのコレクションとキーが格納されます。</returns>
      <param name="source">要素をグループ化する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">各要素のキーを抽出する関数。</param>
      <param name="elementSelector">ソースの各要素を <see cref="T:System.Linq.IGrouping`2" /> に含まれる要素にマッピングする関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.IGrouping`2" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> または <paramref name="elementSelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>指定されたキー セレクター関数に従ってシーケンスの要素をグループ化し、各グループとそのキーから結果値を作成します。各グループの要素は、指定された関数を使用して射影されます。</summary>
      <returns>
        <paramref name="TResult" /> 型の要素のコレクション。各要素は、グループとそのキーの射影を表します。</returns>
      <param name="source">要素をグループ化する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">各要素のキーを抽出する関数。</param>
      <param name="elementSelector">ソースの各要素を <see cref="T:System.Linq.IGrouping`2" /> に含まれる要素にマッピングする関数。</param>
      <param name="resultSelector">各グループから結果値を作成する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TElement">各 <see cref="T:System.Linq.IGrouping`2" /> の要素の型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> によって返される結果値の型。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>指定されたキー セレクター関数に従ってシーケンスの要素をグループ化し、各グループとそのキーから結果値を作成します。キー値の比較には、指定された比較子を使用し、各グループの要素の射影には、指定された関数を使用します。</summary>
      <returns>
        <paramref name="TResult" /> 型の要素のコレクション。各要素は、グループとそのキーの射影を表します。</returns>
      <param name="source">要素をグループ化する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">各要素のキーを抽出する関数。</param>
      <param name="elementSelector">ソースの各要素を <see cref="T:System.Linq.IGrouping`2" /> に含まれる要素にマッピングする関数。</param>
      <param name="resultSelector">各グループから結果値を作成する関数。</param>
      <param name="comparer">キーの比較対象の <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TElement">各 <see cref="T:System.Linq.IGrouping`2" /> の要素の型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> によって返される結果値の型。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>指定されたキー セレクター関数に従ってシーケンスの要素をグループ化し、各グループとそのキーから結果値を作成します。</summary>
      <returns>
        <paramref name="TResult" /> 型の要素のコレクション。各要素は、グループとそのキーの射影を表します。</returns>
      <param name="source">要素をグループ化する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">各要素のキーを抽出する関数。</param>
      <param name="resultSelector">各グループから結果値を作成する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> によって返される結果値の型。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>指定されたキー セレクター関数に従ってシーケンスの要素をグループ化し、各グループとそのキーから結果値を作成します。キーの比較には、指定された比較子を使用します。</summary>
      <returns>
        <paramref name="TResult" /> 型の要素のコレクション。各要素は、グループとそのキーの射影を表します。</returns>
      <param name="source">要素をグループ化する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">各要素のキーを抽出する関数。</param>
      <param name="resultSelector">各グループから結果値を作成する関数。</param>
      <param name="comparer">キーの比較対象の <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> によって返される結果値の型。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>キーが等しいかどうかに基づいて 2 つのシーケンスの要素を相互に関連付け、その結果をグループ化します。キーの比較には既定の等値比較子が使用されます。</summary>
      <returns>2 つのシーケンスに対してグループ化結合を実行して取得する、<paramref name="TResult" /> 型の要素が格納されている <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="outer">結合する最初のシーケンス。</param>
      <param name="inner">最初のシーケンスに結合するシーケンス。</param>
      <param name="outerKeySelector">最初のシーケンスの各要素から結合キーを抽出する関数。</param>
      <param name="innerKeySelector">2 番目のシーケンスの各要素から結合キーを抽出する関数。</param>
      <param name="resultSelector">最初のシーケンスの要素と、2 番目のシーケンスの一致する要素のコレクションから結果の要素を作成する関数。</param>
      <typeparam name="TOuter">最初のシーケンスの要素の型。</typeparam>
      <typeparam name="TInner">2 番目のシーケンスの要素の型。</typeparam>
      <typeparam name="TKey">キー セレクター関数によって返されるキーの型。</typeparam>
      <typeparam name="TResult">結果の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> または <paramref name="inner" /> または <paramref name="outerKeySelector" /> または <paramref name="innerKeySelector" /> または <paramref name="resultSelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>キーが等しいかどうかに基づいて 2 つのシーケンスの要素を相互に関連付け、その結果をグループ化します。指定された <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用してキーを比較します。</summary>
      <returns>2 つのシーケンスに対してグループ化結合を実行して取得する、<paramref name="TResult" /> 型の要素が格納されている <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="outer">結合する最初のシーケンス。</param>
      <param name="inner">最初のシーケンスに結合するシーケンス。</param>
      <param name="outerKeySelector">最初のシーケンスの各要素から結合キーを抽出する関数。</param>
      <param name="innerKeySelector">2 番目のシーケンスの各要素から結合キーを抽出する関数。</param>
      <param name="resultSelector">最初のシーケンスの要素と、2 番目のシーケンスの一致する要素のコレクションから結果の要素を作成する関数。</param>
      <param name="comparer">キーのハッシュの生成と比較を行う <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TOuter">最初のシーケンスの要素の型。</typeparam>
      <typeparam name="TInner">2 番目のシーケンスの要素の型。</typeparam>
      <typeparam name="TKey">キー セレクター関数によって返されるキーの型。</typeparam>
      <typeparam name="TResult">結果の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> または <paramref name="inner" /> または <paramref name="outerKeySelector" /> または <paramref name="innerKeySelector" /> または <paramref name="resultSelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>既定の等値比較子を使用して値を比較することにより、2 つのシーケンスの積集合を生成します。</summary>
      <returns>2 つのシーケンスの積集合を構成する要素が格納されているシーケンス。</returns>
      <param name="first">
        <paramref name="second" /> にも含まれる一意の要素が返される <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="second">1 つめのシーケンスにも含まれる一意の要素が返される <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> または <paramref name="second" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>指定した <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用して値を比較することで、2 つのシーケンスの積集合を生成します。</summary>
      <returns>2 つのシーケンスの積集合を構成する要素が格納されているシーケンス。</returns>
      <param name="first">
        <paramref name="second" /> にも含まれる一意の要素が返される <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="second">1 つめのシーケンスにも含まれる一意の要素が返される <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="comparer">値を比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> または <paramref name="second" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>一致するキーに基づいて 2 つのシーケンスの要素を相互に関連付けます。キーの比較には既定の等値比較子が使用されます。</summary>
      <returns>2 つのシーケンスに対して内部結合を実行することで取得される <paramref name="TResult" /> 型の要素を持つ <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="outer">結合する最初のシーケンス。</param>
      <param name="inner">最初のシーケンスに結合するシーケンス。</param>
      <param name="outerKeySelector">最初のシーケンスの各要素から結合キーを抽出する関数。</param>
      <param name="innerKeySelector">2 番目のシーケンスの各要素から結合キーを抽出する関数。</param>
      <param name="resultSelector">一致する 2 つの要素から結果の要素を作成する関数。</param>
      <typeparam name="TOuter">最初のシーケンスの要素の型。</typeparam>
      <typeparam name="TInner">2 番目のシーケンスの要素の型。</typeparam>
      <typeparam name="TKey">キー セレクター関数によって返されるキーの型。</typeparam>
      <typeparam name="TResult">結果の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> または <paramref name="inner" /> または <paramref name="outerKeySelector" /> または <paramref name="innerKeySelector" /> または <paramref name="resultSelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>一致するキーに基づいて 2 つのシーケンスの要素を相互に関連付けます。指定された <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用してキーを比較します。</summary>
      <returns>2 つのシーケンスに対して内部結合を実行することで取得される <paramref name="TResult" /> 型の要素を持つ <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="outer">結合する最初のシーケンス。</param>
      <param name="inner">最初のシーケンスに結合するシーケンス。</param>
      <param name="outerKeySelector">最初のシーケンスの各要素から結合キーを抽出する関数。</param>
      <param name="innerKeySelector">2 番目のシーケンスの各要素から結合キーを抽出する関数。</param>
      <param name="resultSelector">一致する 2 つの要素から結果の要素を作成する関数。</param>
      <param name="comparer">キーのハッシュの生成と比較を行う <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TOuter">最初のシーケンスの要素の型。</typeparam>
      <typeparam name="TInner">2 番目のシーケンスの要素の型。</typeparam>
      <typeparam name="TKey">キー セレクター関数によって返されるキーの型。</typeparam>
      <typeparam name="TResult">結果の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> または <paramref name="inner" /> または <paramref name="outerKeySelector" /> または <paramref name="innerKeySelector" /> または <paramref name="resultSelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>シーケンスの最後の要素を返します。</summary>
      <returns>ソース シーケンスの最後の位置にある値。</returns>
      <param name="source">最後の要素が返される <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">ソース シーケンスが空です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>指定された条件を満たす、シーケンスの最後の要素を返します。</summary>
      <returns>指定された述語関数でテストに合格する、シーケンスの最後の要素。</returns>
      <param name="source">返す要素が含まれている <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" />. の条件を満たす要素がありません。またはソース シーケンスが空です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>シーケンスの最後の要素を返します。シーケンスに要素が含まれていない場合は既定値を返します。</summary>
      <returns>ソース シーケンスが空の場合は default(<paramref name="TSource" />)。それ以外の場合は <see cref="T:System.Collections.Generic.IEnumerable`1" /> の最後の要素。</returns>
      <param name="source">最後の要素が返される <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>条件を満たす、シーケンスの最後の要素を返します。このような要素が見つからない場合は既定値を返します。</summary>
      <returns>シーケンスが空の場合、または述語関数でテストに合格した要素がない場合は default(<paramref name="TSource" />)。それ以外の場合は述語関数でテストに合格した最後の要素。</returns>
      <param name="source">返す要素が含まれている <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>シーケンスに含まれる要素の総数を表す <see cref="T:System.Int64" /> を返します。</summary>
      <returns>ソース シーケンスの要素数。</returns>
      <param name="source">カウント対象の要素を格納する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.OverflowException">要素数が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>条件を満たすシーケンスの要素の数を示す <see cref="T:System.Int64" /> を返します。</summary>
      <returns>述語関数の条件を満たす、シーケンス内の要素数を表す数値。</returns>
      <param name="source">カウント対象の要素を格納する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.OverflowException">要素数が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
        <see cref="T:System.Decimal" /> 値のシーケンス内の最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する、<see cref="T:System.Decimal" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
        <see cref="T:System.Double" /> 値のシーケンス内の最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する、<see cref="T:System.Double" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
        <see cref="T:System.Int32" /> 値のシーケンス内の最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する、<see cref="T:System.Int32" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
        <see cref="T:System.Int64" /> 値のシーケンス内の最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する、<see cref="T:System.Int64" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>null 許容の <see cref="T:System.Decimal" /> 値のシーケンス内の最大値を返します。</summary>
      <returns>シーケンスの最大値に対応する Nullable&lt;Decimal&gt; (C# の場合) または Nullable(Of Decimal) (Visual Basic の場合) の値。</returns>
      <param name="source">最大値を確認する、null 許容の <see cref="T:System.Decimal" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>null 許容の <see cref="T:System.Double" /> 値のシーケンス内の最大値を返します。</summary>
      <returns>シーケンスの最大値に対応する Nullable&lt;Double&gt; (C# の場合) または Nullable(Of Double) (Visual Basic の場合) の値。</returns>
      <param name="source">最大値を確認する、null 許容の <see cref="T:System.Double" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>null 許容の <see cref="T:System.Int32" /> 値のシーケンス内の最大値を返します。</summary>
      <returns>シーケンスの最大値に対応する Nullable&lt;Int32&gt; (C# の場合) または Nullable(Of Int32) (Visual Basic の場合) の値。</returns>
      <param name="source">最大値を確認する、null 許容の <see cref="T:System.Int32" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>null 許容の <see cref="T:System.Int64" /> 値のシーケンス内の最大値を返します。</summary>
      <returns>シーケンスの最大値に対応する Nullable&lt;Int64&gt; (C# の場合) または Nullable(Of Int64) (Visual Basic の場合) の値。</returns>
      <param name="source">最大値を確認する、null 許容の <see cref="T:System.Int64" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>null 許容の <see cref="T:System.Single" /> 値のシーケンス内の最大値を返します。</summary>
      <returns>シーケンスの最大値に対応する Nullable&lt;Single&gt; (C# の場合) または Nullable(Of Single) (Visual Basic の場合) の値。</returns>
      <param name="source">最大値を確認する、null 許容の <see cref="T:System.Single" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
        <see cref="T:System.Single" /> 値のシーケンス内の最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する、<see cref="T:System.Single" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>ジェネリック シーケンスの最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>シーケンスの各要素について変換関数を呼び出し、<see cref="T:System.Decimal" /> の最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>シーケンスの各要素について変換関数を呼び出し、<see cref="T:System.Double" /> の最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>シーケンスの各要素について変換関数を呼び出し、<see cref="T:System.Int32" /> の最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>シーケンスの各要素について変換関数を呼び出し、<see cref="T:System.Int64" /> の最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>シーケンスの各要素について変換関数を呼び出し、null 許容の <see cref="T:System.Decimal" /> の最大値を返します。</summary>
      <returns>シーケンスの最大値に対応する Nullable&lt;Decimal&gt; (C# の場合) または Nullable(Of Decimal) (Visual Basic の場合) の値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>シーケンスの各要素について変換関数を呼び出し、null 許容の <see cref="T:System.Double" /> の最大値を返します。</summary>
      <returns>シーケンスの最大値に対応する Nullable&lt;Double&gt; (C# の場合) または Nullable(Of Double) (Visual Basic の場合) の値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>シーケンスの各要素について変換関数を呼び出し、null 許容の <see cref="T:System.Int32" /> の最大値を返します。</summary>
      <returns>シーケンスの最大値に対応する Nullable&lt;Int32&gt; (C# の場合) または Nullable(Of Int32) (Visual Basic の場合) の値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>シーケンスの各要素について変換関数を呼び出し、null 許容の <see cref="T:System.Int64" /> の最大値を返します。</summary>
      <returns>シーケンスの最大値に対応する Nullable&lt;Int64&gt; (C# の場合) または Nullable(Of Int64) (Visual Basic の場合) の値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>シーケンスの各要素について変換関数を呼び出し、null 許容の <see cref="T:System.Single" /> の最大値を返します。</summary>
      <returns>シーケンスの最大値に対応する Nullable&lt;Single&gt; (C# の場合) または Nullable(Of Single) (Visual Basic の場合) の値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>シーケンスの各要素について変換関数を呼び出し、<see cref="T:System.Single" /> の最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>ジェネリック シーケンスの各要素に対して変換関数を呼び出し、結果の最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> によって返される値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
        <see cref="T:System.Decimal" /> 値のシーケンス内の最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する、<see cref="T:System.Decimal" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
        <see cref="T:System.Double" /> 値のシーケンス内の最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する、<see cref="T:System.Double" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
        <see cref="T:System.Int32" /> 値のシーケンス内の最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する、<see cref="T:System.Int32" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
        <see cref="T:System.Int64" /> 値のシーケンス内の最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する、<see cref="T:System.Int64" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>null 許容の <see cref="T:System.Decimal" /> 値のシーケンス内の最小値を返します。</summary>
      <returns>シーケンスの最小値に対応する Nullable&lt;Decimal&gt; (C# の場合) または Nullable(Of Decimal) (Visual Basic の場合) の値。</returns>
      <param name="source">最小値を確認する、null 許容の <see cref="T:System.Decimal" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>null 許容の <see cref="T:System.Double" /> 値のシーケンス内の最小値を返します。</summary>
      <returns>シーケンスの最小値に対応する Nullable&lt;Double&gt; (C# の場合) または Nullable(Of Double) (Visual Basic の場合) の値。</returns>
      <param name="source">最小値を確認する、null 許容の <see cref="T:System.Double" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>null 許容の <see cref="T:System.Int32" /> 値のシーケンス内の最小値を返します。</summary>
      <returns>シーケンスの最小値に対応する Nullable&lt;Int32&gt; (C# の場合) または Nullable(Of Int32) (Visual Basic の場合) の値。</returns>
      <param name="source">最小値を確認する、null 許容の <see cref="T:System.Int32" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>null 許容の <see cref="T:System.Int64" /> 値のシーケンス内の最小値を返します。</summary>
      <returns>シーケンスの最小値に対応する Nullable&lt;Int64&gt; (C# の場合) または Nullable(Of Int64) (Visual Basic の場合) の値。</returns>
      <param name="source">最小値を確認する、null 許容の <see cref="T:System.Int64" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>null 許容の <see cref="T:System.Single" /> 値のシーケンス内の最小値を返します。</summary>
      <returns>シーケンスの最小値に対応する Nullable&lt;Single&gt; (C# の場合) または Nullable(Of Single) (Visual Basic の場合) の値。</returns>
      <param name="source">最小値を確認する、null 許容の <see cref="T:System.Single" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
        <see cref="T:System.Single" /> 値のシーケンス内の最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する、<see cref="T:System.Single" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>ジェネリック シーケンスの最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>シーケンスの各要素について変換関数を呼び出し、<see cref="T:System.Decimal" /> の最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>シーケンスの各要素について変換関数を呼び出し、<see cref="T:System.Double" /> の最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>シーケンスの各要素について変換関数を呼び出し、<see cref="T:System.Int32" /> の最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>シーケンスの各要素について変換関数を呼び出し、<see cref="T:System.Int64" /> の最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>シーケンスの各要素について変換関数を呼び出し、null 許容の <see cref="T:System.Decimal" /> の最小値を返します。</summary>
      <returns>シーケンスの最小値に対応する Nullable&lt;Decimal&gt; (C# の場合) または Nullable(Of Decimal) (Visual Basic の場合) の値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>シーケンスの各要素について変換関数を呼び出し、null 許容の <see cref="T:System.Double" /> の最小値を返します。</summary>
      <returns>シーケンスの最小値に対応する Nullable&lt;Double&gt; (C# の場合) または Nullable(Of Double) (Visual Basic の場合) の値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>シーケンスの各要素について変換関数を呼び出し、null 許容の <see cref="T:System.Int32" /> の最小値を返します。</summary>
      <returns>シーケンスの最小値に対応する Nullable&lt;Int32&gt; (C# の場合) または Nullable(Of Int32) (Visual Basic の場合) の値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>シーケンスの各要素について変換関数を呼び出し、null 許容の <see cref="T:System.Int64" /> の最小値を返します。</summary>
      <returns>シーケンスの最小値に対応する Nullable&lt;Int64&gt; (C# の場合) または Nullable(Of Int64) (Visual Basic の場合) の値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>シーケンスの各要素について変換関数を呼び出し、null 許容の <see cref="T:System.Single" /> の最小値を返します。</summary>
      <returns>シーケンスの最小値に対応する Nullable&lt;Single&gt; (C# の場合) または Nullable(Of Single) (Visual Basic の場合) の値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>シーケンスの各要素について変換関数を呼び出し、<see cref="T:System.Single" /> の最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>ジェネリック シーケンスの各要素に対して変換関数を呼び出し、結果の最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> によって返される値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
      <summary>指定した型に基づいて、<see cref="T:System.Collections.IEnumerable" /> の要素をフィルター処理します。</summary>
      <returns>
        <paramref name="TResult" /> 型の入力シーケンスの要素を格納する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="source">要素をフィルターする <see cref="T:System.Collections.IEnumerable" />。</param>
      <typeparam name="TResult">シーケンスの要素をフィルター処理する型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>シーケンスの要素をキーに従って昇順に並べ替えます。</summary>
      <returns>要素がキーに従って並べ替えられている <see cref="T:System.Linq.IOrderedEnumerable`1" />。</returns>
      <param name="source">順序付ける値のシーケンス。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>指定された比較子を使用してシーケンスの要素を昇順に並べ替えます。</summary>
      <returns>要素がキーに従って並べ替えられている <see cref="T:System.Linq.IOrderedEnumerable`1" />。</returns>
      <param name="source">順序付ける値のシーケンス。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>シーケンスの要素をキーに従って降順に並べ替えます。</summary>
      <returns>要素がキーに従って降順に並べ替えられている <see cref="T:System.Linq.IOrderedEnumerable`1" />。</returns>
      <param name="source">順序付ける値のシーケンス。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>指定された比較子を使用してシーケンスの要素を降順に並べ替えます。</summary>
      <returns>要素がキーに従って降順に並べ替えられている <see cref="T:System.Linq.IOrderedEnumerable`1" />。</returns>
      <param name="source">順序付ける値のシーケンス。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
      <summary>指定した範囲内の整数のシーケンスを生成します。</summary>
      <returns>連続した整数の範囲を含む IEnumerable&lt;Int32&gt; (C# の場合) または IEnumerable(Of Int32) (Visual Basic の場合)。</returns>
      <param name="start">シーケンス内の最初の整数の値。</param>
      <param name="count">生成する連続した整数の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" />  が 0 未満です。または<paramref name="start" /> + <paramref name="count" /> -1 が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
      <summary>繰り返される 1 つの値を含むシーケンスを生成します。</summary>
      <returns>繰り返される値を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="element">繰り返される値。</param>
      <param name="count">生成されたシーケンスで値を繰り返す回数。</param>
      <typeparam name="TResult">結果のシーケンスで繰り返される値の型。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" />  が 0 未満です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>シーケンスの要素の順序を反転させます。</summary>
      <returns>要素が入力シーケンスの要素に逆順で対応しているシーケンス。</returns>
      <param name="source">反転させる値のシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>シーケンスの各要素を新しいフォームに射影します。</summary>
      <returns>
        <paramref name="source" /> の各要素に対して変換関数を呼び出した結果として得られる要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="source">変換関数を呼び出す対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> によって返される値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
      <summary>要素のインデックスを組み込むことにより、シーケンスの各要素を新しいフォームに射影します。</summary>
      <returns>
        <paramref name="source" /> の各要素に対して変換関数を呼び出した結果として得られる要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="source">変換関数を呼び出す対象となる値のシーケンス。</param>
      <param name="selector">各ソース要素に適用する変換関数。この関数の 2 つ目のパラメーターは、ソース要素のインデックスを表します。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> によって返される値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>シーケンスの各要素を <see cref="T:System.Collections.Generic.IEnumerable`1" /> に射影して、結果のシーケンスを 1 つのシーケンスに平坦化し、その各要素に対して結果のセレクター関数を呼び出します。</summary>
      <returns>
        <paramref name="source" /> の各要素で一対多の変換関数 <paramref name="collectionSelector" /> を呼び出し、こうしたシーケンスの各要素とそれに対応するソース要素を結果の要素にマッピングした結果として得られる要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="source">射影する値のシーケンス。</param>
      <param name="collectionSelector">入力シーケンスの各要素に適用する変換関数。</param>
      <param name="resultSelector">中間シーケンスの各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TCollection">
        <paramref name="collectionSelector" /> によって収集される中間要素の型。</typeparam>
      <typeparam name="TResult">結果のシーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="collectionSelector" /> または <paramref name="resultSelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>シーケンスの各要素を <see cref="T:System.Collections.Generic.IEnumerable`1" /> に射影し、結果のシーケンスを 1 つのシーケンスに平坦化します。</summary>
      <returns>要素が入力シーケンスの各要素に一対多の変換関数を呼び出す結果である <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="source">射影する値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> によって返されるシーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>シーケンスの各要素を <see cref="T:System.Collections.Generic.IEnumerable`1" /> に射影して、結果のシーケンスを 1 つのシーケンスに平坦化し、その各要素に対して結果のセレクター関数を呼び出します。各ソース要素のインデックスは、その要素の中間の射影されたフォームで使用されます。</summary>
      <returns>
        <paramref name="collectionSelector" /> の各要素で一対多の変換関数 <paramref name="source" /> を呼び出し、こうしたシーケンスの各要素とそれに対応するソース要素を結果の要素にマッピングした結果として得られる要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="source">射影する値のシーケンス。</param>
      <param name="collectionSelector">各ソース要素に適用する変換関数。この関数の 2 つ目のパラメーターは、ソース要素のインデックスを表します。</param>
      <param name="resultSelector">中間シーケンスの各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TCollection">
        <paramref name="collectionSelector" /> によって収集される中間要素の型。</typeparam>
      <typeparam name="TResult">結果のシーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="collectionSelector" /> または <paramref name="resultSelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>シーケンスの各要素を <see cref="T:System.Collections.Generic.IEnumerable`1" /> に投影し、結果のシーケンスを 1 つのシーケンスにフラット化します。各ソース要素のインデックスは、その要素の射影されたフォームで使用されます。</summary>
      <returns>要素が入力シーケンスの各要素に一対多の変換関数を呼び出す結果である <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="source">射影する値のシーケンス。</param>
      <param name="selector">各ソース要素に適用する変換関数。この関数の 2 つ目のパラメーターは、ソース要素のインデックスを表します。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> によって返されるシーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>要素の型に対して既定の等値比較子を使用して要素を比較することで、2 つのシーケンスが等しいかどうかを判断します。</summary>
      <returns>型に関する既定の等価比較演算子に基づき、2 つのソース シーケンスの長さが等しく、対応する要素が等しい場合は true。それ以外の場合は false。</returns>
      <param name="first">
        <paramref name="second" /> と比較する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="second">1 つめのシーケンスと比較する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> または <paramref name="second" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>指定された <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用して要素を比較し、2 つのシーケンスが等しいかどうかを確認します。</summary>
      <returns>
        <paramref name="comparer" /> に従って、2 つのソース シーケンスの長さが等しく、対応する要素が等しい場合は true。それ以外の場合は false。</returns>
      <param name="first">
        <paramref name="second" /> と比較する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="second">1 つめのシーケンスと比較する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="comparer">要素の比較に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> または <paramref name="second" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  には複数の要素があります。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>シーケンスの唯一の要素を返します。シーケンス内の要素が 1 つだけではない場合は、例外をスローします。</summary>
      <returns>入力シーケンスの 1 つの要素。</returns>
      <param name="source">唯一の要素が返される、<see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">入力シーケンスに複数の要素が含まれています。または入力シーケンスが空です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>指定された条件を満たす、シーケンスの唯一の要素を返します。そのような要素が複数存在する場合は、例外をスローします。</summary>
      <returns>条件を満たす、入力シーケンスの 1 つの要素。</returns>
      <param name="source">返す唯一の要素が含まれている <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" />. の条件を満たす要素がありません。または<paramref name="predicate" /> の条件を満たす要素が複数あります。またはソース シーケンスが空です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>シーケンスの唯一の要素を返します。シーケンスが空の場合、既定値を返します。シーケンス内に要素が複数ある場合、このメソッドは例外をスローします。</summary>
      <returns>入力シーケンスの唯一の要素。シーケンスに要素が含まれない場合は default(<paramref name="TSource" />)。</returns>
      <param name="source">唯一の要素が返される、<see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">入力シーケンスに複数の要素が含まれています。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>指定された条件を満たす、シーケンスの唯一の要素を返します。そのような要素が存在しない場合、既定値を返します。複数の要素が条件を満たす場合、このメソッドは例外をスローします。</summary>
      <returns>条件を満たす入力シーケンスの唯一要素、または、そのような要素が見つからない場合は default(<paramref name="TSource" />)。</returns>
      <param name="source">返す唯一の要素が含まれている <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>シーケンス内の指定された数の要素をバイパスし、残りの要素を返します。</summary>
      <returns>入力シーケンスで指定されたインデックスの後に出現する要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="source">返す要素が含まれている <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="count">残りの要素を返す前にスキップする要素の数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>指定された条件が満たされる限り、シーケンスの要素をバイパスした後、残りの要素を返します。</summary>
      <returns>
        <paramref name="predicate" /> で指定されたテストに合格しない連続する最初の要素から始まる入力シーケンスの要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="source">返す要素が含まれている <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>指定された条件が満たされる限り、シーケンスの要素をバイパスした後、残りの要素を返します。要素のインデックスは、述語関数のロジックで使用されます。</summary>
      <returns>
        <paramref name="predicate" /> で指定されたテストに合格しない連続する最初の要素から始まる入力シーケンスの要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="source">返す要素が含まれている <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">各ソース要素が条件に当てはまるかどうかをテストする関数。この関数の 2 つ目のパラメーターは、ソース要素のインデックスを表します。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
        <see cref="T:System.Decimal" /> 値のシーケンスの合計を計算します。</summary>
      <returns>シーケンスの値の合計。</returns>
      <param name="source">合計を計算する、<see cref="T:System.Decimal" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.OverflowException">合計が <see cref="F:System.Decimal.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
        <see cref="T:System.Double" /> 値のシーケンスの合計を計算します。</summary>
      <returns>シーケンスの値の合計。</returns>
      <param name="source">合計を計算する、<see cref="T:System.Double" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
        <see cref="T:System.Int32" /> 値のシーケンスの合計を計算します。</summary>
      <returns>シーケンスの値の合計。</returns>
      <param name="source">合計を計算する、<see cref="T:System.Int32" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.OverflowException">合計が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
        <see cref="T:System.Int64" /> 値のシーケンスの合計を計算します。</summary>
      <returns>シーケンスの値の合計。</returns>
      <param name="source">合計を計算する、<see cref="T:System.Int64" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.OverflowException">合計が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>null 許容の <see cref="T:System.Decimal" /> 値のシーケンスの合計を計算します。</summary>
      <returns>シーケンスの値の合計。</returns>
      <param name="source">合計を計算する、null 許容の <see cref="T:System.Decimal" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.OverflowException">合計が <see cref="F:System.Decimal.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>null 許容の <see cref="T:System.Double" /> 値のシーケンスの合計を計算します。</summary>
      <returns>シーケンスの値の合計。</returns>
      <param name="source">合計を計算する、null 許容の <see cref="T:System.Double" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>null 許容の <see cref="T:System.Int32" /> 値のシーケンスの合計を計算します。</summary>
      <returns>シーケンスの値の合計。</returns>
      <param name="source">合計を計算する、null 許容の <see cref="T:System.Int32" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.OverflowException">合計が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>null 許容の <see cref="T:System.Int64" /> 値のシーケンスの合計を計算します。</summary>
      <returns>シーケンスの値の合計。</returns>
      <param name="source">合計を計算する、null 許容の <see cref="T:System.Int64" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.OverflowException">合計が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>null 許容の <see cref="T:System.Single" /> 値のシーケンスの合計を計算します。</summary>
      <returns>シーケンスの値の合計。</returns>
      <param name="source">合計を計算する、null 許容の <see cref="T:System.Single" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
        <see cref="T:System.Single" /> 値のシーケンスの合計を計算します。</summary>
      <returns>シーケンスの値の合計。</returns>
      <param name="source">合計を計算する、<see cref="T:System.Single" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>入力シーケンスの各要素について変換関数を呼び出すことで取得される <see cref="T:System.Decimal" /> 値のシーケンスの合計を計算します。</summary>
      <returns>射影された値の合計。</returns>
      <param name="source">合計の計算に使用される値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.OverflowException">合計が <see cref="F:System.Decimal.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>入力シーケンスの各要素について変換関数を呼び出すことで取得される <see cref="T:System.Double" /> 値のシーケンスの合計を計算します。</summary>
      <returns>射影された値の合計。</returns>
      <param name="source">合計の計算に使用される値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>入力シーケンスの各要素について変換関数を呼び出すことで取得される <see cref="T:System.Int32" /> 値のシーケンスの合計を計算します。</summary>
      <returns>射影された値の合計。</returns>
      <param name="source">合計の計算に使用される値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.OverflowException">合計が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>入力シーケンスの各要素について変換関数を呼び出すことで取得される <see cref="T:System.Int64" /> 値のシーケンスの合計を計算します。</summary>
      <returns>射影された値の合計。</returns>
      <param name="source">合計の計算に使用される値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.OverflowException">合計が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>入力シーケンスの各要素について変換関数を呼び出すことで取得される、null 許容の <see cref="T:System.Decimal" /> 値のシーケンスの合計を計算します。</summary>
      <returns>射影された値の合計。</returns>
      <param name="source">合計の計算に使用される値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.OverflowException">合計が <see cref="F:System.Decimal.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>入力シーケンスの各要素について変換関数を呼び出すことで取得される、null 許容の <see cref="T:System.Double" /> 値のシーケンスの合計を計算します。</summary>
      <returns>射影された値の合計。</returns>
      <param name="source">合計の計算に使用される値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>入力シーケンスの各要素について変換関数を呼び出すことで取得される、null 許容の <see cref="T:System.Int32" /> 値のシーケンスの合計を計算します。</summary>
      <returns>射影された値の合計。</returns>
      <param name="source">合計の計算に使用される値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.OverflowException">合計が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>入力シーケンスの各要素について変換関数を呼び出すことで取得される、null 許容の <see cref="T:System.Int64" /> 値のシーケンスの合計を計算します。</summary>
      <returns>射影された値の合計。</returns>
      <param name="source">合計の計算に使用される値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.OverflowException">合計が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>入力シーケンスの各要素について変換関数を呼び出すことで取得される、null 許容の <see cref="T:System.Single" /> 値のシーケンスの合計を計算します。</summary>
      <returns>射影された値の合計。</returns>
      <param name="source">合計の計算に使用される値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>入力シーケンスの各要素について変換関数を呼び出すことで取得される <see cref="T:System.Single" /> 値のシーケンスの合計を計算します。</summary>
      <returns>射影された値の合計。</returns>
      <param name="source">合計の計算に使用される値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>シーケンスの先頭から、指定された数の連続する要素を返します。</summary>
      <returns>入力シーケンスの先頭から、指定された数の要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="source">要素を返すシーケンス。</param>
      <param name="count">返す要素数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>指定された条件が満たされる限り、シーケンスから要素を返します。</summary>
      <returns>テストに合格しない要素の前に出現する入力シーケンスの要素を含む<see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="source">要素を返すシーケンス。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>指定された条件が満たされる限り、シーケンスから要素を返します。要素のインデックスは、述語関数のロジックで使用されます。</summary>
      <returns>テストに合格しなくなった要素の前に出現する、入力シーケンスの要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="source">要素を返すシーケンス。</param>
      <param name="predicate">各ソース要素が条件に当てはまるかどうかをテストする関数。この関数の 2 つ目のパラメーターは、ソース要素のインデックスを表します。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>キーに従って、シーケンス内の後続の要素を昇順で配置します。</summary>
      <returns>要素がキーに従って並べ替えられている <see cref="T:System.Linq.IOrderedEnumerable`1" />。</returns>
      <param name="source">並べ替える要素を格納する <see cref="T:System.Linq.IOrderedEnumerable`1" />。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>指定された比較子を使用して、シーケンス内の後続の要素を昇順で配置します。</summary>
      <returns>要素がキーに従って並べ替えられている <see cref="T:System.Linq.IOrderedEnumerable`1" />。</returns>
      <param name="source">並べ替える要素を格納する <see cref="T:System.Linq.IOrderedEnumerable`1" />。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>キーに従って、シーケンス内の後続の要素を降順で配置します。</summary>
      <returns>要素がキーに従って降順に並べ替えられている <see cref="T:System.Linq.IOrderedEnumerable`1" />。</returns>
      <param name="source">並べ替える要素を格納する <see cref="T:System.Linq.IOrderedEnumerable`1" />。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>指定された比較子を使用して、シーケンス内の後続の要素を降順で配置します。</summary>
      <returns>要素がキーに従って降順に並べ替えられている <see cref="T:System.Linq.IOrderedEnumerable`1" />。</returns>
      <param name="source">並べ替える要素を格納する <see cref="T:System.Linq.IOrderedEnumerable`1" />。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> から配列を作成します。</summary>
      <returns>入力シーケンスの要素を含む配列。</returns>
      <param name="source">配列を作成する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>指定したキー セレクター関数に従って、<see cref="T:System.Collections.Generic.IEnumerable`1" /> から <see cref="T:System.Collections.Generic.Dictionary`2" /> を作成します。</summary>
      <returns>キーと値を格納している <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> を作成する元となる <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null です。または<paramref name="keySelector" /> は、null のキーを生成します。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" />  は、2 つの要素に対して重複するキーを生成します。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>指定したキー セレクター関数およびキー比較子に従って、<see cref="T:System.Collections.Generic.IEnumerable`1" /> から <see cref="T:System.Collections.Generic.Dictionary`2" /> を作成します。</summary>
      <returns>キーと値を格納している <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> を作成する元となる <see cref="T:System.Collections.Generic.Dictionary`2" />。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null です。または<paramref name="keySelector" /> は、null のキーを生成します。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" />  は、2 つの要素に対して重複するキーを生成します。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>指定したキー セレクター関数および要素セレクター関数に従って、<see cref="T:System.Collections.Generic.IEnumerable`1" /> から <see cref="T:System.Collections.Generic.Dictionary`2" /> を作成します。</summary>
      <returns>入力シーケンスから選択された <paramref name="TElement" /> 型の値を格納する <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> を作成する元となる <see cref="T:System.Collections.Generic.Dictionary`2" />。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="elementSelector">各要素から結果の要素値を生成する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> によって返される値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> または <paramref name="elementSelector" /> が null です。または<paramref name="keySelector" /> は、null のキーを生成します。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" />  は、2 つの要素に対して重複するキーを生成します。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>指定されたキー セレクター関数、比較演算子、および要素セレクター関数に従って、<see cref="T:System.Collections.Generic.IEnumerable`1" /> から <see cref="T:System.Collections.Generic.Dictionary`2" /> を作成します。</summary>
      <returns>入力シーケンスから選択された <paramref name="TElement" /> 型の値を格納する <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> を作成する元となる <see cref="T:System.Collections.Generic.Dictionary`2" />。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="elementSelector">各要素から結果の要素値を生成する変換関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> によって返される値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> または <paramref name="elementSelector" /> が null です。または<paramref name="keySelector" /> は、null のキーを生成します。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" />  は、2 つの要素に対して重複するキーを生成します。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> から <see cref="T:System.Collections.Generic.IEnumerable`1" /> を作成します。</summary>
      <returns>入力シーケンスの要素を含む <see cref="T:System.Collections.Generic.List`1" />。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.List`1" /> を作成する元となる <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>指定したキー セレクター関数に従って、<see cref="T:System.Collections.Generic.IEnumerable`1" /> から <see cref="T:System.Linq.Lookup`2" /> を作成します。</summary>
      <returns>キーと値を格納している <see cref="T:System.Linq.Lookup`2" />。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> を作成する元となる <see cref="T:System.Linq.Lookup`2" />。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>指定したキー セレクター関数およびキー比較子に従って、<see cref="T:System.Collections.Generic.IEnumerable`1" /> から <see cref="T:System.Linq.Lookup`2" /> を作成します。</summary>
      <returns>キーと値を格納している <see cref="T:System.Linq.Lookup`2" />。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> を作成する元となる <see cref="T:System.Linq.Lookup`2" />。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>指定したキー セレクター関数および要素セレクター関数に従って、<see cref="T:System.Collections.Generic.IEnumerable`1" /> から <see cref="T:System.Linq.Lookup`2" /> を作成します。</summary>
      <returns>入力シーケンスから選択された <paramref name="TElement" /> 型の値を格納する <see cref="T:System.Linq.Lookup`2" />。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> を作成する元となる <see cref="T:System.Linq.Lookup`2" />。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="elementSelector">各要素から結果の要素値を生成する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> によって返される値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> または <paramref name="elementSelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>指定されたキー セレクター関数、比較演算子、および要素セレクター関数に従って、<see cref="T:System.Collections.Generic.IEnumerable`1" /> から <see cref="T:System.Linq.Lookup`2" /> を作成します。</summary>
      <returns>入力シーケンスから選択された <paramref name="TElement" /> 型の値を格納する <see cref="T:System.Linq.Lookup`2" />。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> を作成する元となる <see cref="T:System.Linq.Lookup`2" />。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="elementSelector">各要素から結果の要素値を生成する変換関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> によって返される値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> または <paramref name="elementSelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>既定の等値比較子を使用して、2 つのシーケンスの和集合を生成します。</summary>
      <returns>2 つの入力シーケンスの要素 (重複する要素は除く) を格納している <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="first">一意の要素が最初の和集合を構成している <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="second">一意の要素が 2 つめの和集合を構成している <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> または <paramref name="second" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>指定した <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用して 2 つのシーケンスの和集合を生成します。</summary>
      <returns>2 つの入力シーケンスの要素 (重複する要素は除く) を格納している <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="first">一意の要素が最初の和集合を構成している <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="second">一意の要素が 2 つめの和集合を構成している <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="comparer">値を比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> または <paramref name="second" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>述語に基づいて値のシーケンスをフィルター処理します。</summary>
      <returns>条件を満たす、入力シーケンスの要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="source">フィルター処理対象の <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>述語に基づいて値のシーケンスをフィルター処理します。各要素のインデックスは、述語関数のロジックで使用されます。</summary>
      <returns>条件を満たす、入力シーケンスの要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="source">フィルター処理対象の <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">各ソース要素が条件に当てはまるかどうかをテストする関数。この関数の 2 つ目のパラメーターは、ソース要素のインデックスを表します。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>指定された述語関数を使用して 2 つのシーケンスをマージします。</summary>
      <returns>2 つの入力シーケンスのマージされた要素が格納されている <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="first">マージする 1 番目のシーケンス。</param>
      <param name="second">マージする 2 番目のシーケンス。</param>
      <param name="resultSelector">2 つのシーケンスの要素をマージする方法を指定する関数。</param>
      <typeparam name="TFirst">1 番目の入力シーケンスの要素の型。</typeparam>
      <typeparam name="TSecond">2 番目の入力シーケンスの要素の型。</typeparam>
      <typeparam name="TResult">結果のシーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> または <paramref name="second" /> が null です。</exception>
    </member>
    <member name="T:System.Linq.EnumerableExecutor">
      <summary>式ツリーを表し、式ツリーを書き換えた後で式ツリーを実行する機能を提供します。</summary>
    </member>
    <member name="M:System.Linq.EnumerableExecutor.#ctor">
      <summary>
        <see cref="T:System.Linq.EnumerableExecutor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Linq.EnumerableExecutor`1">
      <summary>式ツリーを表し、式ツリーを書き換えた後で式ツリーを実行する機能を提供します。</summary>
      <typeparam name="T">式ツリーの実行結果の値のデータ型。</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableExecutor`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>
        <see cref="T:System.Linq.EnumerableExecutor`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="expression">新しいインスタンスに関連付ける式ツリー。</param>
    </member>
    <member name="T:System.Linq.EnumerableQuery">
      <summary>
        <see cref="T:System.Collections.IEnumerable" /> を <see cref="T:System.Linq.EnumerableQuery" /> データ ソースとして示します。</summary>
    </member>
    <member name="M:System.Linq.EnumerableQuery.#ctor">
      <summary>
        <see cref="T:System.Linq.EnumerableQuery" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Linq.EnumerableQuery`1">
      <summary>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションを <see cref="T:System.Linq.IQueryable`1" /> データ ソースとして示します。</summary>
      <typeparam name="T">コレクション内のデータの型。</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Linq.EnumerableQuery`1" /> クラスの新しいインスタンスを初期化し、<see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションと関連付けます。</summary>
      <param name="enumerable">新しいインスタンスに関連付けるコレクション。</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>
        <see cref="T:System.Linq.EnumerableQuery`1" /> クラスの新しいインスタンスを初期化し、インスタンスを式ツリーと関連付けます。</summary>
      <param name="expression">新しいインスタンスに関連付ける式ツリー。</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>関連付けられている <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクション反復処理できる列挙子を返します。これが null の場合は、関連付けられている式ツリーを <see cref="T:System.Collections.Generic.IEnumerable`1" /> データ ソースに対するクエリとして書き換え、それを実行することによって得られるコレクションを反復処理できる列挙子を返します。</summary>
      <returns>関連付けられているデータ ソースの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>関連付けられている <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクション反復処理できる列挙子を返します。これが null の場合は、関連付けられている式ツリーを <see cref="T:System.Collections.Generic.IEnumerable`1" /> データ ソースに対するクエリとして書き換え、それを実行することによって得られるコレクションを反復処理できる列挙子を返します。</summary>
      <returns>関連付けられているデータ ソースの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#ElementType">
      <summary>このインスタンスが表すコレクション内のデータの型を取得します。</summary>
      <returns>このインスタンスが表すコレクション内のデータの型。</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Expression">
      <summary>このインスタンスに関連付けられた式ツリーまたはこのインスタンスを表す式ツリーを取得します。</summary>
      <returns>このインスタンスに関連付けられた式ツリーまたはこのインスタンスを表す式ツリー。</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Provider">
      <summary>このインスタンスに関連付けられたクエリ プロバイダーを取得します。</summary>
      <returns>このインスタンスに関連付けられているクエリ プロバイダー。</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>新しい <see cref="T:System.Linq.EnumerableQuery`1" /> オブジェクトを構築し、それを、データの <see cref="T:System.Linq.IQueryable`1" /> コレクションを表す指定した式ツリーに関連付けます。</summary>
      <returns>
        <paramref name="expression" /> と関連付けられている EnumerableQuery オブジェクト。</returns>
      <param name="expression">実行する式ツリー。</param>
      <typeparam name="S">
        <paramref name="expression" /> が表すコレクション内のデータの型。</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary>新しい <see cref="T:System.Linq.EnumerableQuery`1" /> オブジェクトを構築し、それを、データの <see cref="T:System.Linq.IQueryable" /> コレクションを表す指定した式ツリーに関連付けます。</summary>
      <returns>
        <paramref name="expression" /> と関連付けられている <see cref="T:System.Linq.EnumerableQuery`1" /> オブジェクト。</returns>
      <param name="expression">データの <see cref="T:System.Linq.IQueryable" /> コレクションを示す式ツリー。</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
      <summary>
        <see cref="T:System.Linq.Enumerable" /> メソッドでクエリできない列挙可能なデータ ソースで、<see cref="T:System.Linq.Queryable" /> メソッドの代わりに <see cref="T:System.Linq.Queryable" /> メソッドを呼び出すように式を書き換えた後で、式を実行します。</summary>
      <returns>
        <paramref name="expression" /> の実行結果の値。</returns>
      <param name="expression">実行する式ツリー。</param>
      <typeparam name="S">
        <paramref name="expression" /> が表すコレクション内のデータの型。</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary>
        <see cref="T:System.Linq.Queryable" /> メソッドでクエリできない列挙可能なデータ ソースで、<see cref="T:System.Linq.Queryable" /> メソッドの代わりに <see cref="T:System.Linq.Enumerable" /> メソッドを呼び出すように式を書き換えた後で、式を実行します。</summary>
      <returns>
        <paramref name="expression" /> の実行結果の値。</returns>
      <param name="expression">実行する式ツリー。</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.ToString">
      <summary>列挙可能なコレクションのテキスト表現を返します。これが null の場合は、このインスタンスに関連付けられている式ツリーのテキスト表現を返します。</summary>
      <returns>列挙可能なコレクションのテキスト表現。これが null の場合は、このインスタンスに関連付けられている式ツリーのテキスト表現。</returns>
    </member>
    <member name="T:System.Linq.IGrouping`2">
      <summary>共通のキーを持つオブジェクトのコレクションを表します。</summary>
      <typeparam name="TKey">
        <see cref="T:System.Linq.IGrouping`2" /> のキーの型。この型パラメーターは共変です。つまり、指定した種類または強い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.IGrouping`2" /> 内の値の型。</typeparam>
    </member>
    <member name="P:System.Linq.IGrouping`2.Key">
      <summary>
        <see cref="T:System.Linq.IGrouping`2" /> のキーを取得します。</summary>
      <returns>
        <see cref="T:System.Linq.IGrouping`2" /> のキー。</returns>
    </member>
    <member name="T:System.Linq.ILookup`2">
      <summary>キーを値の <see cref="T:System.Collections.Generic.IEnumerable`1" /> シーケンスにマップするデータ構造体のインデクサー、サイズ プロパティ、およびブール検索メソッドを定義します。</summary>
      <typeparam name="TKey">
        <see cref="T:System.Linq.ILookup`2" /> 内のキーの型。</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.ILookup`2" /> 内の値を構成する <see cref="T:System.Collections.Generic.IEnumerable`1" /> シーケンス内の要素の型。</typeparam>
    </member>
    <member name="M:System.Linq.ILookup`2.Contains(`0)">
      <summary>指定されたキーが <see cref="T:System.Linq.ILookup`2" /> にあるかどうかを確認します。</summary>
      <returns>
        <paramref name="key" /> が <see cref="T:System.Linq.ILookup`2" /> に含まれる場合は true。それ以外の場合は false。</returns>
      <param name="key">
        <see cref="T:System.Linq.ILookup`2" /> で検索するキー。</param>
    </member>
    <member name="P:System.Linq.ILookup`2.Count">
      <summary>
        <see cref="T:System.Linq.ILookup`2" /> 内のキーと値コレクションのペアの数を取得します。</summary>
      <returns>
        <see cref="T:System.Linq.ILookup`2" /> 内のキーと値コレクションのペアの数。</returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Item(`0)">
      <summary>指定されたキーでインデックスが作成された値の <see cref="T:System.Collections.Generic.IEnumerable`1" /> シーケンスを取得します。</summary>
      <returns>指定したキーによりインデックス付けされた値の <see cref="T:System.Collections.Generic.IEnumerable`1" /> シーケンス。</returns>
      <param name="key">必要な値のシーケンスのキー。</param>
    </member>
    <member name="T:System.Linq.IOrderedEnumerable`1">
      <summary>並べ替えられたシーケンスを表します。</summary>
      <typeparam name="TElement">シーケンスの要素の型。</typeparam>
    </member>
    <member name="M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
      <summary>キーに従って <see cref="T:System.Linq.IOrderedEnumerable`1" /> の要素を順番に並べ替えます。</summary>
      <returns>要素がキーに従って並べ替えられている <see cref="T:System.Linq.IOrderedEnumerable`1" />。</returns>
      <param name="keySelector">各要素のキーの抽出に使用する <see cref="T:System.Func`2" />。</param>
      <param name="comparer">返されたシーケンスでの配置用のキーの比較に使用される <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <param name="descending">要素を降順に並べ替える場合は true、要素を昇順に並べ替える場合は false。</param>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって生成されるキーの型。</typeparam>
    </member>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary>並べ替え操作の結果を表します。</summary>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary>並べ替え操作の結果を表します。</summary>
      <typeparam name="T">データ ソースの内容の型。この型パラメーターは共変です。つまり、指定した種類または強い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary>データの型が指定されていない場合に特定のデータ ソースに対するクエリを評価する機能を提供します。</summary>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary>
        <see cref="T:System.Linq.IQueryable" /> のこのインスタンスに関連付けられた式ツリーが実行されたときに返される要素の型を取得します。</summary>
      <returns>このオブジェクトに関連付けられている式ツリーが実行されたときに返される要素の型を示す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary>
        <see cref="T:System.Linq.IQueryable" /> のインスタンスと関連付けられている式ツリーを取得します。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable" /> のこのインスタンスに関連付けられている <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary>このデータ ソースに関連付けられたクエリ プロバイダーを取得します。</summary>
      <returns>このデータ ソースに関連付けられた <see cref="T:System.Linq.IQueryProvider" />。</returns>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary>データの型がわかっている場合に特定のデータ ソースに対するクエリを評価する機能を提供します。</summary>
      <typeparam name="T">データ ソース内のデータの型。この型パラメーターは共変です。つまり、指定した種類または強い派生型を使用できます。 共変および反変の詳細については、「[2678dc63-c7f9-4590-9ddc-0a4df684d42e]」を参照してください。</typeparam>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary>
        <see cref="T:System.Linq.IQueryable" /> オブジェクトによって説明されるクエリを作成および実行するメソッドを定義します。</summary>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>指定した式ツリーによって表されるクエリを評価できる <see cref="T:System.Linq.IQueryable`1" /> オブジェクトを構築します。</summary>
      <returns>指定した式ツリーによって表されるクエリを評価できる <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="expression">LINQ クエリを表す式ツリー。</param>
      <typeparam name="TElement">返される <see cref="T:System.Linq.IQueryable`1" /> の要素の型。</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary>指定した式ツリーによって表されるクエリを評価できる <see cref="T:System.Linq.IQueryable" /> オブジェクトを構築します。</summary>
      <returns>指定した式ツリーによって表されるクエリを評価できる <see cref="T:System.Linq.IQueryable" />。</returns>
      <param name="expression">LINQ クエリを表す式ツリー。</param>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary>指定した式ツリーによって表される、厳密に型指定されたクエリを実行します。</summary>
      <returns>指定したクエリの実行結果の値。</returns>
      <param name="expression">LINQ クエリを表す式ツリー。</param>
      <typeparam name="TResult">クエリの実行結果の値の型。</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary>指定した式ツリーによって表されるクエリを実行します。</summary>
      <returns>指定したクエリの実行結果の値。</returns>
      <param name="expression">LINQ クエリを表す式ツリー。</param>
    </member>
    <member name="T:System.Linq.Lookup`2">
      <summary>それぞれ 1 つ以上の値に割り当てられたキーのコレクションを表します。</summary>
      <typeparam name="TKey">
        <see cref="T:System.Linq.Lookup`2" /> 内のキーの型。</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.Lookup`2" /> 内の各 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 値の要素の型。</typeparam>
    </member>
    <member name="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
      <summary>各キーとその関連する値に変換関数を適用し、結果を返します。</summary>
      <returns>
        <see cref="T:System.Linq.Lookup`2" /> 内にあるキーと値コレクションの各ペアの 1 つの値が格納されるコレクション。</returns>
      <param name="resultSelector">各キーとその関連する値からの結果の値を導き出す関数。</param>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> によって生成される結果の値の型。</typeparam>
    </member>
    <member name="M:System.Linq.Lookup`2.Contains(`0)">
      <summary>指定されたキーが <see cref="T:System.Linq.Lookup`2" /> にあるかどうかを確認します。</summary>
      <returns>
        <paramref name="key" /> が <see cref="T:System.Linq.Lookup`2" /> に含まれる場合は true。それ以外の場合は false。</returns>
      <param name="key">
        <see cref="T:System.Linq.Lookup`2" /> で検索するキー。</param>
    </member>
    <member name="P:System.Linq.Lookup`2.Count">
      <summary>
        <see cref="T:System.Linq.Lookup`2" /> 内のキーと値コレクションのペアの数を取得します。</summary>
      <returns>
        <see cref="T:System.Linq.Lookup`2" /> 内のキーと値コレクションのペアの数。</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.GetEnumerator">
      <summary>
        <see cref="T:System.Linq.Lookup`2" /> で反復するジェネリック型列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Linq.Lookup`2" /> の列挙子。</returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Item(`0)">
      <summary>指定したキーによりインデックス付けされた値のコレクションを取得します。</summary>
      <returns>指定したキーによりインデックス付けされた値のコレクション。</returns>
      <param name="key">必要な値のコレクションのキー。</param>
    </member>
    <member name="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>
        <see cref="T:System.Linq.Lookup`2" /> を反復処理する列挙子を返します。このクラスは継承できません。</summary>
      <returns>
        <see cref="T:System.Linq.Lookup`2" /> の列挙子。</returns>
    </member>
    <member name="T:System.Linq.Queryable">
      <summary>
        <see cref="T:System.Linq.IQueryable`1" /> を実装するデータ構造を問い合わせる static (Visual Basic では Shared) メソッドのセットを提供します。</summary>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
      <summary>シーケンスにアキュムレータ関数を適用します。</summary>
      <returns>最終的なアキュムレータ値。</returns>
      <param name="source">集計対象のシーケンス。</param>
      <param name="func">各要素に適用するアキュムレータ関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="func" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
      <summary>シーケンスにアキュムレータ関数を適用します。指定されたシード値が最初のアキュムレータ値として使用されます。</summary>
      <returns>最終的なアキュムレータ値。</returns>
      <param name="source">集計対象のシーケンス。</param>
      <param name="seed">最初のアキュムレータ値。</param>
      <param name="func">各要素に対して呼び出すアキュムレータ関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TAccumulate">アキュムレータ値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="func" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
      <summary>シーケンスにアキュムレータ関数を適用します。指定したシード値は最初のアキュムレータ値として使用され、指定した関数は結果値の選択に使用されます。</summary>
      <returns>変換された最終的なアキュムレータ値。</returns>
      <param name="source">集計対象のシーケンス。</param>
      <param name="seed">最初のアキュムレータ値。</param>
      <param name="func">各要素に対して呼び出すアキュムレータ関数。</param>
      <param name="selector">最終的なアキュムレータ値を結果値に変換する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TAccumulate">アキュムレータ値の型。</typeparam>
      <typeparam name="TResult">結果の値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="func" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>シーケンスのすべての要素が条件を満たしているかどうかを判断します。</summary>
      <returns>指定した述語内でソース シーケンスの各要素がテストに合格する場合、またはシーケンスが空の場合は true。それ以外の場合は、false。</returns>
      <param name="source">条件を満たしているかどうかをテストする要素を含むシーケンス。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
      <summary>シーケンスに要素が含まれているかどうかを判断します。</summary>
      <returns>ソース シーケンスに要素が含まれている場合は true。それ以外の場合は false。</returns>
      <param name="source">空かどうかを確認するシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>シーケンスの任意の要素が条件を満たしているかどうかを判断します。</summary>
      <returns>指定された述語でソース シーケンスのいずれかの要素がテストに合格した場合は true。それ以外の場合は false。</returns>
      <param name="source">条件を満たしているかどうかをテストする要素を含むシーケンス。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>ジェネリック型の <see cref="T:System.Collections.Generic.IEnumerable`1" /> をジェネリック型の <see cref="T:System.Linq.IQueryable`1" /> に変換します。</summary>
      <returns>入力シーケンスを表す <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source">変換するシーケンス。</param>
      <typeparam name="TElement">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
      <summary>
        <see cref="T:System.Collections.IEnumerable" /> を <see cref="T:System.Linq.IQueryable" /> に変換します。</summary>
      <returns>入力シーケンスを表す <see cref="T:System.Linq.IQueryable" />。</returns>
      <param name="source">変換するシーケンス。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> は、いくつかの <paramref name="T" /> に対して <see cref="T:System.Collections.Generic.IEnumerable`1" /> を実装していません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
      <summary>
        <see cref="T:System.Decimal" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均を計算する <see cref="T:System.Decimal" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
      <summary>
        <see cref="T:System.Double" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均を計算する <see cref="T:System.Double" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
      <summary>
        <see cref="T:System.Int32" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均を計算する <see cref="T:System.Int32" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
      <summary>
        <see cref="T:System.Int64" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均を計算する <see cref="T:System.Int64" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>null 許容の <see cref="T:System.Decimal" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均。ソース シーケンスが空の場合か、ソース シーケンスに null 値しか含まれない場合は null。</returns>
      <param name="source">平均を計算する、null 許容の <see cref="T:System.Decimal" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>null 許容の <see cref="T:System.Double" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均。ソース シーケンスが空の場合か、ソース シーケンスに null 値しか含まれない場合は null。</returns>
      <param name="source">平均を計算する、null 許容の <see cref="T:System.Double" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>null 許容の <see cref="T:System.Int32" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均。ソース シーケンスが空の場合か、ソース シーケンスに null 値しか含まれない場合は null。</returns>
      <param name="source">平均を計算する、null 許容の <see cref="T:System.Int32" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>null 許容の <see cref="T:System.Int64" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均。ソース シーケンスが空の場合か、ソース シーケンスに null 値しか含まれない場合は null。</returns>
      <param name="source">平均を計算する、null 許容の <see cref="T:System.Int64" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>null 許容の <see cref="T:System.Single" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均。ソース シーケンスが空の場合か、ソース シーケンスに null 値しか含まれない場合は null。</returns>
      <param name="source">平均を計算する、null 許容の <see cref="T:System.Single" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
      <summary>
        <see cref="T:System.Single" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均を計算する <see cref="T:System.Single" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出すことで取得される、<see cref="T:System.Decimal" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値の計算に使用される値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出すことで取得される、<see cref="T:System.Double" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値計算の対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出すことで取得される、<see cref="T:System.Int32" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値計算の対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出すことで取得される、<see cref="T:System.Int64" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値計算の対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出すことで取得される、null 許容の <see cref="T:System.Decimal" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均。<paramref name="source" /> シーケンスが空か null 値のみを含む場合は null。</returns>
      <param name="source">平均値計算の対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出すことで取得される、null 許容の <see cref="T:System.Double" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均。<paramref name="source" /> シーケンスが空か null 値のみを含む場合は null。</returns>
      <param name="source">平均値計算の対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出すことで取得される、null 許容の <see cref="T:System.Int32" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均。<paramref name="source" /> シーケンスが空か null 値のみを含む場合は null。</returns>
      <param name="source">平均値計算の対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出すことで取得される、null 許容の <see cref="T:System.Int64" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均。<paramref name="source" /> シーケンスが空か null 値のみを含む場合は null。</returns>
      <param name="source">平均値計算の対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出すことで取得される、null 許容の <see cref="T:System.Single" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均。<paramref name="source" /> シーケンスが空か null 値のみを含む場合は null。</returns>
      <param name="source">平均値計算の対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出すことで取得される、<see cref="T:System.Single" /> 値のシーケンスの平均を計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値計算の対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
      <summary>指定した型に <see cref="T:System.Linq.IQueryable" /> の要素を変換します。</summary>
      <returns>指定した型に変換されたソース シーケンスの各要素が格納されている <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source">変換される要素を含む <see cref="T:System.Linq.IQueryable" />。</param>
      <typeparam name="TResult">
        <paramref name="source" /> の要素の変換後の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidCastException">シーケンスの要素を <paramref name="TResult" /> 型にキャストできません。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>2 つのシーケンスを連結します。</summary>
      <returns>2 つの入力シーケンスの連結された要素が格納されている <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source1">連結する最初のシーケンス。</param>
      <param name="source2">最初のシーケンスに連結するシーケンス。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> または <paramref name="source2" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
      <summary>既定の等値比較子を使用して、指定した要素がシーケンスに含まれているかどうかを判断します。</summary>
      <returns>指定した値を持つ要素が入力シーケンスに含まれている場合は true。それ以外の場合は false。</returns>
      <param name="source">
        <paramref name="item" /> を検索する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="item">シーケンス内で検索するオブジェクト。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>指定した <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用して、指定した要素がシーケンスに含まれているかどうかを判断します。</summary>
      <returns>指定した値を持つ要素が入力シーケンスに含まれている場合は true。それ以外の場合は false。</returns>
      <param name="source">
        <paramref name="item" /> を検索する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="item">シーケンス内で検索するオブジェクト。</param>
      <param name="comparer">値を比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
      <summary>シーケンス内の要素数を返します。</summary>
      <returns>入力シーケンス内の要素数。</returns>
      <param name="source">カウントされる要素を含む <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> に含まれる要素の数が、<see cref="F:System.Int32.MaxValue" /> を上回っています。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>指定したシーケンス内の、条件を満たす要素の数を返します。</summary>
      <returns>述語関数の条件を満たす、シーケンス内の要素数。</returns>
      <param name="source">カウント対象の要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> に含まれる要素の数が、<see cref="F:System.Int32.MaxValue" /> を上回っています。</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
      <summary>指定したシーケンスの要素を返します。シーケンスが空の場合はシングルトン コレクションにある型パラメーターの既定値を返します。</summary>
      <returns>
        <paramref name="source" /> が空の場合は default(<paramref name="TSource" />) を含む <see cref="T:System.Linq.IQueryable`1" />。それ以外の場合は <paramref name="source" />。</returns>
      <param name="source">空である場合に既定値を返す <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
      <summary>指定されたシーケンスの要素を返します。シーケンスが空の場合はシングルトン コレクションにある指定の値を返します。</summary>
      <returns>
        <paramref name="defaultValue" /> が空の場合は <paramref name="source" /> が格納されている <see cref="T:System.Linq.IQueryable`1" />。それ以外の場合は <paramref name="source" />。</returns>
      <param name="source">空である場合に指定された値を返す <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="defaultValue">シーケンスが空の場合に返す値。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
      <summary>既定の等値比較子を使用して値を比較することにより、シーケンスから一意の要素を返します。</summary>
      <returns>
        <paramref name="source" /> の一意の要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source">重複を削除する対象の <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>指定した <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用して値を比較することで、シーケンス内の一意の要素を返します。</summary>
      <returns>
        <paramref name="source" /> の一意の要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source">重複を削除する対象の <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="comparer">値を比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="comparer" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>シーケンス内の指定されたインデックス位置にある要素を返します。</summary>
      <returns>
        <paramref name="source" /> 内の指定した位置にある要素。</returns>
      <param name="source">返す要素が含まれている <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="index">取得する要素の、0 から始まるインデックス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />  が 0 未満です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>シーケンス内の指定されたインデックス位置にある要素を返します。インデックスが範囲外の場合は既定値を返します。</summary>
      <returns>
        <paramref name="index" /> が <paramref name="source" /> の範囲外の場合は default(<paramref name="TSource" />)。それ以外の場合は <paramref name="source" /> で指定された位置にある要素。</returns>
      <param name="source">返す要素が含まれている <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="index">取得する要素の、0 から始まるインデックス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>既定の等値比較子を使用して値を比較することにより、2 つのシーケンスの差集合を生成します。</summary>
      <returns>2 つのシーケンスの差集合が格納されている <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source1">
        <paramref name="source2" /> にも含まれない要素が返される <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="source2">最初のシーケンスにも含まれているが、返さるたシーケンスには含まれない要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> または <paramref name="source2" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>指定した <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用して値を比較することで、2 つのシーケンスの差集合を生成します。</summary>
      <returns>2 つのシーケンスの差集合が格納されている <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source1">
        <paramref name="source2" /> にも含まれない要素が返される <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="source2">最初のシーケンスにも含まれているが、返さるたシーケンスには含まれない要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="comparer">値を比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> または <paramref name="source2" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
      <summary>シーケンスの最初の要素を返します。</summary>
      <returns>
        <paramref name="source" /> の最初の要素。</returns>
      <param name="source">最初の要素が返される <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">ソース シーケンスが空です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>指定された条件を満たす、シーケンスの最初の要素を返します。</summary>
      <returns>
        <paramref name="predicate" /> でテストに合格する、<paramref name="source" /> の最初の要素。</returns>
      <param name="source">返す要素が含まれている <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" />. の条件を満たす要素がありません。またはソース シーケンスが空です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>シーケンスの最初の要素を返します。シーケンスに要素が含まれていない場合は既定値を返します。</summary>
      <returns>
        <paramref name="source" /> が空の場合は default(<paramref name="TSource" />)。それ以外の場合は、<paramref name="source" /> の最初の要素。</returns>
      <param name="source">最初の要素が返される <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>指定された条件を満たす、シーケンスの最初の要素を返します。このような要素が見つからない場合は既定値を返します。</summary>
      <returns>
        <paramref name="source" /> が空の場合または <paramref name="predicate" /> で指定されたテストに合格する要素がない場合は default(<paramref name="TSource" />)。それ以外の場合は、<paramref name="predicate" /> で指定されたテストに合格する、<paramref name="source" /> の最初の要素。</returns>
      <param name="source">返す要素が含まれている <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>指定されたキー セレクター関数に従ってシーケンスの要素をグループ化します。</summary>
      <returns>C# では IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;、Visual Basic では IQueryable(Of IGrouping(Of TKey, TSource))。ここでは、各 <see cref="T:System.Linq.IGrouping`2" /> オブジェクトに、オブジェクトのシーケンス、およびキーが格納されています。</returns>
      <param name="source">要素をグループ化する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">各要素のキーを抽出する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> で表された関数によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>指定されたキー セレクター関数に従ってシーケンスの要素をグループ化し、指定された比較子を使用してキーを比較します。</summary>
      <returns>C# では IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;、Visual Basic では IQueryable(Of IGrouping(Of TKey, TSource))。ここでは、各 <see cref="T:System.Linq.IGrouping`2" /> に、オブジェクトのシーケンス、およびキーが格納されています。</returns>
      <param name="source">要素をグループ化する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">各要素のキーを抽出する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> で表された関数によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> または <paramref name="comparer" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
      <summary>指定されたキー セレクター関数に従ってシーケンスの要素をグループ化し、指定された関数を使用して各グループの要素を射影します。</summary>
      <returns>C# では IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;、Visual Basic では IQueryable(Of IGrouping(Of TKey, TElement))。ここで、各 <see cref="T:System.Linq.IGrouping`2" /> には、<paramref name="TElement" /> 型のオブジェクトのシーケンスとキーが格納されています。</returns>
      <param name="source">要素をグループ化する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">各要素のキーを抽出する関数。</param>
      <param name="elementSelector">ソースの各要素を <see cref="T:System.Linq.IGrouping`2" /> に含まれる要素にマッピングする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> で表された関数によって返されるキーの型。</typeparam>
      <typeparam name="TElement">各 <see cref="T:System.Linq.IGrouping`2" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> または <paramref name="elementSelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>指定された関数を使用して、シーケンスの要素をグループ化し、各グループの要素を射影します。キー値の比較には、指定された比較子を使用します。</summary>
      <returns>C# では IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;、Visual Basic では IQueryable(Of IGrouping(Of TKey, TElement))。ここで、各 <see cref="T:System.Linq.IGrouping`2" /> には、<paramref name="TElement" /> 型のオブジェクトのシーケンスとキーが格納されています。</returns>
      <param name="source">要素をグループ化する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">各要素のキーを抽出する関数。</param>
      <param name="elementSelector">ソースの各要素を <see cref="T:System.Linq.IGrouping`2" /> に含まれる要素にマッピングする関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> で表された関数によって返されるキーの型。</typeparam>
      <typeparam name="TElement">各 <see cref="T:System.Linq.IGrouping`2" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="keySelector" />、<paramref name="elementSelector" />、<paramref name="comparer" />、、、または  が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
      <summary>指定されたキー セレクター関数に従ってシーケンスの要素をグループ化し、各グループとそのキーから結果値を作成します。各グループの要素は、指定された関数を使用して射影されます。</summary>
      <returns>
        <paramref name="TResult" /> の型引数を持つ T:System.Linq.IQueryable`1。各要素は、グループとそのキーの射影を表します。</returns>
      <param name="source">要素をグループ化する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">各要素のキーを抽出する関数。</param>
      <param name="elementSelector">ソースの各要素を <see cref="T:System.Linq.IGrouping`2" /> に含まれる要素にマッピングする関数。</param>
      <param name="resultSelector">各グループから結果値を作成する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> で表された関数によって返されるキーの型。</typeparam>
      <typeparam name="TElement">各 <see cref="T:System.Linq.IGrouping`2" /> の要素の型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> によって返される結果値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="keySelector" />、<paramref name="elementSelector" />、<paramref name="resultSelector" />、、、または  が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>指定されたキー セレクター関数に従ってシーケンスの要素をグループ化し、各グループとそのキーから結果値を作成します。キーの比較には、指定された比較子を使用し、各グループの要素の射影には、指定された関数を使用します。</summary>
      <returns>
        <paramref name="TResult" /> の型引数を持つ T:System.Linq.IQueryable`1。各要素は、グループとそのキーの射影を表します。</returns>
      <param name="source">要素をグループ化する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">各要素のキーを抽出する関数。</param>
      <param name="elementSelector">ソースの各要素を <see cref="T:System.Linq.IGrouping`2" /> に含まれる要素にマッピングする関数。</param>
      <param name="resultSelector">各グループから結果値を作成する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> で表された関数によって返されるキーの型。</typeparam>
      <typeparam name="TElement">各 <see cref="T:System.Linq.IGrouping`2" /> の要素の型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> によって返される結果値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> または <paramref name="elementSelector" /> または <paramref name="resultSelector" /> または <paramref name="comparer" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
      <summary>指定されたキー セレクター関数に従ってシーケンスの要素をグループ化し、各グループとそのキーから結果値を作成します。</summary>
      <returns>
        <paramref name="TResult" /> の型引数を持つ T:System.Linq.IQueryable`1。各要素は、グループとそのキーの射影を表します。</returns>
      <param name="source">要素をグループ化する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">各要素のキーを抽出する関数。</param>
      <param name="resultSelector">各グループから結果値を作成する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> で表された関数によって返されるキーの型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> によって返される結果値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> または <paramref name="resultSelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>指定されたキー セレクター関数に従ってシーケンスの要素をグループ化し、各グループとそのキーから結果値を作成します。キーの比較には、指定された比較子を使用します。</summary>
      <returns>
        <paramref name="TResult" /> の型引数を持つ T:System.Linq.IQueryable`1。各要素は、グループとそのキーの射影を表します。</returns>
      <param name="source">要素をグループ化する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">各要素のキーを抽出する関数。</param>
      <param name="resultSelector">各グループから結果値を作成する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> で表された関数によって返されるキーの型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> によって返される結果値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="keySelector" />、<paramref name="resultSelector" />、<paramref name="comparer" />、、、または  が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
      <summary>キーが等しいかどうかに基づいて 2 つのシーケンスの要素を相互に関連付け、その結果をグループ化します。キーの比較には既定の等値比較子が使用されます。</summary>
      <returns>2 つのシーケンスに対してグループ化結合を実行して取得した <paramref name="TResult" /> 型の要素が格納されている <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="outer">結合する最初のシーケンス。</param>
      <param name="inner">最初のシーケンスに結合するシーケンス。</param>
      <param name="outerKeySelector">最初のシーケンスの各要素から結合キーを抽出する関数。</param>
      <param name="innerKeySelector">2 番目のシーケンスの各要素から結合キーを抽出する関数。</param>
      <param name="resultSelector">最初のシーケンスの要素と、2 番目のシーケンスの一致する要素のコレクションから結果の要素を作成する関数。</param>
      <typeparam name="TOuter">最初のシーケンスの要素の型。</typeparam>
      <typeparam name="TInner">2 番目のシーケンスの要素の型。</typeparam>
      <typeparam name="TKey">キー セレクター関数によって返されるキーの型。</typeparam>
      <typeparam name="TResult">結果の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> または <paramref name="inner" /> または <paramref name="outerKeySelector" /> または <paramref name="innerKeySelector" /> または <paramref name="resultSelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>キーが等しいかどうかに基づいて 2 つのシーケンスの要素を相互に関連付け、その結果をグループ化します。指定された <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用してキーを比較します。</summary>
      <returns>2 つのシーケンスに対してグループ化結合を実行して取得した <paramref name="TResult" /> 型の要素が格納されている <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="outer">結合する最初のシーケンス。</param>
      <param name="inner">最初のシーケンスに結合するシーケンス。</param>
      <param name="outerKeySelector">最初のシーケンスの各要素から結合キーを抽出する関数。</param>
      <param name="innerKeySelector">2 番目のシーケンスの各要素から結合キーを抽出する関数。</param>
      <param name="resultSelector">最初のシーケンスの要素と、2 番目のシーケンスの一致する要素のコレクションから結果の要素を作成する関数。</param>
      <param name="comparer">キーをハッシュして比較する比較子。</param>
      <typeparam name="TOuter">最初のシーケンスの要素の型。</typeparam>
      <typeparam name="TInner">2 番目のシーケンスの要素の型。</typeparam>
      <typeparam name="TKey">キー セレクター関数によって返されるキーの型。</typeparam>
      <typeparam name="TResult">結果の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> または <paramref name="inner" /> または <paramref name="outerKeySelector" /> または <paramref name="innerKeySelector" /> または <paramref name="resultSelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>既定の等値比較子を使用して値を比較することにより、2 つのシーケンスの積集合を生成します。</summary>
      <returns>2 つのシーケンスの積集合を含むシーケンス。</returns>
      <param name="source1">
        <paramref name="source2" /> でも出現する一意の要素が返されるシーケンス。</param>
      <param name="source2">最初のシーケンスにも含まれる、返される一意の要素を含むシーケンス。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> または <paramref name="source2" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>指定した <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用して値を比較することで、2 つのシーケンスの積集合を生成します。</summary>
      <returns>2 つのシーケンスの積集合を含む <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source1">
        <paramref name="source2" /> でも出現する一意の要素が返される <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="source2">最初のシーケンスでも出現する一意の要素が返される <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="comparer">値を比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> または <paramref name="source2" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
      <summary>一致するキーに基づいて 2 つのシーケンスの要素を相互に関連付けます。キーの比較には既定の等値比較子が使用されます。</summary>
      <returns>2 つのシーケンスに対して内部結合を実行して取得した <paramref name="TResult" /> 型の要素が格納されている <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="outer">結合する最初のシーケンス。</param>
      <param name="inner">最初のシーケンスに結合するシーケンス。</param>
      <param name="outerKeySelector">最初のシーケンスの各要素から結合キーを抽出する関数。</param>
      <param name="innerKeySelector">2 番目のシーケンスの各要素から結合キーを抽出する関数。</param>
      <param name="resultSelector">一致する 2 つの要素から結果の要素を作成する関数。</param>
      <typeparam name="TOuter">最初のシーケンスの要素の型。</typeparam>
      <typeparam name="TInner">2 番目のシーケンスの要素の型。</typeparam>
      <typeparam name="TKey">キー セレクター関数によって返されるキーの型。</typeparam>
      <typeparam name="TResult">結果の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> または <paramref name="inner" /> または <paramref name="outerKeySelector" /> または <paramref name="innerKeySelector" /> または <paramref name="resultSelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>一致するキーに基づいて 2 つのシーケンスの要素を相互に関連付けます。指定された <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用してキーを比較します。</summary>
      <returns>2 つのシーケンスに対して内部結合を実行して取得した <paramref name="TResult" /> 型の要素が格納されている <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="outer">結合する最初のシーケンス。</param>
      <param name="inner">最初のシーケンスに結合するシーケンス。</param>
      <param name="outerKeySelector">最初のシーケンスの各要素から結合キーを抽出する関数。</param>
      <param name="innerKeySelector">2 番目のシーケンスの各要素から結合キーを抽出する関数。</param>
      <param name="resultSelector">一致する 2 つの要素から結果の要素を作成する関数。</param>
      <param name="comparer">キーのハッシュの生成と比較を行う <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TOuter">最初のシーケンスの要素の型。</typeparam>
      <typeparam name="TInner">2 番目のシーケンスの要素の型。</typeparam>
      <typeparam name="TKey">キー セレクター関数によって返されるキーの型。</typeparam>
      <typeparam name="TResult">結果の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> または <paramref name="inner" /> または <paramref name="outerKeySelector" /> または <paramref name="innerKeySelector" /> または <paramref name="resultSelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
      <summary>シーケンスの最後の要素を返します。</summary>
      <returns>
        <paramref name="source" /> の最後の位置にある値。</returns>
      <param name="source">最後の要素が返される <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">ソース シーケンスが空です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>指定された条件を満たす、シーケンスの最後の要素を返します。</summary>
      <returns>
        <paramref name="predicate" /> で指定されたテストに合格する、<paramref name="source" /> の最後の要素。</returns>
      <param name="source">返す要素が含まれている <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" />. の条件を満たす要素がありません。またはソース シーケンスが空です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>シーケンスの最後の要素を返します。シーケンスに要素が含まれていない場合は既定値を返します。</summary>
      <returns>
        <paramref name="source" /> が空の場合は default(<paramref name="TSource" />)。それ以外の場合は <paramref name="source" /> の最後の要素。</returns>
      <param name="source">最後の要素が返される <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>条件を満たす、シーケンスの最後の要素を返します。このような要素が見つからない場合は既定値を返します。</summary>
      <returns>
        <paramref name="source" /> が空の場合、または述語関数でテストに合格した要素がない場合は default(<paramref name="TSource" />)。それ以外の場合は述語関数でテストに合格した <paramref name="source" /> の最後の要素。</returns>
      <param name="source">返す要素が含まれている <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
      <summary>シーケンスに含まれる要素の総数を表す <see cref="T:System.Int64" /> を返します。</summary>
      <returns>
        <paramref name="source" /> にある要素の数。</returns>
      <param name="source">カウント対象の要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.OverflowException">要素数が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>条件を満たすシーケンスの要素の数を示す <see cref="T:System.Int64" /> を返します。</summary>
      <returns>述語関数の条件を満たす、<paramref name="source" /> の要素数。</returns>
      <param name="source">カウント対象の要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.OverflowException">要素数が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
      <summary>ジェネリック型 <see cref="T:System.Linq.IQueryable`1" /> の最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>ジェネリック型 <see cref="T:System.Linq.IQueryable`1" /> の各要素の投影関数を呼び出し、結果の最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> で表された関数によって返される値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
      <summary>ジェネリック型 <see cref="T:System.Linq.IQueryable`1" /> の最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>ジェネリック型 <see cref="T:System.Linq.IQueryable`1" /> の各要素の投影関数を呼び出し、結果の最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> で表された関数によって返される値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
      <summary>指定した型に基づいて、<see cref="T:System.Linq.IQueryable" /> の要素をフィルター処理します。</summary>
      <returns>
        <paramref name="TResult" /> 型を持つ、<paramref name="source" /> の要素を含むコレクション。</returns>
      <param name="source">要素をフィルターする <see cref="T:System.Linq.IQueryable" />。</param>
      <typeparam name="TResult">シーケンスの要素をフィルター処理する型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>シーケンスの要素をキーに従って昇順に並べ替えます。</summary>
      <returns>要素がキーに従って並べ替えられている <see cref="T:System.Linq.IOrderedQueryable`1" />。</returns>
      <param name="source">順序付ける値のシーケンス。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> で表される関数によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>指定された比較子を使用してシーケンスの要素を昇順に並べ替えます。</summary>
      <returns>要素がキーに従って並べ替えられている <see cref="T:System.Linq.IOrderedQueryable`1" />。</returns>
      <param name="source">順序付ける値のシーケンス。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> で表される関数によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> または <paramref name="comparer" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>シーケンスの要素をキーに従って降順に並べ替えます。</summary>
      <returns>要素がキーに従って降順に並べ替えられている <see cref="T:System.Linq.IOrderedQueryable`1" />。</returns>
      <param name="source">順序付ける値のシーケンス。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> で表される関数によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>指定された比較子を使用してシーケンスの要素を降順に並べ替えます。</summary>
      <returns>要素がキーに従って降順に並べ替えられている <see cref="T:System.Linq.IOrderedQueryable`1" />。</returns>
      <param name="source">順序付ける値のシーケンス。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> で表される関数によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> または <paramref name="comparer" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
      <summary>シーケンスの要素の順序を反転させます。</summary>
      <returns>要素が入力シーケンスの要素に逆順で対応している <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source">反転させる値のシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>シーケンスの各要素を新しいフォームに射影します。</summary>
      <returns>
        <paramref name="source" /> の各要素に対して射影関数を呼び出した結果として得られる要素を含む <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source">射影する値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> で表された関数によって返される値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
      <summary>要素のインデックスを組み込むことにより、シーケンスの各要素を新しいフォームに射影します。</summary>
      <returns>
        <paramref name="source" /> の各要素に対して射影関数を呼び出した結果として得られる要素を含む <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source">射影する値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> で表された関数によって返される値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>シーケンスの各要素を <see cref="T:System.Collections.Generic.IEnumerable`1" /> に投影し、各要素で結果のセレクター関数を呼び出します。各中間シーケンスの結果として得られる値は、1 つの 1 次元シーケンスに結合され、返されます。</summary>
      <returns>
        <paramref name="source" /> の各要素に対して一対多の射影関数 <paramref name="collectionSelector" /> を呼び出した後、それらシーケンスの要素および対応する <paramref name="source" /> 要素を結果の要素にマッピングした結果として得られる要素を含む <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source">射影する値のシーケンス。</param>
      <param name="collectionSelector">入力シーケンスの各要素に適用する射影関数。</param>
      <param name="resultSelector">各中間シーケンスの各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TCollection">
        <paramref name="collectionSelector" /> で表される関数によって収集される中間要素の型。</typeparam>
      <typeparam name="TResult">結果のシーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="collectionSelector" /> または <paramref name="resultSelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>シーケンスの各要素を <see cref="T:System.Collections.Generic.IEnumerable`1" /> に射影し、結果のシーケンスを 1 つのシーケンスに結合します。</summary>
      <returns>入力シーケンスの各要素で一対多の射影関数を呼び出した結果として得られる要素を含む <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source">射影する値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> で表される関数によって返されるシーケンスの要素の型です。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>シーケンスの各要素を、それを作成したソース要素のインデックスを組み込む <see cref="T:System.Collections.Generic.IEnumerable`1" /> に投影します。結果のセレクター関数は、各中間シーケンスの各要素に対して呼び出されます。結果値は 1 つの 1 次元シーケンスに結合され、返されます。</summary>
      <returns>
        <paramref name="collectionSelector" /> の各要素に対して一対多の射影関数 <paramref name="source" /> を呼び出した後、それらシーケンスの要素および対応する <paramref name="source" /> 要素を結果の要素にマッピングした結果として得られる要素を含む <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source">射影する値のシーケンス。</param>
      <param name="collectionSelector">入力シーケンスの各要素に適用する射影関数。この関数の 2 つ目のパラメーターは、ソース要素のインデックスを表します。</param>
      <param name="resultSelector">各中間シーケンスの各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TCollection">
        <paramref name="collectionSelector" /> で表される関数によって収集される中間要素の型。</typeparam>
      <typeparam name="TResult">結果のシーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="collectionSelector" /> または <paramref name="resultSelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>シーケンスの各要素を <see cref="T:System.Collections.Generic.IEnumerable`1" /> に射影し、結果のシーケンスを 1 つのシーケンスに結合します。各ソース要素のインデックスは、その要素の射影されたフォームで使用されます。</summary>
      <returns>入力シーケンスの各要素で一対多の射影関数を呼び出した結果として得られる要素を含む <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source">射影する値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。この関数の 2 つ目のパラメーターは、ソース要素のインデックスを表します。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> で表される関数によって返されるシーケンスの要素の型です。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>既定の等値比較子を使用して要素を比較することで、2 つのシーケンスが等しいかどうかを判断します。</summary>
      <returns>2 つのソース シーケンスが同じ長さで、それらに対応する要素の比較が等しい場合は true。それ以外の場合は false。</returns>
      <param name="source1">
        <paramref name="source2" /> の要素と比較する要素が含まれている <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="source2">最初のシーケンスの要素と比較する要素が含まれている <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> または <paramref name="source2" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>指定された <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用して要素を比較し、2 つのシーケンスが等しいかどうかを確認します。</summary>
      <returns>2 つのソース シーケンスが同じ長さで、それらに対応する要素の比較が等しい場合は true。それ以外の場合は false。</returns>
      <param name="source1">
        <paramref name="source2" /> の要素と比較する要素が含まれている <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="source2">最初のシーケンスの要素と比較する要素が含まれている <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="comparer">要素の比較に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> または <paramref name="source2" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
      <summary>シーケンスの唯一の要素を返します。シーケンス内の要素が 1 つだけではない場合は、例外をスローします。</summary>
      <returns>入力シーケンスの 1 つの要素。</returns>
      <param name="source">唯一の要素が返される、<see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />  には複数の要素があります。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>指定された条件を満たす、シーケンスの唯一の要素を返します。そのような要素が複数存在する場合は、例外をスローします。</summary>
      <returns>
        <paramref name="predicate" /> の条件を満たす、入力シーケンスの 1 つの要素。</returns>
      <param name="source">返す唯一の要素が含まれている <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" />. の条件を満たす要素がありません。または<paramref name="predicate" /> の条件を満たす要素が複数あります。またはソース シーケンスが空です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>シーケンスの唯一の要素を返します。シーケンスが空の場合、既定値を返します。シーケンス内に要素が複数ある場合、このメソッドは例外をスローします。</summary>
      <returns>入力シーケンスの唯一の要素。シーケンスに要素が含まれない場合は default(<paramref name="TSource" />)。</returns>
      <param name="source">唯一の要素が返される、<see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>指定された条件を満たす、シーケンスの唯一の要素を返します。そのような要素が存在しない場合、既定値を返します。複数の要素が条件を満たす場合、このメソッドは例外をスローします。</summary>
      <returns>
        <paramref name="predicate" /> の条件を満たす入力シーケンスの唯一要素、または、そのような要素が見つからない場合は default(<paramref name="TSource" />)。</returns>
      <param name="source">返す唯一の要素が含まれている <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>シーケンス内の指定された数の要素をバイパスし、残りの要素を返します。</summary>
      <returns>入力シーケンスの指定されたインデックスの後に出現する要素を含む <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source">返す要素が含まれている <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="count">残りの要素を返す前にスキップする要素の数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>指定された条件が満たされる限り、シーケンスの要素をバイパスした後、残りの要素を返します。</summary>
      <returns>
        <paramref name="source" /> で指定したテストに合格しない連続する最初の要素から始まる <paramref name="predicate" /> の要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source">返す要素が含まれている <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>指定された条件が満たされる限り、シーケンスの要素をバイパスした後、残りの要素を返します。要素のインデックスは、述語関数のロジックで使用されます。</summary>
      <returns>
        <paramref name="predicate" /> で指定したテストに合格しない連続する最初の要素から始まる <paramref name="source" /> の要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source">返す要素が含まれている <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">各要素が条件に当てはまるかどうかをテストする関数。この関数の 2 つ目のパラメーターは、ソース要素のインデックスを表します。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
      <summary>
        <see cref="T:System.Decimal" /> 値のシーケンスの合計を計算します。</summary>
      <returns>シーケンスの値の合計。</returns>
      <param name="source">合計を計算する、<see cref="T:System.Decimal" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.OverflowException">合計が <see cref="F:System.Decimal.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
      <summary>
        <see cref="T:System.Double" /> 値のシーケンスの合計を計算します。</summary>
      <returns>シーケンスの値の合計。</returns>
      <param name="source">合計を計算する、<see cref="T:System.Double" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
      <summary>
        <see cref="T:System.Int32" /> 値のシーケンスの合計を計算します。</summary>
      <returns>シーケンスの値の合計。</returns>
      <param name="source">合計を計算する、<see cref="T:System.Int32" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.OverflowException">合計が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
      <summary>
        <see cref="T:System.Int64" /> 値のシーケンスの合計を計算します。</summary>
      <returns>シーケンスの値の合計。</returns>
      <param name="source">合計を計算する、<see cref="T:System.Int64" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.OverflowException">合計が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>null 許容の <see cref="T:System.Decimal" /> 値のシーケンスの合計を計算します。</summary>
      <returns>シーケンスの値の合計。</returns>
      <param name="source">合計を計算する、null 許容の <see cref="T:System.Decimal" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.OverflowException">合計が <see cref="F:System.Decimal.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>null 許容の <see cref="T:System.Double" /> 値のシーケンスの合計を計算します。</summary>
      <returns>シーケンスの値の合計。</returns>
      <param name="source">合計を計算する、null 許容の <see cref="T:System.Double" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>null 許容の <see cref="T:System.Int32" /> 値のシーケンスの合計を計算します。</summary>
      <returns>シーケンスの値の合計。</returns>
      <param name="source">合計を計算する、null 許容の <see cref="T:System.Int32" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.OverflowException">合計が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>null 許容の <see cref="T:System.Int64" /> 値のシーケンスの合計を計算します。</summary>
      <returns>シーケンスの値の合計。</returns>
      <param name="source">合計を計算する、null 許容の <see cref="T:System.Int64" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.OverflowException">合計が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>null 許容の <see cref="T:System.Single" /> 値のシーケンスの合計を計算します。</summary>
      <returns>シーケンスの値の合計。</returns>
      <param name="source">合計を計算する、null 許容の <see cref="T:System.Single" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
      <summary>
        <see cref="T:System.Single" /> 値のシーケンスの合計を計算します。</summary>
      <returns>シーケンスの値の合計。</returns>
      <param name="source">合計を計算する、<see cref="T:System.Single" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出すことで取得される、<see cref="T:System.Decimal" /> 値のシーケンスの合計を計算します。</summary>
      <returns>射影された値の合計。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.OverflowException">合計が <see cref="F:System.Decimal.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出すことで取得される、<see cref="T:System.Double" /> 値のシーケンスの合計を計算します。</summary>
      <returns>射影された値の合計。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出すことで取得される、<see cref="T:System.Int32" /> 値のシーケンスの合計を計算します。</summary>
      <returns>射影された値の合計。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.OverflowException">合計が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出すことで取得される、<see cref="T:System.Int64" /> 値のシーケンスの合計を計算します。</summary>
      <returns>射影された値の合計。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.OverflowException">合計が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出すことで取得される、null 許容の <see cref="T:System.Decimal" /> 値のシーケンスの合計を計算します。</summary>
      <returns>射影された値の合計。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.OverflowException">合計が <see cref="F:System.Decimal.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出すことで取得される、null 許容の <see cref="T:System.Double" /> 値のシーケンスの合計を計算します。</summary>
      <returns>射影された値の合計。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出すことで取得される、null 許容の <see cref="T:System.Int32" /> 値のシーケンスの合計を計算します。</summary>
      <returns>射影された値の合計。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.OverflowException">合計が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出すことで取得される、null 許容の <see cref="T:System.Int64" /> 値のシーケンスの合計を計算します。</summary>
      <returns>射影された値の合計。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.OverflowException">合計が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出すことで取得される、null 許容の <see cref="T:System.Single" /> 値のシーケンスの合計を計算します。</summary>
      <returns>射影された値の合計。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出すことで取得される、<see cref="T:System.Single" /> 値のシーケンスの合計を計算します。</summary>
      <returns>射影された値の合計。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>シーケンスの先頭から、指定された数の連続する要素を返します。</summary>
      <returns>
        <paramref name="source" /> の先頭から、指定された数の要素を含む <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source">要素を返すシーケンス。</param>
      <param name="count">返す要素数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>指定された条件が満たされる限り、シーケンスから要素を返します。</summary>
      <returns>
        <paramref name="predicate" /> で指定されたテストに合格しなくなった要素の前に出現する、入力シーケンスの要素を含む <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source">要素を返すシーケンス。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>指定された条件が満たされる限り、シーケンスから要素を返します。要素のインデックスは、述語関数のロジックで使用されます。</summary>
      <returns>
        <paramref name="predicate" /> で指定されたテストに合格しなくなった要素の前に出現する、入力シーケンスの要素を含む <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source">要素を返すシーケンス。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。この関数の 2 つ目のパラメーターは、ソース シーケンスの要素のインデックスを表します。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>キーに従って、シーケンス内の後続の要素を昇順で配置します。</summary>
      <returns>要素がキーに従って並べ替えられている <see cref="T:System.Linq.IOrderedQueryable`1" />。</returns>
      <param name="source">並べ替える要素を格納する <see cref="T:System.Linq.IOrderedQueryable`1" />。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> で表された関数によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>指定された比較子を使用して、シーケンス内の後続の要素を昇順で配置します。</summary>
      <returns>要素がキーに従って並べ替えられている <see cref="T:System.Linq.IOrderedQueryable`1" />。</returns>
      <param name="source">並べ替える要素を格納する <see cref="T:System.Linq.IOrderedQueryable`1" />。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> で表された関数によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> または <paramref name="comparer" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>キーに従って、シーケンス内の後続の要素を降順で配置します。</summary>
      <returns>要素がキーに従って降順に並べ替えられている <see cref="T:System.Linq.IOrderedQueryable`1" />。</returns>
      <param name="source">並べ替える要素を格納する <see cref="T:System.Linq.IOrderedQueryable`1" />。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> で表された関数によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>指定された比較子を使用して、シーケンス内の後続の要素を降順で配置します。</summary>
      <returns>要素がキーに従って降順に並べ替えられているコレクション。</returns>
      <param name="source">並べ替える要素を格納する <see cref="T:System.Linq.IOrderedQueryable`1" />。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 関数によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> または <paramref name="comparer" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>既定の等値比較子を使用して、2 つのシーケンスの和集合を生成します。</summary>
      <returns>2 つの入力シーケンスの要素 (重複する要素は除く) を格納している <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source1">和集合演算の最初のセットを構成する一意の要素を含むシーケンス。</param>
      <param name="source2">和集合演算の 2 つめのセットを構成する一意の要素を含むシーケンス。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> または <paramref name="source2" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>指定した <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用して 2 つのシーケンスの和集合を生成します。</summary>
      <returns>2 つの入力シーケンスの要素 (重複する要素は除く) を格納している <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source1">和集合演算の最初のセットを構成する一意の要素を含むシーケンス。</param>
      <param name="source2">和集合演算の 2 つめのセットを構成する一意の要素を含むシーケンス。</param>
      <param name="comparer">値を比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> または <paramref name="source2" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>述語に基づいて値のシーケンスをフィルター処理します。</summary>
      <returns>
        <paramref name="predicate" /> で指定した条件を満たす入力シーケンス内の要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source">フィルター処理対象の <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>述語に基づいて値のシーケンスをフィルター処理します。各要素のインデックスは、述語関数のロジックで使用されます。</summary>
      <returns>
        <paramref name="predicate" /> で指定した条件を満たす入力シーケンス内の要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source">フィルター処理対象の <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。この関数の 2 つめのパラメーターは、ソース シーケンスの要素のインデックスを表します。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>指定された述語関数を使用して 2 つのシーケンスをマージします。</summary>
      <returns>2 つの入力シーケンスのマージされた要素が格納されている <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source1">マージする 1 番目のシーケンス。</param>
      <param name="source2">マージする 2 番目のシーケンス。</param>
      <param name="resultSelector">2 つのシーケンスの要素をマージする方法を指定する関数。</param>
      <typeparam name="TFirst">1 番目の入力シーケンスの要素の型。</typeparam>
      <typeparam name="TSecond">2 番目の入力シーケンスの要素の型。</typeparam>
      <typeparam name="TResult">結果のシーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> または <paramref name="source2 " /> が null です。</exception>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary>二項演算子を持つ式を表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>このノード型の特定の Visit メソッドにデスパッチします。たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <returns>このノードの走査結果です。</returns>
      <param name="visitor">このノードを走査するビジター。</param>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <summary>式ツリー ノードを縮小できるかどうかを示す値を取得します。</summary>
      <returns>式ツリー ノードを単純化することができる場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary>合体演算または複合代入演算で使用される型変換関数を取得します。</summary>
      <returns>型変換関数を表す <see cref="T:System.Linq.Expressions.LambdaExpression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary>式ツリー ノードが、演算子へのリフトされた呼び出しを表すかどうかを示す値を取得します。</summary>
      <returns>リフトされた呼び出しをノードが表している場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary>式ツリー ノードが、戻り値の型が null 許容型にリフトされた演算子への、リフトされた呼び出しを表すかどうかを示す値を取得します。</summary>
      <returns>演算子の戻り値の型が null 許容型にリフトされている場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary>二項演算の左オペランドを取得します。</summary>
      <returns>二項演算の左オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary>二項演算の実装メソッドを取得します。</summary>
      <returns>実装メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <summary>二項式ノードをより単純な式へと縮小します。</summary>
      <returns>縮小された式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary>二項演算の右オペランドを取得します。</summary>
      <returns>二項演算の右オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="left">結果の <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティ。</param>
      <param name="conversion">結果の <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> プロパティ。</param>
      <param name="right">結果の <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.BlockExpression">
      <summary>変数を定義できる式のシーケンスを含んでいるブロックを表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>このノード型の特定の Visit メソッドにデスパッチします。たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <returns>このノードの走査結果です。</returns>
      <param name="visitor">このノードを走査するビジター。</param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
      <summary>このブロック内の式を取得します。</summary>
      <returns>このブロック内のすべての式を格納している読み取り専用コレクション。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
      <summary>この式のノード型を返します。拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns>式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Result">
      <summary>このブロックの最後の式を取得します。</summary>
      <returns>このブロックの最後の式を示す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.BlockExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="variables">結果の <see cref="P:System.Linq.Expressions.BlockExpression.Variables" /> プロパティ。</param>
      <param name="expressions">結果の <see cref="P:System.Linq.Expressions.BlockExpression.Expressions" /> プロパティ。</param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Variables">
      <summary>このブロックで定義されている変数を取得します。</summary>
      <returns>このブロックで定義されているすべての変数を格納している読み取り専用コレクション。</returns>
    </member>
    <member name="T:System.Linq.Expressions.CatchBlock">
      <summary>try ブロックの catch ステートメントを表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Body">
      <summary>catch ブロックの本体を取得します。</summary>
      <returns>catch 本文を示す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Filter">
      <summary>
        <see cref="T:System.Linq.Expressions.CatchBlock" /> フィルターの本文を取得します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.CatchBlock" /> フィルターの本体を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Test">
      <summary>このハンドラーが取得する <see cref="T:System.Exception" /> の型を取得します。</summary>
      <returns>このハンドラーによってキャッチされる <see cref="T:System.Exception" /> の型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.ToString">
      <summary>現在の <see cref="T:System.Object" /> を表す <see cref="T:System.String" /> を返します。</summary>
      <returns>現在の <see cref="T:System.Object" /> を表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="variable">結果の <see cref="P:System.Linq.Expressions.CatchBlock.Variable" /> プロパティ。</param>
      <param name="filter">結果の <see cref="P:System.Linq.Expressions.CatchBlock.Filter" /> プロパティ。</param>
      <param name="body">結果の <see cref="P:System.Linq.Expressions.CatchBlock.Body" /> プロパティ。</param>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Variable">
      <summary>このハンドラーが取得する <see cref="T:System.Exception" /> オブジェクトへの参照を取得します。</summary>
      <returns>このハンドラーによってキャッチされる <see cref="T:System.Exception" /> オブジェクトへの参照を表す <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary>条件演算子を持つ式を表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>このノード型の特定の Visit メソッドにデスパッチします。たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <returns>このノードの走査結果です。</returns>
      <param name="visitor">このノードを走査するビジター。</param>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary>テスト結果が false と評価される場合に実行する式を取得します。</summary>
      <returns>テスト結果が false である場合に実行する式を示す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary>テスト結果が true と評価される場合に実行する式を取得します。</summary>
      <returns>テスト結果が true である場合に実行する式を示す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <summary>この式のノード型を返します。拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns>式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary>条件演算のテストを取得します。</summary>
      <returns>条件演算のテストを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.ConditionalExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="test">結果の <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> プロパティ。</param>
      <param name="ifTrue">結果の <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> プロパティ。</param>
      <param name="ifFalse">結果の <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary>定数値を持つ式を表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>このノード型の特定の Visit メソッドにデスパッチします。たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <returns>このノードの走査結果です。</returns>
      <param name="visitor">このノードを走査するビジター。</param>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <summary>この式のノード型を返します。拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns>式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.ConstantExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary>定数式の値を取得します。</summary>
      <returns>示された式の値に等しい <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DebugInfoExpression">
      <summary>デバッグ情報のシーケンス ポイントを生成またはクリアします。これにより、デバッガーはデバッグ時に正しいソース コードを強調表示できます。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>このノード型の特定の Visit メソッドにデスパッチします。たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <returns>このノードの走査結果です。</returns>
      <param name="visitor">このノードを走査するビジター。</param>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <summary>ソース ファイルを示す <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> を取得します。</summary>
      <returns>ソース ファイルを表す <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <summary>この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の終了列を取得します。</summary>
      <returns>ラップされた式の生成に使用されたコードの最終列の番号。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <summary>この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の終了行を取得します。</summary>
      <returns>ラップされた式の生成に使用されたコードの最終行の番号。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <summary>
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> がシーケンス ポイントをクリアするかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> がシーケンス ポイントをクリアするために使用される場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns>この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <summary>この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の開始列を取得します。</summary>
      <returns>ラップされた式の生成に使用されたコードの先頭列の番号。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <summary>この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の開始行を取得します。</summary>
      <returns>ラップされた式の生成に使用されたコードの先頭行の番号。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DefaultExpression">
      <summary>型または空の式の既定値を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <summary>この式のノード型を返します。拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns>式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.DefaultExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpression">
      <summary>動的操作を表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>このノード型の特定の Visit メソッドにデスパッチします。たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <returns>このノードの走査結果です。</returns>
      <param name="visitor">このノードを走査するビジター。</param>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Arguments">
      <summary>動的操作の引数を取得します。</summary>
      <returns>動的操作の引数を格納する読み取り専用コレクション。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Binder">
      <summary>動的なサイトの実行時の動作を指定する <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を取得します。</summary>
      <returns>動的サイトの実行時の動作を決定する <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.DelegateType">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型を取得します。</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>指定された <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> によってバインドされる動的操作を表す <see cref="T:System.Linq.Expressions.DynamicExpression" /> を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> が <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> と等しく、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> が指定した値に設定された <see cref="T:System.Linq.Expressions.DynamicExpression" />。</returns>
      <param name="binder">動的操作の実行時バインダー。</param>
      <param name="returnType">動的な式の結果の型。</param>
      <param name="arguments">動的操作の引数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>指定された <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> によってバインドされる動的操作を表す <see cref="T:System.Linq.Expressions.DynamicExpression" /> を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> が <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> と等しく、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> が指定した値に設定された <see cref="T:System.Linq.Expressions.DynamicExpression" />。</returns>
      <param name="binder">動的操作の実行時バインダー。</param>
      <param name="returnType">動的な式の結果の型。</param>
      <param name="arg0">動的操作の 1 番目の引数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>指定された <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> によってバインドされる動的操作を表す <see cref="T:System.Linq.Expressions.DynamicExpression" /> を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> が <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> と等しく、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> が指定した値に設定された <see cref="T:System.Linq.Expressions.DynamicExpression" />。</returns>
      <param name="binder">動的操作の実行時バインダー。</param>
      <param name="returnType">動的な式の結果の型。</param>
      <param name="arg0">動的操作の 1 番目の引数。</param>
      <param name="arg1">動的操作の 2 番目の引数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>指定された <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> によってバインドされる動的操作を表す <see cref="T:System.Linq.Expressions.DynamicExpression" /> を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> が <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> と等しく、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> が指定した値に設定された <see cref="T:System.Linq.Expressions.DynamicExpression" />。</returns>
      <param name="binder">動的操作の実行時バインダー。</param>
      <param name="returnType">動的な式の結果の型。</param>
      <param name="arg0">動的操作の 1 番目の引数。</param>
      <param name="arg1">動的操作の 2 番目の引数。</param>
      <param name="arg2">動的操作の 3 番目の引数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>指定された <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> によってバインドされる動的操作を表す <see cref="T:System.Linq.Expressions.DynamicExpression" /> を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> が <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> と等しく、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> が指定した値に設定された <see cref="T:System.Linq.Expressions.DynamicExpression" />。</returns>
      <param name="binder">動的操作の実行時バインダー。</param>
      <param name="returnType">動的な式の結果の型。</param>
      <param name="arg0">動的操作の 1 番目の引数。</param>
      <param name="arg1">動的操作の 2 番目の引数。</param>
      <param name="arg2">動的操作の 3 番目の引数。</param>
      <param name="arg3">動的操作の 4 番目の引数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>指定された <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> によってバインドされる動的操作を表す <see cref="T:System.Linq.Expressions.DynamicExpression" /> を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> が <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> と等しく、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> が指定した値に設定された <see cref="T:System.Linq.Expressions.DynamicExpression" />。</returns>
      <param name="binder">動的操作の実行時バインダー。</param>
      <param name="returnType">動的な式の結果の型。</param>
      <param name="arguments">動的操作の引数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>指定された <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> によってバインドされる動的操作を表す <see cref="T:System.Linq.Expressions.DynamicExpression" /> を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> が <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> と等しく、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> が指定した値に設定された <see cref="T:System.Linq.Expressions.DynamicExpression" />。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの種類。</param>
      <param name="binder">動的操作の実行時バインダー。</param>
      <param name="arguments">動的操作の引数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>指定された <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> と 1 つの引数でバインドされた動的な操作を表す <see cref="T:System.Linq.Expressions.DynamicExpression" /> を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> が <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> と等しく、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> が指定した値に設定された <see cref="T:System.Linq.Expressions.DynamicExpression" />。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの種類。</param>
      <param name="binder">動的操作の実行時バインダー。</param>
      <param name="arg0">動的操作の引数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>指定された <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> と 2 つの引数でバインドされた動的な操作を表す <see cref="T:System.Linq.Expressions.DynamicExpression" /> を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> が <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> と等しく、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> が指定した値に設定された <see cref="T:System.Linq.Expressions.DynamicExpression" />。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの種類。</param>
      <param name="binder">動的操作の実行時バインダー。</param>
      <param name="arg0">動的操作の 1 番目の引数。</param>
      <param name="arg1">動的操作の 2 番目の引数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>指定された <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> と 3 つの引数でバインドされた動的な操作を表す <see cref="T:System.Linq.Expressions.DynamicExpression" /> を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> が <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> と等しく、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> が指定した値に設定された <see cref="T:System.Linq.Expressions.DynamicExpression" />。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの種類。</param>
      <param name="binder">動的操作の実行時バインダー。</param>
      <param name="arg0">動的操作の 1 番目の引数。</param>
      <param name="arg1">動的操作の 2 番目の引数。</param>
      <param name="arg2">動的操作の 3 番目の引数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>指定された <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> と 4 つの引数でバインドされた動的な操作を表す <see cref="T:System.Linq.Expressions.DynamicExpression" /> を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> が <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> と等しく、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> が指定した値に設定された <see cref="T:System.Linq.Expressions.DynamicExpression" />。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの種類。</param>
      <param name="binder">動的操作の実行時バインダー。</param>
      <param name="arg0">動的操作の 1 番目の引数。</param>
      <param name="arg1">動的操作の 2 番目の引数。</param>
      <param name="arg2">動的操作の 3 番目の引数。</param>
      <param name="arg3">動的操作の 4 番目の引数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>指定された <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> によってバインドされる動的操作を表す <see cref="T:System.Linq.Expressions.DynamicExpression" /> を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> が <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> と等しく、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> が指定した値に設定された <see cref="T:System.Linq.Expressions.DynamicExpression" />。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの種類。</param>
      <param name="binder">動的操作の実行時バインダー。</param>
      <param name="arguments">動的操作の引数。</param>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.NodeType">
      <summary>この式のノード型を返します。拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns>式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.DynamicExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>パラメーター arguments に送信される値を、DynamicExpression の現在のインスタンスの Arguments プロパティと比較します。パラメーターの値とプロパティが等しい場合は、現在のインスタンスが返されます。等しくない場合は、現在のインスタンスと等しい、新しい DynamicExpression インスタンスが返されますが、Arguments プロパティがパラメーター arguments の値に設定される点が異なります。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="arguments">結果の <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpressionVisitor">
      <summary>動的な式ツリーのビジターまたはリライターを示します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.#ctor">
      <summary>
        <see cref="T:System.Linq.Expressions.DynamicExpressionVisitor" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は、<see cref="T:System.Linq.Expressions.Expression" /> と変更された式、それ以外の場合は元の式を返します。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary>
        <see cref="T:System.Collections.IEnumerable" /> コレクションの単一の要素の初期化子を示します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary>要素を <see cref="T:System.Collections.IEnumerable" /> コレクションに追加するために使用するインスタンス メソッドを取得します。</summary>
      <returns>コレクションに要素を追加するインスタンス メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary>要素を <see cref="T:System.Collections.IEnumerable" /> コレクションに追加するメソッドに渡される引数のコレクションを取得します。</summary>
      <returns>要素をコレクションに追加するメソッドの引数を示す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary>
        <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトのテキスト形式表記を返します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトのテキスト表現。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="arguments">結果の <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary>式ツリー ノードを表すクラスの派生元の基本クラスを提供します。さまざまなノード タイプを作成する static (Visual Basic では Shared) ファクトリ メソッドも含まれます。これは abstract クラスです。</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor">
      <summary>
        <see cref="T:System.Linq.Expressions.Expression" /> の新しいインスタンスを構築します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
      <summary>
        <see cref="T:System.Linq.Expressions.Expression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="nodeType">ノード タイプとして設定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="type">この <see cref="T:System.Linq.Expressions.Expression" /> の <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>このノード型の特定の Visit メソッドにデスパッチします。たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <returns>このノードの走査結果です。</returns>
      <param name="visitor">このノードを走査するビジター。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックのない加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">加算演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type. に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックのない加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。実装メソッドを指定できます。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、加算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックを行わない加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックを行わない加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>オーバーフロー チェックを行わない加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックを行う加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックを行う加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>オーバーフロー チェックを行う加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックのある加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">加算演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type. に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックのある加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。実装メソッドを指定できます。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、加算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>ビットごとの AND 演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="F:System.Linq.Expressions.ExpressionType.And" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">ビットごとの AND 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>ビットごとの AND 演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。実装メソッドを指定できます。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.And" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、ビットごとの AND 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>1 番目のオペランドが true に評価された場合にのみ 2 番目のオペランドを評価する条件付き AND 演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">ビットごとの AND 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。または<paramref name="left" />.Type と <paramref name="right" />.Type は同じブール型ではありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>最初のオペランドが true になる場合にのみ 2 番目のオペランドを評価する条件 AND 演算を示す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。実装メソッドを指定できます。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、ビットごとの AND 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。または<paramref name="method" /> は null で、<paramref name="left" />.Type と <paramref name="right" />.Type は同じブール型ではありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>ビットごとの AND 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>ビットごとの AND 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>ビットごとの AND 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>多次元配列にアクセスする <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="array">多次元配列を表す式。</param>
      <param name="indexes">配列にインデックスを付ける式を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>配列にアクセスする <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="array">インデックス化する配列を表す式。</param>
      <param name="indexes">配列のインデックス化に使用する式を格納している配列。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>配列インデックス演算子をランク 1 以上の配列に適用することを示す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> プロパティを含む <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</returns>
      <param name="array">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />。</param>
      <param name="indexes">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> または <paramref name="indexes" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type は配列型を表しません。または<paramref name="array" />.Type のランクは、<paramref name="indexes" /> の要素の数と一致しません。または<paramref name="indexes" /> の 1 つ以上の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<see cref="T:System.Int32" /> 型を表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>配列インデックス演算子をランク 1 の配列に適用することを示す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" />。</returns>
      <param name="array">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="index">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> または <paramref name="index" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type は配列型を表しません。または<paramref name="array" />.Type は、ランクが 1 ではない配列型を表します。または<paramref name="index" />.Type は、<see cref="T:System.Int32" /> 型を表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>配列インデックス演算子を多次元配列に適用することを示す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />。</returns>
      <param name="array">
        <see cref="T:System.Linq.Expressions.Expression" /> インスタンスの配列。配列インデックス演算のインデックス。</param>
      <param name="indexes">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> または <paramref name="indexes" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type は配列型を表しません。または<paramref name="array" />.Type のランクは、<paramref name="indexes" /> の要素の数と一致しません。または<paramref name="indexes" /> の 1 つ以上の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<see cref="T:System.Int32" /> 型を表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary>1 次元配列の長さを取得する式を示す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> と等しい<see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、<paramref name="array" /> と等しい <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="array">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type は配列型を表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>割り当て操作を示す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Assign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary>フィールドまたはプロパティの初期化を示す <see cref="T:System.Linq.Expressions.MemberAssignment" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> および <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> と、指定された値に設定された <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> プロパティを含む <see cref="T:System.Linq.Expressions.MemberAssignment" />。</returns>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> または <paramref name="expression" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" />  は、フィールドまたはプロパティを表しません。または<paramref name="member" /> によって表されるプロパティに set アクセサーが含まれません。または<paramref name="expression" />.Type は、<paramref name="member" /> が表すフィールドまたはプロパティの型に割り当てできません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>プロパティ アクセサー メソッドを使用してメンバーの初期化を示す <see cref="T:System.Linq.Expressions.MemberAssignment" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<paramref name="propertyAccessor" /> でアクセスされるプロパティを表す <see cref="T:System.Reflection.PropertyInfo" /> に設定された <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティ、および <paramref name="expression" /> に設定された <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> プロパティを含む <see cref="T:System.Linq.Expressions.MemberAssignment" />。</returns>
      <param name="propertyAccessor">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> または <paramref name="expression" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" />  は、プロパティ アクセサー メソッドを表しません。または<paramref name="propertyAccessor" /> によってアクセスされるプロパティに set アクセサーが含まれません。または<paramref name="expression" />.Type は、<paramref name="member" /> が表すフィールドまたはプロパティの型に割り当てできません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>指定された式を含み、変数を持たない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="expressions">ブロック内の式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>指定された変数と式を含む <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="variables">ブロック内の変数。</param>
      <param name="expressions">ブロック内の式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>指定された変数と式を含む <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="variables">ブロック内の変数。</param>
      <param name="expressions">ブロック内の式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>2 つの式が含まれ、変数のない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="arg0">ブロック内の 1 つ目の式。</param>
      <param name="arg1">ブロック内の 2 つ目の式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>3 つの式が含まれ、変数のない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="arg0">ブロック内の 1 つ目の式。</param>
      <param name="arg1">ブロック内の 2 つ目の式。</param>
      <param name="arg2">ブロック内の 3 つ目の式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>4 つの式が含まれ、変数のない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="arg0">ブロック内の 1 つ目の式。</param>
      <param name="arg1">ブロック内の 2 つ目の式。</param>
      <param name="arg2">ブロック内の 3 つ目の式。</param>
      <param name="arg3">ブロック内の 4 つ目の式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>5 つの式が含まれ、変数のない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="arg0">ブロック内の 1 つ目の式。</param>
      <param name="arg1">ブロック内の 2 つ目の式。</param>
      <param name="arg2">ブロック内の 3 つ目の式。</param>
      <param name="arg3">ブロック内の 4 つ目の式です。</param>
      <param name="arg4">ブロック内の 5 つ目の式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <summary>指定された式を含み、変数を持たない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="expressions">ブロック内の式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>指定の式を含み、変数を含まず、特定の結果の型を持つ <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="type">ブロックの結果の型。</param>
      <param name="expressions">ブロック内の式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>指定された変数と式を含む <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="type">ブロックの結果の型。</param>
      <param name="variables">ブロック内の変数。</param>
      <param name="expressions">ブロック内の式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>指定された変数と式を含む <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="type">ブロックの結果の型。</param>
      <param name="variables">ブロック内の変数。</param>
      <param name="expressions">ブロック内の式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <summary>指定の式を含み、変数を含まず、特定の結果の型を持つ <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="type">ブロックの結果の型。</param>
      <param name="expressions">ブロック内の式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <summary>break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
      <returns>Break と等しい <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <see cref="T:System.Linq.Expressions.GotoExpression" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> のジャンプ先の <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。ジャンプ時にラベルに渡す値を指定できます。</summary>
      <returns>Break と等しい <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="value" /> を含む <see cref="T:System.Linq.Expressions.GotoExpression" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> のジャンプ先の <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">ジャンプ時に関連付けられているラベルに渡される値。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>指定された型の break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。ジャンプ時にラベルに渡す値を指定できます。</summary>
      <returns>Break と等しい <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />、<paramref name="target" /> に設定された<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="type" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="value" /> を含む <see cref="T:System.Linq.Expressions.GotoExpression" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> のジャンプ先の <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">ジャンプ時に関連付けられているラベルに渡される値。</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>指定された型の break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
      <returns>Break と等しい <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、および <paramref name="type" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを含む <see cref="T:System.Linq.Expressions.GotoExpression" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> のジャンプ先の <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>引数をとらないインスタンス メソッドへの呼び出しを示す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> プロパティを含む <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</returns>
      <param name="instance">インスタンス メソッド呼び出しのインスタンスを指定する<see cref="T:System.Linq.Expressions.Expression" />。static (Visual Basic では Shared) メソッドの場合は null を渡します。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> が null です。または<paramref name="instance" /> は null で、<paramref name="method" /> はインスタンス メソッドを表します。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type は <paramref name="method" /> で示されるメソッドの宣言する型には割り当てできません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>引数を受け取るメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />、および <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</returns>
      <param name="instance">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。static (Visual Basic では Shared) メソッドに null を渡します。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arguments">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> が null です。または<paramref name="instance" /> は null で、<paramref name="method" /> はインスタンス メソッドを表します。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type は <paramref name="method" /> で示されるメソッドの宣言する型には割り当てできません。または<paramref name="arguments" /> 内の要素の数が、<paramref name="method" /> によって表されるメソッドのパラメーターの数と等しくありません。または<paramref name="arguments" /> の 1 つ以上の要素が、<paramref name="method" /> で表されるメソッドの対応するパラメーターに割り当てできません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>2 つの引数をとる静的メソッドへの呼び出しを示す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> プロパティを含む <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</returns>
      <param name="instance">インスタンス呼び出しのインスタンスを指定する <see cref="T:System.Linq.Expressions.Expression" />。static (Visual Basic では Shared) メソッドの場合は null を渡します。</param>
      <param name="method">呼び出し先のメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">最初の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" /> です。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>引数をとらない静的メソッドへの呼び出しを示す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> プロパティを含む <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</returns>
      <param name="instance">インスタンス呼び出しのインスタンスを指定する <see cref="T:System.Linq.Expressions.Expression" />。static (Visual Basic では Shared) メソッドの場合は null を渡します。</param>
      <param name="method">呼び出し先のメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">最初の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" /> です。</param>
      <param name="arg2">3 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>引数を受け取るメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />、および <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</returns>
      <param name="instance">インスタンス メソッド呼び出し (static (Visual Basic では Shared) メソッドの null を渡す) のインスタンスを指定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arguments">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> が null です。または<paramref name="instance" /> は null で、<paramref name="method" /> はインスタンス メソッドを表します。または<paramref name="arguments" /> は null ではなく、その 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type は <paramref name="method" /> で示されるメソッドの宣言する型には割り当てできません。または<paramref name="arguments" /> 内の要素の数が、<paramref name="method" /> によって表されるメソッドのパラメーターの数と等しくありません。または<paramref name="arguments" /> の 1 つ以上の要素が、<paramref name="method" /> で表されるメソッドの対応するパラメーターに割り当てできません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>適切なファクトリ メソッドを呼び出してインスタンス メソッドへの呼び出しを示す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> に等しい<see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<paramref name="instance" /> に等しい <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティ、指定されたインスタンス メソッドを表す <see cref="T:System.Reflection.MethodInfo" /> に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />、および指定された引数に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> を含む <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</returns>
      <param name="instance">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ値が特定のメソッドの検索対象となる <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="methodName">メソッドの名前。</param>
      <param name="typeArguments">ジェネリック メソッドの型パラメーターを指定する <see cref="T:System.Type" /> オブジェクトの配列。methodName が非ジェネリック メソッドを指定する場合、この引数は null にします。</param>
      <param name="arguments">メソッドへの引数を示す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> または <paramref name="methodName" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">名前が <paramref name="methodName" /> で、型パラメーターが <paramref name="typeArguments" /> と一致し、パラメーターの型が <paramref name="arguments" /> と一致するメソッドが、<paramref name="instance" />.Type またはその基本型で見つかりません。または名前が <paramref name="methodName" /> で、型パラメーターが <paramref name="typeArguments" /> と一致し、パラメーターの型が <paramref name="arguments" /> と一致する複数のメソッドが、<paramref name="instance" />.Type またはその基本型で見つかりました。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>static (Visual Basic では Shared) メソッドへの呼び出しを示す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> プロパティを含む <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</returns>
      <param name="method">呼び出し先のメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arguments">呼び出し引数を示す <see cref="T:System.Linq.Expressions.Expression" /> のコレクション。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>1 つの引数をとる static (Visual Basic では Shared) メソッドへの呼び出しを示す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> プロパティを含む <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</returns>
      <param name="method">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">最初の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />  が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>2 つの引数をとる静的メソッドへの呼び出しを示す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> プロパティを含む <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</returns>
      <param name="method">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">最初の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" /> です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />  が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>3 つの引数をとる静的メソッドへの呼び出しを示す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> プロパティを含む <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</returns>
      <param name="method">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">最初の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" /> です。</param>
      <param name="arg2">3 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />  が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>4 つの引数をとる静的メソッドへの呼び出しを示す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> プロパティを含む <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</returns>
      <param name="method">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">最初の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" /> です。</param>
      <param name="arg2">3 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg3">4 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />  が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>5 つの引数をとる静的メソッドへの呼び出しを示す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> プロパティを含む <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</returns>
      <param name="method">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">最初の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" /> です。</param>
      <param name="arg2">3 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg3">4 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg4">5 番目の引数を示す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />  が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>引数を持つ static (Visual Basic では Shared) メソッドへの呼び出しを示す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> プロパティを含む <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</returns>
      <param name="method">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> プロパティを等しく設定する static (Visual Basic では Shared) メソッドを示す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arguments">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 内の要素の数が、<paramref name="method" /> によって表されるメソッドのパラメーターの数と等しくありません。または<paramref name="arguments" /> の 1 つ以上の要素が、<paramref name="method" /> で表されるメソッドの対応するパラメーターに割り当てできません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>適切なファクトリ メソッドを呼び出して static (Visual Basic では Shared) メソッドへの呼び出しを示す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> に等しい<see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、指定された static (Visual Basic では Shared) メソッドを表す <see cref="T:System.Reflection.MethodInfo" /> に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> プロパティ、および指定された引数に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> プロパティを含む <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</returns>
      <param name="type">指定された static (Visual Basic では Shared) メソッドを含む型を指定する <see cref="T:System.Type" />。</param>
      <param name="methodName">メソッドの名前。</param>
      <param name="typeArguments">ジェネリック メソッドの型パラメーターを指定する <see cref="T:System.Type" /> オブジェクトの配列。methodName が非ジェネリック メソッドを指定する場合、この引数は null にします。</param>
      <param name="arguments">メソッドへの引数を示す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> または <paramref name="methodName" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">名前が <paramref name="methodName" /> で、型パラメーターが <paramref name="typeArguments" /> と一致し、パラメーターの型が <paramref name="arguments" /> と一致するメソッドが、<paramref name="type" /> またはその基本型で見つかりません。または名前が <paramref name="methodName" /> で、型パラメーターが <paramref name="typeArguments" /> と一致し、パラメーターの型が <paramref name="arguments" /> と一致する複数のメソッドが、<paramref name="type" /> またはその基本型で見つかりました。</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.CanReduce">
      <summary>ノードをより単純なノードに変形できることを示します。これが true を返す場合、Reduce() を呼び出して単純化された形式を生成できます。</summary>
      <returns>ノードを縮小することができる場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <summary>ハンドラーの本文で使用するために取得された <see cref="T:System.Exception" /> オブジェクトへの参照を持つ catch ステートメントを示す <see cref="T:System.Linq.Expressions.CatchBlock" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="variable">このハンドラーによってキャッチされる <see cref="T:System.Exception" /> オブジェクトへの参照を表す <see cref="T:System.Linq.Expressions.ParameterExpression" />。</param>
      <param name="body">catch ステートメントの本体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
        <see cref="T:System.Exception" /> フィルターと取得された <see cref="T:System.Exception" /> オブジェクトへの参照を持つ catch ステートメントを示す <see cref="T:System.Linq.Expressions.CatchBlock" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="variable">このハンドラーによってキャッチされる <see cref="T:System.Exception" /> オブジェクトへの参照を表す <see cref="T:System.Linq.Expressions.ParameterExpression" />。</param>
      <param name="body">catch ステートメントの本体。</param>
      <param name="filter">
        <see cref="T:System.Exception" /> フィルターの本体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <summary>catch ステートメントを表す <see cref="T:System.Linq.Expressions.CatchBlock" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="type">この <see cref="T:System.Linq.Expressions.CatchBlock" /> が処理する <see cref="T:System.Exception" /> の <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="body">catch ステートメントの本体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
        <see cref="T:System.Exception" /> フィルターはあるが取得された <see cref="T:System.Exception" /> オブジェクトへの参照のない catch ステートメントを示す <see cref="T:System.Linq.Expressions.CatchBlock" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="type">この <see cref="T:System.Linq.Expressions.CatchBlock" /> が処理する <see cref="T:System.Exception" /> の <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="body">catch ステートメントの本体。</param>
      <param name="filter">
        <see cref="T:System.Exception" /> フィルターの本体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <summary>シーケンス ポイントをクリアする <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> を作成します。</summary>
      <returns>シーケンス ポイントをクリアするための <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> のインスタンス。</returns>
      <param name="document">ソース ファイルを表す <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>合体演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" /> の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、参照型または null 許容型を表しません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type と <paramref name="right" />.Type は、互いに変換できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary>変換関数を使用して、結合演算を示す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type と <paramref name="right" />.Type は、互いに変換できません。または<paramref name="conversion" /> は null ではなく、<paramref name="conversion" /> Type は受け取る引数が 1 つだけではないデリゲート型です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" /> の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、参照型または null 許容型を表しません。または<paramref name="left" /> の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="conversion" />.Type デリゲート型のパラメーター型に割り当てできない型を表します。または<paramref name="right" /> の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="conversion" />.Type デリゲート型の戻り値の型と等しくありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>条件付きステートメントを表す <see cref="T:System.Linq.Expressions.ConditionalExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />、および <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.ConditionalExpression" />。</returns>
      <param name="test">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifTrue">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifFalse">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="test" /> または <paramref name="ifTrue" /> または <paramref name="ifFalse" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="test" />.Type が <see cref="T:System.Boolean" /> ではありません。または<paramref name="ifTrue" />.Type が、<paramref name="ifFalse" />.Type と等しくありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <summary>条件付きステートメントを表す <see cref="T:System.Linq.Expressions.ConditionalExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />、および <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.ConditionalExpression" />。</returns>
      <param name="test">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifTrue">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifFalse">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary>
        <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> プロパティが指定された値に設定されている <see cref="T:System.Linq.Expressions.ConstantExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> プロパティを含む <see cref="T:System.Linq.Expressions.ConstantExpression" />。</returns>
      <param name="value">
        <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> プロパティを等しく設定する <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary>
        <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> プロパティと <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティが指定された値に設定されている <see cref="T:System.Linq.Expressions.ConstantExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> プロパティおよび <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを含む <see cref="T:System.Linq.Expressions.ConstantExpression" />。</returns>
      <param name="value">
        <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> プロパティを等しく設定する <see cref="T:System.Object" />。</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が null ではなく、<paramref name="type" /> を <paramref name="value" /> の動的型から割り当てることができません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <summary>continue ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
      <returns>Continue と等しい <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <see cref="T:System.Linq.Expressions.GotoExpression" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> のジャンプ先の <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>指定された値の continue ステートメントを示す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
      <returns>Continue と等しい <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="type" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" />、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <see cref="T:System.Linq.Expressions.GotoExpression" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> のジャンプ先の <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary>型変換操作を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティおよび <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを含む <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> または <paramref name="type" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type と <paramref name="type" /> の間には変換演算子が定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>実装メソッドが指定されている変換操作を示す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、<see cref="P:System.Linq.Expressions.Expression.Type" />、および <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="T:System.Type" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> または <paramref name="type" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 1 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type と <paramref name="type" /> の間には変換演算子が定義されていません。または<paramref name="expression" />.Type は、<paramref name="method" /> によって表されるメソッドの引数型に割り当てできません。または<paramref name="method" /> によって表されるメソッドの戻り値の型は、<paramref name="type" /> に割り当てできません。または<paramref name="expression" />.Type または <paramref name="type" /> は null 許容型で、対応する null 非許容型は <paramref name="method" /> によって表されるメソッドの引数型または戻り値の型とそれぞれ等しくありません。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
        <paramref name="method" /> 記述に一致する複数のメソッドが見つかりました。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary>対象の型がオーバーフローした場合に例外を投げる変換操作を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティおよび <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを含む <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> または <paramref name="type" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type と <paramref name="type" /> の間には変換演算子が定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>対象の型がオーバーフローした場合に例外をスローし、実装メソッドが指定されている変換操作を示す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、<see cref="P:System.Linq.Expressions.Expression.Type" />、および <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="T:System.Type" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> または <paramref name="type" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 1 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type と <paramref name="type" /> の間には変換演算子が定義されていません。または<paramref name="expression" />.Type は、<paramref name="method" /> によって表されるメソッドの引数型に割り当てできません。または<paramref name="method" /> によって表されるメソッドの戻り値の型は、<paramref name="type" /> に割り当てできません。または<paramref name="expression" />.Type または <paramref name="type" /> は null 許容型で、対応する null 非許容型は <paramref name="method" /> によって表されるメソッドの引数型または戻り値の型とそれぞれ等しくありません。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
        <paramref name="method" /> 記述に一致する複数のメソッドが見つかりました。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>指定されたスパンの <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> のインスタンス。</returns>
      <param name="document">ソース ファイルを表す <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</param>
      <param name="startLine">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の開始行。1 以上であることが必要です。</param>
      <param name="startColumn">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の開始列。1 以上であることが必要です。</param>
      <param name="endLine">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の終了行。開始行の値以上である必要があります。</param>
      <param name="endColumn">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の終了列。最終行が先頭行と同じである場合、これは開始列の値以上である必要があります。どのような場合でも、0 より大きい値である必要があります。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <summary>式の値を 1 つ減らすデクリメントを表す<see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>デクリメントされた式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">デクリメントする <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>式の値を 1 つ減らすデクリメントを表す<see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>デクリメントされた式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">デクリメントする <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">実装するメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <summary>
        <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティが指定された型に設定されている <see cref="T:System.Linq.Expressions.DefaultExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した型に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを含む <see cref="T:System.Linq.Expressions.DefaultExpression" />。</returns>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>除算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">除算演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>除算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。実装メソッドを指定できます。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、除算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックを行わない除算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックを行わない除算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>オーバーフロー チェックを行わない除算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> を 2 番目の引数として指定し、<see cref="T:System.Linq.Expressions.ElementInit" /> を作成します。</summary>
      <returns>指定した値に設定された <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> プロパティおよび <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> プロパティを含む <see cref="T:System.Linq.Expressions.ElementInit" />。</returns>
      <param name="addMethod">
        <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arguments">
        <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> プロパティが等しく設定された <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> または <paramref name="arguments" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="addMethod" /> が表すメソッドの名前が "Add" (大文字と小文字は区別されません) ではありません。または<paramref name="addMethod" /> が表すメソッドが、インスタンス メソッドではありません。または<paramref name="arguments" /> に、<paramref name="addMethod" /> が表すメソッドのパラメーターの数と同じ数の要素が含まれていません。または<paramref name="arguments" /> の 1 つ以上の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを、<paramref name="addMethod" /> が表すメソッドの対応するパラメーターの型に割り当てできません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>値の配列を 2 番目の引数として指定し、<see cref="T:System.Linq.Expressions.ElementInit" /> を作成します。</summary>
      <returns>指定した値に設定された <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> プロパティおよび <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> プロパティを含む <see cref="T:System.Linq.Expressions.ElementInit" />。</returns>
      <param name="addMethod">
        <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arguments">
        <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> プロパティが等しく設定された <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> または <paramref name="arguments" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">addMethod が表すメソッドの名前が "Add" (大文字と小文字は区別されません) ではありません。またはaddMethod が表すメソッドが、インスタンス メソッドではありません。または引数に、addMethod が表すメソッドのパラメーターの数と同じ数の要素が含まれていません。または<paramref name="arguments" /> の 1 つ以上の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを、<paramref name="addMethod" /> が表すメソッドの対応するパラメーターの型に割り当てできません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Empty">
      <summary>
        <see cref="T:System.Void" /> 型を持つ空の式を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> と等しい<see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、<see cref="T:System.Void" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを含む <see cref="T:System.Linq.Expressions.DefaultExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">等値演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。実装メソッドを指定できます。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">
        <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> を true に設定する場合は true。<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> を false に設定する場合は false。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、等値演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>ユーザー定義の型の op_ExclusiveOr を使用して、ビットごとの XOR 演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">XOR 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>ユーザー定義の型の op_ExclusiveOr を使用して、ビットごとの XOR 演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。実装メソッドを指定できます。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、XOR 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>ユーザー定義型の op_ExclusiveOr を使用して、ビットごとの XOR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>ユーザー定義型の op_ExclusiveOr を使用して、ビットごとの XOR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>ユーザー定義型の op_ExclusiveOr を使用して、ビットごとの XOR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary>フィールドへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> プロパティを含む <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。static (Visual Basic では Shared) の場合、<paramref name="expression" /> は null である必要があります。</param>
      <param name="field">
        <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> プロパティを等しく設定する <see cref="T:System.Reflection.FieldInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="field" /> が null です。または<paramref name="field" /> が示すフィールドが static (Visual Basic では Shared) でなく、<paramref name="expression" /> は null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type は <paramref name="field" /> で示されるフィールドの宣言する型には割り当てできません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary>フィールドの名前が指定されたフィールドへのアクセスを示す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> に等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<paramref name="expression" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ、および <paramref name="fieldName" /> により示されるフィールドを表す <see cref="T:System.Reflection.FieldInfo" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> プロパティを含む <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> が <paramref name="fieldName" /> という名前のフィールドを含む <see cref="T:System.Linq.Expressions.Expression" />。静的フィールドの場合は null を指定できます。</param>
      <param name="fieldName">アクセスするフィールドの名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> または <paramref name="fieldName" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type またはその基本型では <paramref name="fieldName" /> という名前のフィールドが定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>フィールドへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
      <param name="expression">フィールドの格納オブジェクト。静的フィールドの場合は null を指定できます。</param>
      <param name="type">フィールドを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="fieldName">アクセスされるフィールド。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary>特定の型引数を持つ汎用 System.Action デリゲート型を表す <see cref="T:System.Type" /> オブジェクトを作成します。</summary>
      <returns>指定された型の引数と持つ System.Action デリゲートの型。</returns>
      <param name="typeArgs">System.Action デリゲート型の型引数を指定する <see cref="T:System.Type" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" />  には、5 つ以上の要素が格納されます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <summary>特定の型引数を持つ汎用 System.Func デリゲート型または System.Action デリゲート型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> オブジェクトを取得します。</summary>
      <returns>デリゲートの型。</returns>
      <param name="typeArgs">デリゲートの型引数。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary>特定の型引数を持つ汎用 System.Func デリゲート型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> オブジェクトを作成します。最後の型引数で、作成するデリゲートの戻り値の型を指定します。</summary>
      <returns>指定された型の引数と持つ System.Func デリゲートの型。</returns>
      <param name="typeArgs">System.Func デリゲート型の型引数を指定する 1 つから 5 つの <see cref="T:System.Type" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" />  には、1 個未満または 6 個以上の要素が格納されます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <summary>"go to" ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
      <returns>Goto と等しい <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />、指定された値に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <see cref="T:System.Linq.Expressions.GotoExpression" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> のジャンプ先の <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>"go to" ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。ジャンプ時にラベルに渡す値を指定できます。</summary>
      <returns>Goto と等しい <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="value" /> を含む <see cref="T:System.Linq.Expressions.GotoExpression" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> のジャンプ先の <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">ジャンプ時に関連付けられているラベルに渡される値。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>指定された型の "go to" ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。ジャンプ時にラベルに渡す値を指定できます。</summary>
      <returns>Goto と等しい <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="type" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="value" /> を含む <see cref="T:System.Linq.Expressions.GotoExpression" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> のジャンプ先の <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">ジャンプ時に関連付けられているラベルに渡される値。</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>指定された型の "go to" ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
      <returns>Goto と等しい <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />、指定された値に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="type" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" />、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <see cref="T:System.Linq.Expressions.GotoExpression" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> のジャンプ先の <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>"大なり"数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">"より大きい" 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>"大なり"数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。実装メソッドを指定できます。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">
        <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> を true に設定する場合は true。<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> を false に設定する場合は false。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は nullであり、"より大きい" 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>"以上" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">"より大きいか等しい" 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>"以上" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">
        <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> を true に設定する場合は true。<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> を false に設定する場合は false。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は nullであり、"より大きいか等しい" 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>if ステートメントのある条件ブロックを示す <see cref="T:System.Linq.Expressions.ConditionalExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> に等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定された値に設定された <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> プロパティおよび <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> プロパティを含む <see cref="T:System.Linq.Expressions.ConditionalExpression" />。<see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> プロパティは既定の式に設定されます。また、このメソッドによって返される結果の <see cref="T:System.Linq.Expressions.ConditionalExpression" /> の型は <see cref="T:System.Void" /> です。</returns>
      <param name="test">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifTrue">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>if ステートメントおよび else ステートメントのある条件ブロックを示す <see cref="T:System.Linq.Expressions.ConditionalExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、および <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.ConditionalExpression" />。このメソッドによって返される結果の <see cref="T:System.Linq.Expressions.ConditionalExpression" /> の型は <see cref="T:System.Void" /> です。</returns>
      <param name="test">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifTrue">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifFalse">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <summary>式の値の 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>インクリメントされた式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">インクリメントする <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>式の 1 つずつの増分を示す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>インクリメントされた式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">インクリメントする <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">実装するメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>引数式のリストにデリゲートまたはラムダ式を適用する <see cref="T:System.Linq.Expressions.InvocationExpression" /> を作成します。</summary>
      <returns>指定された引数に、指定されたデリゲートまたはラムダ式を適用する <see cref="T:System.Linq.Expressions.InvocationExpression" />。</returns>
      <param name="expression">適用されるデリゲートまたはラムダ式を示す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arguments">デリゲートまたはラムダ式が適用される引数を示す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type はデリゲート型または <see cref="T:System.Linq.Expressions.Expression`1" /> を表しません。または<paramref name="arguments" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="expression" /> によって表されるデリゲートの対応するパラメーターの型に割り当てできません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> に、<paramref name="expression" /> によって表されるデリゲートのパラメーターのリストと同じ数の要素が格納されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>引数式のリストにデリゲートまたはラムダ式を適用する <see cref="T:System.Linq.Expressions.InvocationExpression" /> を作成します。</summary>
      <returns>指定された引数に、指定されたデリゲートまたはラムダ式を適用する <see cref="T:System.Linq.Expressions.InvocationExpression" />。</returns>
      <param name="expression">適用されるデリゲートまたはラムダ式を示す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arguments">デリゲートまたはラムダ式が適用される引数を示す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type はデリゲート型または <see cref="T:System.Linq.Expressions.Expression`1" /> を表しません。または<paramref name="arguments" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="expression" /> によって表されるデリゲートの対応するパラメーターの型に割り当てできません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> に、<paramref name="expression" /> によって表されるデリゲートのパラメーターのリストと同じ数の要素が格納されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <summary>式が false に評価されるかどうかを返します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
      <param name="expression">評価する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>式が false に評価されるかどうかを返します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
      <param name="expression">評価する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">実装するメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <summary>式が true に評価されるかどうかを返します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
      <param name="expression">評価する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>式が true に評価されるかどうかを返します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
      <param name="expression">評価する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">実装するメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label">
      <summary>void 型または名前のないラベルを示す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</summary>
      <returns>void 型または名前のないラベルを示す新しい <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <summary>既定値のないラベルを示す <see cref="T:System.Linq.Expressions.LabelExpression" /> を作成します。</summary>
      <returns>既定値のない <see cref="T:System.Linq.Expressions.LabelExpression" />。</returns>
      <param name="target">この <see cref="T:System.Linq.Expressions.LabelExpression" /> が関連付けられる <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>既定値が指定されたラベルを示す <see cref="T:System.Linq.Expressions.LabelExpression" /> を作成します。</summary>
      <returns>既定値が指定された <see cref="T:System.Linq.Expressions.LabelExpression" />。</returns>
      <param name="target">この <see cref="T:System.Linq.Expressions.LabelExpression" /> が関連付けられる <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="defaultValue">定期的な制御フローでラベルに到達する場合のこの <see cref="T:System.Linq.Expressions.LabelExpression" /> の値。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
      <summary>void 型で指定された名前を持つラベルを示す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</summary>
      <returns>void 型で指定された名前を持つラベルを示す新しい <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
      <param name="name">ラベルの名前。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <summary>指定された型のラベルを示す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</summary>
      <returns>指定された型のラベルを示す新しい <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
      <param name="type">ラベルにジャンプするときに渡す値の型。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <summary>指定された型と名前を持つラベルを示す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</summary>
      <returns>指定された型と名前を持つラベルを示す新しい <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
      <param name="type">ラベルにジャンプするときに渡す値の型。</param>
      <param name="name">ラベルの名前。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティが Lambda に等しく、<see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティが指定した値に設定された <see cref="T:System.Linq.Expressions.LambdaExpression" />。</returns>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="tailCall">作成された式のコンパイル時に tail 呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> と等しい <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.Expression`1.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> プロパティを含む <see cref="T:System.Linq.Expressions.Expression`1" />。</returns>
      <param name="body">
        <see cref="P:System.Linq.Expressions.Expression`1.Body" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="tailCall">作成された式のコンパイル時に tail 呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TDelegate">デリゲートの型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> と等しい <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.Expression`1.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> プロパティを含む <see cref="T:System.Linq.Expressions.Expression`1" />。</returns>
      <param name="body">
        <see cref="P:System.Linq.Expressions.Expression`1.Body" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="tailCall">作成された式のコンパイル時に tail 呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む配列。</param>
      <typeparam name="TDelegate">デリゲートの型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティが Lambda に等しく、<see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティが指定した値に設定された <see cref="T:System.Linq.Expressions.LambdaExpression" />。</returns>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="tailCall">作成された式のコンパイル時に tail 呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む配列。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティを含む <see cref="T:System.Linq.Expressions.Expression`1" />。</returns>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TDelegate">デリゲート型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> が null です。または<paramref name="parameters" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" />  がデリゲート型でありません。または<paramref name="body" />.Type は、<paramref name="TDelegate" /> の戻り値の型に割り当てできない型を表します。または<paramref name="parameters" /> に、<paramref name="TDelegate" /> のパラメーターのリストと同じ数の要素が含まれていません。または<paramref name="parameters" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="TDelegate" /> の対応するパラメーター型から割り当てできません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティが Lambda に等しく、<see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティが指定した値に設定された <see cref="T:System.Linq.Expressions.LambdaExpression" />。</returns>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティを含む <see cref="T:System.Linq.Expressions.Expression`1" />。</returns>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトの配列。</param>
      <typeparam name="TDelegate">デリゲート型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> が null です。または<paramref name="parameters" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" />  がデリゲート型でありません。または<paramref name="body" />.Type は、<paramref name="TDelegate" /> の戻り値の型に割り当てできない型を表します。または<paramref name="parameters" /> に、<paramref name="TDelegate" /> のパラメーターのリストと同じ数の要素が含まれていません。または<paramref name="parameters" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="TDelegate" /> の対応するパラメーター型から割り当てできません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>まずデリゲート型を構築して <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティを含む <see cref="T:System.Linq.Expressions.LambdaExpression" />。</returns>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> が null です。または<paramref name="parameters" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" />  には、17 個以上の要素が格納されます。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> と等しい <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.Expression`1.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> プロパティを含む <see cref="T:System.Linq.Expressions.Expression`1" />。</returns>
      <param name="body">
        <see cref="P:System.Linq.Expressions.Expression`1.Body" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="name">ラムダの名前。デバッグ情報を生成するために使用します。</param>
      <param name="tailCall">作成された式のコンパイル時に tail 呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TDelegate">デリゲートの型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティが Lambda に等しく、<see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティが指定した値に設定された <see cref="T:System.Linq.Expressions.LambdaExpression" />。</returns>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="name">ラムダの名前。デバッグ情報を出力するために使用します。</param>
      <param name="tailCall">作成された式のコンパイル時に tail 呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティが Lambda に等しく、<see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティが指定した値に設定された <see cref="T:System.Linq.Expressions.LambdaExpression" />。</returns>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="name">ラムダの名前。デバッグ情報を出力するために使用します。</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> と等しい <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.Expression`1.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> プロパティを含む <see cref="T:System.Linq.Expressions.Expression`1" />。</returns>
      <param name="body">
        <see cref="P:System.Linq.Expressions.Expression`1.Body" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="name">ラムダの名前。デバッグ情報を生成するために使用します。</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TDelegate">デリゲートの型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティが Lambda に等しく、<see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティが指定した値に設定された <see cref="T:System.Linq.Expressions.LambdaExpression" />。</returns>
      <param name="delegateType">ラムダのデリゲート シグネチャを表す <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="tailCall">作成された式のコンパイル時に tail 呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティが Lambda に等しく、<see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティが指定した値に設定された <see cref="T:System.Linq.Expressions.LambdaExpression" />。</returns>
      <param name="delegateType">ラムダのデリゲート シグネチャを表す <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="tailCall">作成された式のコンパイル時に tail 呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む配列。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>まずデリゲート型を構築して <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。これは、コンパイル時にデリゲート型が不明な場合に使用できます。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティを含むラムダ式を表すオブジェクト。</returns>
      <param name="delegateType">ラムダのデリゲート シグネチャを表す <see cref="T:System.Type" />。</param>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> または <paramref name="body" /> が null です。または<paramref name="parameters" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" />  がデリゲート型を表していません。または<paramref name="body" />.Type は、<paramref name="delegateType" /> によって表されるデリゲート型の戻り値の型に割り当てできない型を表しています。または<paramref name="parameters" /> に、<paramref name="delegateType" /> により表されるデリゲート型のパラメーターのリストと同じ数の要素が含まれていません。または<paramref name="parameters" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="delegateType" />によって表されるデリゲート型の対応するパラメーター型から割り当てできません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>まずデリゲート型を構築して <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。これは、コンパイル時にデリゲート型が不明な場合に使用できます。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティを含むラムダ式を表すオブジェクト。</returns>
      <param name="delegateType">ラムダのデリゲート シグネチャを表す <see cref="T:System.Type" />。</param>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> または <paramref name="body" /> が null です。または<paramref name="parameters" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" />  がデリゲート型を表していません。または<paramref name="body" />.Type は、<paramref name="delegateType" /> によって表されるデリゲート型の戻り値の型に割り当てできない型を表しています。または<paramref name="parameters" /> に、<paramref name="delegateType" /> により表されるデリゲート型のパラメーターのリストと同じ数の要素が含まれていません。または<paramref name="parameters" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="delegateType" />によって表されるデリゲート型の対応するパラメーター型から割り当てできません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティが Lambda に等しく、<see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティが指定した値に設定された <see cref="T:System.Linq.Expressions.LambdaExpression" />。</returns>
      <param name="delegateType">ラムダのデリゲート シグネチャを表す <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> を等しく設定する <see cref="T:System.Linq.Expressions.Expression" /> です。</param>
      <param name="name">ラムダの名前。デバッグ情報を出力するために使用します。</param>
      <param name="tailCall">作成された式をコンパイルするときに tail の呼び出しの最適化を適用するかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティが Lambda に等しく、<see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティが指定した値に設定された <see cref="T:System.Linq.Expressions.LambdaExpression" />。</returns>
      <param name="delegateType">ラムダのデリゲート シグネチャを表す <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="name">ラムダの名前。デバッグ情報を出力するために使用します。</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>ビットごとの左シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">左シフト演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>ビットごとの左シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null であり、左シフト演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>ビットごとの左シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>ビットごとの左シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>ビットごとの左シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>"小なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">"より小さい" 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>"小なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">
        <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> を true に設定する場合は true。<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> を false に設定する場合は false。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は nullであり、"より小さい" 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>"以下" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">"より小さいか等しい" 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>"以下" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">
        <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> を true に設定する場合は true。<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> を false に設定する場合は false。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は nullであり、"より小さいか等しい" 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>メンバーがフィールドまたはプロパティである <see cref="T:System.Linq.Expressions.MemberListBinding" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> プロパティを含む <see cref="T:System.Linq.Expressions.MemberListBinding" />。</returns>
      <param name="member">
        <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを等しく設定するフィールドまたはプロパティを表す <see cref="T:System.Reflection.MemberInfo" />。</param>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> が null です。または<paramref name="initializers" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" />  は、フィールドまたはプロパティを表しません。または<paramref name="member" /> が表すフィールドまたはプロパティの <see cref="P:System.Reflection.FieldInfo.FieldType" /> または <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> は、<see cref="T:System.Collections.IEnumerable" /> を実装していません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary>メンバーがフィールドまたはプロパティである <see cref="T:System.Linq.Expressions.MemberListBinding" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> プロパティを含む <see cref="T:System.Linq.Expressions.MemberListBinding" />。</returns>
      <param name="member">
        <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを等しく設定するフィールドまたはプロパティを表す <see cref="T:System.Reflection.MemberInfo" />。</param>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> が null です。または<paramref name="initializers" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" />  は、フィールドまたはプロパティを表しません。または<paramref name="member" /> が表すフィールドまたはプロパティの <see cref="P:System.Reflection.FieldInfo.FieldType" /> または <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> は、<see cref="T:System.Collections.IEnumerable" /> を実装していません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>指定されたプロパティ アクセサー メソッドに基づいて <see cref="T:System.Linq.Expressions.MemberListBinding" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<paramref name="propertyAccessor" /> でアクセスされるプロパティを表す <see cref="T:System.Reflection.MemberInfo" /> に設定された <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティ、および <paramref name="initializers" /> の要素が設定された <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> を持つ <see cref="T:System.Linq.Expressions.MemberListBinding" />。</returns>
      <param name="propertyAccessor">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> が null です。または<paramref name="initializers" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" />  は、プロパティ アクセサー メソッドを表しません。または<paramref name="propertyAccessor" /> により表されるメソッドがアクセスするプロパティの <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> は、<see cref="T:System.Collections.IEnumerable" /> を実装していません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary>指定されたプロパティ アクセサー メソッドに基づいて <see cref="T:System.Linq.Expressions.MemberListBinding" /> オブジェクトを作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<paramref name="propertyAccessor" /> でアクセスされるプロパティを表す <see cref="T:System.Reflection.MemberInfo" /> に設定された <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティ、および <paramref name="initializers" /> の要素が設定された <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> を持つ <see cref="T:System.Linq.Expressions.MemberListBinding" />。</returns>
      <param name="propertyAccessor">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> が null です。または<paramref name="initializers" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" />  は、プロパティ アクセサー メソッドを表しません。または<paramref name="propertyAccessor" /> により表されるメソッドがアクセスするプロパティの <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> は、<see cref="T:System.Collections.IEnumerable" /> を実装していません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>指定した <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトを使用してコレクションを初期化する <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> プロパティおよび <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> プロパティを含む <see cref="T:System.Linq.Expressions.ListInitExpression" />。</returns>
      <param name="newExpression">
        <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> または <paramref name="initializers" /> が null です。または<paramref name="initializers" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type は <see cref="T:System.Collections.IEnumerable" /> を実装していません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>"Add" という名前のメソッドを使用してコレクションに要素を追加する <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> プロパティを含む <see cref="T:System.Linq.Expressions.ListInitExpression" />。</returns>
      <param name="newExpression">
        <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> または <paramref name="initializers" /> が null です。または<paramref name="initializers" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type は <see cref="T:System.Collections.IEnumerable" /> を実装していません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="newExpression" />.Type またはその基本型で宣言された "Add" (大文字と小文字は区別されません) という名前のインスタンス メソッドがありません。または<paramref name="newExpression" />.Type またはその基本型の add メソッドは、受け取る引数が 1 つだけではありません。または<paramref name="initializers" /> の最初の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティによって表される型は、<paramref name="newExpression" />.Type またはその基本型の add メソッドの引数型に割り当てできません。または"Add" (大文字と小文字は区別されません) という名前の複数の引数互換メソッドが、<paramref name="newExpression" />.Type またはその基本型に存在します。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary>指定した <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトを使用してコレクションを初期化する <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> プロパティおよび <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> プロパティを含む <see cref="T:System.Linq.Expressions.ListInitExpression" />。</returns>
      <param name="newExpression">
        <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="initializers">
        <see cref="T:System.Linq.Expressions.ElementInit" /> コレクションの設定に使用する <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> または <paramref name="initializers" /> が null です。または<paramref name="initializers" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type は <see cref="T:System.Collections.IEnumerable" /> を実装していません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary>"Add" という名前のメソッドを使用してコレクションに要素を追加する <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> プロパティを含む <see cref="T:System.Linq.Expressions.ListInitExpression" />。</returns>
      <param name="newExpression">
        <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> または <paramref name="initializers" /> が null です。または<paramref name="initializers" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type は <see cref="T:System.Collections.IEnumerable" /> を実装していません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="newExpression" />.Type またはその基本型で宣言された "Add" (大文字と小文字は区別されません) という名前のインスタンス メソッドがありません。または<paramref name="newExpression" />.Type またはその基本型の add メソッドは、受け取る引数が 1 つだけではありません。または<paramref name="initializers" /> の最初の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティによって表される型は、<paramref name="newExpression" />.Type またはその基本型の add メソッドの引数型に割り当てできません。または"Add" (大文字と小文字は区別されません) という名前の複数の引数互換メソッドが、<paramref name="newExpression" />.Type またはその基本型に存在します。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>指定されたメソッドを使用してコレクションに要素を追加する <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> プロパティを含む <see cref="T:System.Linq.Expressions.ListInitExpression" />。</returns>
      <param name="newExpression">
        <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="addMethod">要素をコレクションに追加する "Add" (大文字と小文字は区別しない) という名前のインスタンス メソッドを示す<see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> または <paramref name="initializers" /> が null です。または<paramref name="initializers" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type は <see cref="T:System.Collections.IEnumerable" /> を実装していません。または<paramref name="addMethod" /> は null ではなく、受け取る引数が 1 つだけの "Add" (大文字と小文字は区別されません) という名前のインスタンス メソッドを表しません。または<paramref name="addMethod" /> は null ではなく、<paramref name="initializers" /> の 1 つ以上の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティによって表される型を <paramref name="addMethod" /> が表すメソッドの引数型に割り当てることはできません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> は null で、1 つの型互換の引数を受け取る "Add" という名前のインスタンス メソッドが <paramref name="newExpression" />.Type またはその基本型に存在しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>指定されたメソッドを使用してコレクションに要素を追加する <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> プロパティを含む <see cref="T:System.Linq.Expressions.ListInitExpression" />。</returns>
      <param name="newExpression">
        <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="addMethod">要素をコレクションに追加する、1 つの引数をとるインスタンス メソッドを示す<see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> または <paramref name="initializers" /> が null です。または<paramref name="initializers" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type は <see cref="T:System.Collections.IEnumerable" /> を実装していません。または<paramref name="addMethod" /> は null ではなく、受け取る引数が 1 つだけの "Add" (大文字と小文字は区別されません) という名前のインスタンス メソッドを表しません。または<paramref name="addMethod" /> は null ではなく、<paramref name="initializers" /> の 1 つ以上の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティによって表される型を <paramref name="addMethod" /> が表すメソッドの引数型に割り当てることはできません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> は null で、1 つの型互換の引数を受け取る "Add" という名前のインスタンス メソッドが <paramref name="newExpression" />.Type またはその基本型に存在しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <summary>指定された本体で <see cref="T:System.Linq.Expressions.LoopExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
      <param name="body">ループの本体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <summary>指定された本文および break のターゲットがある <see cref="T:System.Linq.Expressions.LoopExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
      <param name="body">ループの本体。</param>
      <param name="break">ループの本体によって使用される break の移動先。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <summary>指定された本体で <see cref="T:System.Linq.Expressions.LoopExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
      <param name="body">ループの本体。</param>
      <param name="break">ループの本体によって使用される break の移動先。</param>
      <param name="continue">ループの本体によって使用される continue の移動先。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>適切なファクトリ メソッドを呼び出し、提供された左辺オペランドと右辺オペランドを使用して <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>適切なファクトリ メソッドの呼び出した結果得られる <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="binaryType">バイナリ演算の種類を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="left">左辺オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">右辺オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" />  は、二項式ノードには対応していません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>適切なファクトリ メソッドを呼び出し、提供された左辺オペランド、右辺オペランド、および実装メソッドを使用して <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>適切なファクトリ メソッドの呼び出した結果得られる <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="binaryType">バイナリ演算の種類を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="left">左辺オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">右辺オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">
        <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> を true に設定する場合は true。<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> を false に設定する場合は false。</param>
      <param name="method">実装方法を指定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" />  は、二項式ノードには対応していません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>適切なファクトリ メソッドを呼び出し、提供された左辺オペランド、右辺オペランド、実装メソッド、および型変換関数を使用して <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>適切なファクトリ メソッドの呼び出した結果得られる <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="binaryType">バイナリ演算の種類を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="left">左辺オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">右辺オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">
        <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> を true に設定する場合は true。<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> を false に設定する場合は false。</param>
      <param name="method">実装方法を指定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">型変換関数を表す <see cref="T:System.Linq.Expressions.LambdaExpression" />。このパラメーターは、<paramref name="binaryType" /> が <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> または複合代入である場合にのみ使用されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" />  は、二項式ノードには対応していません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>指定された要素の catch ステートメントを示す <see cref="T:System.Linq.Expressions.CatchBlock" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="type">この <see cref="T:System.Linq.Expressions.CatchBlock" /> が処理する <see cref="T:System.Exception" /> の <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="variable">このハンドラーによってキャッチされる <see cref="T:System.Exception" /> オブジェクトへの参照を表す <see cref="T:System.Linq.Expressions.ParameterExpression" />。</param>
      <param name="body">catch ステートメントの本体。</param>
      <param name="filter">
        <see cref="T:System.Exception" /> フィルターの本体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>指定された <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> のジャンプを示す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。ジャンプ時にラベルに渡す値も指定できます。</summary>
      <returns>
        <paramref name="kind" /> と等しい <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="type" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="value" /> を含む <see cref="T:System.Linq.Expressions.GotoExpression" />。</returns>
      <param name="kind">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> の <see cref="T:System.Linq.Expressions.GotoExpressionKind" />。</param>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> のジャンプ先の <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">ジャンプ時に関連付けられているラベルに渡される値。</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>オブジェクトのインデックスの付いたプロパティへのアクセスを示す <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="instance">プロパティが属するオブジェクト。プロパティが static (Visual Basic では Shared) の場合は null です。</param>
      <param name="indexer">インデックスを付けるプロパティを示す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arguments">プロパティのインデックス化に使用する引数を格納しているIEnumerable&lt;Expression&gt; (Visual Basic では IEnumerable (Of Expression))。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary>フィールドまたはプロパティへのアクセスを示す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <returns>適切なファクトリ メソッドの呼び出した結果得られる <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
      <param name="expression">メンバーが属するオブジェクトを示す <see cref="T:System.Linq.Expressions.Expression" />。静的メンバーの場合は null を指定できます。</param>
      <param name="member">アクセスするフィールドまたはプロパティを説明する <see cref="T:System.Reflection.MemberInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> または <paramref name="member" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" />  は、フィールドまたはプロパティを表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <summary>指定された要素の try ブロックを示す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
      <param name="type">try 式の結果の型。null の場合は、本体およびすべてのハンドラーの型が同一である必要があります。</param>
      <param name="body">try ブロックの本体。</param>
      <param name="finally">finally ブロックの本体。try ブロックに関連付けられている finally ブロックがない場合は、null を渡します。</param>
      <param name="fault">try ブロックの本体。try ブロックに関連付けられている fault ブロックがない場合は、null を渡します。</param>
      <param name="handlers">try ブロックと関連付ける catch ステートメントを示す <see cref="T:System.Linq.Expressions.CatchBlock" /> のコレクション。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary>適切なファクトリ メソッドを呼び出して、オペランドが指定された <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>適切なファクトリ メソッドの呼び出した結果得られる <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="unaryType">単項演算の種類を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="operand">オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">変換後の型を指定する <see cref="T:System.Type" /> (適用できない場合は null を渡す)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" />  は、単項式ノードには対応していません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>適切なファクトリ メソッドを呼び出して、オペランドと実装メソッドが指定された <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>適切なファクトリ メソッドの呼び出した結果得られる <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="unaryType">単項演算の種類を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="operand">オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">変換後の型を指定する <see cref="T:System.Type" /> (適用できない場合は null を渡す)。</param>
      <param name="method">実装メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" />  は、単項式ノードには対応していません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>フィールドまたはプロパティのメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> プロパティを含む <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。</returns>
      <param name="member">
        <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを等しく設定する <see cref="T:System.Reflection.MemberInfo" />。</param>
      <param name="bindings">
        <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.MemberBinding" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> または <paramref name="bindings" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" />  は、フィールドまたはプロパティを表しません。または<paramref name="bindings" /> の要素の <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティは、<paramref name="member" />が表すフィールドまたはプロパティの型のメンバーを表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>フィールドまたはプロパティのメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> プロパティを含む <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。</returns>
      <param name="member">
        <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを等しく設定する <see cref="T:System.Reflection.MemberInfo" />。</param>
      <param name="bindings">
        <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.MemberBinding" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> または <paramref name="bindings" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" />  は、フィールドまたはプロパティを表しません。または<paramref name="bindings" /> の要素の <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティは、<paramref name="member" />が表すフィールドまたはプロパティの型のメンバーを表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>プロパティ アクセサー メソッドを使用してアクセスされる 1 つのメンバー中のメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<paramref name="propertyAccessor" /> でアクセスされるプロパティを表す <see cref="T:System.Reflection.PropertyInfo" /> に設定された <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティ、および指定した値に設定された <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> プロパティを含む <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。</returns>
      <param name="propertyAccessor">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="bindings">
        <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.MemberBinding" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> または <paramref name="bindings" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" />  は、プロパティ アクセサー メソッドを表しません。または<paramref name="bindings" /> の要素の <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティは、<paramref name="propertyAccessor" /> が表すメソッドによりアクセスされるプロパティの型のメンバーを表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>プロパティ アクセサー メソッドを使用してアクセスされる 1 つのメンバー中のメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<paramref name="propertyAccessor" /> でアクセスされるプロパティを表す <see cref="T:System.Reflection.PropertyInfo" /> に設定された <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティ、および指定した値に設定された <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> プロパティを含む <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。</returns>
      <param name="propertyAccessor">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="bindings">
        <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.MemberBinding" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> または <paramref name="bindings" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" />  は、プロパティ アクセサー メソッドを表しません。または<paramref name="bindings" /> の要素の <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティは、<paramref name="propertyAccessor" /> が表すメソッドによりアクセスされるプロパティの型のメンバーを表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>新しいオブジェクトを作成し、そのオブジェクトのプロパティを初期化する式を表します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> プロパティを含む <see cref="T:System.Linq.Expressions.MemberInitExpression" />。</returns>
      <param name="newExpression">
        <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="bindings">
        <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.MemberBinding" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> または <paramref name="bindings" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bindings" /> の要素の <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティは、<paramref name="newExpression" />.Type が表す型のメンバーを表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> プロパティを含む <see cref="T:System.Linq.Expressions.MemberInitExpression" />。</returns>
      <param name="newExpression">
        <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="bindings">
        <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.MemberBinding" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> または <paramref name="bindings" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bindings" /> の要素の <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティは、<paramref name="newExpression" />.Type が表す型のメンバーを表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>算術剰余演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">剰余演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>算術剰余演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、剰余演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>剰余代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>剰余代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>剰余代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックのない算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">乗算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックのない算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、乗算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックのない乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックのない乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>オーバーフロー チェックのない乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックのある乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックのある乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>オーバーフロー チェックのある乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックのある算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">乗算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックのある算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、乗算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <summary>算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">単項マイナス演算子は、<paramref name="expression" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> プロパティを含む <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 1 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、単項マイナス演算子は <paramref name="expression" />.Type に対して定義されていません。または<paramref name="expression" />.Type (または null 許容型の場合はその対応する null 非許容型) は、<paramref name="method" /> によって表されるメソッドの引数型に割り当てできません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックのある算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">単項マイナス演算子は、<paramref name="expression" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックのある算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。実装メソッドを指定できます。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> プロパティを含む <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 1 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、単項マイナス演算子は <paramref name="expression" />.Type に対して定義されていません。または<paramref name="expression" />.Type (または null 許容型の場合はその対応する null 非許容型) は、<paramref name="method" /> によって表されるメソッドの引数型に割り当てできません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <summary>引数をとらない指定されたコンストラクターの呼び出しを示す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.New" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> プロパティを含む <see cref="T:System.Linq.Expressions.NewExpression" />。</returns>
      <param name="constructor">
        <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> プロパティを等しく設定する <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="constructor" /> が表すコンストラクターには、少なくとも 1 つのパラメーターがあります。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>指定した引数を持つ指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.New" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> プロパティおよび <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> プロパティを含む <see cref="T:System.Linq.Expressions.NewExpression" />。</returns>
      <param name="constructor">
        <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> プロパティを等しく設定する <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <param name="arguments">
        <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> が null です。または<paramref name="arguments" /> の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> パラメーターに、<paramref name="constructor" /> が表すコンストラクターのパラメーターの数と同じ数の要素が含まれていません。または<paramref name="arguments" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="constructor" /> が表すコンストラクターの対応するパラメーターの型に割り当てできません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>指定した引数を持つ指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。コンストラクターが初期化したフィールドにアクセスするメンバーが指定されます。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.New" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />、<see cref="P:System.Linq.Expressions.NewExpression.Arguments" />、および <see cref="P:System.Linq.Expressions.NewExpression.Members" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.NewExpression" />。</returns>
      <param name="constructor">
        <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> プロパティを等しく設定する <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <param name="arguments">
        <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="members">
        <see cref="P:System.Linq.Expressions.NewExpression.Members" /> コレクションの設定に使用する <see cref="T:System.Reflection.MemberInfo" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> が null です。または<paramref name="arguments" /> の要素が null です。または<paramref name="members" /> の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> パラメーターに、<paramref name="constructor" /> が表すコンストラクターのパラメーターの数と同じ数の要素が含まれていません。または<paramref name="arguments" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="constructor" /> が表すコンストラクターの対応するパラメーターの型に割り当てできません。または<paramref name="members" /> パラメーターに、<paramref name="arguments" /> と同じ数の要素がありません。または<paramref name="arguments" /> の要素に、<paramref name="members" /> の対応する要素によって表されるメンバーの型に割り当て不可能な型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティがあります。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <summary>指定した引数を持つ指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。コンストラクターが初期化したフィールドにアクセスするメンバーが配列として指定されます。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.New" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />、<see cref="P:System.Linq.Expressions.NewExpression.Arguments" />、および <see cref="P:System.Linq.Expressions.NewExpression.Members" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.NewExpression" />。</returns>
      <param name="constructor">
        <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> プロパティを等しく設定する <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <param name="arguments">
        <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="members">
        <see cref="P:System.Linq.Expressions.NewExpression.Members" /> コレクションの設定に使用する <see cref="T:System.Reflection.MemberInfo" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> が null です。または<paramref name="arguments" /> の要素が null です。または<paramref name="members" /> の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> パラメーターに、<paramref name="constructor" /> が表すコンストラクターのパラメーターの数と同じ数の要素が含まれていません。または<paramref name="arguments" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="constructor" /> が表すコンストラクターの対応するパラメーターの型に割り当てできません。または<paramref name="members" /> パラメーターに、<paramref name="arguments" /> と同じ数の要素がありません。または<paramref name="arguments" /> の要素に、<paramref name="members" /> の対応する要素によって表されるメンバーの型に割り当て不可能な型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティがあります。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <summary>指定した引数を持つ指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.New" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> プロパティおよび <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> プロパティを含む <see cref="T:System.Linq.Expressions.NewExpression" />。</returns>
      <param name="constructor">
        <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> プロパティを等しく設定する <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <param name="arguments">
        <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> が null です。または<paramref name="arguments" /> の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> の長さが、<paramref name="constructor" /> が表すコンストラクターのパラメーターの数と一致しません。または<paramref name="arguments" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="constructor" /> が表すコンストラクターの対応するパラメーターの型に割り当てできません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
      <summary>指定された型のパラメーターなしのコンストラクターの呼び出しを示す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.New" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定された型のパラメーターなしのコンストラクターを表す <see cref="T:System.Reflection.ConstructorInfo" /> に設定された <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> プロパティを含む <see cref="T:System.Linq.Expressions.NewExpression" />。</returns>
      <param name="type">引数をとらないコンストラクターを持つ <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> が示す型にはパラメーターなしのコンストラクターはありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>指定したランクを持つ配列の作成を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> プロパティを含む <see cref="T:System.Linq.Expressions.NewArrayExpression" />。</returns>
      <param name="type">配列の要素の型を表す <see cref="T:System.Type" />。</param>
      <param name="bounds">
        <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> または <paramref name="bounds" /> が null です。または<paramref name="bounds" /> の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bounds" />の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、整数型を表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <summary>指定したランクを持つ配列の作成を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> プロパティを含む <see cref="T:System.Linq.Expressions.NewArrayExpression" />。</returns>
      <param name="type">配列の要素の型を表す <see cref="T:System.Type" />。</param>
      <param name="bounds">
        <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> または <paramref name="bounds" /> が null です。または<paramref name="bounds" /> の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bounds" />の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、整数型を表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>1 次元配列の作成と要素のリストからの初期化を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> プロパティを含む <see cref="T:System.Linq.Expressions.NewArrayExpression" />。</returns>
      <param name="type">配列の要素の型を表す <see cref="T:System.Type" />。</param>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> または <paramref name="initializers" /> が null です。または<paramref name="initializers" /> の要素が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="initializers" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="type" /> が表す型に割り当て不可能な型を表します。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <summary>1 次元配列の作成と要素のリストからの初期化を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> プロパティを含む <see cref="T:System.Linq.Expressions.NewArrayExpression" />。</returns>
      <param name="type">配列の要素の型を表す <see cref="T:System.Type" />。</param>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> または <paramref name="initializers" /> が null です。または<paramref name="initializers" /> の要素が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="initializers" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="type" /> 型に割り当て不可能な型を表します。</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.NodeType">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> のノード タイプを取得します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ExpressionType" /> 値の 1 つ。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <summary>ビットごとの補数演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">単項 NOT 演算子は、<paramref name="expression" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>ビットごとの補数演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。実装メソッドを指定できます。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> プロパティを含む <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 1 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null であり、単項 NOT 演算子は <paramref name="expression" />.Type に対して定義されていません。または<paramref name="expression" />.Type (または null 許容型の場合はその対応する null 非許容型) は、<paramref name="method" /> によって表されるメソッドの引数型に割り当てできません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>不等比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">非等値演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>不等比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">
        <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> を true に設定する場合は true。<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> を false に設定する場合は false。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、非等値演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
      <summary>1 の補数を表す式を返します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>1 の補数を表す式を返します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">実装するメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>ビットごとの OR 演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">ビットごとの OR 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>ビットごとの OR 演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、ビットごとの OR 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>ビットごとの OR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>ビットごとの OR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>ビットごとの OR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>1 番目のオペランドが false と評価された場合のみ、2 番目のオペランドを評価する条件付き OR 演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">ビットごとの OR 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。または<paramref name="left" />.Type と <paramref name="right" />.Type は同じブール型ではありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>1 番目のオペランドが false と評価された場合のみ、2 番目のオペランドを評価する条件付き OR 演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、ビットごとの OR 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。または<paramref name="method" /> は null で、<paramref name="left" />.Type と <paramref name="right" />.Type は同じブール型ではありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
      <summary>式ツリーのパラメーターまたは変数の識別に使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</summary>
      <returns>指定された名前と型の <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノード。</returns>
      <param name="type">パラメーターまたは変数の型。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <summary>式ツリーのパラメーターまたは変数の識別に使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティおよび <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> プロパティを含む <see cref="T:System.Linq.Expressions.ParameterExpression" />。</returns>
      <param name="type">パラメーターまたは変数の型。</param>
      <param name="name">デバッグまたは印刷の目的でのみ使用されるパラメーターまたは変数の名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>元の式から 1 のデクリメントが続く式の代入を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>結果として得られる式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">演算の適用対象となる <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>元の式から 1 のデクリメントが続く式の代入を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>結果として得られる式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">演算の適用対象となる <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">実装するメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>元の式から 1 のインクリメントが続く式の代入を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>結果として得られる式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">演算の適用対象となる <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>元の式から 1 のインクリメントが続く式の代入を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>結果として得られる式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">演算の適用対象となる <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">実装するメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>累乗の数字の増加を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">指数演算子は <paramref name="left" />.Type and <paramref name="right" />.Type に対して定義されていません。または<paramref name="left" />.Type や <paramref name="right" />.Type は <see cref="T:System.Double" /> ではありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>累乗の数字の増加を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、指数演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。または<paramref name="method" /> は null であり、<paramref name="left" />.Type や <paramref name="right" />.Type は <see cref="T:System.Double" /> ではありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>式の累乗と結果の元の式への代入を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>式の累乗と結果の元の式への代入を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>式の累乗と結果の元の式への代入を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>式の値を 1 つデクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>結果として得られる式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">演算の適用対象となる <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>式の値を 1 つデクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>結果として得られる式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">演算の適用対象となる <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">実装するメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>式の値を 1 つインクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>結果として得られる式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">演算の適用対象となる <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>式の値を 1 つインクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>結果として得られる式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">演算の適用対象となる <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">実装するメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>プロパティ アクセサー メソッドを使用してプロパティへのアクセスを示す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> に等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<paramref name="expression" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ、および <paramref name="propertyAccessor" /> でアクセスされるプロパティを表す <see cref="T:System.Reflection.PropertyInfo" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> プロパティを含む <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。静的プロパティの場合は null を指定できます。</param>
      <param name="propertyAccessor">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> が null です。または<paramref name="propertyAccessor" /> が示すメソッドが static (Visual Basic では Shared) でなく、<paramref name="expression" /> は null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type は <paramref name="propertyAccessor" /> で示されるメソッドの宣言する型には割り当てできません。または<paramref name="propertyAccessor" /> が表すメソッドは、プロパティ アクセサー メソッドではありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <summary>プロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> プロパティを含む <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。静的プロパティの場合は null を指定できます。</param>
      <param name="property">
        <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> プロパティを等しく設定する <see cref="T:System.Reflection.PropertyInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> が null です。または<paramref name="property" /> が示すメソッドが static (Visual Basic では Shared) でなく、<paramref name="expression" /> は null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type を <paramref name="property" /> が示すプロパティの宣言する型に割り当てることができません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>インデックス付きプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="instance">プロパティが属するオブジェクト。プロパティが static (Visual Basic では Shared) の場合は、null にする必要があります。</param>
      <param name="indexer">インデックス付け対象のプロパティを表す <see cref="T:System.Reflection.PropertyInfo" />。</param>
      <param name="arguments">プロパティにインデックスを付けるために使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
      <summary>インデックス付きプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="instance">プロパティが属するオブジェクト。プロパティが static (Visual Basic では Shared) の場合は、null にする必要があります。</param>
      <param name="indexer">インデックス付け対象のプロパティを表す <see cref="T:System.Reflection.PropertyInfo" />。</param>
      <param name="arguments">プロパティのインデックス付けに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <summary>プロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> に等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<paramref name="expression" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ、および<paramref name="propertyName" /> により示されるプロパティを表す <see cref="T:System.Reflection.PropertyInfo" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> プロパティを含む <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> が <paramref name="propertyName" /> という名前のフィールドを含む<see cref="T:System.Linq.Expressions.Expression" />。静的プロパティの場合は null を指定できます。</param>
      <param name="propertyName">アクセスするプロパティの名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> または <paramref name="propertyName" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type またはその基本型では <paramref name="propertyName" /> という名前のフィールドが定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
      <summary>インデックス付きプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="instance">プロパティが属するオブジェクト。プロパティが static (Visual Basic では Shared) の場合は、null にする必要があります。</param>
      <param name="propertyName">インデクサーの名前。</param>
      <param name="arguments">プロパティのインデックス付けに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>プロパティにアクセスする <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
      <param name="expression">プロパティの格納オブジェクト。静的プロパティの場合は null を指定できます。</param>
      <param name="type">プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="propertyName">アクセスするプロパティ。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <summary>プロパティまたはフィールドへのアクセスを示す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> に等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<paramref name="expression" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ、および <paramref name="propertyOrFieldName" /> により示されるプロパティまたはフィールドを表す <see cref="T:System.Reflection.PropertyInfo" /> または <see cref="T:System.Reflection.FieldInfo" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> プロパティを含む <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> が <paramref name="propertyOrFieldName" /> という名前のプロパティまたはフィールドを含む <see cref="T:System.Linq.Expressions.Expression" />。静的メンバーの場合は null を指定できます。</param>
      <param name="propertyOrFieldName">アクセスするプロパティまたはフィールドの名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> または <paramref name="propertyOrFieldName" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type またはその基本型では <paramref name="propertyOrFieldName" /> という名前のプロパティまたはフィールドが定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <summary>型 <see cref="T:System.Linq.Expressions.Expression" /> の定数値を持つ式を示す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Reduce">
      <summary>このノードをより単純な式に縮小します。CanReduce が true を返す場合、これは有効な式を返します。このメソッドは、それ自体も縮小する必要がある別のノードを返す場合があります。</summary>
      <returns>縮小された式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceAndCheck">
      <summary>このノードをより単純な式に縮小します。CanReduce が true を返す場合、これは有効な式を返します。このメソッドは、それ自体も縮小する必要がある別のノードを返す場合があります。</summary>
      <returns>縮小された式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceExtensions">
      <summary>式を既知のノード型 (拡張ノードではない型) に単純化し、それが既に既知の型である場合は単に式を返します。</summary>
      <returns>縮小された式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>参照等価比較を示す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>参照非等価比較を示す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow">
      <summary>例外の再スローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>例外の再スローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
      <summary>指定された型の例外の再スローを示す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>例外の再スローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="type">式の新しい <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
      <summary>return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
      <returns>Return と等しい <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <see cref="T:System.Linq.Expressions.GotoExpression" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> のジャンプ先の <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。ジャンプ時にラベルに渡す値を指定できます。</summary>
      <returns>Continue と等しい <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="value" /> を含む <see cref="T:System.Linq.Expressions.GotoExpression" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> のジャンプ先の <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">ジャンプ時に関連付けられているラベルに渡される値。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>指定された型の return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。ジャンプ時にラベルに渡す値を指定できます。</summary>
      <returns>Continue と等しい <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="type" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="value" /> を含む <see cref="T:System.Linq.Expressions.GotoExpression" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> のジャンプ先の <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">ジャンプ時に関連付けられているラベルに渡される値。</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>指定された型の return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
      <returns>Return と等しい <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="type" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" />、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <see cref="T:System.Linq.Expressions.GotoExpression" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> のジャンプ先の <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>ビットごとの右シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">右シフト演算子は <paramref name="left" />.Type および <paramref name="right" />.Type には定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>ビットごとの右シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と等しい <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null であり、右シフト演算子は <paramref name="left" />.Type と <paramref name="right" />.Type には定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>ビットごとの右シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>ビットごとの右シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>ビットごとの右シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> のインスタンスを作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティが <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> と等しく、<see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> プロパティが指定した値に設定された <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> のインスタンス。</returns>
      <param name="variables">
        <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトのコレクション。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
      <summary>
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> のインスタンスを作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティが <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> と等しく、<see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> プロパティが指定した値に設定された <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> のインスタンス。</returns>
      <param name="variables">
        <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> コレクションの設定に使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックのない算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">減算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックのない算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、減算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックのない減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックのない減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>オーバーフロー チェックのない減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックのある減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックのある減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>オーバーフロー チェックのある減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックのある算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">減算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックのある算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、減算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>既定のケースのある switch ステートメントを表す <see cref="T:System.Linq.Expressions.SwitchExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="switchValue">各ケースに対してテストする値。</param>
      <param name="defaultBody">
        <paramref name="switchValue" /> がどのケースにも一致しない場合の switch の結果。</param>
      <param name="cases">この switch 式に対するケースのセット。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>既定のケースのある switch ステートメントを表す <see cref="T:System.Linq.Expressions.SwitchExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="switchValue">各ケースに対してテストする値。</param>
      <param name="defaultBody">
        <paramref name="switchValue" /> がどのケースにも一致しない場合の switch の結果。</param>
      <param name="comparison">使用する等値比較メソッド。</param>
      <param name="cases">この switch 式に対するケースのセット。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>既定のケースのある switch ステートメントを表す <see cref="T:System.Linq.Expressions.SwitchExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="switchValue">各ケースに対してテストする値。</param>
      <param name="defaultBody">
        <paramref name="switchValue" /> がどのケースにも一致しない場合の switch の結果。</param>
      <param name="comparison">使用する等値比較メソッド。</param>
      <param name="cases">この switch 式に対するケースのセット。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>既定のケースのない switch ステートメントを示す <see cref="T:System.Linq.Expressions.SwitchExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="switchValue">各ケースに対してテストする値。</param>
      <param name="cases">この switch 式に対するケースのセット。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>既定のケースのある switch ステートメントを表す <see cref="T:System.Linq.Expressions.SwitchExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="type">switch の結果の型。</param>
      <param name="switchValue">各ケースに対してテストする値。</param>
      <param name="defaultBody">
        <paramref name="switchValue" /> がどのケースにも一致しない場合の switch の結果。</param>
      <param name="comparison">使用する等値比較メソッド。</param>
      <param name="cases">この switch 式に対するケースのセット。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>既定の case のある switch ステートメントを表す <see cref="T:System.Linq.Expressions.SwitchExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="type">switch の結果の型。</param>
      <param name="switchValue">各ケースに対してテストする値。</param>
      <param name="defaultBody">
        <paramref name="switchValue" /> がどのケースにも一致しない場合の switch の結果。</param>
      <param name="comparison">使用する等値比較メソッド。</param>
      <param name="cases">この switch 式に対するケースのセット。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
        <see cref="T:System.Linq.Expressions.SwitchExpression" /> オブジェクトで使用される <see cref="T:System.Linq.Expressions.SwitchCase" /> オブジェクトを作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.SwitchCase" />。</returns>
      <param name="body">ケースの本体。</param>
      <param name="testValues">ケースのテスト値。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>
        <see cref="T:System.Linq.Expressions.SwitchExpression" /> で使用する <see cref="T:System.Linq.Expressions.SwitchCase" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.SwitchCase" />。</returns>
      <param name="body">ケースの本体。</param>
      <param name="testValues">ケースのテスト値。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
      <summary>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</summary>
      <returns>指定した値に設定された <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> プロパティを含む <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</returns>
      <param name="fileName">
        <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> を等しく設定する <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
      <summary>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</summary>
      <returns>指定した値に設定された <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> プロパティおよび <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> プロパティを含む <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</returns>
      <param name="fileName">
        <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> を等しく設定する <see cref="T:System.String" />。</param>
      <param name="language">
        <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> を等しく設定する <see cref="T:System.Guid" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
      <summary>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</summary>
      <returns>指定した値に設定された <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />、および <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</returns>
      <param name="fileName">
        <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> を等しく設定する <see cref="T:System.String" />。</param>
      <param name="language">
        <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> を等しく設定する <see cref="T:System.Guid" />。</param>
      <param name="languageVendor">
        <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> を等しく設定する <see cref="T:System.Guid" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</summary>
      <returns>指定された値に設定された <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />、および <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> の各プロパティを含む <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</returns>
      <param name="fileName">
        <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> を等しく設定する <see cref="T:System.String" />。</param>
      <param name="language">
        <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> を等しく設定する <see cref="T:System.Guid" />。</param>
      <param name="languageVendor">
        <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> を等しく設定する <see cref="T:System.Guid" />。</param>
      <param name="documentType">
        <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> を等しく設定する <see cref="T:System.Guid" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
      <summary>例外のスローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>例外を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="value">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
      <summary>指定された型の例外のスローを示す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>例外を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="value">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">式の新しい <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ToString">
      <summary>
        <see cref="T:System.Linq.Expressions.Expression" /> のテキスト形式表記を返します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> のテキスト形式表現。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>catch ステートメントを含み、fault ブロックと finally ブロックを含まない try ブロックを示す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
      <param name="body">try ブロックの本体。</param>
      <param name="handlers">try ブロックに関連付けされる catch ステートメントを表す 0 個以上の <see cref="T:System.Linq.Expressions.CatchBlock" /> 式の配列。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>catch ステートメントおよび finally ブロックを含む try ブロックを示す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
      <param name="body">try ブロックの本体。</param>
      <param name="finally">finally ブロックの本体。</param>
      <param name="handlers">try ブロックに関連付けされる catch ステートメントを表す 0 個以上の <see cref="T:System.Linq.Expressions.CatchBlock" /> 式の配列。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>fault ブロックと catch ステートメントを含む try ブロックを示す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
      <param name="body">try ブロックの本体。</param>
      <param name="fault">fault ブロックの本体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>finally ブロックを含み catch ステートメントを含まない try ブロックを示す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
      <param name="body">try ブロックの本体。</param>
      <param name="finally">finally ブロックの本体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
      <summary>特定の型引数を持つ汎用 System.Action デリゲート型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> オブジェクトを作成します。</summary>
      <returns>特定の <paramref name="typeArgs" /> について汎用 System.Action デリゲート型が作成された場合は true。それ以外の場合は false。</returns>
      <param name="typeArgs">System.Action デリゲート型の型引数を指定する Type オブジェクトの配列。</param>
      <param name="actionType">このメソッドから制御が返されるときに、特定の型引数を持つ汎用 System.Action デリゲート型を格納します。<paramref name="typeArgs" /> に一致する汎用 System.Action デリゲートがない場合は、null を格納します。このパラメーターは初期化されていない状態で渡されます。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
      <summary>特定の型引数を持つ汎用 System.Func デリゲート型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> オブジェクトを作成します。最後の型引数で、作成するデリゲートの戻り値の型を指定します。</summary>
      <returns>特定の <paramref name="typeArgs" /> について汎用 System.Func デリゲート型が作成された場合は true。それ以外の場合は false。</returns>
      <param name="typeArgs">System.Func デリゲート型の型引数を指定する Type オブジェクトの配列。</param>
      <param name="funcType">このメソッドから制御が返されるときに、特定の型引数を持つ汎用 System.Func デリゲート型を格納します。<paramref name="typeArgs" /> に一致する汎用 System.Func デリゲートがない場合は、null を格納します。このパラメーターは初期化されていない状態で渡されます。</param>
    </member>
    <member name="P:System.Linq.Expressions.Expression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <summary>変換に失敗した場合に null が提供される明示的な参照またはボックス変換を示す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティおよび <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを含む <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> または <paramref name="type" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
      <summary>ランタイム型の識別を比較する <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティが <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> と等しく、<see cref="T:System.Linq.Expressions.Expression" /> プロパティおよび <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> プロパティが指定した値に設定された <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <summary>
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティが <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> と等しく、<see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> プロパティおよび <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> プロパティが指定した値に設定された <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />。</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> または <paramref name="type" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <summary>単項プラス演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">単項マイナス演算子は、<paramref name="expression" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>単項プラス演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> プロパティを含む <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> プロパティを等しく設定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 1 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null であり、単項プラス演算子は <paramref name="expression" />.Type に対して定義されていません。または<paramref name="expression" />.Type (または null 許容型の場合はその対応する null 非許容型) は、<paramref name="method" /> によって表されるメソッドの引数型に割り当てできません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
      <summary>明示的なボックス解除を示す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
      <param name="expression">ボックス解除する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">式の新しい <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type)">
      <summary>式ツリーのパラメーターまたは変数の識別に使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</summary>
      <returns>指定した名前および型を使用して、<see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</returns>
      <param name="type">パラメーターまたは変数の型。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
      <summary>式ツリーのパラメーターまたは変数の識別に使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</summary>
      <returns>指定された名前と型の <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノード。</returns>
      <param name="type">パラメーターまたは変数の型。</param>
      <param name="name">パラメーターまたは変数の名前。この名前はデバッグまたは印刷の目的でのみ使用されます。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
      <summary>ノードを縮小し、縮小された式の visitor デリゲートを呼び出します。ノードを単純化できない場合、このメソッドは例外をスローします。</summary>
      <returns>走査中の式、またはツリー内で走査中の式と置き換える式。</returns>
      <param name="visitor">
        <see cref="T:System.Func`2" /> のインスタンス。</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression`1">
      <summary>厳密に型指定されたラムダ式を、式ツリー形式のデータ構造体として表します。このクラスは継承できません。</summary>
      <typeparam name="TDelegate">
        <see cref="T:System.Linq.Expressions.Expression`1" /> を表すデリゲートの型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile">
      <summary>式ツリーによって記述されたラムダ式を実行可能コードにコンパイルし、ラムダ式を表すデリゲートを生成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" /> によって記述されたコンパイル済みのラムダ式を表す <paramref name="TDelegate" /> 型のデリゲート。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="body">結果の <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティ。</param>
      <param name="parameters">結果の <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionType">
      <summary>式ツリー ノードのノード型を記述します。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Add">
      <summary>オーバーフロー チェックを行わない、数値オペランドに対する加算演算 (a + b など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssign">
      <summary>オーバーフロー チェックを行わない、数値オペランドに対する加算の複合代入演算 ((a += b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
      <summary>オーバーフロー チェックを行う、数値オペランドに対する加算の複合代入演算 ((a += b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <summary>オーバーフロー チェックを行う、数値オペランドに対する加算演算 ((a + b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.And">
      <summary>論理またはビットごとの AND 演算 (C# の (a &amp; b)、Visual Basic の (a And b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <summary>最初のオペランドが true に評価される場合にのみ 2 番目のオペランドを評価する条件付き AND 演算。これは C# の (a &amp;&amp; b)、Visual Basic の (a AndAlso b) に対応します。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAssign">
      <summary>論理またはビットごとの AND 複合代入演算 (C# の (a &amp;= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <summary>1 次元配列のインデックス演算 (C# の array[index]、Visual Basic の array(index) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <summary>1 次元配列の長さを取得する演算 (array.Length など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Assign">
      <summary>(a = b) などの代入演算。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Block">
      <summary>式のブロック。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Call">
      <summary>obj.sampleMethod() 式などでのメソッド呼び出し。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <summary>null 合体演算 (C# の (a ?? b)、Visual Basic の If(a, b) など) を表すノード。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
      <summary>条件演算 (C# の a &gt; b ? a : b、Visual Basic のIf(a &gt; b, a, b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Constant">
      <summary>定数値。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Convert">
      <summary>キャスト演算または変換演算 (C# の (SampleType)obj、Visual Basic の CType(obj, SampleType) など)。数値変換では、変換された値が変換先の型に対して大きすぎる場合でも、例外はスローされません。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <summary>キャスト演算または変換演算 (C# の (SampleType)obj、Visual Basic の CType(obj, SampleType) など)。数値変換では、変換された値が変換先の型に合わない場合は、例外がスローされます。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DebugInfo">
      <summary>デバッグ情報。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Decrement">
      <summary>単項デクリメント演算 (C# および Visual Basic での (a - 1) など)。a オブジェクト自体は変更されません。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Default">
      <summary>既定値。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Divide">
      <summary>数値オペランドに対する除算演算 ((a / b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DivideAssign">
      <summary>数値オペランドに対する除算の複合代入演算 ((a /= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Dynamic">
      <summary>動的演算。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Equal">
      <summary>等価比較 (C# の (a == b)、Visual Basic の (a = b) など) を表すノード。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <summary>論理またはビットごとの XOR 演算 (C# の (a ^ b)、Visual Basic の (a Xor b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
      <summary>論理またはビットごとの XOR 複合代入演算 (C# の (a ^= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Extension">
      <summary>拡張式。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Goto">
      <summary>"go to" 式 (C# の goto Label、Visual Basic の GoTo Label など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <summary>"より大きい" 比較 ((a &gt; b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <summary>"以上" 比較 ((a &gt;= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Increment">
      <summary>単項インクリメント演算 (C# および Visual Basic での (a + 1) など)。a オブジェクト自体は変更されません。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Index">
      <summary>インデックス演算または引数をとるプロパティにアクセスする演算。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
      <summary>デリゲートまたはラムダ式を呼び出す演算 (sampleDelegate.Invoke() など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsFalse">
      <summary>false の条件値。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsTrue">
      <summary>true の条件値。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Label">
      <summary>ラベル。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
      <summary>ラムダ式 (C# の a =&gt; a + a、Visual Basic の Function(a) a + a など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <summary>ビットごとの左シフト演算 ((a &lt;&lt; b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
      <summary>ビットごとの左シフトの複合代入 ((a &lt;&lt;= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
      <summary>"より小さい" 比較 ((a &lt; b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <summary>"以下" 比較 ((a &lt;= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
      <summary>新しい <see cref="T:System.Collections.IEnumerable" /> オブジェクトを作成し、要素のリストから初期化する演算 (C# の new List&lt;SampleType&gt;(){ a, b, c }、Visual Basic の Dim sampleList = { a, b, c } など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Loop">
      <summary>ループ (for、while など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <summary>フィールドまたはプロパティから読み取る演算 (obj.SampleProperty など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <summary>新しいオブジェクトを作成し、1 つまたは複数のオブジェクト メンバーを初期化する演算 (C# の new Point { X = 1, Y = 2 }、Visual Basic の New Point With {.X = 1, .Y = 2} など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
      <summary>算術剰余演算 (C# の (a % b)、Visual Basic の (a Mod b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
      <summary>算術剰余の複合代入演算 (C# の (a %= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
      <summary>オーバーフロー チェックを行わない、数値オペランドに対する乗算演算 ((a * b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
      <summary>オーバーフロー チェックを行わない、数値オペランドに対する乗算の複合代入演算 ((a *= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
      <summary>オーバーフロー チェックを行う、数値オペランドに対する乗算の複合代入演算 ((a *= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <summary>オーバーフロー チェックを行う、数値オペランドに対する乗算演算 ((a * b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Negate">
      <summary>算術否定演算 ((-a) など)。a オブジェクト自体は変更されません。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <summary>オーバーフロー チェックを行う算術否定演算 ((-a) など)。a オブジェクト自体は変更されません。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.New">
      <summary>新しいオブジェクトを作成するためにコンストラクターを呼び出す演算 (new SampleType() など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <summary>各次元の境界が指定された新しい配列を作成する演算 (C# の new SampleType[dim1, dim2]、Visual Basic の New SampleType(dim1, dim2) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <summary>新しい 1 次元配列を作成し、要素のリストから初期化する演算 (C# の new SampleType[]{a, b, c}、Visual Basic の New SampleType(){a, b, c} など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Not">
      <summary>ビットごとの補数演算または論理否定演算。C# では、(~a) (整数型の場合) および (!a) (ブール値の場合) に相当します。Visual Basic では (Not a) に相当します。a オブジェクト自体は変更されません。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <summary>非等価比較 (C# の (a != b)、Visual Basic の (a &lt;&gt; b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OnesComplement">
      <summary>1 の補数演算 (C# の (~a) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Or">
      <summary>論理またはビットごとの OR 演算 (C# の (a | b)、Visual Basic の (a Or b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrAssign">
      <summary>論理またはビットごとの OR 複合代入 (C# の (a |= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
      <summary>ショートサーキットの条件付き OR 演算 (C# の (a || b)、Visual Basic の (a OrElse b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
      <summary>式のコンテキストで定義されているパラメーターまたは変数への参照。詳細については、<see cref="T:System.Linq.Expressions.ParameterExpression" /> を参照してください。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
      <summary>単項後置デクリメント ((a--) など)。a オブジェクト自体が変更されます。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
      <summary>単項後置インクリメント ((a++) など)。a オブジェクト自体が変更されます。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Power">
      <summary>数値の累乗を求める数値演算 (Visual Basic の (a ^ b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PowerAssign">
      <summary>数値の累乗を求める複合代入演算 (Visual Basic の (a ^= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
      <summary>単項前置デクリメント ((--a) など)。a オブジェクト自体が変更されます。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
      <summary>単項前置インクリメント ((++a) など)。a オブジェクト自体が変更されます。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Quote">
      <summary>型 <see cref="T:System.Linq.Expressions.Expression" /> の定数値を持つ式。<see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> ノードには、それが表す式のコンテキストで定義されたパラメーターへの参照を格納できます。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
      <summary>ビットごとの右シフト演算 ((a &gt;&gt; b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
      <summary>ビットごとの右シフトの複合代入演算 ((a &gt;&gt;= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
      <summary>ランタイム変数のリストです。詳細については、<see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> を参照してください。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
      <summary>オーバーフロー チェックを行わない、数値オペランドに対する減算演算 ((a - b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
      <summary>オーバーフロー チェックを行わない、数値オペランドに対する減算の複合代入演算 ((a -= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
      <summary>オーバーフロー チェックを行う、数値オペランドに対する減算の複合代入演算 ((a -= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <summary>オーバーフロー チェックを行う、数値オペランドに対する算術減算演算 ((a - b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Switch">
      <summary>C# の switch、Visual Basic の Select Case などの剰余演算。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Throw">
      <summary>例外をスローする演算 (throw new Exception() など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Try">
      <summary>try-catch 式。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <summary>変換が失敗した場合に null が提供される明示的な参照変換またはボックス化変換 (C# の (obj as SampleType)、Visual Basic の TryCast(obj, SampleType) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeEqual">
      <summary>正確な型テスト。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <summary>型テスト (C# の obj is SampleType、Visual Basic の TypeOf obj is SampleType など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <summary>単項プラス演算 ((+a) など)。定義済みの単項プラス演算の結果はオペランドの値ですが、ユーザー定義の実装では予期しない結果となる場合があります。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Unbox">
      <summary>MSIL の unbox および unbox.any 命令などのボックス解除値型演算。 </summary>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionVisitor">
      <summary>式ツリーのビジターまたはリライターを表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
      <summary>
        <see cref="T:System.Linq.Expressions.ExpressionVisitor" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
      <summary>このクラス内の、より特化された走査メソッドの 1 つに式のリストをディスパッチします。</summary>
      <returns>いずれかの要素が変更された場合は変更された式リストを返します。それ以外の場合は元の式リストを返します。</returns>
      <param name="nodes">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
      <summary>指定された要素ビジターを使用して、コレクション内のすべてのノードを走査します。</summary>
      <returns>いずれかの要素が変更された場合は変更されたノード リストを返します。それ以外の場合は元のノード リストを返します。</returns>
      <param name="nodes">走査するノード。</param>
      <param name="elementVisitor">単一の要素を走査し、オプションでそれを新しい要素に置き換えるデリゲート。</param>
      <typeparam name="T">ノードの型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
      <summary>このクラス内の、より特化された走査メソッドの 1 つに式をディスパッチします。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
      <summary>式を走査し、結果を元の式の型にキャストします。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="nodes">走査する式。</param>
      <param name="callerName">呼び出し元のメソッドの名前。より正確なエラー メッセージを報告するために使用します。</param>
      <typeparam name="T">式の型。</typeparam>
      <exception cref="T:System.InvalidOperationException">このノードの Visit メソッドから、異なる型が返されました。</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
      <summary>式を走査し、結果を元の式の型にキャストします。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
      <param name="callerName">呼び出し元のメソッドの名前。より正確なエラー メッセージを報告するために使用します。</param>
      <typeparam name="T">式の型。</typeparam>
      <exception cref="T:System.InvalidOperationException">このノードの Visit メソッドから、異なる型が返されました。</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.BlockExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <summary>
        <see cref="T:System.Linq.Expressions.CatchBlock" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.ConstantExpression" /> を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.DefaultExpression" /> を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <summary>
        <see cref="T:System.Linq.Expressions.ElementInit" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
      <summary>拡張式の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.GotoExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.IndexExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.InvocationExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.LabelExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
      <summary>
        <see cref="T:System.Linq.Expressions.LabelTarget" /> を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <summary>
        <see cref="T:System.Linq.Expressions.Expression`1" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
      <typeparam name="T">デリゲートの型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.LoopExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberAssignment" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberBinding" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberListBinding" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.NewExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.NewArrayExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.SwitchExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <summary>
        <see cref="T:System.Linq.Expressions.SwitchCase" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.TryExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpression">
      <summary>無条件ジャンプを表します。return ステートメント、break と continue ステートメントなど、各種のジャンプがこれに該当します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Kind">
      <summary>"go to" 式の種類。情報提供のみを目的とします。</summary>
      <returns>"go to" 式の種類を示す <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.NodeType">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns>この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Target">
      <summary>このノードの移動先のラベル。</summary>
      <returns>このノードの対象ラベルを示す <see cref="T:System.Linq.Expressions.LabelTarget" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.GotoExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="target">結果の <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ。</param>
      <param name="value">結果の <see cref="P:System.Linq.Expressions.GotoExpression.Value" /> プロパティ。</param>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Value">
      <summary>移動先に渡される値。ターゲットの型が System.Void である場合は null。</summary>
      <returns>移動先に渡される値を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクト、または null。</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpressionKind">
      <summary>この <see cref="T:System.Linq.Expressions.GotoExpression" /> が示すジャンプの種類を示します。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Break">
      <summary>break ステートメントを示す <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Continue">
      <summary>continue ステートメントを示す <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Goto">
      <summary>ある場所へのジャンプを示す <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Return">
      <summary>return ステートメントを示す <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="T:System.Linq.Expressions.IndexExpression">
      <summary>プロパティまたは配列のインデックス化を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Arguments">
      <summary>プロパティまたは配列をインデックス化する際に使用される引数を取得します。</summary>
      <returns>プロパティまたは配列をインデックス化する際に使用される引数を格納する読み取り専用コレクション。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Indexer">
      <summary>式がインデックス付きのプロパティを示す場合プロパティの <see cref="T:System.Reflection.PropertyInfo" /> を取得し、そうでない場合は null を返します。</summary>
      <returns>式がインデックス付きプロパティを表している場合は、プロパティの <see cref="T:System.Reflection.PropertyInfo" />。それ以外の場合は null。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.NodeType">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns>この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Object">
      <summary>インデックス化するオブジェクト。</summary>
      <returns>インデックス化するオブジェクトを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.IndexExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="object">結果の <see cref="P:System.Linq.Expressions.IndexExpression.Object" /> プロパティ。</param>
      <param name="arguments">結果の <see cref="P:System.Linq.Expressions.IndexExpression.Arguments" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.InvocationExpression">
      <summary>引数リストの式にデリゲートまたはラムダ式を適用する式を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <summary>デリゲートまたはラムダ式が適用される引数を取得します。</summary>
      <returns>デリゲートが適用される引数を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
      <summary>適用するデリゲートまたはラムダ式を取得します。</summary>
      <returns>適用するデリゲートを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.NodeType">
      <summary>この式のノード型を返します。拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns>式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Type">
      <summary>この <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.InvocationExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="expression">結果の <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> プロパティ。</param>
      <param name="arguments">結果の <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.LabelExpression">
      <summary>
        <see cref="T:System.Linq.Expressions.Expression" /> コンテキストに付けることができるラベルを示します。ジャンプする場合、対応する <see cref="T:System.Linq.Expressions.GotoExpression" /> によって提供される値を取得します。それ以外の場合は、<see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> の値が渡されます。<see cref="T:System.Type" /> が System.Void と等しい場合は、いずれの値も渡されません。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.DefaultValue">
      <summary>ジャンプ ステートメントなどではなく通常の制御フローを経てラベルに到達した場合の <see cref="T:System.Linq.Expressions.LabelExpression" /> の値。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelExpression" /> の値を表す式オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.NodeType">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns>この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Target">
      <summary>このラベルが関連付けられている <see cref="T:System.Linq.Expressions.LabelTarget" />。</summary>
      <returns>このラベルが関連付けられている <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.LabelExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="target">結果の <see cref="P:System.Linq.Expressions.LabelExpression.Target" /> プロパティ。</param>
      <param name="defaultValue">結果の <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.LabelTarget">
      <summary>
        <see cref="T:System.Linq.Expressions.GotoExpression" /> の対象を示すために使用されます。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Name">
      <summary>ラベルの名前を取得します。</summary>
      <returns>ラベルの名前。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelTarget.ToString">
      <summary>現在の <see cref="T:System.Object" /> を表す <see cref="T:System.String" /> を返します。</summary>
      <returns>現在の <see cref="T:System.Object" /> を表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Type">
      <summary>ラベルにジャンプするときに渡される値の型 (または値が渡されない場合は <see cref="T:System.Void" />)。</summary>
      <returns>ラベルにジャンプしたときに渡される値の型を表す <see cref="T:System.Type" /> オブジェクト (値を渡さない場合は <see cref="T:System.Void" />)。</returns>
    </member>
    <member name="T:System.Linq.Expressions.LambdaExpression">
      <summary>ラムダ式を記述します。.NET メソッド本体に似たコードのブロックをキャプチャします。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Body">
      <summary>ラムダ式の本体を取得します。</summary>
      <returns>ラムダ式の本体を表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
      <summary>ラムダ式を表すデリゲートを作成します。</summary>
      <returns>コンパイルされたバージョンのラムダ式を格納する <see cref="T:System.Delegate" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Name">
      <summary>ラムダ式の名前を取得します。</summary>
      <returns>ラムダ式の名前。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.NodeType">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns>この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <summary>ラムダ式のパラメーターを取得します。</summary>
      <returns>ラムダ式のパラメーターを示す <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトの <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.ReturnType">
      <summary>ラムダ式の戻り値の型を取得します。</summary>
      <returns>ラムダ式の型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.TailCall">
      <summary>ラムダ式が tail 呼び出し最適化を使用してコンパイルされるかどうかを示す値を取得します。</summary>
      <returns>ラムダ式が tail 呼び出し最適化を使用してコンパイルされる場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.LambdaExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ListInitExpression">
      <summary>コレクション初期化子を持つコンストラクター呼び出しを表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.CanReduce">
      <summary>式ツリー ノードを縮小できるかどうかを示す値を取得します。</summary>
      <returns>ノードを縮小することができる場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <summary>コレクションの初期化に使用される要素初期化子を取得します。</summary>
      <returns>コレクションの初期化に使用される要素を表す <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトの <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <summary>コレクション型のコンストラクターへの呼び出しを含む式を取得します。</summary>
      <returns>コレクション型のコンストラクターへの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NodeType">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns>この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Reduce">
      <summary>二項式ノードをより単純な式へと縮小します。</summary>
      <returns>縮小された式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.ListInitExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="newExpression">結果の <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> プロパティ。</param>
      <param name="initializers">結果の <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.LoopExpression">
      <summary>無限ループを表します。これは "break" を使用して抜けることができます。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Body">
      <summary>ループの本文である <see cref="T:System.Linq.Expressions.Expression" /> を取得します。</summary>
      <returns>ループの本文である <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.BreakLabel">
      <summary>break ステートメントの対象としてループの本文によって使用される <see cref="T:System.Linq.Expressions.LabelTarget" /> を取得します。</summary>
      <returns>ループの本体で break ステートメントの移動先として使用されている <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
      <summary>continue ステートメントの対象としてループの本文によって使用される <see cref="T:System.Linq.Expressions.LabelTarget" /> を取得します。</summary>
      <returns>ループの本体で continue ステートメントの移動先として使用されている <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.NodeType">
      <summary>この式のノード型を返します。拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns>式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.LoopExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="breakLabel">結果の <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" /> プロパティ。</param>
      <param name="continueLabel">結果の <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" /> プロパティ。</param>
      <param name="body">結果の <see cref="P:System.Linq.Expressions.LoopExpression.Body" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberAssignment">
      <summary>オブジェクトのフィールドまたはプロパティの代入演算を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
      <summary>フィールドまたはプロパティに割り当てる式を取得します。</summary>
      <returns>フィールドまたはプロパティに割り当てる値を示す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="expression">結果の <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberBinding">
      <summary>新しく作成されたオブジェクトのメンバーの初期化に使用されるバインディングを表すクラスが派生する基本クラスを提供します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberBinding" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">表されるバインディングの型を識別する <see cref="T:System.Linq.Expressions.MemberBindingType" />。</param>
      <param name="member">初期化するフィールドまたはプロパティを示す <see cref="T:System.Reflection.MemberInfo" />。</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
      <summary>表されるバインディングの型を取得します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberBindingType" /> 値の 1 つ。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.Member">
      <summary>初期化されるフィールドまたはプロパティを取得します。</summary>
      <returns>初期化されるフィールドまたはプロパティを表す <see cref="T:System.Reflection.MemberInfo" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.ToString">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberBinding" /> のテキスト形式表記を返します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberBinding" /> のテキスト形式表現。</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBindingType">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" /> オブジェクトで使用されるバインディング型を説明します。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <summary>式の値を持つメンバーの初期化を表すバインディング。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <summary>要素のリストから型 <see cref="T:System.Collections.IList" /> または <see cref="T:System.Collections.Generic.ICollection`1" /> の初期化を示すバインディング。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <summary>メンバーのメンバーの初期化を再帰的に表すバインディング。</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberExpression">
      <summary>フィールドまたはプロパティへのアクセスを表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>このノード型の特定の Visit メソッドにデスパッチします。たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <returns>このノードの走査結果です。</returns>
      <param name="visitor">このノードを走査するビジター。</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Expression">
      <summary>フィールドまたはプロパティのコンテナー オブジェクトを取得します。</summary>
      <returns>フィールドまたはプロパティのコンテナー オブジェクトを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Member">
      <summary>アクセスするフィールドまたはプロパティを取得します。</summary>
      <returns>アクセス先のフィールドまたはプロパティを表す <see cref="T:System.Reflection.MemberInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.NodeType">
      <summary>この <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> のノード型を返します。</summary>
      <returns>この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="expression">結果の <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberInitExpression">
      <summary>コンストラクターの呼び出しと、新しいオブジェクトの 1 つまたは複数のメンバーの初期化を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <summary>新しく作成されたオブジェクトのメンバーを初期化する方法を記述するバインディングを取得します。</summary>
      <returns>メンバーをどのように初期化するかを説明する <see cref="T:System.Linq.Expressions.MemberBinding" /> オブジェクトの <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
      <summary>式ツリー ノードを縮小できるかどうかを示す値を取得します。</summary>
      <returns>ノードを縮小することができる場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <summary>コンストラクター呼び出しを表す式を取得します。</summary>
      <returns>コンストラクター呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NodeType">
      <summary>この式のノード型を返します。拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns>式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Reduce">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" /> をより単純な式に縮小します。</summary>
      <returns>縮小された式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.MemberInitExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="newExpression">結果の <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> プロパティ。</param>
      <param name="bindings">結果の <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberListBinding">
      <summary>新しく作成されたオブジェクトのコレクション メンバーの要素の初期化を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <summary>新しく作成されたオブジェクトのコレクション メンバーを初期化する要素初期化子を取得します。</summary>
      <returns>コレクションのメンバーを初期化する <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトの <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="initializers">結果の <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberMemberBinding">
      <summary>新しく作成されたオブジェクトのメンバーの初期化メンバーを表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <summary>メンバーのメンバーを初期化する方法を記述するバインディングを取得します。</summary>
      <returns>メンバーのメンバーをどのように初期化するかを説明する <see cref="T:System.Linq.Expressions.MemberBinding" /> オブジェクトの <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="bindings">結果の <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.MethodCallExpression">
      <summary>静的メソッドまたはインスタンス メソッドへの呼び出しを表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>このノード型の特定の Visit メソッドにデスパッチします。たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <returns>このノードの走査結果です。</returns>
      <param name="visitor">このノードを走査するビジター。</param>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <summary>呼び出されたメソッドの引数を表す式のコレクションを取得します。</summary>
      <returns>呼び出されたメソッドへの引数を示す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
      <summary>呼び出されるメソッドの <see cref="T:System.Reflection.MethodInfo" /> を取得します。</summary>
      <returns>呼び出されたメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.NodeType">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns>この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
      <summary>インスタンス メソッドの呼び出しのインスタンスまたは静的メソッドの呼び出しの null を示す <see cref="T:System.Linq.Expressions.Expression" /> を取得します。</summary>
      <returns>メソッドの受け取りオブジェクトを示す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.MethodCallExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="object">結果の <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティ。</param>
      <param name="arguments">結果の <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.NewArrayExpression">
      <summary>新しい配列の作成と、場合によっては新しい配列の要素の初期化を表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>このノード型の特定の Visit メソッドにデスパッチします。たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <returns>このノードの走査結果です。</returns>
      <param name="visitor">このノードを走査するビジター。</param>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <summary>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティの値が <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> である場合は配列の境界を、<see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティの値が <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> の場合は新しい配列の要素を初期化する値を取得します。</summary>
      <returns>配列の境界または初期化値のどちらかを表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.NewArrayExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="expressions">結果の <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.NewExpression">
      <summary>コンストラクター呼び出しを表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>このノード型の特定の Visit メソッドにデスパッチします。たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <returns>このノードの走査結果です。</returns>
      <param name="visitor">このノードを走査するビジター。</param>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Arguments">
      <summary>コンストラクターへの引数を取得します。</summary>
      <returns>コンストラクターへの引数を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトのコレクション。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Constructor">
      <summary>呼び出されたコンストラクターを取得します。</summary>
      <returns>呼び出されたコンストラクターを表す <see cref="T:System.Reflection.ConstructorInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Members">
      <summary>コンストラクター引数を使用して初期化されたフィールド値の取得が可能なメンバーを取得します。</summary>
      <returns>コンストラクター引数を使用して初期化されたフィールド値の取得が可能なメンバーを表す <see cref="T:System.Reflection.MemberInfo" /> オブジェクトのコレクション。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.NodeType">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns>この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.NewExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="arguments">結果の <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.ParameterExpression">
      <summary>名前付きパラメーター式を表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>このノード型の特定の Visit メソッドにデスパッチします。たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <returns>このノードの走査結果です。</returns>
      <param name="visitor">このノードを走査するビジター。</param>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.IsByRef">
      <summary>この ParameterExpression が ByRef パラメーターとして処理されることを示します。</summary>
      <returns>この ParameterExpression が ByRef パラメーターである場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Name">
      <summary>パラメーターまたは変数の名前を取得します。</summary>
      <returns>パラメーターの名前を格納する <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.NodeType">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns>この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.ParameterExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.RuntimeVariablesExpression">
      <summary>変数に対する実行時の読み取り/書き込みアクセス許可を提供する式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
      <summary>この式のノード型を返します。拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns>式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="variables">結果の <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> プロパティ。</param>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
      <summary>実行時アクセスを提供する変数またはパラメーター。</summary>
      <returns>実行時アクセスが提供されるパラメーターを格納している読み取り専用コレクション。</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchCase">
      <summary>
        <see cref="T:System.Linq.Expressions.SwitchExpression" /> の 1 つのケースを示します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.Body">
      <summary>このケースの本体を取得します。</summary>
      <returns>case ブロックの本体を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを返します。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.TestValues">
      <summary>このケースの値を取得します。<see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> がこれらの値のいずれかと一致した場合、実行にはこのケースが選択されます。</summary>
      <returns>この case ブロックの値の読み取り専用コレクション。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.ToString">
      <summary>現在の <see cref="T:System.Object" /> を表す <see cref="T:System.String" /> を返します。</summary>
      <returns>現在の <see cref="T:System.Object" /> を表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="testValues">結果の <see cref="P:System.Linq.Expressions.SwitchCase.TestValues" /> プロパティ。</param>
      <param name="body">結果の <see cref="P:System.Linq.Expressions.SwitchCase.Body" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.SwitchExpression">
      <summary>
        <see cref="T:System.Linq.Expressions.SwitchCase" /> にコントロールを渡すことによって複数の選択を処理する制御式を示します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Cases">
      <summary>switch の <see cref="T:System.Linq.Expressions.SwitchCase" /> オブジェクトのコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.SwitchCase" /> オブジェクトのコレクション。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Comparison">
      <summary>等価比較メソッドを取得します (存在する場合)。</summary>
      <returns>等値比較メソッドを示す <see cref="T:System.Reflection.MethodInfo" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
      <summary>switch のテストを取得します。</summary>
      <returns>switch のテストを表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.NodeType">
      <summary>この式のノード型を返します。拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns>式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
      <summary>switch のテストを取得します。</summary>
      <returns>switch のテストを表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.SwitchExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="switchValue">結果の <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> プロパティ。</param>
      <param name="cases">結果の <see cref="P:System.Linq.Expressions.SwitchExpression.Cases" /> プロパティ。</param>
      <param name="defaultBody">結果の <see cref="P:System.Linq.Expressions.SwitchExpression.DefaultBody" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.SymbolDocumentInfo">
      <summary>ソース ファイルのデバッグ シンボル情報を生成するのに必要な情報を格納します (特にファイル名や一意の言語識別子)。</summary>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
      <summary>ドキュメントの種類の一意の識別子を返します (存在する場合)。既定値はテキスト ファイルの GUID です。</summary>
      <returns>ドキュメントの種類の一意の識別子。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
      <summary>ソース ファイル名。</summary>
      <returns>ソース ファイル名を表す文字列。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
      <summary>言語の一意の識別子を返します (存在する場合)。</summary>
      <returns>言語の一意の識別子。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
      <summary>言語の販売元の一意の識別子を返します (存在する場合)。</summary>
      <returns>言語の販売元の一意の識別子。</returns>
    </member>
    <member name="T:System.Linq.Expressions.TryExpression">
      <summary>try/catch/finally/fault ブロックを表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Body">
      <summary>try ブロックの本文を示す <see cref="T:System.Linq.Expressions.Expression" /> を取得します。</summary>
      <returns>try ブロックの本文を示す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Fault">
      <summary>fault ブロックを示す <see cref="T:System.Linq.Expressions.Expression" /> を取得します。</summary>
      <returns>fault ブロックを示す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Finally">
      <summary>finally ブロックを示す <see cref="T:System.Linq.Expressions.Expression" /> を取得します。</summary>
      <returns>finally ブロックを示す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Handlers">
      <summary>try ブロックと関連付けられている <see cref="T:System.Linq.Expressions.CatchBlock" /> 式のコレクションを取得します。</summary>
      <returns>try ブロックに関連付けられている <see cref="T:System.Linq.Expressions.CatchBlock" /> 式のコレクション。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.NodeType">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns>この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.TryExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="body">結果の <see cref="P:System.Linq.Expressions.TryExpression.Body" /> プロパティ。</param>
      <param name="handlers">結果の <see cref="P:System.Linq.Expressions.TryExpression.Handlers" /> プロパティ。</param>
      <param name="finally">結果の <see cref="P:System.Linq.Expressions.TryExpression.Finally" /> プロパティ。</param>
      <param name="fault">結果の <see cref="P:System.Linq.Expressions.TryExpression.Fault" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.TypeBinaryExpression">
      <summary>式と型の間の演算を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <summary>型テスト演算の式オペランドを取得します。</summary>
      <returns>型テスト演算の式オペランドを示す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
      <summary>この式のノード型を返します。拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns>式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Type">
      <summary>この <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <summary>型テスト演算の型オペランドを取得します。</summary>
      <returns>型テスト演算の型オペランドを表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="expression">結果の <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.UnaryExpression">
      <summary>単項演算子を持つ式を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.CanReduce">
      <summary>式ツリー ノードを縮小できるかどうかを示す値を取得します。</summary>
      <returns>ノードを単純化することができる場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <summary>式ツリー ノードが、演算子へのリフトされた呼び出しを表すかどうかを示す値を取得します。</summary>
      <returns>リフトされた呼び出しをノードが表している場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <summary>式ツリー ノードが、戻り値の型が null 許容型にリフトされた演算子への、リフトされた呼び出しを表すかどうかを示す値を取得します。</summary>
      <returns>演算子の戻り値の型が null 許容型にリフトされている場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Method">
      <summary>単項演算の実装メソッドを取得します。</summary>
      <returns>実装メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.NodeType">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns>この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
      <summary>単項演算のオペランドを取得します。</summary>
      <returns>単項演算のオペランドを示す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Reduce">
      <summary>式ノードをより単純な式に縮小します。</summary>
      <returns>縮小された式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.UnaryExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="operand">結果の <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティ。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite">
      <summary>動的呼び出しサイトの基本クラス。この型は、動的呼び出しサイトのターゲットのパラメーター型として使用されます。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite.Binder">
      <summary>動的サイトで動的操作のバインディングを行うクラス。</summary>
      <returns>動的操作のバインディングを行う <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite.Create(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>指定したデリゲート型とバインダーを使用して呼び出しサイトを作成します。</summary>
      <returns>新しい呼び出しサイト。</returns>
      <param name="delegateType">呼び出しサイトのデリゲート型。</param>
      <param name="binder">呼び出しサイトのバインダー。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite`1">
      <summary>動的サイト型。</summary>
      <typeparam name="T">デリゲートの型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite`1.Create(System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>この呼び出しサイトでの動的操作の実行時バインディングを行うバインダーによって初期化される、動的呼び出しサイトのインスタンスを作成します。</summary>
      <returns>動的呼び出しサイトの新しいインスタンス。</returns>
      <param name="binder">この呼び出しサイトでの動的操作の実行時バインディングを行うバインダー。</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.CallSite`1.Target">
      <summary>レベル 0 キャッシュ。サイト履歴に基づいて特化されたデリゲートです。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite`1.Update">
      <summary>更新デリゲート。動的サイトでキャッシュ ミスが発生したときに呼び出されます。</summary>
      <returns>更新デリゲート。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteBinder">
      <summary>動的呼び出しサイトで動的操作の実行時バインディングを行うクラス。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.#ctor">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>引数のセットに対して動的な操作のランタイム バインドを実行します。</summary>
      <returns>動的な操作の引数についてテストを実行し、テストに成功した場合は動的な操作を実行する式。後続の動的操作でテストが失敗した場合、Bind が再び呼び出され、新しい引数の型の新しい <see cref="T:System.Linq.Expressions.Expression" /> が生成されます。</returns>
      <param name="args">動的な操作の引数の配列。</param>
      <param name="parameters">バインド プロセスでの呼び出しサイトのパラメーターを表す <see cref="T:System.Linq.Expressions.ParameterExpression" /> インスタンスの配列。</param>
      <param name="returnLabel">動的なバインドの結果を返すために使用する LabelTarget。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.BindDelegate``1(System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>低水準の実行時バインディング サポートを提供します。クラスでこれをオーバーライドし、規則の実装に対する直接のデリゲートを提供できます。これにより、規則をディスクに保存したり、実行時に特別な規則を使用できるようになります。また、異なるキャッシュ ポリシーを提供することもできます。</summary>
      <returns>CallSite のターゲットを置き換える新しいデリゲート。</returns>
      <param name="site">バインドの対象の CallSite。</param>
      <param name="args">バインダーの引数。</param>
      <typeparam name="T">CallSite のターゲットの型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.CacheTarget``1(``0)">
      <summary>既知のターゲットのキャッシュにターゲットを追加します。BindDelegate を呼び出して新しい規則を生成する前に、キャッシュされたターゲットのスキャンが行われます。</summary>
      <param name="target">キャッシュに追加されるターゲット デリゲート。</param>
      <typeparam name="T">追加されるターゲットの型。</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel">
      <summary>バインディングを更新するために使用できるラベルを取得します。式のバインドが無効であることを示します。通常は、動的オブジェクトの "バージョン" が変更された場合に使用します。</summary>
      <returns>バインディングの更新をトリガーするために使用できるラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteHelpers">
      <summary>DLR CallSite のためのヘルパー メソッドを格納するクラス。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame(System.Reflection.MethodBase)">
      <summary>
        <see cref="T:System.Reflection.MethodBase" /> が DLR によって内部的に使用され言語コードのスタックに表示されないかどうかをチェックします。</summary>
      <returns>入力 <see cref="T:System.Reflection.MethodBase" /> が DLR によって内部的に使用され、言語コードのスタックに表示されない場合は true。それ以外の場合は false。</returns>
      <param name="mb">入力<see cref="T:System.Reflection.MethodBase" /></param>
    </member>
    <member name="T:System.Runtime.CompilerServices.DynamicAttribute">
      <summary>メンバーに対する <see cref="T:System.Object" /> の使用が動的にディスパッチされた型として処理されることを示します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor(System.Boolean[])">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="transformFlags">型の構築のプレフィックス走査において、どの <see cref="T:System.Object" /> のオカレンスを動的ディスパッチ型として処理するかを指定します。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DynamicAttribute.TransformFlags">
      <summary>型の構築のプレフィックス走査において、どの <see cref="T:System.Object" /> のオカレンスを動的ディスパッチ型として処理するかを指定します。</summary>
      <returns>動的にディスパッチされた型として処理される <see cref="T:System.Object" /> の出現のリスト。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExecutionScope">
      <summary>動的に生成したメソッドのランタイム状態を表します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateDelegate(System.Int32,System.Object[])">
      <summary>動的に生成したメソッドの実行に使用できるデリゲートを作成します。</summary>
      <returns>動的に生成したメソッドを実行できる <see cref="T:System.Delegate" />。</returns>
      <param name="indexLambda">動的メソッドの関連するラムダ式に関する情報を格納するオブジェクトのインデックス。</param>
      <param name="locals">親コンテキストからのホイストされたローカル変数を格納する配列。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateHoistedLocals">
      <summary>ホイストされたローカル変数を格納する配列を作成します。</summary>
      <returns>ホイストされたローカル変数を格納する配列。</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Globals">
      <summary>動的に生成したメソッドにより参照される、重要な定数とローカルで実行可能な式を表します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.IsolateExpression(System.Linq.Expressions.Expression,System.Object[])">
      <summary>パラメーターをその現在の値と置き換えることにより、外部パラメーター参照の指定した式ツリーを解放します。</summary>
      <returns>外部パラメーター参照を格納しない式ツリー。</returns>
      <param name="expression">外部パラメーター参照の、解放する式ツリー。</param>
      <param name="locals">ホイストされたローカル変数を格納する配列。</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Locals">
      <summary>親コンテキストからのホイストされたローカル変数を表します。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Parent">
      <summary>呼び出し元デリゲートの実行スコープを表します。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IStrongBox">
      <summary>オブジェクトが参照する値にアクセスするためのプロパティを定義します。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IStrongBox.Value">
      <summary>オブジェクトが参照する値を取得または設定します。</summary>
      <returns>オブジェクトが参照する値。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.StrongBox`1">
      <summary>値への参照を保持します。</summary>
      <typeparam name="T">
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> が参照する値の型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor"></member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor(`0)">
      <summary>指定された値を使用して <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> が参照する値。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.StrongBox`1.System#Runtime#CompilerServices#IStrongBox#Value">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> が参照する値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> が参照する値。</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.StrongBox`1.Value">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> が参照する値を示します。</summary>
    </member>
    <member name="T:System.Security.Cryptography.AesManaged">
      <summary>高度暗号化標準 (AES: Advanced Encryption Standard) 対称アルゴリズムのマネージ実装を提供します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.AesManaged" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor">
      <summary>現在のキーおよび IV を使用して、対称復号化オブジェクトを作成します。</summary>
      <returns>対称復号化機能オブジェクト。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>指定したキーおよび IV を使用して、対称復号化オブジェクトを作成します。</summary>
      <returns>対称復号化機能オブジェクト。</returns>
      <param name="key">対称アルゴリズムに使用するシークレット キー。</param>
      <param name="iv">対称アルゴリズムに使用する初期化ベクトル。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">初期化ベクトル <paramref name=" iv " /> のサイズが無効です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor">
      <summary>現在のキーおよび IV を使用して、対称暗号化オブジェクトを作成します。</summary>
      <returns>対称暗号化機能オブジェクト。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>指定したキーおよび IV を使用して、対称暗号化オブジェクトを作成します。</summary>
      <returns>対称暗号化機能オブジェクト。</returns>
      <param name="key">対称アルゴリズムに使用するシークレット キー。</param>
      <param name="iv">対称アルゴリズムに使用する初期化ベクトル。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">初期化ベクトル <paramref name=" iv " /> のサイズが無効です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateIV">
      <summary>対称アルゴリズムで使用するランダムな IV を生成します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateKey">
      <summary>対称アルゴリズムで使用するランダム キーを生成します。</summary>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.IV">
      <summary>対称アルゴリズムで使用する初期化ベクター (IV: Initialization Vector) を取得または設定します。</summary>
      <returns>対称アルゴリズムで使用する IV。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Key">
      <summary>対称アルゴリズムで使用する共有キーを取得または設定します。</summary>
      <returns>対称アルゴリズム用のキー。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.KeySize">
      <summary>対称アルゴリズムで使用する共有キーのサイズ (ビット単位) を取得または設定します。</summary>
      <returns>対称アルゴリズムで使用するキーのサイズ (ビット単位)。</returns>
    </member>
    <member name="T:System.Threading.LockRecursionPolicy">
      <summary>同じスレッドが複数回ロックに入れるかどうかを指定します。</summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.NoRecursion">
      <summary>スレッドが、再帰的にロックに入ろうとすると、例外がスローされます。クラスによっては、この設定が適用されている場合に、特定の再帰が認められることがあります。</summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.SupportsRecursion">
      <summary>スレッドが再帰的にロックに入ることができます。クラスによっては、この機能が制限されていることがあります。 </summary>
    </member>
    <member name="T:System.Threading.ReaderWriterLockSlim">
      <summary>リソースへのアクセス管理に使用するロックを表し、複数のスレッドによる読み取りや排他アクセスでの書き込みを実現します。</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor">
      <summary>
        <see cref="T:System.Threading.ReaderWriterLockSlim" /> クラスの新しいインスタンスを既定のプロパティ値で初期化します。</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor(System.Threading.LockRecursionPolicy)">
      <summary>ロック再帰ポリシーを指定して、<see cref="T:System.Threading.ReaderWriterLockSlim" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="recursionPolicy">ロック再帰ポリシーを指定する列挙値のいずれか。</param>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.CurrentReadCount">
      <summary>読み取りモードでロックに入った一意のスレッドの総数を取得します。</summary>
      <returns>読み取りモードでロックに入った一意のスレッドの数。</returns>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.Dispose">
      <summary>
        <see cref="T:System.Threading.ReaderWriterLockSlim" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterReadLock">
      <summary>読み取りモードでロックに入ることを試みます。</summary>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティが <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> で、現在のスレッドは既に読み取りモードに入っています。または再帰の回数がカウンターの容量をオーバーします。この容量は非常に大きいので、アプリケーションでこの状況が発生することは通常はありません。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock">
      <summary>アップグレード可能モードでロックに入ることを試みます。</summary>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティが <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> で、現在のスレッドは既にいずれかのモードでロックに入っています。または現在のスレッドは既に読み取りモードに入っているため、アップグレード可能モードに入ろうとするとデッドロックの可能性が生じます。または再帰の回数がカウンターの容量をオーバーします。この容量は非常に大きいので、アプリケーションでこの状況が発生することは通常はありません。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterWriteLock">
      <summary>書き込みモードでロックに入ることを試みます。</summary>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティが <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> で、現在のスレッドは既にいずれかのモードでロックに入っています。または現在のスレッドは読み取りモードに入っているため、書き込みモードでロックに入ろうとするとデッドロックの可能性が生じます。または再帰の回数がカウンターの容量をオーバーします。この容量は非常に大きいので、アプリケーションでこの状況が発生することは通常はありません。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitReadLock">
      <summary>読み取りモードの再帰カウントを減らし、結果が 0 (ゼロ) の場合には読み取りモードを終了します。</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">現在のスレッドは読み取りモードでロックに入っていません。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock">
      <summary>アップグレード可能モードの再帰カウントを減らし、結果が 0 (ゼロ) の場合にはアップグレード可能モードを終了します。</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">現在のスレッドはアップグレード可能モードでロックに入っていません。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitWriteLock">
      <summary>書き込みモードの再帰カウントを減らし、結果が 0 (ゼロ) の場合には書き込みモードを終了します。</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">現在のスレッドは書き込みモードでロックに入っていません。</exception>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsReadLockHeld">
      <summary>現在のスレッドが読み取りモードでロックに入ったかどうかを示す値を取得します。</summary>
      <returns>現在のスレッドが読み取りモードに入った場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld">
      <summary>現在のスレッドがアップグレード可能モードでロックに入ったかどうかを示す値を取得します。</summary>
      <returns>現在のスレッドがアップグレード可能モードに入った場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld">
      <summary>現在のスレッドが書き込みモードでロックに入ったかどうかを示す値を取得します。</summary>
      <returns>現在のスレッドが書き込みモードに入った場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy">
      <summary>現在の <see cref="T:System.Threading.ReaderWriterLockSlim" /> オブジェクトの再帰ポリシーを示す値を取得します。</summary>
      <returns>ロック再帰ポリシーを指定する列挙値のいずれか。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveReadCount">
      <summary>現在のスレッドが読み取りモードでロックに入った回数を、再帰を示す値として取得します。</summary>
      <returns>0 (ゼロ) の場合、現在のスレッドは読み取りモードに入っていない。1 の場合、現在のスレッドは読み取りモードに入ったが、再帰はしていない。n の場合、現在のスレッドは再帰的に n - 1 回ロックに入った。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount">
      <summary>現在のスレッドがアップグレード可能モードでロックに入った回数を、再帰を示す値として取得します。</summary>
      <returns>0 (ゼロ) の場合、現在のスレッドはアップグレード可能モードに入っていない。1 の場合、現在のスレッドはアップグレード可能モードに入ったが、再帰はしていない。n の場合、現在のスレッドは再帰的に n - 1 回アップグレード可能モードに入った。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveWriteCount">
      <summary>現在のスレッドが書き込みモードでロックに入った回数を、再帰を示す値として取得します。</summary>
      <returns>0 (ゼロ) の場合、現在のスレッドは書き込みモードに入っていない。1 の場合、現在のスレッドは書き込みモードに入ったが、再帰はしていない。n の場合、現在のスレッドは再帰的に n - 1 回書き込みモードに入った。</returns>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)">
      <summary>オプションのタイムアウトを表す整数を指定して、読み取りモードでロックに入ることを試みます。</summary>
      <returns>呼び出し元のスレッドが読み取りモードに入った場合は true。それ以外の場合は false。</returns>
      <param name="millisecondsTimeout">待機するミリ秒数。無制限に待機する場合は -1 (<see cref="F:System.Threading.Timeout.Infinite" />)。</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティが <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> で、現在のスレッドは既にロックに入っています。または再帰の回数がカウンターの容量をオーバーします。この容量は非常に大きいので、アプリケーションでこの状況が発生することは通常はありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> の値が負ですが、指定できる唯一の負の値である <see cref="F:System.Threading.Timeout.Infinite" /> (-1) と等しくありません。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.TimeSpan)">
      <summary>オプションのタイムアウトを指定して、読み取りモードでロックに入ることを試みます。</summary>
      <returns>呼び出し元のスレッドが読み取りモードに入った場合は true。それ以外の場合は false。</returns>
      <param name="timeout">待機する間隔。無制限に待機する場合は -1 ミリ秒。</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティが <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> で、現在のスレッドは既にロックに入っています。または再帰の回数がカウンターの容量をオーバーします。この容量は非常に大きいので、アプリケーションでこの状況が発生することは通常はありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> の値が負ですが、指定できる唯一の負の値である -1 ミリ秒と等しくありません。または<paramref name="timeout" /> の値が <see cref="F:System.Int32.MaxValue" /> ミリ秒を超えています。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)">
      <summary>オプションのタイムアウトを指定して、アップグレード可能モードでロックに入ることを試みます。</summary>
      <returns>呼び出し元のスレッドがアップグレード可能モードに入った場合は true。それ以外の場合は false。</returns>
      <param name="millisecondsTimeout">待機するミリ秒数。無制限に待機する場合は -1 (<see cref="F:System.Threading.Timeout.Infinite" />)。</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティが <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> で、現在のスレッドは既にロックに入っています。または現在のスレッドは最初に読み取りモードでロックに入ったため、アップグレード可能モードに入ろうとするとデッドロックの可能性が生じます。または再帰の回数がカウンターの容量をオーバーします。この容量は非常に大きいので、アプリケーションでこの状況が発生することは通常はありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> の値が負ですが、指定できる唯一の負の値である <see cref="F:System.Threading.Timeout.Infinite" /> (-1) と等しくありません。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.TimeSpan)">
      <summary>オプションのタイムアウトを指定して、アップグレード可能モードでロックに入ることを試みます。</summary>
      <returns>呼び出し元のスレッドがアップグレード可能モードに入った場合は true。それ以外の場合は false。</returns>
      <param name="timeout">待機する間隔。無制限に待機する場合は -1 ミリ秒。</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティが <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> で、現在のスレッドは既にロックに入っています。または現在のスレッドは最初に読み取りモードでロックに入ったため、アップグレード可能モードに入ろうとするとデッドロックの可能性が生じます。または再帰の回数がカウンターの容量をオーバーします。この容量は非常に大きいので、アプリケーションでこの状況が発生することは通常はありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> の値が負ですが、指定できる唯一の負の値である -1 ミリ秒と等しくありません。または<paramref name="timeout" /> の値が <see cref="F:System.Int32.MaxValue" /> ミリ秒を超えています。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)">
      <summary>オプションのタイムアウトを指定して、書き込みモードでロックに入ることを試みます。</summary>
      <returns>呼び出し元のスレッドが書き込みモードに入った場合は true。それ以外の場合は false。</returns>
      <param name="millisecondsTimeout">待機するミリ秒数。無制限に待機する場合は -1 (<see cref="F:System.Threading.Timeout.Infinite" />)。</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティが <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> で、現在のスレッドは既にロックに入っています。または現在のスレッドは最初に読み取りモードでロックに入ったため、書き込みモードに入ろうとするとデッドロックの可能性が生じます。または再帰の回数がカウンターの容量をオーバーします。この容量は非常に大きいので、アプリケーションでこの状況が発生することは通常はありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> の値が負ですが、指定できる唯一の負の値である <see cref="F:System.Threading.Timeout.Infinite" /> (-1) と等しくありません。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.TimeSpan)">
      <summary>オプションのタイムアウトを指定して、書き込みモードでロックに入ることを試みます。</summary>
      <returns>呼び出し元のスレッドが書き込みモードに入った場合は true。それ以外の場合は false。</returns>
      <param name="timeout">待機する間隔。無制限に待機する場合は -1 ミリ秒。</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティが <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> で、現在のスレッドは既にロックに入っています。または現在のスレッドは最初に読み取りモードでロックに入ったため、書き込みモードに入ろうとするとデッドロックの可能性が生じます。または再帰の回数がカウンターの容量をオーバーします。この容量は非常に大きいので、アプリケーションでこの状況が発生することは通常はありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> の値が負ですが、指定できる唯一の負の値である -1 ミリ秒と等しくありません。または<paramref name="timeout" /> の値が <see cref="F:System.Int32.MaxValue" /> ミリ秒を超えています。 </exception>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount">
      <summary>読み取りモードでロックに入るのを待機しているスレッドの総数を取得します。</summary>
      <returns>読み取りモードに入るのを待機しているスレッドの総数。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount">
      <summary>アップグレード可能モードでロックに入るのを待機しているスレッドの総数を取得します。</summary>
      <returns>アップグレード可能モードに入るのを待機しているスレッドの総数。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount">
      <summary>書き込みモードでロックに入るのを待機しているスレッドの総数を取得します。</summary>
      <returns>書き込みモードに入るのを待機しているスレッドの総数。</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskExtensions">
      <summary>特定の種類の <see cref="T:System.Threading.Tasks.Task" /> インスタンスを操作する静的 (Visual Basic の場合は共有) メソッドのセットを提供します。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
      <summary>Task&lt;Task&lt;T&gt;&gt; (C#) または Task (Of Task(Of T)) (Visual Basic) の非同期の操作を表すプロキシ <see cref="T:System.Threading.Tasks.Task" /> を作成します。</summary>
      <returns>指定された Task&lt;Task&lt;T&gt;&gt; (C#) または Task (Of Task(Of T)) (Visual Basic) の非同期の操作を表す <see cref="System.Threading.Tasks.Task`1" />。</returns>
      <param name="task">ラップを解除する &lt;Task&lt;T&gt;&gt; (C#) または Task (Of Task) (Visual Basic)。</param>
      <typeparam name="TResult">タスクの結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> 引数が null の場合にスローされる例外。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
      <summary>
        <see cref="T:System.Threading.Tasks.Task{System.Threading.Tasks.Task}" /> の非同期の操作を表すプロキシ <see cref="T:System.Threading.Tasks.Task" /> を作成します。</summary>
      <returns>指定された System.Threading.Tasks.Task(Of Task) の非同期の操作を表すタスク。</returns>
      <param name="task">ラップを解除する Task&lt;Task&gt; (C#) または Task (Of Task) (Visual Basic)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> 引数が null の場合にスローされる例外。</exception>
    </member>
  </members>
</doc>