<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Core</name>
  </assembly>
  <members>
    <member name="T:System.Action`10">
      <summary>封裝具有 10 個參數的方法，並且不會傳回值。</summary>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <param name="arg4">此委派封裝之方法的第 4 個參數。</param>
      <param name="arg5">此委派封裝之方法的第 5 個參數。</param>
      <param name="arg6">此委派封裝之方法的第 6 個參數。</param>
      <param name="arg7">此委派封裝之方法的第 7 個參數。</param>
      <param name="arg8">此委派封裝之方法的第 8 個參數。</param>
      <param name="arg9">此委派封裝之方法的第 9 個參數。</param>
      <param name="arg10">此委派封裝之方法的第 10 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="T4">此委派封裝之方法之第 4 個參數的型別。</typeparam>
      <typeparam name="T5">此委派封裝之方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">此委派封裝之方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">此委派封裝之方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">此委派封裝之方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">此委派封裝之方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">此委派封裝之方法之第 10 個參數的型別。</typeparam>
    </member>
    <member name="T:System.Action`11">
      <summary>封裝具有 11 個參數的方法，並且不會傳回值。</summary>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <param name="arg4">此委派封裝之方法的第 4 個參數。</param>
      <param name="arg5">此委派封裝之方法的第 5 個參數。</param>
      <param name="arg6">此委派封裝之方法的第 6 個參數。</param>
      <param name="arg7">此委派封裝之方法的第 7 個參數。</param>
      <param name="arg8">此委派封裝之方法的第 8 個參數。</param>
      <param name="arg9">此委派封裝之方法的第 9 個參數。</param>
      <param name="arg10">此委派封裝之方法的第 10 個參數。</param>
      <param name="arg11">此委派封裝之方法的第 11 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="T4">此委派封裝之方法之第 4 個參數的型別。</typeparam>
      <typeparam name="T5">此委派封裝之方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">此委派封裝之方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">此委派封裝之方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">此委派封裝之方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">此委派封裝之方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">此委派封裝之方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">此委派封裝之方法之第 11 個參數的型別。</typeparam>
    </member>
    <member name="T:System.Action`12">
      <summary>封裝具有 12 個參數的方法，並且不會傳回值。</summary>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <param name="arg4">此委派封裝之方法的第 4 個參數。</param>
      <param name="arg5">此委派封裝之方法的第 5 個參數。</param>
      <param name="arg6">此委派封裝之方法的第 6 個參數。</param>
      <param name="arg7">此委派封裝之方法的第 7 個參數。</param>
      <param name="arg8">此委派封裝之方法的第 8 個參數。</param>
      <param name="arg9">此委派封裝之方法的第 9 個參數。</param>
      <param name="arg10">此委派封裝之方法的第 10 個參數。</param>
      <param name="arg11">此委派封裝之方法的第 11 個參數。</param>
      <param name="arg12">此委派封裝之方法的第 12 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="T4">此委派封裝之方法之第 4 個參數的型別。</typeparam>
      <typeparam name="T5">此委派封裝之方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">此委派封裝之方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">此委派封裝之方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">此委派封裝之方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">此委派封裝之方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">此委派封裝之方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">此委派封裝之方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">此委派封裝之方法之第 12 個參數的型別。</typeparam>
    </member>
    <member name="T:System.Action`13">
      <summary>封裝具有 13 個參數的方法，並且不會傳回值。</summary>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <param name="arg4">此委派封裝之方法的第 4 個參數。</param>
      <param name="arg5">此委派封裝之方法的第 5 個參數。</param>
      <param name="arg6">此委派封裝之方法的第 6 個參數。</param>
      <param name="arg7">此委派封裝之方法的第 7 個參數。</param>
      <param name="arg8">此委派封裝之方法的第 8 個參數。</param>
      <param name="arg9">此委派封裝之方法的第 9 個參數。</param>
      <param name="arg10">此委派封裝之方法的第 10 個參數。</param>
      <param name="arg11">此委派封裝之方法的第 11 個參數。</param>
      <param name="arg12">此委派封裝之方法的第 12 個參數。</param>
      <param name="arg13">此委派封裝之方法的第 13 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="T4">此委派封裝之方法之第 4 個參數的型別。</typeparam>
      <typeparam name="T5">此委派封裝之方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">此委派封裝之方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">此委派封裝之方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">此委派封裝之方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">此委派封裝之方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">此委派封裝之方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">此委派封裝之方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">此委派封裝之方法之第 12 個參數的型別。</typeparam>
      <typeparam name="T13">此委派封裝之方法之第 13 個參數的型別。</typeparam>
    </member>
    <member name="T:System.Action`14">
      <summary>封裝具有 14 個參數的方法，並且不會傳回值。</summary>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <param name="arg4">此委派封裝之方法的第 4 個參數。</param>
      <param name="arg5">此委派封裝之方法的第 5 個參數。</param>
      <param name="arg6">此委派封裝之方法的第 6 個參數。</param>
      <param name="arg7">此委派封裝之方法的第 7 個參數。</param>
      <param name="arg8">此委派封裝之方法的第 8 個參數。</param>
      <param name="arg9">此委派封裝之方法的第 9 個參數。</param>
      <param name="arg10">此委派封裝之方法的第 10 個參數。</param>
      <param name="arg11">此委派封裝之方法的第 11 個參數。</param>
      <param name="arg12">此委派封裝之方法的第 12 個參數。</param>
      <param name="arg13">此委派封裝之方法的第 13 個參數。</param>
      <param name="arg14">此委派封裝之方法的第 14 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="T4">此委派封裝之方法之第 4 個參數的型別。</typeparam>
      <typeparam name="T5">此委派封裝之方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">此委派封裝之方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">此委派封裝之方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">此委派封裝之方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">此委派封裝之方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">此委派封裝之方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">此委派封裝之方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">此委派封裝之方法之第 12 個參數的型別。</typeparam>
      <typeparam name="T13">此委派封裝之方法之第 13 個參數的型別。</typeparam>
      <typeparam name="T14">此委派封裝之方法之第 14 個參數的型別。</typeparam>
    </member>
    <member name="T:System.Action`15">
      <summary>封裝具有 15 個參數的方法，並且不會傳回值。</summary>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <param name="arg4">此委派封裝之方法的第 4 個參數。</param>
      <param name="arg5">此委派封裝之方法的第 5 個參數。</param>
      <param name="arg6">此委派封裝之方法的第 6 個參數。</param>
      <param name="arg7">此委派封裝之方法的第 7 個參數。</param>
      <param name="arg8">此委派封裝之方法的第 8 個參數。</param>
      <param name="arg9">此委派封裝之方法的第 9 個參數。</param>
      <param name="arg10">此委派封裝之方法的第 10 個參數。</param>
      <param name="arg11">此委派封裝之方法的第 11 個參數。</param>
      <param name="arg12">此委派封裝之方法的第 12 個參數。</param>
      <param name="arg13">此委派封裝之方法的第 13 個參數。</param>
      <param name="arg14">此委派封裝之方法的第 14 個參數。</param>
      <param name="arg15">此委派封裝之方法的第 15 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="T4">此委派封裝之方法之第 4 個參數的型別。</typeparam>
      <typeparam name="T5">此委派封裝之方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">此委派封裝之方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">此委派封裝之方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">此委派封裝之方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">此委派封裝之方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">此委派封裝之方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">此委派封裝之方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">此委派封裝之方法之第 12 個參數的型別。</typeparam>
      <typeparam name="T13">此委派封裝之方法之第 13 個參數的型別。</typeparam>
      <typeparam name="T14">此委派封裝之方法之第 14 個參數的型別。</typeparam>
      <typeparam name="T15">此委派封裝之方法之第 15 個參數的型別。</typeparam>
    </member>
    <member name="T:System.Action`16">
      <summary>封裝具有 16 個參數的方法，並且不會傳回值。</summary>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <param name="arg4">此委派封裝之方法的第 4 個參數。</param>
      <param name="arg5">此委派封裝之方法的第 5 個參數。</param>
      <param name="arg6">此委派封裝之方法的第 6 個參數。</param>
      <param name="arg7">此委派封裝之方法的第 7 個參數。</param>
      <param name="arg8">此委派封裝之方法的第 8 個參數。</param>
      <param name="arg9">此委派封裝之方法的第 9 個參數。</param>
      <param name="arg10">此委派封裝之方法的第 10 個參數。</param>
      <param name="arg11">此委派封裝之方法的第 11 個參數。</param>
      <param name="arg12">此委派封裝之方法的第 12 個參數。</param>
      <param name="arg13">此委派封裝之方法的第 13 個參數。</param>
      <param name="arg14">此委派封裝之方法的第 14 個參數。</param>
      <param name="arg15">此委派封裝之方法的第 15 個參數。</param>
      <param name="arg16">此委派封裝之方法的第 16 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="T4">此委派封裝之方法之第 4 個參數的型別。</typeparam>
      <typeparam name="T5">此委派封裝之方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">此委派封裝之方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">此委派封裝之方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">此委派封裝之方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">此委派封裝之方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">此委派封裝之方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">此委派封裝之方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">此委派封裝之方法之第 12 個參數的型別。</typeparam>
      <typeparam name="T13">此委派封裝之方法之第 13 個參數的型別。</typeparam>
      <typeparam name="T14">此委派封裝之方法之第 14 個參數的型別。</typeparam>
      <typeparam name="T15">此委派封裝之方法之第 15 個參數的型別。</typeparam>
      <typeparam name="T16">此委派封裝之方法之第 16 個參數的型別。</typeparam>
    </member>
    <member name="T:System.Action`9">
      <summary>封裝具有 9 個參數的方法，並且不會傳回值。</summary>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <param name="arg4">此委派封裝之方法的第 4 個參數。</param>
      <param name="arg5">此委派封裝之方法的第 5 個參數。</param>
      <param name="arg6">此委派封裝之方法的第 6 個參數。</param>
      <param name="arg7">此委派封裝之方法的第 7 個參數。</param>
      <param name="arg8">此委派封裝之方法的第 8 個參數。</param>
      <param name="arg9">此委派封裝之方法的第 9 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="T4">此委派封裝之方法之第 4 個參數的型別。</typeparam>
      <typeparam name="T5">此委派封裝之方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">此委派封裝之方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">此委派封裝之方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">此委派封裝之方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">此委派封裝之方法之第 9 個參數的型別。</typeparam>
    </member>
    <member name="T:System.Func`10">
      <summary>封裝具有 9 個參數的方法，並傳回由 <paramref name="TResult" /> 參數指定之型別的值。</summary>
      <returns>此委派封裝之方法的傳回值。</returns>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <param name="arg4">此委派封裝之方法的第 4 個參數。</param>
      <param name="arg5">此委派封裝之方法的第 5 個參數。</param>
      <param name="arg6">此委派封裝之方法的第 6 個參數。</param>
      <param name="arg7">此委派封裝之方法的第 7 個參數。</param>
      <param name="arg8">此委派封裝之方法的第 8 個參數。</param>
      <param name="arg9">此委派封裝之方法的第 9 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="T4">此委派封裝之方法之第 4 個參數的型別。</typeparam>
      <typeparam name="T5">此委派封裝之方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">此委派封裝之方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">此委派封裝之方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">此委派封裝之方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">此委派封裝之方法之第 9 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`11">
      <summary>封裝具有 10 個參數的方法，並傳回由 <paramref name="TResult" /> 參數指定之型別的值。</summary>
      <returns>此委派封裝之方法的傳回值。</returns>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <param name="arg4">此委派封裝之方法的第 4 個參數。</param>
      <param name="arg5">此委派封裝之方法的第 5 個參數。</param>
      <param name="arg6">此委派封裝之方法的第 6 個參數。</param>
      <param name="arg7">此委派封裝之方法的第 7 個參數。</param>
      <param name="arg8">此委派封裝之方法的第 8 個參數。</param>
      <param name="arg9">此委派封裝之方法的第 9 個參數。</param>
      <param name="arg10">此委派封裝之方法的第 10 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="T4">此委派封裝之方法之第 4 個參數的型別。</typeparam>
      <typeparam name="T5">此委派封裝之方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">此委派封裝之方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">此委派封裝之方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">此委派封裝之方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">此委派封裝之方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">此委派封裝之方法之第 10 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`12">
      <summary>封裝具有 11 個參數的方法，並傳回由 <paramref name="TResult" /> 參數指定之型別的值。</summary>
      <returns>此委派封裝之方法的傳回值。</returns>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <param name="arg4">此委派封裝之方法的第 4 個參數。</param>
      <param name="arg5">此委派封裝之方法的第 5 個參數。</param>
      <param name="arg6">此委派封裝之方法的第 6 個參數。</param>
      <param name="arg7">此委派封裝之方法的第 7 個參數。</param>
      <param name="arg8">此委派封裝之方法的第 8 個參數。</param>
      <param name="arg9">此委派封裝之方法的第 9 個參數。</param>
      <param name="arg10">此委派封裝之方法的第 10 個參數。</param>
      <param name="arg11">此委派封裝之方法的第 11 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="T4">此委派封裝之方法之第 4 個參數的型別。</typeparam>
      <typeparam name="T5">此委派封裝之方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">此委派封裝之方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">此委派封裝之方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">此委派封裝之方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">此委派封裝之方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">此委派封裝之方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">此委派封裝之方法之第 11 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`13">
      <summary>封裝具有 12 個參數的方法，並傳回由 <paramref name="TResult" /> 參數指定之型別的值。</summary>
      <returns>此委派封裝之方法的傳回值。</returns>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <param name="arg4">此委派封裝之方法的第 4 個參數。</param>
      <param name="arg5">此委派封裝之方法的第 5 個參數。</param>
      <param name="arg6">此委派封裝之方法的第 6 個參數。</param>
      <param name="arg7">此委派封裝之方法的第 7 個參數。</param>
      <param name="arg8">此委派封裝之方法的第 8 個參數。</param>
      <param name="arg9">此委派封裝之方法的第 9 個參數。</param>
      <param name="arg10">此委派封裝之方法的第 10 個參數。</param>
      <param name="arg11">此委派封裝之方法的第 11 個參數。</param>
      <param name="arg12">此委派封裝之方法的第 12 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="T4">此委派封裝之方法之第 4 個參數的型別。</typeparam>
      <typeparam name="T5">此委派封裝之方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">此委派封裝之方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">此委派封裝之方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">此委派封裝之方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">此委派封裝之方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">此委派封裝之方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">此委派封裝之方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">此委派封裝之方法之第 12 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`14">
      <summary>封裝具有 13 個參數的方法，並傳回由 <paramref name="TResult" /> 參數指定之型別的值。</summary>
      <returns>此委派封裝之方法的傳回值。</returns>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <param name="arg4">此委派封裝之方法的第 4 個參數。</param>
      <param name="arg5">此委派封裝之方法的第 5 個參數。</param>
      <param name="arg6">此委派封裝之方法的第 6 個參數。</param>
      <param name="arg7">此委派封裝之方法的第 7 個參數。</param>
      <param name="arg8">此委派封裝之方法的第 8 個參數。</param>
      <param name="arg9">此委派封裝之方法的第 9 個參數。</param>
      <param name="arg10">此委派封裝之方法的第 10 個參數。</param>
      <param name="arg11">此委派封裝之方法的第 11 個參數。</param>
      <param name="arg12">此委派封裝之方法的第 12 個參數。</param>
      <param name="arg13">此委派封裝之方法的第 13 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="T4">此委派封裝之方法之第 4 個參數的型別。</typeparam>
      <typeparam name="T5">此委派封裝之方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">此委派封裝之方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">此委派封裝之方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">此委派封裝之方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">此委派封裝之方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">此委派封裝之方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">此委派封裝之方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">此委派封裝之方法之第 12 個參數的型別。</typeparam>
      <typeparam name="T13">此委派封裝之方法之第 13 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`15">
      <summary>封裝具有 14 個參數的方法，並傳回由 <paramref name="TResult" /> 參數指定之型別的值。</summary>
      <returns>此委派封裝之方法的傳回值。</returns>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <param name="arg4">此委派封裝之方法的第 4 個參數。</param>
      <param name="arg5">此委派封裝之方法的第 5 個參數。</param>
      <param name="arg6">此委派封裝之方法的第 6 個參數。</param>
      <param name="arg7">此委派封裝之方法的第 7 個參數。</param>
      <param name="arg8">此委派封裝之方法的第 8 個參數。</param>
      <param name="arg9">此委派封裝之方法的第 9 個參數。</param>
      <param name="arg10">此委派封裝之方法的第 10 個參數。</param>
      <param name="arg11">此委派封裝之方法的第 11 個參數。</param>
      <param name="arg12">此委派封裝之方法的第 12 個參數。</param>
      <param name="arg13">此委派封裝之方法的第 13 個參數。</param>
      <param name="arg14">此委派封裝之方法的第 14 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="T4">此委派封裝之方法之第 4 個參數的型別。</typeparam>
      <typeparam name="T5">此委派封裝之方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">此委派封裝之方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">此委派封裝之方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">此委派封裝之方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">此委派封裝之方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">此委派封裝之方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">此委派封裝之方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">此委派封裝之方法之第 12 個參數的型別。</typeparam>
      <typeparam name="T13">此委派封裝之方法之第 13 個參數的型別。</typeparam>
      <typeparam name="T14">此委派封裝之方法之第 14 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`16">
      <summary>封裝具有 15 個參數的方法，並傳回由 <paramref name="TResult" /> 參數指定之型別的值。</summary>
      <returns>此委派封裝之方法的傳回值。</returns>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <param name="arg4">此委派封裝之方法的第 4 個參數。</param>
      <param name="arg5">此委派封裝之方法的第 5 個參數。</param>
      <param name="arg6">此委派封裝之方法的第 6 個參數。</param>
      <param name="arg7">此委派封裝之方法的第 7 個參數。</param>
      <param name="arg8">此委派封裝之方法的第 8 個參數。</param>
      <param name="arg9">此委派封裝之方法的第 9 個參數。</param>
      <param name="arg10">此委派封裝之方法的第 10 個參數。</param>
      <param name="arg11">此委派封裝之方法的第 11 個參數。</param>
      <param name="arg12">此委派封裝之方法的第 12 個參數。</param>
      <param name="arg13">此委派封裝之方法的第 13 個參數。</param>
      <param name="arg14">此委派封裝之方法的第 14 個參數。</param>
      <param name="arg15">此委派封裝之方法的第 15 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="T4">此委派封裝之方法之第 4 個參數的型別。</typeparam>
      <typeparam name="T5">此委派封裝之方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">此委派封裝之方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">此委派封裝之方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">此委派封裝之方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">此委派封裝之方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">此委派封裝之方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">此委派封裝之方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">此委派封裝之方法之第 12 個參數的型別。</typeparam>
      <typeparam name="T13">此委派封裝之方法之第 13 個參數的型別。</typeparam>
      <typeparam name="T14">此委派封裝之方法之第 14 個參數的型別。</typeparam>
      <typeparam name="T15">此委派封裝之方法之第 15 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`17">
      <summary>封裝具有 16 個參數的方法，並傳回由 <paramref name="TResult" /> 參數指定之型別的值。</summary>
      <returns>此委派封裝之方法的傳回值。</returns>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <param name="arg4">此委派封裝之方法的第 4 個參數。</param>
      <param name="arg5">此委派封裝之方法的第 5 個參數。</param>
      <param name="arg6">此委派封裝之方法的第 6 個參數。</param>
      <param name="arg7">此委派封裝之方法的第 7 個參數。</param>
      <param name="arg8">此委派封裝之方法的第 8 個參數。</param>
      <param name="arg9">此委派封裝之方法的第 9 個參數。</param>
      <param name="arg10">此委派封裝之方法的第 10 個參數。</param>
      <param name="arg11">此委派封裝之方法的第 11 個參數。</param>
      <param name="arg12">此委派封裝之方法的第 12 個參數。</param>
      <param name="arg13">此委派封裝之方法的第 13 個參數。</param>
      <param name="arg14">此委派封裝之方法的第 14 個參數。</param>
      <param name="arg15">此委派封裝之方法的第 15 個參數。</param>
      <param name="arg16">此委派封裝之方法的第 16 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="T4">此委派封裝之方法之第 4 個參數的型別。</typeparam>
      <typeparam name="T5">此委派封裝之方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">此委派封裝之方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">此委派封裝之方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">此委派封裝之方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">此委派封裝之方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">此委派封裝之方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">此委派封裝之方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">此委派封裝之方法之第 12 個參數的型別。</typeparam>
      <typeparam name="T13">此委派封裝之方法之第 13 個參數的型別。</typeparam>
      <typeparam name="T14">此委派封裝之方法之第 14 個參數的型別。</typeparam>
      <typeparam name="T15">此委派封裝之方法之第 15 個參數的型別。</typeparam>
      <typeparam name="T16">此委派封裝之方法之第 16 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1">
      <summary>表示一組值。</summary>
      <typeparam name="T">雜湊集中元素的型別。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.HashSet`1" /> 類別的新執行個體，此執行個體是空白並且會使用集合型別的預設相等比較子。</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.HashSet`1" /> 類別的新執行個體，此執行個體會使用集合型別的預設相等比較子、包含從指定之集合複製的元素，並且具有足以容納所複製元素數的容量。</summary>
      <param name="collection">集合 (Collection)，其元素會複製到新的集合 (Set)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.HashSet`1" /> 類別的新執行個體，此執行個體會使用集合型別的指定相等比較子、包含從指定集合複製的元素，並且具有足以容納所複製元素數的容量。</summary>
      <param name="collection">集合 (Collection)，其元素會複製到新的集合 (Set)。</param>
      <param name="comparer">對集合中的各個值進行比較時要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 實作，或是 null 以便對集合型別使用預設的 <see cref="T:System.Collections.Generic.EqualityComparer`1" /> 實作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.HashSet`1" /> 類別的新執行個體，此執行個體是空白並且會使用集合型別的指定相等比較子。</summary>
      <param name="comparer">對集合中的各個值進行比較時要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 實作，或是 null 以便對集合型別使用預設的 <see cref="T:System.Collections.Generic.EqualityComparer`1" /> 實作。</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Add(`0)">
      <summary>將指定的元素加入至資料集。</summary>
      <returns>如果項目已加入至 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件則為 true，如果項目已存在則為 false。</returns>
      <param name="item">要加入至資料集的元素。</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Clear">
      <summary>從 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件移除所有元素。</summary>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Comparer">
      <summary>取得 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 物件，此物件可用於判斷集合中的值是否相等。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 物件，可用於判斷集合中的值是否相等。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Contains(`0)">
      <summary>判斷 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件是否包含指定的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件包含指定的項目則為 true，否則為 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件中尋找的元素。</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[])">
      <summary>將 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件的元素複製到陣列。</summary>
      <param name="array">一維陣列，是從 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件所複製的元素之目的端。陣列必須具有以零為起始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)">
      <summary>從指定的陣列索引開始，將 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件的元素都複製到陣列中。</summary>
      <param name="array">一維陣列，是從 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件所複製的元素之目的端。陣列必須具有以零為起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> 大於目的端 <paramref name="array" /> 的長度。-或-<paramref name="count" /> 大於目的端 <paramref name="array" /> 的大小。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>從指定的陣列索引開始，將 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件的指定元素數複製到陣列中。</summary>
      <param name="array">一維陣列，是從 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件所複製的元素之目的端。陣列必須具有以零為起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <param name="count">要複製到 <paramref name="array" /> 的元素數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小於 0。-或-<paramref name="count" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> 大於目的端 <paramref name="array" /> 的長度。-或-<paramref name="count" /> 大於 <paramref name="index" /> 和目的端 <paramref name="array" /> 結尾之間的可用空間。</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Count">
      <summary>取得集合中包含的元素數目。</summary>
      <returns>集合中包含的元素數目。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>從目前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件中，移除指定之集合內的所有元素。</summary>
      <param name="other">要從 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件移除的項目集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetEnumerator">
      <summary>傳回會逐一查看 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件的列舉程式。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 物件的 <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> 物件。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件，以便僅包含該物件和指定之集合中同時出現的元素。</summary>
      <param name="other">要與目前 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件是否為指定之集合的真子集。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件是 <paramref name="other" /> 的真子集則為 true，否則為 false。</returns>
      <param name="other">要與目前 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件是否為指定之集合的真超集。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件是 <paramref name="other" /> 的真超集則為 true，否則為 false。</returns>
      <param name="other">要與目前 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件是否為指定之集合的子集。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件是 <paramref name="other" /> 的子集則為 true，否則為 false。</returns>
      <param name="other">要與目前 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件是否為指定之集合的超集。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件是 <paramref name="other" /> 的超集則為 true，否則為 false。</returns>
      <param name="other">要與目前 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件與指定的集合是否共用通用的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件和 <paramref name="other" /> 至少共用一個通用項目則為 true，否則為 false。</returns>
      <param name="other">要與目前 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Remove(`0)">
      <summary>從 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件移除指定的元素。</summary>
      <returns>如果已成功找到並移除元素則為 true，否則為 false。如果在 <see cref="T:System.Collections.Generic.HashSet`1" /> 中找不到 <paramref name="item" />，這個方法會傳回 false。</returns>
      <param name="item">要移除的元素。</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>從 <see cref="T:System.Collections.Generic.HashSet`1" /> 集合中移除符合指定之述詞 (Predicate) 所定義條件的所有元素。</summary>
      <returns>已從 <see cref="T:System.Collections.Generic.HashSet`1" /> 集合中移除的元素數目。</returns>
      <param name="match">定義要移除元素之條件的 <see cref="T:System.Predicate`1" /> 委派。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件和指定的集合是否包含相同元素。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件等於 <paramref name="other" />，則為 true，否則為 false。</returns>
      <param name="other">要與目前 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件，以便僅包含該物件或指定之集合 (但非兩者) 中出現的元素。</summary>
      <param name="other">要與目前 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>將項目加入至 <see cref="T:System.Collections.Generic.ICollection`1" /> 物件。</summary>
      <param name="item">要加入至 <see cref="T:System.Collections.Generic.ICollection`1" /> 物件的物件。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 是唯讀的。</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，指出集合是否為唯讀。</summary>
      <returns>如果這個集合是唯讀的，則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回在集合中逐一查看的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> 物件，用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回在集合中逐一查看的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 物件，用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TrimExcess">
      <summary>將 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件的容量設定為所包含的元素實際數目，捨入為鄰近的實作特定值。</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件，以便包含該物件和指定之集合中同時出現的所有元素。</summary>
      <param name="other">要與目前 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1.Enumerator">
      <summary>列舉 <see cref="T:System.Collections.Generic.HashSet`1" /> 物件的元素。</summary>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.Current">
      <summary>取得位於目前列舉程式位置上的元素。</summary>
      <returns>位於列舉程式目前位置之 <see cref="T:System.Collections.Generic.HashSet`1" /> 集合內的元素。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.Dispose">
      <summary>釋放 <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> 物件使用的所有資源。</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.MoveNext">
      <summary>將列舉程式前移至 <see cref="T:System.Collections.Generic.HashSet`1" /> 集合的下一個元素。</summary>
      <returns>如果列舉程式成功地前移至下一個元素則為 true，如果列舉程式已超過集合的結尾，則為 false。</returns>
      <exception cref="T:System.InvalidOperationException">在建立列舉程式之後，會修改集合。</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>取得位於目前列舉程式位置上的元素。</summary>
      <returns>位於集合中列舉程式目前位置的元素，做為 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.InvalidOperationException">列舉程式位於集合的第 1 個項目之前，或最後 1 個項目之後。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>設定列舉程式至它的初始位置，這是在集合中第 1 個元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">在建立列舉程式之後，會修改集合。 </exception>
    </member>
    <member name="T:System.Dynamic.BinaryOperationBinder">
      <summary>表示呼叫位置上的二元動態運算，並提供繫結語意和運算詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>初始化 <see cref="T:System.Dynamic.BinaryOperationBinder" /> 類別的新執行個體。</summary>
      <param name="operation">二元運算類型。</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態二元運算的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態作業的目標。</param>
      <param name="args">動態運算的引數陣列。</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>如果目標動態物件無法繫結，則會執行二元動態運算的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態二元運算的目標。</param>
      <param name="arg">動態二元運算的右運算元。</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行二元動態運算的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態二元運算的目標。</param>
      <param name="arg">動態二元運算的右運算元。</param>
      <param name="errorSuggestion">如果繫結失敗，傳回繫結結果，否則為 null。</param>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.Operation">
      <summary>二元運算類型。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ExpressionType" /> 物件，表示二元運算的類型。</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.ReturnType">
      <summary>作業的結果型別。</summary>
      <returns>作業的結果型別。</returns>
    </member>
    <member name="T:System.Dynamic.BindingRestrictions">
      <summary>表示 <see cref="T:System.Dynamic.DynamicMetaObject" /> 上的一組繫結限制，符合它的動態繫結即為有效的繫結。</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})">
      <summary>將 <see cref="T:System.Dynamic.DynamicMetaObject" /> 執行個體清單上的繫結限制結合成一組限制。</summary>
      <returns>一組新的繫結限制。</returns>
      <param name="contributingObjects">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 執行個體的清單，要從中結合限制。</param>
    </member>
    <member name="F:System.Dynamic.BindingRestrictions.Empty">
      <summary>表示一組空的繫結限制。此欄位為唯讀的。</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)">
      <summary>建立繫結限制，該限制會檢查運算式中是否有任意不可變屬性。</summary>
      <returns>新的繫結限制。</returns>
      <param name="expression">表示限制的運算式。</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)">
      <summary>建立繫結限制，該限制會檢查運算式中是否有物件執行個體識別。</summary>
      <returns>新的繫結限制。</returns>
      <param name="expression">要測試的運算式。</param>
      <param name="instance">要測試的確切物件執行個體。</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)">
      <summary>建立繫結限制，該限制會檢查運算式中是否有執行階段型別識別。</summary>
      <returns>新的繫結限制。</returns>
      <param name="expression">要測試的運算式。</param>
      <param name="type">要測試的確切型別。</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)">
      <summary>將此繫結限制集與目前的繫結限制合併。</summary>
      <returns>一組新的繫結限制。</returns>
      <param name="restrictions">與目前繫結限制合併的繫結限制集。</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.ToExpression">
      <summary>建立表示繫結限制的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <returns>表示限制的運算式樹狀架構。</returns>
    </member>
    <member name="T:System.Dynamic.CallInfo">
      <summary>描述動態繫結處理序中的引數。</summary>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary>建立新的 CallInfo，表示動態繫結處理序中的引數。</summary>
      <param name="argCount">引數數目。</param>
      <param name="argNames">引數名稱。</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])">
      <summary>建立新的 PositionalArgumentInfo。</summary>
      <param name="argCount">引數數目。</param>
      <param name="argNames">引數名稱。</param>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentCount">
      <summary>引數數目。</summary>
      <returns>引數數目。</returns>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentNames">
      <summary>引數名稱。</summary>
      <returns>引數名稱的唯讀集合。</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.Equals(System.Object)">
      <summary>判斷指定的 CallInfo 執行個體是否視為等於目前的執行個體。</summary>
      <returns>如果指定的執行個體等於目前的執行個體則為 true，否則為 false。</returns>
      <param name="obj">要與目前執行個體比較的 <see cref="T:System.Dynamic.CallInfo" /> 執行個體。</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.GetHashCode">
      <summary>做為目前 <see cref="T:System.Dynamic.CallInfo" /> 的雜湊函式。</summary>
      <returns>目前 <see cref="T:System.Dynamic.CallInfo" /> 的雜湊程式碼。</returns>
    </member>
    <member name="T:System.Dynamic.ConvertBinder">
      <summary>表示呼叫位置上的轉換動態作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.#ctor(System.Type,System.Boolean)">
      <summary>初始化 <see cref="T:System.Dynamic.ConvertBinder" /> 類別的新執行個體。</summary>
      <param name="type">要轉換成的型別。</param>
      <param name="explicit">如果轉換應該考慮明確轉換則為 true，否則為 false。</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態轉換作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態轉換作業的目標。</param>
      <param name="args">動態轉換作業的引數陣列。</param>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Explicit">
      <summary>取得值，指出轉換是否應該考慮明確轉換。</summary>
      <returns>如果有明確轉換為 True，否則為 false。</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject)">
      <summary>如果目標動態物件無法繫結，則會執行動態轉換作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態轉換作業的目標。</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態轉換作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態轉換作業的目標。</param>
      <param name="errorSuggestion">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.ReturnType">
      <summary>作業的結果型別。</summary>
      <returns>表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Type">
      <summary>要轉換成的型別。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，表示要轉換成的型別。</returns>
    </member>
    <member name="T:System.Dynamic.CreateInstanceBinder">
      <summary>表示呼叫位置上的動態建立作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.CreateInstanceBinder" /> 類別的新執行個體。</summary>
      <param name="callInfo">呼叫站台上的引數簽章。</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態建立作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態建立作業的目標。</param>
      <param name="args">動態建立作業的引數陣列。</param>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.CallInfo">
      <summary>取得呼叫站台上之引數的簽章。</summary>
      <returns>呼叫站台上的引數簽章。</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>如果目標動態物件無法繫結，則會執行動態建立作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態建立作業的目標。</param>
      <param name="args">動態建立作業的引數。</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態建立作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態建立作業的目標。</param>
      <param name="args">動態建立作業的引數。</param>
      <param name="errorSuggestion">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.ReturnType">
      <summary>作業的結果型別。</summary>
      <returns>表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.DeleteIndexBinder">
      <summary>表示呼叫位置上的動態刪除索引作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.DeleteIndexBinder" /> 類別的新執行個體。</summary>
      <param name="callInfo">呼叫站台上的引數簽章。</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態刪除索引作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態刪除索引作業的目標。</param>
      <param name="args">動態刪除索引作業的引數陣列。</param>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.CallInfo">
      <summary>取得呼叫站台上之引數的簽章。</summary>
      <returns>呼叫站台上的引數簽章。</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>如果目標動態物件無法繫結，則會執行動態刪除索引作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態刪除索引作業的目標。</param>
      <param name="indexes">動態刪除索引作業的引數。</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態刪除索引作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態刪除索引作業的目標。</param>
      <param name="indexes">動態刪除索引作業的引數。</param>
      <param name="errorSuggestion">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.ReturnType">
      <summary>作業的結果型別。</summary>
      <returns>表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.DeleteMemberBinder">
      <summary>表示呼叫位置上的動態刪除成員作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.Dynamic.DeleteIndexBinder" /> 類別的新執行個體。</summary>
      <param name="name">要刪除的成員名稱。</param>
      <param name="ignoreCase">如果名稱忽略大小寫後應該符合則為 true，否則為 false。</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態刪除成員作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態刪除成員作業的目標。</param>
      <param name="args">動態刪除成員作業的引數陣列。</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject)">
      <summary>如果目標動態物件無法繫結，則會執行動態刪除成員作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態刪除成員作業的目標。</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態刪除成員作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態刪除成員作業的目標。</param>
      <param name="errorSuggestion">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.IgnoreCase">
      <summary>取得值，指出字串比較是否應該忽略成員名稱的大小寫。</summary>
      <returns>如果字串比較應該忽略大小寫則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.Name">
      <summary>取得要刪除的成員名稱。</summary>
      <returns>要刪除的成員名稱。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.ReturnType">
      <summary>作業的結果型別。</summary>
      <returns>表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObject">
      <summary>表示動態繫結以及參與動態繫結之物件的繫結邏輯。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)">
      <summary>初始化 <see cref="T:System.Dynamic.DynamicMetaObject" /> 類別的新執行個體。</summary>
      <param name="expression">運算式，表示動態繫期過程中的此 <see cref="T:System.Dynamic.DynamicMetaObject" />。</param>
      <param name="restrictions">繫結限制集，符合它的繫結即為有效的繫結。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)">
      <summary>初始化 <see cref="T:System.Dynamic.DynamicMetaObject" /> 類別的新執行個體。</summary>
      <param name="expression">運算式，表示動態繫期過程中的此 <see cref="T:System.Dynamic.DynamicMetaObject" />。</param>
      <param name="restrictions">繫結限制集，符合它的繫結即為有效的繫結。</param>
      <param name="value">由 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示的執行階段值。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
      <summary>執行動態二元運算的繫結。</summary>
      <returns>新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="binder">
        <see cref="T:System.Dynamic.BinaryOperationBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <param name="arg">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 的執行個體，表示二元運算的右邊。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
      <summary>執行動態轉換運算的繫結。</summary>
      <returns>新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="binder">
        <see cref="T:System.Dynamic.ConvertBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態建立執行個體作業的繫結。</summary>
      <returns>新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="binder">
        <see cref="T:System.Dynamic.CreateInstanceBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <param name="args">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 執行個體的陣列 - 用於建立執行個體作業的引數。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態刪除索引作業的繫結。</summary>
      <returns>新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="binder">
        <see cref="T:System.Dynamic.DeleteIndexBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <param name="indexes">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 執行個體的陣列 - 用於刪除索引作業的索引。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>執行動態刪除成員作業的繫結。</summary>
      <returns>新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="binder">
        <see cref="T:System.Dynamic.DeleteMemberBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態取得索引作業的繫結。</summary>
      <returns>新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="binder">
        <see cref="T:System.Dynamic.GetIndexBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <param name="indexes">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 執行個體的陣列 - 用於取得索引作業的索引。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
      <summary>執行動態取得成員作業的繫結。</summary>
      <returns>新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="binder">
        <see cref="T:System.Dynamic.GetMemberBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態叫用作業的繫結。</summary>
      <returns>新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="binder">
        <see cref="T:System.Dynamic.InvokeBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <param name="args">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 執行個體 - 用於叫用作業的引數) 的陣列。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態叫用成員作業的繫結。</summary>
      <returns>新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="binder">
        <see cref="T:System.Dynamic.InvokeMemberBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <param name="args">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 執行個體的陣列 - 用於叫用成員作業的引數。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>執行動態設定索引作業的繫結。</summary>
      <returns>新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="binder">
        <see cref="T:System.Dynamic.SetIndexBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <param name="indexes">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 執行個體的陣列 - 用於設定索引作業的索引。</param>
      <param name="value">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示設定索引作業的值。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
      <summary>執行動態設定成員作業的繫結。</summary>
      <returns>新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="binder">
        <see cref="T:System.Dynamic.SetMemberBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <param name="value">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示設定成員作業的值。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
      <summary>執行動態一元運算的繫結。</summary>
      <returns>新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="binder">
        <see cref="T:System.Dynamic.UnaryOperationBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)">
      <summary>為指定的物件建立中繼物件。</summary>
      <returns>如果指定的物件實作 <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" /> 而且不是來自目前 AppDomain 之外的遠端物件，則傳回該物件的特定中繼物件 (由 <see cref="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)" /> 所傳回)。否則會建立及傳回不含任何限制的全新中繼物件。</returns>
      <param name="value">要取得中繼物件的物件。</param>
      <param name="expression">運算式，表示動態繫期過程中的此 <see cref="T:System.Dynamic.DynamicMetaObject" />。</param>
    </member>
    <member name="F:System.Dynamic.DynamicMetaObject.EmptyMetaObjects">
      <summary>表示 <see cref="T:System.Dynamic.DynamicMetaObject" /> 型別的空陣列。此欄位為唯讀的。</summary>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Expression">
      <summary>運算式，表示動態繫結處理序期間的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</summary>
      <returns>運算式，表示動態繫結處理序期間的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.GetDynamicMemberNames">
      <summary>傳回所有動態成員名稱的列舉。</summary>
      <returns>動態成員名稱的清單。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.HasValue">
      <summary>取得值，指出 <see cref="T:System.Dynamic.DynamicMetaObject" /> 是否有執行階段值。</summary>
      <returns>如果 <see cref="T:System.Dynamic.DynamicMetaObject" /> 有執行階段值，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.LimitType">
      <summary>取得 <see cref="T:System.Dynamic.DynamicMetaObject" /> 的限制型別。</summary>
      <returns>如果有執行階段值為 <see cref="P:System.Dynamic.DynamicMetaObject.RuntimeType" />，否則為 <see cref="P:System.Dynamic.DynamicMetaObject.Expression" /> 型別。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Restrictions">
      <summary>繫結限制集，符合它的繫結即為有效的繫結。</summary>
      <returns>繫結限制集。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.RuntimeType">
      <summary>取得執行階段值的 <see cref="T:System.Type" />，如果 <see cref="T:System.Dynamic.DynamicMetaObject" /> 沒有相關值則為 null。</summary>
      <returns>執行階段值的 <see cref="T:System.Type" /> 或 null。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Value">
      <summary>由此 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示的執行階段值。</summary>
      <returns>由此 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示的執行階段值。</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObjectBinder">
      <summary>參與 <see cref="T:System.Dynamic.DynamicMetaObject" /> 繫結通訊協定的動態呼叫位置繫結器。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.#ctor">
      <summary>初始化 <see cref="T:System.Dynamic.DynamicMetaObjectBinder" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>在衍生類別中覆寫時，執行動態作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態作業的目標。</param>
      <param name="args">動態運算的引數陣列。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>在一組引數上執行動態作業的執行階段繫結。</summary>
      <returns>運算式，在動態作業引數上執行測試，而且如果測試有效，則會執行動態作業。如果後續發生的動態作業測試失敗，則會重新呼叫繫結，為新引數型別產生新的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
      <param name="args">動態作業的引數陣列。</param>
      <param name="parameters">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 執行個體的陣列，表示繫結處理序中呼叫位置的參數。</param>
      <param name="returnLabel">LabelTarget，用來傳回動態繫結的結果。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>延後到所有動態作業引數的執行階段值都計算出來時，才執行作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態作業的目標。</param>
      <param name="args">動態運算的引數陣列。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject[])">
      <summary>延後到所有動態作業引數的執行階段值都計算出來時，才執行作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="args">動態運算的引數陣列。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.GetUpdateExpression(System.Type)">
      <summary>取得會導致繫結更新的運算式。它指出運算式的繫結不再是有效。這通常用於在動態物件的「版本」已變更時。</summary>
      <returns>更新的運算式。</returns>
      <param name="type">產生之運算式的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性；允許任何型別。</param>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObjectBinder.ReturnType">
      <summary>作業的結果型別。</summary>
      <returns>表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.DynamicObject">
      <summary>提供基底類別，以便指定在執行階段時的動態行為。此類別必須以讓其他類別繼承的方式使用，您無法直接將它執行個體化。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.#ctor">
      <summary>讓衍生型別得以初始化 <see cref="T:System.Dynamic.DynamicObject" /> 型別的新執行個體。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
      <summary>傳回所有動態成員名稱的列舉。</summary>
      <returns>包含動態成員名稱的序列。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>提供分派給動態虛擬方法的 <see cref="T:System.Dynamic.DynamicMetaObject" />。此物件可以封裝在另一個 <see cref="T:System.Dynamic.DynamicMetaObject" /> 內部，以提供個別動作的自訂行為。此方法支援語言實作者適用的動態語言執行階段基礎結構，但不建議直接在程式碼中使用。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 型別的物件。</returns>
      <param name="parameter">運算式，表示分派給動態虛擬方法的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
      <summary>提供二進位運算的實作。衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定加法和乘法這類運算的動態行為。</summary>
      <returns>如果作業成功為 true，否則為 false。如果此方法傳回 false，語言的執行階段繫結器會決定行為。(在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</returns>
      <param name="binder">提供二進位運算的相關資訊。binder.Operation 屬性會傳回 <see cref="T:System.Linq.Expressions.ExpressionType" /> 物件。例如，對於 sum = first + second 陳述式 (其中 first 和 second 衍生自 DynamicObject 類別)，binder.Operation 會傳回 ExpressionType.Add。</param>
      <param name="arg">二進位運算的右運算元。例如，對於 sum = first + second 陳述式 (其中 first 和 second 衍生自 DynamicObject 類別)，<paramref name="arg" /> 等於 second。</param>
      <param name="result">二進位運算的結果。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
      <summary>提供型別轉換作業的實作。衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫此方法，以指定物件型別轉換作業的動態行為。</summary>
      <returns>如果作業成功為 true，否則為 false。如果此方法傳回 false，語言的執行階段繫結器會決定行為。(在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</returns>
      <param name="binder">提供轉換作業的相關資訊。binder.Type 屬性提供物件必須轉換成的目標型別。例如，對於 C# 的 (String)sampleObject 陳述式 (在 Visual Basic 中是 CType(sampleObject, Type))，其中 sampleObject 是自 <see cref="T:System.Dynamic.DynamicObject" /> 類別衍生的類別執行個體，binder.Type 會傳回 <see cref="T:System.String" /> 型別。binder.Explicit 屬性提供發生之轉換類型的相關資訊。如果是明確轉換則會傳回 true，如果是隱含轉換則會傳回 false。</param>
      <param name="result">型別轉換作業的結果。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
      <summary>提供作業的實作，這些作業會初始化動態物件的新執行個體。此方法並不適用於 C# 或 Visual Basic。</summary>
      <returns>如果作業成功為 true，否則為 false。如果此方法傳回 false，語言的執行階段繫結器會決定行為。(在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</returns>
      <param name="binder">提供初始設定作業的相關資訊。</param>
      <param name="args">在初始設定期間傳遞給物件的引數。例如，對於 new SampleType(100) 作業 (其中 SampleType 是衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的型別)，<paramref name="args[0]" /> 等於 100。</param>
      <param name="result">初始設定的結果。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
      <summary>提供依索引刪除物件之作業的實作。此方法並不適用於 C# 或 Visual Basic。</summary>
      <returns>如果作業成功為 true，否則為 false。如果此方法傳回 false，語言的執行階段繫結器會決定行為。(在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</returns>
      <param name="binder">提供刪除的相關資訊。</param>
      <param name="indexes">要刪除的索引。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>提供刪除物件成員之作業的實作。此方法並不適用於 C# 或 Visual Basic。</summary>
      <returns>如果作業成功為 true，否則為 false。如果此方法傳回 false，語言的執行階段繫結器會決定行為。(在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</returns>
      <param name="binder">提供刪除的相關資訊。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary>提供依索引取得值之作業的實作。衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定索引作業的動態行為。</summary>
      <returns>如果作業成功為 true，否則為 false。如果此方法傳回 false，語言的執行階段繫結器會決定行為。(在大部分情況下，會擲回執行階段例外狀況)。</returns>
      <param name="binder">提供作業的相關資訊。</param>
      <param name="indexes">用於作業的索引。例如，對於 C# 的 sampleObject[3] 作業 (在 Visual Basic 中是 sampleObject(3))，其中 sampleObject 衍生自 DynamicObject 類別，<paramref name="indexes[0]" /> 等於 3。</param>
      <param name="result">索引作業的結果。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>提供取得成員值之作業的實作。衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定取得屬性值這類作業的動態行為。</summary>
      <returns>如果作業成功為 true，否則為 false。如果此方法傳回 false，語言的執行階段繫結器會決定行為。(在大部分情況下，會擲回執行階段例外狀況)。</returns>
      <param name="binder">提供已呼叫動態作業之物件的相關資訊。binder.Name 屬性會提供其中執行動態作業之成員的名稱。例如，對於 Console.WriteLine(sampleObject.SampleProperty) 陳述式 (其中 sampleObject 是衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別執行個體)，binder.Name 會傳回 "SampleProperty"。binder.IgnoreCase 屬性會指定成員名稱是否區分大小寫。</param>
      <param name="result">取得作業的結果。例如，如果是針對屬性呼叫這個方法，您可以將屬性值指派給 <paramref name="result" />。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
      <summary>提供叫用物件之作業的實作。衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定叫用物件或委派這類作業的動態行為。</summary>
      <returns>如果作業成功為 true，否則為 false。如果此方法傳回 false，語言的執行階段繫結器會決定行為。在大多數情況下，會擲回語言特有執行階段例外狀況。</returns>
      <param name="binder">提供叫用作業的相關資訊。</param>
      <param name="args">在叫用作業期間傳遞給物件的引數。例如，對於 sampleObject(100) 作業 (其中 sampleObject 是衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別)，<paramref name="args[0]" /> 等於 100。</param>
      <param name="result">物件引動過程的結果。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>提供叫用成員之作業的實作。衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定呼叫方法這類作業的動態行為。</summary>
      <returns>如果作業成功為 true，否則為 false。如果此方法傳回 false，語言的執行階段繫結器會決定行為。(在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</returns>
      <param name="binder">提供動態作業的相關資訊。binder.Name 屬性會提供其中執行動態作業之成員的名稱。例如，對於 sampleObject.SampleMethod(100) 陳述式 (其中 sampleObject 是衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別執行個體)，binder.Name 會傳回 "SampleMethod"。binder.IgnoreCase 屬性會指定成員名稱是否區分大小寫。</param>
      <param name="args">在叫用作業期間傳遞給物件成員的引數。例如，對於 sampleObject.SampleMethod(100) 陳述式 (其中 sampleObject 是衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別)，<paramref name="args[0]" /> 等於 100。</param>
      <param name="result">成員引動過程的結果。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
      <summary>提供依索引設定值之作業的實作。衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定依指定之索引存取物件之作業的動態行為。</summary>
      <returns>如果作業成功為 true，否則為 false。如果此方法傳回 false，語言的執行階段繫結器會決定行為。在大多數情況下，會擲回語言特有執行階段例外狀況。</returns>
      <param name="binder">提供作業的相關資訊。</param>
      <param name="indexes">用於作業的索引。例如，對於 C# 的 sampleObject[3] = 10 作業 (在 Visual Basic 中是 sampleObject(3) = 10)，其中 sampleObject 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別，<paramref name="indexes[0]" /> 等於 3。</param>
      <param name="value">要設定給具有所指定索引之物件的值。例如，對於 C# 的 sampleObject[3] = 10 作業 (在 Visual Basic 中是 sampleObject(3) = 10)，其中 sampleObject 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別，<paramref name="value" /> 等於 10。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>提供設定成員值之作業的實作。衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定設定屬性值這類作業的動態行為。</summary>
      <returns>如果作業成功為 true，否則為 false。如果此方法傳回 false，語言的執行階段繫結器會決定行為。(在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</returns>
      <param name="binder">提供已呼叫動態作業之物件的相關資訊。binder.Name 屬性會提供指派獲得該值之成員的名稱。例如，對於 sampleObject.SampleProperty = "Test" 陳述式 (其中 sampleObject 是衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別執行個體)，binder.Name 會傳回 "SampleProperty"。binder.IgnoreCase 屬性會指定成員名稱是否區分大小寫。</param>
      <param name="value">要設定給成員的值。例如，對於 sampleObject.SampleProperty = "Test" (其中 sampleObject 是衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別執行個體)，<paramref name="value" /> 是 "Test"。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
      <summary>提供一元運算的實作。衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定負號、遞增或遞減這類運算的動態行為。</summary>
      <returns>如果作業成功為 true，否則為 false。如果此方法傳回 false，語言的執行階段繫結器會決定行為。(在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</returns>
      <param name="binder">提供一元運算的相關資訊。binder.Operation 屬性會傳回 <see cref="T:System.Linq.Expressions.ExpressionType" /> 物件。例如，對於 negativeNumber = -number 陳述式 (其中 number 衍生自 DynamicObject 類別)，binder.Operation 會傳回 "Negate"。</param>
      <param name="result">一元運算的結果。</param>
    </member>
    <member name="T:System.Dynamic.ExpandoObject">
      <summary>表示物件，此物件的成員可以在執行階段時動態加入和移除。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.#ctor">
      <summary>初始化沒有成員的新 ExpandoObject。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>將指定的值加入至具有指定索引鍵的 <see cref="T:System.Collections.Generic.ICollection`1" />。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 結構，表示要加入至集合的索引鍵和值。</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Clear">
      <summary>將所有項目從集合中移除。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>判斷 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含特定索引鍵和值。</summary>
      <returns>如果集合包含特定的索引鍵和值為 true，否則為 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中尋找的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 結構。</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>從指定的陣列索引處開始，將 <see cref="T:System.Collections.Generic.ICollection`1" /> 的元素複製到型別 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的陣列。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 型別的一維陣列，是從 <see cref="T:System.Collections.Generic.ICollection`1" /> 複製過來之 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 元素的目的端。陣列必須具有以零為起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Count">
      <summary>取得 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的元素數目。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 中的元素數。</returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否為唯讀。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 是唯讀的，為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>從集合移除索引鍵和值。</summary>
      <returns>如果成功找到並移除索引鍵和值為 true，否則為 false。如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找不到索引鍵和值，此方法會傳回 false。</returns>
      <param name="item">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 結構，表示要從集合移除的索引鍵和值。</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Add(System.String,System.Object)">
      <summary>將指定的索引鍵和值加入字典。</summary>
      <param name="key">要用做索引鍵的物件。</param>
      <param name="value">要用做值的物件。</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#ContainsKey(System.String)">
      <summary>判斷字典是否包含指定的索引鍵。</summary>
      <returns>如果字典中包含有指定之索引鍵的元素為 true，否則為 false。</returns>
      <param name="key">要在字典中尋找的索引鍵。</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Item(System.String)">
      <summary>取得或設定具有指定索引鍵的元素。</summary>
      <returns>具有指定索引鍵的元素。</returns>
      <param name="key">要取得或設定之元素的索引鍵。</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>取得 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的索引鍵。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />，包含實作 <see cref="T:System.Collections.Generic.IDictionary`2" /> 之物件的索引鍵。</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(System.String)">
      <summary>從 <see cref="T:System.Collections.IDictionary" /> 移除具有指定之索引鍵的元素。</summary>
      <returns>如果成功移除元素為 true，否則為 false。如果在原始 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中找不到 <paramref name="key" />，這個方法也會傳回 false。</returns>
      <param name="key">要移除之元素的索引鍵。</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#TryGetValue(System.String,System.Object@)">
      <summary>取得與指定索引鍵關聯的值。</summary>
      <returns>如果實作 <see cref="T:System.Collections.Generic.IDictionary`2" /> 之物件包含具有指定之索引鍵的元素為 true，否則為 false。</returns>
      <param name="key">要取得值的索引鍵。</param>
      <param name="value">如果找到索引鍵，則此方法傳回時會包含與指定索引鍵關聯的值，否則會包含 <paramref name="value" /> 參數的型別預設值。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>取得包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中值的 <see cref="T:System.Collections.Generic.ICollection`1" />。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />，包含實作 <see cref="T:System.Collections.Generic.IDictionary`2" /> 之物件中的值。</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可以用來逐一查看集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 物件。</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns> 可以用來逐一查看集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="E:System.Dynamic.ExpandoObject.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>發生於屬性值變更時。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>提供的 MetaObject 將會分派給動態虛擬方法。此物件可以封裝在另一個 MetaObject 內部，以提供個別動作的自訂行為。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 型別的物件。</returns>
      <param name="parameter">運算式，表示分派給動態虛擬方法的 MetaObject。</param>
    </member>
    <member name="T:System.Dynamic.GetIndexBinder">
      <summary>表示呼叫位置上的動態取得索引作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.GetIndexBinder" /> 類別的新執行個體。</summary>
      <param name="callInfo">呼叫站台上的引數簽章。</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態取得索引作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態取得索引作業的目標。</param>
      <param name="args">動態取得索引作業的引數陣列。</param>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.CallInfo">
      <summary>取得呼叫站台上之引數的簽章。</summary>
      <returns>呼叫站台上的引數簽章。</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>如果目標動態物件無法繫結，則會執行動態取得索引作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態取得索引作業的目標。</param>
      <param name="indexes">動態取得索引作業的引數。</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態取得索引作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態取得索引作業的目標。</param>
      <param name="indexes">動態取得索引作業的引數。</param>
      <param name="errorSuggestion">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.ReturnType">
      <summary>作業的結果型別。</summary>
      <returns>表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.GetMemberBinder">
      <summary>表示呼叫位置上的動態取得成員作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.Dynamic.GetMemberBinder" /> 類別的新執行個體。</summary>
      <param name="name">要取得的成員名稱。</param>
      <param name="ignoreCase">如果名稱忽略大小寫後應該符合則為 true，否則為 false。</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態取得成員作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態取得成員作業的目標。</param>
      <param name="args">動態取得成員作業的引數陣列。</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject)">
      <summary>如果目標動態物件無法繫結，則會執行動態取得成員作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態取得成員作業的目標。</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態取得成員作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態取得成員作業的目標。</param>
      <param name="errorSuggestion">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.IgnoreCase">
      <summary>取得值，指出字串比較是否應該忽略成員名稱的大小寫。</summary>
      <returns>如果要忽略大小寫則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.Name">
      <summary>取得要獲得的成員名稱。</summary>
      <returns>要取得的成員名稱。</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.ReturnType">
      <summary>作業的結果型別。</summary>
      <returns>表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.IDynamicMetaObjectProvider">
      <summary>表示可在執行階段繫結作業的動態物件。</summary>
    </member>
    <member name="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>傳回負責在此物件上執行繫結作業的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</summary>
      <returns>要繫結此物件的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="parameter">執行階段值的運算式樹狀架構表示。</param>
    </member>
    <member name="T:System.Dynamic.IInvokeOnGetBinder">
      <summary>表示動態取得成員作業的相關資訊，這項資料表示該取得成員是否要在屬性執行取得作業時叫用這些屬性。</summary>
    </member>
    <member name="P:System.Dynamic.IInvokeOnGetBinder.InvokeOnGet">
      <summary>取得值，這個值表示此取得成員作業是否應該在屬性執行取得作業時叫用這些屬性。當此介面不存在時，預設值為 true。</summary>
      <returns>如果此取得成員作業應該在屬性執行取得作業時叫用這些屬性，為 true，否則 false。</returns>
    </member>
    <member name="T:System.Dynamic.InvokeBinder">
      <summary>表示呼叫位置上的叫用動態作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.InvokeBinder" /> 類別的新執行個體。</summary>
      <param name="callInfo">呼叫站台上的引數簽章。</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態叫用作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態叫用作業的目標。</param>
      <param name="args">動態叫用作業的引數陣列。</param>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.CallInfo">
      <summary>取得呼叫站台上之引數的簽章。</summary>
      <returns>呼叫站台上的引數簽章。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>如果目標動態物件無法繫結，則會執行動態叫用作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態叫用作業的目標。</param>
      <param name="args">動態叫用作業的引數。</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>如果目標動態物件無法繫結，則會執行動態叫用作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態叫用作業的目標。</param>
      <param name="args">動態叫用作業的引數。</param>
      <param name="errorSuggestion">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.ReturnType">
      <summary>作業的結果型別。</summary>
      <returns>表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.InvokeMemberBinder">
      <summary>表示呼叫位置上的叫用成員動態作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.#ctor(System.String,System.Boolean,System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.InvokeMemberBinder" /> 類別的新執行個體。</summary>
      <param name="name">要叫用的成員名稱。</param>
      <param name="ignoreCase">如果名稱忽略大小寫後應該符合則為 true，否則為 false。</param>
      <param name="callInfo">呼叫站台上的引數簽章。</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態叫用成員作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態叫用成員作業的目標。</param>
      <param name="args">動態叫用成員作業的引數陣列。</param>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.CallInfo">
      <summary>取得呼叫站台上之引數的簽章。</summary>
      <returns>呼叫站台上的引數簽章。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態叫用作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態叫用作業的目標。</param>
      <param name="args">動態叫用作業的引數。</param>
      <param name="errorSuggestion">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>如果目標動態物件無法繫結，則會執行動態叫用成員作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態叫用成員作業的目標。</param>
      <param name="args">動態叫用成員作業的引數。</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態叫用成員作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態叫用成員作業的目標。</param>
      <param name="args">動態叫用成員作業的引數。</param>
      <param name="errorSuggestion">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.IgnoreCase">
      <summary>取得值，指出字串比較是否應該忽略成員名稱的大小寫。</summary>
      <returns>如果要忽略大小寫則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.Name">
      <summary>取得要叫用的成員名稱。</summary>
      <returns>要叫用的成員名稱。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.ReturnType">
      <summary>作業的結果型別。</summary>
      <returns>表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.SetIndexBinder">
      <summary>表示呼叫位置上的動態設定索引作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.SetIndexBinder" /> 類別的新執行個體。</summary>
      <param name="callInfo">呼叫站台上的引數簽章。</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態設定索引作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態定索引作業的目標。</param>
      <param name="args">動態設定索引作業的引數陣列。</param>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.CallInfo">
      <summary>取得呼叫站台上之引數的簽章。</summary>
      <returns>呼叫站台上的引數簽章。</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>如果目標動態物件無法繫結，則會執行動態設定索引作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態定索引作業的目標。</param>
      <param name="indexes">動態設定索引作業的引數。</param>
      <param name="value">要設定給集合的值。</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態設定索引作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態定索引作業的目標。</param>
      <param name="indexes">動態設定索引作業的引數。</param>
      <param name="value">要設定給集合的值。</param>
      <param name="errorSuggestion">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.ReturnType">
      <summary>作業的結果型別。</summary>
      <returns>表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.SetMemberBinder">
      <summary>表示呼叫位置上的動態設定成員作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.Dynamic.SetMemberBinder" /> 類別的新執行個體。</summary>
      <param name="name">要取得的成員名稱。</param>
      <param name="ignoreCase">如果名稱忽略大小寫後應該符合則為 true，否則為 false。</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態設定成員作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態設定成員作業的目標。</param>
      <param name="args">動態設定成員作業的引數陣列。</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>如果目標動態物件無法繫結，則會執行動態組成員作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態設定成員作業的目標。</param>
      <param name="value">要設定給成員的值。</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>如果目標動態物件無法繫結，則會執行動態組成員作業的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態設定成員作業的目標。</param>
      <param name="value">要設定給成員的值。</param>
      <param name="errorSuggestion">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.IgnoreCase">
      <summary>取得值，指出字串比較是否應該忽略成員名稱的大小寫。</summary>
      <returns>如果要忽略大小寫則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.Name">
      <summary>取得要獲得的成員名稱。</summary>
      <returns>要取得的成員名稱。</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.ReturnType">
      <summary>作業的結果型別。</summary>
      <returns>表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.UnaryOperationBinder">
      <summary>表示呼叫位置上的一元動態運算，並提供繫結語意和運算詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>初始化 <see cref="T:System.Dynamic.BinaryOperationBinder" /> 類別的新執行個體。</summary>
      <param name="operation">一元運算類型。</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態一元運算的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態作業的目標。</param>
      <param name="args">動態運算的引數陣列。</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)">
      <summary>如果目標動態物件無法繫結，則會執行一元動態運算的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態一元運算的目標。</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>如果目標動態物件無法繫結，則會執行一元動態運算的繫結。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
      <param name="target">動態一元運算的目標。</param>
      <param name="errorSuggestion">如果繫結失敗，則傳回繫結結果，否則為 null。</param>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.Operation">
      <summary>一元運算類型。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ExpressionType" /> 的物件，表示一元運算的類型。</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.ReturnType">
      <summary>作業的結果型別。</summary>
      <returns>表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Linq.Enumerable">
      <summary>提供一組 static (在 Visual Basic 中為 Shared) 方法，用於查詢實作 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的物件。</summary>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
      <summary>將累加函式套用到序列上。</summary>
      <returns>最終累積值。</returns>
      <param name="source">所要彙總的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="func">要在每個元素上叫用的累加函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
      <summary>將累加函式套用到序列上。會使用指定的初始值做為初始累加器值。</summary>
      <returns>最終累積值。</returns>
      <param name="source">所要彙總的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="seed">初始累積值。</param>
      <param name="func">要在每個元素上叫用的累加函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TAccumulate">累積值的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>將累加函式套用到序列上。使用指定的值做為初始累加值，並使用指定的函式來選取結果值。</summary>
      <returns>轉換後的最終累加值。</returns>
      <param name="source">所要彙總的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="seed">初始累積值。</param>
      <param name="func">要在每個元素上叫用的累加函式。</param>
      <param name="resultSelector">用來將最終累加值轉換成結果值的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TAccumulate">累積值的型別。</typeparam>
      <typeparam name="TResult">結果值的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 或 <paramref name="resultSelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>判斷序列的所有元素是否全都符合條件。</summary>
      <returns>如果來源序列的每個元素都通過以指定之述詞進行的測試，或序列是空的，為 true，否則為 false。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含要套用述詞的元素。</param>
      <param name="predicate">用來測試每個元素是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>判斷序列是否包含任何元素。</summary>
      <returns>如果來源序列包含任何元素，為 true，否則為 false。</returns>
      <param name="source">要檢查是否為空白的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>判斷序列的任何元素是否符合條件。</summary>
      <returns>如果來源序列中的任何元素通過以指定之述詞進行的測試，為 true，否則為 false。</returns>
      <param name="source">其元素要套用述詞的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用來測試每個元素是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>傳回型別為 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的輸入。</summary>
      <returns>型別為 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的輸入序列。</returns>
      <param name="source">型別為 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>計算 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>值序列的平均。</returns>
      <param name="source">要計算平均值的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>計算 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>值序列的平均。</returns>
      <param name="source">要計算平均值的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>計算 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>值序列的平均。</returns>
      <param name="source">要計算平均值的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>計算 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>值序列的平均。</returns>
      <param name="source">要計算平均值的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>計算可為 null 之 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>值序列的平均值，如果來源序列為空白或只含有 null 值，為 null。</returns>
      <param name="source">要計算平均值之可為 null 的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">序列中項目的總和大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>計算可為 null 之 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>值序列的平均值，如果來源序列為空白或只含有 null 值，為 null。</returns>
      <param name="source">要計算平均值之可為 null 的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>計算可為 null 之 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>值序列的平均值，如果來源序列為空白或只含有 null 值，為 null。</returns>
      <param name="source">要計算平均值之可為 null 的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">序列中項目的總和大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>計算可為 null 之 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>值序列的平均值，如果來源序列為空白或只含有 null 值，為 null。</returns>
      <param name="source">要計算平均值之可為 null 的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">序列中項目的總和大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>計算可為 null 之 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>值序列的平均值，如果來源序列為空白或只含有 null 值，為 null。</returns>
      <param name="source">要計算平均值之可為 null 的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>計算 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>值序列的平均。</returns>
      <param name="source">要計算平均值的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>計算在輸入序列中各元素上叫用轉換函式後所取得之 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>值序列的平均。</returns>
      <param name="source">用來計算平均值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
      <exception cref="T:System.OverflowException">序列中項目的總和大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>計算在輸入序列中各元素上叫用轉換函式後所取得之 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>值序列的平均。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>計算在輸入序列中各元素上叫用轉換函式後所取得之 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>值序列的平均。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
      <exception cref="T:System.OverflowException">序列中項目的總和大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>計算在輸入序列中各元素上叫用轉換函式後所取得之 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>值序列的平均。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">來源之元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
      <exception cref="T:System.OverflowException">序列中項目的總和大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>計算在輸入序列中各元素上叫用轉換函式後所取得可為 null 之 <see cref="T:System.Decimal" /> 值的平均值。</summary>
      <returns>值序列的平均值，如果來源序列為空白或只含有 null 值，為 null。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">序列中項目的總和大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>計算在輸入序列中各元素上叫用轉換函式後所取得可為 null 之 <see cref="T:System.Double" /> 值的平均值。</summary>
      <returns>值序列的平均值，如果來源序列為空白或只含有 null 值，為 null。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>計算在輸入序列中各元素上叫用轉換函式後所取得可為 null 之 <see cref="T:System.Int32" /> 值的平均值。</summary>
      <returns>值序列的平均值，如果來源序列為空白或只含有 null 值，為 null。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">序列中項目的總和大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>計算在輸入序列中各元素上叫用轉換函式後所取得可為 null 之 <see cref="T:System.Int64" /> 值的平均值。</summary>
      <returns>值序列的平均值，如果來源序列為空白或只含有 null 值，為 null。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>計算在輸入序列中各元素上叫用轉換函式後所取得可為 null 之 <see cref="T:System.Single" /> 值的平均值。</summary>
      <returns>值序列的平均值，如果來源序列為空白或只含有 null 值，為 null。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>計算在輸入序列中各元素上叫用轉換函式後所取得之 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>值序列的平均。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
      <summary>將 <see cref="T:System.Collections.IEnumerable" /> 的元素轉換成指定的型別。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含已轉換成指定之型別的每個來源序列元素。</returns>
      <param name="source">包含要轉換之元素的 <see cref="T:System.Collections.IEnumerable" />。</param>
      <typeparam name="TResult">
        <paramref name="source" /> 之元素要轉換的目標型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidCastException">無法將序列中的項目轉換為型別 <paramref name="TResult" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>串連兩個序列。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含兩個輸入序列的串連元素。</returns>
      <param name="first">要串連的第 1 個序列。</param>
      <param name="second">要串連到第 1 個序列的序列。</param>
      <typeparam name="TSource">輸入序列的元素之型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>使用預設的相等比較子 (Comparer) 來判斷序列是否包含指定的元素。</summary>
      <returns>如果來源序列包含具有指定值的元素，為 true，否則為 false。</returns>
      <param name="source">要在其中尋找值的序列。</param>
      <param name="value">要在序列中尋找的值。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 來判斷序列是否包含指定的元素。</summary>
      <returns>如果來源序列包含具有指定值的元素，為 true，否則為 false。</returns>
      <param name="source">要在其中尋找值的序列。</param>
      <param name="value">要在序列中尋找的值。</param>
      <param name="comparer">用來比較值的相等比較子。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>傳回序列的元素數目。</summary>
      <returns>輸入序列中的元素數目。</returns>
      <param name="source">包含要計算之元素的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的項目數目大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>傳回數字，表示指定之序列中符合條件的元素數目。</summary>
      <returns>數字，表示序列中符合述詞函式之條件的元素數目。</returns>
      <param name="source">包含要測試及計算之元素的序列。</param>
      <param name="predicate">用來測試每個元素是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的項目數目大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>傳回指定之序列的元素；如果序列是空的，則傳回單一集合中型別參數的預設值。</summary>
      <returns>如果 <paramref name="source" /> 為空白，為包含 <paramref name="TSource" /> 型別之預設值的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 物件，否則為 <paramref name="source" />。</returns>
      <param name="source">序列，若此序列空白，便傳回預設值。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>傳回指定之序列的元素；如果序列是空的，則傳回單一集合中的指定值。</summary>
      <returns>如果 <paramref name="source" /> 是空的，為包含 <paramref name="defaultValue" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，否則為 <paramref name="source" />。</returns>
      <param name="source">序列，若此序列空白，便傳回指定的值。</param>
      <param name="defaultValue">在序列空白時所要傳回的值。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>使用預設的相等比較子來比較值，以便從序列傳回獨特的元素。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含來源序列中的獨特元素。</returns>
      <param name="source">要移除重複元素的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 來比較值，以便從序列傳回獨特的元素。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含來源序列中的獨特元素。</returns>
      <param name="source">要移除重複元素的序列。</param>
      <param name="comparer">用來比較值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>傳回位於序列中指定索引處的元素。</summary>
      <returns>位於來源序列中指定位置的元素。</returns>
      <param name="source">傳回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="index">要擷取之元素以零為起始的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 0 或大於或等於 <paramref name="source" /> 中的項目數目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>傳回位於序列中指定索引處的元素；如果索引超出範圍，則傳回預設值。</summary>
      <returns>如果索引位於來源序列的界限之外，為 default(<paramref name="TSource" />)，否則為位於來源序列中指定索引處的元素。</returns>
      <param name="source">傳回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="index">要擷取之元素以零為起始的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Empty``1">
      <summary>傳回具有指定之型別引數的空白 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</summary>
      <returns>其型別引數為 <paramref name="TResult" /> 的空白 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <typeparam name="TResult">型別，用來指派給傳回之泛型 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的型別參數。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>使用預設相等比較子來比較值，以便產生兩個序列的差異。</summary>
      <returns>序列，其中包含兩個序列之元素的差異。</returns>
      <param name="first">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素若未同時存在 <paramref name="second" /> 中，便會傳回這些元素。</param>
      <param name="second">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，若其元素同時出現在第一個序列中，便會從傳回的序列中移除這些元素。</param>
      <typeparam name="TSource">輸入序列的元素之型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 來比較值，以便產生兩個序列的差異。</summary>
      <returns>序列，其中包含兩個序列之元素的差異。</returns>
      <param name="first">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素若未同時存在 <paramref name="second" /> 中，便會傳回這些元素。</param>
      <param name="second">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，若其元素同時出現在第一個序列中，便會從傳回的序列中移除這些元素。</param>
      <param name="comparer">用來比較值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">輸入序列的元素之型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>傳回序列的第 1 個元素。</summary>
      <returns>指定序列中的第 1 個元素。</returns>
      <param name="source">要傳回第 1 個元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">來源序列為空。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>傳回序列中符合指定之條件的第 1 個元素。</summary>
      <returns>序列中通過指定之述詞函式所做測試的第 1 個元素。</returns>
      <param name="source">傳回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用來測試每個元素是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">沒有任何項目符合 <paramref name="predicate" /> 中的條件。-或-來源序列為空。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>傳回序列的第 1 個元素；如果序列中沒有包含任何元素，則傳回預設值。</summary>
      <returns>如果 <paramref name="source" /> 是空的，為 default(<paramref name="TSource" />)，否則為 <paramref name="source" /> 中的第一個元素。</returns>
      <param name="source">要傳回第 1 個元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>傳回序列中符合條件的第 1 個元素；如果找不到這類元素，則傳回預設值。</summary>
      <returns>如果 <paramref name="source" /> 是空的，或者沒有任何元素會傳送 <paramref name="predicate" /> 所指定的測試，為 default(<paramref name="TSource" />)，否則為 <paramref name="source" /> 中會傳送 <paramref name="predicate" /> 所指定之測試的第一個元素。</returns>
      <param name="source">傳回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用來測試每個元素是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>依據指定的索引鍵選取器函式來群組序列的元素。</summary>
      <returns>在 C# 中為 IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;，而在 Visual Basic 中則為 IEnumerable(Of IGrouping(Of TKey, TSource))，其中每個 <see cref="T:System.Linq.IGrouping`2" /> 物件都會包含物件和索引鍵的序列。</returns>
      <param name="source">要群組其元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用來擷取各元素之索引鍵的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回的索引鍵型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>依據指定的索引鍵選取器函式來群組序列的元素，並使用指定的比較子來比較索引鍵。</summary>
      <returns>在 C# 中為 IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;，而在 Visual Basic 中則為 IEnumerable(Of IGrouping(Of TKey, TSource))，其中每個 <see cref="T:System.Linq.IGrouping`2" /> 物件都會包含物件和索引鍵的序列。</returns>
      <param name="source">要群組其元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用來擷取各元素之索引鍵的函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回的索引鍵型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>依據指定的索引鍵選取器函式來群組序列的元素，並使用指定的函式來投影每個群組的元素。</summary>
      <returns>在 C# 中為 IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;，而在 Visual Basic 中則為 IEnumerable(Of IGrouping(Of TKey, TElement))，其中每個 <see cref="T:System.Linq.IGrouping`2" /> 物件都會包含型別為 <paramref name="TElement" /> 的物件集合和索引鍵。</returns>
      <param name="source">要群組其元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用來擷取各元素之索引鍵的函式。</param>
      <param name="elementSelector">用來將每個來源元素對應至 <see cref="T:System.Linq.IGrouping`2" /> 之元素的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回的索引鍵型別。</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.IGrouping`2" /> 中的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>依據索引鍵選取器函式來群組序列中的元素。索引鍵是使用比較子來進行比較，而每個群組的元素都是利用指定的函式進行投影。</summary>
      <returns>在 C# 中為 IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;，而在 Visual Basic 中則為 IEnumerable(Of IGrouping(Of TKey, TElement))，其中每個 <see cref="T:System.Linq.IGrouping`2" /> 物件都會包含型別為 <paramref name="TElement" /> 的物件集合和索引鍵。</returns>
      <param name="source">要群組其元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用來擷取各元素之索引鍵的函式。</param>
      <param name="elementSelector">用來將每個來源元素對應至 <see cref="T:System.Linq.IGrouping`2" /> 之元素的函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回的索引鍵型別。</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.IGrouping`2" /> 中的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>依據指定的索引鍵選取器函式來群組序列的元素，並從每個群組及其索引鍵建立結果值。每個群組的元素都是利用指定的函式進行投影。</summary>
      <returns>型別為 <paramref name="TResult" /> 的元素集合，其中每個元素都表示群組及其索引鍵的投影。</returns>
      <param name="source">要群組其元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用來擷取各元素之索引鍵的函式。</param>
      <param name="elementSelector">用來將每個來源元素對應至 <see cref="T:System.Linq.IGrouping`2" /> 之元素的函式。</param>
      <param name="resultSelector">用來從各個群組建立結果值的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回的索引鍵型別。</typeparam>
      <typeparam name="TElement">每個 <see cref="T:System.Linq.IGrouping`2" /> 中的元素型別。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 所傳回的結果值型別。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>依據指定的索引鍵選取器函式來群組序列的元素，並從每個群組及其索引鍵建立結果值。索引鍵值是使用指定的比較子來進行比較，而每個群組的元素則都是利用指定的函式進行投影。</summary>
      <returns>型別為 <paramref name="TResult" /> 的元素集合，其中每個元素都表示群組及其索引鍵的投影。</returns>
      <param name="source">要群組其元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用來擷取各元素之索引鍵的函式。</param>
      <param name="elementSelector">用來將每個來源元素對應至 <see cref="T:System.Linq.IGrouping`2" /> 之元素的函式。</param>
      <param name="resultSelector">用來從各個群組建立結果值的函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回的索引鍵型別。</typeparam>
      <typeparam name="TElement">每個 <see cref="T:System.Linq.IGrouping`2" /> 中的元素型別。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 所傳回的結果值型別。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>依據指定的索引鍵選取器函式來群組序列的元素，並從每個群組及其索引鍵建立結果值。</summary>
      <returns>型別為 <paramref name="TResult" /> 的元素集合，其中每個元素都表示群組及其索引鍵的投影。</returns>
      <param name="source">要群組其元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用來擷取各元素之索引鍵的函式。</param>
      <param name="resultSelector">用來從各個群組建立結果值的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回的索引鍵型別。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 所傳回的結果值型別。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>依據指定的索引鍵選取器函式來群組序列的元素，並從每個群組及其索引鍵建立結果值。索引鍵是使用指定的比較子來進行比較。</summary>
      <returns>型別為 <paramref name="TResult" /> 的元素集合，其中每個元素都表示群組及其索引鍵的投影。</returns>
      <param name="source">要群組其元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用來擷取各元素之索引鍵的函式。</param>
      <param name="resultSelector">用來從各個群組建立結果值的函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回的索引鍵型別。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 所傳回的結果值型別。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>根據索引鍵相等與否，將兩個序列的元素相互關聯，並群組產生的結果。預設的相等比較子是用於比較索引鍵。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含透過對兩個序列執行群組聯結所取得之型別 <paramref name="TResult" /> 的元素。</returns>
      <param name="outer">要聯結的第 1 個序列。</param>
      <param name="inner">要聯結到第 1 個序列的序列。</param>
      <param name="outerKeySelector">用來從第 1 個序列每一個元素擷取聯結索引鍵的函式。</param>
      <param name="innerKeySelector">用來從第 2 個序列每一個元素擷取聯結索引鍵的函式。</param>
      <param name="resultSelector">函式，用來從第 1 個序列的元素以及第 2 個序列的相符元素集合建立結果元素。</param>
      <typeparam name="TOuter">第 1 個序列的元素之型別。</typeparam>
      <typeparam name="TInner">第 2 個序列的元素之型別。</typeparam>
      <typeparam name="TKey">索引鍵選取器函式所傳回的索引鍵之型別。</typeparam>
      <typeparam name="TResult">結果元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>根據索引鍵相等與否，將兩個序列的元素相互關聯，並群組產生的結果。使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 來比較索引鍵。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含透過對兩個序列執行群組聯結所取得之型別 <paramref name="TResult" /> 的元素。</returns>
      <param name="outer">要聯結的第 1 個序列。</param>
      <param name="inner">要聯結到第 1 個序列的序列。</param>
      <param name="outerKeySelector">用來從第 1 個序列每一個元素擷取聯結索引鍵的函式。</param>
      <param name="innerKeySelector">用來從第 2 個序列每一個元素擷取聯結索引鍵的函式。</param>
      <param name="resultSelector">函式，用來從第 1 個序列的元素以及第 2 個序列的相符元素集合建立結果元素。</param>
      <param name="comparer">用來雜湊及比較索引鍵的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TOuter">第 1 個序列的元素之型別。</typeparam>
      <typeparam name="TInner">第 2 個序列的元素之型別。</typeparam>
      <typeparam name="TKey">索引鍵選取器函式所傳回的索引鍵之型別。</typeparam>
      <typeparam name="TResult">結果元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>使用預設相等比較子來比較值，以便產生兩個序列的交集。</summary>
      <returns>序列，其中包含形成兩個序列之交集的元素。</returns>
      <param name="first">傳回其獨特元素同時出現在 <paramref name="second" /> 中的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="second">傳回其獨特元素同時出現在第 1 個序列中的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">輸入序列的元素之型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 來比較值，以便產生兩個序列的交集。</summary>
      <returns>序列，其中包含形成兩個序列之交集的元素。</returns>
      <param name="first">傳回其獨特元素同時出現在 <paramref name="second" /> 中的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="second">傳回其獨特元素同時出現在第 1 個序列中的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="comparer">用來比較值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">輸入序列的元素之型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>根據相符索引鍵，將兩個序列的元素相互關聯。預設的相等比較子是用於比較索引鍵。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含透過對兩個序列執行內部聯結所取得之型別 <paramref name="TResult" /> 的元素。</returns>
      <param name="outer">要聯結的第 1 個序列。</param>
      <param name="inner">要聯結到第 1 個序列的序列。</param>
      <param name="outerKeySelector">用來從第 1 個序列每一個元素擷取聯結索引鍵的函式。</param>
      <param name="innerKeySelector">用來從第 2 個序列每一個元素擷取聯結索引鍵的函式。</param>
      <param name="resultSelector">用來從兩個相符元素建立結果元素的函式。</param>
      <typeparam name="TOuter">第 1 個序列的元素之型別。</typeparam>
      <typeparam name="TInner">第 2 個序列的元素之型別。</typeparam>
      <typeparam name="TKey">索引鍵選取器函式所傳回的索引鍵之型別。</typeparam>
      <typeparam name="TResult">結果元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>根據相符索引鍵，將兩個序列的元素相互關聯。使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 來比較索引鍵。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含透過對兩個序列執行內部聯結所取得之型別 <paramref name="TResult" /> 的元素。</returns>
      <param name="outer">要聯結的第 1 個序列。</param>
      <param name="inner">要聯結到第 1 個序列的序列。</param>
      <param name="outerKeySelector">用來從第 1 個序列每一個元素擷取聯結索引鍵的函式。</param>
      <param name="innerKeySelector">用來從第 2 個序列每一個元素擷取聯結索引鍵的函式。</param>
      <param name="resultSelector">用來從兩個相符元素建立結果元素的函式。</param>
      <param name="comparer">用來雜湊及比較索引鍵的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TOuter">第 1 個序列的元素之型別。</typeparam>
      <typeparam name="TInner">第 2 個序列的元素之型別。</typeparam>
      <typeparam name="TKey">索引鍵選取器函式所傳回的索引鍵之型別。</typeparam>
      <typeparam name="TResult">結果元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>傳回序列的最後 1 個元素。</summary>
      <returns>位於來源序列中最後 1 個位置的值。</returns>
      <param name="source">要傳回最後 1 個元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">來源序列為空。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>傳回序列中符合指定之條件的最後 1 個元素。</summary>
      <returns>序列中通過指定之述詞函式所做測試的最後 1 個元素。</returns>
      <param name="source">傳回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用來測試每個元素是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">沒有任何項目符合 <paramref name="predicate" /> 中的條件。-或-來源序列為空。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>傳回序列的最後 1 個元素；如果序列中沒有包含任何元素，則傳回預設值。</summary>
      <returns>如果來源序列是空的，為 default(<paramref name="TSource" />)，否則為 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 中的最後一個元素。</returns>
      <param name="source">要傳回最後 1 個元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>傳回序列中符合條件的最後 1 個元素；如果找不到這類元素，則傳回預設值。</summary>
      <returns>如果序列是空的，或是沒有任何元素通過述詞函式中的測試，為 default(<paramref name="TSource" />)，否則為通過述詞函式之測試的最後一個項目。</returns>
      <param name="source">傳回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用來測試每個元素是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>傳回表示序列中元素總數的 <see cref="T:System.Int64" />。</summary>
      <returns>來源序列中的元素數目。</returns>
      <param name="source">包含要計算之元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">項目數目超出 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>傳回 <see cref="T:System.Int64" />，其表示序列中符合條件的元素數目。</summary>
      <returns>數字，表示序列中符合述詞函式之條件的元素數目。</returns>
      <param name="source">包含要計算之元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用來測試每個元素是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">符合的項目數目超出 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>傳回 <see cref="T:System.Decimal" /> 值序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要判斷最大值的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>傳回 <see cref="T:System.Double" /> 值序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要判斷最大值的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>傳回 <see cref="T:System.Int32" /> 值序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要判斷最大值的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>傳回 <see cref="T:System.Int64" /> 值序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要判斷最大值的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>傳回可為 null 之 <see cref="T:System.Decimal" /> 值序列中的最大值。</summary>
      <returns>C# 中型別為 Nullable&lt;Decimal&gt; 或 Visual Basic 中型別為 Nullable(Of Decimal) 的值，其對應於序列中的最大值。</returns>
      <param name="source">要判斷最大值之可為 null 的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>傳回可為 null 之 <see cref="T:System.Double" /> 值序列中的最大值。</summary>
      <returns>C# 中型別為 Nullable&lt;Double&gt; 或 Visual Basic 中型別為 Nullable(Of Double) 的值，其對應於序列中的最大值。</returns>
      <param name="source">要判斷最大值之可為 null 的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>傳回可為 null 之 <see cref="T:System.Int32" /> 值序列中的最大值。</summary>
      <returns>C# 中型別為 Nullable&lt;Int32&gt; 或 Visual Basic 中型別為 Nullable(Of Int32) 的值，其對應於序列中的最大值。</returns>
      <param name="source">要判斷最大值之可為 null 的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>傳回可為 null 之 <see cref="T:System.Int64" /> 值序列中的最大值。</summary>
      <returns>C# 中型別為 Nullable&lt;Int64&gt; 或 Visual Basic 中型別為 Nullable(Of Int64) 的值，其對應於序列中的最大值。</returns>
      <param name="source">要判斷最大值之可為 null 的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>傳回可為 null 之 <see cref="T:System.Single" /> 值序列中的最大值。</summary>
      <returns>C# 中型別為 Nullable&lt;Single&gt; 或 Visual Basic 中型別為 Nullable(Of Single) 的值，其對應於序列中的最大值。</returns>
      <param name="source">要判斷最大值之可為 null 的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>傳回 <see cref="T:System.Single" /> 值序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要判斷最大值的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>傳回泛型序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要判斷最大值的值序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>在序列的每個元素上叫用轉換函式，並傳回最大 <see cref="T:System.Decimal" /> 值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要判斷最大值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>在序列的每個元素上叫用轉換函式，並傳回最大 <see cref="T:System.Double" /> 值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要判斷最大值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>在序列的每個元素上叫用轉換函式，並傳回最大 <see cref="T:System.Int32" /> 值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要判斷最大值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>在序列的每個元素上叫用轉換函式，並傳回最大 <see cref="T:System.Int64" /> 值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要判斷最大值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>在序列的每個元素上叫用轉換函式，並傳回最大的可為 null 之 <see cref="T:System.Decimal" /> 值。</summary>
      <returns>C# 中型別為 Nullable&lt;Decimal&gt; 或 Visual Basic 中型別為 Nullable(Of Decimal) 的值，其對應於序列中的最大值。</returns>
      <param name="source">要判斷最大值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>在序列的每個元素上叫用轉換函式，並傳回最大的可為 null 之 <see cref="T:System.Double" /> 值。</summary>
      <returns>C# 中型別為 Nullable&lt;Double&gt; 或 Visual Basic 中型別為 Nullable(Of Double) 的值，其對應於序列中的最大值。</returns>
      <param name="source">要判斷最大值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>在序列的每個元素上叫用轉換函式，並傳回最大的可為 null 之 <see cref="T:System.Int32" /> 值。</summary>
      <returns>C# 中型別為 Nullable&lt;Int32&gt; 或 Visual Basic 中型別為 Nullable(Of Int32) 的值，其對應於序列中的最大值。</returns>
      <param name="source">要判斷最大值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>在序列的每個元素上叫用轉換函式，並傳回最大的可為 null 之 <see cref="T:System.Int64" /> 值。</summary>
      <returns>C# 中型別為 Nullable&lt;Int64&gt; 或 Visual Basic 中型別為 Nullable(Of Int64) 的值，其對應於序列中的最大值。</returns>
      <param name="source">要判斷最大值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>在序列的每個元素上叫用轉換函式，並傳回最大的可為 null 之 <see cref="T:System.Single" /> 值。</summary>
      <returns>C# 中型別為 Nullable&lt;Single&gt; 或 Visual Basic 中型別為 Nullable(Of Single) 的值，其對應於序列中的最大值。</returns>
      <param name="source">要判斷最大值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>在序列的每個元素上叫用轉換函式，並傳回最大 <see cref="T:System.Single" /> 值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要判斷最大值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>在泛型序列的每個元素上叫用轉換函式，並傳回最大的結果值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要判斷最大值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" />所傳回的值型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>傳回 <see cref="T:System.Decimal" /> 值序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">要判斷最小值的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>傳回 <see cref="T:System.Double" /> 值序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">要判斷最小值的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>傳回 <see cref="T:System.Int32" /> 值序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">要判斷最小值的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>傳回 <see cref="T:System.Int64" /> 值序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">要判斷最小值的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>傳回可為 null 之 <see cref="T:System.Decimal" /> 值序列中的最小值。</summary>
      <returns>C# 中型別為 Nullable&lt;Decimal&gt; 或 Visual Basic 中型別為 Nullable(Of Decimal) 的值，其對應於序列中的最小值。</returns>
      <param name="source">要判斷最小值之可為 null 的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>傳回可為 null 之 <see cref="T:System.Double" /> 值序列中的最小值。</summary>
      <returns>C# 中型別為 Nullable&lt;Double&gt; 或 Visual Basic 中型別為 Nullable(Of Double) 的值，其對應於序列中的最小值。</returns>
      <param name="source">要判斷最小值之可為 null 的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>傳回可為 null 之 <see cref="T:System.Int32" /> 值序列中的最小值。</summary>
      <returns>C# 中型別為 Nullable&lt;Int32&gt; 或 Visual Basic 中型別為 Nullable(Of Int32) 的值，其對應於序列中的最小值。</returns>
      <param name="source">要判斷最小值之可為 null 的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>傳回可為 null 之 <see cref="T:System.Int64" /> 值序列中的最小值。</summary>
      <returns>C# 中型別為 Nullable&lt;Int64&gt; 或 Visual Basic 中型別為 Nullable(Of Int64) 的值，其對應於序列中的最小值。</returns>
      <param name="source">要判斷最小值之可為 null 的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>傳回可為 null 之 <see cref="T:System.Single" /> 值序列中的最小值。</summary>
      <returns>C# 中型別為 Nullable&lt;Single&gt; 或 Visual Basic 中型別為 Nullable(Of Single) 的值，其對應於序列中的最小值。</returns>
      <param name="source">要判斷最小值之可為 null 的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>傳回 <see cref="T:System.Single" /> 值序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">要判斷最小值的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>傳回泛型序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">要判斷最小值的值序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>在序列的每個元素上叫用轉換函式，並傳回最小 <see cref="T:System.Decimal" /> 值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">要判斷最小值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>在序列的每個元素上叫用轉換函式，並傳回最小 <see cref="T:System.Double" /> 值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">要判斷最小值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>在序列的每個元素上叫用轉換函式，並傳回最小 <see cref="T:System.Int32" /> 值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">要判斷最小值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>在序列的每個元素上叫用轉換函式，並傳回最小 <see cref="T:System.Int64" /> 值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">要判斷最小值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>在序列的每個元素上叫用轉換函式，並傳回最小的可為 null 之 <see cref="T:System.Decimal" /> 值。</summary>
      <returns>C# 中型別為 Nullable&lt;Decimal&gt; 或 Visual Basic 中型別為 Nullable(Of Decimal) 的值，其對應於序列中的最小值。</returns>
      <param name="source">要判斷最小值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>在序列的每個元素上叫用轉換函式，並傳回最小的可為 null 之 <see cref="T:System.Double" /> 值。</summary>
      <returns>C# 中型別為 Nullable&lt;Double&gt; 或 Visual Basic 中型別為 Nullable(Of Double) 的值，其對應於序列中的最小值。</returns>
      <param name="source">要判斷最小值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>在序列的每個元素上叫用轉換函式，並傳回最小的可為 null 之 <see cref="T:System.Int32" /> 值。</summary>
      <returns>C# 中型別為 Nullable&lt;Int32&gt; 或 Visual Basic 中型別為 Nullable(Of Int32) 的值，其對應於序列中的最小值。</returns>
      <param name="source">要判斷最小值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>在序列的每個元素上叫用轉換函式，並傳回最小的可為 null 之 <see cref="T:System.Int64" /> 值。</summary>
      <returns>C# 中型別為 Nullable&lt;Int64&gt; 或 Visual Basic 中型別為 Nullable(Of Int64) 的值，其對應於序列中的最小值。</returns>
      <param name="source">要判斷最小值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>在序列的每個元素上叫用轉換函式，並傳回最小的可為 null 之 <see cref="T:System.Single" /> 值。</summary>
      <returns>C# 中型別為 Nullable&lt;Single&gt; 或 Visual Basic 中型別為 Nullable(Of Single) 的值，其對應於序列中的最小值。</returns>
      <param name="source">要判斷最小值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>在序列的每個元素上叫用轉換函式，並傳回最小 <see cref="T:System.Single" /> 值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">要判斷最小值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>在泛型序列的每個元素上叫用轉換函式，並傳回最小的結果值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">要判斷最小值的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 所傳回的值型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
      <summary>根據指定的型別來篩選 <see cref="T:System.Collections.IEnumerable" /> 的元素。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含輸入序列中型別為 <paramref name="TResult" /> 的元素。</returns>
      <param name="source">要篩選其元素的 <see cref="T:System.Collections.IEnumerable" />。</param>
      <typeparam name="TResult">用來做為序列元素之篩選依據的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>依據索引鍵，按遞增順序排序序列中的元素。</summary>
      <returns>依據索引鍵排序其元素的 <see cref="T:System.Linq.IOrderedEnumerable`1" />。</returns>
      <param name="source">要排序的值序列。</param>
      <param name="keySelector">用來從元素擷取索引鍵的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回的索引鍵型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比較子，依遞增順序排序序列中的元素。</summary>
      <returns>依據索引鍵排序其元素的 <see cref="T:System.Linq.IOrderedEnumerable`1" />。</returns>
      <param name="source">要排序的值序列。</param>
      <param name="keySelector">用來從元素擷取索引鍵的函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回的索引鍵型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>依據索引鍵，按遞減順序排序序列中的元素。</summary>
      <returns>依據索引鍵按遞減順序排序其元素的 <see cref="T:System.Linq.IOrderedEnumerable`1" />。</returns>
      <param name="source">要排序的值序列。</param>
      <param name="keySelector">用來從元素擷取索引鍵的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回的索引鍵型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比較子，依遞減順序排序序列中的元素。</summary>
      <returns>依據索引鍵按遞減順序排序其元素的 <see cref="T:System.Linq.IOrderedEnumerable`1" />。</returns>
      <param name="source">要排序的值序列。</param>
      <param name="keySelector">用來從元素擷取索引鍵的函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回的索引鍵型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
      <summary>產生在指定之範圍內的整數序列。</summary>
      <returns>C# 的 IEnumerable&lt;Int32&gt; 或 Visual Basic 的 IEnumerable(Of Int32)，其中包含一個循序整數範圍。</returns>
      <param name="start">序列中第 1 個整數的值。</param>
      <param name="count">要產生的循序整數數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小於 0。-或-<paramref name="start" /> + <paramref name="count" /> -1 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
      <summary>產生包含一個重複值的序列。</summary>
      <returns>包含重複值的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="element">要重複的值。</param>
      <param name="count">此值要在產生的序列中重複出現的次數。</param>
      <typeparam name="TResult">要在結果序列中重複出現的值之型別。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小於 0。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>反轉序列中元素的排序方向。</summary>
      <returns>其元素對應於輸入序列中反向排序之元素的序列。</returns>
      <param name="source">要反轉方向的值序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>將序列的每一個元素投影成一個新的表單。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素是對 <paramref name="source" /> 之各個元素叫用轉換函式所產生的結果。</returns>
      <param name="source">要對於叫用轉換函式的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 所傳回的值型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
      <summary>透過加入元素的索引，將序列的每個元素投影成新的表單。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素是對 <paramref name="source" /> 之各個元素叫用轉換函式所產生的結果。</returns>
      <param name="source">要對於叫用轉換函式的值序列。</param>
      <param name="selector">要套用到每個來源元素的轉換函式；此函式的第 2 個參數表示來源元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 所傳回的值型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>將序列的每個元素投影為 <see cref="T:System.Collections.Generic.IEnumerable`1" />、將產生的序列簡化成單一序列，並對其中的每個元素叫用結果選取器函式。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其項目是執行下列動作後所產生的結果：對 <paramref name="source" /> 的各個元素叫用一對多轉換函式 <paramref name="collectionSelector" />，然後再將每個序列元素及其對應的來源元素對應到結果元素。</returns>
      <param name="source">要投影的值序列。</param>
      <param name="collectionSelector">要套用到輸入序列中各個元素的轉換函式。</param>
      <param name="resultSelector">要套用到中繼序列中各個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TCollection">
        <paramref name="collectionSelector" /> 所收集的中繼元素型別。</typeparam>
      <typeparam name="TResult">產生的序列之元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="collectionSelector" /> 或 <paramref name="resultSelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>將序列的每個元素都投影成 <see cref="T:System.Collections.Generic.IEnumerable`1" />，並將產生的序列簡化成單一序列。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素是在輸入序列的各個元素上叫用一對多轉換函式所產生的結果。</returns>
      <param name="source">要投影的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 所傳回之序列的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>將序列的每個元素投影為 <see cref="T:System.Collections.Generic.IEnumerable`1" />、將產生的序列簡化成單一序列，並對其中的每個元素叫用結果選取器函式。各來源元素的索引是在該元素的中繼投影表單中使用。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其項目是執行下列動作後所產生的結果：對 <paramref name="source" /> 的各個元素叫用一對多轉換函式 <paramref name="collectionSelector" />，然後再將每個序列元素及其對應的來源元素對應到結果元素。</returns>
      <param name="source">要投影的值序列。</param>
      <param name="collectionSelector">要套用到每個來源元素的轉換函式；此函式的第 2 個參數表示來源元素的索引。</param>
      <param name="resultSelector">要套用到中繼序列中各個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TCollection">
        <paramref name="collectionSelector" /> 所收集的中繼元素型別。</typeparam>
      <typeparam name="TResult">產生的序列之元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="collectionSelector" /> 或 <paramref name="resultSelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>將序列的每個元素都投影成 <see cref="T:System.Collections.Generic.IEnumerable`1" />，並將產生的序列簡化成單一序列。各來源元素的索引是在該元素的投影表單中使用。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素是在輸入序列的各個元素上叫用一對多轉換函式所產生的結果。</returns>
      <param name="source">要投影的值序列。</param>
      <param name="selector">要套用到每個來源元素的轉換函式；此函式的第 2 個參數表示來源元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 所傳回之序列的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>使用元素之型別的預設相等比較子來比較元素，以判斷兩個序列是否相等。</summary>
      <returns>如果根據其型別的預設相等比較子判斷，兩個來源序列的長度相等，而且其對應元素也相等，為 true，否則為 false。</returns>
      <param name="first">要與 <paramref name="second" /> 比較的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="second">要與第 1 個序列比較的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">輸入序列的元素之型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 來比較元素，以判斷兩個序列是否相等。</summary>
      <returns>如果根據 <paramref name="comparer" /> 判斷，兩個來源序列的長度相等，而且其對應元素的比較也相等，為 true，否則為 false。</returns>
      <param name="first">要與 <paramref name="second" /> 比較的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="second">要與第 1 個序列比較的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="comparer">用來比較元素的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">輸入序列的元素之型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 具有多個項目。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>傳回序列的唯一一個元素，如果序列中不是正好一個元素，則擲回例外狀況。</summary>
      <returns>輸入序列的單一元素。</returns>
      <param name="source">要傳回單一元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">包含一個以上項目的輸入序列。-或-輸入序列是空的。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>傳回序列中符合指定之條件的唯一一個元素，如果有一個以上這類元素，則擲回例外狀況。</summary>
      <returns>輸入序列中符合條件的單一元素。</returns>
      <param name="source">要傳回單一元素的來源 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用來測試元素是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">沒有任何項目符合 <paramref name="predicate" /> 中的條件。-或-超過一個項目符合 <paramref name="predicate" /> 中的條件。-或-來源序列為空。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>傳回序列的唯一一個元素，如果序列是空白，為預設值，如果序列中有一個以上的元素，此方法就會擲回例外狀況。</summary>
      <returns>輸入序列的單一元素；如果序列沒有包含任何元素，為 default(<paramref name="TSource" />)。</returns>
      <param name="source">要傳回單一元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">包含一個以上項目的輸入序列。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>傳回序列中符合指定之條件的唯一一個元素，如果沒有這類元素，為預設值，如果有一個以上的元素符合條件，此方法就會擲回例外狀況。</summary>
      <returns>輸入序列中符合條件的單一元素；如果找不到這類元素，為 default(<paramref name="TSource" />)。</returns>
      <param name="source">要傳回單一元素的來源 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用來測試元素是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>略過序列中指定的元素數目，然後傳回其餘元素。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含出現在輸入序列中指定之索引後面的元素。</returns>
      <param name="source">傳回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="count">傳回其餘元素之前要略過的元素數目。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>只要指定的條件為 true，便略過序列中的元素，然後傳回其餘元素。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含的元素位於輸入序列中，而且是從沒有通過 <paramref name="predicate" /> 所指定測試之線性系列中的第一個元素開始。</returns>
      <param name="source">傳回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用來測試每個元素是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>只要指定的條件為 true，便略過序列中的元素，然後傳回其餘元素。元素的索引是用於述詞函式的邏輯中。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含的元素位於輸入序列中，而且是從沒有通過 <paramref name="predicate" /> 所指定測試之線性系列中的第一個元素開始。</returns>
      <param name="source">傳回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用來測試各來源元素是否符合條件的函式；此函式的第 2 個參數表示來源元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>計算 <see cref="T:System.Decimal" /> 值序列的總和。</summary>
      <returns>序列中值的總合。</returns>
      <param name="source">要計算總和的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">總和大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>計算 <see cref="T:System.Double" /> 值序列的總和。</summary>
      <returns>序列中值的總合。</returns>
      <param name="source">要計算總和的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>計算 <see cref="T:System.Int32" /> 值序列的總和。</summary>
      <returns>序列中值的總合。</returns>
      <param name="source">要計算總和的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">總和大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>計算 <see cref="T:System.Int64" /> 值序列的總和。</summary>
      <returns>序列中值的總合。</returns>
      <param name="source">要計算總和的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">總和大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>計算可為 null 之 <see cref="T:System.Decimal" /> 值序列的總和。</summary>
      <returns>序列中值的總合。</returns>
      <param name="source">要計算總和之可為 null 的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">總和大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>計算可為 null 之 <see cref="T:System.Double" /> 值序列的總和。</summary>
      <returns>序列中值的總合。</returns>
      <param name="source">要計算總和之可為 null 的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>計算可為 null 之 <see cref="T:System.Int32" /> 值序列的總和。</summary>
      <returns>序列中值的總合。</returns>
      <param name="source">要計算總和之可為 null 的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">總和大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>計算可為 null 之 <see cref="T:System.Int64" /> 值序列的總和。</summary>
      <returns>序列中值的總合。</returns>
      <param name="source">要計算總和之可為 null 的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">總和大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>計算可為 null 之 <see cref="T:System.Single" /> 值序列的總和。</summary>
      <returns>序列中值的總合。</returns>
      <param name="source">要計算總和之可為 null 的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>計算 <see cref="T:System.Single" /> 值序列的總和。</summary>
      <returns>序列中值的總合。</returns>
      <param name="source">要計算總和的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>計算在輸入序列中各元素上叫用轉換函式後所取得之 <see cref="T:System.Decimal" /> 值序列的總和。</summary>
      <returns>預計值的總合。</returns>
      <param name="source">用來計算總和的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">總和大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>計算在輸入序列中各元素上叫用轉換函式後所取得之 <see cref="T:System.Double" /> 值序列的總和。</summary>
      <returns>預計值的總合。</returns>
      <param name="source">用來計算總和的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>計算在輸入序列中各元素上叫用轉換函式後所取得之 <see cref="T:System.Int32" /> 值序列的總和。</summary>
      <returns>預計值的總合。</returns>
      <param name="source">用來計算總和的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">總和大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>計算在輸入序列中各元素上叫用轉換函式後所取得之 <see cref="T:System.Int64" /> 值序列的總和。</summary>
      <returns>預計值的總合。</returns>
      <param name="source">用來計算總和的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">總和大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>計算在輸入序列中各元素上叫用轉換函式後所取得可為 null 之 <see cref="T:System.Decimal" /> 值的總和。</summary>
      <returns>預計值的總合。</returns>
      <param name="source">用來計算總和的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">總和大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>計算在輸入序列中各元素上叫用轉換函式後所取得可為 null 之 <see cref="T:System.Double" /> 值的總和。</summary>
      <returns>預計值的總合。</returns>
      <param name="source">用來計算總和的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>計算在輸入序列中各元素上叫用轉換函式後所取得可為 null 之 <see cref="T:System.Int32" /> 值的總和。</summary>
      <returns>預計值的總合。</returns>
      <param name="source">用來計算總和的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">總和大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>計算在輸入序列中各元素上叫用轉換函式後所取得可為 null 之 <see cref="T:System.Int64" /> 值的總和。</summary>
      <returns>預計值的總合。</returns>
      <param name="source">用來計算總和的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">總和大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>計算在輸入序列中各元素上叫用轉換函式後所取得可為 null 之 <see cref="T:System.Single" /> 值的總和。</summary>
      <returns>預計值的總合。</returns>
      <param name="source">用來計算總和的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>計算在輸入序列中各元素上叫用轉換函式後所取得之 <see cref="T:System.Single" /> 值序列的總和。</summary>
      <returns>預計值的總合。</returns>
      <param name="source">用來計算總和的值序列。</param>
      <param name="selector">要套用至每個元素的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>從序列開頭傳回指定的連續元素數目。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含輸入序列開頭處指定的元素數目。</returns>
      <param name="source">傳回元素的序列。</param>
      <param name="count">要傳回的元素數目。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>只要指定的條件為 true，就會傳回序列的元素。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含輸入序列中的元素，而這些元素會出現在已無法通過測試的元素前面。</returns>
      <param name="source">傳回元素的序列。</param>
      <param name="predicate">用來測試每個元素是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>只要指定的條件為 true，就會傳回序列的元素。元素的索引是用於述詞函式的邏輯中。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含輸入序列中的元素，而這些元素會出現在已無法通過測試的元素前面。</returns>
      <param name="source">傳回元素的序列。</param>
      <param name="predicate">用來測試各來源元素是否符合條件的函式；此函式的第 2 個參數表示來源元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>依據索引鍵，按遞增順序執行序列中元素的後續排序作業。</summary>
      <returns>依據索引鍵排序其元素的 <see cref="T:System.Linq.IOrderedEnumerable`1" />。</returns>
      <param name="source">包含要排序之元素的 <see cref="T:System.Linq.IOrderedEnumerable`1" />。</param>
      <param name="keySelector">用來從每個元素擷取索引鍵的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回的索引鍵型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比較子，依遞增順序執行序列中元素的後續排序作業。</summary>
      <returns>依據索引鍵排序其元素的 <see cref="T:System.Linq.IOrderedEnumerable`1" />。</returns>
      <param name="source">包含要排序之元素的 <see cref="T:System.Linq.IOrderedEnumerable`1" />。</param>
      <param name="keySelector">用來從每個元素擷取索引鍵的函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回的索引鍵型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>依據索引鍵，按遞減順序執行序列中元素的後續排序作業。</summary>
      <returns>依據索引鍵按遞減順序排序其元素的 <see cref="T:System.Linq.IOrderedEnumerable`1" />。</returns>
      <param name="source">包含要排序之元素的 <see cref="T:System.Linq.IOrderedEnumerable`1" />。</param>
      <param name="keySelector">用來從每個元素擷取索引鍵的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回的索引鍵型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比較子，依遞減順序執行序列中元素的後續排序作業。</summary>
      <returns>依據索引鍵按遞減順序排序其元素的 <see cref="T:System.Linq.IOrderedEnumerable`1" />。</returns>
      <param name="source">包含要排序之元素的 <see cref="T:System.Linq.IOrderedEnumerable`1" />。</param>
      <param name="keySelector">用來從每個元素擷取索引鍵的函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回的索引鍵型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>從 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 建立陣列。</summary>
      <returns>陣列，其中包含輸入序列中的元素。</returns>
      <param name="source">用來建立陣列的來源 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>根據指定的索引鍵選取器函式，從 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 建立 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>包含索引鍵和值的 <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
      <param name="source">用來建立 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的來源 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用來從每個元素擷取索引鍵的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回的索引鍵型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 為 null。-或-<paramref name="keySelector" /> 產生的索引鍵為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> 為兩個項目產生重複的索引鍵。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根據指定的索引鍵選取器函式和索引鍵比較子，從 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 建立 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>包含索引鍵和值的 <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
      <param name="source">用來建立 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的來源 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用來從每個元素擷取索引鍵的函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回的索引鍵型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 為 null。-或-<paramref name="keySelector" /> 產生的索引鍵為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> 為兩個項目產生重複的索引鍵。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>根據指定的索引鍵選取器和元素選取器函式，從 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 建立 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2" />，其中包含從輸入序列選取之型別 <paramref name="TElement" /> 的值。</returns>
      <param name="source">用來建立 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的來源 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用來從每個元素擷取索引鍵的函式。</param>
      <param name="elementSelector">用來從每個元素產生結果元素值的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回的索引鍵型別。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> 所傳回的值型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 為 null。-或-<paramref name="keySelector" /> 產生的索引鍵為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> 為兩個項目產生重複的索引鍵。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根據指定的索引鍵選取器函式、比較子和元素選取器函式，從 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 建立 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2" />，其中包含從輸入序列選取之型別 <paramref name="TElement" /> 的值。</returns>
      <param name="source">用來建立 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的來源 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用來從每個元素擷取索引鍵的函式。</param>
      <param name="elementSelector">用來從每個元素產生結果元素值的轉換函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回的索引鍵型別。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> 所傳回的值型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 為 null。-或-<paramref name="keySelector" /> 產生的索引鍵為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> 為兩個項目產生重複的索引鍵。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>從 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 建立 <see cref="T:System.Collections.Generic.List`1" />。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" />，其中包含輸入序列中的元素。</returns>
      <param name="source">用來建立 <see cref="T:System.Collections.Generic.List`1" /> 的來源 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>根據指定的索引鍵選取器函式，從 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 建立 <see cref="T:System.Linq.Lookup`2" />。</summary>
      <returns>包含索引鍵和值的 <see cref="T:System.Linq.Lookup`2" />。</returns>
      <param name="source">用來建立 <see cref="T:System.Linq.Lookup`2" /> 的來源 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用來從每個元素擷取索引鍵的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回的索引鍵型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根據指定的索引鍵選取器函式和索引鍵比較子，從 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 建立 <see cref="T:System.Linq.Lookup`2" />。</summary>
      <returns>包含索引鍵和值的 <see cref="T:System.Linq.Lookup`2" />。</returns>
      <param name="source">用來建立 <see cref="T:System.Linq.Lookup`2" /> 的來源 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用來從每個元素擷取索引鍵的函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回的索引鍵型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>根據指定的索引鍵選取器和元素選取器函式，從 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 建立 <see cref="T:System.Linq.Lookup`2" />。</summary>
      <returns>
        <see cref="T:System.Linq.Lookup`2" />，其中包含從輸入序列選取之型別 <paramref name="TElement" /> 的值。</returns>
      <param name="source">用來建立 <see cref="T:System.Linq.Lookup`2" /> 的來源 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用來從每個元素擷取索引鍵的函式。</param>
      <param name="elementSelector">用來從每個元素產生結果元素值的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回的索引鍵型別。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> 所傳回的值型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根據指定的索引鍵選取器函式、比較子和元素選取器函式，從 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 建立 <see cref="T:System.Linq.Lookup`2" />。</summary>
      <returns>
        <see cref="T:System.Linq.Lookup`2" />，其中包含從輸入序列選取之型別 <paramref name="TElement" /> 的值。</returns>
      <param name="source">用來建立 <see cref="T:System.Linq.Lookup`2" /> 的來源 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用來從每個元素擷取索引鍵的函式。</param>
      <param name="elementSelector">用來從每個元素產生結果元素值的轉換函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回的索引鍵型別。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> 所傳回的值型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>使用預設相等比較值來比較值，以便產生兩個序列的集合等位。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含來自兩個輸入序列的元素，但不包括重複的元素。</returns>
      <param name="first">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其獨特元素構成第一個等位集合。</param>
      <param name="second">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其獨特元素構成第二個等位集合。</param>
      <typeparam name="TSource">輸入序列的元素之型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 產生兩個序列的集合等位。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含來自兩個輸入序列的元素，但不包括重複的元素。</returns>
      <param name="first">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其獨特元素構成第一個等位集合。</param>
      <param name="second">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其獨特元素構成第二個等位集合。</param>
      <param name="comparer">要比較值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">輸入序列的元素之型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>根據述詞來篩選值序列。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含輸入序列中符合條件的元素。</returns>
      <param name="source">要篩選的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用來測試每個元素是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>根據述詞來篩選值序列。述詞函式的邏輯中使用各元素的索引。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含輸入序列中符合條件的元素。</returns>
      <param name="source">要篩選的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用來測試各來源元素是否符合條件的函式；此函式的第 2 個參數表示來源元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>使用指定的述詞函式來合併兩個序列。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含兩個輸入序列的合併元素。</returns>
      <param name="first">要合併的第 1 個序列。</param>
      <param name="second">要合併的第 2 個序列。</param>
      <param name="resultSelector">指定如何從兩個序列合併元素的函式。</param>
      <typeparam name="TFirst">第 1 個輸入序列的元素型別。</typeparam>
      <typeparam name="TSecond">第 2 個輸入序列的元素型別。</typeparam>
      <typeparam name="TResult">結果序列的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 為 null。</exception>
    </member>
    <member name="T:System.Linq.EnumerableExecutor">
      <summary>表示運算式樹狀架構，並且提供在重新撰寫後執行運算式樹狀架構的功能。</summary>
    </member>
    <member name="M:System.Linq.EnumerableExecutor.#ctor">
      <summary>初始化 <see cref="T:System.Linq.EnumerableExecutor" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Linq.EnumerableExecutor`1">
      <summary>表示運算式樹狀架構，並且提供在重新撰寫後執行運算式樹狀架構的功能。</summary>
      <typeparam name="T">執行運算式樹狀架構所產生之值的資料型別。</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableExecutor`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>初始化 <see cref="T:System.Linq.EnumerableExecutor`1" /> 類別的新執行個體。</summary>
      <param name="expression">與新執行個體關聯的運算式樹狀架構。</param>
    </member>
    <member name="T:System.Linq.EnumerableQuery">
      <summary>表示做為 <see cref="T:System.Linq.EnumerableQuery" /> 資料來源的 <see cref="T:System.Collections.IEnumerable" />。</summary>
    </member>
    <member name="M:System.Linq.EnumerableQuery.#ctor">
      <summary>初始化 <see cref="T:System.Linq.EnumerableQuery" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Linq.EnumerableQuery`1">
      <summary>表示做為 <see cref="T:System.Linq.IQueryable`1" /> 資料來源的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合。</summary>
      <typeparam name="T">集合中的資料型別。</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>初始化 <see cref="T:System.Linq.EnumerableQuery`1" /> 類別的新執行個體，並使其與 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合產生關聯。</summary>
      <param name="enumerable">與新執行個體關聯的集合。</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>初始化 <see cref="T:System.Linq.EnumerableQuery`1" /> 類別的新執行個體，並使其與運算式樹狀架構產生關聯。</summary>
      <param name="expression">與新執行個體關聯的運算式樹狀架構。</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回可以逐一查看關聯之 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合的列舉程式，或者如果為 null，則逐一查看重新寫入運算式樹狀架構所產生的集合，做為 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 資料來源上的查詢並且執行。</summary>
      <returns>可以用來逐一查看關聯之資料來源的列舉程式。</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回可以逐一查看關聯之 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合的列舉程式，或者如果為 null，則逐一查看重新寫入運算式樹狀架構所產生的集合，做為 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 資料來源上的查詢並且執行。</summary>
      <returns>可以用來逐一查看關聯之資料來源的列舉程式。</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#ElementType">
      <summary>取得此執行個體所表示之集合中的資料型別。</summary>
      <returns>此執行個體所表示之集合中的資料型別。</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Expression">
      <summary>取得與此執行個體關聯的或表示此執行個體的運算式樹狀架構。</summary>
      <returns>與此執行個體關聯的或表示此執行個體的運算式樹狀架構。</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Provider">
      <summary>取得與此執行個體關聯的查詢提供者。</summary>
      <returns>與此執行個體關聯的查詢提供者。</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>建構新的 <see cref="T:System.Linq.EnumerableQuery`1" /> 物件，並將其與指定的運算式樹狀架構 (表示資料的 <see cref="T:System.Linq.IQueryable`1" /> 集合) 建立關聯。</summary>
      <returns>與 <paramref name="expression" /> 相關聯的 EnumerableQuery 物件。</returns>
      <param name="expression">要執行的運算式樹狀架構。</param>
      <typeparam name="S">該 <paramref name="expression" /> 所代表之集合中的資料型別。</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary>建構新的 <see cref="T:System.Linq.EnumerableQuery`1" /> 物件，並將其與指定的運算式樹狀架構 (表示資料的 <see cref="T:System.Linq.IQueryable" /> 集合) 建立關聯。</summary>
      <returns>與 <paramref name="expression" /> 相關聯的 <see cref="T:System.Linq.EnumerableQuery`1" /> 物件。</returns>
      <param name="expression">表示資料之 <see cref="T:System.Linq.IQueryable" /> 集合的運算式樹狀架構。</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
      <summary>在無法以 <see cref="T:System.Linq.Queryable" /> 方法查詢的可列舉資料來源上，將重新寫入運算式以呼叫 <see cref="T:System.Linq.Enumerable" /> 方法後，執行運算式，而不使用 <see cref="T:System.Linq.Queryable" /> 方法。</summary>
      <returns>執行 <paramref name="expression" /> 所產生的值。</returns>
      <param name="expression">要執行的運算式樹狀架構。</param>
      <typeparam name="S">該 <paramref name="expression" /> 所代表之集合中的資料型別。</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary>在無法以 <see cref="T:System.Linq.Queryable" /> 方法查詢的可列舉資料來源上，將重新寫入運算式以呼叫 <see cref="T:System.Linq.Enumerable" /> 方法後，執行運算式，而不使用 <see cref="T:System.Linq.Queryable" /> 方法。</summary>
      <returns>執行 <paramref name="expression" /> 所產生的值。</returns>
      <param name="expression">要執行的運算式樹狀架構。</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.ToString">
      <summary>傳回可列舉集合的文字表示，如果為 null，則傳回與該執行個體關聯的運算式樹狀架構的文字表示。</summary>
      <returns>可列舉集合的文字表示，如果為 null，為與該執行個體關聯的運算式樹狀架構的文字表示。</returns>
    </member>
    <member name="T:System.Linq.IGrouping`2">
      <summary>表示有共同索引鍵的物件集合。</summary>
      <typeparam name="TKey">
        <see cref="T:System.Linq.IGrouping`2" /> 的索引鍵型別。This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.IGrouping`2" /> 中的值型別。</typeparam>
    </member>
    <member name="P:System.Linq.IGrouping`2.Key">
      <summary>取得 <see cref="T:System.Linq.IGrouping`2" /> 的索引鍵。</summary>
      <returns>
        <see cref="T:System.Linq.IGrouping`2" /> 的索引鍵。</returns>
    </member>
    <member name="T:System.Linq.ILookup`2">
      <summary>為對應索引鍵至 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 值序列的資料結構，定義索引子、大小屬性和布林值搜尋方法。</summary>
      <typeparam name="TKey">
        <see cref="T:System.Linq.ILookup`2" /> 中的索引鍵型別。</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列中的元素型別，這些元素組成 <see cref="T:System.Linq.ILookup`2" /> 中的值。</typeparam>
    </member>
    <member name="M:System.Linq.ILookup`2.Contains(`0)">
      <summary>判斷指定的索引鍵是否存在於 <see cref="T:System.Linq.ILookup`2" />。</summary>
      <returns>如果 <paramref name="key" /> 位於 <see cref="T:System.Linq.ILookup`2" /> 中為 true，否則為 false。</returns>
      <param name="key">
        <see cref="T:System.Linq.ILookup`2" /> 中要搜尋的索引鍵。</param>
    </member>
    <member name="P:System.Linq.ILookup`2.Count">
      <summary>取得 <see cref="T:System.Linq.ILookup`2" /> 中的索引鍵/值集合組數目。</summary>
      <returns>
        <see cref="T:System.Linq.ILookup`2" /> 中的索引鍵/值集合組數目。</returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Item(`0)">
      <summary>取得由指定之索引鍵進行索引的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 值序列。</summary>
      <returns>由指定之索引鍵進行索引的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 值序列。</returns>
      <param name="key">所需值序列的索引鍵。</param>
    </member>
    <member name="T:System.Linq.IOrderedEnumerable`1">
      <summary>表示排序的序列。</summary>
      <typeparam name="TElement">序列的元素之型別。</typeparam>
    </member>
    <member name="M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
      <summary>依據索引鍵，在 <see cref="T:System.Linq.IOrderedEnumerable`1" /> 的元素上執行後續的排序。</summary>
      <returns>依據索引鍵排序其元素的 <see cref="T:System.Linq.IOrderedEnumerable`1" />。</returns>
      <param name="keySelector">
        <see cref="T:System.Func`2" />，用來擷取每個元素的索引鍵。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" />，用來比較索引鍵，以便在傳回的序列中放置。</param>
      <param name="descending">true 表示依遞減順序排序元素，false 表示依遞增順序排序元素。</param>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所產生的索引鍵型別。</typeparam>
    </member>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary>表示排序作業的結果。</summary>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary>表示排序作業的結果。</summary>
      <typeparam name="T">資料來源的內容型別。This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary>提供功能，對未指定資料型別的特定資料來源評估查詢。</summary>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary>取得與此 <see cref="T:System.Linq.IQueryable" /> 執行個體關聯的運算式樹狀架構執行時，所傳回元素的型別。</summary>
      <returns>
        <see cref="T:System.Type" />，表示與此物件關聯的運算式樹狀架構執行時，所傳回元素的型別。</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary>取得與 <see cref="T:System.Linq.IQueryable" /> 之執行個體關聯的運算式樹狀架構。</summary>
      <returns>與這個 <see cref="T:System.Linq.IQueryable" /> 之執行個體相關聯的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary>取得與此資料來源關聯的查詢提供者。</summary>
      <returns>與這個資料來源相關聯的 <see cref="T:System.Linq.IQueryProvider" />。</returns>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary>提供功能，對已知資料型別的特定資料來源評估查詢。</summary>
      <typeparam name="T">資料來源中的資料型別。This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary>定義方法來建立並執行 <see cref="T:System.Linq.IQueryable" /> 物件所描述的查詢。</summary>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>建構 <see cref="T:System.Linq.IQueryable`1" /> 物件，此物件可評估由指定的運算式樹狀架構所表示的查詢。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，可評估由指定的運算式樹狀架構所表示的查詢。</returns>
      <param name="expression">代表 LINQ 查詢的運算式樹狀架構。</param>
      <typeparam name="TElement">傳回之 <see cref="T:System.Linq.IQueryable`1" /> 的元素型別。</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary>建構 <see cref="T:System.Linq.IQueryable" /> 物件，此物件可評估由指定的運算式樹狀架構所表示的查詢。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable" />，可評估由指定的運算式樹狀架構所表示的查詢。</returns>
      <param name="expression">代表 LINQ 查詢的運算式樹狀架構。</param>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary>執行由指定之運算式樹狀架構所表示的強型別查詢。</summary>
      <returns>執行指定的查詢所產生的值。</returns>
      <param name="expression">代表 LINQ 查詢的運算式樹狀架構。</param>
      <typeparam name="TResult">執行查詢所產生值的型別。</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary>執行指定之運算式樹狀架構所表示的查詢。</summary>
      <returns>執行指定的查詢所產生的值。</returns>
      <param name="expression">代表 LINQ 查詢的運算式樹狀架構。</param>
    </member>
    <member name="T:System.Linq.Lookup`2">
      <summary>表示索引鍵的集合，每個索引鍵對應至一或多個值。</summary>
      <typeparam name="TKey">
        <see cref="T:System.Linq.Lookup`2" /> 中的索引鍵型別。</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.Lookup`2" /> 中每個 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 值的元素型別。</typeparam>
    </member>
    <member name="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
      <summary>將轉換函式套用至每個索引鍵及其相關值，並傳回結果。</summary>
      <returns>集合，針對 <see cref="T:System.Linq.Lookup`2" /> 中的每個索引鍵/值集合組包含一個值。</returns>
      <param name="resultSelector">從每個索引鍵及其相關值投射結果值的函式。</param>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 所產生之結果的型別。</typeparam>
    </member>
    <member name="M:System.Linq.Lookup`2.Contains(`0)">
      <summary>判斷指定的索引鍵是否存在 <see cref="T:System.Linq.Lookup`2" /> 中。</summary>
      <returns>如果 <paramref name="key" /> 位於 <see cref="T:System.Linq.Lookup`2" /> 中為 true，否則為 false。</returns>
      <param name="key">要在 <see cref="T:System.Linq.Lookup`2" /> 中尋找的索引鍵。</param>
    </member>
    <member name="P:System.Linq.Lookup`2.Count">
      <summary>取得 <see cref="T:System.Linq.Lookup`2" /> 中的索引鍵/值集合組數目。</summary>
      <returns>
        <see cref="T:System.Linq.Lookup`2" /> 中的索引鍵/值集合組數目。</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.GetEnumerator">
      <summary>傳回會逐一查看 <see cref="T:System.Linq.Lookup`2" /> 的泛型列舉程式。</summary>
      <returns>
        <see cref="T:System.Linq.Lookup`2" /> 的列舉程式。</returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Item(`0)">
      <summary>取得由指定之索引鍵進行索引的值集合。</summary>
      <returns>由指定之索引鍵進行索引的值集合。</returns>
      <param name="key">所需值集合的索引鍵。</param>
    </member>
    <member name="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看 <see cref="T:System.Linq.Lookup`2" /> 的列舉程式。無法繼承此類別。</summary>
      <returns>
        <see cref="T:System.Linq.Lookup`2" /> 的列舉程式。</returns>
    </member>
    <member name="T:System.Linq.Queryable">
      <summary>提供一組 static (在 Visual Basic 中為 Shared) 方法，用於查詢實作 <see cref="T:System.Linq.IQueryable`1" /> 的資料結構。</summary>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
      <summary>將累加函式套用到序列上。</summary>
      <returns>最終累積值。</returns>
      <param name="source">所要彙總的序列。</param>
      <param name="func">要套用到每個元素的累加函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
      <summary>將累加函式套用到序列上。會使用指定的初始值做為初始累加器值。</summary>
      <returns>最終累積值。</returns>
      <param name="source">所要彙總的序列。</param>
      <param name="seed">初始累積值。</param>
      <param name="func">要在每個元素上叫用的累加函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TAccumulate">累積值的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
      <summary>將累加函式套用到序列上。使用指定的值做為初始累加值，並使用指定的函式來選取結果值。</summary>
      <returns>轉換後的最終累加值。</returns>
      <param name="source">所要彙總的序列。</param>
      <param name="seed">初始累積值。</param>
      <param name="func">要在每個元素上叫用的累加函式。</param>
      <param name="selector">用來將最終累加值轉換成結果值的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TAccumulate">累積值的型別。</typeparam>
      <typeparam name="TResult">結果值的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>判斷序列的所有元素是否全都符合條件。</summary>
      <returns>如果來源序列的每個元素都通過以指定之述詞進行的測試，或序列是空的，為 true，否則為 false。</returns>
      <param name="source">要測試其元素是否符合條件的序列。</param>
      <param name="predicate">用來測試每個元素是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
      <summary>判斷序列是否包含任何元素。</summary>
      <returns>如果來源序列包含任何元素，為 true，否則為 false。</returns>
      <param name="source">要檢查是否為空白的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>判斷序列的任何元素是否符合條件。</summary>
      <returns>如果來源序列中的任何元素通過以指定之述詞進行的測試，為 true，否則為 false。</returns>
      <param name="source">要測試其元素是否符合條件的序列。</param>
      <param name="predicate">用來測試每個元素是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>將泛型 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 轉換成泛型 <see cref="T:System.Linq.IQueryable`1" />。</summary>
      <returns>代表輸入序列的 <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source">所要轉換的序列。</param>
      <typeparam name="TElement">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
      <summary>將 <see cref="T:System.Collections.IEnumerable" /> 轉換為 <see cref="T:System.Linq.IQueryable" />。</summary>
      <returns>代表輸入序列的 <see cref="T:System.Linq.IQueryable" />。</returns>
      <param name="source">所要轉換的序列。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 不會針對某些 <paramref name="T" /> 實作 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
      <summary>計算 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>值序列的平均。</returns>
      <param name="source">要計算平均值的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
      <summary>計算 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>值序列的平均。</returns>
      <param name="source">要計算平均值的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
      <summary>計算 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>值序列的平均。</returns>
      <param name="source">要計算平均值的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
      <summary>計算 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>值序列的平均。</returns>
      <param name="source">要計算平均值的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>計算可為 null 之 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>值序列的平均值，如果 source 序列為空白或只含有 null 值，為 null。</returns>
      <param name="source">要計算平均值之可為 null 的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>計算可為 null 之 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>值序列的平均值，如果 source 序列為空白或只含有 null 值，為 null。</returns>
      <param name="source">要計算平均值之可為 null 的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>計算可為 null 之 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>值序列的平均值，如果 source 序列為空白或只含有 null 值，為 null。</returns>
      <param name="source">要計算平均值之可為 null 的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>計算可為 null 之 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>值序列的平均值，如果 source 序列為空白或只含有 null 值，為 null。</returns>
      <param name="source">要計算平均值之可為 null 的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>計算可為 null 之 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>值序列的平均值，如果 source 序列為空白或只含有 null 值，為 null。</returns>
      <param name="source">要計算平均值之可為 null 的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
      <summary>計算 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>值序列的平均。</returns>
      <param name="source">要計算平均值的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>值序列的平均。</returns>
      <param name="source">用來計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>值序列的平均。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>值序列的平均。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>值序列的平均。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>計算在輸入序列中各元素上叫用投影函式後所取得可為 null 之 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>值序列的平均值，如果 <paramref name="source" /> 序列為空白或只含有 null 值，為 null。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>計算在輸入序列中各元素上叫用投影函式後所取得可為 null 之 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>值序列的平均值，如果 <paramref name="source" /> 序列為空白或只含有 null 值，為 null。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>計算在輸入序列中各元素上叫用投影函式後所取得可為 null 之 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>值序列的平均值，如果 <paramref name="source" /> 序列為空白或只含有 null 值，為 null。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>計算在輸入序列中各元素上叫用投影函式後所取得可為 null 之 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>值序列的平均值，如果 <paramref name="source" /> 序列為空白或只含有 null 值，為 null。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>計算在輸入序列中各元素上叫用投影函式後所取得可為 null 之 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>值序列的平均值，如果 <paramref name="source" /> 序列為空白或只含有 null 值，為 null。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>值序列的平均。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何項目。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
      <summary>將 <see cref="T:System.Linq.IQueryable" /> 的元素轉換成指定的型別。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，包含已轉換成指定之型別的每個來源序列元素。</returns>
      <param name="source">包含要轉換之元素的 <see cref="T:System.Linq.IQueryable" />。</param>
      <typeparam name="TResult">
        <paramref name="source" /> 的元素所要轉換的目標型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidCastException">無法將序列中的項目轉換為型別 <paramref name="TResult" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>串連兩個序列。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其中包含兩個輸入序列的串連元素。</returns>
      <param name="source1">要串連的第 1 個序列。</param>
      <param name="source2">要串連到第 1 個序列的序列。</param>
      <typeparam name="TSource">輸入序列的元素之型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
      <summary>使用預設的相等比較子 (Comparer) 來判斷序列是否包含指定的元素。</summary>
      <returns>如果輸入序列包含具有指定值的元素，為 true，否則為 false。</returns>
      <param name="source">要在其中尋找 <paramref name="item" /> 的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="item">要在序列中尋找的物件。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 來判斷序列是否包含指定的元素。</summary>
      <returns>如果輸入序列包含具有指定值的元素，為 true，否則為 false。</returns>
      <param name="source">要在其中尋找 <paramref name="item" /> 的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="item">要在序列中尋找的物件。</param>
      <param name="comparer">用來比較值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
      <summary>傳回序列的元素數目。</summary>
      <returns>輸入序列中的元素數目。</returns>
      <param name="source">包含要計算之元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的項目數目大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>傳回指定之序列中符合條件的元素數目。</summary>
      <returns>序列中符合述詞函式之條件的元素數目。</returns>
      <param name="source">包含要計算之元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用來測試每個元素是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的項目數目大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
      <summary>傳回指定之序列的元素；如果序列是空的，則傳回單一集合中型別參數的預設值。</summary>
      <returns>如果 <paramref name="source" /> 是空的，為包含 default(<paramref name="TSource" />) 的 <see cref="T:System.Linq.IQueryable`1" />，否則為 <paramref name="source" />。</returns>
      <param name="source">在空白時，要傳回預設值的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
      <summary>傳回指定之序列的元素；如果序列是空的，則傳回單一集合中的指定值。</summary>
      <returns>如果 <paramref name="source" /> 是空的，為包含 <paramref name="defaultValue" /> 的 <see cref="T:System.Linq.IQueryable`1" />，否則為 <paramref name="source" />。</returns>
      <param name="source">在空白時，要傳回指定之值的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="defaultValue">在序列空白時所要傳回的值。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
      <summary>使用預設的相等比較子來比較值，以便從序列傳回獨特的元素。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其中包含來自 <paramref name="source" /> 的獨特元素。</returns>
      <param name="source">要從中移除重複元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 來比較值，以便從序列傳回獨特的元素。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其中包含來自 <paramref name="source" /> 的獨特元素。</returns>
      <param name="source">要從中移除重複元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="comparer">用來比較值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="comparer" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>傳回位於序列中指定索引處的元素。</summary>
      <returns>位於 <paramref name="source" /> 中指定之位置的元素。</returns>
      <param name="source">傳回元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="index">要擷取之元素以零為起始的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>傳回位於序列中指定索引處的元素；如果索引超出範圍，則傳回預設值。</summary>
      <returns>如果 <paramref name="index" /> 超出 <paramref name="source" /> 的範圍，為 default(<paramref name="TSource" />)，否則為位於 <paramref name="source" /> 中指定索引處的元素。</returns>
      <param name="source">傳回元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="index">要擷取之元素以零為起始的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>使用預設相等比較子來比較值，以便產生兩個序列的差異。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其中包含兩個序列的差異。</returns>
      <param name="source1">
        <see cref="T:System.Linq.IQueryable`1" />，其元素若未同時存在 <paramref name="source2" /> 中，便會傳回這些元素。</param>
      <param name="source2">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素若同時出現在第一個序列中，則不會出現在傳回的序列中。</param>
      <typeparam name="TSource">輸入序列的元素之型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 來比較值，以便產生兩個序列的差異。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其中包含兩個序列的差異。</returns>
      <param name="source1">
        <see cref="T:System.Linq.IQueryable`1" />，其元素若未同時存在 <paramref name="source2" /> 中，便會傳回這些元素。</param>
      <param name="source2">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素若同時出現在第一個序列中，則不會出現在傳回的序列中。</param>
      <param name="comparer">用來比較值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">輸入序列的元素之型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
      <summary>傳回序列的第 1 個元素。</summary>
      <returns>
        <paramref name="source" /> 的第一個元素。</returns>
      <param name="source">要傳回第 1 個元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">來源序列為空。</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>傳回序列中符合指定之條件的第 1 個元素。</summary>
      <returns>
        <paramref name="source" /> 中通過 <paramref name="predicate" /> 之測試的第一個元素。</returns>
      <param name="source">傳回元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用來測試每個元素是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">沒有任何項目符合 <paramref name="predicate" /> 中的條件。-或-來源序列為空。</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>傳回序列的第 1 個元素；如果序列中沒有包含任何元素，則傳回預設值。</summary>
      <returns>如果 <paramref name="source" /> 是空的，為 default(<paramref name="TSource" />) 否則為 <paramref name="source" /> 中的第一個元素。</returns>
      <param name="source">要傳回第 1 個元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>傳回序列中符合指定之條件的第 1 個元素；如果找不到這類元素，則傳回預設值。</summary>
      <returns>如果 <paramref name="source" /> 是空的，或是沒有任何元素通過 <paramref name="predicate" /> 所指定的測試，為 default(<paramref name="TSource" />)，否則為 <paramref name="source" /> 中通過 <paramref name="predicate" /> 指定之測試的第一個元素。</returns>
      <param name="source">傳回元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用來測試每個元素是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>依據指定的索引鍵選取器函式來群組序列的元素。</summary>
      <returns>在 C# 中為 IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;，而在 Visual Basic 中則為 IQueryable(Of IGrouping(Of TKey, TSource))，其中每個 <see cref="T:System.Linq.IGrouping`2" /> 物件都會包含物件和索引鍵的序列。</returns>
      <param name="source">要群組其元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用來擷取各元素之索引鍵的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 中表示之函式所傳回的索引鍵型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>依據指定的索引鍵選取器函式來群組序列的元素，並使用指定的比較子來比較索引鍵。</summary>
      <returns>在 C# 中為 IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;，而在 Visual Basic 中則為 IQueryable(Of IGrouping(Of TKey, TSource))，其中每個 <see cref="T:System.Linq.IGrouping`2" /> 物件都會包含物件和索引鍵的序列。</returns>
      <param name="source">要群組其元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用來擷取各元素之索引鍵的函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 中表示之函式所傳回的索引鍵型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="comparer" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
      <summary>依據指定的索引鍵選取器函式來群組序列的元素，並使用指定的函式來投影每個群組的元素。</summary>
      <returns>在 C# 中為 IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;，而在 Visual Basic 中則為 IQueryable(Of IGrouping(Of TKey, TElement))，其中每個 <see cref="T:System.Linq.IGrouping`2" /> 都包含型別 <paramref name="TElement" /> 之物件的序列和索引鍵。</returns>
      <param name="source">要群組其元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用來擷取各元素之索引鍵的函式。</param>
      <param name="elementSelector">用來將每個來源元素對應至 <see cref="T:System.Linq.IGrouping`2" /> 之元素的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 中表示之函式所傳回的索引鍵型別。</typeparam>
      <typeparam name="TElement">每個 <see cref="T:System.Linq.IGrouping`2" /> 中的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>使用指定的函式來群組序列的元素並投影每個群組的元素。索引鍵值是使用指定的比較子來進行比較。</summary>
      <returns>在 C# 中為 IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;，而在 Visual Basic 中則為 IQueryable(Of IGrouping(Of TKey, TElement))，其中每個 <see cref="T:System.Linq.IGrouping`2" /> 都包含型別 <paramref name="TElement" /> 之物件的序列和索引鍵。</returns>
      <param name="source">要群組其元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用來擷取各元素之索引鍵的函式。</param>
      <param name="elementSelector">用來將每個來源元素對應至 <see cref="T:System.Linq.IGrouping`2" /> 之元素的函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 中表示之函式所傳回的索引鍵型別。</typeparam>
      <typeparam name="TElement">每個 <see cref="T:System.Linq.IGrouping`2" /> 中的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 或 <paramref name="comparer" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
      <summary>依據指定的索引鍵選取器函式來群組序列的元素，並從每個群組及其索引鍵建立結果值。每個群組的元素都是利用指定的函式進行投影。</summary>
      <returns>T:System.Linq.IQueryable`1，其具有 <paramref name="TResult" /> 的型別引數，而且其中每個元素都代表群組及其索引鍵的投影。</returns>
      <param name="source">要群組其元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用來擷取各元素之索引鍵的函式。</param>
      <param name="elementSelector">用來將每個來源元素對應至 <see cref="T:System.Linq.IGrouping`2" /> 之元素的函式。</param>
      <param name="resultSelector">用來從各個群組建立結果值的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 中表示之函式所傳回的索引鍵型別。</typeparam>
      <typeparam name="TElement">每個 <see cref="T:System.Linq.IGrouping`2" /> 中的元素型別。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 所傳回的結果值型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 或 <paramref name="resultSelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>依據指定的索引鍵選取器函式來群組序列的元素，並從每個群組及其索引鍵建立結果值。索引鍵是使用指定的比較子來進行比較，而每個群組的元素則都是利用指定的函式進行投影。</summary>
      <returns>T:System.Linq.IQueryable`1，其具有 <paramref name="TResult" /> 的型別引數，而且其中每個元素都代表群組及其索引鍵的投影。</returns>
      <param name="source">要群組其元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用來擷取各元素之索引鍵的函式。</param>
      <param name="elementSelector">用來將每個來源元素對應至 <see cref="T:System.Linq.IGrouping`2" /> 之元素的函式。</param>
      <param name="resultSelector">用來從各個群組建立結果值的函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 中表示之函式所傳回的索引鍵型別。</typeparam>
      <typeparam name="TElement">每個 <see cref="T:System.Linq.IGrouping`2" /> 中的元素型別。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 所傳回的結果值型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 或 <paramref name="resultSelector" /> 或 <paramref name="comparer" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
      <summary>依據指定的索引鍵選取器函式來群組序列的元素，並從每個群組及其索引鍵建立結果值。</summary>
      <returns>T:System.Linq.IQueryable`1，其具有 <paramref name="TResult" /> 的型別引數，而且其中每個元素都代表群組及其索引鍵的投影。</returns>
      <param name="source">要群組其元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用來擷取各元素之索引鍵的函式。</param>
      <param name="resultSelector">用來從各個群組建立結果值的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 中表示之函式所傳回的索引鍵型別。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 所傳回的結果值型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="resultSelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>依據指定的索引鍵選取器函式來群組序列的元素，並從每個群組及其索引鍵建立結果值。索引鍵是使用指定的比較子來進行比較。</summary>
      <returns>T:System.Linq.IQueryable`1，其具有 <paramref name="TResult" /> 的型別引數，而且其中每個元素都代表群組及其索引鍵的投影。</returns>
      <param name="source">要群組其元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用來擷取各元素之索引鍵的函式。</param>
      <param name="resultSelector">用來從各個群組建立結果值的函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 中表示之函式所傳回的索引鍵型別。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 所傳回的結果值型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="resultSelector" /> 或 <paramref name="comparer" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
      <summary>根據索引鍵相等與否，將兩個序列的元素相互關聯，並群組產生的結果。預設的相等比較子是用於比較索引鍵。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其中包含透過對兩個序列執行群組聯結所取得之型別 <paramref name="TResult" /> 的元素。</returns>
      <param name="outer">要聯結的第 1 個序列。</param>
      <param name="inner">要聯結到第 1 個序列的序列。</param>
      <param name="outerKeySelector">用來從第 1 個序列每一個元素擷取聯結索引鍵的函式。</param>
      <param name="innerKeySelector">用來從第 2 個序列每一個元素擷取聯結索引鍵的函式。</param>
      <param name="resultSelector">函式，用來從第 1 個序列的元素以及第 2 個序列的相符元素集合建立結果元素。</param>
      <typeparam name="TOuter">第 1 個序列的元素之型別。</typeparam>
      <typeparam name="TInner">第 2 個序列的元素之型別。</typeparam>
      <typeparam name="TKey">索引鍵選取器函式所傳回的索引鍵之型別。</typeparam>
      <typeparam name="TResult">結果元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>根據索引鍵相等與否，將兩個序列的元素相互關聯，並群組產生的結果。使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 來比較索引鍵。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其中包含透過對兩個序列執行群組聯結所取得之型別 <paramref name="TResult" /> 的元素。</returns>
      <param name="outer">要聯結的第 1 個序列。</param>
      <param name="inner">要聯結到第 1 個序列的序列。</param>
      <param name="outerKeySelector">用來從第 1 個序列每一個元素擷取聯結索引鍵的函式。</param>
      <param name="innerKeySelector">用來從第 2 個序列每一個元素擷取聯結索引鍵的函式。</param>
      <param name="resultSelector">函式，用來從第 1 個序列的元素以及第 2 個序列的相符元素集合建立結果元素。</param>
      <param name="comparer">用來雜湊及比較索引鍵的比較子。</param>
      <typeparam name="TOuter">第 1 個序列的元素之型別。</typeparam>
      <typeparam name="TInner">第 2 個序列的元素之型別。</typeparam>
      <typeparam name="TKey">索引鍵選取器函式所傳回的索引鍵之型別。</typeparam>
      <typeparam name="TResult">結果元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>使用預設相等比較子來比較值，以便產生兩個序列的交集。</summary>
      <returns>包含兩個序列之交集的序列。</returns>
      <param name="source1">傳回其獨特元素同時出現在 <paramref name="source2" /> 中的序列。</param>
      <param name="source2">傳回其獨特元素同時出現在第 1 個序列中的序列。</param>
      <typeparam name="TSource">輸入序列的元素之型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 來比較值，以便產生兩個序列的交集。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其中包含兩個序列的交集。</returns>
      <param name="source1">傳回其獨特元素同時出現在 <paramref name="source2" /> 中的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="source2">傳回其獨特元素同時出現在第 1 個序列中的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="comparer">用來比較值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">輸入序列的元素之型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
      <summary>根據相符索引鍵，將兩個序列的元素相互關聯。預設的相等比較子是用於比較索引鍵。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其中包含透過對兩個序列執行內部聯結所取得之型別 <paramref name="TResult" /> 的元素。</returns>
      <param name="outer">要聯結的第 1 個序列。</param>
      <param name="inner">要聯結到第 1 個序列的序列。</param>
      <param name="outerKeySelector">用來從第 1 個序列每一個元素擷取聯結索引鍵的函式。</param>
      <param name="innerKeySelector">用來從第 2 個序列每一個元素擷取聯結索引鍵的函式。</param>
      <param name="resultSelector">用來從兩個相符元素建立結果元素的函式。</param>
      <typeparam name="TOuter">第 1 個序列的元素之型別。</typeparam>
      <typeparam name="TInner">第 2 個序列的元素之型別。</typeparam>
      <typeparam name="TKey">索引鍵選取器函式所傳回的索引鍵之型別。</typeparam>
      <typeparam name="TResult">結果元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>根據相符索引鍵，將兩個序列的元素相互關聯。使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 來比較索引鍵。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其具有透過對兩個序列執行內部聯結所取得之型別 <paramref name="TResult" /> 的元素。</returns>
      <param name="outer">要聯結的第 1 個序列。</param>
      <param name="inner">要聯結到第 1 個序列的序列。</param>
      <param name="outerKeySelector">用來從第 1 個序列每一個元素擷取聯結索引鍵的函式。</param>
      <param name="innerKeySelector">用來從第 2 個序列每一個元素擷取聯結索引鍵的函式。</param>
      <param name="resultSelector">用來從兩個相符元素建立結果元素的函式。</param>
      <param name="comparer">用來雜湊及比較索引鍵的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TOuter">第 1 個序列的元素之型別。</typeparam>
      <typeparam name="TInner">第 2 個序列的元素之型別。</typeparam>
      <typeparam name="TKey">索引鍵選取器函式所傳回的索引鍵之型別。</typeparam>
      <typeparam name="TResult">結果元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
      <summary>傳回序列的最後 1 個元素。</summary>
      <returns>位於 <paramref name="source" /> 中最後一個位置的值。</returns>
      <param name="source">要傳回最後 1 個元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">來源序列為空。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>傳回序列中符合指定之條件的最後 1 個元素。</summary>
      <returns>
        <paramref name="source" /> 中通過 <paramref name="predicate" /> 指定之測試的最後一個元素。</returns>
      <param name="source">傳回元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用來測試每個元素是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">沒有任何項目符合 <paramref name="predicate" /> 中的條件。-或-來源序列為空。</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>傳回序列的最後 1 個元素；如果序列中沒有包含任何元素，則傳回預設值。</summary>
      <returns>如果 <paramref name="source" /> 是空的，為 default(<paramref name="TSource" />)，否則為 <paramref name="source" /> 中的最後一個元素。</returns>
      <param name="source">要傳回最後 1 個元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>傳回序列中符合條件的最後 1 個元素；如果找不到這類元素，則傳回預設值。</summary>
      <returns>如果 <paramref name="source" /> 是空的，或是沒有任何元素通過述詞函式中的測試，為 default(<paramref name="TSource" />)，否則為 <paramref name="source" /> 中通過述詞函式之測試的最後一個元素。</returns>
      <param name="source">傳回元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用來測試每個元素是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
      <summary>傳回表示序列中元素總數的 <see cref="T:System.Int64" />。</summary>
      <returns>
        <paramref name="source" /> 中的元素數目。</returns>
      <param name="source">包含要計算之元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">項目數目超出 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>傳回 <see cref="T:System.Int64" />，其表示序列中符合條件的元素數目。</summary>
      <returns>
        <paramref name="source" /> 中符合述詞函式之條件的元素數目。</returns>
      <param name="source">包含要計算之元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用來測試每個元素是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">符合的項目數目超出 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
      <summary>傳回泛型 <see cref="T:System.Linq.IQueryable`1" /> 中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要判斷最大值的值序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>對泛型 <see cref="T:System.Linq.IQueryable`1" /> 的每個元素叫用投影函式，並傳回最大的結果值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要判斷最大值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 表示之函式所傳回的值型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
      <summary>傳回泛型 <see cref="T:System.Linq.IQueryable`1" /> 的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">要判斷最小值的值序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>對泛型 <see cref="T:System.Linq.IQueryable`1" /> 的每個元素叫用投影函式，並傳回最小的結果值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">要判斷最小值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 表示之函式所傳回的值型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
      <summary>根據指定的型別來篩選 <see cref="T:System.Linq.IQueryable" /> 的元素。</summary>
      <returns>集合，其中包含 <paramref name="source" /> 中型別為 <paramref name="TResult" /> 的元素。</returns>
      <param name="source">要篩選其元素的 <see cref="T:System.Linq.IQueryable" />。</param>
      <typeparam name="TResult">用來做為序列元素之篩選依據的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>依據索引鍵，按遞增順序排序序列中的元素。</summary>
      <returns>依據索引鍵排序其元素的 <see cref="T:System.Linq.IOrderedQueryable`1" />。</returns>
      <param name="source">要排序的值序列。</param>
      <param name="keySelector">用來從元素擷取索引鍵的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 表示之函式所傳回的索引鍵型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比較子，依遞增順序排序序列中的元素。</summary>
      <returns>依據索引鍵排序其元素的 <see cref="T:System.Linq.IOrderedQueryable`1" />。</returns>
      <param name="source">要排序的值序列。</param>
      <param name="keySelector">用來從元素擷取索引鍵的函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 表示之函式所傳回的索引鍵型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="comparer" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>依據索引鍵，按遞減順序排序序列中的元素。</summary>
      <returns>依據索引鍵按遞減順序排序其元素的 <see cref="T:System.Linq.IOrderedQueryable`1" />。</returns>
      <param name="source">要排序的值序列。</param>
      <param name="keySelector">用來從元素擷取索引鍵的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 表示之函式所傳回的索引鍵型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比較子，依遞減順序排序序列中的元素。</summary>
      <returns>依據索引鍵按遞減順序排序其元素的 <see cref="T:System.Linq.IOrderedQueryable`1" />。</returns>
      <param name="source">要排序的值序列。</param>
      <param name="keySelector">用來從元素擷取索引鍵的函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 表示之函式所傳回的索引鍵型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="comparer" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
      <summary>反轉序列中元素的排序方向。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其項目會對應於輸入序列中反向排序的元素。</returns>
      <param name="source">要反轉方向的值序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>將序列的每一個元素投影成一個新的表單。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其元素為在 <paramref name="source" /> 每一個元素上叫用投影函式的結果。</returns>
      <param name="source">要投影的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 表示之函式所傳回的值型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
      <summary>透過加入元素的索引，將序列的每個元素投影成新的表單。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其元素為在 <paramref name="source" /> 每一個元素上叫用投影函式的結果。</returns>
      <param name="source">要投影的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 表示之函式所傳回的值型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>將序列的每個元素規劃成 <see cref="T:System.Collections.Generic.IEnumerable`1" />，並在其中的每個元素上叫用結果選取器函式。每個中繼序列產生的值都會合併成單一的一維序列，然後再傳回。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其元素是執行下列動作後所產生的結果：對 <paramref name="source" /> 的每一個元素叫用一對多投影函式 <paramref name="collectionSelector" />，然後再將每個序列元素及其對應之 <paramref name="source" />  元素對應到結果元素。</returns>
      <param name="source">要投影的值序列。</param>
      <param name="collectionSelector">要套用到輸入序列中各個元素的投影函式。</param>
      <param name="resultSelector">要套用到各中繼序列之各個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TCollection">
        <paramref name="collectionSelector" /> 表示之函式所收集的中繼元素型別。</typeparam>
      <typeparam name="TResult">產生的序列之元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="collectionSelector" /> 或 <paramref name="resultSelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>將序列的每個元素都投影成 <see cref="T:System.Collections.Generic.IEnumerable`1" />，並將產生的序列合併成一個序列。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其元素是對輸入序列中每一個元素叫用一對多投影函式後所產生的結果。</returns>
      <param name="source">要投影的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 表示之函式所傳回序列的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>將序列的每個元素都投影成 <see cref="T:System.Collections.Generic.IEnumerable`1" />，以合併產生該元素之來源元素的索引。接著對各中繼序列的每個元素叫用結果選取器函式，然後將產生的值合併成單一的一維序列並傳回。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其元素是執行下列動作後所產生的結果：對 <paramref name="source" /> 的各個元素叫用一對多投影函式 <paramref name="collectionSelector" />，然後再將每個序列元素及其對應之 <paramref name="source" /> 元素對應到結果元素。</returns>
      <param name="source">要投影的值序列。</param>
      <param name="collectionSelector">要套用到輸入序列每個元素的投影函式；此函式的第 2 個參數表示來源元素的索引。</param>
      <param name="resultSelector">要套用到各中繼序列之各個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TCollection">
        <paramref name="collectionSelector" /> 表示之函式所收集的中繼元素型別。</typeparam>
      <typeparam name="TResult">產生的序列之元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="collectionSelector" /> 或 <paramref name="resultSelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>將序列的每個元素都投影成 <see cref="T:System.Collections.Generic.IEnumerable`1" />，並將產生的序列合併成一個序列。各來源元素的索引是在該元素的投影表單中使用。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其元素是對輸入序列中每一個元素叫用一對多投影函式後所產生的結果。</returns>
      <param name="source">要投影的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式；此函式的第 2 個參數表示來源元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 表示之函式所傳回序列的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>使用預設相等比較子來比較元素，以判斷兩個序列是否相等。</summary>
      <returns>如果兩個來源序列的長度相同，而且其對應元素比較結果相同，為 true，否則為 false。</returns>
      <param name="source1">
        <see cref="T:System.Linq.IQueryable`1" />，其元素要與 <paramref name="source2" /> 的元素比較。</param>
      <param name="source2">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素要與第一個序列的元素比較。</param>
      <typeparam name="TSource">輸入序列的元素之型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 來比較元素，以判斷兩個序列是否相等。</summary>
      <returns>如果兩個來源序列的長度相同，而且其對應項目比較結果相同，為 true，否則為 false。</returns>
      <param name="source1">
        <see cref="T:System.Linq.IQueryable`1" />，其元素要與 <paramref name="source2" /> 的元素比較。</param>
      <param name="source2">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素要與第一個序列的元素比較。</param>
      <param name="comparer">用來比較元素的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">輸入序列的元素之型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
      <summary>傳回序列的唯一一個元素，如果序列中不是正好一個元素，則擲回例外狀況。</summary>
      <returns>輸入序列的單一元素。</returns>
      <param name="source">要傳回單一元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 具有多個項目。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>傳回序列中符合指定之條件的唯一一個元素，如果有一個以上這類元素，則擲回例外狀況。</summary>
      <returns>輸入序列中符合 <paramref name="predicate" /> 之條件的單一元素。</returns>
      <param name="source">要傳回單一元素的來源 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用來測試元素是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">沒有任何項目符合 <paramref name="predicate" /> 中的條件。-或-超過一個項目符合 <paramref name="predicate" /> 中的條件。-或-來源序列為空。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>傳回序列的唯一一個元素，如果序列是空白，為預設值，如果序列中有一個以上的元素，此方法就會擲回例外狀況。</summary>
      <returns>輸入序列的單一元素；如果序列沒有包含任何元素，為 default(<paramref name="TSource" />)。</returns>
      <param name="source">要傳回單一元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>傳回序列中符合指定之條件的唯一一個元素，如果沒有這類元素，為預設值，如果有一個以上的元素符合條件，此方法就會擲回例外狀況。</summary>
      <returns>輸入序列中符合 <paramref name="predicate" /> 中條件的單一元素；如果找不到這類元素，為 default(<paramref name="TSource" />)。</returns>
      <param name="source">要傳回單一元素的來源 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用來測試元素是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>略過序列中指定的元素數目，然後傳回其餘元素。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其中包含出現在輸入序列中指定之索引後面的元素。</returns>
      <param name="source">傳回元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="count">傳回其餘元素之前要略過的元素數目。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>只要指定的條件為 true，便略過序列中的元素，然後傳回其餘元素。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其中包含的元素位於 <paramref name="source" /> 中，而且是從沒有通過 <paramref name="predicate" /> 所指定測試之線性系列中的第一個元素開始。</returns>
      <param name="source">傳回元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用來測試每個元素是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>只要指定的條件為 true，便略過序列中的元素，然後傳回其餘元素。元素的索引是用於述詞函式的邏輯中。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其中包含的元素位於 <paramref name="source" />，而且是從沒有通過 <paramref name="predicate" /> 所指定之測試的線性系列中第一個元素開始。</returns>
      <param name="source">傳回元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用來測試各元素是否符合條件的函式；此函式的第 2 個參數表示來源元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
      <summary>計算 <see cref="T:System.Decimal" /> 值序列的總和。</summary>
      <returns>序列中值的總合。</returns>
      <param name="source">要計算總和的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">總和大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
      <summary>計算 <see cref="T:System.Double" /> 值序列的總和。</summary>
      <returns>序列中值的總合。</returns>
      <param name="source">要計算總和的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
      <summary>計算 <see cref="T:System.Int32" /> 值序列的總和。</summary>
      <returns>序列中值的總合。</returns>
      <param name="source">要計算總和的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">總和大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
      <summary>計算 <see cref="T:System.Int64" /> 值序列的總和。</summary>
      <returns>序列中值的總合。</returns>
      <param name="source">要計算總和的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">總和大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>計算可為 null 之 <see cref="T:System.Decimal" /> 值序列的總和。</summary>
      <returns>序列中值的總合。</returns>
      <param name="source">要計算總和之可為 null 的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">總和大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>計算可為 null 之 <see cref="T:System.Double" /> 值序列的總和。</summary>
      <returns>序列中值的總合。</returns>
      <param name="source">要計算總和之可為 null 的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>計算可為 null 之 <see cref="T:System.Int32" /> 值序列的總和。</summary>
      <returns>序列中值的總合。</returns>
      <param name="source">要計算總和之可為 null 的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">總和大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>計算可為 null 之 <see cref="T:System.Int64" /> 值序列的總和。</summary>
      <returns>序列中值的總合。</returns>
      <param name="source">要計算總和之可為 null 的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">總和大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>計算可為 null 之 <see cref="T:System.Single" /> 值序列的總和。</summary>
      <returns>序列中值的總合。</returns>
      <param name="source">要計算總和之可為 null 的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
      <summary>計算 <see cref="T:System.Single" /> 值序列的總和。</summary>
      <returns>序列中值的總合。</returns>
      <param name="source">要計算總和的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Decimal" /> 值序列的總和。</summary>
      <returns>預計值的總合。</returns>
      <param name="source">型別 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">總和大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Double" /> 值序列的總和。</summary>
      <returns>預計值的總合。</returns>
      <param name="source">型別 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Int32" /> 值序列的總和。</summary>
      <returns>預計值的總合。</returns>
      <param name="source">型別 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">總和大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Int64" /> 值序列的總和。</summary>
      <returns>預計值的總合。</returns>
      <param name="source">型別 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">總和大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>計算在輸入序列中各元素上叫用投影函式後所取得可為 null 之 <see cref="T:System.Decimal" /> 值序列的總和。</summary>
      <returns>預計值的總合。</returns>
      <param name="source">型別 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">總和大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>計算在輸入序列中各元素上叫用投影函式後所取得可為 null 之 <see cref="T:System.Double" /> 值序列的總和。</summary>
      <returns>預計值的總合。</returns>
      <param name="source">型別 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>計算在輸入序列中各元素上叫用投影函式後所取得可為 null 之 <see cref="T:System.Int32" /> 值序列的總和。</summary>
      <returns>預計值的總合。</returns>
      <param name="source">型別 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">總和大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>計算在輸入序列中各元素上叫用投影函式後所取得可為 null 之 <see cref="T:System.Int64" /> 值序列的總和。</summary>
      <returns>預計值的總合。</returns>
      <param name="source">型別 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.OverflowException">總和大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>計算在輸入序列中各元素上叫用投影函式後所取得可為 null 之 <see cref="T:System.Single" /> 值序列的總和。</summary>
      <returns>預計值的總合。</returns>
      <param name="source">型別 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Single" /> 值序列的總和。</summary>
      <returns>預計值的總合。</returns>
      <param name="source">型別 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>從序列開頭傳回指定的連續元素數目。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其中包含來自 <paramref name="source" /> 開頭的指定元素數目。</returns>
      <param name="source">傳回元素的序列。</param>
      <param name="count">要傳回的元素數目。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>只要指定的條件為 true，就會傳回序列的元素。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其中包含輸入序列中的元素，而這些元素出現在已無法通過 <paramref name="predicate" /> 所指定之測試的元素前面。</returns>
      <param name="source">傳回元素的序列。</param>
      <param name="predicate">用來測試每個元素是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>只要指定的條件為 true，就會傳回序列的元素。元素的索引是用於述詞函式的邏輯中。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其中包含輸入序列中的元素，而這些元素出現在已無法通過 <paramref name="predicate" /> 所指定之測試的元素前面。</returns>
      <param name="source">傳回元素的序列。</param>
      <param name="predicate">用來測試各元素是否符合條件的函式；此函式的第 2 個參數表示來源序列中元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>依據索引鍵，按遞增順序執行序列中元素的後續排序作業。</summary>
      <returns>依據索引鍵排序其元素的 <see cref="T:System.Linq.IOrderedQueryable`1" />。</returns>
      <param name="source">包含要排序之元素的 <see cref="T:System.Linq.IOrderedQueryable`1" />。</param>
      <param name="keySelector">用來從每個元素擷取索引鍵的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 表示之函式所傳回的索引鍵型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比較子，依遞增順序執行序列中元素的後續排序作業。</summary>
      <returns>依據索引鍵排序其元素的 <see cref="T:System.Linq.IOrderedQueryable`1" />。</returns>
      <param name="source">包含要排序之元素的 <see cref="T:System.Linq.IOrderedQueryable`1" />。</param>
      <param name="keySelector">用來從每個元素擷取索引鍵的函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 表示之函式所傳回的索引鍵型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="comparer" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>依據索引鍵，按遞減順序執行序列中元素的後續排序作業。</summary>
      <returns>依據索引鍵按遞減順序排序其元素的 <see cref="T:System.Linq.IOrderedQueryable`1" />。</returns>
      <param name="source">包含要排序之元素的 <see cref="T:System.Linq.IOrderedQueryable`1" />。</param>
      <param name="keySelector">用來從每個元素擷取索引鍵的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 表示之函式所傳回的索引鍵型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比較子，依遞減順序執行序列中元素的後續排序作業。</summary>
      <returns>依據索引鍵按遞減順序排序其元素的集合。</returns>
      <param name="source">包含要排序之元素的 <see cref="T:System.Linq.IOrderedQueryable`1" />。</param>
      <param name="keySelector">用來從每個元素擷取索引鍵的函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 函式所傳回的索引鍵型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="comparer" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>使用預設相等比較值來比較值，以便產生兩個序列的集合等位。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其中包含來自兩個輸入序列的元素，但不包括重複的元素。</returns>
      <param name="source1">序列，其獨特元素構成等位作業的第 1 個集合。</param>
      <param name="source2">序列，其獨特元素構成等位作業的第 2 個集合。</param>
      <typeparam name="TSource">輸入序列的元素之型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 產生兩個序列的集合等位。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其中包含來自兩個輸入序列的元素，但不包括重複的元素。</returns>
      <param name="source1">序列，其獨特元素構成等位作業的第 1 個集合。</param>
      <param name="source2">序列，其獨特元素構成等位作業的第 2 個集合。</param>
      <param name="comparer">用來比較值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">輸入序列的元素之型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>根據述詞來篩選值序列。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其中包含輸入序列中符合 <paramref name="predicate" /> 指定之條件的元素。</returns>
      <param name="source">要篩選的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用來測試每個元素是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>根據述詞來篩選值序列。述詞函式的邏輯中使用各元素的索引。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其中包含輸入序列中符合 <paramref name="predicate" /> 指定之條件的元素。</returns>
      <param name="source">要篩選的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用來測試各元素是否符合條件的函式；此函式的第 2 個參數表示來源序列中元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>使用指定的述詞函式來合併兩個序列。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，其中包含兩個輸入序列的合併元素。</returns>
      <param name="source1">要合併的第 1 個序列。</param>
      <param name="source2">要合併的第 2 個序列。</param>
      <param name="resultSelector">指定如何從兩個序列合併元素的函式。</param>
      <typeparam name="TFirst">第 1 個輸入序列的元素型別。</typeparam>
      <typeparam name="TSecond">第 2 個輸入序列的元素型別。</typeparam>
      <typeparam name="TResult">結果序列的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2 " /> 為 null。</exception>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary>表示有二元運算子的運算式。</summary>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>分派給此節點型別的特定 visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>瀏覽此節點的結果。</returns>
      <param name="visitor">瀏覽此節點的訪客。</param>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <summary>取得值，指出是否可以減少運算式樹狀架構的節點。</summary>
      <returns>如果運算式樹狀架構節點可以精簡則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary>取得聯合或複合指派運算所使用的型別轉換函式。</summary>
      <returns>表示型別轉換函式的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary>取得值，這個值指出運算式樹狀節點是否表示對運算子的「消除」(Lifted) 呼叫。</summary>
      <returns>如果節點表示消除呼叫為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary>取得值，這個值指出運算式樹狀節點是否表示對運算子的「消除」(Lifted) 呼叫，該運算子的傳回型別對可為 null 的型別已消除。</summary>
      <returns>如果運算子的傳回型別對可為 null 的型別已消除為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary>取得二元作業的左運算元。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />，表示二元運算的左運算元。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary>取得二元作業的實作方法。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" />，表示實作的方法。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <summary>將二進位運算式節點精簡為更簡單的運算式。</summary>
      <returns>精簡的運算式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary>取得二元作業的右運算元。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />，表示二元運算的右運算元。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <summary>建立與此項目類似的新運算式，但是使用提供的子系。如果所有子系都相同，它將會傳回此運算式。</summary>
      <returns>如果沒有變更任何子系，為此運算式，或是具有更新之子系的運算式。</returns>
      <param name="left">結果的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性。</param>
      <param name="conversion">結果的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性。</param>
      <param name="right">結果的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性。</param>
    </member>
    <member name="T:System.Linq.Expressions.BlockExpression">
      <summary>表示區塊，其中包含可定義變數的運算式序列。</summary>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>分派給此節點型別的特定 visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>瀏覽此節點的結果。</returns>
      <param name="visitor">瀏覽此節點的訪客。</param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
      <summary>取得此區塊中的運算式。</summary>
      <returns>唯讀集合，包含此區塊中的所有運算式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
      <summary>傳回此運算式的節點型別。延伸節點覆寫此方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Result">
      <summary>取得此區塊中的最後 1 個運算式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 物件，表示此區塊中的最後 1 個運算式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Type">
      <summary>取得 <see cref="T:System.Linq.Expressions.Expression" /> 表示之運算式的靜態型別。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.BlockExpression.Type" />，表示運算式的靜態型別。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立與此項目類似的新運算式，但是使用提供的子系。如果所有子系都相同，它將會傳回此運算式。</summary>
      <returns>如果沒有變更任何子系則為此運算式，否則為具有更新之子系的運算式。</returns>
      <param name="variables">結果的 <see cref="P:System.Linq.Expressions.BlockExpression.Variables" /> 屬性。</param>
      <param name="expressions">結果的 <see cref="P:System.Linq.Expressions.BlockExpression.Expressions" /> 屬性。</param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Variables">
      <summary>取得此區塊中定義的變數。</summary>
      <returns>唯讀集合，包含此區塊中定義的所有變數。</returns>
    </member>
    <member name="T:System.Linq.Expressions.CatchBlock">
      <summary>表示 try 區塊中的 catch 陳述式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Body">
      <summary>取得 catch 區塊的主體。</summary>
      <returns>表示 catch 主體的 <see cref="T:System.Linq.Expressions.Expression" /> 物件。</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Filter">
      <summary>取得 <see cref="T:System.Linq.Expressions.CatchBlock" /> 篩選條件的主體。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 物件，表示 <see cref="T:System.Linq.Expressions.CatchBlock" /> 篩選條件的主體。</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Test">
      <summary>取得此處理常式所攔截 <see cref="T:System.Exception" /> 的型別。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，表示這個處理常式所攔截 <see cref="T:System.Exception" /> 的型別。</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.ToString">
      <summary>傳回 <see cref="T:System.String" />，表示目前的 <see cref="T:System.Object" />。</summary>
      <returns>
        <see cref="T:System.String" />，表示目前的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立與此項目類似的新運算式，但是使用提供的子系。如果所有子系都相同，它將會傳回此運算式。</summary>
      <returns>如果沒有變更任何子系，為此運算式，或是具有更新之子系的運算式。</returns>
      <param name="variable">結果的 <see cref="P:System.Linq.Expressions.CatchBlock.Variable" /> 屬性。</param>
      <param name="filter">結果的 <see cref="P:System.Linq.Expressions.CatchBlock.Filter" /> 屬性。</param>
      <param name="body">結果的 <see cref="P:System.Linq.Expressions.CatchBlock.Body" /> 屬性。</param>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Variable">
      <summary>取得此處理常式所攔截 <see cref="T:System.Exception" /> 物件的參考。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 物件，表示這個處理常式所攔截 <see cref="T:System.Exception" /> 物件的參考。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary>表示有條件式運算子的運算式。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>分派給此節點型別的特定 visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>瀏覽此節點的結果。</returns>
      <param name="visitor">瀏覽此節點的訪客。</param>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary>如果測試評估為 false，則取得要執行的運算式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />，表示要執行的運算式 (如果測試為 false)。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary>如果測試評估為 true，則取得要執行的運算式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />，表示要執行的運算式 (如果測試為 true)。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <summary>傳回此運算式的節點型別。延伸節點覆寫此方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary>取得條件式運算的測試。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />，表示條件式運算的測試。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
      <summary>取得 <see cref="T:System.Linq.Expressions.Expression" /> 表示之運算式的靜態型別。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.ConditionalExpression.Type" />，表示運算式的靜態型別。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立與此項目類似的新運算式，但是使用提供的子系。如果所有子系都相同，則會傳回此運算式。</summary>
      <returns>如果沒有變更任何子系則為此運算式，否則為具有更新之子系的運算式。</returns>
      <param name="test">結果的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 屬性。</param>
      <param name="ifTrue">結果的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 屬性。</param>
      <param name="ifFalse">結果的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 屬性。</param>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary>表示有常數值的運算式。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>分派給此節點型別的特定 visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>瀏覽此節點的結果。</returns>
      <param name="visitor">瀏覽此節點的訪客。</param>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <summary>傳回此 Expression 的節點型別。延伸節點覆寫此方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Type">
      <summary>取得 <see cref="T:System.Linq.Expressions.Expression" /> 表示之運算式的靜態型別。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.ConstantExpression.Type" />，表示運算式的靜態型別。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary>取得常數運算式的值。</summary>
      <returns>
        <see cref="T:System.Object" /> 等於表示之運算式的值。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DebugInfoExpression">
      <summary>發出或清除偵錯資訊的序列點。這可讓偵錯工具在偵錯時反白顯示正確的原始程式碼。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>分派給此節點型別的特定 visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>瀏覽此節點的結果。</returns>
      <param name="visitor">瀏覽此節點的訪客。</param>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <summary>取得表示原始程式檔的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</summary>
      <returns>表示原始程式檔的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <summary>取得此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的結尾欄。</summary>
      <returns>用來產生包裝運算式的程式碼結尾欄號。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <summary>取得此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的結尾行。</summary>
      <returns>用來產生包裝運算式的程式碼結尾行號。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <summary>取得值，指出 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 是否用來清除序列點。</summary>
      <returns>如果 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 是用來清除序列點為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <summary>傳回此 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns>表示此運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <summary>取得此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始欄。</summary>
      <returns>用來產生包裝運算式的程式碼起始欄號。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <summary>取得此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始行。</summary>
      <returns>用來產生包裝運算式的程式碼起始行號。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <summary>取得 <see cref="T:System.Linq.Expressions.Expression" /> 表示之運算式的靜態型別。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" />，表示運算式的靜態型別。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DefaultExpression">
      <summary>表示型別的預設值或空運算式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <summary>傳回此運算式的節點型別。延伸節點覆寫此方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.Type">
      <summary>取得 <see cref="T:System.Linq.Expressions.Expression" /> 表示之運算式的靜態型別。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DefaultExpression.Type" />，表示運算式的靜態型別。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpression">
      <summary>表示動態運算。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>分派給此節點型別的特定 visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>瀏覽此節點的結果。</returns>
      <param name="visitor">瀏覽此節點的訪客。</param>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Arguments">
      <summary>取得動態運算的引數。</summary>
      <returns>包含動態運算引數的唯讀集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Binder">
      <summary>取得 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />，用來判斷動態網站的執行階段行為。</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />，用來判斷動態網站的執行階段行為。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.DelegateType">
      <summary>取得 <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用委派的型別。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，表示 <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用委派的型別。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，表示指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="returnType">動態運算式的結果型別。</param>
      <param name="arguments">動態作業的引數。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，表示指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="returnType">動態運算式的結果型別。</param>
      <param name="arg0">動態作業的第 1 個引數。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，表示指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="returnType">動態運算式的結果型別。</param>
      <param name="arg0">動態作業的第 1 個引數。</param>
      <param name="arg1">動態作業的第 2 個引數。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，表示指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="returnType">動態運算式的結果型別。</param>
      <param name="arg0">動態作業的第 1 個引數。</param>
      <param name="arg1">動態作業的第 2 個引數。</param>
      <param name="arg2">動態作業的第 3 個引數。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，表示指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="returnType">動態運算式的結果型別。</param>
      <param name="arg0">動態作業的第 1 個引數。</param>
      <param name="arg1">動態作業的第 2 個引數。</param>
      <param name="arg2">動態作業的第 3 個引數。</param>
      <param name="arg3">傳遞至動態運算的第 4 個引數。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，表示指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="returnType">動態運算式的結果型別。</param>
      <param name="arguments">動態作業的引數。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，表示指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派型別。</param>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="arguments">動態作業的引數。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，表示指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和一個引數所繫結的動態運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派型別。</param>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="arg0">動態運算的引數。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，表示指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和兩個引數所繫結的動態運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派型別。</param>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="arg0">動態作業的第 1 個引數。</param>
      <param name="arg1">動態作業的第 2 個引數。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，表示指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和三個引數所繫結的動態運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派型別。</param>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="arg0">動態作業的第 1 個引數。</param>
      <param name="arg1">動態作業的第 2 個引數。</param>
      <param name="arg2">動態作業的第 3 個引數。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，表示指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和四個引數所繫結的動態運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派型別。</param>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="arg0">動態作業的第 1 個引數。</param>
      <param name="arg1">動態作業的第 2 個引數。</param>
      <param name="arg2">動態作業的第 3 個引數。</param>
      <param name="arg3">傳遞至動態運算的第 4 個引數。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，表示指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派型別。</param>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="arguments">動態作業的引數。</param>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.NodeType">
      <summary>傳回此運算式的節點型別。延伸節點覆寫此方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Type">
      <summary>取得 <see cref="T:System.Linq.Expressions.Expression" /> 表示之運算式的靜態型別。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.Type" />，表示運算式的靜態型別。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>比較傳送給 arguments 參數的值與 DynamicExpression 之目前執行個體的 Arguments 屬性。如果參數值與屬性相等，則會傳回目前執行個體。如果不相等，則會傳回新的 DynamicExpression 執行個體，該執行個體與目前執行個體相同，除了 Arguments 屬性設定為 arguments 參數的值以外。</summary>
      <returns>如果沒有變更任何子系，為此運算式，或是具有更新之子系的運算式。</returns>
      <param name="arguments">結果的 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 屬性。</param>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpressionVisitor">
      <summary>代表動態運算式樹狀架構的造訪者或重新寫入器。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.#ctor">
      <summary>初始化 <see cref="T:System.Linq.Expressions.DynamicExpressionVisitor" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，則會傳回 <see cref="T:System.Linq.Expressions.Expression" /> (修正的運算式)，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary>表示 <see cref="T:System.Collections.IEnumerable" /> 集合中單一元素的初始設定式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary>取得可用來將元素加入至 <see cref="T:System.Collections.IEnumerable" /> 集合的執行個體方法。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" />，表示會將項目加入至集合的執行個體方法。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary>取得引數集合，這些引數會傳遞到將元素加入至 <see cref="T:System.Collections.IEnumerable" /> 集合的方法。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，表示將元素加入至集合之方法的引數。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary>傳回 <see cref="T:System.Linq.Expressions.ElementInit" /> 物件的文字表示。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ElementInit" /> 物件的文字表示。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立與此項目類似的新運算式，但是使用提供的子系。如果所有子系都相同，它將會傳回此運算式。</summary>
      <returns>如果沒有變更任何子系，為此運算式，或是具有更新之子系的運算式。</returns>
      <param name="arguments">結果的 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 屬性。</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary>提供基底類別，表示運算式樹狀架構節點的類別可由此基底類別衍生。它也包含 static (在 Visual Basic 中為 Shared) Factory 方法來建立各種節點型別。這是個 abstract 類別。</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor">
      <summary>建構 <see cref="T:System.Linq.Expressions.Expression" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
      <summary>初始化 <see cref="T:System.Linq.Expressions.Expression" /> 類別的新執行個體。</summary>
      <param name="nodeType">
        <see cref="T:System.Linq.Expressions.ExpressionType" /> 可設定為節點型別。</param>
      <param name="type">此 <see cref="T:System.Linq.Expressions.Expression" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>分派給此節點型別的特定 visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>瀏覽此節點的結果。</returns>
      <param name="visitor">瀏覽此節點的訪客。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其表示不含溢位檢查的算術加法運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Add" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義加法運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其表示不含溢位檢查的算術加法運算。實作的方法可加以指定。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Add" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 null，而且沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義加法運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的加法指派運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的加法指派運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的加法指派運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的加法指派運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的加法指派運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的加法指派運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其表示包含溢位檢查的算術加法運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義加法運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其表示包含溢位檢查的算術加法運算。實作的方法可加以指定。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 null，而且沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義加法運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示位元 AND 運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.And" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義位元 AND 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示位元 AND 運算。實作的方法可加以指定。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.And" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 null，而且沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義位元 AND 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示只在第 1 個運算元評估為 true 時才評估第 2 個運算元的條件 AND 運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義位元 AND 運算子。-或-<paramref name="left" />.Type 和 <paramref name="right" />.Type 不是相同的布林型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示只在第 1 個運算元解析為 true 時才評估第 2 個運算元的條件 AND 運算。實作的方法可加以指定。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 null，而且沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義位元 AND 運算子。-或-<paramref name="method" /> 為 null，而且 <paramref name="left" />.Type 和 <paramref name="right" />.Type 不是相同的布林型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示位元 AND 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立表示位元 AND 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>建立表示位元 AND 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.IndexExpression" /> 以存取多維度陣列。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="array">表示多維度陣列的運算式。</param>
      <param name="indexes">包含用於對陣列進行索引之運算式的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.IndexExpression" /> 以存取陣列。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="array">表示要編制索引之陣列的運算式。</param>
      <param name="indexes">包含用於對陣列進行索引之運算式的陣列。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，表示將陣列索引運算子套用到陣序規範大於 1 的陣列。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 屬性設定為指定的值。</returns>
      <param name="array">要將 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="indexes">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 或 <paramref name="indexes" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type 不代表陣列型別。-或-<paramref name="array" />.Type 的陣序規範與 <paramref name="indexes" /> 中的項目數不符。-或-<paramref name="indexes" /> 之一個或多個項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性不代表 <see cref="T:System.Int32" /> 型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示將陣列索引運算子套用到陣序規範 1 的陣列。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="array">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="index">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 或 <paramref name="index" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type 不代表陣列型別。-或-<paramref name="array" />.Type 代表陣序規範不是 1 的陣列型別。-或-<paramref name="index" />.Type 不代表 <see cref="T:System.Int32" /> 型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，表示將陣列索引運算子套用到多維度陣列。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 屬性設定為指定的值。</returns>
      <param name="array">
        <see cref="T:System.Linq.Expressions.Expression" /> 執行個體的陣列 - 用於陣列索引運算的索引。</param>
      <param name="indexes">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的陣列，用來填入 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 或 <paramref name="indexes" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type 不代表陣列型別。-或-<paramref name="array" />.Type 的陣序規範與 <paramref name="indexes" /> 中的項目數不符。-或-<paramref name="indexes" /> 之一個或多個項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性不代表 <see cref="T:System.Int32" /> 型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示用於取得一維陣列長度的運算式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性等於 <paramref name="array" />。</returns>
      <param name="array">要將 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type 不代表陣列型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Assign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.MemberAssignment" />，表示初始化欄位或屬性。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberAssignment" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 等於 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />，且 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 屬性設定為指定的值。</returns>
      <param name="member">要將 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MemberInfo" />。</param>
      <param name="expression">要將 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 或 <paramref name="expression" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不代表欄位或屬性。-或-<paramref name="member" /> 所表示的屬性沒有 set 存取子。-或-<paramref name="expression" />.Type 無法指派給 <paramref name="member" /> 所表示之欄位或屬性的型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.MemberAssignment" />，表示使用屬性存取子方法初始化成員。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberAssignment" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />、 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性設定為 <see cref="T:System.Reflection.PropertyInfo" />，表示在 <paramref name="propertyAccessor" /> 中存取的屬性，且 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 屬性設定為 <paramref name="expression" />。</returns>
      <param name="propertyAccessor">表示屬性存取子方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="expression">要將 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 或 <paramref name="expression" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不代表屬性存取子方法。-或-<paramref name="propertyAccessor" /> 所存取的屬性沒有 set 存取子。-或-<paramref name="expression" />.Type 無法指派給 <paramref name="member" /> 所表示之欄位或屬性的型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立包含指定的運算式但沒有任何變數的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="expressions">區塊中的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立包含指定之變數和運算式的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="variables">區塊中的變數。</param>
      <param name="expressions">區塊中的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>建立包含指定之變數和運算式的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="variables">區塊中的變數。</param>
      <param name="expressions">區塊中的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立包含兩個運算式但沒有任何變數的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="arg0">區塊中的第 1 個運算式。</param>
      <param name="arg1">區塊中的第 2 個運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立包含三個運算式但沒有任何變數的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="arg0">區塊中的第 1 個運算式。</param>
      <param name="arg1">區塊中的第 2 個運算式。</param>
      <param name="arg2">區塊中的第 3 個運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立包含四個運算式但沒有任何變數的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="arg0">區塊中的第 1 個運算式。</param>
      <param name="arg1">區塊中的第 2 個運算式。</param>
      <param name="arg2">區塊中的第 3 個運算式。</param>
      <param name="arg3">區塊中的第 4 個運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立包含五個運算式但沒有任何變數的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="arg0">區塊中的第 1 個運算式。</param>
      <param name="arg1">區塊中的第 2 個運算式。</param>
      <param name="arg2">區塊中的第 3 個運算式。</param>
      <param name="arg3">區塊中的第 4 個運算式。</param>
      <param name="arg4">區塊中的第 5 個運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <summary>建立包含指定的運算式但沒有任何變數的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="expressions">區塊中的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立包含指定的運算式、有指定之結果型別、但沒有任何變數的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="type">區塊的結果型別。</param>
      <param name="expressions">區塊中的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立包含指定之變數和運算式的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="type">區塊的結果型別。</param>
      <param name="variables">區塊中的變數。</param>
      <param name="expressions">區塊中的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>建立包含指定之變數和運算式的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="type">區塊的結果型別。</param>
      <param name="variables">區塊中的變數。</param>
      <param name="expressions">區塊中的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <summary>建立包含指定的運算式、有指定之結果型別、但沒有任何變數的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="type">區塊的結果型別。</param>
      <param name="expressions">區塊中的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <summary>建立表示 break 陳述式的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Break、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />，且包含在跳躍時傳遞至目標標籤的 Null 值。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 將跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>建立表示 break 陳述式的 <see cref="T:System.Linq.Expressions.GotoExpression" />。可以指定跳躍時傳遞至標籤的值。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Break、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />，且包含在跳躍時傳遞至目標標籤的 <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 將跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">將在跳躍時傳遞至關聯標籤的值。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示含指定之型別的 break 陳述式。可以指定跳躍時傳遞至標籤的值。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Break、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />、 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為 <paramref name="type" />，且包含在跳躍時傳遞至目標標籤的 <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 將跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">將在跳躍時傳遞至關聯標籤的值。</param>
      <param name="type">要將 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為與之相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示含指定之型別的 break 陳述式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Break、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />，而 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為 <paramref name="type" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 將跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="type">要將 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為與之相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，表示呼叫不採用引數的執行個體方法。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="instance">
        <see cref="T:System.Linq.Expressions.Expression" />，指定執行個體方法呼叫的執行個體 (對 static (在 Visual Basic 中為 Shared) 方法傳遞 null)。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 為 null。-或-<paramref name="instance" /> 為 null，而且 <paramref name="method" /> 代表執行個體方法。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type 無法指派給 <paramref name="method" /> 所代表之方法的宣告型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，表示呼叫到採用引數的方法。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 屬性設定為指定的值。</returns>
      <param name="instance">要將 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" /> (針對 static (在 Visual Basic 中為 Shared) 方法傳遞 null)。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 為 null。-或-<paramref name="instance" /> 為 null，而且 <paramref name="method" /> 代表執行個體方法。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type 無法指派給 <paramref name="method" /> 所代表之方法的宣告型別。-或-<paramref name="arguments" /> 中的項目數與 <paramref name="method" /> 所代表之方法的參數數目不相等。-或-<paramref name="arguments" /> 的一個或多個項目無法指派給 <paramref name="method" /> 所代表之方法的對應參數。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，表示呼叫採用兩個引數的靜態方法。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="instance">
        <see cref="T:System.Linq.Expressions.Expression" />，指定執行個體呼叫的執行個體。(對靜態方法 (在 Visual Basic 中為 Shared 方法) 傳遞 null)。</param>
      <param name="method">表示目標方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">表示第 1 個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">表示第 2 個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，表示呼叫到不採用引數的方法。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="instance">
        <see cref="T:System.Linq.Expressions.Expression" />，指定執行個體呼叫的執行個體。(對靜態方法 (在 Visual Basic 中為 Shared 方法) 傳遞 null)。</param>
      <param name="method">表示目標方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">表示第 1 個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">表示第 2 個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">表示第 3 個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，表示呼叫到採用引數的方法。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 屬性設定為指定的值。</returns>
      <param name="instance">
        <see cref="T:System.Linq.Expressions.Expression" />，指定執行個體方法呼叫的執行個體 (對 static (在 Visual Basic 中為 Shared) 方法傳遞 null)。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的陣列，用來填入 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 為 null。-或-<paramref name="instance" /> 為 null，而且 <paramref name="method" /> 代表執行個體方法。-或-<paramref name="arguments" /> 不是 null，且其一個或多個項目為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type 無法指派給 <paramref name="method" /> 所代表之方法的宣告型別。-或-<paramref name="arguments" /> 中的項目數與 <paramref name="method" /> 所代表之方法的參數數目不相等。-或-<paramref name="arguments" /> 的一個或多個項目未指派給 <paramref name="method" /> 所代表之方法的對應參數。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，透過呼叫適當的 Factory 方法表示呼叫到執行個體方法。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，<see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 屬性等於 <paramref name="instance" />，<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 設定為 <see cref="T:System.Reflection.MethodInfo" />，表示指定的執行個體方法，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 設定為指定的引數。</returns>
      <param name="instance">
        <see cref="T:System.Linq.Expressions.Expression" />，將搜尋其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性值中的特定方法。</param>
      <param name="methodName">方法名稱。</param>
      <param name="typeArguments">
        <see cref="T:System.Type" /> 物件的陣列，這些物件可指定泛型方法的型別參數。當 methodName 指定非泛型方法時，此引數應該為 null。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的陣列，此陣列表示方法的引數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 或 <paramref name="methodName" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="instance" />.Type 或其基底型別中找不到名稱為 <paramref name="methodName" />、其型別參數符合 <paramref name="typeArguments" />，而且其參數型別符合 <paramref name="arguments" /> 的方法。-或-<paramref name="instance" />.Type 或其基底型別中找不到名稱為 <paramref name="methodName" />、其型別參數符合 <paramref name="typeArguments" />，而且其參數型別符合 <paramref name="arguments" /> 的方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，表示呼叫靜態方法 (在 Visual Basic 中為 Shared 方法)。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="method">表示目標方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 的集合，表示呼叫引數。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，表示採用一個引數之對 static 的呼叫 (在 Visual Basic 中為 Shared) 方法。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">表示第 1 個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，表示呼叫採用兩個引數的靜態方法。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">表示第 1 個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">表示第 2 個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，表示呼叫採用三個引數的靜態方法。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">表示第 1 個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">表示第 2 個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">表示第 3 個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，表示呼叫採用四個引數的靜態方法。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">表示第 1 個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">表示第 2 個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">表示第 3 個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg3">表示第 4 個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，表示呼叫採用五個引數的靜態方法。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">表示第 1 個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">表示第 2 個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">表示第 3 個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg3">表示第 4 個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg4">表示第 5 個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，表示具有引數之對 static 的呼叫 (在 Visual Basic 中為 Shared) 方法。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 屬性設定為指定的值。</returns>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" />，表示要將 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設為相等的 static (在 Visual Basic 中為 Shared) 方法。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的陣列，用來填入 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 中的項目數與 <paramref name="method" /> 所代表之方法的參數數目不相等。-或-<paramref name="arguments" /> 的一個或多個項目無法指派給 <paramref name="method" /> 所代表之方法的對應參數。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，表示透過呼叫適當的 Factory 方法呼叫到 static (在 Visual Basic 中則為 Shared) 方法。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為 <see cref="T:System.Reflection.MethodInfo" />，表示指定的 static (在 Visual Basic 中則為 Shared) 方法，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 屬性設定為指定的引數。</returns>
      <param name="type">
        <see cref="T:System.Type" />，指定包含所指定 static (在 Visual Basic 中則為 Shared) 方法的型別。</param>
      <param name="methodName">方法名稱。</param>
      <param name="typeArguments">
        <see cref="T:System.Type" /> 物件的陣列，這些物件指定泛型方法的型別參數。當 methodName 指定非泛型方法時，此引數應該為 null。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的陣列，此陣列表示方法的引數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="methodName" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="type" /> 或其基底型別中找不到名稱為 <paramref name="methodName" />、其型別參數符合 <paramref name="typeArguments" />，而且其參數型別符合 <paramref name="arguments" /> 的方法。-或-<paramref name="type" /> 或其基底型別中找不到名稱為 <paramref name="methodName" />、其型別參數符合 <paramref name="typeArguments" />，而且其參數型別符合 <paramref name="arguments" /> 的多個方法。</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.CanReduce">
      <summary>表示節點可精簡為更簡單的節點。如果傳回 true，則可呼叫 Reduce() 以產生精簡的形式。</summary>
      <returns>如果節點可以精簡則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.CatchBlock" />，表示包含已攔截 <see cref="T:System.Exception" /> 物件參考的 catch 陳述式，以便用於處理常式主體。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="variable">
        <see cref="T:System.Linq.Expressions.ParameterExpression" />，表示此處理常式所攔截 <see cref="T:System.Exception" /> 物件的參考。</param>
      <param name="body">catch 陳述式的主體。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.CatchBlock" />，表示包含 <see cref="T:System.Exception" /> 篩選條件和已攔截 <see cref="T:System.Exception" /> 物件參考的 catch 陳述式。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="variable">
        <see cref="T:System.Linq.Expressions.ParameterExpression" />，表示此處理常式所攔截 <see cref="T:System.Exception" /> 物件的參考。</param>
      <param name="body">catch 陳述式的主體。</param>
      <param name="filter">
        <see cref="T:System.Exception" /> 篩選條件的主體。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.CatchBlock" />，表示 catch 陳述式。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="type">此 <see cref="T:System.Linq.Expressions.CatchBlock" /> 將處理之 <see cref="T:System.Exception" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="body">catch 陳述式的主體。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.CatchBlock" />，表示包含 <see cref="T:System.Exception" /> 篩選條件但沒有已攔截 <see cref="T:System.Exception" /> 物件參考的 catch 陳述式。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="type">此 <see cref="T:System.Linq.Expressions.CatchBlock" /> 將處理之 <see cref="T:System.Exception" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="body">catch 陳述式的主體。</param>
      <param name="filter">
        <see cref="T:System.Exception" /> 篩選條件的主體。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <summary>建立用於清除序列點的 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的執行個體，用於清除序列點。</returns>
      <param name="document">表示原始程式檔的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示聯合運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性不表示參考型別或可為 Null 的值型別。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type 和 <paramref name="right" />.Type 無法相互轉換。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary>指定轉換函式，建立表示聯合運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="conversion">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type 和 <paramref name="right" />.Type 無法相互轉換。-或-<paramref name="conversion" /> 不是 null，而且 <paramref name="conversion" />.Type 為委派型別，並非正好只有一個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性不表示參考型別或可為 Null 的值型別。-或-<paramref name="left" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性所表示的型別無法指派至委派型別 <paramref name="conversion" />.Type 的參數型別。-或-<paramref name="right" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性不等於委派型別 <paramref name="conversion" />.Type 的傳回型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示條件陳述式的 <see cref="T:System.Linq.Expressions.ConditionalExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，且 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 屬性設定為指定的值。</returns>
      <param name="test">要將 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifTrue">要將 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifFalse">要將 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="test" /> 或 <paramref name="ifTrue" /> 或 <paramref name="ifFalse" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="test" />.Type 不是 <see cref="T:System.Boolean" />。-或-<paramref name="ifTrue" />.Type 不等於 <paramref name="ifFalse" />.Type。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <summary>建立表示條件陳述式的 <see cref="T:System.Linq.Expressions.ConditionalExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，且 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 屬性設定為指定的值。</returns>
      <param name="test">要將 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifTrue">要將 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifFalse">要將 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">要將 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary>建立 <see cref="T:System.Linq.Expressions.ConstantExpression" />，其 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 屬性設定為指定的值。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ConstantExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />，且 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 屬性設定為指定的值。</returns>
      <param name="value">要將 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 屬性設定為與之相等的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.ConstantExpression" />，其 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為指定的值。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ConstantExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />，且 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為指定的值。</returns>
      <param name="value">要將 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 屬性設定為與之相等的 <see cref="T:System.Object" />。</param>
      <param name="type">要將 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為與之相等的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 null，而且無法從 <paramref name="value" /> 的動態型別指派 <paramref name="type" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <summary>建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示 continue 陳述式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Continue、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />，且包含在跳躍時傳遞至目標標籤的 Null 值。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 將跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示含指定之型別的 continue 陳述式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Continue、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為 <paramref name="type" />，且包含在跳躍時傳遞至目標標籤的 Null 值。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 將跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="type">要將 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為與之相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary>建立表示型別轉換作業的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為指定的值。</returns>
      <param name="expression">要將 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">要將 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為與之相等的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">未定義 <paramref name="expression" />.Type 和 <paramref name="type" /> 之間的轉換運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>建立表示轉換作業的 <see cref="T:System.Linq.Expressions.UnaryExpression" />，此轉換作業已指定實作方法。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="expression">要將 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">要將 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為與之相等的 <see cref="T:System.Type" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用一個引數。</exception>
      <exception cref="T:System.InvalidOperationException">未定義 <paramref name="expression" />.Type 和 <paramref name="type" /> 之間的轉換運算子。-或-<paramref name="expression" />.Type 無法指派給 <paramref name="method" /> 所代表之方法的引數型別。-或-<paramref name="method" /> 所代表方法的傳回型別無法指派給 <paramref name="type" />。-或-<paramref name="expression" />.Type 或 <paramref name="type" /> 是不可為 Null 的值型別，且對應之不可為 Null 的值型別不等於 <paramref name="method" /> 所表示之方法的引數型別或傳回型別。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上符合 <paramref name="method" /> 說明的方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary>建立表示轉換作業的 <see cref="T:System.Linq.Expressions.UnaryExpression" />；若目標型別已溢位，此運算式便會擲回例外狀況。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為指定的值。</returns>
      <param name="expression">要將 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">要將 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為與之相等的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">未定義 <paramref name="expression" />.Type 和 <paramref name="type" /> 之間的轉換運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>建立表示轉換作業的 <see cref="T:System.Linq.Expressions.UnaryExpression" />，如果目標型別已溢位，且已指定此作業的實作方法，則此作業會擲回例外狀況。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="expression">要將 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">要將 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為與之相等的 <see cref="T:System.Type" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用一個引數。</exception>
      <exception cref="T:System.InvalidOperationException">未定義 <paramref name="expression" />.Type 和 <paramref name="type" /> 之間的轉換運算子。-或-<paramref name="expression" />.Type 無法指派給 <paramref name="method" /> 所代表之方法的引數型別。-或-<paramref name="method" /> 所代表方法的傳回型別無法指派給 <paramref name="type" />。-或-<paramref name="expression" />.Type 或 <paramref name="type" /> 是不可為 Null 的值型別，且對應之不可為 Null 的值型別不等於 <paramref name="method" /> 所表示之方法的引數型別或傳回型別。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上符合 <paramref name="method" /> 說明的方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>使用指定的時間範圍建立 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的執行個體。</returns>
      <param name="document">表示原始程式檔的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</param>
      <param name="startLine">此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始行。必須大於 0。</param>
      <param name="startColumn">此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始欄。必須大於 0。</param>
      <param name="endLine">此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的結尾行。必須大於或等於起始行。</param>
      <param name="endColumn">此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的結尾欄。如果結尾行與起始行相同，則結尾欄必須大於或等於起始欄。在任何情況下，都必須大於 0。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示運算式遞減 1。</summary>
      <returns>表示遞減後運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要遞減的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示運算式遞減 1。</summary>
      <returns>表示遞減後運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要遞減的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.DefaultExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為指定的型別。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DefaultExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Default" />，且 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為指定的型別。</returns>
      <param name="type">要將 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為與之相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示算術除法運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定的目標 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定的目標 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義加法運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立表示算術除法運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。實作的方法可加以指定。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 null，而且沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義除法運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的除法指派運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的除法指派運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的除法指派運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>指定 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 做為第 2 個引數，建立 <see cref="T:System.Linq.Expressions.ElementInit" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ElementInit" />，其 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 和 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 屬性設定為指定的值。</returns>
      <param name="addMethod">要將 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含要將 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> 或 <paramref name="arguments" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="addMethod" /> 所表示的方法名稱不是 "Add" (不區分大小寫)。-或-<paramref name="addMethod" /> 所表示的方法不是執行個體方法。-或-<paramref name="arguments" /> 所包含的項目數目與 <paramref name="addMethod" /> 所表示之方法的參數數目不同。-或-<paramref name="arguments" /> 之一個或多個項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法指派給 <paramref name="addMethod" /> 所表示之方法的對應參數型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>指定值陣列做為第 2 個引數，建立 <see cref="T:System.Linq.Expressions.ElementInit" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ElementInit" />，其 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 和 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 屬性設定為指定的值。</returns>
      <param name="addMethod">要將 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arguments">要將 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" /> 物件陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> 或 <paramref name="arguments" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">addMethod 所表示的方法名稱不是 "Add" (不區分大小寫)。-或-addMethod 所表示的方法不是執行個體方法。-或-引數包含的項目數目與 addMethod 所表示之方法的參數數目不同。-或-<paramref name="arguments" /> 之一個或多個項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法指派給 <paramref name="addMethod" /> 所表示之方法的對應參數型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Empty">
      <summary>建立具有 <see cref="T:System.Void" /> 型別的空運算式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DefaultExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Default" />，且 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為 <see cref="T:System.Void" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示相等比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義等號比較運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>建立表示相等比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。實作的方法可加以指定。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">true 可將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 true；false 可將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 false。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 null，而且沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義等號比較運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>使用 op_ExclusiveOr 做為使用者定義的型別，建立表示位元 XOR 運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 XOR 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>使用 op_ExclusiveOr 做為使用者定義的型別，建立表示位元 XOR 運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。實作的方法可加以指定。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 null，而且沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 XOR 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>使用 op_ExclusiveOr 做為使用者定義的型別，建立表示位元 XOR 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>使用 op_ExclusiveOr 做為使用者定義的型別，建立表示位元 XOR 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>使用 op_ExclusiveOr 做為使用者定義的型別，建立表示位元 XOR 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其<see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary>建立表示存取欄位的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，且 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 和 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 屬性設定為指定的值。</returns>
      <param name="expression">要將 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。若為 static (在 Visual Basic 中為 Shared)，<paramref name="expression" /> 必須是 null。</param>
      <param name="field">要將 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.FieldInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="field" /> 為 null。-或-<paramref name="field" /> 所表示的欄位不是 static (在 Visual Basic 中為 Shared)，而且 <paramref name="expression" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 無法指派給 <paramref name="field" /> 所代表之欄位的宣告型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary>建立 <see cref="T:System.Linq.Expressions.MemberExpression" />，表示存取可指定欄位名稱的欄位。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 屬性設定為 <paramref name="expression" />，且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 屬性設定為<see cref="T:System.Reflection.FieldInfo" />，表示 <paramref name="fieldName" /> 所表示的欄位。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />，其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 包含名為 <paramref name="fieldName" /> 的欄位。如果是靜態欄位，可以是 null。</param>
      <param name="fieldName">要存取的欄位名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="fieldName" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 或其基底型別中沒有定義名為 <paramref name="fieldName" /> 的欄位。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>建立表示存取欄位的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
      <param name="expression">欄位的包含物件。如果是靜態欄位，可以是 null。</param>
      <param name="type">包含欄位的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="fieldName">要存取的欄位。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary>建立 <see cref="T:System.Type" /> 物件，表示具有特定型別引數的泛型 System.Action 委派型別。</summary>
      <returns>System.Action 委派的型別，此型別有指定的型別引數。</returns>
      <param name="typeArgs">
        <see cref="T:System.Type" /> 物件的陣列，指定 System.Action 委派型別的型別引數。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> 包含四個以上的項目。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <summary>取得 <see cref="P:System.Linq.Expressions.Expression.Type" /> 物件，表示具有特定型別引數的泛型 System.Func 或 System.Action 委派型別。</summary>
      <returns>委派型別。</returns>
      <param name="typeArgs">委派的型別引數。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary>建立 <see cref="P:System.Linq.Expressions.Expression.Type" /> 物件，表示具有特定型別引數的泛型 System.Func 委派型別。最後 1 個型別引數指定已建立之委派的傳回型別。</summary>
      <returns>System.Func 委派的型別，此型別有指定的型別引數。</returns>
      <param name="typeArgs">一個由 1 個到 5 個 <see cref="T:System.Type" /> 物件組成的陣列，這些物件指定 System.Func 委派型別的型別引數。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> 包含不到一個或超過五個項目。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <summary>建立表示 "go to" 陳述式的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Goto、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為指定的值，且包含在跳躍時傳遞至目標標籤的 Null 值。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 將跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>建立表示 "go to" 陳述式的 <see cref="T:System.Linq.Expressions.GotoExpression" />。可以指定跳躍時傳遞至標籤的值。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Goto、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />，且包含在跳躍時傳遞至目標標籤的 <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 將跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">將在跳躍時傳遞至關聯標籤的值。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示含指定之型別的 "go to" 陳述式。可以指定跳躍時傳遞至標籤的值。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Goto、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為 <paramref name="type" />，且包含在跳躍時傳遞至目標標籤的 <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 將跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">將在跳躍時傳遞至關聯標籤的值。</param>
      <param name="type">要將 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為與之相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示含指定之型別的 "go to" 陳述式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Goto、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為指定的值、<see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為 <paramref name="type" />，且包含在跳躍時傳遞至目標標籤的 Null 值。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 將跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="type">要將 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為與之相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示「大於」數值比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義「大於」運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>建立表示「大於」數值比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。實作的方法可加以指定。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">true 可將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 true；false 可將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 false。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 null，而且沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義「大於」運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示「大於或等於」數值比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義「大於或等於」運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>建立表示「大於或等於」數值比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">true 可將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 true；false 可將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 false。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 null，而且沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義「大於或等於」運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，表示具有 if 陳述式的條件區塊。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，且 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 屬性設定為指定的值。<see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 屬性已設定為預設運算式，而這個方法傳回之結果 <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 的型別為 <see cref="T:System.Void" />。</returns>
      <param name="test">要將 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifTrue">要將 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，表示具有 if 和 else 陳述式的條件區塊。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，且 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 屬性設定為指定的值。這個方法所傳回之結果 <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 的型別為 <see cref="T:System.Void" />。</returns>
      <param name="test">要將 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifTrue">要將 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifFalse">要將 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示運算式值遞增 1。</summary>
      <returns>表示遞增後運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要遞增的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示運算式遞增 1。</summary>
      <returns>表示遞增後運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要遞增的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.InvocationExpression" />，將委派或 Lambda 運算式套用至引數運算式清單。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.InvocationExpression" />，可將指定的委派或 Lambda 運算式套用至所提供的引數。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />，表示要套用的委派或 Lambda 運算式。</param>
      <param name="arguments">包含 <see cref="T:System.Linq.Expressions.Expression" /> 物件的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，表示要套用委派或 Lambda 運算式的引數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 不代表委派型別或 <see cref="T:System.Linq.Expressions.Expression`1" />。-或-<paramref name="arguments" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法指派給 <paramref name="expression" /> 所表示之委派的對應參數型別。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> 包含的項目數與 <paramref name="expression" /> 所表示之委派的參數清單不同。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.InvocationExpression" />，將委派或 Lambda 運算式套用至引數運算式清單。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.InvocationExpression" />，可將指定的委派或 Lambda 運算式套用至所提供的引數。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />，表示要套用的委派或 Lambda 運算式。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的陣列，表示要套用委派或 Lambda 運算式的引數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 不代表委派型別或 <see cref="T:System.Linq.Expressions.Expression`1" />。-或-<paramref name="arguments" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法指派給 <paramref name="expression" /> 所表示之委派的對應參數型別。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> 包含的項目數與 <paramref name="expression" /> 所表示之委派的參數清單不同。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <summary>傳回運算式是否評估為 false。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的執行個體。</returns>
      <param name="expression">要評估的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>傳回運算式是否評估為 false。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的執行個體。</returns>
      <param name="expression">要評估的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <summary>傳回運算式是否評估為 true。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的執行個體。</returns>
      <param name="expression">要評估的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>傳回運算式是否評估為 true。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的執行個體。</returns>
      <param name="expression">要評估的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label">
      <summary>建立 <see cref="T:System.Linq.Expressions.LabelTarget" />，表示包含 void 型別但沒有名稱的標籤。</summary>
      <returns>新的 <see cref="T:System.Linq.Expressions.LabelTarget" />，表示包含 void 型別但沒有名稱的標籤。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <summary>建立 <see cref="T:System.Linq.Expressions.LabelExpression" />，表示沒有預設值的標籤。</summary>
      <returns>沒有預設值的 <see cref="T:System.Linq.Expressions.LabelExpression" />。</returns>
      <param name="target">此 <see cref="T:System.Linq.Expressions.LabelExpression" /> 將與之產生關聯的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.LabelExpression" />，表示包含指定之預設值的標籤。</summary>
      <returns>包含指定之預設值的 <see cref="T:System.Linq.Expressions.LabelExpression" />。</returns>
      <param name="target">此 <see cref="T:System.Linq.Expressions.LabelExpression" /> 將與之產生關聯的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="defaultValue">透過一般控制流程到達標籤時，此 <see cref="T:System.Linq.Expressions.LabelExpression" /> 的值。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
      <summary>建立 <see cref="T:System.Linq.Expressions.LabelTarget" />，表示包含 void 型別和指定之名稱的標籤。</summary>
      <returns>新的 <see cref="T:System.Linq.Expressions.LabelTarget" />，表示包含 void 型別和指定名稱的標籤。</returns>
      <param name="name">標籤的名稱。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.LabelTarget" />，表示包含指定之型別的標籤。</summary>
      <returns>新的 <see cref="T:System.Linq.Expressions.LabelTarget" />，表示包含指定之型別的標籤。</returns>
      <param name="type">跳至標籤時所傳遞值的型別。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <summary>建立 <see cref="T:System.Linq.Expressions.LabelTarget" />，表示包含指定之型別和名稱的標籤。</summary>
      <returns>新的 <see cref="T:System.Linq.Expressions.LabelTarget" />，表示包含指定之型別和名稱的標籤。</returns>
      <param name="type">跳至標籤時所傳遞值的型別。</param>
      <param name="name">標籤的名稱。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>首先透過建構委派型別來建立 LambdaExpression。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
      <param name="body">要將 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="tailCall">
        <see cref="T:System.Boolean" />，表示當編譯所建立的運算式時，是否要套用 tail 呼叫最佳化。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 物件。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.Expression`1" />，其中委派型別在編譯階段為已知。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> 屬性等於 <see cref="P:System.Linq.Expressions.Expression`1.Lambda" />，且 <see cref="P:System.Linq.Expressions.Expression`1.Body" /> 和 <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 屬性設定為指定的值。</returns>
      <param name="body">要將 <see cref="P:System.Linq.Expressions.Expression`1.Body" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="tailCall">
        <see cref="T:System.Boolean" />，表示當編譯所建立的運算式時，是否要套用 tail 呼叫最佳化。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 物件。</param>
      <typeparam name="TDelegate">委派型別。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.Expression`1" />，其中委派型別在編譯階段為已知。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> 屬性等於 <see cref="P:System.Linq.Expressions.Expression`1.Lambda" />，且 <see cref="P:System.Linq.Expressions.Expression`1.Body" /> 和 <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 屬性設定為指定的值。</returns>
      <param name="body">要將 <see cref="P:System.Linq.Expressions.Expression`1.Body" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="tailCall">
        <see cref="T:System.Boolean" />，表示當編譯所建立的運算式時，是否要套用 tail 呼叫最佳化。</param>
      <param name="parameters">陣列，其中包含用來填入 <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 物件。</param>
      <typeparam name="TDelegate">委派型別。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>首先透過建構委派型別來建立 LambdaExpression。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
      <param name="body">要將 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="tailCall">
        <see cref="T:System.Boolean" />，表示當編譯所建立的運算式時，是否要套用 tail 呼叫最佳化。</param>
      <param name="parameters">陣列，其中包含用來填入 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 物件。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.Expression`1" />，其中委派型別在編譯階段為已知。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
      <param name="body">要將 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 物件。</param>
      <typeparam name="TDelegate">委派型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 為 null。-或-<paramref name="parameters" /> 中的一個或多個項目為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> 不是委派型別。-或-<paramref name="body" />.Type 所表示的型別無法指派給 <paramref name="TDelegate" /> 的傳回型別。-或-<paramref name="parameters" /> 包含的項目數與 <paramref name="TDelegate" /> 的參數清單不同。-或-<paramref name="parameters" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法從 <paramref name="TDelegate" /> 之對應參數型別的型別指派。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>首先透過建構委派型別來建立 LambdaExpression。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
      <param name="body">要將 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 物件。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.Expression`1" />，其中委派型別在編譯階段為已知。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
      <param name="body">要將 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="parameters">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 物件的陣列，用來填入 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合。</param>
      <typeparam name="TDelegate">委派型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 為 null。-或-<paramref name="parameters" /> 中的一個或多個項目為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> 不是委派型別。-或-<paramref name="body" />.Type 所表示的型別無法指派給 <paramref name="TDelegate" /> 的傳回型別。-或-<paramref name="parameters" /> 包含的項目數與 <paramref name="TDelegate" /> 的參數清單不同。-或-<paramref name="parameters" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法從 <paramref name="TDelegate" /> 之對應參數型別的型別指派。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>首先透過建構委派型別來建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
      <param name="body">要將 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="parameters">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 物件的陣列，用來填入 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 為 null。-或-<paramref name="parameters" /> 中的一個或多個項目為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 包含十六個以上的項目。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.Expression`1" />，其中委派型別在編譯階段為已知。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> 屬性等於 <see cref="P:System.Linq.Expressions.Expression`1.Lambda" />，且 <see cref="P:System.Linq.Expressions.Expression`1.Body" /> 和 <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 屬性設定為指定的值。</returns>
      <param name="body">要將 <see cref="P:System.Linq.Expressions.Expression`1.Body" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="name">Lambda 的名稱。用於產生偵錯資訊。</param>
      <param name="tailCall">
        <see cref="T:System.Boolean" />，表示當編譯所建立的運算式時，是否要套用 tail 呼叫最佳化。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 物件。</param>
      <typeparam name="TDelegate">委派型別。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>首先透過建構委派型別來建立 LambdaExpression。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
      <param name="body">要將 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="name">Lambda 的名稱。用於偵錯資訊。</param>
      <param name="tailCall">
        <see cref="T:System.Boolean" />，表示當編譯所建立的運算式時，是否要套用 tail 呼叫最佳化。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 物件。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>首先透過建構委派型別來建立 LambdaExpression。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
      <param name="body">要將 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="name">Lambda 的名稱。用於偵錯資訊。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 物件。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.Expression`1" />，其中委派型別在編譯階段為已知。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> 屬性等於 <see cref="P:System.Linq.Expressions.Expression`1.Lambda" />，且 <see cref="P:System.Linq.Expressions.Expression`1.Body" /> 和 <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 屬性設定為指定的值。</returns>
      <param name="body">要將 <see cref="P:System.Linq.Expressions.Expression`1.Body" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="name">Lambda 的名稱。用於產生偵錯資訊。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 物件。</param>
      <typeparam name="TDelegate">委派型別。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>首先透過建構委派型別來建立 LambdaExpression。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
      <param name="delegateType">
        <see cref="P:System.Linq.Expressions.Expression.Type" />，表示 Lambda 的委派簽章。</param>
      <param name="body">要將 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="tailCall">
        <see cref="T:System.Boolean" />，表示當編譯所建立的運算式時，是否要套用 tail 呼叫最佳化。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 物件。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>首先透過建構委派型別來建立 LambdaExpression。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
      <param name="delegateType">
        <see cref="P:System.Linq.Expressions.Expression.Type" />，表示 Lambda 的委派簽章。</param>
      <param name="body">要將 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="tailCall">
        <see cref="T:System.Boolean" />，表示當編譯所建立的運算式時，是否要套用 tail 呼叫最佳化。</param>
      <param name="parameters">陣列，其中包含用來填入 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 物件。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>首先透過建構委派型別來建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />。它可用於在編譯階段不知道委派型別時。</summary>
      <returns>表示 lambda 運算式的物件，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
      <param name="delegateType">
        <see cref="T:System.Type" />，表示 Lambda 的委派簽章。</param>
      <param name="body">要將 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> 或 <paramref name="body" /> 為 null。-或-<paramref name="parameters" /> 中的一個或多個項目為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> 不表示委派型別。-或-<paramref name="body" />.Type 表示的型別無法指派給 <paramref name="delegateType" /> 所表示之委派型別的傳回型別。-或-<paramref name="parameters" /> 包含的項目數與 <paramref name="delegateType" /> 所表示之委派型別的參數清單不同。-或-<paramref name="parameters" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法從由 <paramref name="delegateType" /> 所表示之委派型別的對應參數型別指派。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>首先透過建構委派型別來建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />。它可用於在編譯階段不知道委派型別時。</summary>
      <returns>表示 lambda 運算式的物件，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
      <param name="delegateType">
        <see cref="T:System.Type" />，表示 Lambda 的委派簽章。</param>
      <param name="body">要將 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="parameters">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 物件的陣列，用來填入 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> 或 <paramref name="body" /> 為 null。-或-<paramref name="parameters" /> 中的一個或多個項目為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> 不表示委派型別。-或-<paramref name="body" />.Type 表示的型別無法指派給 <paramref name="delegateType" /> 所表示之委派型別的傳回型別。-或-<paramref name="parameters" /> 包含的項目數與 <paramref name="delegateType" /> 所表示之委派型別的參數清單不同。-或-<paramref name="parameters" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法從由 <paramref name="delegateType" /> 所表示之委派型別的對應參數型別指派。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>首先透過建構委派型別來建立 LambdaExpression。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
      <param name="delegateType">
        <see cref="P:System.Linq.Expressions.Expression.Type" />，表示 Lambda 的委派簽章。</param>
      <param name="body">要將 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="name">Lambda 的名稱。用於偵錯資訊。</param>
      <param name="tailCall">
        <see cref="T:System.Boolean" />，表示當編譯所建立的運算式時，是否要套用 tail 呼叫最佳化。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 物件。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>首先透過建構委派型別來建立 LambdaExpression。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
      <param name="delegateType">
        <see cref="P:System.Linq.Expressions.Expression.Type" />，表示 Lambda 的委派簽章。</param>
      <param name="body">要將 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="name">Lambda 的名稱。用於偵錯資訊。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 物件。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示位元左移 (Left-Shift) 運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Left-shift 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立表示位元左移 (Left-Shift) 運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 null，而且不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Left-shift 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示位元左移位指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立表示位元左移位指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>建立表示位元左移位指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示「小於」數值比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義「小於」運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>建立表示「小於」數值比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">true 可將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 true；false 可將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 false。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 null，而且沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義「小於」運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示「小於或等於」數值比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義「小於或等於」運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>建立表示「小於或等於」數值比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">true 可將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 true；false 可將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 false。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 null，而且沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義「小於或等於」運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>建立 <see cref="T:System.Linq.Expressions.MemberListBinding" />，其中成員是欄位或屬性。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，且 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 屬性設定為指定的值。</returns>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" />，表示要將 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性設定為與之相等的欄位或屬性。</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 集合的 <see cref="T:System.Linq.Expressions.ElementInit" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 為 null。-或-<paramref name="initializers" /> 的一個或多個項目為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不代表欄位或屬性。-或-<paramref name="member" /> 所表示之欄位或屬性的 <see cref="P:System.Reflection.FieldInfo.FieldType" /> 或 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 不會實作 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.MemberListBinding" />，其中成員是欄位或屬性。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，且 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 屬性設定為指定的值。</returns>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" />，表示要將 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性設定為與之相等的欄位或屬性。</param>
      <param name="initializers">
        <see cref="T:System.Linq.Expressions.ElementInit" /> 物件的陣列，用來填入 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 為 null。-或-<paramref name="initializers" /> 中的一個或多個項目為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不代表欄位或屬性。-或-<paramref name="member" /> 所表示之欄位或屬性的 <see cref="P:System.Reflection.FieldInfo.FieldType" /> 或 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 不會實作 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>根據指定的屬性存取子方法建立 <see cref="T:System.Linq.Expressions.MemberListBinding" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />、<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性設定為 <see cref="T:System.Reflection.MemberInfo" />，表示在 <paramref name="propertyAccessor" /> 中存取的屬性，且 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 會填入<paramref name="initializers" /> 的項目。</returns>
      <param name="propertyAccessor">表示屬性存取子方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 集合的 <see cref="T:System.Linq.Expressions.ElementInit" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 為 null。-或-<paramref name="initializers" /> 的一個或多個項目為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不代表屬性存取子方法。-或-<paramref name="propertyAccessor" /> 存取所表示之方法的 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 屬性不會實作 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary>根據指定的屬性存取子方法建立 <see cref="T:System.Linq.Expressions.MemberListBinding" /> 物件。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />、<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性設定為 <see cref="T:System.Reflection.MemberInfo" />，表示在 <paramref name="propertyAccessor" /> 中存取的屬性，而且 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 會填入<paramref name="initializers" /> 的項目。</returns>
      <param name="propertyAccessor">表示屬性存取子方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="initializers">
        <see cref="T:System.Linq.Expressions.ElementInit" /> 物件的陣列，用來填入 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 為 null。-或-<paramref name="initializers" /> 的一個或多個項目為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不代表屬性存取子方法。-或-<paramref name="propertyAccessor" /> 存取所表示之方法的 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 屬性不會實作 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>建立 <see cref="T:System.Linq.Expressions.ListInitExpression" />，它使用指定的 <see cref="T:System.Linq.Expressions.ElementInit" /> 物件初始化集合。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，且 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 屬性設定為指定的值。</returns>
      <param name="newExpression">要將 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 集合的 <see cref="T:System.Linq.Expressions.ElementInit" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 為 null。-或-<paramref name="initializers" /> 的一個或多個項目為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 沒有實作 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其使用名為 "Add" 的方法將元素加入至集合。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，且 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 屬性設定為指定的值。</returns>
      <param name="newExpression">要將 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 為 null。-或-<paramref name="initializers" /> 的一個或多個項目為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 沒有實作 <see cref="T:System.Collections.IEnumerable" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="newExpression" />.Type 或其基底型別中沒有宣告名為 "Add" (區分大小寫) 的執行個體方法。-或-<paramref name="newExpression" />.Type 或其基底型別上的加入方法不是正好使用一個引數。-或-<paramref name="initializers" /> 之第一個項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性所表示的型別無法指派給 <paramref name="newExpression" />.Type 或其基底型別上加入方法的引數型別。-或-<paramref name="newExpression" />.Type 和 (或) 其基底型別上有多個與引數相容且名為 "Add" (區分大小寫) 的方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.ListInitExpression" />，它使用指定的 <see cref="T:System.Linq.Expressions.ElementInit" /> 物件初始化集合。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，且 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 屬性設定為指定的值。</returns>
      <param name="newExpression">要將 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="initializers">
        <see cref="T:System.Linq.Expressions.ElementInit" /> 物件的陣列，用來填入 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 為 null。-或-<paramref name="initializers" /> 的一個或多個項目為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 沒有實作 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其使用名為 "Add" 的方法將元素加入至集合。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，且 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 屬性設定為指定的值。</returns>
      <param name="newExpression">要將 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="initializers">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的陣列，用來填入 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 為 null。-或-<paramref name="initializers" /> 的一個或多個項目為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 沒有實作 <see cref="T:System.Collections.IEnumerable" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="newExpression" />.Type 或其基底型別中沒有宣告名為 "Add" (區分大小寫) 的執行個體方法。-或-<paramref name="newExpression" />.Type 或其基底型別上的加入方法不是正好使用一個引數。-或-<paramref name="initializers" /> 之第一個項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性所表示的型別無法指派給 <paramref name="newExpression" />.Type 或其基底型別上加入方法的引數型別。-或-<paramref name="newExpression" />.Type 和 (或) 其基底型別上有多個與引數相容且名為 "Add" (區分大小寫) 的方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其使用指定的方法將元素加入至集合。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，且 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 屬性設定為指定的值。</returns>
      <param name="newExpression">要將 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="addMethod">
        <see cref="T:System.Reflection.MethodInfo" />，表示名為 "Add" (區分大小寫) 的執行個體方法，可將元素加入至集合。</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 為 null。-或-<paramref name="initializers" /> 的一個或多個項目為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 沒有實作 <see cref="T:System.Collections.IEnumerable" />。-或-<paramref name="addMethod" /> 不是 null，它不表示名為 "Add" (區分大小寫) 的執行個體方法，這個方法剛好只使用一個引數。-或-<paramref name="addMethod" /> 不是 null，而且 <paramref name="initializers" /> 之一個或多個項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性表示的型別無法指派給 <paramref name="addMethod" /> 所表示之方法的引數型別。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> 是 null，而且 <paramref name="newExpression" />.Type 或其基底型別上沒有採用一個型別相容引數之名為 "Add" 的執行個體方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其使用指定的方法將元素加入至集合。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，且 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 屬性設定為指定的值。</returns>
      <param name="newExpression">要將 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="addMethod">
        <see cref="T:System.Reflection.MethodInfo" />，表示採用一個引數的執行個體方法，可將元素加入至集合。</param>
      <param name="initializers">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的陣列，用來填入 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 為 null。-或-<paramref name="initializers" /> 的一個或多個項目為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 沒有實作 <see cref="T:System.Collections.IEnumerable" />。-或-<paramref name="addMethod" /> 不是 null，它不表示名為 "Add" (區分大小寫) 的執行個體方法，這個方法剛好只使用一個引數。-或-<paramref name="addMethod" /> 不是 null，而且 <paramref name="initializers" /> 之一個或多個項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性表示的型別無法指派給 <paramref name="addMethod" /> 所表示之方法的引數型別。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> 是 null，而且 <paramref name="newExpression" />.Type 或其基底型別上沒有採用一個型別相容引數之名為 "Add" 的執行個體方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <summary>建立包含指定之主體的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
      <param name="body">迴圈的主體。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <summary>建立包含指定之主體和 break 目標的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
      <param name="body">迴圈的主體。</param>
      <param name="break">迴圈主體所使用的 break 目標。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <summary>建立包含指定之主體的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
      <param name="body">迴圈的主體。</param>
      <param name="break">迴圈主體所使用的 break 目標。</param>
      <param name="continue">迴圈主體所使用的 continue 目標。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>透過呼叫適當的 Factory 方法來建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，指定左運算元和右運算元。</summary>
      <returns>由呼叫適當 Factory 方法所產生的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="binaryType">
        <see cref="T:System.Linq.Expressions.ExpressionType" />，指定二進位運算的型別。</param>
      <param name="left">表示左運算元的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">表示右運算元的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> 未對應到二進位運算式節點。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>透過呼叫適當的 Factory 方法來建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，指定左運算元、右運算元和實作方法。</summary>
      <returns>由呼叫適當 Factory 方法所產生的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="binaryType">
        <see cref="T:System.Linq.Expressions.ExpressionType" />，指定二進位運算的型別。</param>
      <param name="left">表示左運算元的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">表示右運算元的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">true 可將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 true；false 可將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 false。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" />，可指定實作的方法。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> 未對應到二進位運算式節點。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>透過呼叫適當的 Factory 方法來建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，指定左運算元、右運算元、實作方法和型別轉換函式。</summary>
      <returns>由呼叫適當 Factory 方法所產生的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="binaryType">
        <see cref="T:System.Linq.Expressions.ExpressionType" />，指定二進位運算的型別。</param>
      <param name="left">表示左運算元的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">表示右運算元的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">true 可將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 true；false 可將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 false。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" />，可指定實作的方法。</param>
      <param name="conversion">表示型別轉換函式的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。只有當 <paramref name="binaryType" /> 為 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> 或複合指派時，才會使用這個參數。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> 未對應到二進位運算式節點。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.CatchBlock" />，表示含指定之元素的 catch 陳述式。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="type">此 <see cref="T:System.Linq.Expressions.CatchBlock" /> 將處理之 <see cref="T:System.Exception" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="variable">
        <see cref="T:System.Linq.Expressions.ParameterExpression" />，表示此處理常式所攔截 <see cref="T:System.Exception" /> 物件的參考。</param>
      <param name="body">catch 陳述式的主體。</param>
      <param name="filter">
        <see cref="T:System.Exception" /> 篩選條件的主體。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示指定之<see cref="T:System.Linq.Expressions.GotoExpressionKind" /> 的跳躍點。也可以指定在跳躍時傳遞至標籤的值。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 <paramref name="kind" />、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為 <paramref name="type" />，且包含在跳躍時傳遞至目標標籤的 <paramref name="value" />。</returns>
      <param name="kind">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 的 <see cref="T:System.Linq.Expressions.GotoExpressionKind" />。</param>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 將跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">將在跳躍時傳遞至關聯標籤的值。</param>
      <param name="type">要將 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為與之相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.IndexExpression" />，表示存取物件中的索引屬性。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="instance">屬性所屬的物件。如果屬性為 static (在 Visual Basic 中為 shared)，則應該是 null。</param>
      <param name="indexer">
        <see cref="T:System.Linq.Expressions.Expression" />，表示要進行索引的屬性。</param>
      <param name="arguments">IEnumerable&lt;Expression&gt; (在 Visual Basic 中為 IEnumerable (Of Expression))，包含將用於對屬性進行索引的引數。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary>建立表示存取欄位或屬性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>由呼叫適當 Factory 方法所產生的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />，表示成員所屬的物件。如果是靜態成員，可以是 null。</param>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" />，說明要存取的欄位或屬性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="member" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不代表欄位或屬性。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <summary>建立 <see cref="T:System.Linq.Expressions.TryExpression" />，表示含指定之元素的 try 區塊。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
      <param name="type">try 運算式的結果型別。如果為 null，則 bodh 和所有處理常式必須具有相同的型別。</param>
      <param name="body">try 區塊的主體。</param>
      <param name="finally">finally 區塊的主體。如果 try 區塊沒有相關聯的 finally 區塊，則傳遞 null。</param>
      <param name="fault">try 區塊的主體。如果 try 區塊沒有相關聯的 fault 區塊，則傳遞 null。</param>
      <param name="handlers">
        <see cref="T:System.Linq.Expressions.CatchBlock" /> 的集合，表示要與 try 區塊產生關聯的 catch 陳述式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary>指定運算元並呼叫適當的 Factory 方法，建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>由呼叫適當 Factory 方法所產生的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="unaryType">
        <see cref="T:System.Linq.Expressions.ExpressionType" />，指定一元運算的型別。</param>
      <param name="operand">表示運算元的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">
        <see cref="T:System.Type" />，指定轉換後的型別 (如果不適用，則傳遞 null)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> 未對應到一元運算式節點。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>指定運算元和實作方法並透過呼叫適當的 Fatory 方法，建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>由呼叫適當 Factory 方法所產生的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="unaryType">
        <see cref="T:System.Linq.Expressions.ExpressionType" />，指定一元運算的型別。</param>
      <param name="operand">表示運算元的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">
        <see cref="T:System.Type" />，指定轉換後的型別 (如果不適用，則傳遞 null)。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" />，表示實作的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> 未對應到一元運算式節點。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>建立 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，表示遞迴初始化欄位或屬性的成員。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，且 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 屬性設定為指定的值。</returns>
      <param name="member">要將 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MemberInfo" />。</param>
      <param name="bindings">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 集合的 <see cref="T:System.Linq.Expressions.MemberBinding" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 或 <paramref name="bindings" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不代表欄位或屬性。-或-<paramref name="bindings" /> 之項目的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性不表示 <paramref name="member" /> 所表示之欄位或屬性型別的成員。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，表示遞迴初始化欄位或屬性的成員。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，且 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 屬性設定為指定的值。</returns>
      <param name="member">要將 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MemberInfo" />。</param>
      <param name="bindings">
        <see cref="T:System.Linq.Expressions.MemberBinding" /> 物件的陣列，用來填入 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 或 <paramref name="bindings" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不代表欄位或屬性。-或-<paramref name="bindings" /> 之項目的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性不表示 <paramref name="member" /> 所表示之欄位或屬性型別的成員。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>建立 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，表示遞迴初始化成員的成員，該成員可透過使用屬性存取子方法來存取。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />、<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性設定為 <see cref="T:System.Reflection.PropertyInfo" />，表示在 <paramref name="propertyAccessor" /> 中存取的屬性，且 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 屬性設定為指定的值。</returns>
      <param name="propertyAccessor">
        <see cref="T:System.Reflection.MethodInfo" />，表示屬性存取子方法。</param>
      <param name="bindings">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 集合的 <see cref="T:System.Linq.Expressions.MemberBinding" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 或 <paramref name="bindings" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不代表屬性存取子方法。-或-<paramref name="bindings" /> 之項目的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性不表示 <paramref name="propertyAccessor" /> 所表示之方法存取的屬性型別成員。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，表示遞迴初始化成員的成員，該成員可透過使用屬性存取子方法來存取。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />、<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性設定為 <see cref="T:System.Reflection.PropertyInfo" />，表示在 <paramref name="propertyAccessor" /> 中存取的屬性，且 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 屬性設定為指定的值。</returns>
      <param name="propertyAccessor">
        <see cref="T:System.Reflection.MethodInfo" />，表示屬性存取子方法。</param>
      <param name="bindings">
        <see cref="T:System.Linq.Expressions.MemberBinding" /> 物件的陣列，用來填入 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 或 <paramref name="bindings" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不代表屬性存取子方法。-或-<paramref name="bindings" /> 之項目的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性不表示 <paramref name="propertyAccessor" /> 所表示之方法存取的屬性型別成員。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>表示建立新物件並初始化物件屬性的運算式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" />，且 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 屬性設定為指定的值。</returns>
      <param name="newExpression">要將 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="bindings">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 集合的 <see cref="T:System.Linq.Expressions.MemberBinding" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="bindings" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bindings" /> 之項目的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性不表示 <paramref name="newExpression" />.Type 所表示之型別的成員。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.MemberInitExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" />，且 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 屬性設定為指定的值。</returns>
      <param name="newExpression">要將 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="bindings">
        <see cref="T:System.Linq.Expressions.MemberBinding" /> 物件的陣列，用來填入 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="bindings" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bindings" /> 之項目的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性不表示 <paramref name="newExpression" />.Type 所表示之型別的成員。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示算術餘數運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義模數運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立表示算術餘數運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 null，而且沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義模數運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示餘數指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立表示餘數指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>建立表示餘數指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其表示不含溢位檢查的算術乘法運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義乘法運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其表示不含溢位檢查的算術乘法運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 null，而且沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義乘法運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的乘法指派運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的乘法指派運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的乘法指派運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的乘法指派運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的乘法指派運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的乘法指派運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其表示包含溢位檢查的算術除法運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義乘法運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其表示包含溢位檢查的算術除法運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 null，而且沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義乘法運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <summary>建立表示算術負數運算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Negate" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為指定的值。</returns>
      <param name="expression">要將 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="expression" />.Type 定義一元減號運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立表示算術負數運算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Negate" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="expression">要將 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用一個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 null，而且不會為 <paramref name="expression" />.Type 定義一元減號運算子。-或-<paramref name="expression" />.Type (如果它是可為 Null 的值型別，則為其對應之不可為 Null 的型別) 無法指派給 <paramref name="method" /> 所代表之方法的引數型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其表示包含溢位檢查的算術負運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為指定的值。</returns>
      <param name="expression">要將 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="expression" />.Type 定義一元減號運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其表示包含溢位檢查的算術負運算。實作的方法可加以指定。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="expression">要將 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用一個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 null，而且不會為 <paramref name="expression" />.Type 定義一元減號運算子。-或-<paramref name="expression" />.Type (如果它是可為 Null 的值型別，則為其對應之不可為 Null 的型別) 無法指派給 <paramref name="method" /> 所代表之方法的引數型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.NewExpression" />，表示呼叫不採用引數的指定建構函式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，且 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 屬性設定為指定的值。</returns>
      <param name="constructor">要將 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="constructor" /> 表示的建構函式，擁有至少一個參數。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.NewExpression" />，其表示以指定之引數呼叫指定的建構函式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，且 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 屬性設定為指定的值。</returns>
      <param name="constructor">要將 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 為 null。-或-<paramref name="arguments" /> 的項目是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 參數包含的項目數目與 <paramref name="constructor" /> 所表示之建構函式的參數數目不同。-或-<paramref name="arguments" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法指派給 <paramref name="constructor" /> 所表示之建構函式的對應參數型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>建立 <see cref="T:System.Linq.Expressions.NewExpression" />，其表示以指定之引數呼叫指定的建構函式。已指定可存取由建構函式初始化欄位的成員。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，且 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />、<see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 屬性設定為指定的值。</returns>
      <param name="constructor">要將 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 物件。</param>
      <param name="members">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 集合的 <see cref="T:System.Reflection.MemberInfo" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 為 null。-或-<paramref name="arguments" /> 的項目是 null。-或-<paramref name="members" /> 的項目是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 參數包含的項目數目與 <paramref name="constructor" /> 所表示之建構函式的參數數目不同。-或-<paramref name="arguments" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法指派給 <paramref name="constructor" /> 所表示之建構函式的對應參數型別。-或-<paramref name="members" /> 參數的項目數與 <paramref name="arguments" /> 的不同。-或-<paramref name="arguments" /> 的項目有 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性，它表示無法指派給 <paramref name="members" /> 之對應項目所表示成員型別的型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.NewExpression" />，其表示以指定之引數呼叫指定的建構函式。已指定可存取由建構函式初始化欄位的成員為陣列。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，且 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />、<see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 屬性設定為指定的值。</returns>
      <param name="constructor">要將 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 物件。</param>
      <param name="members">
        <see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，用來填入 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 為 null。-或-<paramref name="arguments" /> 的項目是 null。-或-<paramref name="members" /> 的項目是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 參數包含的項目數目與 <paramref name="constructor" /> 所表示之建構函式的參數數目不同。-或-<paramref name="arguments" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法指派給 <paramref name="constructor" /> 所表示之委派的對應參數型別。-或-<paramref name="members" /> 參數的項目數與 <paramref name="arguments" /> 的不同。-或-<paramref name="arguments" /> 的項目有 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性，它表示無法指派給 <paramref name="members" /> 之對應項目所表示成員型別的型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.NewExpression" />，其表示以指定之引數呼叫指定的建構函式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，且 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 屬性設定為指定的值。</returns>
      <param name="constructor">要將 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的陣列，用來填入 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 為 null。-或-<paramref name="arguments" /> 的項目是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 的長度不符合 <paramref name="constructor" /> 所表示之建構函式的參數數目。-或-<paramref name="arguments" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法指派給 <paramref name="constructor" /> 所表示之建構函式的對應參數型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.NewExpression" />，其表示呼叫指定型別的無參數建構函式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，而 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 屬性設定為 <see cref="T:System.Reflection.ConstructorInfo" />，表示不含指定型別之參數的建構函式。</returns>
      <param name="type">
        <see cref="T:System.Type" />，具有不採用任何引數的建構函式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 表示的型別沒有無參數建構函式。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其表示建立具有指定之陣序的陣列。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />，且 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 屬性設定為指定的值。</returns>
      <param name="type">
        <see cref="T:System.Type" />，表示陣列的元素型別。</param>
      <param name="bounds">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="bounds" /> 為 null。-或-<paramref name="bounds" /> 的項目是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bounds" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性不表示整數類資料型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其表示建立具有指定之陣序的陣列。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />，且 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 屬性設定為指定的值。</returns>
      <param name="type">
        <see cref="T:System.Type" />，表示陣列的元素型別。</param>
      <param name="bounds">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的陣列，用來填入 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="bounds" /> 為 null。-或-<paramref name="bounds" /> 的項目是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bounds" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性不表示整數類資料型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其表示建立一維陣列，並從元素清單將此陣列初始化。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />，且 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 屬性設定為指定的值。</returns>
      <param name="type">
        <see cref="T:System.Type" />，表示陣列的元素型別。</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用來填入 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="initializers" /> 為 null。-或-<paramref name="initializers" /> 的項目是 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="initializers" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性所表示的型別無法指派給 <paramref name="type" /> 表示的型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其表示建立一維陣列，並從元素清單將此陣列初始化。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />，且 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 屬性設定為指定的值。</returns>
      <param name="type">
        <see cref="T:System.Type" />，表示陣列的元素型別。</param>
      <param name="initializers">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的陣列，用來填入 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="initializers" /> 為 null。-或-<paramref name="initializers" /> 的項目是 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="initializers" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性所表示的型別無法指派給 <paramref name="type" /> 型別。</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.NodeType">
      <summary>取得此 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns>其中一個 <see cref="T:System.Linq.Expressions.ExpressionType" /> 值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <summary>建立表示位元補數運算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Not" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為指定的值。</returns>
      <param name="expression">要將 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="expression" />.Type 定義一元 NOT 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立表示位元補數運算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。實作的方法可加以指定。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Not" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="expression">要將 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用一個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 null，而且不會為 <paramref name="expression" />.Type 定義一元 Not 運算子。-或-<paramref name="expression" />.Type (如果它是可為 Null 的值型別，則為其對應之不可為 Null 的型別) 無法指派給 <paramref name="method" /> 所代表之方法的引數型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示不相等比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義不等比較運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>建立表示不相等比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">true 可將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 true；false 可將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 false。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 null，而且沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義不等比較運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
      <summary>傳回表示 1 補數的運算式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的執行個體。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>傳回表示 1 補數的運算式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的執行個體。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示位元 OR 運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Or" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義位元 OR 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立表示位元 OR 運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Or" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 null，而且沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義位元 OR 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示位元 OR 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立表示位元 OR 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>建立表示位元 OR 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示只在第 1 個運算元評估為 false 時才評估第 2 個運算元的條件 OR 運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義位元 OR 運算子。-或-<paramref name="left" />.Type 和 <paramref name="right" />.Type 不是相同的布林型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示只在第 1 個運算元評估為 false 時才評估第 2 個運算元的條件 OR 運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 null，而且沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義位元 OR 運算子。-或-<paramref name="method" /> 為 null，而且 <paramref name="left" />.Type 和 <paramref name="right" />.Type 不是相同的布林型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 節點，此節點可用來識別運算式樹狀架構中的參數或變數。</summary>
      <returns>具有指定之名稱和型別的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 節點。</returns>
      <param name="type">參數或變數的型別。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <summary>建立 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 節點，此節點可用來識別運算式樹狀架構中的參數或變數。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ParameterExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" />，且 <see cref="P:System.Linq.Expressions.Expression.Type" /> 和 <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> 屬性設定為指定的值。</returns>
      <param name="type">參數或變數的型別。</param>
      <param name="name">參數或變數的名稱，僅供偵錯或列印之用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示後面接續原始運算式遞減 1 的運算式指派。</summary>
      <returns>表示結果運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要套用上述作業的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示後面接續原始運算式遞減 1 的運算式指派。</summary>
      <returns>表示結果運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要套用上述作業的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示後面接續原始運算式遞增 1 的運算式指派。</summary>
      <returns>表示結果運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要套用上述作業的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示後面接續原始運算式遞增 1 的運算式指派。</summary>
      <returns>表示結果運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要套用上述作業的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示將數字提升為乘冪數的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Power" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義取冪運算子。-或-<paramref name="left" />.Type 和 (或) <paramref name="right" />.Type 不是 <see cref="T:System.Double" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立表示將數字提升為乘冪數的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Power" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 null，而且沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義取冪運算子。-或-<paramref name="method" /> 為 null，且 <paramref name="left" />.Type 和 (或) <paramref name="right" />.Type 不是 <see cref="T:System.Double" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示將運算式自乘為乘冪，並且將結果指派回運算式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示將運算式自乘為乘冪，並且將結果指派回運算式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示將運算式自乘為乘冪，並且將結果指派回運算式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，可讓運算式遞減 1，並將結果指派回運算式。</summary>
      <returns>表示結果運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要套用上述作業的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，可讓運算式遞減 1，並將結果指派回運算式。</summary>
      <returns>表示結果運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要套用上述作業的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，可讓運算式遞增 1，並將結果指派回運算式。</summary>
      <returns>表示結果運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要套用上述作業的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，可讓運算式遞增 1，並將結果指派回運算式。</summary>
      <returns>表示結果運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要套用上述作業的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.MemberExpression" />，表示透過使用屬性存取方法來存取屬性。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />、<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 屬性設定為 <paramref name="expression" />，且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 屬性設定為 <see cref="T:System.Reflection.PropertyInfo" />，表示在 <paramref name="propertyAccessor" /> 中存取的屬性。</returns>
      <param name="expression">要將 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。如果是靜態屬性，可以是 null。</param>
      <param name="propertyAccessor">
        <see cref="T:System.Reflection.MethodInfo" />，表示屬性存取子方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 為 null。-或-<paramref name="propertyAccessor" /> 所表示的方法不是 static (在 Visual Basic 中為 Shared)，而且 <paramref name="expression" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 無法指派給 <paramref name="propertyAccessor" /> 所代表之方法的宣告型別。-或-<paramref name="propertyAccessor" /> 所表示的方法不是屬性存取子方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <summary>建立表示存取屬性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，且 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 和 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 屬性設定為指定的值。</returns>
      <param name="expression">要將 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。如果是靜態屬性，可以是 null。</param>
      <param name="property">要將 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.PropertyInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> 為 null。-或-<paramref name="property" /> 所表示的屬性不是 static (在 Visual Basic 中為 Shared)，而且 <paramref name="expression" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 無法指派給 <paramref name="property" /> 所表示屬性的宣告型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.IndexExpression" />，表示索引之屬性的存取結果。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="instance">屬性所屬的物件。如果屬性為靜態/共用屬性，就必須為 null。</param>
      <param name="indexer">
        <see cref="T:System.Reflection.PropertyInfo" />，表示要進行索引的屬性。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，用於對屬性進行索引。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.IndexExpression" />，表示索引之屬性的存取結果。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="instance">屬性所屬的物件。如果屬性為靜態/共用屬性，就必須為 null。</param>
      <param name="indexer">
        <see cref="T:System.Reflection.PropertyInfo" />，表示要進行索引的屬性。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的陣列，用於對屬性進行索引。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <summary>建立表示存取屬性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 屬性設定為 <paramref name="expression" />，且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 屬性設定為 <see cref="T:System.Reflection.PropertyInfo" />，表示 <paramref name="propertyName" /> 所表示的屬性。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />，其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 包含名為 <paramref name="propertyName" /> 的屬性。如果是靜態屬性，可以是 null。</param>
      <param name="propertyName">要存取的屬性名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="propertyName" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 或其基底型別中沒有定義名為 <paramref name="propertyName" /> 的屬性。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.IndexExpression" />，表示索引之屬性的存取結果。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="instance">屬性所屬的物件。如果屬性為靜態/共用屬性，就必須為 null。</param>
      <param name="propertyName">索引子的名稱。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的陣列，用於對屬性進行索引。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>建立用於存取屬性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
      <param name="expression">屬性的包含物件。如果是靜態屬性，可以是 null。</param>
      <param name="type">包含屬性的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="propertyName">要存取的屬性。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <summary>建立表示存取屬性或欄位的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 屬性設定為 <paramref name="expression" />，且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 屬性設定為 <see cref="T:System.Reflection.PropertyInfo" /> 或 <see cref="T:System.Reflection.FieldInfo" />，表示 <paramref name="propertyOrFieldName" /> 所表示的屬性或欄位。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />，其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 包含名為 <paramref name="propertyOrFieldName" /> 的屬性或欄位。如果是靜態成員，可以是 null。</param>
      <param name="propertyOrFieldName">要存取之屬性或欄位的名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="propertyOrFieldName" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 或其基底型別中沒有定義名為 <paramref name="propertyOrFieldName" /> 的屬性或欄位。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示運算式具有 <see cref="T:System.Linq.Expressions.Expression" /> 型別的常數值。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Quote" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為指定的值。</returns>
      <param name="expression">要將 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Reduce">
      <summary>將此節點精簡為更簡單的運算式。如果 CanReduce 傳回 true，則應該傳回有效的運算式。此方法可以傳回其他本身必須精簡的節點。</summary>
      <returns>精簡的運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceAndCheck">
      <summary>將此節點精簡為更簡單的運算式。如果 CanReduce 傳回 true，則應該傳回有效的運算式。此方法可以傳回其他本身必須精簡的節點。</summary>
      <returns>精簡的運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceExtensions">
      <summary>將運算式精簡為已知的節點型別 (不是 Extension 節點)，如果已經是已知的型別，則僅傳回運算式。</summary>
      <returns>精簡的運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示參考相等比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示參考不相等比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示重新擲回例外狀況。</summary>
      <returns>表示重新擲回例外狀況的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示重新擲回含指定之型別的例外狀況。</summary>
      <returns>表示重新擲回例外狀況的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="type">運算式的新 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
      <summary>建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示 return 陳述式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Return、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />，且包含在跳躍時傳遞至目標標籤的 Null 值。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 將跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示 return 陳述式。可以指定跳躍時傳遞至標籤的值。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Continue、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />，且包含在跳躍時傳遞至目標標籤的 <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 將跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">將在跳躍時傳遞至關聯標籤的值。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示含指定之型別的 return 陳述式。可以指定跳躍時傳遞至標籤的值。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Continue、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為 <paramref name="type" />，且包含在跳躍時傳遞至目標標籤的 <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 將跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">將在跳躍時傳遞至關聯標籤的值。</param>
      <param name="type">要將 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為與之相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示含指定之型別的 return 陳述式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Return、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為 <paramref name="type" />，且包含在跳躍時傳遞至目標標籤的 Null 值。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 將跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="type">要將 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為與之相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示位元右移 (Right-Shift) 運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Right-shift 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立表示位元右移 (Right-Shift) 運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 null，而且沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Right-shift 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示位元右移位指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立表示位元右移位指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>建立表示位元右移位指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的執行個體。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的執行個體，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />，而 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 屬性設定為指定的值。</returns>
      <param name="variables">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 物件的集合，用來填入 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 集合。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的執行個體。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的執行個體，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />，而 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 屬性設定為指定的值。</returns>
      <param name="variables">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 物件的陣列，用來填入 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 集合。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其表示不含溢位檢查的算術除法運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義減法運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其表示不含溢位檢查的算術除法運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其<see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 null，而且沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義減法運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的減法指派運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的減法指派運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的減法指派運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的減法指派運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的減法指派運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的減法指派運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其表示包含溢位檢查的算術除法運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義減法運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其表示包含溢位檢查的算術除法運算。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="left">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 null，而且沒有為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義減法運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.SwitchExpression" />，表示具有預設案例的 switch 陳述式。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="switchValue">針對每個案例所要測試的值。</param>
      <param name="defaultBody">如果 <paramref name="switchValue" /> 不符合任何案例，為參數結果。</param>
      <param name="cases">此 switch 運算式的案例集合。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>建立 <see cref="T:System.Linq.Expressions.SwitchExpression" />，表示具有預設案例的 switch 陳述式。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="switchValue">針對每個案例所要測試的值。</param>
      <param name="defaultBody">如果 <paramref name="switchValue" /> 不符合任何案例，為參數結果。</param>
      <param name="comparison">要使用的相等比較方法。</param>
      <param name="cases">此 switch 運算式的案例集合。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.SwitchExpression" />，表示具有預設案例的 switch 陳述式。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="switchValue">針對每個案例所要測試的值。</param>
      <param name="defaultBody">如果 <paramref name="switchValue" /> 不符合任何案例，為參數結果。</param>
      <param name="comparison">要使用的相等比較方法。</param>
      <param name="cases">此 switch 運算式的案例集合。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.SwitchExpression" />，表示不含預設案例的 switch 陳述式。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="switchValue">針對每個案例所要測試的值。</param>
      <param name="cases">此 switch 運算式的案例集合。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>建立 <see cref="T:System.Linq.Expressions.SwitchExpression" />，表示具有預設案例的 switch 陳述式。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="type">參數的結果型別。</param>
      <param name="switchValue">針對每個案例所要測試的值。</param>
      <param name="defaultBody">如果 <paramref name="switchValue" /> 不符合任何案例，為參數結果。</param>
      <param name="comparison">要使用的相等比較方法。</param>
      <param name="cases">此 switch 運算式的案例集合。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.SwitchExpression" />，表示具有預設案例的 switch 陳述式。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="type">參數的結果型別。</param>
      <param name="switchValue">針對每個案例所要測試的值。</param>
      <param name="defaultBody">如果 <paramref name="switchValue" /> 不符合任何案例，為參數結果。</param>
      <param name="comparison">要使用的相等比較方法。</param>
      <param name="cases">此 switch 運算式的案例集合。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立要在 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 物件中使用的 <see cref="T:System.Linq.Expressions.SwitchCase" /> 物件。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.SwitchCase" />。</returns>
      <param name="body">案例的主體。</param>
      <param name="testValues">案例的測試值。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.SwitchCase" /> 以便用於 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 中。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.SwitchCase" />。</returns>
      <param name="body">案例的主體。</param>
      <param name="testValues">案例的測試值。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
      <summary>建立 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的執行個體。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 屬性設定為指定的值。</returns>
      <param name="fileName">要將 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 設定為與之相等的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
      <summary>建立 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的執行個體。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 和 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 屬性設定為指定的值。</returns>
      <param name="fileName">要將 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 設定為與之相等的 <see cref="T:System.String" />。</param>
      <param name="language">要將 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 設定為與之相等的 <see cref="T:System.Guid" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
      <summary>建立 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的執行個體。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 和 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> 屬性設定為指定的值。</returns>
      <param name="fileName">要將 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 設定為與之相等的 <see cref="T:System.String" />。</param>
      <param name="language">要將 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 設定為與之相等的 <see cref="T:System.Guid" />。</param>
      <param name="languageVendor">要將 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> 設定為與之相等的 <see cref="T:System.Guid" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>建立 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的執行個體。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> 和 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> 屬性設定為指定的值。</returns>
      <param name="fileName">要將 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 設定為與之相等的 <see cref="T:System.String" />。</param>
      <param name="language">要將 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 設定為與之相等的 <see cref="T:System.Guid" />。</param>
      <param name="languageVendor">要將 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> 設定為與之相等的 <see cref="T:System.Guid" />。</param>
      <param name="documentType">要將 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> 設定為與之相等的 <see cref="T:System.Guid" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示擲回例外狀況。</summary>
      <returns>表示例外狀況的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="value">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示擲回含指定之型別的例外狀況。</summary>
      <returns>表示例外狀況的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="value">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">運算式的新 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ToString">
      <summary>傳回 <see cref="T:System.Linq.Expressions.Expression" /> 的文字表示。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 的文字表示。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.TryExpression" />，表示含 catch 陳述式 (數目不拘) 但不含 fault 區塊或 finally 區塊的 try 區塊。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
      <param name="body">try 區塊的主體。</param>
      <param name="handlers">零個或多個 <see cref="T:System.Linq.Expressions.CatchBlock" /> 的陣列，表示要與 try 區塊產生關聯的 catch 陳述式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.TryExpression" />，表示含 catch 陳述式 (數目不拘) 和 finally 區塊的 try 區塊。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
      <param name="body">try 區塊的主體。</param>
      <param name="finally">finally 區塊的主體。</param>
      <param name="handlers">零個或多個 <see cref="T:System.Linq.Expressions.CatchBlock" /> 的陣列，表示要與 try 區塊產生關聯的 catch 陳述式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.TryExpression" />，表示含 fault 區塊但不含任何 catch 陳述式的 try 區塊。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
      <param name="body">try 區塊的主體。</param>
      <param name="fault">fault 區塊的主體。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.TryExpression" />，表示含 finally 區塊但不含任何 catch 陳述式的 try 區塊。</summary>
      <returns>建立的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
      <param name="body">try 區塊的主體。</param>
      <param name="finally">finally 區塊的主體。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
      <summary>建立 <see cref="P:System.Linq.Expressions.Expression.Type" /> 物件，表示具有特定型別引數的泛型 System.Action 委派型別。</summary>
      <returns>如果已針對特定 <paramref name="typeArgs" /> 建立泛型 System.Action 委派型別，則傳回 true，否則傳回 false。</returns>
      <param name="typeArgs">Type 物件的陣列，指定 System.Action 委派型別的型別引數。</param>
      <param name="actionType">此方法在傳回時會包含具有特定型別引數的泛型 System.Action 委派型別。如果沒有符合 <paramref name="typeArgs" /> 的泛型 System.Action 委派，則包含 Null。這個參數以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
      <summary>建立 <see cref="P:System.Linq.Expressions.Expression.Type" /> 物件，此物件表示具有特定型別引數的泛型 System.Func 委派型別。最後 1 個型別引數指定已建立之委派的傳回型別。</summary>
      <returns>如果已針對特定 <paramref name="typeArgs" /> 建立泛型 System.Func 委派型別，則傳回 true，否則傳回 false。</returns>
      <param name="typeArgs">Type 物件的陣列，指定 System.Func 委派型別的型別引數。</param>
      <param name="funcType">此方法在傳回時會包含具有特定型別引數的泛型 System.Func 委派型別。如果沒有符合 <paramref name="typeArgs" /> 的泛型 System.Func 委派，則包含 Null。這個參數以未初始化的狀態傳遞。</param>
    </member>
    <member name="P:System.Linq.Expressions.Expression.Type">
      <summary>取得 <see cref="T:System.Linq.Expressions.Expression" /> 表示之運算式的靜態型別。</summary>
      <returns>
        <see cref="T:System.Type" />，表示運算式的靜態型別。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示明確參考或 Boxing 轉換，其中若轉換失敗，則提供 null。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為指定的值。</returns>
      <param name="expression">要將 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">要將 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為與之相等的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> 以比較執行階段型別識別。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" />，且 <see cref="T:System.Linq.Expressions.Expression" /> 和 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> 屬性設定為指定的值。</returns>
      <param name="expression">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">要將 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" />，且 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 和 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> 屬性設定為指定的值。</returns>
      <param name="expression">要將 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">要將 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <summary>建立表示一元加法運算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為指定的值。</returns>
      <param name="expression">要將 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="expression" />.Type 定義一元加號運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立表示一元加法運算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <param name="expression">要將 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要將 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 屬性設定為與之相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null，而且其表示的方法傳回的是 void，不是 static (在 Visual Basic 中為 Shared)，或者不是剛好使用一個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 null，而且不會為 <paramref name="expression" />.Type 定義一元加號運算子。-或-<paramref name="expression" />.Type (如果它是可為 Null 的值型別，則為其對應之不可為 Null 的型別) 無法指派給 <paramref name="method" /> 所代表之方法的引數型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
      <summary>建立表示明確 Unboxing 的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的執行個體。</returns>
      <param name="expression">要 Unbox 的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">運算式的新 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 節點，此節點可用來識別運算式樹狀架構中的參數或變數。</summary>
      <returns>具有指定之名稱和型別的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 節點。</returns>
      <param name="type">參數或變數的型別。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
      <summary>建立 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 節點，此節點可用來識別運算式樹狀架構中的參數或變數。</summary>
      <returns>具有指定之名稱和型別的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 節點。</returns>
      <param name="type">參數或變數的型別。</param>
      <param name="name">參數或變數的名稱。此名稱僅供偵錯或列印之用。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
      <summary>精簡節點，然後呼叫精簡後的運算式上的訪問項委派。如果節點無法縮減，此方法會擲回例外狀況。</summary>
      <returns>受訪的運算式，或是在樹狀結構中應取代該運算式的運算式。</returns>
      <param name="visitor">
        <see cref="T:System.Func`2" /> 的執行個體。</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression`1">
      <summary>將強型別 Lambda 運算式表示為運算式樹狀架構形式的資料結構。無法繼承此類別。</summary>
      <typeparam name="TDelegate">
        <see cref="T:System.Linq.Expressions.Expression`1" /> 所代表之委派的型別。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile">
      <summary>將運算式樹狀架構所描述的 Lambda 運算式編譯為可執行程式碼，並產生表示 Lambda 運算式的委派。</summary>
      <returns>
        <paramref name="TDelegate" /> 型別的委派，表示由 <see cref="T:System.Linq.Expressions.Expression`1" /> 所描述的已編譯 Lambda 運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>建立與此項目類似的新運算式，但是使用提供的子系。如果所有子系都相同，它將會傳回此運算式。</summary>
      <returns>如果沒有變更任何子系，為此運算式，或是具有更新之子系的運算式。</returns>
      <param name="body">結果的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 屬性。</param>
      <param name="parameters">結果的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性。</param>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionType">
      <summary>說明運算式樹狀結構之節點的節點型別。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Add">
      <summary>數值運算元的加法運算，例如 a + b，不包含溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssign">
      <summary>數值運算元的加法複合指派運算，例如 (a += b)，不包含溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
      <summary>數值運算元的加法複合指派運算，例如 (a += b)，包含溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <summary>數值運算元的加法運算，例如 (a + b)，包含溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.And">
      <summary>位元或邏輯 AND 運算，例如 C# 中的 (a &amp; b) 和 Visual Basic 中的 (a And b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <summary>條件式 AND 運算，此種運算只有在第 1 個運算元評估為 true 時才會評估第 2 個運算元。對應至 C# 中的 (a &amp;&amp; b) 和 Visual Basic 中的 (a AndAlso b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAssign">
      <summary>位元或邏輯 AND 複合指派運算，例如 C# 中的 (a &amp;= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <summary>一維陣列中的索引運算，例如 C# 中的 array[index] 或 Visual Basic 中的 array(index)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <summary>一種運算，用於取得一維陣列的長度，例如 array.Length。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Assign">
      <summary>指派運算，例如 (a = b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Block">
      <summary>運算式的區塊。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Call">
      <summary>方法呼叫，例如在 obj.sampleMethod() 運算式中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <summary>表示 Null 聯合運算的節點，例如 C# 中的 (a ?? b) 或 Visual Basic 中的 If(a, b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
      <summary>條件式運算，例如 C# 中的 a &gt; b ? a : b 或 Visual Basic 中的 If(a &gt; b, a, b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Constant">
      <summary>常數值。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Convert">
      <summary>轉型或轉換運算，例如 C# 中的 (SampleType)obj 或 Visual Basic 中的 CType(obj, SampleType)。對於數值轉換，如果轉換的值對目的型別而言太大，則不會擲回例外狀況。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <summary>轉型或轉換運算，例如 C# 中的 (SampleType)obj 或 Visual Basic 中的 CType(obj, SampleType)。對於數值轉換，如果轉換的值不符合目的型別，則會擲回例外狀況。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DebugInfo">
      <summary>偵錯資訊。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Decrement">
      <summary>一元遞減運算，例如 C# 和 Visual Basic 中的 (a - 1)。物件 a 不應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Default">
      <summary>預設值。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Divide">
      <summary>數值運算元的除法運算，例如 (a / b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DivideAssign">
      <summary>數值運算元的除法複合指派運算，例如 (a /= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Dynamic">
      <summary>動態運算。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Equal">
      <summary>表示相等比較的節點，例如 C# 中的 (a == b) 或 Visual Basic 中的 (a = b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <summary>位元或邏輯 XOR 運算，例如 C# 中的  (a ^ b) 和 Visual Basic 中的 (a Xor b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
      <summary>位元或邏輯 XOR 複合指派運算，例如 C# 中的 (a ^= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Extension">
      <summary>延伸運算式。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Goto">
      <summary>「移至」運算式，例如 C# 中的 goto Label 或 Visual Basic 中的 GoTo Label。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <summary>「大於」比較，例如 (a &gt; b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <summary>「大於或等於」比較，例如 (a &gt;= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Increment">
      <summary>一元遞增運算，例如 C# 和 Visual Basic 中的 (a + 1)。物件 a 不應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Index">
      <summary>索引運算或是用於存取採用引數之屬性的運算。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
      <summary>sampleDelegate.Invoke() 之類的運算式，會叫用委派或 Lambda 運算式。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsFalse">
      <summary>false 條件值。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsTrue">
      <summary>true 條件值。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Label">
      <summary>標籤。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
      <summary>Lambda 運算式，例如 C# 中的 a =&gt; a + a 或 Visual Basic 中的 Function(a) a + a。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <summary>位元左移運算，例如 (a &lt;&lt; b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
      <summary>位元左移複合指派，例如 (a &lt;&lt;= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
      <summary>「小於」比較，例如 (a &lt; b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <summary>「小於或等於」比較，例如 (a &lt;= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
      <summary>一種運算，用於建立新的 <see cref="T:System.Collections.IEnumerable" /> 物件並以項目清單，例如 C# 中的 new List&lt;SampleType&gt;(){ a, b, c } 或 Visual Basic 中的 Dim sampleList = { a, b, c }。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Loop">
      <summary>迴圈，例如 for 或 while。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <summary>obj.SampleProperty 之類會讀取欄位或屬性的運算。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <summary>一種運算，用於建立新的物件，並初始化其一或多個成員，例如 C# 中的 new Point { X = 1, Y = 2 } 或 Visual Basic 中的 New Point With {.X = 1, .Y = 2}。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
      <summary>算術餘數運算，例如 C# 中的 (a % b) 或 Visual Basic 中的 (a Mod b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
      <summary>算術餘數複合指派運算，例如 C# 中的 (a %= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
      <summary>數值運算元的乘法運算，例如 (a * b)，不包含溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
      <summary>數值運算元的乘法複合指派運算，例如 (a *= b)，不包含溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
      <summary>數值運算元的乘法複合指派運算，例如 (a *= b)，具有溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <summary>數值運算元的乘法運算，例如 (a * b)，具有溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Negate">
      <summary>算術負數運算，例如 (-a)。物件 a 不應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <summary>算術負數運算，例如 (-a)，具有溢位檢查。物件 a 不應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.New">
      <summary>一種運算，用於呼叫建構函式以建立新物件，例如 new SampleType()。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <summary>一種運算，用於建立新陣列並指定每個維度的界限，例如 C# 中的 new SampleType[dim1, dim2] 或 Visual Basic 中的 New SampleType(dim1, dim2)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <summary>一種運算，用於建立新的一維陣列並以項目清單加以初始化，例如 C# 中的 new SampleType[]{a, b, c} 或 Visual Basic 中的 New SampleType(){a, b, c}。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Not">
      <summary>位元補數或邏輯負數運算。在 C# 中，這相當於 (~a) (適用於整數類資料型別) 和 (!a) (適用於布林值)。在 Visual Basic 中，則相當於 (Not a)。物件 a 不應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <summary>不相等比較，例如 C# 中的 (a != b) 或 Visual Basic 中的 (a &lt;&gt; b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OnesComplement">
      <summary>1 的補數運算，例如 C# 中的 (~a)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Or">
      <summary>位元或邏輯 OR 運算，例如 C# 中的 (a | b) 和 Visual Basic 中的 (a Or b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrAssign">
      <summary>位元或邏輯 OR 複合指派，例如 C# 中的 (a |= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
      <summary>最少運算 (Short-Circuiting) 條件式 OR 運算，例如 C# 中的 (a || b) 或 Visual Basic 中的 (a OrElse b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
      <summary>在運算式內容中定義之參數或變數的參考。如需詳細資訊，請參閱 <see cref="T:System.Linq.Expressions.ParameterExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
      <summary>一元後置遞減，例如 (a--)。物件 a 應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
      <summary>一元後置遞增，例如 (a++)。物件 a 應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Power">
      <summary>一種數學運算，可將數字提升為乘冪數，例如 Visual Basic 中的 (a ^ b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PowerAssign">
      <summary>一種複合指派運算，可將數字提升為乘冪數，例如 Visual Basic 中的 (a ^= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
      <summary>一元前置遞減，例如 (--a)。物件 a 應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
      <summary>一元前置遞增，例如 (++a)。物件 a 應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Quote">
      <summary>有 <see cref="T:System.Linq.Expressions.Expression" /> 型別之常數值的運算式。<see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> 節點可包含參數的參考，這些參數都定義在節點所表示的運算式內容中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
      <summary>位元右移運算，例如 (a &gt;&gt; b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
      <summary>位元右移複合指派運算，例如 (a &gt;&gt;= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
      <summary>執行階段變數的清單。如需詳細資訊，請參閱 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
      <summary>數字運算元的減法運算，例如 (a - b)，不包含溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
      <summary>數值運算元的減法複合指派運算，例如 (a -= b)，不包含溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
      <summary>數值運算元的減法複合指派運算，例如 (a -= b)，具有溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <summary>數值運算元的算術減法運算，例如 (a - b)，具有溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Switch">
      <summary>切換運算，例如 C# 中的 switch 或 Visual Basic 中的 Select Case。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Throw">
      <summary>throw new Exception() 之類會擲回例外狀況的運算。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Try">
      <summary>try-catch 運算式。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <summary>明確參考或 Boxing 轉換，轉換若失敗，則提供 null，例如 C# 中的 (obj as SampleType) 或 Visual Basic 中的 TryCast(obj, SampleType)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeEqual">
      <summary>確切型別測試。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <summary>型別測試，例如 C# 中的 obj is SampleType 或 Visual Basic 中的 TypeOf obj is SampleType。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <summary>一元正運算，例如 (+a)。預先定義之一元正運算的結果是運算元的值，但使用者定義的實作可能會有不尋常的結果。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Unbox">
      <summary>Unbox 值型別運算，例如 MSIL 中的 unbox 和 unbox.any 指令。 </summary>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionVisitor">
      <summary>表示運算式樹狀架構的訪客或重新寫入器。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
      <summary>初始化 <see cref="T:System.Linq.Expressions.ExpressionVisitor" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
      <summary>將運算式清單分派給此類別中較為特殊的造訪方法之一。</summary>
      <returns>如果任何元素已經修改，則傳回修改的運算式清單，否則傳回原始運算式清單。</returns>
      <param name="nodes">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
      <summary>使用特殊的元素訪客，造訪集合中所有的節點。</summary>
      <returns>如果任何元素已經修改，則傳回修改的節點清單，否則傳回原始節點清單。</returns>
      <param name="nodes">要造訪的節點。</param>
      <param name="elementVisitor">造訪單一元素的委派，並選擇性地將它取代為新元素。</param>
      <typeparam name="T">節點的型別。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
      <summary>將運算式分派給此類別中較為特殊的造訪方法之一。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
      <summary>造訪運算式，並將結果轉換回原始運算式型別。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="nodes">要造訪的運算式。</param>
      <param name="callerName">呼叫方法的名稱，用來回報較佳的錯誤訊息。</param>
      <typeparam name="T">運算式的型別。</typeparam>
      <exception cref="T:System.InvalidOperationException">此節點的造訪方法傳回不同的型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
      <summary>造訪運算式，並將結果轉換回原始運算式型別。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
      <param name="callerName">呼叫方法的名稱，用來回報較佳的錯誤訊息。</param>
      <typeparam name="T">運算式的型別。</typeparam>
      <exception cref="T:System.InvalidOperationException">此節點的造訪方法傳回不同的型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.BlockExpression" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.CatchBlock" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.ConstantExpression" />。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.DefaultExpression" />。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.ElementInit" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
      <summary>造訪延伸運算式的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.GotoExpression" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.IndexExpression" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.InvocationExpression" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.LabelExpression" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.LabelTarget" />。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <summary>造訪 <see cref="T:System.Linq.Expressions.Expression`1" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
      <typeparam name="T">委派的型別。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.ListInitExpression" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.LoopExpression" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.MemberExpression" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.MemberAssignment" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.MemberBinding" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.MemberListBinding" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.NewExpression" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.NewArrayExpression" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.ParameterExpression" />。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.SwitchCase" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.TryExpression" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的子系。</summary>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <param name="node">要造訪的運算式。</param>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpression">
      <summary>表示無條件跳躍。這包含 return 陳述式、break 和 continue 陳述式，以及其他跳躍。</summary>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Kind">
      <summary>「移至」運算式的類型。只做為資訊參考之用。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> 物件，表示「移至」運算式的類型。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.NodeType">
      <summary>傳回此 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns>表示此運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Target">
      <summary>此節點跳至的目標標籤。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 物件，表示這個節點的目標標籤。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Type">
      <summary>取得 <see cref="T:System.Linq.Expressions.Expression" /> 表示之運算式的靜態型別。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.GotoExpression.Type" />，表示運算式的靜態型別。</returns>
    </member>
    <member name="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>建立與此項目類似的新運算式，但是使用提供的子系。如果所有子系都相同，它將會傳回此運算式。</summary>
      <returns>如果沒有變更任何子系，為此運算式，或是具有更新之子系的運算式。</returns>
      <param name="target">結果的 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性。</param>
      <param name="value">結果的 <see cref="P:System.Linq.Expressions.GotoExpression.Value" /> 屬性。</param>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Value">
      <summary>傳遞給目標的值，如果目標為 System.Void 型別則為 null。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 物件，表示傳遞給目標的值，或者是 null。</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpressionKind">
      <summary>指定此 <see cref="T:System.Linq.Expressions.GotoExpression" /> 所表示的跳躍類型。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Break">
      <summary>表示 break 陳述式的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Continue">
      <summary>表示 continue 陳述式的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Goto">
      <summary>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，表示跳至某個位置。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Return">
      <summary>表示 return 陳述式的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="T:System.Linq.Expressions.IndexExpression">
      <summary>表示對屬性或陣列進行索引。</summary>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Arguments">
      <summary>取得引數，這些引數將做為屬性或陣列的索引。</summary>
      <returns>唯讀集合，包含將做為屬性或陣列索引的引數。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Indexer">
      <summary>如果運算式表示索引屬性，則取得屬性的 <see cref="T:System.Reflection.PropertyInfo" />，否則傳回 null。</summary>
      <returns>如果運算式表示索引屬性，為屬性的 <see cref="T:System.Reflection.PropertyInfo" />，否則為 null。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.NodeType">
      <summary>傳回此 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns>表示此運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Object">
      <summary>要進行索引的物件。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />，表示要進行索引的物件。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Type">
      <summary>取得 <see cref="T:System.Linq.Expressions.Expression" /> 表示之運算式的靜態型別。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.IndexExpression.Type" />，表示運算式的靜態型別。</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立與此項目類似的新運算式，但是使用提供的子系。如果所有子系都相同，它將會傳回此運算式。</summary>
      <returns>如果沒有變更任何子系，為此運算式，或是具有更新之子系的運算式。</returns>
      <param name="object">結果的 <see cref="P:System.Linq.Expressions.IndexExpression.Object" /> 屬性。</param>
      <param name="arguments">結果的 <see cref="P:System.Linq.Expressions.IndexExpression.Arguments" /> 屬性。</param>
    </member>
    <member name="T:System.Linq.Expressions.InvocationExpression">
      <summary>表示將委派或 lambda 運算式套用至引數運算式清單的運算式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <summary>取得要套用委派或 Lambda 運算式的引數。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，表示要套用委派的引數。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
      <summary>取得要套用的委派或 lambda 運算式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />，表示要套用的委派。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.NodeType">
      <summary>傳回此運算式的節點型別。延伸節點覆寫此方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Type">
      <summary>取得 <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> 表示之運算式的靜態型別。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.InvocationExpression.Type" />，表示運算式的靜態型別。</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立與此項目類似的新運算式，但是使用提供的子系。如果所有子系都相同，它將會傳回此運算式。</summary>
      <returns>如果沒有變更任何子系，為此運算式，或是具有更新之子系的運算式。</returns>
      <param name="expression">結果的 <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> 屬性。</param>
      <param name="arguments">結果的 <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /> 屬性。</param>
    </member>
    <member name="T:System.Linq.Expressions.LabelExpression">
      <summary>表示可放在任何 <see cref="T:System.Linq.Expressions.Expression" /> 內容中的標籤。如果跳至標籤，它會取得對應的 <see cref="T:System.Linq.Expressions.GotoExpression" /> 所提供的值。否則它會接收 <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> 中的值。如果 <see cref="T:System.Type" /> 等於 System.Void，則不應提供任何值。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.DefaultValue">
      <summary>透過一般控制流程到達標籤 (例如，不是跳至標籤) 時，為 <see cref="T:System.Linq.Expressions.LabelExpression" /> 的值。</summary>
      <returns>運算式物件，表示 <see cref="T:System.Linq.Expressions.LabelExpression" /> 的值。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.NodeType">
      <summary>傳回此 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns>表示此運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Target">
      <summary>與此標籤相關聯的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</summary>
      <returns>與此標籤相關聯的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Type">
      <summary>取得 <see cref="T:System.Linq.Expressions.Expression" /> 表示之運算式的靜態型別。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.LabelExpression.Type" />，表示運算式的靜態型別。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>建立與此項目類似的新運算式，但是使用提供的子系。如果所有子系都相同，它將會傳回此運算式。</summary>
      <returns>如果沒有變更任何子系，為此運算式，或是具有更新之子系的運算式。</returns>
      <param name="target">結果的 <see cref="P:System.Linq.Expressions.LabelExpression.Target" /> 屬性。</param>
      <param name="defaultValue">結果的 <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> 屬性。</param>
    </member>
    <member name="T:System.Linq.Expressions.LabelTarget">
      <summary>用來表示 <see cref="T:System.Linq.Expressions.GotoExpression" /> 的目標。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Name">
      <summary>取得標籤的名稱。</summary>
      <returns>標籤的名稱。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelTarget.ToString">
      <summary>傳回 <see cref="T:System.String" />，表示目前的 <see cref="T:System.Object" />。</summary>
      <returns>
        <see cref="T:System.String" />，表示目前的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Type">
      <summary>跳至標籤時所傳遞值的型別 (如果不應傳遞任何值則為 <see cref="T:System.Void" />)。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，表示跳至標籤時所傳遞值的型別，如果不應傳遞任何值則為 <see cref="T:System.Void" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.LambdaExpression">
      <summary>說明 Lambda 運算式。這會擷取類似於 .NET 方法主體的程式碼區塊。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Body">
      <summary>取得 Lambda 運算式的主體。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />，表示 Lambda 運算式的主體。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
      <summary>產生表示 Lambda 運算式的委派。</summary>
      <returns>
        <see cref="T:System.Delegate" />，包含編譯後的 Lambda 運算式版本。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Name">
      <summary>取得 Lambda 運算式的名稱。</summary>
      <returns>Lambda 運算式的名稱。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.NodeType">
      <summary>傳回此 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns>表示此運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <summary>取得 Lambda 運算式的參數。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 物件的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，表示 Lambda 運算式的參數。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.ReturnType">
      <summary>取得 Lambda 運算式的傳回型別。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，表示 Lambda 運算式的型別。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.TailCall">
      <summary>取得值，指出 Lambda 運算式是否會以 tail 呼叫最佳化來編譯。</summary>
      <returns>如果 Lambda 運算式會以 tail 呼叫最佳化來編譯則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Type">
      <summary>取得 <see cref="T:System.Linq.Expressions.Expression" /> 表示之運算式的靜態型別。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.LambdaExpression.Type" />，表示運算式的靜態型別。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ListInitExpression">
      <summary>表示具有集合初始設定式的建構函式呼叫。</summary>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.CanReduce">
      <summary>取得值，指出是否可以減少運算式樹狀架構的節點。</summary>
      <returns>如果節點可以精簡則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <summary>取得可用來初始化集合的元素初始化設定式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ElementInit" /> 物件的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，表示用於初始化集合的項目。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <summary>取得運算式，此運算式包含對集合型別之建構函式的呼叫。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" />，表示對集合型別之建構函式的呼叫。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NodeType">
      <summary>傳回此 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns>表示此運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Reduce">
      <summary>將二進位運算式節點精簡為更簡單的運算式。</summary>
      <returns>精簡的運算式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Type">
      <summary>取得 <see cref="T:System.Linq.Expressions.Expression" /> 表示之運算式的靜態型別。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.ListInitExpression.Type" />，表示運算式的靜態型別。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>建立與此項目類似的新運算式，但是使用提供的子系。如果所有子系都相同，它將會傳回此運算式。</summary>
      <returns>如果沒有變更任何子系，為此運算式，或是具有更新之子系的運算式。</returns>
      <param name="newExpression">結果的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 屬性。</param>
      <param name="initializers">結果的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 屬性。</param>
    </member>
    <member name="T:System.Linq.Expressions.LoopExpression">
      <summary>表示無限迴圈。可使用「中斷」結束它。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Body">
      <summary>取得做為迴圈主體的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <returns>做為迴圈主體的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.BreakLabel">
      <summary>取得迴圈主體做為 break 陳述式目標的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</summary>
      <returns>迴圈主體做為 break 陳述式目標的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
      <summary>取得迴圈主體做為 continue 陳述式目標的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</summary>
      <returns>迴圈主體做為 continue 陳述式目標的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.NodeType">
      <summary>傳回此運算式的節點型別。延伸節點覆寫此方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Type">
      <summary>取得 <see cref="T:System.Linq.Expressions.Expression" /> 表示之運算式的靜態型別。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.LoopExpression.Type" />，表示運算式的靜態型別。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>建立與此項目類似的新運算式，但是使用提供的子系。如果所有子系都相同，它將會傳回此運算式。</summary>
      <returns>如果沒有變更任何子系，為此運算式，或是具有更新之子系的運算式。</returns>
      <param name="breakLabel">結果的 <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" /> 屬性。</param>
      <param name="continueLabel">結果的 <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" /> 屬性。</param>
      <param name="body">結果的 <see cref="P:System.Linq.Expressions.LoopExpression.Body" /> 屬性。</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberAssignment">
      <summary>表示物件之欄位或屬性的指派運算。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
      <summary>取得要指派到欄位或屬性的運算式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />，表示要指派給欄位或屬性的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
      <summary>建立與此項目類似的新運算式，但是使用提供的子系。如果所有子系都相同，它將會傳回此運算式。</summary>
      <returns>如果沒有變更任何子系，為此運算式，或是具有更新之子系的運算式。</returns>
      <param name="expression">結果的 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 屬性。</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberBinding">
      <summary>提供基底類別，從其中衍生的類別表示用於初始化新建立物件的繫結。</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
      <summary>初始化 <see cref="T:System.Linq.Expressions.MemberBinding" /> 類別的新執行個體。</summary>
      <param name="type">
        <see cref="T:System.Linq.Expressions.MemberBindingType" />，可區分表示的繫結型別。</param>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" />，表示要初始化的欄位或屬性。</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
      <summary>取得所表示之繫結的型別。</summary>
      <returns>其中一個 <see cref="T:System.Linq.Expressions.MemberBindingType" /> 值。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.Member">
      <summary>取得要初始化的欄位或屬性。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" />，表示要初始化的欄位或屬性。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.ToString">
      <summary>傳回 <see cref="T:System.Linq.Expressions.MemberBinding" /> 的文字表示。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberBinding" /> 的文字表示。</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBindingType">
      <summary>描述用於 <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 物件中的繫結型別。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <summary>表示以運算式的值來初始化成員的繫結。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <summary>表示初始化元素清單中 <see cref="T:System.Collections.IList" /> 或 <see cref="T:System.Collections.Generic.ICollection`1" /> 型別之成員的繫結。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <summary>表示遞迴初始化成員之成員的繫結。</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberExpression">
      <summary>表示存取欄位或屬性。</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>分派給此節點型別的特定 visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>瀏覽此節點的結果。</returns>
      <param name="visitor">瀏覽此節點的訪客。</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Expression">
      <summary>取得欄位或屬性的包含物件。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />，表示欄位或屬性的包含物件。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Member">
      <summary>取得要存取的欄位或屬性。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" />，表示要存取的欄位或屬性。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.NodeType">
      <summary>傳回此 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 的節點型別。</summary>
      <returns>表示此運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
      <summary>建立與此項目類似的新運算式，但是使用提供的子系。如果所有子系都相同，它將會傳回此運算式。</summary>
      <returns>如果沒有變更任何子系，為此運算式，或是具有更新之子系的運算式。</returns>
      <param name="expression">結果的 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 屬性。</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberInitExpression">
      <summary>表示呼叫建構函式，並初始化新物件的一或多個成員。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <summary>取得繫結，此繫結說明如何初始化新建立物件的成員。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberBinding" /> 物件的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，說明如何初始化成員。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
      <summary>取得值，指出是否可以減少運算式樹狀架構的節點。</summary>
      <returns>如果節點可以精簡則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <summary>取得表示建構函式呼叫的運算式。</summary>
      <returns>表示建構函式呼叫的 <see cref="T:System.Linq.Expressions.NewExpression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NodeType">
      <summary>傳回此 Expression 的節點型別。延伸節點覆寫此方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Reduce">
      <summary>將 <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 精簡為更簡單的運算式。</summary>
      <returns>精簡的運算式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Type">
      <summary>取得 <see cref="T:System.Linq.Expressions.Expression" /> 表示之運算式的靜態型別。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.MemberInitExpression.Type" />，表示運算式的靜態型別。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>建立與此項目類似的新運算式，但是使用提供的子系。如果所有子系都相同，它將會傳回此運算式。</summary>
      <returns>如果沒有變更任何子系，為此運算式，或是具有更新之子系的運算式。</returns>
      <param name="newExpression">結果的 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 屬性。</param>
      <param name="bindings">結果的 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 屬性。</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberListBinding">
      <summary>表示初始化新建立物件之集合成員的元素。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <summary>取得初始化新建立物件之集合成員的初始設定式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ElementInit" /> 物件的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，用來初始化集合。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>建立與此項目類似的新運算式，但是使用提供的子系。如果所有子系都相同，它將會傳回此運算式。</summary>
      <returns>如果沒有變更任何子系，為此運算式，或是具有更新之子系的運算式。</returns>
      <param name="initializers">結果的 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 屬性。</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberMemberBinding">
      <summary>表示初始化新建立物件之成員的成員。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <summary>取得繫結，此繫結說明如何初始化成員的成員。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberBinding" /> 物件的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，說明初始化成員的成員。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>建立與此項目類似的新運算式，但是使用提供的子系。如果所有子系都相同，它將會傳回此運算式。</summary>
      <returns>如果沒有變更任何子系，為此運算式，或是具有更新之子系的運算式。</returns>
      <param name="bindings">結果的 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 屬性。</param>
    </member>
    <member name="T:System.Linq.Expressions.MethodCallExpression">
      <summary>表示呼叫靜態或執行個體方法。</summary>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>分派給此節點型別的特定 visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>瀏覽此節點的結果。</returns>
      <param name="visitor">瀏覽此節點的訪客。</param>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <summary>取得運算式的集合，這些運算式表示所呼叫方法的引數。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，表示已呼叫方法的引數。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
      <summary>取得要呼叫之方法的 <see cref="T:System.Reflection.MethodInfo" />。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" />，表示呼叫的方法。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.NodeType">
      <summary>傳回此 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns>表示此運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
      <summary>取得 <see cref="T:System.Linq.Expressions.Expression" />，表示執行個體 (適用於執行個體方法呼叫) 或 null (適用於靜態方法呼叫)。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />，表示方法的接收物件。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Type">
      <summary>取得 <see cref="T:System.Linq.Expressions.Expression" /> 表示之運算式的靜態型別。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Type" />，表示運算式的靜態型別。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立與此項目類似的新運算式，但是使用提供的子系。如果所有子系都相同，它將會傳回此運算式。</summary>
      <returns>如果沒有變更任何子系，為此運算式，或是具有更新之子系的運算式。</returns>
      <param name="object">結果的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 屬性。</param>
      <param name="arguments">結果的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 屬性。</param>
    </member>
    <member name="T:System.Linq.Expressions.NewArrayExpression">
      <summary>表示建立新陣列，並可能初始化新陣列的元素。</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>分派給此節點型別的特定 visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>瀏覽此節點的結果。</returns>
      <param name="visitor">瀏覽此節點的訪客。</param>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <summary>如果 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性的值是 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />，則取得陣列的界限，如果 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性的值是 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />，則取得值以初始化新陣列的元素。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，表示陣列的界限或初始化值。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Type">
      <summary>取得 <see cref="T:System.Linq.Expressions.Expression" /> 表示之運算式的靜態型別。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.NewArrayExpression.Type" />，表示運算式的靜態型別。</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立與此項目類似的新運算式，但是使用提供的子系。如果所有子系都相同，它將會傳回此運算式。</summary>
      <returns>如果沒有變更任何子系，為此運算式，或是具有更新之子系的運算式。</returns>
      <param name="expressions">結果的 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 屬性。</param>
    </member>
    <member name="T:System.Linq.Expressions.NewExpression">
      <summary>表示建構函式呼叫。</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>分派給此節點型別的特定 visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>瀏覽此節點的結果。</returns>
      <param name="visitor">瀏覽此節點的訪客。</param>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Arguments">
      <summary>取得建構函式的引數。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的集合，表示建構函式的引數。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Constructor">
      <summary>取得呼叫的建構函式。</summary>
      <returns>
        <see cref="T:System.Reflection.ConstructorInfo" />，表示呼叫的建構函式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Members">
      <summary>取得可擷取以建構函式引數初始化之欄位值的成員。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 物件的集合，表示可擷取以建構函式引數初始化之欄位值的成員。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.NodeType">
      <summary>傳回此 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns>表示此運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Type">
      <summary>取得 <see cref="T:System.Linq.Expressions.Expression" /> 表示之運算式的靜態型別。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.NewExpression.Type" />，表示運算式的靜態型別。</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立與此項目類似的新運算式，但是使用提供的子系。如果所有子系都相同，它將會傳回此運算式。</summary>
      <returns>如果沒有變更任何子系，為此運算式，或是具有更新之子系的運算式。</returns>
      <param name="arguments">結果的 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 屬性。</param>
    </member>
    <member name="T:System.Linq.Expressions.ParameterExpression">
      <summary>表示具名參數運算式。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>分派給此節點型別的特定 visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>瀏覽此節點的結果。</returns>
      <param name="visitor">瀏覽此節點的訪客。</param>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.IsByRef">
      <summary>表示這個 ParameterExpression 會被視為 ByRef 參數。</summary>
      <returns>如果這個 ParameterExpression 為 ByRef 參數，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Name">
      <summary>取得參數或變數的名稱。</summary>
      <returns>包含參數名稱的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.NodeType">
      <summary>傳回此 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns>表示此運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Type">
      <summary>取得 <see cref="T:System.Linq.Expressions.Expression" /> 表示之運算式的靜態型別。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.ParameterExpression.Type" />，表示運算式的靜態型別。</returns>
    </member>
    <member name="T:System.Linq.Expressions.RuntimeVariablesExpression">
      <summary>為變數提供執行階段讀取/寫入權限的運算式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
      <summary>傳回此 Expression 的節點型別。延伸節點覆寫此方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
      <summary>取得 <see cref="T:System.Linq.Expressions.Expression" /> 表示之運算式的靜態型別。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" />，表示運算式的靜態型別。</returns>
    </member>
    <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>建立與此項目類似的新運算式，但是使用提供的子系。如果所有子系都相同，它將會傳回此運算式。</summary>
      <returns>如果沒有變更任何子系，為此運算式，或是具有更新之子系的運算式。</returns>
      <param name="variables">結果的 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 屬性。</param>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
      <summary>要提供執行階段存取的變數或參數。</summary>
      <returns>唯讀集合，包含將提供執行階段存取的參數。</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchCase">
      <summary>表示 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 的一個案例。</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.Body">
      <summary>取得此案例的主體。</summary>
      <returns>表示 case 區塊主體的 <see cref="T:System.Linq.Expressions.Expression" /> 物件。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.TestValues">
      <summary>取得此案例的值。當 <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> 符合任何這些值時，會選取這個案例開始執行。</summary>
      <returns>此 case 區塊的唯讀值集合。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.ToString">
      <summary>傳回 <see cref="T:System.String" />，表示目前的 <see cref="T:System.Object" />。</summary>
      <returns>
        <see cref="T:System.String" />，表示目前的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
      <summary>建立與此項目類似的新運算式，但是使用提供的子系。如果所有子系都相同，它將會傳回此運算式。</summary>
      <returns>如果沒有變更任何子系，為此運算式，或是具有更新之子系的運算式。</returns>
      <param name="testValues">結果的 <see cref="P:System.Linq.Expressions.SwitchCase.TestValues" /> 屬性。</param>
      <param name="body">結果的 <see cref="P:System.Linq.Expressions.SwitchCase.Body" /> 屬性。</param>
    </member>
    <member name="T:System.Linq.Expressions.SwitchExpression">
      <summary>表示透過將控制權傳遞至 <see cref="T:System.Linq.Expressions.SwitchCase" /> 來處理多重選擇的控制運算式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Cases">
      <summary>取得切換的 <see cref="T:System.Linq.Expressions.SwitchCase" /> 物件集合。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.SwitchCase" /> 物件的集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Comparison">
      <summary>取得相等比較方法 (如果有的話)。</summary>
      <returns>表示相等比較方法的 <see cref="T:System.Reflection.MethodInfo" /> 物件。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
      <summary>取得切換的測試。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 物件，表示切換的測試。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.NodeType">
      <summary>傳回此 Expression 的節點型別。延伸節點覆寫此方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
      <summary>取得切換的測試。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 物件，表示切換的測試。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Type">
      <summary>取得 <see cref="T:System.Linq.Expressions.Expression" /> 表示之運算式的靜態型別。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.SwitchExpression.Type" />，表示運算式的靜態型別。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
      <summary>建立與此項目類似的新運算式，但是使用提供的子系。如果所有子系都相同，它將會傳回此運算式。</summary>
      <returns>如果沒有變更任何子系，為此運算式，或是具有更新之子系的運算式。</returns>
      <param name="switchValue">結果的 <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> 屬性。</param>
      <param name="cases">結果的 <see cref="P:System.Linq.Expressions.SwitchExpression.Cases" /> 屬性。</param>
      <param name="defaultBody">結果的 <see cref="P:System.Linq.Expressions.SwitchExpression.DefaultBody" /> 屬性。</param>
    </member>
    <member name="T:System.Linq.Expressions.SymbolDocumentInfo">
      <summary>儲存發出原始程式檔偵錯符號資訊所需的資訊，特別是檔名和唯一語言識別項。</summary>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
      <summary>傳回文件型別的唯一識別項 (如果有的話)。預設值為文字檔的 GUID。</summary>
      <returns>文件型別的唯一識別項。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
      <summary>原始程式檔的名稱。</summary>
      <returns>表示原始程式檔名稱的字串。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
      <summary>傳回語言的唯一識別項 (如果有的話)。</summary>
      <returns>語言的唯一識別項。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
      <summary>傳回語言廠商的唯一識別項 (如果有的話)。</summary>
      <returns>語言廠商的唯一識別項。</returns>
    </member>
    <member name="T:System.Linq.Expressions.TryExpression">
      <summary>表示 try/catch/finally/fault 區塊。</summary>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Body">
      <summary>取得表示 try 區塊主體的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <returns>表示 try 區塊主體的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Fault">
      <summary>取得表示 fault 區塊的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <returns>表示 fault 區塊的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Finally">
      <summary>取得表示 finally 區塊的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <returns>表示 finally 區塊的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Handlers">
      <summary>取得與 try 區塊相關聯的 <see cref="T:System.Linq.Expressions.CatchBlock" /> 運算式集合。</summary>
      <returns>與 try 區塊相關聯的 <see cref="T:System.Linq.Expressions.CatchBlock" /> 運算式集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.NodeType">
      <summary>傳回此 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns>表示此運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Type">
      <summary>取得 <see cref="T:System.Linq.Expressions.Expression" /> 表示之運算式的靜態型別。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.TryExpression.Type" />，表示運算式的靜態型別。</returns>
    </member>
    <member name="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立與此項目類似的新運算式，但是使用提供的子系。如果所有子系都相同，它將會傳回此運算式。</summary>
      <returns>如果沒有變更任何子系，為此運算式，或是具有更新之子系的運算式。</returns>
      <param name="body">結果的 <see cref="P:System.Linq.Expressions.TryExpression.Body" /> 屬性。</param>
      <param name="handlers">結果的 <see cref="P:System.Linq.Expressions.TryExpression.Handlers" /> 屬性。</param>
      <param name="finally">結果的 <see cref="P:System.Linq.Expressions.TryExpression.Finally" /> 屬性。</param>
      <param name="fault">結果的 <see cref="P:System.Linq.Expressions.TryExpression.Fault" /> 屬性。</param>
    </member>
    <member name="T:System.Linq.Expressions.TypeBinaryExpression">
      <summary>表示運算式和型別之間的作業。</summary>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <summary>取得型別測試作業的運算式運算元。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />，表示型別測試作業的運算式運算元。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
      <summary>傳回此 Expression 的節點型別。延伸節點覆寫此方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Type">
      <summary>取得 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 表示之運算式的靜態型別。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Type" />，表示運算式的靜態型別。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <summary>取得型別測試作業的型別運算元。</summary>
      <returns>
        <see cref="T:System.Type" />，表示型別測試作業的型別運算元。</returns>
    </member>
    <member name="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>建立與此項目類似的新運算式，但是使用提供的子系。如果所有子系都相同，它將會傳回此運算式。</summary>
      <returns>如果沒有變更任何子系，為此運算式，或是具有更新之子系的運算式。</returns>
      <param name="expression">結果的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 屬性。</param>
    </member>
    <member name="T:System.Linq.Expressions.UnaryExpression">
      <summary>表示有一元 (Unary) 運算子的運算式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.CanReduce">
      <summary>取得值，指出是否可以減少運算式樹狀架構的節點。</summary>
      <returns>如果節點可以精簡則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <summary>取得值，此值指出運算式樹狀節點是否表示對運算子的消除呼叫。</summary>
      <returns>如果節點表示消除呼叫為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <summary>取得值，此值指出運算式樹狀節點是否表示對運算子的消除呼叫，該運算子的傳回型別對可為 null 的型別已消除。</summary>
      <returns>如果運算子的傳回型別對可為 null 的型別已消除為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Method">
      <summary>取得一元作業的實作方法。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" />，表示實作的方法。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.NodeType">
      <summary>傳回此 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns>表示此運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
      <summary>取得一元作業的運算元。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />，表示一元作業的運算元。</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Reduce">
      <summary>將運算式節點精簡為更簡單的運算式。</summary>
      <returns>精簡的運算式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Type">
      <summary>取得 <see cref="T:System.Linq.Expressions.Expression" /> 表示之運算式的靜態型別。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.UnaryExpression.Type" />，表示運算式的靜態型別。</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>建立與此項目類似的新運算式，但是使用提供的子系。如果所有子系都相同，它將會傳回此運算式。</summary>
      <returns>如果沒有變更任何子系，為此運算式，或是具有更新之子系的運算式。</returns>
      <param name="operand">結果的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite">
      <summary>動態呼叫站台的基底類別。此型別是做為動態站台目標的參數型別使用。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite.Binder">
      <summary>負責在動態站台上執行繫結動態作業的類別。</summary>
      <returns>負責執行繫結動態作業的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 物件。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite.Create(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>使用指定的委派型別和繫結器，建立呼叫站台。</summary>
      <returns>新的呼叫站台。</returns>
      <param name="delegateType">呼叫站台的委派型別。</param>
      <param name="binder">呼叫站台繫結器。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite`1">
      <summary>動態站台類型。</summary>
      <typeparam name="T">委派型別。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite`1.Create(System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>建立動態呼叫站台的執行個體，並以負責在此呼叫站台上執行動態作業之執行階段繫結的繫結器來初始化。</summary>
      <returns>動態呼叫站台的新執行個體。</returns>
      <param name="binder">負責在此呼叫站台上執行動態作業之執行階段繫結的繫結器。</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.CallSite`1.Target">
      <summary>層級 0 快取：根據站台記錄的特殊化委派。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite`1.Update">
      <summary>更新委派。當動態站台發生快取遺漏時呼叫。</summary>
      <returns>更新委派。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteBinder">
      <summary>負責在動態呼叫位置上執行動態作業之執行階段繫結的類別。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>在一組引數上執行動態作業的執行階段繫結。</summary>
      <returns>運算式，在動態作業引數上執行測試，而且如果測試有效，則會執行動態作業。如果後續發生的動態作業測試失敗，則會重新呼叫繫結，為新引數型別產生新的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
      <param name="args">動態作業的引數陣列。</param>
      <param name="parameters">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 執行個體的陣列，表示繫結處理序中呼叫位置的參數。</param>
      <param name="returnLabel">LabelTarget，用來傳回動態繫結的結果。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.BindDelegate``1(System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>提供低階執行階段繫結支援。類別可以將它覆寫，並為規則實作提供直接委派。如此可將規則儲存至磁碟、在執行階段使用特殊化規則，或提供不同的快取原則。</summary>
      <returns>取代 CallSite 目標的新委派。</returns>
      <param name="site">正在為其執行繫結的 CallSite。</param>
      <param name="args">繫結器的引數。</param>
      <typeparam name="T">CallSite 的目標型別。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.CacheTarget``1(``0)">
      <summary>將目標加入至已知目標的快取。在呼叫 BindDelegate 產生新規則之前，會先掃描快取的目標。</summary>
      <param name="target">要加入至快取的目標委派。</param>
      <typeparam name="T">要加入的目標型別。</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel">
      <summary>取得可導致繫結更新的標籤。它指出運算式的繫結不再是有效。這通常用於在動態物件的「版本」已變更時。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 物件，表示可用來觸發繫結更新的標籤。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteHelpers">
      <summary>包含 DLR CallSites 之 Helper 方法的類別。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame(System.Reflection.MethodBase)">
      <summary>檢查 <see cref="T:System.Reflection.MethodBase" /> 是否供 DLR 內部使用，而且不應在語言程式碼堆疊上顯示。</summary>
      <returns>如果輸入的 <see cref="T:System.Reflection.MethodBase" /> 是供 DLR 內部使用，而且不應在語言程式碼堆疊上顯示，則為 true。否則為 false。</returns>
      <param name="mb">輸入<see cref="T:System.Reflection.MethodBase" /></param>
    </member>
    <member name="T:System.Runtime.CompilerServices.DynamicAttribute">
      <summary>表示成員上 <see cref="T:System.Object" /> 的使用將視為動態分派型別。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor(System.Boolean[])">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> 類別的新執行個體。</summary>
      <param name="transformFlags">以型別建構的前置周遊方式，指定哪些 <see cref="T:System.Object" /> 相符項目將視為動態分派型別。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DynamicAttribute.TransformFlags">
      <summary>以型別建構的前置周遊方式，指定哪些 <see cref="T:System.Object" /> 相符項目將視為動態分派型別。</summary>
      <returns>將視為動態分派型別之 <see cref="T:System.Object" /> 相符項目的清單。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExecutionScope">
      <summary>表示動態產生之方法的執行階段狀態。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateDelegate(System.Int32,System.Object[])">
      <summary>建立可用於執行動態產生之方法的委派。</summary>
      <returns>可執行動態產生之方法的 <see cref="T:System.Delegate" />。</returns>
      <param name="indexLambda">物件的索引，此物件會儲存動態方法關聯的 Lambda 運算式的相關資訊。</param>
      <param name="locals">陣列，其中包含從父內容中提取的區域變數。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateHoistedLocals">
      <summary>建立陣列，以儲存提取的區域變數。</summary>
      <returns>陣列，用來儲存提取的區域變數。</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Globals">
      <summary>表示動態產生的方法所參考的非一般常數和本機可執行檔運算式。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.IsolateExpression(System.Linq.Expressions.Expression,System.Object[])">
      <summary>藉由將參數取代為目前的值，釋放外部參數參考之指定的運算式樹狀架構。</summary>
      <returns>未包含外部參數參考的運算式樹狀架構。</returns>
      <param name="expression">要釋放外部參數參考的運算式樹狀架構。</param>
      <param name="locals">陣列，其中包含提取的區域變數。</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Locals">
      <summary>表示從父內容中提取的區域變數。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Parent">
      <summary>表示呼叫委派的執行範圍。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IStrongBox">
      <summary>定義屬性，以存取物件所參考的值。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IStrongBox.Value">
      <summary>取得或設定物件所參考的值。</summary>
      <returns>物件所參考的值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.StrongBox`1">
      <summary>儲存值的參考。</summary>
      <typeparam name="T">
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 所參考值的型別。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor"></member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor(`0)">
      <summary>使用提供的值來初始化 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 類別的新執行個體。</summary>
      <param name="value">
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 將參考的值。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.StrongBox`1.System#Runtime#CompilerServices#IStrongBox#Value">
      <summary>取得或設定 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 所參考的值。</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 所參考的值。</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.StrongBox`1.Value">
      <summary>表示 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 所參考的值。</summary>
    </member>
    <member name="T:System.Security.Cryptography.AesManaged">
      <summary>提供先進加密標準 (AES) 對稱演算法的 Managed 實作。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.AesManaged" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor">
      <summary>建立對稱的解密子物件，使用目前的金鑰和初始化向量 (IV)。</summary>
      <returns>對稱解密子物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>建立對稱的解密子物件，使用指定的金鑰和初始化向量 (IV)。</summary>
      <returns>對稱解密子物件。</returns>
      <param name="key">對稱演算法所用的秘密金鑰。</param>
      <param name="iv">對稱演算法所用的初始化向量。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">初始化向量 <paramref name=" iv " /> 的大小無效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor">
      <summary>建立對稱的加密子物件，使用目前的金鑰和初始化向量 (IV)。</summary>
      <returns>對稱加密子物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>建立對稱的加密子物件，使用指定的金鑰和初始化向量 (IV)。</summary>
      <returns>對稱加密子物件。</returns>
      <param name="key">對稱演算法所用的秘密金鑰。</param>
      <param name="iv">對稱演算法所用的初始化向量。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">初始化向量 <paramref name=" iv " /> 的大小無效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateIV">
      <summary>產生要用於對稱演算法的隨機初始化向量 (IV)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateKey">
      <summary>產生用於對稱演算法的隨機金鑰。</summary>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.IV">
      <summary>取得或設定對稱演算法的初始化向量 (IV)。</summary>
      <returns>對稱演算法所用的初始化向量</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Key">
      <summary>取得或設定用於對稱演算法的秘密金鑰。</summary>
      <returns>對稱演算法的金鑰。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.KeySize">
      <summary>取得或設定用於對稱演算法之秘密金鑰的大小，以位元為單位。</summary>
      <returns>對稱演算法使用之金鑰的大小，以位元為單位。</returns>
    </member>
    <member name="T:System.Threading.LockRecursionPolicy">
      <summary>指定相同的執行緒是否可以多次進入鎖定。</summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.NoRecursion">
      <summary>如果執行緒嘗試遞迴地進入鎖定，則會擲回例外狀況。某些類別可能會在此設定有效時允許特定的遞迴。</summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.SupportsRecursion">
      <summary>執行緒可以遞迴地進入鎖定。某些類別可能會限制此功能。 </summary>
    </member>
    <member name="T:System.Threading.ReaderWriterLockSlim">
      <summary>代表鎖定，用來管理資源存取，允許多個執行緒的讀取權限或獨佔寫入權限。</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor">
      <summary>使用預設屬性值，初始化 <see cref="T:System.Threading.ReaderWriterLockSlim" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor(System.Threading.LockRecursionPolicy)">
      <summary>指定鎖定遞迴原則來初始化 <see cref="T:System.Threading.ReaderWriterLockSlim" /> 類別的新執行個體。</summary>
      <param name="recursionPolicy">一個列舉值，指定鎖定遞迴原則。</param>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.CurrentReadCount">
      <summary>取得已進入讀取模式鎖定狀態的唯一執行緒總數。</summary>
      <returns>已進入讀取模式鎖定狀態的唯一執行緒數目。</returns>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.Dispose">
      <summary>將 <see cref="T:System.Threading.ReaderWriterLockSlim" /> 類別目前的執行個體所使用的資源全部釋出。</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterReadLock">
      <summary>嘗試進入讀取模式的鎖定。</summary>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 屬性為 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，且目前的執行緒已進入讀取模式。-或-遞迴的次數會超出計數器的容量。此限制值相當大，因此應用程式永遠不會發生這個情形。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock">
      <summary>嘗試進入可升級模式的鎖定狀態。</summary>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 屬性為 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，且目前的執行緒已進入任何模式的鎖定狀態。-或-目前執行緒已進入讀取模式，因此嘗試進入可升級模式可能會造成死結。-或-遞迴的次數會超出計數器的容量。限制過大，使應用程式永遠不會發生這個情形。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterWriteLock">
      <summary>嘗試進入寫入模式的鎖定。</summary>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 屬性為 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，且目前的執行緒已進入任何模式的鎖定狀態。-或-目前執行緒已進入讀取模式，因此嘗試進入寫入模式鎖定可能會造成死結。-或-遞迴的次數會超出計數器的容量。限制過大，使應用程式永遠不會發生這個情形。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitReadLock">
      <summary>減少讀取模式遞迴的計數，如果得出的計數為 0 (零)，則結束讀取模式。</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">目前的執行緒尚未進入讀取模式的鎖定狀態。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock">
      <summary>減少可升級模式遞迴的計數，如果得出的計數為 0 (零)，則結束可升級模式。</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">目前的執行緒尚未進入可升級模式的鎖定狀態。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitWriteLock">
      <summary>減少寫入模式遞迴的計數，如果得出的計數為 0 (零)，則結束寫入模式。</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">目前的執行緒尚未進入寫入模式的鎖定狀態。</exception>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsReadLockHeld">
      <summary>取得值，表示目前執行緒是否已進入讀取模式的鎖定。</summary>
      <returns>如果目前執行緒已進入讀取模式，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld">
      <summary>取得值，表示目前執行緒是否已進入可升級模式的鎖定。</summary>
      <returns>如果目前執行緒已進入可升級模式，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld">
      <summary>取得值，表示目前執行緒是否已進入寫入模式的鎖定。</summary>
      <returns>如果目前執行緒已進入寫入模式，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy">
      <summary>取得值，表示目前 <see cref="T:System.Threading.ReaderWriterLockSlim" /> 物件的遞迴原則。</summary>
      <returns>一個列舉值，指定鎖定遞迴原則。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveReadCount">
      <summary>取得目前執行緒已進入讀取模式鎖定的次數，做為遞迴的表示。</summary>
      <returns>如果目前執行緒尚未進入讀取模式，則為 0 (零)，如果執行緒已進入讀取模式，但是尚未以遞迴方式進入該模式，則為 1，或者執行緒已遞迴地進入鎖定 n - 1 次，則為 n。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount">
      <summary>取得目前執行緒已進入可升級模式鎖定的次數，做為遞迴的表示。</summary>
      <returns>如果目前執行緒尚未進入可升級模式，則為 0，如果執行緒已進入可升級模式，但是尚未以遞迴方式進入該模式，則為 1，或者執行緒已遞迴地進入可升級模式 n - 1 次，則為 n。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveWriteCount">
      <summary>取得目前執行緒已進入寫入模式鎖定的次數，做為遞迴的表示。</summary>
      <returns>如果目前執行緒尚未進入寫入模式，則為 0，如果執行緒已進入寫入模式，但是尚未以遞迴方式進入該模式，則為 1，或者執行緒已遞迴地進入寫入模式 n - 1 次，則為 n。</returns>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)">
      <summary>嘗試以選用的整數逾時，進入讀取模式的鎖定狀態。</summary>
      <returns>如果呼叫的執行緒已進入讀取模式，則為 true，否則為 false。</returns>
      <param name="millisecondsTimeout">要等待的毫秒數，或 -1 (<see cref="F:System.Threading.Timeout.Infinite" />) 則為無限期等待。</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 屬性為 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，且目前的執行緒已進入鎖定狀態。-或-遞迴的次數會超出計數器的容量。限制過大，使應用程式永遠不會發生這個情形。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 的值為負，但不等於 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，這是唯一允許的負值。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.TimeSpan)">
      <summary>嘗試以選用的逾時，在讀取模式下進入鎖定狀態。</summary>
      <returns>如果呼叫的執行緒已進入讀取模式，則為 true，否則為 false。</returns>
      <param name="timeout">等待的間隔，或 -1 毫秒無限期等待。</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 屬性為 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，且目前的執行緒已進入鎖定狀態。-或-遞迴的次數會超出計數器的容量。限制過大，使應用程式永遠不會發生這個情形。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 的值為負，但不等於 -1 毫秒，這是唯一允許的負值。-或-<paramref name="timeout" /> 的值大於 <see cref="F:System.Int32.MaxValue" /> 毫秒。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)">
      <summary>嘗試以選用的逾時，在可升級模式下進入鎖定狀態。</summary>
      <returns>如果呼叫的執行緒已進入可升級模式，則為 true，否則為 false。</returns>
      <param name="millisecondsTimeout">要等待的毫秒數，或 -1 (<see cref="F:System.Threading.Timeout.Infinite" />) 則為無限期等待。</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 屬性為 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，且目前的執行緒已進入鎖定狀態。-或-目前執行緒一開始已進入讀取模式的鎖定狀態，因此嘗試進入可升級模式可能會造成死結。-或-遞迴的次數會超出計數器的容量。限制過大，使應用程式永遠不會發生這個情形。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 的值為負，但不等於 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，這是唯一允許的負值。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.TimeSpan)">
      <summary>嘗試以選用的逾時，在可升級模式下進入鎖定狀態。</summary>
      <returns>如果呼叫的執行緒已進入可升級模式，則為 true，否則為 false。</returns>
      <param name="timeout">等待的間隔，或 -1 毫秒無限期等待。</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 屬性為 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，且目前的執行緒已進入鎖定狀態。-或-目前執行緒一開始已進入讀取模式的鎖定狀態，因此嘗試進入可升級模式可能會造成死結。-或-遞迴的次數會超出計數器的容量。限制過大，使應用程式永遠不會發生這個情形。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 的值為負，但不等於 -1 毫秒，這是唯一允許的負值。-或-<paramref name="timeout" /> 的值大於 <see cref="F:System.Int32.MaxValue" /> 毫秒。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)">
      <summary>嘗試以選用的逾時，在寫入模式下進入鎖定狀態。</summary>
      <returns>如果呼叫的執行緒已進入寫入模式，則為 true，否則為 false。</returns>
      <param name="millisecondsTimeout">要等待的毫秒數，或 -1 (<see cref="F:System.Threading.Timeout.Infinite" />) 則為無限期等待。</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 屬性為 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，且目前的執行緒已進入鎖定狀態。-或-目前執行緒一開始已進入讀取模式的鎖定狀態，因此嘗試進入寫入模式可能會造成死結。-或-遞迴的次數會超出計數器的容量。限制過大，使應用程式永遠不會發生這個情形。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 的值為負，但不等於 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，這是唯一允許的負值。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.TimeSpan)">
      <summary>嘗試以選用的逾時，在寫入模式下進入鎖定狀態。</summary>
      <returns>如果呼叫的執行緒已進入寫入模式，則為 true，否則為 false。</returns>
      <param name="timeout">等待的間隔，或 -1 毫秒無限期等待。</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 屬性為 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，且目前的執行緒已進入鎖定狀態。-或-目前執行緒一開始已進入讀取模式的鎖定狀態，因此嘗試進入寫入模式可能會造成死結。-或-遞迴的次數會超出計數器的容量。限制過大，使應用程式永遠不會發生這個情形。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 的值為負，但不等於 -1 毫秒，這是唯一允許的負值。-或-<paramref name="timeout" /> 的值大於 <see cref="F:System.Int32.MaxValue" /> 毫秒。 </exception>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount">
      <summary>取得等待進入讀取模式鎖定狀態的執行緒總數。</summary>
      <returns>等待進入讀取模式的執行緒總數。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount">
      <summary>取得等待進入可升級模式鎖定狀態的執行緒總數。</summary>
      <returns>等待進入可升級模式的執行緒總數。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount">
      <summary>取得等待進入寫入模式鎖定狀態的執行緒總數。</summary>
      <returns>等待進入寫入模式的執行緒總數。</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskExtensions">
      <summary>提供一組 static (Visual Basic 中是 Shared) 方法，以處理特定類型的 <see cref="T:System.Threading.Tasks.Task" /> 執行個體。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
      <summary>建立 Proxy <see cref="T:System.Threading.Tasks.Task" />，表示 Task&lt;Task&lt;T&gt;&gt; (C#) 或 Task (Of Task(Of T)) (Visual Basic) 的非同步處理作業。</summary>
      <returns>
        <see cref="System.Threading.Tasks.Task`1" />，表示提供之 Task&lt;Task&lt;T&gt;&gt; (C#) 或 Task (Of Task(Of T)) (Visual Basic) 的非同步處理作業。</returns>
      <param name="task">要解除包裝的 Task&lt;Task&lt;T&gt;&gt; (C#) 或 Task (Of Task(Of T)) (Visual Basic)。</param>
      <typeparam name="TResult">工作結果的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="task" /> 引數為 Null 時，所會擲回例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
      <summary>建立 Proxy <see cref="T:System.Threading.Tasks.Task" />，表示 <see cref="T:System.Threading.Tasks.Task{System.Threading.Tasks.Task}" /> 的非同步作業。</summary>
      <returns>Task 表示提供之 System.Threading.Tasks.Task(Of Task) 的非同步處理作業。</returns>
      <param name="task">要解除包裝的 Task&lt;Task&gt; (C#) 或 Task (Of Task) (Visual Basic)。</param>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="task" /> 引數為 Null 時，所會擲回例外狀況。</exception>
    </member>
  </members>
</doc>