<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System</name>
  </assembly>
  <members>
    <member name="T:System.FileStyleUriParser">
      <summary>Настраиваемое средство синтаксического анализа на основе схемы File.</summary>
    </member>
    <member name="M:System.FileStyleUriParser.#ctor">
      <summary>Создает настраиваемое средство синтаксического анализа на основе схемы File.</summary>
    </member>
    <member name="T:System.FtpStyleUriParser">
      <summary>Настраиваемое средство синтаксического анализа на основе схемы протокола FTP.</summary>
    </member>
    <member name="M:System.FtpStyleUriParser.#ctor">
      <summary>Создает настраиваемое средство синтаксического анализа на основе схемы протокола FTP.</summary>
    </member>
    <member name="T:System.GenericUriParser">
      <summary>Настраиваемый анализатор иерархического универсального кода ресурса (URI).</summary>
    </member>
    <member name="M:System.GenericUriParser.#ctor(System.GenericUriParserOptions)">
      <summary>Создает настраиваемый анализатор иерархического универсального кода ресурса (URI).</summary>
      <param name="options">Укажите параметры для этого <see cref="T:System.GenericUriParser" />.</param>
    </member>
    <member name="T:System.GenericUriParserOptions">
      <summary>Задает параметры для <see cref="T:System.UriParser" />.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.AllowEmptyAuthority">
      <summary>Это средство анализа разрешает использование URI без сертификата.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.Default">
      <summary>Средство анализа:</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontCompressPath">
      <summary>Средство анализа не канонизирует URI.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontConvertPathBackslashes">
      <summary>Средство анализа не преобразует символы обратной косой черты в символы косой черты.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontUnescapePathDotsAndSlashes">
      <summary>Средство анализа не восстанавливает точки в составе пути, символы косой черты или символы обратной косой черты.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.GenericAuthority">
      <summary>Это средство анализа разрешает использование сертификатов на основе реестра.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.Idn">
      <summary>Средство анализа поддерживает разбор международных доменных имен (IDN) узлов..Используются ли IDN, зависит от значений параметров конфигурации.Дополнительные сведения см. в разделе "Примечания".</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.IriParsing">
      <summary>Средство анализа поддерживает правила анализа, определенные стандартом RFC 3987 для международных идентификаторов ресурсов (IRI).Используются ли IRI, зависит от значений параметров конфигурации.Дополнительные сведения см. в разделе "Примечания".</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoFragment">
      <summary>Данная схема не определяет часть фрагмента.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoPort">
      <summary>Данная схема не определяет порт.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoQuery">
      <summary>Данная схема не определяет часть запроса.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoUserInfo">
      <summary>Данная схема не определяет часть пользовательской информации.</summary>
    </member>
    <member name="T:System.HttpStyleUriParser">
      <summary>Настраиваемое средство синтаксического анализа на основе схемы HTTP.</summary>
    </member>
    <member name="M:System.HttpStyleUriParser.#ctor">
      <summary>Создает настраиваемое средство синтаксического анализа на основе схемы HTTP.</summary>
    </member>
    <member name="T:System.Uri">
      <summary>Обеспечивает объектное представление универсального кода ресурсов (URI), а также простой доступ к его частям.</summary>
    </member>
    <member name="M:System.Uri.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Uri" />, используя указанный URI.</summary>
      <param name="uriString">URI. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> имеет значение null. </exception>
      <exception cref="T:System.UriFormatException">Параметр <paramref name="uriString" /> пуст.-или- Формат схемы, заданной в параметре <paramref name="uriString" />, неправильный. См. раздел <see cref="M:System.Uri.CheckSchemeName(System.String)" />.-или- Параметр <paramref name="uriString" /> содержит слишком много знаков косой черты.-или- Пароль, указанный в параметре <paramref name="uriString" />, является недопустимым.-или- Имя узла, указанное в параметре <paramref name="uriString" />, является недопустимым.-или- Имя файла, указанное в параметре <paramref name="uriString" />, является недопустимым. -или- Имя пользователя, указанное в параметре <paramref name="uriString" />, является недопустимым.-или- Имя узла или имя центра, заданное в параметре <paramref name="uriString" />, не может заканчиваться знаками обратной косой черты.-или- Номер порта, заданный в параметре <paramref name="uriString" />, является недопустимым или не поддается анализу.-или- Длина параметра <paramref name="uriString" /> превышает 65519 символов.-или- Длина схемы, заданной в параметре <paramref name="uriString" />, превышает 1024 знака.-или- В параметре <paramref name="uriString" /> содержится недопустимая последовательность символов.-или- Путь MS-DOS, заданный в параметре <paramref name="uriString" />, должен начинаться с приставки c:\\.</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String,System.UriKind)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Uri" />, используя указанный URI. Этот конструктор позволяет указать, является ли строка URI относительным URI, абсолютным URI или неопределенным вариантом.</summary>
      <param name="uriString">Строка, позволяющая идентифицировать ресурсы, которые должны быть представлены с помощью экземпляра <see cref="T:System.Uri" />.</param>
      <param name="uriKind">Указывает, является ли строка URI относительным URI, абсолютным URI или неопределенным вариантом.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="uriKind" /> не является допустимым (допустимы значения <see cref="F:System.UriKind.Absolute" />, <see cref="F:System.UriKind.Relative" /> или <see cref="F:System.UriKind.RelativeOrAbsolute" />).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> имеет значение null. </exception>
      <exception cref="T:System.UriFormatException">Параметр <paramref name="uriString" /> содержит относительный URI, а значение параметра <paramref name="uriKind" /> равно <see cref="F:System.UriKind.Absolute" />.илиПараметр <paramref name="uriString" /> содержит абсолютный URI, а значение параметра <paramref name="uriKind" /> равно <see cref="F:System.UriKind.Relative" />.</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Uri" /> на основе заданного базового URI и строки относительного URI.</summary>
      <param name="baseUri">Базовый URI. </param>
      <param name="relativeUri">Относительный URI для добавления к базовому. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> имеет значение null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="baseUri" /> не является экземпляром абсолютного <see cref="T:System.Uri" />.</exception>
      <exception cref="T:System.UriFormatException">Код URI, сформированный путем объединения значений параметров <paramref name="baseUri" /> и <paramref name="relativeUri" />, является пустым или содержит только пробелы.-или- Схема, заданная в URI, сформированном путем объединения значений параметров <paramref name="baseUri" /> и <paramref name="relativeUri" />, является недопустимой.-или- Код URI, сформированный путем объединения значений параметров <paramref name="baseUri" /> и <paramref name="relativeUri" />, содержит слишком много знаков косой черты.-или- Пароль, заданный в URI, сформированном путем объединения значений параметров <paramref name="baseUri" /> и <paramref name="relativeUri" />, является недопустимым.-или- Имя узла, заданное в URI, сформированном путем объединения значений параметров <paramref name="baseUri" /> и <paramref name="relativeUri" />, является недопустимым.-или- Имя файла, заданного в URI, сформированном путем объединения значений параметров <paramref name="baseUri" /> и <paramref name="relativeUri" />, является недопустимым. -или- Имя пользователя, заданное в URI, сформированном путем объединения значений параметров <paramref name="baseUri" /> и <paramref name="relativeUri" />, является недопустимым.-или- Имя узла или имя центра, заданное в URI, сформированном путем объединения значений параметров <paramref name="baseUri" /> и <paramref name="relativeUri" />, не может заканчиваться знаками обратной косой черты.-или- Номер порта, заданный в URI, сформированном путем объединения значений параметров <paramref name="baseUri" /> и <paramref name="relativeUri" />, является недопустимым или не поддается анализу.-или- Длина URI, сформированного путем объединения значений параметров <paramref name="baseUri" /> и <paramref name="relativeUri" />, превышает 65519 знака.-или- Длина схемы, заданной в URI, сформированном путем объединения значений параметров <paramref name="baseUri" /> и <paramref name="relativeUri" />, превышает 1024 знака.-или- В URI, сформированном путем объединения значений параметров <paramref name="baseUri" /> и <paramref name="relativeUri" />, содержится недопустимая последовательно символов.-или- Путь MS-DOS, заданный в параметре <paramref name="uriString" />, должен начинаться с приставки c:\\.</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.Uri)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Uri" /> на основе сочетания заданного базового экземпляра <see cref="T:System.Uri" /> и относительного экземпляра <see cref="T:System.Uri" />.</summary>
      <param name="baseUri">Абсолютный <see cref="T:System.Uri" />, являющийся основой для нового экземпляра <see cref="T:System.Uri" />. </param>
      <param name="relativeUri">Экземпляр относительного <see cref="T:System.Uri" />, объединяемый с объектом <paramref name="baseUri" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="baseUri" /> не является экземпляром абсолютного <see cref="T:System.Uri" />.</exception>
      <exception cref="T:System.UriFormatException">Код URI, сформированный путем объединения значений параметров <paramref name="baseUri" /> и <paramref name="relativeUri" />, является пустым или содержит только пробелы.-или- Схема, заданная в URI, сформированном путем объединения значений параметров <paramref name="baseUri" /> и <paramref name="relativeUri" />, является недопустимой.-или- Код URI, сформированный путем объединения значений параметров <paramref name="baseUri" /> и <paramref name="relativeUri" />, содержит слишком много знаков косой черты.-или- Пароль, заданный в URI, сформированном путем объединения значений параметров <paramref name="baseUri" /> и <paramref name="relativeUri" />, является недопустимым.-или- Имя узла, заданное в URI, сформированном путем объединения значений параметров <paramref name="baseUri" /> и <paramref name="relativeUri" />, является недопустимым.-или- Имя файла, заданного в URI, сформированном путем объединения значений параметров <paramref name="baseUri" /> и <paramref name="relativeUri" />, является недопустимым. -или- Имя пользователя, заданное в URI, сформированном путем объединения значений параметров <paramref name="baseUri" /> и <paramref name="relativeUri" />, является недопустимым.-или- Имя узла или имя центра, заданное в URI, сформированном путем объединения значений параметров <paramref name="baseUri" /> и <paramref name="relativeUri" />, не может заканчиваться знаками обратной косой черты.-или- Номер порта, заданный в URI, сформированном путем объединения значений параметров <paramref name="baseUri" /> и <paramref name="relativeUri" />, является недопустимым или не поддается анализу.-или- Длина URI, сформированного путем объединения значений параметров <paramref name="baseUri" /> и <paramref name="relativeUri" />, превышает 65519 знака.-или- Длина схемы, заданной в URI, сформированном путем объединения значений параметров <paramref name="baseUri" /> и <paramref name="relativeUri" />, превышает 1024 знака.-или- В URI, сформированном путем объединения значений параметров <paramref name="baseUri" /> и <paramref name="relativeUri" />, содержится недопустимая последовательно символов.-или- Путь MS-DOS, заданный в параметре <paramref name="uriString" />, должен начинаться с приставки c:\\.</exception>
    </member>
    <member name="P:System.Uri.AbsolutePath">
      <summary>Возвращает абсолютный путь URI.</summary>
      <returns>Объект <see cref="T:System.String" />, содержащий абсолютный путь к ресурсу.</returns>
      <exception cref="T:System.InvalidOperationException">Это свойство допустимо только для абсолютного экземпляра <see cref="T:System.Uri" />. </exception>
    </member>
    <member name="P:System.Uri.AbsoluteUri">
      <summary>Возвращает абсолютный URI.</summary>
      <returns>Объект <see cref="T:System.String" />, содержащий весь URI.</returns>
      <exception cref="T:System.InvalidOperationException">Это свойство допустимо только для абсолютного экземпляра <see cref="T:System.Uri" />. </exception>
    </member>
    <member name="P:System.Uri.Authority">
      <summary>Возвращает для сервера службу доменных имен (DNS) или IP-адрес и номер порта.</summary>
      <returns>Строка <see cref="T:System.String" />, содержащая компонент центра URI, представленного этим экземпляром.</returns>
      <exception cref="T:System.InvalidOperationException">Этот экземпляр представляет относительный URI, а это свойство допустимо использовать только для абсолютных URI. </exception>
    </member>
    <member name="M:System.Uri.CheckHostName(System.String)">
      <summary>Определяет, является ли указанное имя узла допустимым именем DNS.</summary>
      <returns>Объект <see cref="T:System.UriHostNameType" />, указывающий тип имени узла. Если не удается определить тип имени узла или если имя узла представляет null или строку нулевой длины, этот метод возвращает <see cref="F:System.UriHostNameType.Unknown" />.</returns>
      <param name="name">Имя узла, подлежащее проверке. Это может быть адрес IPv4 или IPv6 или имя узла в Интернете. </param>
    </member>
    <member name="M:System.Uri.CheckSchemeName(System.String)">
      <summary>Определяет, является ли допустимым указанное имя схемы.</summary>
      <returns>Значение типа <see cref="T:System.Boolean" />, которое равно true, если имя схемы допустимо; в противном случае — значение false.</returns>
      <param name="schemeName">Имя схемы, подлежащее проверке. </param>
    </member>
    <member name="M:System.Uri.Compare(System.Uri,System.Uri,System.UriComponents,System.UriFormat,System.StringComparison)">
      <summary>Сравнивает указанные части двух URI, используя заданные правила сравнения.</summary>
      <returns>Значение типа <see cref="T:System.Int32" />, указывающее на лексическую связь между сравниваемыми компонентами <see cref="T:System.Uri" />.ЗначениеСмыслМеньше нуляЗначение <paramref name="uri1" /> меньше значения <paramref name="uri2" />.НольЗначение <paramref name="uri1" /> равно значению <paramref name="uri2" />.Больше нуляЗначение <paramref name="uri1" /> больше значения <paramref name="uri2" />.</returns>
      <param name="uri1">Первый объект <see cref="T:System.Uri" />.</param>
      <param name="uri2">Второй элемент <see cref="T:System.Uri" />.</param>
      <param name="partsToCompare">Побитовое сочетание значений <see cref="T:System.UriComponents" />, которые задают сравниваемые части <paramref name="uri1" /> и <paramref name="uri2" />.</param>
      <param name="compareFormat">Одно из значений <see cref="T:System.UriFormat" />, которое задает преобразование символов в escape-последовательность, используемую при сравнении компонентов URI.</param>
      <param name="comparisonType">Одно из значений <see cref="T:System.StringComparison" />.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="comparisonType" /> не является допустимым значением <see cref="T:System.StringComparison" />.</exception>
    </member>
    <member name="P:System.Uri.DnsSafeHost">
      <summary>Возвращает не преобразованное в escape-последовательность имя узла, которое безопасно использовать для разрешения DNS.</summary>
      <returns>Объект <see cref="T:System.String" /> содержащий не преобразованную в escape-последовательность часть URI, которая соответствует узлу и которую можно использоваться для разрешения DNS; либо исходная не преобразованная в escape-последовательность строка имени узла, если она изначально допускает разрешение.</returns>
      <exception cref="T:System.InvalidOperationException">Это свойство допустимо только для абсолютного экземпляра <see cref="T:System.Uri" />. </exception>
    </member>
    <member name="M:System.Uri.Equals(System.Object)">
      <summary>Сравнивает два экземпляра <see cref="T:System.Uri" /> на предмет их равенства.</summary>
      <returns>Значение типа <see cref="T:System.Boolean" />, которое равно true, если два экземпляра представляют один URI; в противном случае — значение false.</returns>
      <param name="comparand">Экземпляр <see cref="T:System.Uri" /> или URI, который требуется сравнить с текущим экземпляром. </param>
    </member>
    <member name="M:System.Uri.EscapeDataString(System.String)">
      <summary>Преобразует строку в ее escape-представление.</summary>
      <returns>Структура <see cref="T:System.String" />, содержащая escape-представление структуры <paramref name="stringToEscape" />.</returns>
      <param name="stringToEscape">Строка, которую нужно преобразовать в escape-представление.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> имеет значение null. </exception>
      <exception cref="T:System.UriFormatException">Длина параметра <paramref name="stringToEscape" /> превышает 32766 символов.</exception>
    </member>
    <member name="M:System.Uri.EscapeUriString(System.String)">
      <summary>Преобразует строку URI в ее escape-представление.</summary>
      <returns>Структура <see cref="T:System.String" />, содержащая escape-представление структуры <paramref name="stringToEscape" />.</returns>
      <param name="stringToEscape">Строка, которую нужно преобразовать в escape-представление.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> имеет значение null. </exception>
      <exception cref="T:System.UriFormatException">Длина параметра <paramref name="stringToEscape" /> превышает 32766 символов.</exception>
    </member>
    <member name="P:System.Uri.Fragment">
      <summary>Возвращает фрагмент URI.</summary>
      <returns>Объект <see cref="T:System.String" />, содержащий любые сведения о фрагменте URI.</returns>
      <exception cref="T:System.InvalidOperationException">Это свойство допустимо только для абсолютного экземпляра <see cref="T:System.Uri" />. </exception>
    </member>
    <member name="M:System.Uri.FromHex(System.Char)">
      <summary>Возвращает десятичное значение шестнадцатеричной цифры.</summary>
      <returns>Значение типа <see cref="T:System.Int32" />, содержащее число от 0 до 15, соответствующее указанной шестнадцатеричной цифре.</returns>
      <param name="digit">Шестнадцатеричная цифра (0-9, a-f, A-F), подлежащая преобразованию. </param>
      <exception cref="T:System.ArgumentException">Значение <paramref name="digit" /> не представляет допустимую шестнадцатеричную цифру (0-9, a-f, A-F). </exception>
    </member>
    <member name="M:System.Uri.GetComponents(System.UriComponents,System.UriFormat)">
      <summary>Возвращает заданные компоненты текущего экземпляра, используя указанное для специальных знаков указанное escape-преобразование.</summary>
      <returns>Объект <see cref="T:System.String" />, содержащий компоненты.</returns>
      <param name="components">Побитовое сочетание значений <see cref="T:System.UriComponents" />, позволяющее определить, какие части текущего экземпляра будут возвращены вызывающему оператору.</param>
      <param name="format">Одно из значений <see cref="T:System.UriFormat" />, позволяющее управлять преобразованием специальных знаков в escape-последовательности. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="uriComponents" /> не является сочетанием допустимых значений <see cref="T:System.UriComponents" />.</exception>
      <exception cref="T:System.InvalidOperationException">Этот метод допустим только для абсолютного экземпляра <see cref="T:System.Uri" />.</exception>
    </member>
    <member name="M:System.Uri.GetHashCode">
      <summary>Возвращает хэш-код для URI.</summary>
      <returns>Значение типа <see cref="T:System.Int32" />, содержащее хэш-значение, созданное для этого URI.</returns>
    </member>
    <member name="P:System.Uri.Host">
      <summary>Возвращает компонент узла этого экземпляра.</summary>
      <returns>Строка <see cref="T:System.String" />, которая содержит имя узла. Обычно это DNS-имя узла или IP-адрес сервера.</returns>
      <exception cref="T:System.InvalidOperationException">Это свойство допустимо только для абсолютного экземпляра <see cref="T:System.Uri" />. </exception>
    </member>
    <member name="P:System.Uri.HostNameType">
      <summary>Возвращает тип имени узла, заданного в URI.</summary>
      <returns>Элемент перечисления <see cref="T:System.UriHostNameType" />.</returns>
      <exception cref="T:System.InvalidOperationException">Этот экземпляр представляет относительный URI, а это свойство допустимо использовать только для абсолютных URI. </exception>
    </member>
    <member name="P:System.Uri.IsAbsoluteUri">
      <summary>Возвращает значение, позволяющее определить, является ли экземпляр <see cref="T:System.Uri" /> абсолютным.</summary>
      <returns>Значение типа <see cref="T:System.Boolean" />, которое равно true, если экземпляр <see cref="T:System.Uri" /> является абсолютным; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Uri.IsBaseOf(System.Uri)">
      <summary>Определяет, является ли текущий экземпляр <see cref="T:System.Uri" /> основой указанного экземпляра <see cref="T:System.Uri" />.</summary>
      <returns>Значение true, если текущий экземпляр <see cref="T:System.Uri" /> является основной для <paramref name="uri" />; в противном случае — значение false.</returns>
      <param name="uri">Указанный экземпляр <see cref="T:System.Uri" />, который необходимо проверить. </param>
    </member>
    <member name="P:System.Uri.IsDefaultPort">
      <summary>Возвращает значение, позволяющее определить, является ли номер порта, указанный в URI, портом данной схемы по умолчанию.</summary>
      <returns>Значение типа <see cref="T:System.Boolean" />, которое равно true, если значение свойства <see cref="P:System.Uri.Port" /> является портом данной схемы по умолчанию; в противном случае — значение false.</returns>
      <exception cref="T:System.InvalidOperationException">Этот экземпляр представляет относительный URI, а это свойство допустимо использовать только для абсолютных URI. </exception>
    </member>
    <member name="P:System.Uri.IsFile">
      <summary>Возвращает значение, позволяющее определить, представляет ли заданный <see cref="T:System.Uri" /> код URI файла.</summary>
      <returns>Значение типа <see cref="T:System.Boolean" />, которое равно true, если экземпляр <see cref="T:System.Uri" /> является URI файла; в противном случае — значение false.</returns>
      <exception cref="T:System.InvalidOperationException">Этот экземпляр представляет относительный URI, а это свойство допустимо использовать только для абсолютных URI. </exception>
    </member>
    <member name="M:System.Uri.IsHexDigit(System.Char)">
      <summary>Определяет, является ли указанный символ допустимой шестнадцатеричной цифрой.</summary>
      <returns>Значение типа <see cref="T:System.Boolean" />, которое равно true, если указанный символ является допустимой шестнадцатеричной цифрой; в противном случае — значение false.</returns>
      <param name="character">Символ, подлежащий проверке. </param>
    </member>
    <member name="P:System.Uri.IsLoopback">
      <summary>Возвращает значение, позволяющее определить, ссылается ли заданный <see cref="T:System.Uri" /> на локальный узел.</summary>
      <returns>Значение типа <see cref="T:System.Boolean" />, которое равно true, если этот <see cref="T:System.Uri" /> ссылается на локальный узел; в противном случае — значение false.</returns>
      <exception cref="T:System.InvalidOperationException">Этот экземпляр представляет относительный URI, а это свойство допустимо использовать только для абсолютных URI. </exception>
    </member>
    <member name="P:System.Uri.IsUnc">
      <summary>Возвращает значение, позволяющее определить, является ли заданный <see cref="T:System.Uri" /> путем UNC.</summary>
      <returns>Значение типа <see cref="T:System.Boolean" />, которое равно true, если экземпляр <see cref="T:System.Uri" /> является UNC-путем; в противном случае — значение false.</returns>
      <exception cref="T:System.InvalidOperationException">Это свойство допустимо только для абсолютного экземпляра <see cref="T:System.Uri" />. </exception>
    </member>
    <member name="M:System.Uri.IsWellFormedOriginalString">
      <summary>Указывает, является ли формат строки, использовавшейся для создания данного <see cref="T:System.Uri" />, правильным и не требующим дальнейшего преобразования в escape-последовательность.</summary>
      <returns>Значение типа <see cref="T:System.Boolean" />, равное true, если строка имеет правильный формат; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)">
      <summary>Указывает, является ли правильным формат данной строки, пытаясь создать на ее основе <see cref="T:System.Uri" /> и проверяя, не требуется ли для нее дополнительное преобразование в escape-последовательность.</summary>
      <returns>Значение типа <see cref="T:System.Boolean" />, которое равно true, если формат строки соответствует стандарту RFC 3986; в противном случае — значение false.</returns>
      <param name="uriString">Объект <see cref="T:System.Uri" />, представленный строкой.</param>
      <param name="uriKind">Тип URI в параметре <paramref name="uriString" />.</param>
    </member>
    <member name="P:System.Uri.LocalPath">
      <summary>Возвращает представление имени файла в локальной операционной системе.</summary>
      <returns>Объект <see cref="T:System.String" />, содержащий представление имени файла в локальной операционной системе.</returns>
      <exception cref="T:System.InvalidOperationException">Это свойство допустимо только для абсолютного экземпляра <see cref="T:System.Uri" />. </exception>
    </member>
    <member name="M:System.Uri.MakeRelativeUri(System.Uri)">
      <summary>Определяет разницу между двумя экземплярами класса <see cref="T:System.Uri" />.</summary>
      <returns>Если имя узла и схема данного экземпляра URI и <paramref name="toUri" /> совпадают, этот метод возвращает относительный <see cref="T:System.Uri" />, который, при добавлении к его концу текущего экземпляра URI, превратится в <paramref name="toUri" />.Если имена узлов и схемы отличаются, этот метод возвращает объект <see cref="T:System.Uri" />, представляющий параметр <paramref name="toUri" />.</returns>
      <param name="uri">URI для сравнения с текущим URI.</param>
      <exception cref="T:System.InvalidOperationException">Этот экземпляр представляет относительный URI, а это свойство допустимо использовать только для абсолютных URI. </exception>
    </member>
    <member name="M:System.Uri.op_Equality(System.Uri,System.Uri)">
      <summary>Определяет, равны ли значения двух экземпляров <see cref="T:System.Uri" />.</summary>
      <returns>Значение типа <see cref="T:System.Boolean" />, которое равно true, если экземпляры <see cref="T:System.Uri" /> эквивалентны; в противном случае — значение false.</returns>
      <param name="uri1">Экземпляр <see cref="T:System.Uri" /> для сравнения с <paramref name="uri2" />. </param>
      <param name="uri2">Экземпляр <see cref="T:System.Uri" /> для сравнения с <paramref name="uri1" />. </param>
    </member>
    <member name="M:System.Uri.op_Inequality(System.Uri,System.Uri)">
      <summary>Определяет, не равны ли значения двух экземпляров <see cref="T:System.Uri" />.</summary>
      <returns>Значение типа <see cref="T:System.Boolean" />, которое равно true, если экземпляры <see cref="T:System.Uri" /> не равны; в противном случае — значение false. Если значение одного из параметров равно null, этот метод возвращает значение true.</returns>
      <param name="uri1">Экземпляр <see cref="T:System.Uri" /> для сравнения с <paramref name="uri2" />. </param>
      <param name="uri2">Экземпляр <see cref="T:System.Uri" /> для сравнения с <paramref name="uri1" />. </param>
    </member>
    <member name="P:System.Uri.OriginalString">
      <summary>Возвращает исходную строку URI, переданную в конструктор <see cref="T:System.Uri" />.</summary>
      <returns>Объект <see cref="T:System.String" />, содержащий точный URI, указанный при создании этого экземпляра; в противном случае — <see cref="F:System.String.Empty" />.</returns>
      <exception cref="T:System.InvalidOperationException">Этот экземпляр представляет относительный URI, а это свойство допустимо использовать только для абсолютных URI. </exception>
    </member>
    <member name="P:System.Uri.PathAndQuery">
      <summary>Возвращает свойства <see cref="P:System.Uri.AbsolutePath" /> и <see cref="P:System.Uri.Query" />, разделенные вопросительным знаком (?).</summary>
      <returns>Объект <see cref="T:System.String" />, содержащий свойства <see cref="P:System.Uri.AbsolutePath" /> и <see cref="P:System.Uri.Query" />, разделенные вопросительным знаком (?).</returns>
      <exception cref="T:System.InvalidOperationException">Этот экземпляр представляет относительный URI, а это свойство допустимо использовать только для абсолютных URI. </exception>
    </member>
    <member name="P:System.Uri.Port">
      <summary>Возвращает номер порта данного URI.</summary>
      <returns>Значение типа <see cref="T:System.Int32" />, в котором содержится номер порта для данного URI.</returns>
      <exception cref="T:System.InvalidOperationException">Это свойство допустимо только для абсолютного экземпляра <see cref="T:System.Uri" />. </exception>
    </member>
    <member name="P:System.Uri.Query">
      <summary>Возвращает любые сведения запроса, включенные в заданный URI.</summary>
      <returns>Объект <see cref="T:System.String" />, содержащий какие-либо сведения запроса, включенные в заданный URI.</returns>
      <exception cref="T:System.InvalidOperationException">Это свойство допустимо только для абсолютного экземпляра <see cref="T:System.Uri" />. </exception>
    </member>
    <member name="P:System.Uri.Scheme">
      <summary>Возвращает имя схемы для данного URI.</summary>
      <returns>Объект <see cref="T:System.String" />, содержащий схему для данного URI, преобразованную в нижний регистр.</returns>
      <exception cref="T:System.InvalidOperationException">Это свойство допустимо только для абсолютного экземпляра <see cref="T:System.Uri" />. </exception>
    </member>
    <member name="F:System.Uri.SchemeDelimiter">
      <summary>Определяет символы, отделяющие схему протокола передачи данных от адресной части URI. Это поле доступно только для чтения.</summary>
    </member>
    <member name="P:System.Uri.Segments">
      <summary>Возвращает массив, содержащий сегменты пути, которые образуют указанный URI.</summary>
      <returns>Массив <see cref="T:System.String" />, содержащий сегменты пути, которые образуют указанный URI.</returns>
      <exception cref="T:System.InvalidOperationException">Этот экземпляр представляет относительный URI, а это свойство допустимо использовать только для абсолютных URI. </exception>
    </member>
    <member name="M:System.Uri.ToString">
      <summary>Возвращает каноническое строковое представление заданного экземпляра <see cref="T:System.Uri" />.</summary>
      <returns>Экземпляр <see cref="T:System.String" />, содержащий каноническое представление экземпляра <see cref="T:System.Uri" /> без преобразования в escape-последовательность. В escape-последовательность преобразовываются только знаки #, ? и %.</returns>
    </member>
    <member name="M:System.Uri.TryCreate(System.String,System.UriKind,System.Uri@)">
      <summary>Создает новый <see cref="T:System.Uri" />, используя заданный экземпляр <see cref="T:System.String" /> и <see cref="T:System.UriKind" />.</summary>
      <returns>Значение типа <see cref="T:System.Boolean" />, которое равно true, если <see cref="T:System.Uri" /> успешно создан; в противном случае — значение false.</returns>
      <param name="uriString">Объект типа <see cref="T:System.String" />, представляющий объект <see cref="T:System.Uri" />.</param>
      <param name="uriKind">Тип URI.</param>
      <param name="result">При возврате этим методом, он содержит сконструированный <see cref="T:System.Uri" />.</param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.String,System.Uri@)">
      <summary>Создает новый объект <see cref="T:System.Uri" />, используя заданные базовый и относительный экземпляры <see cref="T:System.String" />.</summary>
      <returns>Значение типа <see cref="T:System.Boolean" />, которое равно true, если <see cref="T:System.Uri" /> успешно создан; в противном случае — значение false.</returns>
      <param name="baseUri">Базовый тип <see cref="T:System.Uri" />.</param>
      <param name="relativeUri">Относительный <see cref="T:System.Uri" />, представленный в виде <see cref="T:System.String" />, для добавления к базовому <see cref="T:System.Uri" />.</param>
      <param name="result">При возвращении данным методом содержит <see cref="T:System.Uri" />, составленный из значений <paramref name="baseUri" /> и <paramref name="relativeUri" />. Этот параметр передается без инициализации.</param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.Uri,System.Uri@)">
      <summary>Создает новый объект <see cref="T:System.Uri" />, используя заданные базовый и относительный экземпляры <see cref="T:System.Uri" />.</summary>
      <returns>Значение типа <see cref="T:System.Boolean" />, которое равно true, если <see cref="T:System.Uri" /> успешно создан; в противном случае — значение false.</returns>
      <param name="baseUri">Базовый тип <see cref="T:System.Uri" />. </param>
      <param name="relativeUri">Относительный <see cref="T:System.Uri" /> для добавления к базовому <see cref="T:System.Uri" />. </param>
      <param name="result">При возвращении данным методом содержит <see cref="T:System.Uri" />, составленный из значений <paramref name="baseUri" /> и <paramref name="relativeUri" />. Этот параметр передается без инициализации.</param>
    </member>
    <member name="M:System.Uri.UnescapeDataString(System.String)">
      <summary>Отменяет преобразование строки в escape-представление.</summary>
      <returns>Структура <see cref="T:System.String" />, содержащая структуру <paramref name="stringToUnescape" />, для которой было отменено escape-преобразование. </returns>
      <param name="stringToUnescape">Строка, для которой нужно отменить преобразование в escape-представление.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToUnescape" /> имеет значение null. </exception>
    </member>
    <member name="F:System.Uri.UriSchemeFile">
      <summary>Указывает на то, что URI является указателем на файл. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeFtp">
      <summary>Указывает на то, что данный URI доступен по протоколу FTP. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeGopher">
      <summary>Указывает на то, что данный URI доступен по протоколу Gopher. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeHttp">
      <summary>Указывает на то, что данный URI доступен по протоколу HTTP. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeHttps">
      <summary>Указывает на то, что данный URI доступен по протоколу HTTPS. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeMailto">
      <summary>Указывает на то, что данный URI представляет адрес электронной почты и доступен по протоколу SMTP. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNetPipe">
      <summary>Указывает на то, что для доступа к данном URI используется схема NetPipe системы Indigo. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNetTcp">
      <summary>Указывает на то, что для доступа к данном URI используется схема NetTcp системы Indigo. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNews">
      <summary>Указывает на то, что данный URI представляет группу новостей Интернета и доступен по протоколу NNTP. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNntp">
      <summary>Указывает на то, что данный URI представляет группу новостей Интернета и доступен по протоколу NNTP. Это поле доступно только для чтения.</summary>
    </member>
    <member name="P:System.Uri.UserEscaped">
      <summary>Указывает на то, что строка URI была полностью преобразована в escape-последовательность перед созданием экземпляра класса <see cref="T:System.Uri" />.</summary>
      <returns>Значение типа <see cref="T:System.Boolean" />, которое равно true, если при создании экземпляра <see cref="T:System.Uri" /> для параметра <paramref name="dontEscape" /> было задано значение true; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Uri.UserInfo">
      <summary>Возвращает имя пользователя, пароль или другие связанные с пользователем сведения, которые соответствуют заданному URI.</summary>
      <returns>Объект <see cref="T:System.String" />, содержащий сведения о пользователе, связанные с данным URI. Возвращаемое значение не содержит знак "@", зарезервированный для отделения части URI, в которой указываются сведения о пользователе.</returns>
      <exception cref="T:System.InvalidOperationException">Это свойство допустимо только для абсолютного экземпляра <see cref="T:System.Uri" />. </exception>
    </member>
    <member name="T:System.UriBuilder">
      <summary>Предоставляет особый конструктор для универсальных идентификаторов ресурсов (URI), а также изменяет URI для класса <see cref="T:System.Uri" />.</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.UriBuilder" />.</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.UriBuilder" />, используя указанный URI.</summary>
      <param name="uri">Строка URI. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> имеет значение null. </exception>
      <exception cref="T:System.UriFormatException">В параметре <paramref name="uri" /> содержится строка нулевой длины или строка, состоящая только из пробелов.-или- Подпрограмма синтаксического анализа обнаружила схему в недопустимой форме.-или- Средство синтаксического анализа обнаружило более двух последовательно расположенных косых черт, для которых не используются схема File.-или- Параметр <paramref name="uri" /> представляет недопустимый URI. </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.UriBuilder" /> в соответствии с заданной схемой и узлом.</summary>
      <param name="schemeName">Протокол доступа к Интернету. </param>
      <param name="hostName">DNS-имя домена или IP-адрес. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="schemeName" /> не является допустимым именем схемы.</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.UriBuilder" /> в соответствии с заданной схемой, узлом и портом.</summary>
      <param name="scheme">Протокол доступа к Интернету. </param>
      <param name="host">DNS-имя домена или IP-адрес. </param>
      <param name="portNumber">Номер порта IP, используемый службой. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="scheme" /> не является допустимым именем схемы. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="portNumber" /> меньше 0 или больше 65,535. </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.UriBuilder" /> в соответствии с заданной схемой, узлом, номером порта и путем.</summary>
      <param name="scheme">Протокол доступа к Интернету. </param>
      <param name="host">DNS-имя домена или IP-адрес. </param>
      <param name="port">Номер порта IP, используемый службой. </param>
      <param name="pathValue">Путь к Интернет- ресурсу. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="scheme" /> не является допустимым именем схемы. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="port" /> меньше 0 или больше 65,535. </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.UriBuilder" /> в соответствии с заданной схемой, узлом, номером порта и строкой запроса или идентификатором фрагмента.</summary>
      <param name="scheme">Протокол доступа к Интернету. </param>
      <param name="host">DNS-имя домена или IP-адрес. </param>
      <param name="port">Номер порта IP, используемый службой. </param>
      <param name="path">Путь к Интернет- ресурсу. </param>
      <param name="extraValue">Строка запроса или идентификатор фрагмента. </param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="extraValue" /> не принимает ни значение null, ни значение <see cref="F:System.String.Empty" />, не является допустимым идентификатором фрагмента, начинающимся со знака решетки (#) и не является допустимой строкой запроса, начинающейся с вопросительного знака (?).-или- <paramref name="scheme" /> не является допустимым именем свойства. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="port" /> меньше 0 или больше 65,535. </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.Uri)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.UriBuilder" /> в соответствии с указанным экземпляром класса <see cref="T:System.Uri" />.</summary>
      <param name="uri">Экземпляр класса <see cref="T:System.Uri" />. </param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="uri" /> имеет значение null. </exception>
    </member>
    <member name="M:System.UriBuilder.Equals(System.Object)">
      <summary>Сравнивает существующий экземпляр <see cref="T:System.Uri" /> с содержимым <see cref="T:System.UriBuilder" />, проверяя их равенство.</summary>
      <returns>Значение true, если параметр <paramref name="rparam" /> представляет тот же экземпляр класса <see cref="T:System.Uri" />, что и экземпляр <see cref="T:System.Uri" />, построенный с помощью данного экземпляра класса <see cref="T:System.UriBuilder" />; в противном случае — значение false.</returns>
      <param name="rparam">Объект для сравнения с текущим экземпляром. </param>
    </member>
    <member name="P:System.UriBuilder.Fragment">
      <summary>Возвращает или задает часть фрагмента URI.</summary>
      <returns>Часть фрагмента URI. Идентификатор фрагмента (#) добавляется в начале фрагмента.</returns>
    </member>
    <member name="M:System.UriBuilder.GetHashCode">
      <summary>Возвращает хэш-код для URI.</summary>
      <returns>Хэш-код, созданный для URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Host">
      <summary>Возвращает или задает DNS-имя узла или IP-адрес сервера.</summary>
      <returns>DNS-имя узла или IP-адрес сервера.</returns>
    </member>
    <member name="P:System.UriBuilder.Password">
      <summary>Возвращает или задает пароль, связанный с пользователя, получающим доступ к URI.</summary>
      <returns>Пароль пользователя, получающего доступ к URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Path">
      <summary>Возвращает или задает путь к ресурсу, на который ссылается URI.</summary>
      <returns>Путь к ресурсу, на который ссылается URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Port">
      <summary>Возвращает или задает номер порта URI.</summary>
      <returns>Номер порта URI.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Номер порта не может быть меньше 0 или больше 65 535. </exception>
    </member>
    <member name="P:System.UriBuilder.Query">
      <summary>Возвращает или задает всевозможные сведения запроса, включенные в URI.</summary>
      <returns>Сведения запроса, включенные в URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Scheme">
      <summary>Возвращает или задает имя схемы URI.</summary>
      <returns>Схема URI.</returns>
      <exception cref="T:System.ArgumentException">Можно задать только допустимое имя схемы. </exception>
    </member>
    <member name="M:System.UriBuilder.ToString">
      <summary>Возвращает отображаемую строку для заданного экземпляра <see cref="T:System.UriBuilder" />.</summary>
      <returns>Строка, содержащая отображаемую строку <see cref="T:System.UriBuilder" />, не преобразованную в escape-последовательность.</returns>
      <exception cref="T:System.UriFormatException">URI, созданный с помощью свойств <see cref="T:System.UriBuilder" />, имеет недопустимое имя пользователя или пароль (свойство <see cref="P:System.UriBuilder.UserName" /> имеет значение NULL или является пустой строкой, а свойство <see cref="P:System.UriBuilder.Password" /> не является пустым. </exception>
    </member>
    <member name="P:System.UriBuilder.Uri">
      <summary>Возвращает экземпляр <see cref="T:System.Uri" />, построенный при помощи заданного экземпляра <see cref="T:System.UriBuilder" />.</summary>
      <returns>Объект <see cref="T:System.Uri" />, содержащий URI, построенный с помощью объекта <see cref="T:System.UriBuilder" />.</returns>
      <exception cref="T:System.UriFormatException">Универсальный код ресурса, построенный с помощью свойств класса <see cref="T:System.UriBuilder" />, является недопустимым. </exception>
    </member>
    <member name="P:System.UriBuilder.UserName">
      <summary>Имя, соответствующее пользователю, получающему доступ к URI.</summary>
      <returns>Имя пользователя, получающего доступ к URI.</returns>
    </member>
    <member name="T:System.UriComponents">
      <summary>Задает части <see cref="T:System.Uri" />.</summary>
    </member>
    <member name="F:System.UriComponents.AbsoluteUri">
      <summary>Данные <see cref="P:System.Uri.Scheme" />, <see cref="P:System.Uri.UserInfo" />, <see cref="P:System.Uri.Host" />, <see cref="P:System.Uri.Port" />, <see cref="P:System.Uri.LocalPath" />, <see cref="P:System.Uri.Query" /> и <see cref="P:System.Uri.Fragment" />.</summary>
    </member>
    <member name="F:System.UriComponents.Fragment">
      <summary>Данные <see cref="P:System.Uri.Fragment" />.</summary>
    </member>
    <member name="F:System.UriComponents.Host">
      <summary>Данные <see cref="P:System.Uri.Host" />.</summary>
    </member>
    <member name="F:System.UriComponents.HostAndPort">
      <summary>Данные <see cref="P:System.Uri.Host" /> и <see cref="P:System.Uri.Port" />. Если в составе URI отсутствуют данные порта и объекту присвоен порт по умолчанию <see cref="P:System.Uri.Scheme" />, возвращается порт по умолчанию. Если порт по умолчанию отсутствует, возвращается значение -1.</summary>
    </member>
    <member name="F:System.UriComponents.HttpRequestUrl">
      <summary>Данные <see cref="P:System.Uri.Scheme" />, <see cref="P:System.Uri.Host" />, <see cref="P:System.Uri.Port" />, <see cref="P:System.Uri.LocalPath" /> и <see cref="P:System.Uri.Query" />.</summary>
    </member>
    <member name="F:System.UriComponents.KeepDelimiter">
      <summary>Указывает, следует ли включать разделитель.</summary>
    </member>
    <member name="F:System.UriComponents.NormalizedHost">
      <summary>Нормализованная форма заданного <see cref="P:System.Uri.Host" />.</summary>
    </member>
    <member name="F:System.UriComponents.Path">
      <summary>Данные <see cref="P:System.Uri.LocalPath" />.</summary>
    </member>
    <member name="F:System.UriComponents.PathAndQuery">
      <summary>Данные <see cref="P:System.Uri.LocalPath" /> и <see cref="P:System.Uri.Query" />. </summary>
    </member>
    <member name="F:System.UriComponents.Port">
      <summary>Данные <see cref="P:System.Uri.Port" />.</summary>
    </member>
    <member name="F:System.UriComponents.Query">
      <summary>Данные <see cref="P:System.Uri.Query" />.</summary>
    </member>
    <member name="F:System.UriComponents.Scheme">
      <summary>Данные <see cref="P:System.Uri.Scheme" />.</summary>
    </member>
    <member name="F:System.UriComponents.SchemeAndServer">
      <summary>Данные <see cref="P:System.Uri.Scheme" />, <see cref="P:System.Uri.Host" /> и <see cref="P:System.Uri.Port" />.</summary>
    </member>
    <member name="F:System.UriComponents.SerializationInfoString">
      <summary>Полный контекст <see cref="T:System.Uri" />, необходимый для средств сериализации универсальных кодов ресурса (URI). Этот контекст включает область протокола IPv6.</summary>
    </member>
    <member name="F:System.UriComponents.StrongAuthority">
      <summary>Данные <see cref="P:System.Uri.UserInfo" />, <see cref="P:System.Uri.Host" /> и <see cref="P:System.Uri.Port" />. Если в составе <see cref="T:System.Uri" /> отсутствуют данные порта и объекту присвоен порт по умолчанию <see cref="P:System.Uri.Scheme" />, возвращается порт по умолчанию. Если порт по умолчанию отсутствует, возвращается значение -1.</summary>
    </member>
    <member name="F:System.UriComponents.StrongPort">
      <summary>Данные <see cref="P:System.Uri.Port" />. Если в составе <see cref="T:System.Uri" /> отсутствуют данные порта и объекту присвоен порт по умолчанию <see cref="P:System.Uri.Scheme" />, возвращается порт по умолчанию. Если порт по умолчанию отсутствует, возвращается значение -1.</summary>
    </member>
    <member name="F:System.UriComponents.UserInfo">
      <summary>Данные <see cref="P:System.Uri.UserInfo" />.</summary>
    </member>
    <member name="T:System.UriFormat">
      <summary>Управляет способом преобразования специальных знаков в информации универсального кода ресурса (URI).</summary>
    </member>
    <member name="F:System.UriFormat.SafeUnescaped">
      <summary>Символы, имеющие зарезервированное значение в компонентах запрошенного URI, остаются преобразованными. Остальные символы не преобразуются. См. примечания.</summary>
    </member>
    <member name="F:System.UriFormat.Unescaped">
      <summary>Преобразование не произведено.</summary>
    </member>
    <member name="F:System.UriFormat.UriEscaped">
      <summary>Преобразование выполнено в соответствии с правилами стандарта RFC 3986.</summary>
    </member>
    <member name="T:System.UriFormatException">
      <summary>Исключение возникает при обнаружении недопустимого универсального кода ресурса (URI).</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.UriFormatException" />.</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.UriFormatException" />, используя указанное сообщение.</summary>
      <param name="textString">Строка сообщения об ошибке. </param>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.UriFormatException" /> с указанным сообщением и ссылкой на внутреннее исключение, которое послужило причиной этого исключения.</summary>
      <param name="textString">Строка сообщения об ошибке.</param>
      <param name="e">Исключение, послужившее причиной текущего исключения. Если параметр <paramref name="e" /> не является пустой ссылкой (Nothing в Visual Basic), то текущее исключение вызывается в блоке catch, который обрабатывает внутреннее исключение. </param>
    </member>
    <member name="T:System.UriHostNameType">
      <summary>Определяет типы имен узелов для метода <see cref="M:System.Uri.CheckHostName(System.String)" />.</summary>
    </member>
    <member name="F:System.UriHostNameType.Basic">
      <summary>узел установлен, однако не удается определить тип.</summary>
    </member>
    <member name="F:System.UriHostNameType.Dns">
      <summary>Имя узла представлено в виде DNS-имени.</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv4">
      <summary>Имя узла представлено в формате IPv4.</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv6">
      <summary>Имя узла представлено в формате IPv6.</summary>
    </member>
    <member name="F:System.UriHostNameType.Unknown">
      <summary>Тип имени узла не поддерживается.</summary>
    </member>
    <member name="T:System.UriIdnScope">
      <summary>Предоставляет возможные значения синтаксического анализа международного имени домена параметра конфигурации.</summary>
    </member>
    <member name="F:System.UriIdnScope.All">
      <summary>При этом значении имена доменов из Юникода будут преобразовываться в их эквиваленты в Punycode (IDN-имена).</summary>
    </member>
    <member name="F:System.UriIdnScope.AllExceptIntranet">
      <summary>При этом значении имена всех внешних доменов из Юникода будут преобразовываться в их эквиваленты в Punycode (IDN-имена). В этом случае, чтобы обрабатывать международные имена в локальной интрасети, DNS-серверы, которые используются для интрасети, должны поддерживать имена в Юникоде.</summary>
    </member>
    <member name="F:System.UriIdnScope.None">
      <summary>При этом значении имена доменов в Юникоде не будут преобразовываться в их эквиваленты в Punycode. Это значение по умолчанию, которое совместимо с поведением платформы .NET Framework 2.0.</summary>
    </member>
    <member name="T:System.UriKind">
      <summary>Определяет виды <see cref="T:System.Uri" /> для нескольких методов <see cref="Overload:System.Uri.#ctor" />.</summary>
    </member>
    <member name="F:System.UriKind.Absolute">
      <summary>Данный URI является абсолютным.</summary>
    </member>
    <member name="F:System.UriKind.Relative">
      <summary>Данный URI является относительным.</summary>
    </member>
    <member name="F:System.UriKind.RelativeOrAbsolute">
      <summary>Вид URI не определен.</summary>
    </member>
    <member name="T:System.UriParser">
      <summary>Анализирует новую схему URI. Это абстрактный класс.</summary>
    </member>
    <member name="M:System.UriParser.#ctor">
      <summary>Конструирует средство синтаксического анализа URI по умолчанию.</summary>
    </member>
    <member name="M:System.UriParser.GetComponents(System.Uri,System.UriComponents,System.UriFormat)">
      <summary>Возвращает компоненты, заданные в URI.</summary>
      <returns>Строка, содержащая компоненты.</returns>
      <param name="uri">Объект <see cref="T:System.Uri" /> для синтаксического анализа.</param>
      <param name="components">Объект <see cref="T:System.UriComponents" />, который необходимо извлечь из параметра <paramref name="uri" />.</param>
      <param name="format">Одно из значений <see cref="T:System.UriFormat" />, позволяющее управлять преобразованием специальных знаков в escape-последовательности.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> является недопустимым-или-Параметр <paramref name="components" /> не является сочетанием допустимых значений <see cref="T:System.UriComponents" />. </exception>
      <exception cref="T:System.InvalidOperationException">Для <paramref name="uri" /> требуется проведение анализа пользователем.-или-<paramref name="uri" /> не является абсолютным URI. Относительные URI в этом методе использовать нельзя.</exception>
    </member>
    <member name="M:System.UriParser.InitializeAndValidate(System.Uri,System.UriFormatException@)">
      <summary>Инициализирует состояние анализатора и проверяет URI.</summary>
      <param name="uri">Проверяемый <see cref="T:System.Uri" />.</param>
      <param name="parsingError">Ошибки проверки, при их наличии.</param>
    </member>
    <member name="M:System.UriParser.IsBaseOf(System.Uri,System.Uri)">
      <summary>Определяет, является ли параметр <paramref name="baseUri" /> базовым URI для параметра <paramref name="relativeUri" />.</summary>
      <returns>Значение true, если параметр <paramref name="baseUri" /> является базовым URI для параметра <paramref name="relativeUri" />; в противном случае — значение false.</returns>
      <param name="baseUri">Базовый URI.</param>
      <param name="relativeUri">URI для проверки.</param>
    </member>
    <member name="M:System.UriParser.IsKnownScheme(System.String)">
      <summary>Указывает, зарегистрировано ли средство синтаксического анализа схемы.</summary>
      <returns>Значение true, если схема <paramref name="schemeName" /> зарегистрирована; в противном случае — значение false.</returns>
      <param name="schemeName">Имя схемы для проверки.</param>
      <exception cref="T:System.ArgumentNullException">Значением параметра <paramref name="schemeName" /> является null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="schemeName" /> является недопустимым. </exception>
    </member>
    <member name="M:System.UriParser.IsWellFormedOriginalString(System.Uri)">
      <summary>Указывает, обладает ли URI правильным форматом.</summary>
      <returns>Значение true, если <paramref name="uri" /> обладает правильным форматом; в противном случае — значение false.</returns>
      <param name="uri">Проверяемый URI.</param>
    </member>
    <member name="M:System.UriParser.OnNewUri">
      <summary>Вызывается конструктором <see cref="T:System.Uri" /> для получения экземпляра <see cref="T:System.UriParser" />.</summary>
      <returns>Объект <see cref="T:System.UriParser" /> для сконструированного объекта <see cref="T:System.Uri" />.</returns>
    </member>
    <member name="M:System.UriParser.OnRegister(System.String,System.Int32)">
      <summary>Вызывается платформой .NET Framework при регистрации метода <see cref="T:System.UriParser" />.</summary>
      <param name="schemeName">Схема, связанная с объектом <see cref="T:System.UriParser" />.</param>
      <param name="defaultPort">Номер порта схемы.</param>
    </member>
    <member name="M:System.UriParser.Register(System.UriParser,System.String,System.Int32)">
      <summary>Связывает схему и номер порта с объектом <see cref="T:System.UriParser" />.</summary>
      <param name="uriParser">Регистрируемый объект <see cref="T:System.UriParser" />.</param>
      <param name="schemeName">Имя схемы, связанное с данным средством синтаксического анализа.</param>
      <param name="defaultPort">Номер порта, используемый по умолчанию для указанной схемы.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="uriParser" /> имеет значение null-или-Параметр <paramref name="schemeName" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="schemeName" /> недопустим-или-Параметр <paramref name="defaultPort" /> недопустим. Параметр <paramref name="defaultPort" /> должен быть меньше ноля или больше 65 534.</exception>
    </member>
    <member name="M:System.UriParser.Resolve(System.Uri,System.Uri,System.UriFormatException@)">
      <summary>Вызывается конструктором <see cref="T:System.Uri" /> и <see cref="Overload:System.Uri.TryCreate" /> для разрешения относительного URI.</summary>
      <returns>Строка разрешенного относительного кода <see cref="T:System.Uri" />.</returns>
      <param name="baseUri">Базовый URI.</param>
      <param name="relativeUri">Относительный URI.</param>
      <param name="parsingError">Ошибки в процессе разрешения, при их наличии.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="baseUri" /> параметр не является абсолютным <see cref="T:System.Uri" />-или-Для параметра <paramref name="baseUri" /> требуется проведение анализа пользователем.</exception>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary>Преобразует экземпляры типа <see cref="T:System.String" /> в экземпляры <see cref="T:System.Uri" />.</summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.UriTypeConverter" />.</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, определяющее, может ли данный преобразователь преобразовывать объект заданного типа источника в экземпляр типа <see cref="T:System.Uri" />. </summary>
      <returns>Значение типа <see cref="T:System.Boolean" />, равное true, если преобразователь может преобразовать указанный тип в экземпляр <see cref="T:System.Uri" />; в противном случае — значение false.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, представляющий контекст формата.</param>
      <param name="sourceType">Тип <see cref="T:System.Type" />, представляющий тип, от которого требуется выполнить преобразование.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceType" /> имеет значение null (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Используя заданный контекст, возвращает значение, указывающее, может ли этот преобразователь преобразовать объект в указанный тип.</summary>
      <returns>Значение типа <see cref="T:System.Boolean" />, которое равно true, если <paramref name="destinationType" /> имеет тип <see cref="T:System.String" /> или <see cref="T:System.Uri" />; в противном случае — значение false.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, представляющий контекст формата.</param>
      <param name="destinationType">Тип <see cref="T:System.Type" />, представляющий тип, к которому требуется выполнить преобразование.</param>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Преобразует заданный объект в тип этого преобразователя, используя заданный контекст и информацию о языке и региональных параметрах. </summary>
      <returns>Экземпляр <see cref="T:System.Uri" />, представляющий преобразованный объект <see cref="T:System.Object" />. Если значение параметра <paramref name="value" /> равно null, возвращается значение null .</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, представляющий контекст формата.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, который используется как текущие язык и региональные параметры.</param>
      <param name="value">Объект <see cref="T:System.Object" />, преобразуемый в экземпляр <see cref="T:System.Uri" />.</param>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено. Это исключение происходит, если тип <paramref name="value" /> отличается от <see cref="T:System.String" /> или <see cref="T:System.Uri" />, или не поддерживаются параметры <paramref name="context" /> или <paramref name="culture" /> для параметра <paramref name="value" />.</exception>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Преобразует заданное значение объектного типа к заданному типу, используя заданные сведения о контексте и языке и региональных параметрах.</summary>
      <returns>
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, представляющий контекст формата.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />. Если передано значение null, используется текущая установка языка и региональных параметров.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType">Тип <see cref="T:System.Type" />, к которому преобразуется параметр <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentNullException">Значением параметра <paramref name="destinationType" /> является null.</exception>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratedCodeAttribute">
      <summary>Идентифицирует год, сгенерированный средством.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.GeneratedCodeAttribute.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.Compiler.GeneratedCodeAttribute" />. </summary>
      <param name="tool">Имя средства, сгенерировавшего код.</param>
      <param name="version">Версия средства, сгенерировавшего код.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Tool">
      <summary>Получает имя средства, сгенерировавшего код.</summary>
      <returns>Имя средства, сгенерировавшего код.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Version">
      <summary>Получает версию средства, сгенерировавшего код.</summary>
      <returns>Версия средства, сгенерировавшего код.</returns>
    </member>
    <member name="T:System.Collections.Generic.ISet`1">
      <summary>Предоставляет основной интерфейс для абстракции наборов.</summary>
      <typeparam name="T">Тип элементов в наборе.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Add(`0)">
      <summary>Добавляет элемент в текущий набор и возвращает значение, указывающее, что элемент был добавлен успешно. </summary>
      <returns>Значение true, если элемент добавлен в набор; значение false, если элемент уже был в наборе.</returns>
      <param name="item">Элемент, добавляемый в набор.</param>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Удаляет все элементы указанной коллекции из текущего набора.</summary>
      <param name="other">Коллекция элементов, удаляемых из набора.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Изменяет текущий набор, чтобы он содержал только элементы, которые также имеются в заданной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли текущий набор строгим подмножеством заданной коллекции.</summary>
      <returns>Значение true, если текущее множество является точным подмножеством <paramref name="other" />; в противном случае — значение false.</returns>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли текущий набор строгим надмножеством заданной коллекции.</summary>
      <returns>Значение true, если объект <see cref="T:System.Collections.Generic.ISet`1" /> является точным надмножеством объекта <paramref name="other" />; в противном случае — значение false.</returns>
      <param name="other">Коллекция для сравнения с текущим набором. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли набор подмножеством заданной коллекции.</summary>
      <returns>Значение true, если текущее множество является подмножеством <paramref name="other" />; в противном случае — значение false.</returns>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли текущий набор надмножеством заданной коллекции.</summary>
      <returns>Значение true, если текущее множество является надмножеством <paramref name="other" />; в противном случае — значение false.</returns>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, пересекаются ли текущий набор и указанная коллекция.</summary>
      <returns>Значение true, если текущее множество и <paramref name="other" /> совместно используют по крайней мере один общий элемент; в противном случае — значение false.</returns>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, содержат ли текущий набор и указанная коллекция одни и те же элементы.</summary>
      <returns>true, если текущее множество равно <paramref name="other" />, в противном случае — false.</returns>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Изменяет текущий набор, чтобы он содержал только элементы, которые имеются либо в текущем наборе, либо в указанной коллекции, но не одновременно в них обоих. </summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Изменяет текущий набор, чтобы он содержал все элементы, которые имеются как в текущем наборе, так и в указанной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1">
      <summary>Представляет двусвязный список.</summary>
      <typeparam name="T">Задает тип элемента в связанном списке.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor">
      <summary>Инициализирует новый пустой экземпляр класса <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Collections.Generic.LinkedList`1" />, содержащий элементы, скопированные из указанного класса <see cref="T:System.Collections.IEnumerable" />, обладающий емкостью, достаточной для того, чтобы вместить количество скопированных элементов. </summary>
      <param name="collection">Объект <see cref="T:System.Collections.IEnumerable" />, элементы которого копируются в новый объект <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>Добавляет указанный новый узел после указанного существующего узла в <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node">узел <see cref="T:System.Collections.Generic.LinkedListNode`1" />, после которого следует вставить <paramref name="newNode" />.</param>
      <param name="newNode">Новый узел <see cref="T:System.Collections.Generic.LinkedListNode`1" />, добавляемый к <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> имеет значение null.-или-<paramref name="newNode" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Параметр <paramref name="node" /> не находится в текущем объекте <see cref="T:System.Collections.Generic.LinkedList`1" />.-или-Параметр <paramref name="newNode" /> принадлежит другому объекту <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>Добавляет новый узел, содержащий указанное значение, после указанного существующего узла в <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Новый узел <see cref="T:System.Collections.Generic.LinkedListNode`1" />, содержащий <paramref name="value" />.</returns>
      <param name="node">узел <see cref="T:System.Collections.Generic.LinkedListNode`1" />, после которого следует вставить новый узел <see cref="T:System.Collections.Generic.LinkedListNode`1" />, содержащий <paramref name="value" />.</param>
      <param name="value">Значение, добавляемое в <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Параметр <paramref name="node" /> не находится в текущем объекте <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>Добавляет указанный новый узел перед указанным существующим узлом в <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node">узел <see cref="T:System.Collections.Generic.LinkedListNode`1" />, перед которым следует вставить <paramref name="newNode" />.</param>
      <param name="newNode">Новый узел <see cref="T:System.Collections.Generic.LinkedListNode`1" />, добавляемый к <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> имеет значение null.-или-<paramref name="newNode" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Параметр <paramref name="node" /> не находится в текущем объекте <see cref="T:System.Collections.Generic.LinkedList`1" />.-или-Параметр <paramref name="newNode" /> принадлежит другому объекту <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>Добавляет новый узел, содержащий указанное значение, перед указанным существующим узлом в <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Новый узел <see cref="T:System.Collections.Generic.LinkedListNode`1" />, содержащий <paramref name="value" />.</returns>
      <param name="node">узел <see cref="T:System.Collections.Generic.LinkedListNode`1" />, перед которым следует вставить новый узел <see cref="T:System.Collections.Generic.LinkedListNode`1" />, содержащий <paramref name="value" />.</param>
      <param name="value">Значение, добавляемое в <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Параметр <paramref name="node" /> не находится в текущем объекте <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
      <summary>Добавляет указанный новый узел в начало <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node">Новый узел <see cref="T:System.Collections.Generic.LinkedListNode`1" />, добавляемый в начало <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Параметр <paramref name="node" /> принадлежит другому объекту <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
      <summary>Добавляет новый узел, содержащий указанное значение, в начало <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Новый узел <see cref="T:System.Collections.Generic.LinkedListNode`1" />, содержащий <paramref name="value" />.</returns>
      <param name="value">Значение, добавляемое в начало <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
      <summary>Добавляет заданный новый узел в конец <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node">Новый узел <see cref="T:System.Collections.Generic.LinkedListNode`1" />, добавляемый в конец <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Параметр <paramref name="node" /> принадлежит другому объекту <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
      <summary>Добавляет новый узел, содержащий указанное значение, в конец <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Новый узел <see cref="T:System.Collections.Generic.LinkedListNode`1" />, содержащий <paramref name="value" />.</returns>
      <param name="value">Значение, добавляемое в конец <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Clear">
      <summary>Удаляет все узлы из <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
      <summary>Определяет, принадлежит ли значение объекту <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>true, если <paramref name="value" /> обнаружен в <see cref="T:System.Collections.Generic.LinkedList`1" />; в обратном случае false.</returns>
      <param name="value">Значение, местоположение которого требуется определить в <see cref="T:System.Collections.Generic.LinkedList`1" />. Допускается значение null для ссылочных типов.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
      <summary>Копирует всю коллекцию <see cref="T:System.Collections.Generic.LinkedList`1" /> в совместимый одномерный массив <see cref="T:System.Array" />, начиная с указанного индекса целевого массива.</summary>
      <param name="array">Одномерный массив <see cref="T:System.Array" />, в который копируются элементы из коллекции <see cref="T:System.Collections.Generic.LinkedList`1" />. Индексация <see cref="T:System.Array" /> должна начинаться с нуля.</param>
      <param name="index">Значение нулевого индекса в массиве <paramref name="array" />, с которого начинается копирование.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> равен или больше длины <paramref name="array" />.-или-Значение параметра <paramref name="index" /> меньше нуля.</exception>
      <exception cref="T:System.ArgumentException">Количество элементов в исходной коллекции <see cref="T:System.Collections.Generic.LinkedList`1" /> превышает доступное место, начиная с индекса <paramref name="index" /> до конца массива назначения <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Count">
      <summary>Возвращает число узлов, которое в действительности хранится в <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Число узлов, которое в действительности хранится в <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Find(`0)">
      <summary>Находит первый узел, содержащий указанное значение.</summary>
      <returns>Первый узел <see cref="T:System.Collections.Generic.LinkedListNode`1" />, содержащий указанное значение, если узел найден; в противном случае — значение null.</returns>
      <param name="value">Значение, местоположение которого требуется определить в <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
      <summary>Находит последний узел, содержащий указанное значение.</summary>
      <returns>Последний узел <see cref="T:System.Collections.Generic.LinkedListNode`1" />, содержащий указанное значение, если узел найден; в противном случае — значение null.</returns>
      <param name="value">Значение, местоположение которого требуется определить в <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.First">
      <summary>Получает первый узел объекта <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Первый узел <see cref="T:System.Collections.Generic.LinkedListNode`1" /> объекта <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
      <summary>Возвращает перечислитель, осуществляющий перебор элементов массива <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" /> для <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Last">
      <summary>Получает последний узел объекта <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Последний узел <see cref="T:System.Collections.Generic.LinkedListNode`1" /> объекта <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
      <summary>Удаляет указанный узел из <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node">Объект <see cref="T:System.Collections.Generic.LinkedListNode`1" />, удаляемый из коллекции <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Параметр <paramref name="node" /> не находится в текущем объекте <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
      <summary>Удаляет первое вхождение указанного значения из <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>true, если элемент с <paramref name="value" /> был успешно удален; в противном случае — значение false.  Этот метод также возвращает false, если элемент <paramref name="value" /> не найден в коллекции <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
      <param name="value">Значение, которое необходимо удалить из <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
      <summary>Удаляет узел в начале <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <exception cref="T:System.InvalidOperationException">Объект <see cref="T:System.Collections.Generic.LinkedList`1" /> является пустым.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveLast">
      <summary>Удаляет узел в конце <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <exception cref="T:System.InvalidOperationException">Объект <see cref="T:System.Collections.Generic.LinkedList`1" /> является пустым.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Добавляет элемент в конец <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="value">Значение, добавляемое в конец <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Получает значение, указывающее, доступна ли коллекция <see cref="T:System.Collections.Generic.ICollection`1" /> только для чтения.</summary>
      <returns>true, если <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — false.  В используемой по умолчанию реализации <see cref="T:System.Collections.Generic.LinkedList`1" /> это свойство всегда возвращает значение false.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий итерацию в коллекции.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> можно использовать для перебора элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Копирует элементы <see cref="T:System.Collections.ICollection" /> в <see cref="T:System.Array" />, начиная с конкретного индекса <see cref="T:System.Array" />.</summary>
      <param name="array">Одномерный массив <see cref="T:System.Array" />, в который копируются элементы из коллекции <see cref="T:System.Collections.ICollection" />. Индексация <see cref="T:System.Array" /> должна начинаться с нуля.</param>
      <param name="index">Значение нулевого индекса в массиве <paramref name="array" />, с которого начинается копирование.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="index" /> меньше нуля.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="array" /> является многомерным.-или-В параметре <paramref name="array" /> не используется индексация с нуля.-или-Количество элементов в исходной коллекции <see cref="T:System.Collections.ICollection" /> превышает доступное место, начиная с индекса <paramref name="index" /> до конца массива назначения <paramref name="array" />.-или-Тип исходного объекта <see cref="T:System.Collections.ICollection" /> нельзя автоматически привести к типу параметра назначения <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
      <summary>Получает значение, показывающее, является ли доступ к интерфейсу <see cref="T:System.Collections.ICollection" /> синхронизированным (потокобезопасным).</summary>
      <returns>Значение true, если доступ к коллекции <see cref="T:System.Collections.ICollection" /> является потокобезопасным, в противном случае — false.  В используемой по умолчанию реализации <see cref="T:System.Collections.Generic.LinkedList`1" /> это свойство всегда возвращает значение false.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
      <summary>Получает объект, который можно использовать для синхронизации доступа к <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Объект, который можно использовать для синхронизации доступа к коллекции <see cref="T:System.Collections.ICollection" />.  В используемой по умолчанию реализации <see cref="T:System.Collections.Generic.LinkedList`1" /> это свойство всегда возвращает текущий экземпляр.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий перебор элементов связанного списка как коллекции.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, который может использоваться для перебора элементов связанного списка как коллекции.</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1.Enumerator">
      <summary>Выполняет перечисление элементов <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.Current">
      <summary>Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns>Элемент в <see cref="T:System.Collections.Generic.LinkedList`1" /> находится в текущей позиции перечислителя.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.Dispose">
      <summary>Освобождает все ресурсы, используемые объектом <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Значение true, если перечислитель был успешно перемещен к следующему элементу; значение false, если перечислитель достиг конца коллекции.</returns>
      <exception cref="T:System.InvalidOperationException">Коллекция была изменена после создания перечислителя. </exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns>Элемент коллекции, соответствующий текущей позиции перечислителя.</returns>
      <exception cref="T:System.InvalidOperationException">Перечислитель помещается перед первым элементом коллекции или после последнего элемента. </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Устанавливает перечислитель в его начальное положение, перед первым элементом коллекции. Этот класс не может быть унаследован.</summary>
      <exception cref="T:System.InvalidOperationException">Коллекция была изменена после создания перечислителя. </exception>
    </member>
    <member name="T:System.Collections.Generic.LinkedListNode`1">
      <summary>Предоставляет узел в <see cref="T:System.Collections.Generic.LinkedList`1" />. Этот класс не может быть унаследован.</summary>
      <typeparam name="T">Задает тип элемента в связанном списке.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedListNode`1.#ctor(`0)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Collections.Generic.LinkedListNode`1" /> содержащего указанное значение.</summary>
      <param name="value">Значение, которое должно содержаться в <see cref="T:System.Collections.Generic.LinkedListNode`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.List">
      <summary>Получает коллекцию <see cref="T:System.Collections.Generic.LinkedList`1" />, к которой принадлежит узел <see cref="T:System.Collections.Generic.LinkedListNode`1" />.</summary>
      <returns>Ссылка на коллекцию <see cref="T:System.Collections.Generic.LinkedList`1" />, к которой принадлежит узел <see cref="T:System.Collections.Generic.LinkedListNode`1" />, или значение null, если узел <see cref="T:System.Collections.Generic.LinkedListNode`1" /> не имеет ссылок.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Next">
      <summary>Получает следующий узел в коллекции <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Ссылка на следующий узел в коллекции <see cref="T:System.Collections.Generic.LinkedList`1" /> или значение null, если текущий узел является последним элементом (свойство <see cref="P:System.Collections.Generic.LinkedList`1.Last" />) коллекции <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Previous">
      <summary>Получает предыдущий узел в коллекции <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Ссылка на предыдущий узел в коллекции <see cref="T:System.Collections.Generic.LinkedList`1" /> или значение null, если текущий узел является первым элементом (свойство <see cref="P:System.Collections.Generic.LinkedList`1.First" />) коллекции <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Value">
      <summary>Возвращает значение, содержащееся в узле.</summary>
      <returns>Значение, содержащееся в узле.</returns>
    </member>
    <member name="T:System.Collections.Generic.Queue`1">
      <summary>Представляет коллекцию объектов, основанную на принципе "первым поступил — первым обслужен".</summary>
      <typeparam name="T">Задает тип элементов в очереди.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor">
      <summary>Инициализирует новый пустой экземпляр класса <see cref="T:System.Collections.Generic.Queue`1" /> с начальной емкостью по умолчанию.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Collections.Generic.Queue`1" />, содержащий элементы, скопированные из указанного коллекции, обладающий емкостью, достаточной для того, чтобы вместить все количество скопированных элементов.</summary>
      <param name="collection">Коллекция, элементы которой копируются в новую коллекцию <see cref="T:System.Collections.Generic.Queue`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
      <summary>Инициализирует новый пустой экземпляр класса <see cref="T:System.Collections.Generic.Queue`1" /> с указанной начальной емкостью.</summary>
      <param name="capacity">Начальное количество элементов, которое может содержать коллекция <see cref="T:System.Collections.Generic.Queue`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="capacity" /> меньше нуля.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Clear">
      <summary>Удаляет все объекты из коллекции  <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Contains(`0)">
      <summary>Определяет, входит ли элемент в состав коллекции <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <returns>true, если <paramref name="item" /> обнаружен в <see cref="T:System.Collections.Generic.Queue`1" />; в обратном случае false.</returns>
      <param name="item">Объект, который требуется найти в <see cref="T:System.Collections.Generic.Queue`1" />. Допускается значение null для ссылочных типов.</param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
      <summary>Копирует элементы коллекции <see cref="T:System.Collections.Generic.Queue`1" /> в существующий одномерный массив <see cref="T:System.Array" /> начиная с указанного значения индекса массива.</summary>
      <param name="array">Одномерный массив <see cref="T:System.Array" />, в который копируются элементы из коллекции <see cref="T:System.Collections.Generic.Queue`1" />. Индексация в массиве <see cref="T:System.Array" /> должна начинаться от нуля.</param>
      <param name="arrayIndex">Значение начинающегося с нуля индекса в массиве <paramref name="array" />, с которого начинается копирование.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="arrayIndex" /> меньше нуля.</exception>
      <exception cref="T:System.ArgumentException">Количество элементов в исходной коллекции <see cref="T:System.Collections.Generic.Queue`1" /> превышает доступное место, начиная с индекса <paramref name="arrayIndex" /> до конца массива назначения <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Count">
      <summary>Получает число элементов, содержащихся в коллекции <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <returns>Число элементов, содержащихся в <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Dequeue">
      <summary>Удаляет и возвращает объект, находящийся в начале коллекции <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <returns>Объект, который требуется удалить из начала коллекции <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
      <exception cref="T:System.InvalidOperationException">Объект <see cref="T:System.Collections.Generic.Queue`1" /> является пустым.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
      <summary>Добавляет объект в конец объекта <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <param name="item">Объект, добавляемый в коллекцию <see cref="T:System.Collections.Generic.Queue`1" />. Допускается значение null для ссылочных типов.</param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.GetEnumerator">
      <summary>Возвращает перечислитель, осуществляющий перебор элементов массива <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> для коллекции <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Peek">
      <summary>Возвращает объект, находящийся в начале коллекции <see cref="T:System.Collections.Generic.Queue`1" />, но не удаляет его.</summary>
      <returns>Объект, находящийся в начале коллекции <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
      <exception cref="T:System.InvalidOperationException">Объект <see cref="T:System.Collections.Generic.Queue`1" /> является пустым.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий итерацию в коллекции.</summary>
      <returns>Перечислитель <see cref="T:System.Collections.Generic.IEnumerator`1" />, который может использоваться для итерации по элементам коллекции.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Копирует элементы <see cref="T:System.Collections.ICollection" /> в <see cref="T:System.Array" />, начиная с конкретного индекса <see cref="T:System.Array" />.</summary>
      <param name="array">Одномерный массив <see cref="T:System.Array" />, в который копируются элементы из коллекции <see cref="T:System.Collections.ICollection" />. Индексация в массиве <see cref="T:System.Array" /> должна начинаться от нуля.</param>
      <param name="index">Значение начинающегося с нуля индекса в массиве <paramref name="array" />, с которого начинается копирование.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="index" /> меньше нуля.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="array" /> является многомерным.-или-В параметре <paramref name="array" /> не используется индексация с нуля.-или-Количество элементов в исходной коллекции <see cref="T:System.Collections.ICollection" /> превышает доступное место, начиная с индекса <paramref name="index" /> до конца массива назначения <paramref name="array" />.-или-Тип исходного объекта <see cref="T:System.Collections.ICollection" /> нельзя автоматически привести к типу параметра назначения <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
      <summary>Получает значение, показывающее, является ли доступ к интерфейсу <see cref="T:System.Collections.ICollection" /> синхронизированным (потокобезопасным).</summary>
      <returns>Значение true, если доступ к коллекции <see cref="T:System.Collections.ICollection" /> является потокобезопасным, в противном случае — false.  В используемой по умолчанию реализации <see cref="T:System.Collections.Generic.Queue`1" /> это свойство всегда возвращает значение false.</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
      <summary>Получает объект, который можно использовать для синхронизации доступа к <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Объект, который можно использовать для синхронизации доступа к коллекции <see cref="T:System.Collections.ICollection" />.  В используемой по умолчанию реализации <see cref="T:System.Collections.Generic.Queue`1" /> это свойство всегда возвращает текущий экземпляр.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий итерацию в коллекции.</summary>
      <returns>Перечислитель <see cref="T:System.Collections.IEnumerator" />, который может использоваться для итерации по элементам коллекции.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.ToArray">
      <summary>Копирует элементы коллекции <see cref="T:System.Collections.Generic.Queue`1" /> в новый массив.</summary>
      <returns>Новый массив, содержащий элементы, скопированные из коллекции <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TrimExcess">
      <summary>Устанавливает емкость равной фактическому количеству элементов в <see cref="T:System.Collections.Generic.Queue`1" />, если это количество составляет менее 90 процентов текущей емкости.</summary>
    </member>
    <member name="T:System.Collections.Generic.Queue`1.Enumerator">
      <summary>Выполняет перечисление элементов <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.Current">
      <summary>Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns>Элемент в <see cref="T:System.Collections.Generic.Queue`1" /> находится в текущей позиции перечислителя.</returns>
      <exception cref="T:System.InvalidOperationException">Перечислитель помещается перед первым элементом коллекции или после последнего элемента. </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.Dispose">
      <summary>Освобождает все ресурсы, используемые объектом <see cref="T:System.Collections.Generic.Queue`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <returns>Значение true, если перечислитель был успешно перемещен к следующему элементу; значение false, если перечислитель достиг конца коллекции.</returns>
      <exception cref="T:System.InvalidOperationException">Коллекция была изменена после создания перечислителя. </exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns>Элемент коллекции, соответствующий текущей позиции перечислителя.</returns>
      <exception cref="T:System.InvalidOperationException">Перечислитель помещается перед первым элементом коллекции или после последнего элемента. </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Устанавливает перечислитель в его начальное положение, перед первым элементом коллекции.</summary>
      <exception cref="T:System.InvalidOperationException">Коллекция была изменена после создания перечислителя. </exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2">
      <summary>Представляет коллекцию пар ключ/значение, упорядоченных по ключу. </summary>
      <typeparam name="TKey">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue">Тип значений в словаре.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor">
      <summary>Инициализирует новый пустой экземпляр класса <see cref="T:System.Collections.Generic.SortedDictionary`2" />, использующий реализацию <see cref="T:System.Collections.Generic.IComparer`1" /> по умолчанию для данного типа ключа.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>Инициализирует новый пустой экземпляр класса <see cref="T:System.Collections.Generic.SortedDictionary`2" />, использующий для сравнения ключей указанную реализацию <see cref="T:System.Collections.Generic.IComparer`1" />.</summary>
      <param name="comparer">Реализация <see cref="T:System.Collections.Generic.IComparer`1" />, которую следует использовать при сравнении ключей, или null, если для данного типа ключа должна использоваться реализация <see cref="T:System.Collections.Generic.Comparer`1" /> по умолчанию.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Collections.Generic.SortedDictionary`2" />, который содержит элементы, скопированные из указанного словаря <see cref="T:System.Collections.Generic.IDictionary`2" />, и использует для данного типа ключа реализацию <see cref="T:System.Collections.Generic.IComparer`1" /> по умолчанию.</summary>
      <param name="dictionary">Объект <see cref="T:System.Collections.Generic.IDictionary`2" />, элементы которого копируются в новый объект <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="dictionary" /> содержит один или более повторяющихся ключей.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Collections.Generic.SortedDictionary`2" />, который содержит элементы, скопированные из указанного словаря <see cref="T:System.Collections.Generic.IDictionary`2" />, и использует для сравнения ключей указанную реализацию <see cref="T:System.Collections.Generic.IComparer`1" />.</summary>
      <param name="dictionary">Объект <see cref="T:System.Collections.Generic.IDictionary`2" />, элементы которого копируются в новый объект <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</param>
      <param name="comparer">Реализация <see cref="T:System.Collections.Generic.IComparer`1" />, которую следует использовать при сравнении ключей, или null, если для данного типа ключа должна использоваться реализация <see cref="T:System.Collections.Generic.Comparer`1" /> по умолчанию.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="dictionary" /> содержит один или более повторяющихся ключей.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Add(`0,`1)">
      <summary>Добавляет элемент с указанными ключом и значением в словарь <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <param name="key">Ключ добавляемого элемента.</param>
      <param name="value">Значение добавляемого элемента. Для ссылочных типов значение может быть null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Элемент с таким ключом уже существует в <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Clear">
      <summary>Удаляет все элементы из списка <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Comparer">
      <summary>Возвращает компаратор <see cref="T:System.Collections.Generic.IComparer`1" />, использованный для упорядочения элементов словаря <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>Компаратор <see cref="T:System.Collections.Generic.IComparer`1" />, использованный для упорядочения элементов словаря <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)">
      <summary>Определяет, содержится ли элемент с указанным ключом в <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>Значение true, если объект <see cref="T:System.Collections.Generic.SortedDictionary`2" /> содержит элемент с указанным ключом; в противном случае — значение false.</returns>
      <param name="key">Ключ, который требуется найти в <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsValue(`1)">
      <summary>Определяет, содержится ли элемент с указанным значением в словаре <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>Значение true, если объект <see cref="T:System.Collections.Generic.SortedDictionary`2" /> содержит элемент с указанным значением; в противном случае — значение false.</returns>
      <param name="value">Значение, которое требуется найти в коллекции <see cref="T:System.Collections.Generic.SortedDictionary`2" />. Допускается значение null для ссылочных типов.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>Копирует элементы словаря <see cref="T:System.Collections.Generic.SortedDictionary`2" /> в указанный массив структур <see cref="T:System.Collections.Generic.KeyValuePair`2" />, начиная с заданной позиции индекса.</summary>
      <param name="array">Одномерный массив структур <see cref="T:System.Collections.Generic.KeyValuePair`2" />, в который копируются элементы из текущего словаря <see cref="T:System.Collections.Generic.SortedDictionary`2" />. Индексация массива должна начинаться с нуля.</param>
      <param name="index">Значение начинающегося с нуля индекса в массиве <paramref name="array" />, с которого начинается копирование.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="index" /> меньше 0.</exception>
      <exception cref="T:System.ArgumentException">Количество элементов в исходной коллекции <see cref="T:System.Collections.Generic.SortedDictionary`2" /> превышает доступное место, начиная с индекса <paramref name="index" /> до конца массива назначения <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Count">
      <summary>Получает число пар "ключ-значение" в коллекции <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>Число пар "ключ-значение" в коллекции <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.GetEnumerator">
      <summary>Возвращает перечислитель, осуществляющий перебор элементов массива <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" /> для <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Item(`0)">
      <summary>Возвращает или задает значение, связанное с указанным ключом.</summary>
      <returns>Значение, связанное с указанным ключом. Если указанный ключ не найден, операция получения генерирует исключение <see cref="T:System.Collections.Generic.KeyNotFoundException" />, а операция задания значения создает новый элемент с указанным ключом.</returns>
      <param name="key">Ключ, значение которого требуется получить или задать.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение null.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Свойство извлечено, параметр <paramref name="key" /> не существует в коллекции.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Keys">
      <summary>Получает коллекцию, содержащую ключи в объекте <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />, содержащий ключи в объекте <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Remove(`0)">
      <summary>Удаляет элемент с указанным ключом из словаря <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>true, если элемент был успешно удален; в противном случае — значение false.  Этот метод также возвращает false, если элемент <paramref name="key" /> не найден в коллекции <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
      <param name="key">Ключ элемента, который требуется удалить.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Добавляет элемент в коллекцию <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="keyValuePair">Структура <see cref="T:System.Collections.Generic.KeyValuePair`2" />, которую необходимо добавить в коллекцию <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyValuePair" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Элемент с таким ключом уже существует в <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Определяет, содержит ли коллекция <see cref="T:System.Collections.Generic.ICollection`1" /> указанные ключ и значение.</summary>
      <returns>true, если <paramref name="keyValuePair" /> обнаружен в <see cref="T:System.Collections.Generic.ICollection`1" />; в обратном случае false.</returns>
      <param name="keyValuePair">Структура <see cref="T:System.Collections.Generic.KeyValuePair`2" />, которую требуется найти в коллекции <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Получает значение, указывающее, доступна ли коллекция <see cref="T:System.Collections.Generic.ICollection`1" /> только для чтения.</summary>
      <returns>true, если <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — false. В используемой по умолчанию реализации <see cref="T:System.Collections.Generic.SortedDictionary`2" /> это свойство всегда возвращает значение false.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Удаляет первое вхождение указанного элемента из коллекции <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>Значение true, если объект <paramref name="keyValuePair" /> был успешно удален из <see cref="T:System.Collections.Generic.ICollection`1" />; в противном случае — значение false. Этот метод также возвращает false, если элемент <paramref name="keyValuePair" /> не найден в коллекции <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <param name="keyValuePair">Структура <see cref="T:System.Collections.Generic.KeyValuePair`2" />, удаляемая из коллекции <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>Получает интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий ключи из <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий ключи из <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>Получает интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий значения из коллекции <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий значения из коллекции <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий итерацию в коллекции.</summary>
      <returns>Перечислитель <see cref="T:System.Collections.IEnumerator" />, который может использоваться для итерации по элементам коллекции.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Копирует элементы коллекции <see cref="T:System.Collections.Generic.ICollection`1" /> в массив, начиная с указанного индекса массива.</summary>
      <param name="array">Одномерный массив, который является назначением для элементов, копируемых из <see cref="T:System.Collections.Generic.ICollection`1" />. Индексы массива должны начинаться с нуля.</param>
      <param name="index">Значение начинающегося с нуля индекса в массиве <paramref name="array" />, с которого начинается копирование.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="index" /> меньше 0.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="array" /> является многомерным.-или-В параметре <paramref name="array" /> не используется индексация с нуля.-или-Количество элементов в исходной коллекции <see cref="T:System.Collections.Generic.ICollection`1" /> превышает доступное место, начиная с индекса <paramref name="index" /> до конца массива назначения <paramref name="array" />.-или-Тип исходного объекта <see cref="T:System.Collections.Generic.ICollection`1" /> нельзя автоматически привести к типу параметра назначения <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Получает значение, показывающее, является ли доступ к интерфейсу <see cref="T:System.Collections.ICollection" /> синхронизированным (потокобезопасным).</summary>
      <returns>Значение true, если доступ к коллекции <see cref="T:System.Collections.ICollection" /> является потокобезопасным, в противном случае — false.  В используемой по умолчанию реализации <see cref="T:System.Collections.Generic.SortedDictionary`2" /> это свойство всегда возвращает значение false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Получает объект, который можно использовать для синхронизации доступа к <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Объект, который можно использовать для синхронизации доступа к коллекции <see cref="T:System.Collections.ICollection" />. </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Добавляет элемент с указанными ключом и значением в <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">Объект, используемый в качестве ключа добавляемого элемента.</param>
      <param name="value">Объект, используемый в качестве значения добавляемого элемента.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="key" /> имеет тип, который не может быть назначен типу ключа <paramref name="TKey" /> интерфейса <see cref="T:System.Collections.IDictionary" />.-или-Параметр <paramref name="value" /> имеет тип, который не может быть назначен типу значения <paramref name="TValue" /> интерфейса <see cref="T:System.Collections.IDictionary" />.-или-Элемент с таким ключом уже существует в <see cref="T:System.Collections.IDictionary" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Определяет, содержится ли элемент с указанным ключом в <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Значение true, если объект <see cref="T:System.Collections.IDictionary" /> содержит элемент с указанным ключом; в противном случае — значение false.</returns>
      <param name="key">Ключ, который требуется найти в <see cref="T:System.Collections.IDictionary" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Возвращает объект <see cref="T:System.Collections.IDictionaryEnumerator" /> для массива <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.IDictionaryEnumerator" /> для коллекции <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Получает значение, показывающее, имеет ли список <see cref="T:System.Collections.IDictionary" /> фиксированный размер.</summary>
      <returns>Значение true, если коллекция <see cref="T:System.Collections.IDictionary" /> имеет фиксированный размер, в противном случае — значение false.  В используемой по умолчанию реализации <see cref="T:System.Collections.Generic.SortedDictionary`2" /> это свойство всегда возвращает значение false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Получает значение, указывающее, доступна ли коллекция <see cref="T:System.Collections.IDictionary" /> только для чтения.</summary>
      <returns>true, если <see cref="T:System.Collections.IDictionary" /> доступен только для чтения; в противном случае — false.  В используемой по умолчанию реализации <see cref="T:System.Collections.Generic.SortedDictionary`2" /> это свойство всегда возвращает значение false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Возвращает или задает элемент с указанным ключом.</summary>
      <returns>Значение, связанное с указанным ключом, или null, если <paramref name="key" /> отсутствует в словаре или тип параметра <paramref name="key" /> не допускает присваивание типу ключа <paramref name="TKey" /> коллекции <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
      <param name="key">Ключ элемента, который требуется получить.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Назначаемое значение и параметр <paramref name="key" /> типа, который не может быть назначен типу ключа <paramref name="TKey" /> объекта <see cref="T:System.Collections.Generic.SortedDictionary`2" />.-или-Назначаемое значение и параметр <paramref name="value" /> типа, который не может быть назначен типу значения <paramref name="TValue" /> объекта <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary>Получает интерфейс <see cref="T:System.Collections.ICollection" />, содержащий ключи из <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.ICollection" />, содержащий ключи из <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Удаляет элемент с указанным ключом из словаря <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">Ключ элемента, который требуется удалить.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Values">
      <summary>Получает интерфейс <see cref="T:System.Collections.ICollection" />, содержащий значения из коллекции <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.ICollection" />, содержащий значения из коллекции <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий итерацию по элементам коллекции.</summary>
      <returns>Перечислитель <see cref="T:System.Collections.Generic.IEnumerator`1" />, который может использоваться для итерации по элементам коллекции.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)">
      <summary>Получает значение, связанное с указанным ключом.</summary>
      <returns>Значение true, если объект <see cref="T:System.Collections.Generic.SortedDictionary`2" /> содержит элемент с указанным ключом; в противном случае — значение false.</returns>
      <param name="key">Ключ значения, которое необходимо получить.</param>
      <param name="value">Этот метод возвращает значение, связанное с указанным ключом, если он найден; в противном случае — значение по умолчанию для данного типа параметра <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Values">
      <summary>Получает коллекцию, содержащую значения в объекте <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>Коллекция <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />, содержащая значения из словаря <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.Enumerator">
      <summary>Выполняет перечисление элементов <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current">
      <summary>Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns>Элемент в <see cref="T:System.Collections.Generic.SortedDictionary`2" /> находится в текущей позиции перечислителя.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.Dispose">
      <summary>Освобождает все ресурсы, используемые объектом <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>Значение true, если перечислитель был успешно перемещен к следующему элементу; значение false, если перечислитель достиг конца коллекции.</returns>
      <exception cref="T:System.InvalidOperationException">Коллекция была изменена после создания перечислителя. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary>Возвращает элемент, расположенный в текущей позиции перечислителя, в виде структуры <see cref="T:System.Collections.DictionaryEntry" />.</summary>
      <returns>Элемент коллекции, расположенный в текущей позиции словаря и имеющий вид структуры <see cref="T:System.Collections.DictionaryEntry" />.</returns>
      <exception cref="T:System.InvalidOperationException">Перечислитель помещается перед первым элементом коллекции или после последнего элемента. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary>Возвращает ключ элемента, расположенного в текущей позиции перечислителя.</summary>
      <returns>Ключ элемента коллекции, расположенного в текущей позиции перечислителя.</returns>
      <exception cref="T:System.InvalidOperationException">Перечислитель помещается перед первым элементом коллекции или после последнего элемента. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary>Возвращает значение элемента, расположенного в текущей позиции перечислителя.</summary>
      <returns>Значение элемента коллекции, расположенного в текущей позиции перечислителя.</returns>
      <exception cref="T:System.InvalidOperationException">Перечислитель помещается перед первым элементом коллекции или после последнего элемента. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns>Элемент коллекции, соответствующий текущей позиции перечислителя.</returns>
      <exception cref="T:System.InvalidOperationException">Перечислитель помещается перед первым элементом коллекции или после последнего элемента. </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Устанавливает перечислитель в его начальное положение, перед первым элементом коллекции.</summary>
      <exception cref="T:System.InvalidOperationException">Коллекция была изменена после создания перечислителя. </exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection">
      <summary>Представляет коллекцию ключей в объекте <see cref="T:System.Collections.Generic.SortedDictionary`2" />. Этот класс не может быть унаследован. </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />, который отражает ключи в указанном словаре <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <param name="dictionary">Объект <see cref="T:System.Collections.Generic.SortedDictionary`2" />, ключи которого отражены в новом объекте <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>Копирует элементы <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> в существующий одномерный массив, начиная с указанного значения индекса массива.</summary>
      <param name="array">Одномерный массив, который является назначением для элементов, копируемых из <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />. Индексы массива должны начинаться с нуля.</param>
      <param name="index">Значение начинающегося с нуля индекса в массиве <paramref name="array" />, с которого начинается копирование.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> имеет значение null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="index" /> меньше 0.</exception>
      <exception cref="T:System.ArgumentException">Количество элементов в исходной коллекции <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> превышает доступное место, начиная с индекса <paramref name="index" /> до конца массива назначения <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Count">
      <summary>Получает число элементов, содержащихся в коллекции <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</summary>
      <returns>Число элементов, содержащихся в <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.GetEnumerator">
      <summary>Возвращает перечислитель, осуществляющий перебор элементов массива <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</summary>
      <returns>Структура объекта <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" /> для <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Добавляет элемент в коллекцию <see cref="T:System.Collections.Generic.ICollection`1" />.  Данная реализация всегда выдает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item">Объект, добавляемый в коллекцию <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Всегда выдается; коллекция доступна только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Удаляет все элементы из коллекции <see cref="T:System.Collections.Generic.ICollection`1" />.  Данная реализация всегда выдает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Всегда выдается; коллекция доступна только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Contains(`0)">
      <summary>Определяет, содержит ли коллекция <see cref="T:System.Collections.Generic.ICollection`1" /> указанное значение.</summary>
      <returns>true, если <paramref name="item" /> обнаружен в <see cref="T:System.Collections.Generic.ICollection`1" />; в обратном случае false.</returns>
      <param name="item">Объект, который требуется найти в <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Получает значение, указывающее, доступна ли коллекция <see cref="T:System.Collections.Generic.ICollection`1" /> только для чтения.</summary>
      <returns>true, если <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — false.  В используемой по умолчанию реализации <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> это свойство всегда возвращает значение false.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Удаляет первое вхождение указанного объекта из списка <see cref="T:System.Collections.Generic.ICollection`1" />.  Данная реализация всегда выдает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Значение true, если объект <paramref name="item" /> был успешно удален из <see cref="T:System.Collections.Generic.ICollection`1" />; в противном случае — значение false. Этот метод также возвращает false, если элемент <paramref name="item" /> не найден в коллекции <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <param name="item">Объект, который необходимо удалить из коллекции <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Всегда выдается; коллекция доступна только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий итерацию по элементам коллекции.</summary>
      <returns>Перечислитель <see cref="T:System.Collections.Generic.IEnumerator`1" />, который может использоваться для итерации по элементам коллекции.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Копирует элементы <see cref="T:System.Collections.ICollection" /> в массив, начиная с определенного индекса массива.</summary>
      <param name="array">Одномерный массив, который является назначением для элементов, копируемых из <see cref="T:System.Collections.ICollection" />. Индексы массива должны начинаться с нуля.</param>
      <param name="index">Значение начинающегося с нуля индекса в массиве <paramref name="array" />, с которого начинается копирование.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="index" /> меньше 0.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="array" /> является многомерным.-или-В параметре <paramref name="array" /> не используется индексация с нуля.-или-Количество элементов в исходной коллекции <see cref="T:System.Collections.ICollection" /> превышает доступное место, начиная с индекса <paramref name="index" /> до конца массива назначения <paramref name="array" />.-или-Тип исходного объекта <see cref="T:System.Collections.ICollection" /> нельзя автоматически привести к типу параметра назначения <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Получает значение, показывающее, является ли доступ к интерфейсу <see cref="T:System.Collections.ICollection" /> синхронизированным (потокобезопасным).</summary>
      <returns>Значение true, если доступ к коллекции <see cref="T:System.Collections.ICollection" /> является потокобезопасным, в противном случае — false.  В используемой по умолчанию реализации <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> это свойство всегда возвращает значение false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>Получает объект, который можно использовать для синхронизации доступа к <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Объект, который можно использовать для синхронизации доступа к коллекции <see cref="T:System.Collections.ICollection" />.  В используемой по умолчанию реализации <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> это свойство всегда возвращает текущий экземпляр.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий итерацию по элементам коллекции.</summary>
      <returns>Перечислитель <see cref="T:System.Collections.IEnumerator" />, который может использоваться для итерации по элементам коллекции.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator">
      <summary>Выполняет перечисление элементов <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Current">
      <summary>Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns>Элемент в <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> находится в текущей позиции перечислителя.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Dispose">
      <summary>Освобождает все ресурсы, используемые объектом <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</summary>
      <returns>Значение true, если перечислитель был успешно перемещен к следующему элементу; значение false, если перечислитель достиг конца коллекции.</returns>
      <exception cref="T:System.InvalidOperationException">Коллекция была изменена после создания перечислителя. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns>Элемент коллекции, соответствующий текущей позиции перечислителя.</returns>
      <exception cref="T:System.InvalidOperationException">Перечислитель помещается перед первым элементом коллекции или после последнего элемента. </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Устанавливает перечислитель в его начальное положение, перед первым элементом коллекции.</summary>
      <exception cref="T:System.InvalidOperationException">Коллекция была изменена после создания перечислителя. </exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection">
      <summary>Представляет коллекцию значений в <see cref="T:System.Collections.Generic.SortedDictionary`2" />. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />, который отражает значения в указанном объекте <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <param name="dictionary">Объект <see cref="T:System.Collections.Generic.SortedDictionary`2" />, значения которого отражены в новой коллекции <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>Копирует элементы <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> в существующий одномерный массив, начиная с указанного значения индекса массива.</summary>
      <param name="array">Одномерный массив, который является назначением для элементов, копируемых из <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />. Индексы массива должны начинаться с нуля.</param>
      <param name="index">Значение начинающегося с нуля индекса в массиве <paramref name="array" />, с которого начинается копирование.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="index" /> меньше 0.</exception>
      <exception cref="T:System.ArgumentException">Количество элементов в исходной коллекции <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> превышает доступное место, начиная с индекса <paramref name="index" /> до конца массива назначения <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Count">
      <summary>Получает число элементов, содержащихся в коллекции <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</summary>
      <returns>Число элементов, содержащихся в <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.GetEnumerator">
      <summary>Возвращает перечислитель, осуществляющий перебор элементов массива <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</summary>
      <returns>Структура объекта <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" /> для <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Add(`1)">
      <summary>Добавляет элемент в коллекцию <see cref="T:System.Collections.Generic.ICollection`1" />.  Данная реализация всегда выдает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item">Объект, добавляемый в коллекцию <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Всегда выдается; коллекция доступна только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Удаляет все элементы из коллекции <see cref="T:System.Collections.Generic.ICollection`1" />.  Данная реализация всегда выдает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Всегда выдается; коллекция доступна только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Contains(`1)">
      <summary>Определяет, содержит ли коллекция <see cref="T:System.Collections.Generic.ICollection`1" /> указанное значение.</summary>
      <returns>true, если <paramref name="item" /> обнаружен в <see cref="T:System.Collections.Generic.ICollection`1" />; в обратном случае false.</returns>
      <param name="item">Объект, который требуется найти в <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Получает значение, указывающее, доступна ли коллекция <see cref="T:System.Collections.Generic.ICollection`1" /> только для чтения.</summary>
      <returns>true, если <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — false.  В используемой по умолчанию реализации <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> это свойство всегда возвращает значение false.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Remove(`1)">
      <summary>Удаляет первое вхождение указанного объекта из списка <see cref="T:System.Collections.Generic.ICollection`1" />.  Данная реализация всегда выдает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Значение true, если объект <paramref name="item" /> был успешно удален из <see cref="T:System.Collections.Generic.ICollection`1" />; в противном случае — значение false. Этот метод также возвращает false, если элемент <paramref name="item" /> не найден в коллекции <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <param name="item">Объект, который необходимо удалить из коллекции <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Всегда выдается; коллекция доступна только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Удаляет первое вхождение указанного объекта из списка <see cref="T:System.Collections.Generic.ICollection`1" />.  Данная реализация всегда выдает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Значение true, если объект <paramref name="item" /> был успешно удален из <see cref="T:System.Collections.Generic.ICollection`1" />; в противном случае — значение false. Этот метод также возвращает false, если элемент <paramref name="item" /> не найден в коллекции <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <exception cref="T:System.NotSupportedException">Всегда выдается; коллекция доступна только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Копирует элементы <see cref="T:System.Collections.ICollection" /> в массив, начиная с определенного индекса массива.</summary>
      <param name="array">Одномерный массив, который является назначением для элементов, копируемых из <see cref="T:System.Collections.ICollection" />. Индексы массива должны начинаться с нуля.</param>
      <param name="index">Значение начинающегося с нуля индекса в массиве <paramref name="array" />, с которого начинается копирование.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="index" /> меньше 0.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="array" /> является многомерным.-или-В параметре <paramref name="array" /> не используется индексация с нуля.-или-Количество элементов в исходной коллекции <see cref="T:System.Collections.ICollection" /> превышает доступное место, начиная с индекса <paramref name="index" /> до конца массива назначения <paramref name="array" />.-или-Тип исходного объекта <see cref="T:System.Collections.ICollection" /> нельзя автоматически привести к типу параметра назначения <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Получает значение, показывающее, является ли доступ к интерфейсу <see cref="T:System.Collections.ICollection" /> синхронизированным (потокобезопасным).</summary>
      <returns>Значение true, если доступ к коллекции <see cref="T:System.Collections.ICollection" /> является потокобезопасным, в противном случае — false.  В используемой по умолчанию реализации <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> это свойство всегда возвращает значение false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>Получает объект, который можно использовать для синхронизации доступа к <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Объект, который можно использовать для синхронизации доступа к коллекции <see cref="T:System.Collections.ICollection" />.  В используемой по умолчанию реализации <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> это свойство всегда возвращает текущий экземпляр.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий итерацию по элементам коллекции.</summary>
      <returns>Перечислитель <see cref="T:System.Collections.IEnumerator" />, который может использоваться для итерации по элементам коллекции.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator">
      <summary>Выполняет перечисление элементов <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Current">
      <summary>Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns>Элемент в <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> находится в текущей позиции перечислителя.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Dispose">
      <summary>Освобождает все ресурсы, используемые объектом <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</summary>
      <returns>Значение true, если перечислитель был успешно перемещен к следующему элементу; значение false, если перечислитель достиг конца коллекции.</returns>
      <exception cref="T:System.InvalidOperationException">Коллекция была изменена после создания перечислителя. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns>Элемент коллекции, соответствующий текущей позиции перечислителя.</returns>
      <exception cref="T:System.InvalidOperationException">Перечислитель помещается перед первым элементом коллекции или после последнего элемента. </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Устанавливает перечислитель в его начальное положение, перед первым элементом коллекции.</summary>
      <exception cref="T:System.InvalidOperationException">Коллекция была изменена после создания перечислителя. </exception>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1">
      <summary>Представляет упорядоченную коллекцию объектов.</summary>
      <typeparam name="T">Тип элементов в наборе.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Collections.Generic.SortedSet`1" />. </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Collections.Generic.SortedSet`1" />, использующий заданный компаратор.</summary>
      <param name="comparer">Компаратор по умолчанию для использования при сравнении объектов. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Collections.Generic.SortedSet`1" />, содержащий элементы, скопированные из заданной перечисляемой коллекции.</summary>
      <param name="collection">Перечисляемая коллекция, из которой копируются объекты. </param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Collections.Generic.SortedSet`1" />, содержащий элементы, скопированные из заданной перечисляемой коллекции, и использующий заданных компаратор.</summary>
      <param name="collection">Перечисляемая коллекция, из которой копируются объекты. </param>
      <param name="comparer">Компаратор по умолчанию для использования при сравнении объектов. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Add(`0)">
      <summary>Добавляет элемент в набор и возвращает значение, указывающее, что элемент был добавлен успешно.</summary>
      <returns>значение true,    при  <paramref name="item" />добавляется к набору; в противном случае  значение false,. </returns>
      <param name="item">Элемент, добавляемый в набор.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Clear">
      <summary>Удаляет из набора все элементы.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Comparer">
      <summary>Получает объект <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для определения равенства значениям в наборе <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns>Компаратор, используемый для определения равенства значениям в наборе <see cref="T:System.Collections.Generic.SortedSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Contains(`0)">
      <summary>Определяет, содержит ли набор указанный элемент.</summary>
      <returns>Значение true, если коллекция содержит объект <paramref name="item" />; в обратном случае — значение false.</returns>
      <param name="item">Элемент, который требуется найти в наборе.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[])">
      <summary>Копирует весь набор <see cref="T:System.Collections.Generic.SortedSet`1" /> в совместимый одномерный массив начиная с первого элемента массива назначения.</summary>
      <param name="array">Одномерный массив, который является назначением элементов, копируемых из <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentException">Количество элементов в исходном списке <see cref="T:System.Collections.Generic.SortedSet`1" /> больше числа элементов, которое может храниться в массиве назначения. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)">
      <summary>Копирует весь набор <see cref="T:System.Collections.Generic.SortedSet`1" /> в совместимый одномерный массив начиная с указанного индекса.</summary>
      <param name="array">Одномерный массив, который является назначением элементов, копируемых из <see cref="T:System.Collections.Generic.SortedSet`1" />. Индексы массива должны начинаться с нуля.</param>
      <param name="index">Значение нулевого индекса в массиве <paramref name="array" />, с которого начинается копирование.</param>
      <exception cref="T:System.ArgumentException">Количество элементов в исходном массиве больше доступного пространства от заданного индекса <paramref name="index" /> до конца массива назначения.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="index" /> меньше нуля.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>Копирует заданное число элементов из набора <see cref="T:System.Collections.Generic.SortedSet`1" /> в совместимый одномерный массив начиная с указанного индекса.</summary>
      <param name="array">Одномерный массив, который является назначением элементов, копируемых из <see cref="T:System.Collections.Generic.SortedSet`1" />. Индексы массива должны начинаться с нуля.</param>
      <param name="index">Значение нулевого индекса в массиве <paramref name="array" />, с которого начинается копирование.</param>
      <param name="count">Число элементов для копирования.</param>
      <exception cref="T:System.ArgumentException">Количество элементов в исходном массиве больше доступного пространства от заданного индекса <paramref name="index" /> до конца массива назначения.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="index" /> меньше нуля.-или-Значение параметра <paramref name="count" /> меньше нуля.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Count">
      <summary>Получает количество элементов в наборе <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns>Количество элементов в коллекции <see cref="T:System.Collections.Generic.SortedSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Удаляет все элементы в указанной коллекции из текущего объекта <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <param name="other">Коллекция элементов, удаляемая из объекта <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetEnumerator">
      <summary>Возвращает перечислитель, осуществляющий перебор элементов массива <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns>Перечислитель, проходящий через  <see cref="T:System.Collections.Generic.SortedSet`1" />в отсортированы в порядке.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)">
      <summary>Возвращает представление подмножества в наборе <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns>Представление подмножества, содержащее только значения из заданного диапазона.</returns>
      <param name="lowerValue">Минимальное требуемое значение в представлении.</param>
      <param name="upperValue">Максимальное требуемое значение в представлении. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="lowerValue" /> больше <paramref name="upperValue" /> согласно сравнению.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Предпринятая над представлением операция вышла за пределы диапазона, указанного значениями <paramref name="lowerValue" /> и <paramref name="upperValue" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Изменяет текущий объект <see cref="T:System.Collections.Generic.SortedSet`1" />, чтобы он содержал только элементы, которые также имеются в заданной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли объект <see cref="T:System.Collections.Generic.SortedSet`1" /> строгим подмножеством указанной коллекции.</summary>
      <returns>Значение true, если объект <see cref="T:System.Collections.Generic.SortedSet`1" /> является строгим подмножеством объекта <paramref name="other" />; в противном случае — значение false.</returns>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли объект <see cref="T:System.Collections.Generic.SortedSet`1" /> строгим надмножеством указанной коллекции.</summary>
      <returns>Значение true, если объект <see cref="T:System.Collections.Generic.SortedSet`1" /> является строгим надмножеством объекта <paramref name="other" />; в противном случае — значение false.</returns>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.SortedSet`1" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли объект <see cref="T:System.Collections.Generic.SortedSet`1" /> подмножеством указанной коллекции.</summary>
      <returns>Значение true, если текущий объект <see cref="T:System.Collections.Generic.SortedSet`1" /> является подмножеством <paramref name="other" />; в противном случае — значение false.</returns>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли объект <see cref="T:System.Collections.Generic.SortedSet`1" /> надмножеством указанной коллекции.</summary>
      <returns>Значение true, если объект <see cref="T:System.Collections.Generic.SortedSet`1" /> является надмножеством объекта <paramref name="other" />; в противном случае — значение false.</returns>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.SortedSet`1" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Max">
      <summary>Получает максимальное значение в наборе <see cref="T:System.Collections.Generic.SortedSet`1" />, определенное компаратором.</summary>
      <returns>Максимальное значение в наборе.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Min">
      <summary>Получает минимальное значение в наборе <see cref="T:System.Collections.Generic.SortedSet`1" />, определенное компаратором.</summary>
      <returns>Минимальное значение в наборе.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, имеются ли общие элементы в текущем объекте <see cref="T:System.Collections.Generic.SortedSet`1" /> и в заданной коллекции.</summary>
      <returns>Значение true, если объекты <see cref="T:System.Collections.Generic.SortedSet`1" /> и <paramref name="other" /> совместно используют по крайней мере один общий элемент; в противном случае — значение false.</returns>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Remove(`0)">
      <summary>Удаляет указанный элемент из набора <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns>true, если элемент был успешно найден и удален; в противном случае — значение false. </returns>
      <param name="item">Удаляемый элемент.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>Удаляет из набора <see cref="T:System.Collections.Generic.SortedSet`1" /> все элементы, удовлетворяющие условиям, которые определяются указанным предикатом.</summary>
      <returns>Количество элементов, удаленных из коллекции <see cref="T:System.Collections.Generic.SortedSet`1" />. </returns>
      <param name="match">Делегат, определяющий условия удаления элементов.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Reverse">
      <summary>Возвращает перечислитель <see cref="T:System.Collections.Generic.IEnumerable`1" />, который перебирает элементы набора <see cref="T:System.Collections.Generic.SortedSet`1" /> в обратном порядке.</summary>
      <returns>Перечислитель, выполняющий итерацию в коллекции <see cref="T:System.Collections.Generic.SortedSet`1" /> в обратном порядке.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, содержат ли текущий объект <see cref="T:System.Collections.Generic.SortedSet`1" /> и указанная коллекция одинаковые элементы.</summary>
      <returns>true, если текущий объект <see cref="T:System.Collections.Generic.SortedSet`1" /> равен <paramref name="other" />, в противном случае — false.</returns>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Изменяет текущий объект <see cref="T:System.Collections.Generic.SortedSet`1" />, чтобы он содержал только элементы, которые имеются либо в текущем объекте, либо в указанной коллекции, но не одновременно в них обоих.</summary>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Добавляет элемент в объект <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">Объект, добавляемый в объект <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Объект <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Получает значение, которое указывает, является ли коллекция <see cref="T:System.Collections.ICollection" /> доступной только для чтения.</summary>
      <returns>true, если коллекция доступна только для чтения; в противном случае — false.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий итерацию в коллекции.</summary>
      <returns>Перечислитель, с помощью которого можно осуществлять итерацию по элементам коллекции.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Копирует весь набор <see cref="T:System.Collections.Generic.SortedSet`1" /> в совместимый одномерный массив начиная с указанного индекса.</summary>
      <param name="array">Одномерный массив, который является назначением элементов, копируемых из <see cref="T:System.Collections.Generic.SortedSet`1" />. Индексы массива должны начинаться с нуля.</param>
      <param name="index">Значение нулевого индекса в массиве <paramref name="array" />, с которого начинается копирование.</param>
      <exception cref="T:System.ArgumentException">Количество элементов в исходном массиве больше доступного пространства от заданного индекса <paramref name="index" /> до конца массива назначения. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="index" /> меньше нуля.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>Получает значение, определяющее, является ли доступ к коллекции <see cref="T:System.Collections.ICollection" /> синхронизированным (потокобезопасным).</summary>
      <returns>Значение true, если доступ к коллекции <see cref="T:System.Collections.ICollection" /> является синхронизированным, в противном случае — false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary>Получает объект, который можно использовать для синхронизации доступа к <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Объект, который можно использовать для синхронизации доступа к коллекции <see cref="T:System.Collections.ICollection" />. В используемой по умолчанию реализации <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> это свойство всегда возвращает текущий экземпляр.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий итерацию в коллекции.</summary>
      <returns>Перечислитель, с помощью которого можно осуществлять итерацию по элементам коллекции.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Изменяет текущий объект <see cref="T:System.Collections.Generic.SortedSet`1" />, чтобы он содержал все элементы, которые имеются как в текущем объекте, так и в указанной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1.Enumerator">
      <summary>Выполняет перечисление элементов объекта <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.Current">
      <summary>Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns>Элемент коллекции, соответствующий текущей позиции перечислителя.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.Dispose">
      <summary>Освобождает все ресурсы, используемые объектом <see cref="T:System.Collections.Generic.SortedSet`1.Enumerator" />. </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу коллекции <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns>Значение true, если перечислитель был успешно перемещен к следующему элементу; значение false, если перечислитель достиг конца коллекции.</returns>
      <exception cref="T:System.InvalidOperationException">Коллекция была изменена после создания перечислителя. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns>Элемент коллекции, соответствующий текущей позиции перечислителя.</returns>
      <exception cref="T:System.InvalidOperationException">Перечислитель помещается перед первым элементом коллекции или после последнего элемента. </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Устанавливает перечислитель в его начальное положение, перед первым элементом коллекции.</summary>
      <exception cref="T:System.InvalidOperationException">Коллекция была изменена после создания перечислителя. </exception>
    </member>
    <member name="T:System.Collections.Generic.Stack`1">
      <summary>Представляет коллекцию переменного размера экземпляров того же произвольного типа, имеющую тип "последним пришел - первым вышел" (LIFO).</summary>
      <typeparam name="T">Задает тип элементов в стеке.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor">
      <summary>Инициализирует новый пустой экземпляр класса <see cref="T:System.Collections.Generic.Stack`1" /> с начальной емкостью по умолчанию.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Collections.Generic.Stack`1" />, содержащий элементы, скопированные из указанного коллекции, обладающий емкостью, достаточной для того, чтобы вместить все количество скопированных элементов.</summary>
      <param name="collection">Коллекция, из которой требуется скопировать элементы.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Collections.Generic.Stack`1" />, который является пустым и обладает указанной начальной емкостью или емкостью по умолчанию, в зависимости от того, какое значение больше.</summary>
      <param name="capacity">Начальное количество элементов, которое может содержать коллекция <see cref="T:System.Collections.Generic.Stack`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="capacity" /> меньше нуля.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Clear">
      <summary>Удаляет все объекты из коллекции  <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Contains(`0)">
      <summary>Определяет, принадлежит ли элемент коллекции <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <returns>true, если <paramref name="item" /> обнаружен в <see cref="T:System.Collections.Generic.Stack`1" />; в обратном случае false.</returns>
      <param name="item">Объект, поиск которого осуществляется в <see cref="T:System.Collections.Generic.Stack`1" />. Допускается значение null для ссылочных типов.</param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
      <summary>Копирует элементы класса <see cref="T:System.Collections.Generic.Stack`1" /> в существующий одномерный массив класса <see cref="T:System.Array" />, начиная с указанного индекса массива.</summary>
      <param name="array">Одномерный массив <see cref="T:System.Array" />, в который копируются элементы из коллекции <see cref="T:System.Collections.Generic.Stack`1" />. Индексация <see cref="T:System.Array" /> должна начинаться с нуля.</param>
      <param name="arrayIndex">Значение нулевого индекса в массиве <paramref name="array" />, с которого начинается копирование.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="arrayIndex" /> меньше нуля.</exception>
      <exception cref="T:System.ArgumentException">Количество элементов в исходной коллекции <see cref="T:System.Collections.Generic.Stack`1" /> превышает доступное место, начиная с индекса <paramref name="arrayIndex" /> до конца массива назначения <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Count">
      <summary>Получает число элементов, содержащихся в коллекции <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <returns>Число элементов, содержащихся в <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.GetEnumerator">
      <summary>Возвращает перечислитель для свойства <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> для <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Peek">
      <summary>Возвращает верхний объект стека <see cref="T:System.Collections.Generic.Stack`1" />, но не удаляет его.</summary>
      <returns>Объект, находящийся в верхней части <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
      <exception cref="T:System.InvalidOperationException">Объект <see cref="T:System.Collections.Generic.Stack`1" /> является пустым.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Pop">
      <summary>Удаляет и возвращает верхний объект стека <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <returns>Объект, удаленный из верхней части <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
      <exception cref="T:System.InvalidOperationException">Объект <see cref="T:System.Collections.Generic.Stack`1" /> является пустым.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Push(`0)">
      <summary>Вставляет объект как верхний элемент стека <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <param name="item">Объект, вставляемый в <see cref="T:System.Collections.Generic.Stack`1" />. Допускается значение null для ссылочных типов.</param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий итерацию по элементам коллекции.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> можно использовать для перебора элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Копирует элементы <see cref="T:System.Collections.ICollection" /> в <see cref="T:System.Array" />, начиная с конкретного индекса <see cref="T:System.Array" />.</summary>
      <param name="array">Одномерный массив <see cref="T:System.Array" />, в который копируются элементы из коллекции <see cref="T:System.Collections.ICollection" />. Индексация <see cref="T:System.Array" /> должна начинаться с нуля.</param>
      <param name="arrayIndex">Значение нулевого индекса в массиве <paramref name="array" />, с которого начинается копирование.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="arrayIndex" /> меньше нуля.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="array" /> является многомерным.-или-В параметре <paramref name="array" /> не используется индексация с нуля.-или-Количество элементов в исходной коллекции <see cref="T:System.Collections.ICollection" /> превышает доступное место, начиная с индекса <paramref name="arrayIndex" /> до конца массива назначения <paramref name="array" />.-или-Тип исходного объекта <see cref="T:System.Collections.ICollection" /> нельзя автоматически привести к типу параметра назначения <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
      <summary>Получает значение, показывающее, является ли доступ к интерфейсу <see cref="T:System.Collections.ICollection" /> синхронизированным (потокобезопасным).</summary>
      <returns>Значение true, если доступ к коллекции <see cref="T:System.Collections.ICollection" /> является потокобезопасным, в противном случае — false.  В используемой по умолчанию реализации <see cref="T:System.Collections.Generic.Stack`1" /> это свойство всегда возвращает значение false.</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
      <summary>Получает объект, который можно использовать для синхронизации доступа к <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Объект, который можно использовать для синхронизации доступа к коллекции <see cref="T:System.Collections.ICollection" />.  В используемой по умолчанию реализации <see cref="T:System.Collections.Generic.Stack`1" /> это свойство всегда возвращает текущий экземпляр.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий итерацию в коллекции.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> можно использовать для перебора элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.ToArray">
      <summary>Копирует элементы <see cref="T:System.Collections.Generic.Stack`1" /> в новый массив.</summary>
      <returns>Новый массив, содержащий копии элементов <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TrimExcess">
      <summary>Устанавливает емкость равной фактическому количеству элементов в <see cref="T:System.Collections.Generic.Stack`1" />, если это количество составляет менее 90 процентов текущей емкости.</summary>
    </member>
    <member name="T:System.Collections.Generic.Stack`1.Enumerator">
      <summary>Выполняет перечисление элементов <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.Current">
      <summary>Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns>Элемент в <see cref="T:System.Collections.Generic.Stack`1" /> находится в текущей позиции перечислителя.</returns>
      <exception cref="T:System.InvalidOperationException">Перечислитель помещается перед первым элементом коллекции или после последнего элемента. </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.Dispose">
      <summary>Освобождает все ресурсы, используемые объектом <see cref="T:System.Collections.Generic.Stack`1.Enumerator" />. </summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <returns>Значение true, если перечислитель был успешно перемещен к следующему элементу; значение false, если перечислитель достиг конца коллекции.</returns>
      <exception cref="T:System.InvalidOperationException">Коллекция была изменена после создания перечислителя. </exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns>Элемент коллекции, соответствующий текущей позиции перечислителя.</returns>
      <exception cref="T:System.InvalidOperationException">Перечислитель помещается перед первым элементом коллекции или после последнего элемента. </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Устанавливает перечислитель в его начальное положение, перед первым элементом коллекции. Этот класс не может быть унаследован.</summary>
      <exception cref="T:System.InvalidOperationException">Коллекция была изменена после создания перечислителя. </exception>
    </member>
    <member name="T:System.Collections.ObjectModel.ObservableCollection`1">
      <summary>Представляет коллекцию динамических данных, обеспечивающих выдачу уведомления при получении и удалении элементов или при обновлении всего списка.</summary>
      <typeparam name="T">Тип элементов в коллекции.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor">
      <summary>Инициализация нового пустого экземпляра класса <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> и добавляет в него элементы, скопированные из заданной коллекции.</summary>
      <param name="collection">Коллекция, из которой копируются элементы.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.List{`0})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> и добавляет в него элементы, скопированные из заданного списка.</summary>
      <param name="list">Список, из которого копируются элементы.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy">
      <summary>Запрещает реентерабельные попытки изменения этой коллекции.</summary>
      <returns>Объект <see cref="T:System.IDisposable" />, который может быть использован для уничтожения объекта.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.CheckReentrancy">
      <summary>Проведите проверку на реентерабельные попытки изменения этой коллекции.</summary>
      <exception cref="T:System.InvalidOperationException">Если был выполнен вызов метода <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy" />, возвращаемое значение <see cref="T:System.IDisposable" /> которого ещё не было уничтожено. Как правило, это означает проведение дополнительных попыток изменения этой коллекции во время события <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" />. Однако это зависит от того, когда производные классы осуществляют вызов метода <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.ClearItems">
      <summary>Удаляет все элементы из коллекции.</summary>
      <exception cref="T:System.InvalidOperationException">Метод вызывается в обработчике событий <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> или <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" />. </exception>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged">
      <summary>Происходит при изменении элемента коллекции или всей коллекции.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)">
      <summary>Вставляет элемент в коллекцию по указанному индексу.</summary>
      <param name="index">Индекс (с нуля), по которому следует вставить значение параметра <paramref name="item" />.</param>
      <param name="item">Вставляемый объект.</param>
      <exception cref="T:System.InvalidOperationException">Метод вызывается в обработчике событий <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> или <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.Move(System.Int32,System.Int32)">
      <summary>Перемещает элемент по указанному индексу на новое местоположение в коллекции.</summary>
      <param name="oldIndex">Начинающийся с нуля индекс, указывающий местоположение элемента, который требуется переместить.</param>
      <param name="newIndex">Начинающийся с нуля индекс, указывающий новое местоположение элемента.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.MoveItem(System.Int32,System.Int32)">
      <summary>Перемещает элемент по указанному индексу на новое местоположение в коллекции.</summary>
      <param name="oldIndex">Начинающийся с нуля индекс, указывающий местоположение элемента, который требуется переместить.</param>
      <param name="newIndex">Начинающийся с нуля индекс, указывающий новое местоположение элемента.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Вызывает событие <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> с предоставленными данными события.</summary>
      <param name="e">Данные события, которые должны быть переданы событию.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Вызывает событие <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> с предоставленными аргументами.</summary>
      <param name="e">Данные события, которые должны быть переданы событию.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged">
      <summary>Происходит при изменении свойства или отдельного элемента коллекции.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(System.Int32)">
      <summary>Удаляет из коллекции элемент с заданным индексом.</summary>
      <param name="index">Индекс (отсчет с нуля) удаляемого элемента.</param>
      <exception cref="T:System.InvalidOperationException">Метод вызывается в обработчике событий <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> или <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.SetItem(System.Int32,`0)">
      <summary>Заменяет элемент по указанному индексу.</summary>
      <param name="index">Отсчитываемый с нуля индекс заменяемого элемента.</param>
      <param name="item">Новое значение для элемента с указанным индексом.</param>
      <exception cref="T:System.InvalidOperationException">Метод вызывается в обработчике событий <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> или <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" />. </exception>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Происходит при изменениях значения свойства.</summary>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1">
      <summary>Представляет коллекцию <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />, доступную только для чтения.</summary>
      <typeparam name="T">Тип объектов, содержащихся в коллекции.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" />, который служит программой-оболочкой для заданной коллекции <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.</summary>
      <param name="list">Коллекция, которую необходимо поместить в программу-оболочку.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged">
      <summary>Возникает, когда элемент добавлен или удален.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Вызывает событие <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged" />. </summary>
      <param name="args">Данные, относящиеся к событию.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Вызывает событие <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged" />. </summary>
      <param name="args">Данные, относящиеся к событию.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged">
      <summary>Происходит при изменениях значения свойства.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>Описание этого члена см. в разделе, посвященном <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Описание этого члена см. в разделе, посвященном <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</summary>
    </member>
    <member name="T:System.Collections.Specialized.INotifyCollectionChanged">
      <summary>Уведомляет прослушиватели о динамических изменениях в коллекции, происходящих, например, при добавлении и удалении элементов или сбросе целого объекта коллекции.</summary>
    </member>
    <member name="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged">
      <summary>Происходит при изменении списка элементов коллекции или сбросе коллекции.</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedAction">
      <summary>Описывает действие, вызванное событием <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />. </summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add">
      <summary>Один или несколько элементов были добавлены к коллекции.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move">
      <summary>Один или несколько элементов были перемещены внутри коллекции.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove">
      <summary>Один или несколько элементов были удалены из коллекции.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace">
      <summary>Один или несколько элементов были заменены в коллекции.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset">
      <summary>Содержимое коллекции было существенно изменено.</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs">
      <summary>Предоставляет данные события для события <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> с указанием значения <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction" />.</summary>
      <param name="action">Значение действия как значение перечисления. Должно всегда иметь значение <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />; см. Примечания.</param>
      <exception cref="T:System.NotSupportedException">Значение параметра <paramref name="action" /> не равно <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" />, описывающий изменение для нескольких элементов.</summary>
      <param name="action">Действие, вызвавшее событие. Возможными значениями являются: <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> или <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
      <param name="changedItems">Элементы, на которые повлияло изменение.</param>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" />, описывающий изменение <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> для нескольких элементов.</summary>
      <param name="action">Действие, вызвавшее событие. Возможным значением может быть только <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
      <param name="newItems">Новые элементы, заменяющие исходные элементы.</param>
      <param name="oldItems">Исходные элементы, которые были заменены.</param>
      <exception cref="T:System.ArgumentException">Если параметр <paramref name="action" /> не имеет значения Replace.</exception>
      <exception cref="T:System.ArgumentNullException">Если параметр <paramref name="oldItems" /> или <paramref name="newItems" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" />, описывающий изменение <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> для нескольких элементов.</summary>
      <param name="action">Действие, вызвавшее событие. Возможным значением может быть только <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
      <param name="newItems">Новые элементы, заменяющие исходные элементы.</param>
      <param name="oldItems">Исходные элементы, которые были заменены.</param>
      <param name="startingIndex">Индекс первого элемента заменяемых элементов.</param>
      <exception cref="T:System.ArgumentException">Если параметр <paramref name="action" /> не имеет значения Replace.</exception>
      <exception cref="T:System.ArgumentNullException">Если параметр <paramref name="oldItems" /> или <paramref name="newItems" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" />, описывающий изменение для нескольких элементов или изменение <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />.</summary>
      <param name="action">Действие, вызвавшее событие. Возможными значениями являются: <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> или <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
      <param name="changedItems">Элементы, на которые повлияло изменение.</param>
      <param name="startingIndex">Индекс, указывающий, где произошло изменение.</param>
      <exception cref="T:System.ArgumentException">Если параметр <paramref name="action" /> не имеет значения Reset, Add или Remove, или если параметр <paramref name="action" /> имеет значение Reset и либо параметр <paramref name="changedItems" /> не равен null, либо параметр <paramref name="startingIndex" /> не равен -1, или если действием является Add или Remove и параметр <paramref name="startingIndex" /> меньше -1.</exception>
      <exception cref="T:System.ArgumentNullException">Если <paramref name="action" /> имеет значение Add или Remove и параметр <paramref name="changedItems" /> равен nul.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" />, описывающий изменение <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> для нескольких элементов.</summary>
      <param name="action">Действие, вызвавшее событие. Возможным значением может быть только <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />.</param>
      <param name="changedItems">Элементы, на которые повлияло изменение.</param>
      <param name="index">Новый индекс для измененных элементов.</param>
      <param name="oldIndex">Старый индекс для измененных элементов.</param>
      <exception cref="T:System.ArgumentException">Если параметр <paramref name="action" /> не имеет значения Move или если параметр <paramref name="index" /> меньше 0.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" />, описывающий изменение для одного элемента.</summary>
      <param name="action">Действие, вызвавшее событие. Возможными значениями являются: <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> или <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
      <param name="changedItem">Элемент, на которое повлияло изменение.</param>
      <exception cref="T:System.ArgumentException">Если параметр <paramref name="action" /> не имеет значения Reset, Add или Remove или если параметр <paramref name="action" /> имеет значение Reset и параметр <paramref name="changedItem" /> не равен null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" />, который описывает изменение <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> или <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</summary>
      <param name="action">Значение действия как значение перечисления. Должно иметь значение <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> или <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />; см. Примечания.</param>
      <param name="changedItem">Элемент, на которое повлияло изменение.</param>
      <param name="index">Индекс, указывающий, где произошло изменение.</param>
      <exception cref="T:System.NotSupportedException">Параметр <paramref name="action" /> не равен ни <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" />, ни <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" />, описывающий изменение <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> для одного элемента.</summary>
      <param name="action">Действие, вызвавшее событие. Возможным значением может быть только <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />.</param>
      <param name="changedItem">Элемент, на который повлияло изменение.</param>
      <param name="index">Новый индекс для измененного элемента.</param>
      <param name="oldIndex">Старый индекс для измененного элемента.</param>
      <exception cref="T:System.ArgumentException">Если параметр <paramref name="action" /> не имеет значения Move или если параметр <paramref name="index" /> меньше 0.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" />, описывающий изменение <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> для одного элемента.</summary>
      <param name="action">Действие, вызвавшее событие. Возможным значением может быть только <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
      <param name="newItem">Новый элемент, заменяющий исходный элемент.</param>
      <param name="oldItem">Исходный элемент, который был заменен.</param>
      <exception cref="T:System.ArgumentException">Если параметр <paramref name="action" /> не имеет значения Replace.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" />, описывающий изменение <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</summary>
      <param name="action">Значение действия как значение перечисления. Должно иметь значение <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />; см. Примечания.</param>
      <param name="newItem">Новый элемент, заменяющий исходный элемент.</param>
      <param name="oldItem">Исходный элемент, который был заменен.</param>
      <param name="index">Индекс заменяемого элемента.</param>
      <exception cref="T:System.NotSupportedException">Значение параметра <paramref name="action" /> не равно <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</exception>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action">
      <summary>Получает описание действия, вызвавшего событие. </summary>
      <returns>Описание действия, вызвавшего событие, в виде значения перечисления.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems">
      <summary>Получает элементы, затронутые действием.</summary>
      <returns>Список элементов, затронутых действием. Значением по умолчанию является null.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex">
      <summary>Получает индекс, при котором произошло изменение.</summary>
      <returns>Индекс, при котором произошло изменение.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems">
      <summary>Получает элемент, затронутый действием <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> или <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</summary>
      <returns>Список элементов, на которые повлияло действие <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> или <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex">
      <summary>Получает индекс, на котором произошло изменение действия <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> или <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</summary>
      <returns>Индекс, на котором произошло изменение действия <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> или <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</returns>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventHandler">
      <summary>Представляет метод, обрабатывающий события, которые реализуют событие <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
      <param name="sender">Объект, порождающий событие.</param>
      <param name="e">Данные, относящиеся к событию.</param>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventArgs">
      <summary>Предоставляет данные для события MethodNameCompleted. </summary>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />.</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />.</summary>
      <param name="error">Любая ошибка, возникающая в ходе асинхронной операции.</param>
      <param name="cancelled">Значение, показывающее, была ли отменена асинхронная операция.</param>
      <param name="userState">Дополнительный предоставляемый пользователем объект состояния, используемый для идентификации задачи, которая вызвала событие Completed.</param>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
      <summary>Получает значение, показывающее, была ли отменена асинхронная операция.</summary>
      <returns>true, если асинхронная операция отменена; в противном случае — значение false.Значение по умолчанию — false.</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
      <summary>Получает значение, показывающее, какая ошибка произошла в ходе асинхронной операции.</summary>
      <returns>Экземпляр исключения <see cref="T:System.Exception" />, если в ходе асинхронной операции произошла ошибка; в противном случае — значение null.</returns>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
      <summary>Вызывает предоставленное пользователем исключение в случае неудачного выполнения асинхронной операции.</summary>
      <exception cref="T:System.InvalidOperationException">Значение свойства <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> — true.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">Свойство <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> было установлено асинхронной операцией.</exception>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
      <summary>Возвращает уникальный идентификатор для асинхронной задачи.</summary>
      <returns>Ссылка на объект, уникальным образом идентифицирующая асинхронную задачу; в противном случае — значение null, если значение не было задано.</returns>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventHandler">
      <summary>Представляет метод, который будет обрабатывать событие MethodNameCompleted асинхронной операции. </summary>
      <param name="sender">Источник события.</param>
      <param name="e">Объект <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="T:System.ComponentModel.AsyncOperation">
      <summary>Отслеживает время выполнения асинхронной операции. </summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.OperationCompleted">
      <summary>Завершает выполнение асинхронной операции.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> ранее уже вызывался для этой задачи.</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Вызывает делегат для потока или контекста, соответствующего модели приложения.</summary>
      <param name="d">Объект <see cref="T:System.Threading.SendOrPostCallback" />, инкапсулирующий делегат, вызываемый при завершении операции.</param>
      <param name="arg">Аргумент для делегата, содержащегося в параметре <paramref name="d" />.</param>
      <exception cref="T:System.InvalidOperationException">Метод <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> уже был вызван ранее для этой задачи.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> имеет значение null.</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Завершает выполнение асинхронной операции.</summary>
      <param name="d">Объект <see cref="T:System.Threading.SendOrPostCallback" />, инкапсулирующий делегат, вызываемый при завершении операции.</param>
      <param name="arg">Аргумент для делегата, содержащегося в параметре <paramref name="d" />.</param>
      <exception cref="T:System.InvalidOperationException">Метод <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> уже был вызван ранее для этой задачи.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> имеет значение null.</exception>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.SynchronizationContext">
      <summary>Получает объект <see cref="T:System.Threading.SynchronizationContext" />, переданный конструктору при создании объекта диспетчером <see cref="T:System.ComponentModel.AsyncOperationManager" />.</summary>
      <returns>Объект <see cref="T:System.Threading.SynchronizationContext" />, передаваемый в конструктор.</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
      <summary>Получает объект, используемый для уникальной идентификации асинхронной операции.</summary>
      <returns>Объект состояния, переданный вызову асинхронного метода.</returns>
    </member>
    <member name="T:System.ComponentModel.AsyncOperationManager">
      <summary>Обеспечивает управление параллельным выполнением для классов, поддерживающих асинхронные вызовы метода.Данный класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
      <summary>Возвращает объект <see cref="T:System.ComponentModel.AsyncOperation" /> для контроля длительности конкретной асинхронной операции.</summary>
      <returns>Объект <see cref="T:System.ComponentModel.AsyncOperation" />, который можно использовать для контроля длительности вызова асинхронного метода.</returns>
      <param name="userSuppliedState">Объект, используемый для связи элемента состояния клиента, например идентификатора задачи, с конкретной асинхронной операцией.</param>
    </member>
    <member name="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
      <summary>Получает или задает контекст <see cref="T:System.Threading.SynchronizationContext" /> для асинхронной операции.</summary>
      <returns>Контекст <see cref="T:System.Threading.SynchronizationContext" /> для асинхронной операции.</returns>
    </member>
    <member name="T:System.ComponentModel.BackgroundWorker">
      <summary>Запускает операцию в отдельном потоке.</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.BackgroundWorker" />.</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.CancelAsync">
      <summary>Запрашивает отмену отложенной фоновой операции.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /> имеет значение false. </exception>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.CancellationPending">
      <summary>Получает значение, показывающее, запросило ли приложение отмену фоновой операции.</summary>
      <returns>true, если приложение запросило отмену фоновой операции; в противном случае — значение false.Значение по умолчанию — false.</returns>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.DoWork">
      <summary>Возникает при вызове метода <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" />.</summary>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.IsBusy">
      <summary>Получает значение, показывающее, выполняет ли объект <see cref="T:System.ComponentModel.BackgroundWorker" /> фоновую операцию.</summary>
      <returns>true, если объект <see cref="T:System.ComponentModel.BackgroundWorker" /> выполняет фоновую операцию; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
      <summary>Порождает событие <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />.</summary>
      <param name="e">Объект <see cref="T:System.ComponentModel.DoWorkEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
      <summary>Порождает событие <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</summary>
      <param name="e">Объект <see cref="T:System.ComponentModel.ProgressChangedEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
      <summary>Порождает событие <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />.</summary>
      <param name="e">Объект <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
      <summary>Возникает при вызове метода <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" />.</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
      <summary>Порождает событие <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</summary>
      <param name="percentProgress">Ход выполнения фоновой операции в процентах от 0 до 100.</param>
      <exception cref="T:System.InvalidOperationException">Значение свойства <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> равно false. </exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
      <summary>Порождает событие <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</summary>
      <param name="percentProgress">Ход выполнения фоновой операции в процентах от 0 до 100.</param>
      <param name="userState">Объект состояния, переданный методу <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />.</param>
      <exception cref="T:System.InvalidOperationException">Значение свойства <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> равно false. </exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
      <summary>Начинает запуск фоновой операции.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> имеет значение true.</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
      <summary>Начинает запуск фоновой операции и содержит параметр для использования фоновой операцией.</summary>
      <param name="argument">Параметр для использования фоновой операцией в обработчике событий <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> имеет значение true.</exception>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
      <summary>Возникает, когда выполнение фоновой операции завершено, отменено или вызвало исключение.</summary>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
      <summary>Получает или задает значение, показывающее, может ли объект <see cref="T:System.ComponentModel.BackgroundWorker" /> сообщать об обновлении сведений о ходе выполнения.</summary>
      <returns>true, если объект <see cref="T:System.ComponentModel.BackgroundWorker" /> поддерживает обновление сведений о ходе выполнения; в противном случае — значение false.Значение по умолчанию — false.</returns>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
      <summary>Получает или задает значение, показывающее, поддерживает ли объект <see cref="T:System.ComponentModel.BackgroundWorker" /> асинхронную отмену.</summary>
      <returns>true, если объект <see cref="T:System.ComponentModel.BackgroundWorker" /> поддерживает отмену; в противном случае — значение false.Значение по умолчанию — false.</returns>
    </member>
    <member name="T:System.ComponentModel.BrowsableAttribute">
      <summary>Указывает, следует ли отображать свойство или событие в окне "Свойства".</summary>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.BrowsableAttribute" />.</summary>
      <param name="browsable">true, если свойство или события можно менять в режиме конструктора; в противном случае — значение false.Значение по умолчанию — true.</param>
    </member>
    <member name="P:System.ComponentModel.BrowsableAttribute.Browsable">
      <summary>Возвращает значение, показывающее, будет ли объект отображаться в окне свойств.</summary>
      <returns>true, если объект обнаружен ; в обратном случае false.</returns>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.Default">
      <summary>Задает значение по умолчанию для атрибута <see cref="T:System.ComponentModel.BrowsableAttribute" />, равное <see cref="F:System.ComponentModel.BrowsableAttribute.Yes" />.Это статическое (static) поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.Equals(System.Object)">
      <summary>Показывает, равны ли этот экземпляр и заданный объект.</summary>
      <returns>true, если объект <paramref name="obj" /> равен данному экземпляру; в противном случае — значение false.</returns>
      <param name="obj">Другой объект, подлежащий сравнению. </param>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.GetHashCode">
      <summary>Возвращает хеш-код данного экземпляра.</summary>
      <returns>Хеш-код 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.No">
      <summary>Указывает, что свойство или событие нельзя изменять во время разработки.Это статическое (static) поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.Yes">
      <summary>Указывает, что свойство или событие можно изменять во время разработки.Это статическое (static) поле доступно только для чтения.</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventArgs">
      <summary>Предоставляет данные для отменяемого события.</summary>
    </member>
    <member name="M:System.ComponentModel.CancelEventArgs.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.CancelEventArgs" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CancelEventArgs.#ctor(System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.CancelEventArgs" />, устанавливая свойство <see cref="P:System.ComponentModel.CancelEventArgs.Cancel" /> в заданное значение.</summary>
      <param name="cancel">true, если операция отменяется; в противном случае — значение false.</param>
    </member>
    <member name="P:System.ComponentModel.CancelEventArgs.Cancel">
      <summary>Получает или задает значение, указывающее, следует ли отменить операцию.</summary>
      <returns>true, если требуется отменить операцию; в противном случае — значение false.</returns>
    </member>
    <member name="T:System.ComponentModel.CategoryAttribute">
      <summary>Задает имя категории, к которой нужно отнести свойство или событие при отображении в элементе управления сетки свойства, установленном в режим "По категориям".</summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.CategoryAttribute" /> с использованием имени категории "По умолчанию".</summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor(System.String)">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.ComponentModel.CategoryAttribute" />, используя заданное имя категории.</summary>
      <param name="category">Имя категории. </param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Action">
      <summary>Возвращает атрибут <see cref="T:System.ComponentModel.CategoryAttribute" />, представляющий категорию "Действие".</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> для категории "Действие".</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Appearance">
      <summary>Возвращает атрибут <see cref="T:System.ComponentModel.CategoryAttribute" />, представляющий категорию "Внешний вид".</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> для категории "Внешний вид".</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Asynchronous">
      <summary>Возвращает атрибут <see cref="T:System.ComponentModel.CategoryAttribute" />, представляющий категорию "Асинхронная".</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> для категории "Асинхронная".</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Behavior">
      <summary>Возвращает атрибут <see cref="T:System.ComponentModel.CategoryAttribute" />, представляющий категорию "Поведение".</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> для категории "Поведение".</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Category">
      <summary>Возвращает имя категории для свойства или события, к которым применяется этот атрибут.</summary>
      <returns>Имя категории для свойства или события, к которым применяется этот атрибут.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Data">
      <summary>Возвращает атрибут <see cref="T:System.ComponentModel.CategoryAttribute" />, представляющий категорию "Данные".</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> для категории "Данные".</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Default">
      <summary>Возвращает атрибут <see cref="T:System.ComponentModel.CategoryAttribute" />, представляющий категорию "По умолчанию".</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> для категории "По умолчанию".</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Design">
      <summary>Возвращает атрибут <see cref="T:System.ComponentModel.CategoryAttribute" />, представляющий категорию "Конструктор".</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> для категории "Конструктор".</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.DragDrop">
      <summary>Возвращает атрибут <see cref="T:System.ComponentModel.CategoryAttribute" />, представляющий категорию "Перетаскивание".</summary>
      <returns>A <see cref="T:System.ComponentModel.CategoryAttribute" /> для категории "Перетаскивание".</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, является ли значение заданного объекта равным текущему объекту <see cref="T:System.ComponentModel.CategoryAttribute" />.</summary>
      <returns>true, если значение заданного объекта равно текущему объекту <see cref="T:System.ComponentModel.CategoryAttribute" />; в противном случае — значение false.</returns>
      <param name="obj">Объект, проверяемый на равенство. </param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Focus">
      <summary>Возвращает атрибут <see cref="T:System.ComponentModel.CategoryAttribute" />, представляющий категорию "Фокус".</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> для категории "Фокус".</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Format">
      <summary>Возвращает атрибут <see cref="T:System.ComponentModel.CategoryAttribute" />, представляющий категорию "Формат".</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> для категории "Формат".</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetHashCode">
      <summary>Возвращает хэш-код для данного атрибута.</summary>
      <returns>Хеш-код 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetLocalizedString(System.String)">
      <summary>Выполняет поиск локализованной версии имени заданной категории.</summary>
      <returns>Локализованное имя категории или значение null, если локализованное имя не существует.</returns>
      <param name="value">Искомый идентификатор категории. </param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Key">
      <summary>Возвращает атрибут <see cref="T:System.ComponentModel.CategoryAttribute" />, представляющий категорию "Клавиша".</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> для категории "Клавиша".</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Layout">
      <summary>Возвращает атрибут <see cref="T:System.ComponentModel.CategoryAttribute" />, представляющий категорию "Структура".</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> для категории "Структура".</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Mouse">
      <summary>Возвращает атрибут <see cref="T:System.ComponentModel.CategoryAttribute" />, представляющий категорию "Мышь".</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> для категории "Мышь".</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.WindowStyle">
      <summary>Возвращает атрибут <see cref="T:System.ComponentModel.CategoryAttribute" />, представляющий категорию "Стиль окна".</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> для категории "Стиль окна".</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentCollection">
      <summary>Получает заданный компонент контейнера.</summary>
    </member>
    <member name="T:System.ComponentModel.DataErrorsChangedEventArgs">
      <summary>Предоставляет данные для события <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DataErrorsChangedEventArgs.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DataErrorsChangedEventArgs" />. </summary>
      <param name="propertyName">Получает имя свойства, для которого изменились ошибки, или значение null или <see cref="F:System.String.Empty" /> для ошибок уровня объекта.</param>
    </member>
    <member name="P:System.ComponentModel.DataErrorsChangedEventArgs.PropertyName">
      <summary>Получает имя свойства, для которого изменились ошибки, или значение null или <see cref="F:System.String.Empty" /> для ошибок уровня объекта.</summary>
      <returns>Имя соответствующего свойства или значение null или <see cref="F:System.String.Empty" /> для ошибок уровня сущности.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultValueAttribute">
      <summary>Задает для свойства значение по умолчанию.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DefaultValueAttribute" /> с использованием значения <see cref="T:System.Boolean" />.</summary>
      <param name="value">объект <see cref="T:System.Boolean" />, являющийся значением по умолчанию. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Byte)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DefaultValueAttribute" />, используя указанное 8-разрядное целое число без знака.</summary>
      <param name="value">8-разрядное целое число без знака, являющееся значением по умолчанию. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Char)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DefaultValueAttribute" />, используя указанный знак Юникода.</summary>
      <param name="value">Знак Юникода, являющийся значением по умолчанию. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Double)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DefaultValueAttribute" />, используя указанное число с плавающей запятой с удвоенной точностью.</summary>
      <param name="value">Число с плавающей запятой с удвоенной точностью, являющееся значением по умолчанию. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int16)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DefaultValueAttribute" />, используя указанное 16-разрядное целое число со знаком.</summary>
      <param name="value">16-разрядное целое число со знаком, являющееся значением по умолчанию. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DefaultValueAttribute" />, используя указанное 32-разрядное целое число со знаком.</summary>
      <param name="value">32-разрядное целое число со знаком, являющееся значением по умолчанию. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int64)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DefaultValueAttribute" />, используя указанное 64-разрядное целое число со знаком.</summary>
      <param name="value">64-разрядное целое число со знаком, являющееся значением по умолчанию. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DefaultValueAttribute" />.</summary>
      <param name="value">Объект <see cref="T:System.Object" />, представляющий значение по умолчанию. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Single)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DefaultValueAttribute" />, используя указанное число с плавающей запятой с обычной точностью.</summary>
      <param name="value">Число с плавающей запятой с обычной точностью, являющееся значением по умолчанию. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DefaultValueAttribute" /> с использованием <see cref="T:System.String" />.</summary>
      <param name="value">объект <see cref="T:System.String" />, являющийся значением по умолчанию. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Type,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DefaultValueAttribute" />, преобразуя при этом указанное значение к указанному типу. В качестве контекста перевода используется нейтральные настройки языка и региональных параметров.</summary>
      <param name="type">Объект <see cref="T:System.Type" />, задающий тип, к которому нужно преобразовать значение. </param>
      <param name="value">Строка <see cref="T:System.String" />, которая может быть преобразована к указанному типу с помощью преобразователя <see cref="T:System.ComponentModel.TypeConverter" /> для этого типа. Для преобразования используются язык и региональные параметры "английский (США)".языка и региональных параметров "Английский (США)".</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, является ли значение заданного объекта равным текущему объекту <see cref="T:System.ComponentModel.DefaultValueAttribute" />.</summary>
      <returns>trueЗначение true, если значение заданного объекта равно значению текущего; в противном случае — значение false.</returns>
      <param name="obj">Объект, проверяемый на равенство. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.GetHashCode"></member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.SetValue(System.Object)">
      <summary>Задает значение по умолчанию для свойства, с которым связан этот атрибут.</summary>
      <param name="value">Значение по умолчанию.</param>
    </member>
    <member name="P:System.ComponentModel.DefaultValueAttribute.Value">
      <summary>Возвращает значение по умолчанию для свойства, с которым связан этот атрибут.</summary>
      <returns>Объект <see cref="T:System.Object" />, представляющий значение по умолчанию для свойства, с которым связан этот атрибут.</returns>
    </member>
    <member name="T:System.ComponentModel.DescriptionAttribute">
      <summary>Задает описание свойства или события.</summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DescriptionAttribute" /> без параметров.</summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DescriptionAttribute" /> с указанным описанием.</summary>
      <param name="description">Текст описания. </param>
    </member>
    <member name="F:System.ComponentModel.DescriptionAttribute.Default">
      <summary>Определяет значение по умолчанию для атрибута <see cref="T:System.ComponentModel.DescriptionAttribute" />, являющееся пустой строкой ("").Это статическое (static) поле доступно только для чтения.</summary>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.Description">
      <summary>Возвращает описание, хранящееся в данном атрибуте.</summary>
      <returns>Описание, хранящееся в данном атрибуте.</returns>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.DescriptionValue">
      <summary>Получает или задает строку, хранящуюся в качестве описания.</summary>
      <returns>Строка, хранящаяся как описание.Значение по умолчанию — пустая строка ("").</returns>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, является ли значение заданного объекта равным текущему объекту <see cref="T:System.ComponentModel.DescriptionAttribute" />.</summary>
      <returns>true, если значение заданного объекта равно текущему объекту <see cref="T:System.ComponentModel.DescriptionAttribute" />; в противном случае — значение false.</returns>
      <param name="obj">Объект, проверяемый на равенство. </param>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.GetHashCode"></member>
    <member name="T:System.ComponentModel.DoWorkEventArgs">
      <summary>Предоставляет данные для события <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DoWorkEventArgs.#ctor(System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DoWorkEventArgs" />.</summary>
      <param name="argument">Определяет аргумент для асинхронной операции.</param>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Argument">
      <summary>Возвращает значение, представляющее аргумент асинхронной операции. </summary>
      <returns>Объект <see cref="T:System.Object" />, представляющий аргумент асинхронной операции.</returns>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Cancel">
      <summary>Получает или задает значение, указывающее, была ли отменена асинхронная операция.</summary>
      <returns>true, если операция отменена; в противном случае — значение false.Значение по умолчанию — false.</returns>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Result">
      <summary>Получает или задает значение, представляющее результат асинхронной операции. </summary>
      <returns>Объект <see cref="T:System.Object" />, представляющий результат асинхронной операции.</returns>
    </member>
    <member name="T:System.ComponentModel.DoWorkEventHandler">
      <summary>Представляет метод, который выполнит обработку события <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />, порождаемого при вызове метода <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" />.</summary>
      <param name="sender">Источник события. </param>
      <param name="e">Объект <see cref="T:System.ComponentModel.DoWorkEventArgs" />, содержащий данные события. </param>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableAttribute">
      <summary>Определяет, что свойство или метод отображаются в редакторе.Данный класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.EditorBrowsableAttribute" />, используя состояние <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" />, равное состоянию по умолчанию.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor(System.ComponentModel.EditorBrowsableState)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> с помощью объекта <see cref="T:System.ComponentModel.EditorBrowsableState" />.</summary>
      <param name="state">Значение <see cref="T:System.ComponentModel.EditorBrowsableState" />, которое требуется установить для <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" />. </param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, является ли значение заданного объекта равным текущему объекту <see cref="T:System.ComponentModel.EditorBrowsableAttribute" />.</summary>
      <returns>true, если значение заданного объекта равно значению текущего; в противном случае — значение false.</returns>
      <param name="obj">Объект, проверяемый на равенство. </param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.GetHashCode"></member>
    <member name="P:System.ComponentModel.EditorBrowsableAttribute.State">
      <summary>Возвращает отображаемое состояние свойства или метода.</summary>
      <returns>
        <see cref="T:System.ComponentModel.EditorBrowsableState" />, являющееся отображаемым состоянием свойства или метода.</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableState">
      <summary>Определяет в редакторе отображаемое состояние для свойства или метода. </summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Advanced">
      <summary>Свойство или метод является элементом, который должен быть видимым только для опытных пользователей.Редактор может показать или скрыть такие свойства.</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Always">
      <summary>Это свойство или метод всегда отображается в редакторе.</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Never">
      <summary>Это свойство или метод никогда не отображается в редакторе.</summary>
    </member>
    <member name="T:System.ComponentModel.IChangeTracking">
      <summary>Определяет механизм для запроса изменений объекта и сброса измененного состояния. </summary>
    </member>
    <member name="M:System.ComponentModel.IChangeTracking.AcceptChanges">
      <summary>Сбрасывает состояние объекта в неизмененное, принимая изменения. </summary>
    </member>
    <member name="P:System.ComponentModel.IChangeTracking.IsChanged">
      <summary>Возвращает измененное состояние объекта.</summary>
      <returns>true, если содержание объекта было изменено с момента последнего вызова метода <see cref="M:System.ComponentModel.IChangeTracking.AcceptChanges" />; в противном случае — значение false. </returns>
    </member>
    <member name="T:System.ComponentModel.IComponent">
      <summary>При реализации в классе получает или задает объект <see cref="T:System.ComponentModel.ISite" />, связанный с компонентом.</summary>
    </member>
    <member name="E:System.ComponentModel.IComponent.Disposed">
      <summary>Добавляет обработчик событий, чтобы прослушивать событие Disposed для компонента.</summary>
    </member>
    <member name="P:System.ComponentModel.IComponent.Site">
      <summary>При реализации в классе получает или задает объект <see cref="T:System.ComponentModel.ISite" />, связанный с компонентом.</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISite" />, связанный с данным компонентом.</returns>
    </member>
    <member name="T:System.ComponentModel.IContainer">
      <summary>Предоставляет функциональные возможности для контейнеров.Контейнеры являются объектами, логически включающими ноль и более компонентов.</summary>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent)">
      <summary>Добавляет компонент в контейнер.</summary>
      <param name="component">Добавляемый компонент.</param>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent,System.String)">
      <summary>Добавляет компонент в контейнер.</summary>
      <param name="component">Добавляемый компонент.</param>
      <param name="name">Идентифицирующее имя компонента.</param>
    </member>
    <member name="P:System.ComponentModel.IContainer.Components">
      <summary>Получает все компоненты в контейнере <see cref="T:System.ComponentModel.IContainer" />.</summary>
      <returns>Коллекция компонентов в контейнере <see cref="T:System.ComponentModel.IContainer" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IContainer.Remove(System.ComponentModel.IComponent)">
      <summary>Удаляет компонент из контейнера.</summary>
      <param name="component">Удаляемый компонент.</param>
    </member>
    <member name="T:System.ComponentModel.IEditableObject">
      <summary>Представляет объект, имеющий режим правки и возможность фиксировать и отменять изменения. </summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.BeginEdit">
      <summary>Переводит объект в режим редактирования.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.CancelEdit">
      <summary>Выводит объект из режима редактирования и возвращает предыдущее, неизмененное значение.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.EndEdit">
      <summary>Выводит объект из режима редактирования и фиксирует отредактированное значение.</summary>
    </member>
    <member name="T:System.ComponentModel.INotifyDataErrorInfo">
      <summary>Определяет члены, которые классы сущностей данных могут реализовывать для поддержки пользовательской синхронной и асинхронной проверки.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged">
      <summary>Происходит, когда ошибки проверки изменились для свойства или для сущности целиком. </summary>
    </member>
    <member name="M:System.ComponentModel.INotifyDataErrorInfo.GetErrors(System.String)">
      <summary>Получает ошибки проверки для указанного свойства или для сущности целиком.</summary>
      <returns>Ошибки проверки для свойства или сущности.</returns>
      <param name="propertyName">Имя свойства, для которого требуется получить ошибки проверки; или значение null или <see cref="F:System.String.Empty" />, чтобы получить ошибки для объекта целиком.</param>
    </member>
    <member name="P:System.ComponentModel.INotifyDataErrorInfo.HasErrors">
      <summary>Получает значение, указывающее, содержит ли сущность ошибки проверки. </summary>
      <returns>true, если объект в данный момент содержит ошибки проверки; в противном случае — значение false.</returns>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanged">
      <summary>Уведомляет клиентов об изменении значения свойства.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
      <summary>Происходит при изменениях значения свойства.</summary>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanging">
      <summary>Событие, которое уведомляет клиентов об изменении значения свойства.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging">
      <summary>Возникает при изменении значения свойства.</summary>
    </member>
    <member name="T:System.ComponentModel.IRevertibleChangeTracking">
      <summary>Обеспечивает поддержку отката изменений.</summary>
    </member>
    <member name="M:System.ComponentModel.IRevertibleChangeTracking.RejectChanges">
      <summary>Восстанавливает неизмененное состояние объекта, отменяя изменения. </summary>
    </member>
    <member name="T:System.ComponentModel.ISite">
      <summary>Предоставляет функциональные возможности, необходимые для узлов..Сайты связывают компонент с контейнером и обеспечивают их взаимодействие, а также предоставляют способ управления компонентами в контейнере.</summary>
    </member>
    <member name="P:System.ComponentModel.ISite.Component">
      <summary>При реализации в классе получает компонент, связанный с объектом <see cref="T:System.ComponentModel.ISite" />.</summary>
      <returns>Компонент, связанный с данным объектом <see cref="T:System.ComponentModel.ISite" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Container">
      <summary>При реализации в классе получает контейнер, связанный с объектом <see cref="T:System.ComponentModel.ISite" />.</summary>
      <returns>Контейнер, связанный с объектом <see cref="T:System.ComponentModel.ISite" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.DesignMode">
      <summary>При реализации в классе определяет, находится ли компонент в режиме конструктора.</summary>
      <returns>true, если компонент находится в режиме конструктора; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Name">
      <summary>При реализации в классе получает или задает имя компонента, связанного с объектом <see cref="T:System.ComponentModel.ISite" />.</summary>
      <returns>Имя компонента.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary>Предоставляет сведения о контексте преобразователю типов или редактору значений, чтобы преобразователь типов или редактор мог выполнить преобразование.</summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary>Получает контейнер с набором объектов для данного средства форматирования.</summary>
      <returns>Контейнер с набором объектов для данного средства форматирования.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary>Получает экземпляр, вызывающий метод для объекта средства форматирования.</summary>
      <returns>Экземпляр, вызывающий метод для объекта средства форматирования.</returns>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary>Порождает событие <see cref="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary>Получает значение, указывающее, можно ли изменить данный объект.</summary>
      <returns>true, если объект может быть изменен; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary>Получает объект <see cref="T:System.ComponentModel.PropertyDescriptor" />, предоставляющий заданный элемент контекста.</summary>
      <returns>Объект <see cref="T:System.ComponentModel.PropertyDescriptor" />, предоставляющий заданный элемент контекста.</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary>Задает направление для операции сортировки.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary>Выполняет сортировку в порядке возрастания.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary>Выполняет сортировку в порядке убывания.</summary>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventArgs">
      <summary>Предоставляет данные для события <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ProgressChangedEventArgs.#ctor(System.Int32,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ProgressChangedEventArgs" />.</summary>
      <param name="progressPercentage">Процент завершенных асинхронных операций.</param>
      <param name="userState">Уникальное пользовательское состояние.</param>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage">
      <summary>Получает процент завершенных асинхронных операций.</summary>
      <returns>Процентное значение, обозначающее ход выполнения асинхронной операции.</returns>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.UserState">
      <summary>Возвращает уникальное пользовательское состояние.</summary>
      <returns>Уникальный объект <see cref="T:System.Object" />, показывающий пользовательское состояние.</returns>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventHandler">
      <summary>Представляет метод, который выполнит обработку события <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />, которое порождается при составлении отчета о ходе выполнения объектом <see cref="T:System.ComponentModel.BackgroundWorker" />.</summary>
      <param name="sender">Источник события. </param>
      <param name="e">Объект <see cref="T:System.ComponentModel.ProgressChangedEventArgs" />, содержащий данные события. </param>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventArgs">
      <summary>Предоставляет данные для события <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventArgs.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />.</summary>
      <param name="propertyName">Имя измененного свойства. </param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName">
      <summary>Получает имя измененного свойства.</summary>
      <returns>Получает имя свойства, для которого изменились ошибки, или значение <see cref="F:System.String.Empty" /> или null для ошибок уровня объекта.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventHandler">
      <summary>Представляет метод, обрабатывающий событие <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</summary>
      <param name="sender">Источник события. </param>
      <param name="e">Объект <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />, содержащий данные события. </param>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventArgs">
      <summary>Предоставляет данные для события <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangingEventArgs.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.PropertyChangingEventArgs" />.</summary>
      <param name="propertyName">Имя изменяемого свойства.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangingEventArgs.PropertyName">
      <summary>Получает имя изменяемого свойства.</summary>
      <returns>Имя изменяемого свойства.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventHandler">
      <summary>Представляет метод обработки события <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" />.</summary>
      <param name="sender">Источник события.</param>
      <param name="e">Данные, относящиеся к событию.</param>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary>Предоставляет описание свойства.</summary>
    </member>
    <member name="T:System.ComponentModel.ReadOnlyAttribute">
      <summary>Указывает, доступно ли свойство, к которому применяется данный атрибут, только для чтения или для чтения и записи.</summary>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ReadOnlyAttribute" />.</summary>
      <param name="isReadOnly">true, чтобы показать, что свойство, с которым связан этот атрибут, доступно только для чтения, или значение false, показывающее, что это свойство доступно для чтения и записи.</param>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равны ли этот экземпляр и заданный объект.</summary>
      <returns>true, если объект <paramref name="obj" /> равен данному экземпляру; в противном случае — значение false. </returns>
      <param name="obj">Объект для сравнения. </param>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра. </summary>
      <returns>Хэш-код для текущего атрибута <see cref="T:System.ComponentModel.ReadOnlyAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ReadOnlyAttribute.IsReadOnly">
      <summary>Получает значение, показывающее, доступно ли свойство, к которому применяется этот атрибут, только для чтения. </summary>
      <returns>true, если свойство, к которому применяется этот атрибут, доступно только для чтения, или значение false, если это свойство доступно и для чтения, и для записи. </returns>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventArgs">
      <summary>Предоставляет данные для события <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />.</summary>
    </member>
    <member name="M:System.ComponentModel.RunWorkerCompletedEventArgs.#ctor(System.Object,System.Exception,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" />.</summary>
      <param name="result">Результат асинхронной операции.</param>
      <param name="error">Любая ошибка, возникающая в ходе асинхронной операции.</param>
      <param name="cancelled">Значение, показывающее, была ли отменена асинхронная операция.</param>
    </member>
    <member name="P:System.ComponentModel.RunWorkerCompletedEventArgs.Result">
      <summary>Возвращает значение, представляющее результат асинхронной операции.</summary>
      <returns>Объект <see cref="T:System.Object" />, представляющий результат асинхронной операции.</returns>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventHandler">
      <summary>Представляет метод, который обработает событие <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />, порождаемое после того, как операция, которая выполняется объектом <see cref="T:System.ComponentModel.BackgroundWorker" />, завершается, отменяется или создает исключение.</summary>
      <param name="sender">Источник события. </param>
      <param name="e">Объект <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" />, содержащий данные события. </param>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary>Предоставляет унифицированный способ преобразования типов значений в другие типы.<see cref="T:System.ComponentModel.TypeConverter" />обычно поддерживает преобразование строк в объекты для редакторов свойств в средах разработки или для использования в XAML.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.TypeConverter" />. </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, указывающее, может ли этот преобразователь типов преобразовать объект заданного типа к типу этого преобразователя.</summary>
      <returns>true, если данный преобразователь может выполнить преобразование; в противном случае — значение false.</returns>
      <param name="context">Объект, предоставляющий контекст формата.</param>
      <param name="sourceType">Тип, из которого нужно выполнить преобразование.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary>Возвращает значение, указывающее, может ли этот преобразователь типов преобразовать объект заданного типа к типу этого преобразователя.</summary>
      <returns>true, если данный преобразователь может выполнить преобразование; в противном случае — значение false.</returns>
      <param name="sourceType">Тип, из которого нужно выполнить преобразование.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, указывающее, может ли этот преобразователь выполнить преобразование данного объекта к заданному типу. </summary>
      <returns>true, если данный преобразователь может выполнить преобразование; в противном случае — значение false.</returns>
      <param name="context">Объект, предоставляющий контекст формата.</param>
      <param name="destinationType">Тип, в который нужно преобразовать.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary>Возвращает значение, указывающее, может ли этот преобразователь выполнить преобразование данного объекта к заданному типу. </summary>
      <returns>true, если данный преобразователь может выполнить преобразование; в противном случае — значение false.</returns>
      <param name="destinationType">Тип, в который нужно преобразовать.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Преобразует заданное значение в значение типа, который определяется преобразователем.</summary>
      <returns>Преобразованное значение.</returns>
      <param name="context">Объект, предоставляющий контекст формата. </param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, который используется как текущие язык и региональные параметры. </param>
      <param name="value">Значение, которое необходимо преобразовать в тип данного преобразователя.</param>
      <exception cref="T:System.NotImplementedException">
        <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> не реализован в базовом объекте <see cref="T:System.ComponentModel.TypeConverter" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary>Преобразует заданное значение в значение типа данного преобразователя.</summary>
      <returns>Преобразованное значение.</returns>
      <param name="value">Значение, которое необходимо преобразовать в тип данного преобразователя.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary>Преобразует заданный текст в объект.</summary>
      <returns>Объект, представляющий преобразованную текстовую строку.</returns>
      <param name="text">Текстовое представление преобразуемого объекта.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Преобразует указанный объект значения в заданный тип.</summary>
      <returns>Преобразованный объект.</returns>
      <param name="context">Объект, предоставляющий контекст формата. </param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, который используется как текущие язык и региональные параметры. </param>
      <param name="value">Объект для преобразования.</param>
      <param name="destinationType">Тип, в который требуется преобразовать объект.</param>
      <exception cref="T:System.NotImplementedException">
        <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" /> не реализован в базовом объекте <see cref="T:System.ComponentModel.TypeConverter" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary>Преобразует указанный объект значения в заданный тип.</summary>
      <returns>Преобразованный объект.</returns>
      <param name="value">Объект для преобразования.</param>
      <param name="destinationType">Тип, в который требуется преобразовать объект.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary>Преобразует указанный объект к строковому представлению.</summary>
      <returns>Объект, представляющий преобразованное значение.</returns>
      <param name="value">Преобразуемый объект</param>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>Задает класс, который следует использовать в качестве преобразователя типа для типа или свойства, с которым связан этот атрибут.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.TypeConverterAttribute" />. </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.TypeConverterAttribute" />, используя заданное имя типа в качестве преобразователя данных для объекта, с которым связан этот атрибут.</summary>
      <param name="typeName">Полное имя класса, который будет использован в качестве преобразователя данных для объекта, с которым связан этот атрибут.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.TypeConverterAttribute" />, используя заданный тип в качестве преобразователя данных для объекта, с которым связан этот атрибут.</summary>
      <param name="type">Тип класса преобразователя, используемого с целью преобразования данных для объекта, с которым связан этот атрибут.</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>Получает полное имя типа, используемого в качестве преобразователя для объекта, с которым связан этот атрибут.</summary>
      <returns>Полное имя типа, используемого в качестве преобразователя для объекта, с которым связан этот атрибут, или пустая строка (""), если этого типа не существует.Значение по умолчанию — пустая строка ("").</returns>
    </member>
    <member name="T:System.Diagnostics.Debug">
      <summary>Предоставляет набор методов и свойств, помогающих при отладке кода.Данный класс не наследуется.</summary>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean)">
      <summary>Проверяет условие и выводит стек вызовов, если оно имеет значение false.</summary>
      <param name="condition">Условное выражение, которое требуется оценить.Если условие имеет значение true, стек вызовов не отображается.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)">
      <summary>Проверяет условие и отображает заданное сообщение, если условие имеет значение false.</summary>
      <param name="condition">Условное выражение, которое требуется оценить.Если условие имеет значение true, сообщение не отображается.</param>
      <param name="message">Отображаемое сообщение. </param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)">
      <summary>Проверяет условие и отображает два заданных сообщения, если условие имеет значение false.</summary>
      <param name="condition">Условное выражение, которое требуется оценить.Если условие имеет значение true, сообщения не отображаются.</param>
      <param name="message">Отображаемое сообщение. </param>
      <param name="detailMessage">Отображаемое подробное сообщение. </param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])">
      <summary>Проверяет условие и выводит сообщение и стек вызовов, если оно имеет значение false. </summary>
      <param name="condition">Условное выражение, которое требуется оценить.Если условие имеет значение true, заданное сообщение и стек вызовов не отображаются.</param>
      <param name="message">Отображаемое сообщение.</param>
      <param name="detailMessageFormat">Строка составного формата, содержащая текст, который перемежается несколькими элементами форматирования (или ни одним из них), соответствующими объектам в массиве <paramref name="args" />.</param>
      <param name="args">Массив объектов, содержащий несколько (или ни одного) объектов, которые необходимо отформатировать.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.Object)">
      <summary>Записывает в отладчик значение метода <see cref="M:System.Object.ToString" /> заданного объекта с использованием функции OutputDebugString.</summary>
      <param name="value">Объект, имя которого отправляется в отладчик с использованием функции OutputDebugString.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String)">
      <summary>Записывает заданное сообщение, заканчивающееся ограничителем строки, в отладчик с использованием функции OutputDebugString.</summary>
      <param name="message">Сообщение для записи в отладчик. </param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String,System.Object[])">
      <summary>Записывает форматированную строку, заканчивающуюся ограничителем строки, в отладчик с использованием функции OutputDebugString.</summary>
      <param name="format">Строка составного формата, содержащая текст, который перемежается несколькими элементами форматирования (или ни одним из них), соответствующими объектам в массиве <paramref name="args" />.</param>
      <param name="args">Массив объектов, содержащий один или несколько (либо ни одного) объектов, которые необходимо отформатировать. </param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)">
      <summary>Записывает заданное сообщение, заканчивающееся ограничителем строки, в отладчик с использованием функции OutputDebugString, если условие равно true.</summary>
      <param name="condition">Условное выражение, которое требуется оценить.Если условие имеет значение true, сообщение записывается в отладчик.</param>
      <param name="message">Сообщение для записи в отладчик. </param>
    </member>
    <member name="T:System.Diagnostics.Stopwatch">
      <summary>Предоставляет набор методов и средств, которые можно использовать для точного измерения затраченного времени.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.#ctor">
      <summary>Создает новый экземпляр класса <see cref="T:System.Diagnostics.Stopwatch" />.</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.Elapsed">
      <summary>Возвращает общее затраченное время, измеренное текущим экземпляром.</summary>
      <returns>Возвращает значение <see cref="T:System.TimeSpan" />.</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds">
      <summary>Получает общее оставшееся время в миллисекундах, измеренное текущим экземпляром.</summary>
      <returns>Возвращает значение <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedTicks">
      <summary>Возвращает общее затраченное время в тактах таймера, измеренное текущим экземпляром.</summary>
      <returns>Возвращает значение <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.Frequency">
      <summary>Возвращает частоту таймера, как число тактов в секунду. Это поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetElapsedDateTimeTicks">
      <summary>Возвращает число тактов, которое представляет дату и время этого экземпляра.</summary>
      <returns>Возвращает значение <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetRawElapsedTicks">
      <summary>Возвращает общее затраченное время в тактах таймера, измеренное текущим экземпляром.</summary>
      <returns>Возвращает значение <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetTimestamp">
      <summary>Возвращает текущее число тактов временного механизма.</summary>
      <returns>Возвращает значение <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.IsHighResolution">
      <summary>Указывает, зависит ли таймер от счетчика производительности высокого разрешения. Это поле доступно только для чтения.</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.IsRunning">
      <summary>Получает значение, указывающее, работает ли Stopwatch.</summary>
      <returns>Возвращает значение <see cref="T:System.Boolean" />.Значение true, если экземпляр Stopwatch запущен и измеряет истекшее время для интервала; в противном случае — значение false.. </returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Reset">
      <summary>Останавливает измерение интервала времени и обнуляет затраченное время.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Restart">
      <summary>Останавливает измерение интервала времени, обнуляет затраченное время и начинает измерение затраченного времени.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Start">
      <summary>Запускает или восстанавливает измерение затраченного времени для интервала.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.StartNew">
      <summary>Инициализирует новый экземпляр Stopwatch, задает свойство затраченного времени равным нулю и запускает измерение затраченного времени.</summary>
      <returns>Возвращает значение <see cref="T:System.Diagnostics.Stopwatch" />.</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Stop">
      <summary>Останавливает измерение затраченного времени для интервала.</summary>
    </member>
    <member name="T:System.IO.InvalidDataException">
      <summary>Исключение возникает, когда поток данных имеет недопустимый формат.</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.InvalidDataException" />.</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.InvalidDataException" />, используя указанное сообщение об ошибке.</summary>
      <param name="message">Сообщение об ошибке, объясняющее причину исключения.</param>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.InvalidDataException" /> со ссылкой на внутреннее исключение, которое является причиной данного исключения.</summary>
      <param name="message">Сообщение об ошибке, объясняющее причину исключения.</param>
      <param name="innerException">Исключение, послужившее причиной текущего исключения. Если значение параметра <paramref name="innerException" /> не равно null, текущее исключение создается в блоке catch, обрабатывающем внутреннее исключение.</param>
    </member>
    <member name="T:System.Net.WebUtility">
      <summary>Предоставляет методы кодирования и расшифровки URL-адресов во время обработки веб-запросов. </summary>
    </member>
    <member name="M:System.Net.WebUtility.HtmlDecode(System.String)">
      <summary>Преобразовывает строку в кодировке HTML для передачи по протоколу HTTP в расшифрованную строку.</summary>
      <returns>Расшифрованная строка.</returns>
      <param name="value">Строка для расшифровки.</param>
    </member>
    <member name="M:System.Net.WebUtility.HtmlEncode(System.String)">
      <summary>Преобразует строку в строку формата HTML.</summary>
      <returns>Кодируемая строка.</returns>
      <param name="value">Кодируемая строка.</param>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecode(System.String)">
      <summary>Преобразовывает строку, зашифрованную для передачи по URL-адресу, в расшифрованную строку.</summary>
      <returns>Расшифрованная строка.</returns>
      <param name="encodedValue">Строка для расшифровки.</param>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>Преобразует массив байтов в кодировке URL в расшифрованную строку с помощью указанного объекта декодирования, начиная с заданной позиции массива, для конкретного числа байтов.</summary>
      <returns>Расшифрованная строка.</returns>
      <param name="encodedValue">Массив байтов, предназначенных для декодирования.</param>
      <param name="offset">Позиция в байте, с которой начинается декодирование.</param>
      <param name="count">Количество декодируемых байтов.</param>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncode(System.String)">
      <summary>Кодирует строку с URL-адресом.</summary>
      <returns>Кодируемая строка.</returns>
      <param name="value">Кодируемый текст.</param>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>Преобразует массив байтов в строку в кодировке URL, начиная с заданной позиции массива, для конкретного числа байтов.</summary>
      <returns>Кодируемая строка.</returns>
      <param name="value">Массив байтов, предназначенных для кодирования.</param>
      <param name="offset">Позиция в массиве байтов, с которой начинается кодирование.</param>
      <param name="count">Количество байтов, предназначенных для кодирования.</param>
    </member>
    <member name="T:System.Text.RegularExpressions.Capture">
      <summary>Представляет результаты одной записи подвыражения. </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Index">
      <summary>Позиция в исходной строке, в которой обнаружен первый символ записанной подстроки.</summary>
      <returns>Начальная позиция с отсчетом с нуля в исходной строке, в которой обнаружена записанная подстрока.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Length">
      <summary>Длина записанной подстроки.</summary>
      <returns>Длина записанной подстроки.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Capture.ToString">
      <summary>Получает записанную подстроку из входной строки.</summary>
      <returns>Фактическая подстрока, записанная по совпадению.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Value">
      <summary>Получает записанную подстроку из входной строки.</summary>
      <returns>Фактическая подстрока, записанная по совпадению.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.CaptureCollection">
      <summary>Представляет набор записей, сделанных одной группой записи. </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Array,System.Int32)">
      <summary>Копирует все элементы коллекции в данный массив, начиная с данного индекса.</summary>
      <param name="array">Массив, в который необходимо скопировать коллекцию. </param>
      <param name="arrayIndex">Позиция в конечном массиве, в которой следует начать копирование. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="arrayIndex" /> выходит за пределы массива <paramref name="array" />.-или-<paramref name="arrayIndex" /> плюс <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" /> выходит за пределы <paramref name="array" />. </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Count">
      <summary>Получает количество подстрок, записанных группой.</summary>
      <returns>Число элементов в объекте <see cref="T:System.Text.RegularExpressions.CaptureCollection" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.GetEnumerator">
      <summary>Предоставляет перечислитель, выполняющий итерацию по элементам в коллекции.</summary>
      <returns>Объект, содержащий все объекты <see cref="T:System.Text.RegularExpressions.Capture" /> коллекции <see cref="T:System.Text.RegularExpressions.CaptureCollection" />.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsReadOnly">
      <summary>Получает значение, указывающее, доступна ли коллекция только для чтения.</summary>
      <returns>true во всех случаях.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsSynchronized">
      <summary>Получает значение, указывающее, является ли доступ к коллекции синхронизированным (потокобезопасным).</summary>
      <returns>false во всех случаях.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)">
      <summary>Получает отдельный член коллекции.</summary>
      <returns>Записанная подстрока в позиции <paramref name="i" /> в коллекции.</returns>
      <param name="i">Индекс в коллекцию записи. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="i" /> меньше 0 или больше <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" />. </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.SyncRoot">
      <summary>Получает объект, который можно использовать для синхронизации доступа к коллекции.</summary>
      <returns>Объект, который может быть использован для синхронизации доступа к коллекции.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Group">
      <summary>Представляет результаты отдельной группы записи.</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Captures">
      <summary>Получает коллекцию всех записей, соответствующих группе записи, в порядке, в котором первыми расположены внутренние слева направо (или внутренние справа налево, если регулярное выражение изменено с помощью параметра <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" />).Коллекция может иметь ноль и более элементов.</summary>
      <returns>Коллекция подстрок, соответствующих группе.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Success">
      <summary>Получает значение, указывающее на то, успешно ли совпадение.</summary>
      <returns>true в случае успешного сопоставления; в противном случае возвращает значение false.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.GroupCollection">
      <summary>Представляет коллекцию записанных групп в одном сопоставлении.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)">
      <summary>Копирует все элементы коллекции в данный массив, начиная с данного индекса.</summary>
      <param name="array">Массив, в который необходимо скопировать коллекцию. </param>
      <param name="arrayIndex">Позиция в конечном массиве, в которой следует начать копирование. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> имеет значение null.</exception>
      <exception cref="T:System.IndexOutOfRangeException">Значение параметра <paramref name="arrayIndex" /> выходит за пределы массива <paramref name="array" />.-или-<paramref name="arrayIndex" /> в сумме с <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> выходит за пределы массива <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Count">
      <summary>Возвращает количество групп в коллекции.</summary>
      <returns>Число групп в коллекции.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator">
      <summary>Возвращает перечислитель, способный выполнять итерацию по коллекции.</summary>
      <returns>Объект, содержащий все объекты <see cref="T:System.Text.RegularExpressions.Group" /> коллекции <see cref="T:System.Text.RegularExpressions.GroupCollection" />.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly">
      <summary>Получает значение, указывающее, доступна ли коллекция только для чтения.</summary>
      <returns>true, если <see cref="T:System.Text.RegularExpressions.GroupCollection" /> доступен только для чтения; в противном случае — false.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized">
      <summary>Получает значение, позволяющее определить, является ли доступ к коллекции <see cref="T:System.Text.RegularExpressions.GroupCollection" /> синхронизированным (потокобезопасным).</summary>
      <returns>false во всех случаях.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)">
      <summary>Включает доступ к члену коллекции с помощью целочисленного индекса.</summary>
      <returns>Элемент коллекции, заданный параметром <paramref name="groupnum" />.</returns>
      <param name="groupnum">Отсчитываемый от ноля индекс извлекаемого элемента коллекции. </param>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)">
      <summary>Включает доступ к члену коллекции с помощью строкового индекса.</summary>
      <returns>Элемент коллекции, заданный параметром <paramref name="groupname" />.</returns>
      <param name="groupname">Имя группы записи.</param>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.SyncRoot">
      <summary>Возвращает объект, который может быть использован для синхронизации доступа к <see cref="T:System.Text.RegularExpressions.GroupCollection" />.</summary>
      <returns>Копия объекта <see cref="T:System.Text.RegularExpressions.Match" /> для синхронизации.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Match">
      <summary>Представляет результаты из отдельного совпадения регулярного выражения.</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Empty">
      <summary>Получает пустую группу.Все неудавшиеся совпадения возвращают это пустое совпадение.</summary>
      <returns>Пустой объект <see cref="T:System.Text.RegularExpressions.Match" />.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Groups">
      <summary>Получает коллекцию групп, соответствующих регулярному выражению.</summary>
      <returns>Группы символов, соответствующие шаблону.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.NextMatch">
      <summary>Возвращает новый объект <see cref="T:System.Text.RegularExpressions.Match" /> с результатами для следующего сопоставления, начиная с позиции, на которой завершилось последнее сопоставление (с символа после последнего сопоставленного символа).</summary>
      <returns>Следующее сопоставление регулярному выражению.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Result(System.String)">
      <summary>Возвращает расширение указанного шаблона замены. </summary>
      <returns>Расширенная версия параметра <paramref name="replacement" />.</returns>
      <param name="replacement">Шаблон замены для использования. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replacement" /> имеет значение null.</exception>
      <exception cref="T:System.NotSupportedException">Расширение для этого шаблона не разрешено.</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchCollection">
      <summary>Представляет набор успешных совпадений, обнаруженных путем итеративного применения шаблона регулярного выражения к входной строке.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
      <summary>Копирует все элементы коллекции в данный массив, начиная с данного индекса.</summary>
      <param name="array">Массив, в который необходимо скопировать коллекцию. </param>
      <param name="arrayIndex">Позиция в массиве, в которой следует начать копирование. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> является многомерным массивом.</exception>
      <exception cref="T:System.IndexOutOfRangeException">Значение параметра <paramref name="arrayIndex" /> выходит за пределы массива <paramref name="array" />.-или-<paramref name="arrayIndex" /> в сумме с <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> выходит за пределы массива <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Count">
      <summary>Получает количество соответствий.</summary>
      <returns>Количество соответствий.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
      <summary>Предоставляет перечислитель в том же порядке, что и <see cref="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)" />.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, содержащий все объекты Match в MatchCollection.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsReadOnly">
      <summary>Получает значение, указывающее на то, доступна ли коллекция только для чтения.</summary>
      <returns>Значением этого свойства всегда является true.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
      <summary>Получает значение, указывающее на то, синхронизирован ли доступ к коллекции (потокобезопасный).</summary>
      <returns>Значением этого свойства всегда является false.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
      <summary>Получает отдельный член коллекции.</summary>
      <returns>Записанная подстрока в позиции <paramref name="i" /> в коллекции.</returns>
      <param name="i">Индекс в коллекцию Match. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="i" /> меньше 0, либо больше или равен <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" />. </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
      <summary>Получает объект, который можно использовать для синхронизации доступа к коллекции.</summary>
      <returns>Объект, который может быть использован для синхронизации доступа к коллекции.Это свойство всегда возвращает сам объект.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchEvaluator">
      <summary>Представляет метод, вызываемый каждый раз, когда обнаружено совпадение регулярного выражения во время работы метода <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" />.</summary>
      <returns>Строка, возвращенная методом, представленным делегатом <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />.</returns>
      <param name="match">Объект <see cref="T:System.Text.RegularExpressions.Match" />, представляющий отдельное совпадение регулярного выражения во время работы метода <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" />. </param>
    </member>
    <member name="T:System.Text.RegularExpressions.Regex">
      <summary>Представляет постоянное регулярное выражение.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String)">
      <summary>Инициализирует и компилирует новый экземпляр класса <see cref="T:System.Text.RegularExpressions.Regex" /> для указанного регулярного выражения.</summary>
      <param name="pattern">Шаблон регулярного выражения для сопоставления. </param>
      <exception cref="T:System.ArgumentException">Произошла ошибка синтаксического анализа регулярного выражения.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Инициализирует и компилирует новый экземпляр класса <see cref="T:System.Text.RegularExpressions.Regex" /> для указанного регулярного выражения с параметрами, изменяющими шаблон.</summary>
      <param name="pattern">Шаблон регулярного выражения для сопоставления. </param>
      <param name="options">Побитовое сочетание значений перечисления. </param>
      <exception cref="T:System.ArgumentException">Произошла ошибка синтаксического анализа регулярного выражения. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> содержит недопустимый флаг.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Text.RegularExpressions.Regex" /> для указанного регулярного выражения с параметрами для изменения шаблона и значением, которое указывает время жизни метода, отвечающего за сопоставление данных с шаблоном, по истечении которого он завершается по таймауту.</summary>
      <param name="pattern">Шаблон регулярного выражения для сопоставления.</param>
      <param name="options">Побитовое сочетание значений перечисления, изменяющих регулярное выражение.</param>
      <param name="matchTimeout">Интервал таймаута или <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> для отмены таймаута для метода.</param>
      <exception cref="T:System.ArgumentException">Произошла ошибка синтаксического анализа регулярного выражения.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> не является допустимым значением <see cref="T:System.Text.RegularExpressions.RegexOptions" />.-или-<paramref name="matchTimeout" /> является отрицательным или его значение больше, чем 24 дня.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.CacheSize">
      <summary>Возвращает или задает максимальное количество записей в текущей статической кэш-памяти скомпилированных регулярных выражений.</summary>
      <returns>Максимальное количество записей в статической кэш-памяти.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение, заданное для операции Set, меньше ноля.</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capsize">
      <summary>Для внутреннего использования обработчиком регулярных выражений. </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capslist">
      <summary>Для внутреннего использования обработчиком регулярных выражений. </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Escape(System.String)">
      <summary>Преобразует минимальный набор символов (\, *, +, ?, |, {, [, (,), ^, $,., # и пробел), заменяя их escape-кодами.При этом обработчику регулярных выражений дается команда интерпретировать эти символы буквально, а не как метасимволы.</summary>
      <returns>Строка символов с любыми метасимволами, приведенными в преобразованную форму.</returns>
      <param name="str">Входная строка, содержащая текст для преобразования. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNames">
      <summary>Возвращает массив имен группы записи для регулярного выражения.</summary>
      <returns>Строковый массив имен группы.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNumbers">
      <summary>Возвращает массив номеров групп записи, что соответствует именам групп в массиве.</summary>
      <returns>Целочисленный массив номеров групп.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)">
      <summary>Получает имя группы, соответствующее указанному номеру группы.</summary>
      <returns>Строка, содержащая имя группы, связанное с указанным номером группы.При отсутствии имени группы, соответствующей параметру <paramref name="i" />, метод возвращает <see cref="F:System.String.Empty" />.</returns>
      <param name="i">Номер группы для преобразования в соответствующее имя группы. </param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)">
      <summary>Возвращает номер группы, соответствующий указанному имени группы.</summary>
      <returns>Номер группы, соответствующий указанному имени группы, или -1, если <paramref name="name" /> не является допустимым именем группы.</returns>
      <param name="name">Имя группы для преобразования в соответствующий номер группы. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> имеет значение null.</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout">
      <summary>Указывает, что операция сопоставления с шаблоном не должна завершаться по таймауту.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)">
      <summary>Указывает на то, обнаруживает ли регулярное выражение, указанное в конструкторе <see cref="T:System.Text.RegularExpressions.Regex" /> соответствие во входной строке.</summary>
      <returns>Значение true, если регулярное выражение обнаруживает соответствие; в противном случае — значение false.</returns>
      <param name="input">Строка для поиска соответствия. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)">
      <summary>Указывает на то, обнаруживает ли регулярное выражение, указанное в конструкторе <see cref="T:System.Text.RegularExpressions.Regex" />, соответствие во входной строке, начиная с указанной начальной позиции в строке.</summary>
      <returns>Значение true, если регулярное выражение обнаруживает соответствие; в противном случае — значение false.</returns>
      <param name="input">Строка для поиска соответствия. </param>
      <param name="startat">Расположение символа, с которого необходимо начать поиск. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> не может быть меньше ноля или больше длины <paramref name="input" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)">
      <summary>Указывает на то, обнаруживает ли регулярное выражение соответствие во входной строке, используя регулярное выражение, указанное в параметре <paramref name="pattern" />.</summary>
      <returns>Значение true, если регулярное выражение обнаруживает соответствие; в противном случае — значение false.</returns>
      <param name="input">Строка для поиска соответствия. </param>
      <param name="pattern">Шаблон регулярного выражения для сопоставления. </param>
      <exception cref="T:System.ArgumentException">Произошла ошибка синтаксического анализа регулярного выражения.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.-или-<paramref name="pattern" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Указывает на то, обнаруживает ли регулярное выражение соответствие во входной строке, используя регулярное выражение, указанное в параметре <paramref name="pattern" /> и параметрах соответствия, предоставленных в параметре <paramref name="options" />.</summary>
      <returns>Значение true, если регулярное выражение обнаруживает соответствие; в противном случае — значение false.</returns>
      <param name="input">Строка для поиска соответствия. </param>
      <param name="pattern">Шаблон регулярного выражения для сопоставления. </param>
      <param name="options">Побитовое сочетание значений перечисления. </param>
      <exception cref="T:System.ArgumentException">Произошла ошибка синтаксического анализа регулярного выражения.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.-или-<paramref name="pattern" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> не является допустимым значением <see cref="T:System.Text.RegularExpressions.RegexOptions" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Указывает, обнаружено ли в указанной входной строке соответствие заданному регулярному выражению, используя указанные параметры сопоставления и интервал таймаута.</summary>
      <returns>Значение true, если регулярное выражение обнаруживает соответствие; в противном случае — значение false.</returns>
      <param name="input">Строка для поиска соответствия.</param>
      <param name="pattern">Шаблон регулярного выражения для сопоставления.</param>
      <param name="options">Побитовая комбинация значений перечисления, предоставляющая параметры для сопоставления.</param>
      <param name="matchTimeout">Интервал таймаута или <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> для отмены таймаута для метода.</param>
      <exception cref="T:System.ArgumentException">Произошла ошибка синтаксического анализа регулярного выражения.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> или <paramref name="pattern" /> равняется null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> не является допустимым значением <see cref="T:System.Text.RegularExpressions.RegexOptions" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Ошибка времени ожидания.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String)">
      <summary>Ищет в указанной входной строке первое вхождение регулярного выражения, указанного в конструкторе <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
      <returns>Объект, содержащий данные о совпадении. </returns>
      <param name="input">Строка для поиска соответствия. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)">
      <summary>Находит во входной строке первое вхождение регулярного выражения с указанной начальной позицией во входной строке.</summary>
      <returns>Объект, содержащий сведения о совпадении.</returns>
      <param name="input">Строка для поиска соответствия. </param>
      <param name="startat">Отсчитываемая от ноля позиция символа, с которой начинается поиск. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> меньше нуля или больше длины параметра <paramref name="input" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)">
      <summary>Находит во входной строке первое вхождение регулярного выражения с указанной начальной позицией во входной строке и длиной входной строки.</summary>
      <returns>Объект, содержащий сведения о совпадении.</returns>
      <param name="input">Строка для поиска соответствия. </param>
      <param name="beginning">Отсчитываемая от нуля позиция символа во входной строке, указывающая самую левую позицию, входящую в поисковый запрос. </param>
      <param name="length">Количество символов в подстроке для включения в поиск. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="beginning" /> меньше нуля или больше длины параметра <paramref name="input" />.-или-<paramref name="length" /> меньше нуля или больше длины параметра <paramref name="input" />.-или-<paramref name="beginning" />+<paramref name="length" />– 1 находится вне допустимого диапазона типа <paramref name="input" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)">
      <summary>Находит в указанной входной строке первое вхождение регулярного выражения, предоставленного в параметре <paramref name="pattern" />.</summary>
      <returns>Объект, содержащий сведения о совпадении.</returns>
      <param name="input">Строка для поиска соответствия. </param>
      <param name="pattern">Шаблон регулярного выражения для сопоставления. </param>
      <exception cref="T:System.ArgumentException">Произошла ошибка синтаксического анализа регулярного выражения.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.-или-<paramref name="pattern" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Находит во входной строке первое вхождение регулярного выражения, предоставленного в параметре <paramref name="pattern" /> с соответствующими параметрами, предоставленными в параметре <paramref name="options" />.</summary>
      <returns>Объект, содержащий сведения о совпадении.</returns>
      <param name="input">Строка для поиска соответствия. </param>
      <param name="pattern">Шаблон регулярного выражения для сопоставления. </param>
      <param name="options">Побитовое сочетание значений перечисления. </param>
      <exception cref="T:System.ArgumentException">Произошла ошибка синтаксического анализа регулярного выражения.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.-или-<paramref name="pattern" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> не является допустимой битовой комбинацией значений <see cref="T:System.Text.RegularExpressions.RegexOptions" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Ищет во входной строке первое вхождение заданного регулярного выражения, используя указанные параметры сопоставления и интервал таймаута.</summary>
      <returns>Объект, содержащий сведения о совпадении.</returns>
      <param name="input">Строка для поиска соответствия.</param>
      <param name="pattern">Шаблон регулярного выражения для сопоставления.</param>
      <param name="options">Побитовая комбинация значений перечисления, предоставляющая параметры для сопоставления.</param>
      <param name="matchTimeout">Интервал таймаута или <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> для отмены таймаута для метода.</param>
      <exception cref="T:System.ArgumentException">Произошла ошибка синтаксического анализа регулярного выражения.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> или <paramref name="pattern" /> равняется null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> не является допустимой битовой комбинацией значений <see cref="T:System.Text.RegularExpressions.RegexOptions" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Ошибка времени ожидания.Дополнительные сведения см. в разделе "Замечания".</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String)">
      <summary>Ищет в указанной входной строке все вхождения регулярного выражения.</summary>
      <returns>Коллекция объектов <see cref="T:System.Text.RegularExpressions.Match" />, найденных при поиске.Если совпадений не найдено, метод возвращает объект пустой коллекции.</returns>
      <param name="input">Строка для поиска соответствия. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)">
      <summary>Ищет в указанной входной строке все вхождения регулярного выражения, начиная с указанной начальной позиции.</summary>
      <returns>Коллекция объектов <see cref="T:System.Text.RegularExpressions.Match" />, найденных при поиске.Если совпадений не найдено, метод возвращает объект пустой коллекции.</returns>
      <param name="input">Строка для поиска соответствия. </param>
      <param name="startat">Позиция символа во входной строке, с которой необходимо начать поиск. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> меньше нуля или больше длины параметра <paramref name="input" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)">
      <summary>Ищет в указанной входной строке все вхождения регулярного выражения, указанного в параметре <paramref name="pattern" />.</summary>
      <returns>Коллекция объектов <see cref="T:System.Text.RegularExpressions.Match" />, найденных при поиске.Если совпадений не найдено, метод возвращает объект пустой коллекции.</returns>
      <param name="input">Строка для поиска соответствия. </param>
      <param name="pattern">Шаблон регулярного выражения для сопоставления. </param>
      <exception cref="T:System.ArgumentException">Произошла ошибка синтаксического анализа регулярного выражения.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.-или-<paramref name="pattern" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Ищет во входной строке все вхождения регулярного выражения, предоставленного в параметре <paramref name="pattern" /> с соответствующими параметрами, предоставленными в параметре <paramref name="options" />.</summary>
      <returns>Коллекция объектов <see cref="T:System.Text.RegularExpressions.Match" />, найденных при поиске.Если совпадений не найдено, метод возвращает объект пустой коллекции.</returns>
      <param name="input">Строка для поиска соответствия. </param>
      <param name="pattern">Шаблон регулярного выражения для сопоставления. </param>
      <param name="options">Побитовое сочетание значений перечисления. </param>
      <exception cref="T:System.ArgumentException">Произошла ошибка синтаксического анализа регулярного выражения.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.-или-<paramref name="pattern" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> не является допустимой битовой комбинацией значений <see cref="T:System.Text.RegularExpressions.RegexOptions" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Ищет в указанной входной строке все вхождения заданного регулярного выражения, используя указанные параметры сопоставления и интервал таймаута.</summary>
      <returns>Коллекция объектов <see cref="T:System.Text.RegularExpressions.Match" />, найденных при поиске.Если совпадений не найдено, метод возвращает объект пустой коллекции.</returns>
      <param name="input">Строка для поиска соответствия.</param>
      <param name="pattern">Шаблон регулярного выражения для сопоставления.</param>
      <param name="options">Побитовая комбинация значений перечисления, задающая параметры для сопоставления.</param>
      <param name="matchTimeout">Интервал таймаута или <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> для отмены таймаута для метода.</param>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.MatchTimeout">
      <summary>Возвращает интервал таймаута для текущего экземпляра.</summary>
      <returns>Максимальный период времени для операции сопоставления с шаблоном перед порождением <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> (или <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, если таймауты отключены).</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Options">
      <summary>Возвращает параметры, переданные в конструктор <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
      <returns>Параметр <paramref name="options" />, переданный в конструктор Regex.</returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.pattern">
      <summary>Для внутреннего использования обработчиком регулярных выражений. </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)">
      <summary>В указанной входной строке заменяет все строки, соответствующие шаблону регулярного выражения, указанной строкой замены. </summary>
      <returns>Новая строка, идентичная входной строке, за исключением того, что строка замены занимает место каждой соответствующей строки.</returns>
      <param name="input">Строка для поиска соответствия. </param>
      <param name="replacement">Строка замены. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.-или-<paramref name="replacement" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)">
      <summary>В указанной входной строке заменяет указанное максимальное количество строк, соответствующих шаблону регулярного выражения, указанной строкой замены. </summary>
      <returns>Новая строка, идентичная входной строке, за исключением того, что строка замены занимает место каждой соответствующей строки.</returns>
      <param name="input">Строка для поиска соответствия. </param>
      <param name="replacement">Строка замены. </param>
      <param name="count">Максимальное количество возможных случаев замены. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.-или-<paramref name="replacement" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>В указанной входной подстроке заменяет указанное максимальное количество строк, соответствующих шаблону регулярного выражения, указанной строкой замены. </summary>
      <returns>Новая строка, идентичная входной строке, за исключением того, что строка замены занимает место каждой соответствующей строки.</returns>
      <param name="input">Строка для поиска соответствия. </param>
      <param name="replacement">Строка замены. </param>
      <param name="count">Максимальное возможное количество случаев замены. </param>
      <param name="startat">Позиция символа во входной строке, с которой начинается поиск. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.-или-<paramref name="replacement" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> меньше нуля или больше длины параметра <paramref name="input" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">
      <summary>В указанной входной строке заменяет все строки, соответствующие указанному регулярному выражению, указанной строкой замены. </summary>
      <returns>Новая строка, идентичная входной строке, за исключением того, что строка замены занимает место каждой соответствующей строки.</returns>
      <param name="input">Строка для поиска соответствия. </param>
      <param name="pattern">Шаблон регулярного выражения для сопоставления. </param>
      <param name="replacement">Строка замены. </param>
      <exception cref="T:System.ArgumentException">Произошла ошибка синтаксического анализа регулярного выражения.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.-или-<paramref name="pattern" /> имеет значение null.-или-<paramref name="replacement" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>В указанной входной строке заменяет все строки, соответствующие указанному регулярному выражению, указанной строкой замены.Указанные параметры изменяют операцию сопоставления.</summary>
      <returns>Новая строка, идентичная входной строке, за исключением того, что строка замены занимает место каждой соответствующей строки.</returns>
      <param name="input">Строка для поиска соответствия. </param>
      <param name="pattern">Шаблон регулярного выражения для сопоставления. </param>
      <param name="replacement">Строка замены. </param>
      <param name="options">Побитовое сочетание значений перечисления. </param>
      <exception cref="T:System.ArgumentException">Произошла ошибка синтаксического анализа регулярного выражения.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.-или-<paramref name="pattern" /> имеет значение null.-или-<paramref name="replacement" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> не является допустимой битовой комбинацией значений <see cref="T:System.Text.RegularExpressions.RegexOptions" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>В указанной входной строке заменяет все строки, соответствующие указанному регулярному выражению, указанной строкой замены.Дополнительные параметры задают варианты изменения операции соответствия и интервал таймаута, если совпадений нет.</summary>
      <returns>Новая строка, идентичная входной строке, за исключением того, что строка замены занимает место каждой соответствующей строки.</returns>
      <param name="input">Строка для поиска соответствия.</param>
      <param name="pattern">Шаблон регулярного выражения для сопоставления.</param>
      <param name="replacement">Строка замены.</param>
      <param name="options">Побитовая комбинация значений перечисления, предоставляющая параметры для сопоставления.</param>
      <param name="matchTimeout">Интервал таймаута или <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> для отмены таймаута для метода.</param>
      <exception cref="T:System.ArgumentException">Произошла ошибка синтаксического анализа регулярного выражения.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="pattern" /> или <paramref name="replacement" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> не является допустимой битовой комбинацией значений <see cref="T:System.Text.RegularExpressions.RegexOptions" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Ошибка времени ожидания.Дополнительные сведения см. в разделе "Замечания".</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>В указанной входной строке заменяет все строки, соответствующие указанному регулярному выражению, строкой, возвращенной делегатом <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />.</summary>
      <returns>Новая строка, идентичная входной строке, за исключением того, что строка замены занимает место каждой соответствующей строки.</returns>
      <param name="input">Строка для поиска соответствия. </param>
      <param name="pattern">Шаблон регулярного выражения для сопоставления. </param>
      <param name="evaluator">Пользовательский метод проверяет каждое соответствие и возвращает либо исходную соответствующую строку, либо строку замены.</param>
      <exception cref="T:System.ArgumentException">Произошла ошибка синтаксического анализа регулярного выражения.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.-или-<paramref name="pattern" /> имеет значение null.-или-<paramref name="evaluator" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
      <summary>В указанной входной строке заменяет все строки, соответствующие указанному регулярному выражению, строкой, возвращенной делегатом <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />.Указанные параметры изменяют операцию сопоставления.</summary>
      <returns>Новая строка, идентичная входной строке, за исключением того, что строка замены занимает место каждой соответствующей строки.</returns>
      <param name="input">Строка для поиска соответствия. </param>
      <param name="pattern">Шаблон регулярного выражения для сопоставления. </param>
      <param name="evaluator">Пользовательский метод проверяет каждое соответствие и возвращает либо исходную соответствующую строку, либо строку замены. </param>
      <param name="options">Побитовое сочетание значений перечисления. </param>
      <exception cref="T:System.ArgumentException">Произошла ошибка синтаксического анализа регулярного выражения.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.-или-<paramref name="pattern" /> имеет значение null.-или-<paramref name="evaluator" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> не является допустимой битовой комбинацией значений <see cref="T:System.Text.RegularExpressions.RegexOptions" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>В указанной входной строке заменяет все подстроки, соответствующие указанному регулярному выражению, строкой, возвращенной делегатом <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />.Дополнительные параметры задают варианты изменения операции соответствия и интервал таймаута, если совпадений нет.</summary>
      <returns>Новая строка, идентичная входной строке, за исключением того, что строка замены занимает место каждой соответствующей строки.</returns>
      <param name="input">Строка для поиска соответствия.</param>
      <param name="pattern">Шаблон регулярного выражения для сопоставления.</param>
      <param name="evaluator">Пользовательский метод проверяет каждое соответствие и возвращает либо исходную соответствующую строку, либо строку замены.</param>
      <param name="options">Побитовая комбинация значений перечисления, предоставляющая параметры для сопоставления.</param>
      <param name="matchTimeout">Интервал таймаута или <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> для отмены таймаута для метода.</param>
      <exception cref="T:System.ArgumentException">Произошла ошибка синтаксического анализа регулярного выражения.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="pattern" /> или <paramref name="evaluator" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> не является допустимой битовой комбинацией значений <see cref="T:System.Text.RegularExpressions.RegexOptions" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Ошибка времени ожидания.Дополнительные сведения см. в разделе "Замечания".</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>В указанной входной строке заменяет все строки, соответствующие указанному регулярному выражению, строкой, возвращенной делегатом <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />.</summary>
      <returns>Новая строка, идентичная входной строке, за исключением того, что строка замены занимает место каждой соответствующей строки.</returns>
      <param name="input">Строка для поиска соответствия. </param>
      <param name="evaluator">Пользовательский метод проверяет каждое соответствие и возвращает либо исходную соответствующую строку, либо строку замены.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.-или-<paramref name="evaluator" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)">
      <summary>В указанной входной строке заменяется указанное максимальное количество строк, соответствующих шаблону регулярного выражения, строкой, возвращенной делегатом <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />.</summary>
      <returns>Новая строка, идентичная входной строке, за исключением того, что строка замены занимает место каждой соответствующей строки.</returns>
      <param name="input">Строка для поиска соответствия. </param>
      <param name="evaluator">Пользовательский метод проверяет каждое соответствие и возвращает либо исходную соответствующую строку, либо строку замены.</param>
      <param name="count">Максимальное количество возможных случаев замены. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.-или-<paramref name="evaluator" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)">
      <summary>В указанной входной подстроке заменяется указанное максимальное количество строк, соответствующих шаблону регулярного выражения, строкой, возвращенной делегатом <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />.</summary>
      <returns>Новая строка, идентичная входной строке, за исключением того, что строка замены занимает место каждой соответствующей строки.</returns>
      <param name="input">Строка для поиска соответствия. </param>
      <param name="evaluator">Пользовательский метод проверяет каждое соответствие и возвращает либо исходную соответствующую строку, либо строку замены.</param>
      <param name="count">Максимальное количество возможных случаев замены. </param>
      <param name="startat">Позиция символа во входной строке, с которой начинается поиск. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.-или-<paramref name="evaluator" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> меньше нуля или больше длины параметра <paramref name="input" />.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.RightToLeft">
      <summary>Получает значение, указывающее на то, выполняется ли регулярным выражением поиск справа налево.</summary>
      <returns>Значение true, если регулярное выражение выполняет поиск справа налево; в противном случае — значение false.</returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.roptions">
      <summary>Для внутреннего использования обработчиком регулярных выражений. </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String)">
      <summary>Разделяет указанную входную строку в позициях, определенных шаблоном регулярного выражения, указанным в конструкторе <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
      <returns>Массив строк.</returns>
      <param name="input">Строка для разделения. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)">
      <summary>Разделяет указанную входную строку указанное максимальное количество раз в позициях, определенных регулярным выражением, указанным в конструкторе <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
      <returns>Массив строк.</returns>
      <param name="input">Строка для разделения. </param>
      <param name="count">Максимальное количество возможных случаев разделения. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)">
      <summary>Разделяет указанную входную строку указанное максимальное количество раз в позициях, определенных регулярным выражением, указанным в конструкторе <see cref="T:System.Text.RegularExpressions.Regex" />.Поиск шаблона регулярного выражения начинается с указанной позиции элемента во входной строке.</summary>
      <returns>Массив строк.</returns>
      <param name="input">Строка для разделения. </param>
      <param name="count">Максимальное количество возможных случаев разделения. </param>
      <param name="startat">Позиция символа во входной строке, с которой начинается поиск. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> меньше нуля или больше длины параметра <paramref name="input" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)">
      <summary>Разделяет входную строку в позициях, определенных шаблоном регулярного выражения.</summary>
      <returns>Массив строк.</returns>
      <param name="input">Строка для разделения. </param>
      <param name="pattern">Шаблон регулярного выражения для сопоставления. </param>
      <exception cref="T:System.ArgumentException">Произошла ошибка синтаксического анализа регулярного выражения.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.-или-<paramref name="pattern" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Разделяет входную строку в позициях, определенных шаблоном регулярного выражения.Указанные параметры изменяют операцию сопоставления.</summary>
      <returns>Массив строк.</returns>
      <param name="input">Строка для разделения. </param>
      <param name="pattern">Шаблон регулярного выражения для сопоставления. </param>
      <param name="options">Побитовое сочетание значений перечисления. </param>
      <exception cref="T:System.ArgumentException">Произошла ошибка синтаксического анализа регулярного выражения.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> имеет значение null.-или-<paramref name="pattern" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> не является допустимой битовой комбинацией значений <see cref="T:System.Text.RegularExpressions.RegexOptions" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Разделяет входную строку в массив подстрок в позициях, определенных соответствием указанному шаблону регулярного выражения.Дополнительные параметры задают варианты изменения операции соответствия и интервал таймаута, если совпадений нет.</summary>
      <returns>Массив строк.</returns>
      <param name="input">Строка для разделения.</param>
      <param name="pattern">Шаблон регулярного выражения для сопоставления.</param>
      <param name="options">Побитовая комбинация значений перечисления, предоставляющая параметры для сопоставления.</param>
      <param name="matchTimeout">Интервал таймаута или <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> для отмены таймаута для метода.</param>
      <exception cref="T:System.ArgumentException">Произошла ошибка синтаксического анализа регулярного выражения.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> или <paramref name="pattern" /> равняется null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> не является допустимой битовой комбинацией значений <see cref="T:System.Text.RegularExpressions.RegexOptions" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Ошибка времени ожидания.Дополнительные сведения см. в разделе "Замечания".</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ToString">
      <summary>Возвращает шаблон регулярного выражения, который был передан в конструктор Regex.</summary>
      <returns>Параметр <paramref name="pattern" />, переданный в конструктор Regex.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Unescape(System.String)">
      <summary>Отменяет преобразование преобразованных символов во входной строке.</summary>
      <returns>Строка символов с любыми преобразованными символами, приведенными в их непреобразованную форму.</returns>
      <param name="str">Входная строка, содержащая текст для преобразования. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionR">
      <summary>Для внутреннего использования обработчиком регулярных выражений.</summary>
      <returns>Значение true, если свойство <see cref="P:System.Text.RegularExpressions.Regex.Options" /> содержит параметр <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" />; в противном случае — значение false.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
      <summary>Исключение, возникающее при его ожидания превышено общее время выполнения метода сравнения с шаблоном регулярного выражения.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" />, используя системное сообщение.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> указанной строкой сообщения.</summary>
      <param name="message">Строка, описывающая исключение.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> с указанным сообщением об ошибке и ссылкой на внутреннее исключение, вызвавшее это исключение.</summary>
      <param name="message">Строка, описывающая исключение.</param>
      <param name="inner">Исключение, послужившее причиной текущего исключения.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.String,System.TimeSpan)">
      <summary>Инициализирует и компилирует новый экземпляр класса <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> для указанного регулярного выражения с параметрами, изменяющими шаблон.</summary>
      <param name="regexInput">Вводимый текст, обрабатываемые обработчик регулярных выражений, если истекло время ожидания.</param>
      <param name="regexPattern">Шаблон, используемый обработчик регулярных выражений, если истекло время ожидания.</param>
      <param name="matchTimeout">Время ожидания.</param>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Input">
      <summary>[КРИТИЧЕСКИЙ С ТОЧКИ ЗРЕНИЯ БЕЗОПАСНОСТИ] Возвращает входной текст, если истекло время ожидания обработки обработчик регулярных выражений.</summary>
      <returns>Вводимый текст регулярного выражения.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout">
      <summary>[КРИТИЧЕСКИЙ С ТОЧКИ ЗРЕНИЯ БЕЗОПАСНОСТИ] Получает интервал времени ожидания для сопоставления регулярного выражения.</summary>
      <returns>Время ожидания.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Pattern">
      <summary>[КРИТИЧЕСКИЙ С ТОЧКИ ЗРЕНИЯ БЕЗОПАСНОСТИ] Получает шаблон регулярного выражения, который был использован в соответствующей операции, если истекло время ожидания.</summary>
      <returns>Шаблон регулярного выражения.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexOptions">
      <summary>Предоставляет перечисленные значения для использования при задании параметров регулярных выражений.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Compiled">
      <summary>Указывает, что регулярное выражение скомпилировано в сборку.Это порождает более быстрое исполнение, но увеличивает время запуска.Это значение не должно назначаться свойству <see cref="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" /> при обращении к методу <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />.Присутствует только в Windows Phone, но не поддерживается.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant">
      <summary>Задает игнорирование различий языков и региональных параметров в языке.Как правило, механизм регулярных выражений выполняет сравнения строк с учетом правил текущего языка и региональных параметров.Если задан параметр <see cref="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant" />, используются правила инвариантного языка и региональных параметров.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ECMAScript">
      <summary>Включает ECMAScript-совместимое поведение для выражения.Это значение может быть использовано только вместе со значениями <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase" /> и <see cref="F:System.Text.RegularExpressions.RegexOptions.Multiline" />.Использование этого значения вместе с любыми другими приводит к исключению.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ExplicitCapture">
      <summary>Указывает, что единственные допустимые записи являются явно поименованными или пронумерованными группами в форме (?&lt;name&gt;…).Это позволяет непоименованным круглым скобкам выступать в качестве незаписывающих групп без синтаксической неловкости выражения (?:…).</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase">
      <summary>Указывает соответствие, не учитывающее регистр.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace">
      <summary>Устраняет из шаблона неизбежные пробелы и включает комментарии, помеченные "#".Однако значение <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace" /> не влияет или не устраняет пробелы в классе символов</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Multiline">
      <summary>Многострочный режим.Изменяет значение символов "^" и "$" так, что они совпадают, соответственно, в начале и конце любой строки, а не только в начале и конце целой строки.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.None">
      <summary>Указывает на отсутствие заданных параметров.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.RightToLeft">
      <summary>Указывает, что поиск будет выполнен в направлении справа налево, а не слева направо.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Singleline">
      <summary>Указывает однострочный режим.Изменяет значение точки (.) так, что она соответствует любому символу (вместо любого символа, кроме "\n").</summary>
    </member>
    <member name="T:System.Threading.Barrier">
      <summary>Позволяет нескольким задачам параллельно работать с алгоритмом, используя несколько фаз.</summary>
    </member>
    <member name="M:System.Threading.Barrier.#ctor(System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Barrier" />.</summary>
      <param name="participantCount">Количество участвующих потоков.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="participantCount" /> меньше 0 или больше 32,767.</exception>
    </member>
    <member name="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Barrier" />.</summary>
      <param name="participantCount">Количество участвующих потоков.</param>
      <param name="postPhaseAction">
        <see cref="T:System.Action`1" />Для выполнения после каждого этапа. значение NULL (Nothing в Visual Basic) должны быть переданы указывают, что никакие действия не предпринимаются.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="participantCount" /> меньше 0 или больше 32,767.</exception>
    </member>
    <member name="M:System.Threading.Barrier.AddParticipant">
      <summary>Уведомляет <see cref="T:System.Threading.Barrier" /> о добавлении дополнительного участника.</summary>
      <returns>Номер фазы барьера, в которой сначала участвуют новые участники.</returns>
      <exception cref="T:System.ObjectDisposedException">Текущий экземпляр уже был удален.</exception>
      <exception cref="T:System.InvalidOperationException">Добавление участника приведет к превышению 32 767 счетчиком участников барьера.-или-Метод был вызван из действия после этапа.</exception>
    </member>
    <member name="M:System.Threading.Barrier.AddParticipants(System.Int32)">
      <summary>Уведомляет барьер <see cref="T:System.Threading.Barrier" /> о добавлении дополнительных участников.</summary>
      <returns>Номер фазы барьера, в которой сначала участвуют новые участники.</returns>
      <param name="participantCount">Число дополнительных участников, которых необходимо добавить в барьер.</param>
      <exception cref="T:System.ObjectDisposedException">Текущий экземпляр уже был удален.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="participantCount" /> меньше 0.-или-Добавление участников <paramref name="participantCount" /> приведет к превышению 32 767 счетчиком участников барьера.</exception>
      <exception cref="T:System.InvalidOperationException">Метод был вызван из действия после этапа.</exception>
    </member>
    <member name="P:System.Threading.Barrier.CurrentPhaseNumber">
      <summary>Получает номер текущей фазы барьера.</summary>
      <returns>Возвращает номер текущего этапа барьера.</returns>
    </member>
    <member name="M:System.Threading.Barrier.Dispose">
      <summary>Освобождает все ресурсы, используемые текущим экземпляром класса <see cref="T:System.Threading.Barrier" />.</summary>
      <exception cref="T:System.InvalidOperationException">Метод был вызван из действия после этапа.</exception>
    </member>
    <member name="M:System.Threading.Barrier.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые (а при необходимости и управляемые) ресурсы, используемые объектом <see cref="T:System.Threading.Barrier" />.</summary>
      <param name="disposing">Значение true, чтобы освободить управляемые и неуправляемые ресурсы; значение false, чтобы освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="P:System.Threading.Barrier.ParticipantCount">
      <summary>Получает общее количество участников в барьере.</summary>
      <returns>Возвращает общее количество участников в барьере.</returns>
    </member>
    <member name="P:System.Threading.Barrier.ParticipantsRemaining">
      <summary>Получает количество участников в барьере, которые еще не создали сигнал в текущей фазе.</summary>
      <returns>Возвращает количество участников в барьере, которые еще не создали сигнал на текущем этапе.</returns>
    </member>
    <member name="M:System.Threading.Barrier.RemoveParticipant">
      <summary>Уведомляет <see cref="T:System.Threading.Barrier" /> о удалении одного участника.</summary>
      <exception cref="T:System.ObjectDisposedException">Текущий экземпляр уже был удален.</exception>
      <exception cref="T:System.InvalidOperationException">Барьер уже содержит 0 участников.-или-Метод был вызван из действия после этапа.</exception>
    </member>
    <member name="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
      <summary>Уведомляет барьер <see cref="T:System.Threading.Barrier" /> об удалении нескольких участников.</summary>
      <param name="participantCount">Число дополнительных участников, которых необходимо удалить из барьера.</param>
      <exception cref="T:System.ObjectDisposedException">Текущий экземпляр уже был удален.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="participantCount" /> меньше 0.</exception>
      <exception cref="T:System.InvalidOperationException">Барьер уже содержит 0 участников.-или-Метод был вызван из действия после этапа. -или-текущее количество участников меньше указанного participantCount</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Общее число участников меньше указанного<paramref name=" participantCount" /></exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait">
      <summary>Сообщает, что участник достиг барьера <see cref="T:System.Threading.Barrier" /> и ожидает достижения барьера другими участниками.</summary>
      <exception cref="T:System.ObjectDisposedException">Текущий экземпляр уже был удален.</exception>
      <exception cref="T:System.InvalidOperationException">Метод был вызван из действия после этапа, барьер в настоящий момент имеет 0 участников или барьер получает сигналы от большего числа потоков, чем зарегистрировано участников.</exception>
      <exception cref="T:System.BarrierPostPhaseException">Если создается исключение из действия следующего этапа барьера после того, как все участвующие потоки вызвали SignalAndWait, исключение будет вставлено в BarrierPostPhaseException и создано для всех участвующих потоков.</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Int32)">
      <summary>Сообщает, что участник достиг барьера <see cref="T:System.Threading.Barrier" /> и ожидает достижения барьера всеми другими участниками, используя 32-разрядное знаковое целое число для измерения времени ожидания.</summary>
      <returns>если все участники достигли барьера за указанное время; в противном случае — значение false.</returns>
      <param name="millisecondsTimeout">Время ожидания в миллисекундах или <see cref="F:System.Threading.Timeout.Infinite" /> (-1) в случае неограниченного времени ожидания.</param>
      <exception cref="T:System.ObjectDisposedException">Текущий экземпляр уже был удален.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="millisecondsTimeout" /> является отрицательным числом, отличным от -1, которое представляет неограниченное время ожидания.</exception>
      <exception cref="T:System.InvalidOperationException">Метод был вызван из действия после этапа, барьер в настоящий момент имеет 0 участников или барьер получает сигналы от большего числа потоков, чем зарегистрировано участников.</exception>
      <exception cref="T:System.BarrierPostPhaseException">Если создается исключение из действия следующего этапа барьера после того, как все участвующие потоки вызвали SignalAndWait, исключение будет вставлено в BarrierPostPhaseException и создано для всех участвующих потоков.</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
      <summary>Сообщает, что участник достиг барьера и ожидает достижения барьера всеми другими участниками, используя 32-разрядное знаковое целое число для измерения времени ожидания. Кроме того, метод контролирует токен <see cref="T:System.Threading.CancellationToken" />.</summary>
      <returns>, если все участники достигли барьера за указанное время; в противном случае — значение false</returns>
      <param name="millisecondsTimeout">Время ожидания в миллисекундах или <see cref="F:System.Threading.Timeout.Infinite" /> (-1) в случае неограниченного времени ожидания.</param>
      <param name="cancellationToken">Токен отмены <see cref="T:System.Threading.CancellationToken" />, который следует контролировать.</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> был отменен.</exception>
      <exception cref="T:System.ObjectDisposedException">Текущий экземпляр уже был удален.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="millisecondsTimeout" /> является отрицательным числом, отличным от -1, которое представляет неограниченное время ожидания.</exception>
      <exception cref="T:System.InvalidOperationException">Метод был вызван из действия после этапа, барьер в настоящий момент имеет 0 участников или барьер получает сигналы от большего числа потоков, чем зарегистрировано участников.</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)">
      <summary>Сообщает, что участник достиг барьера <see cref="T:System.Threading.Barrier" /> и ожидает достижения барьера всеми другими участниками. Кроме того, метод контролирует токен <see cref="T:System.Threading.CancellationToken" />.</summary>
      <param name="cancellationToken">Токен отмены <see cref="T:System.Threading.CancellationToken" />, который следует контролировать.</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> был отменен.</exception>
      <exception cref="T:System.ObjectDisposedException">Текущий экземпляр уже был удален.</exception>
      <exception cref="T:System.InvalidOperationException">Метод был вызван из действия после этапа, барьер в настоящий момент имеет 0 участников или барьер получает сигналы от большего числа потоков, чем зарегистрировано участников.</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)">
      <summary>Сообщает, что участник достиг барьера <see cref="T:System.Threading.Barrier" /> и ожидает достижения барьера всеми другими участниками, используя значение <see cref="T:System.TimeSpan" /> для измерения интервала времени.</summary>
      <returns>Значение true, если все остальные участники достигли барьера; в противном случае — значение false.</returns>
      <param name="timeout">Структура <see cref="T:System.TimeSpan" />, указывающее время ожидания в миллисекундах, или структура <see cref="T:System.TimeSpan" />, отвечающая значению -1 миллисекунда, для неограниченного ожидания.</param>
      <exception cref="T:System.ObjectDisposedException">Текущий экземпляр уже был удален.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> является отрицательным числом, отличным от значения -1 миллисекунды, которое представляет неограниченное время ожидания, или превышает 32767.</exception>
      <exception cref="T:System.InvalidOperationException">Метод был вызван из действия после этапа, барьер в настоящий момент имеет 0 участников или барьер получает сигналы от большего числа потоков, чем зарегистрировано участников.</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>Сообщает, что участник достиг барьера <see cref="T:System.Threading.Barrier" /> и ожидает достижения барьера всеми другими участниками, используя значение <see cref="T:System.TimeSpan" /> для измерения интервала времени. Кроме того, метод контролирует токен <see cref="T:System.Threading.CancellationToken" />.</summary>
      <returns>Значение true, если все остальные участники достигли барьера; в противном случае — значение false.</returns>
      <param name="timeout">Структура <see cref="T:System.TimeSpan" />, указывающее время ожидания в миллисекундах, или структура <see cref="T:System.TimeSpan" />, отвечающая значению -1 миллисекунда, для неограниченного ожидания.</param>
      <param name="cancellationToken">Токен отмены <see cref="T:System.Threading.CancellationToken" />, который следует контролировать.</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> был отменен.</exception>
      <exception cref="T:System.ObjectDisposedException">Текущий экземпляр уже был удален.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="timeout" /> является отрицательным числом, отличным от -1, которое представляет неограниченное время ожидания.</exception>
      <exception cref="T:System.InvalidOperationException">Метод был вызван из действия после этапа, барьер в настоящий момент имеет 0 участников или барьер получает сигналы от большего числа потоков, чем зарегистрировано участников.</exception>
    </member>
    <member name="T:System.Threading.BarrierPostPhaseException">
      <summary>Исключение, которое возникает при сбое действия барьера <see cref="T:System.Threading.Barrier" />, выполняемого в конце фазы</summary>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.BarrierPostPhaseException" /> системным сообщением, содержащим описание ошибки.</summary>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.BarrierPostPhaseException" /> с указанным внутренним исключением.</summary>
      <param name="innerException">Исключение, послужившее причиной текущего исключения.</param>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.BarrierPostPhaseException" /> с заданным сообщение, содержащим описание ошибки.</summary>
      <param name="message">Сообщение с описанием исключения. Вызывающий оператор этого конструктора необходим, чтобы убедиться, локализована ли данная строка для текущего языка и региональных параметров системы.</param>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.BarrierPostPhaseException" /> указанным сообщением об ошибке и ссылкой на внутреннее исключение, которое стало причиной данного исключения.</summary>
      <param name="message">Сообщение с описанием исключения. Вызывающий оператор этого конструктора необходим, чтобы убедиться, локализована ли данная строка для текущего языка и региональных параметров системы. </param>
      <param name="innerException">Исключение, послужившее причиной текущего исключения. Если значение параметра <paramref name="innerException" /> не равно null, текущее исключение создается в блоке catch, обрабатывающем внутреннее исключение. </param>
    </member>
    <member name="T:System.Threading.Semaphore">
      <summary>Ограничивает число потоков, которые могут одновременно получать доступ к ресурсу или пулу ресурсов. </summary>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Semaphore" /> с заданием максимального количества одновременных входов и необязательным резервированием нескольких входов.</summary>
      <param name="initialCount">Начальное количество запросов для семафора, которое может быть обеспечено одновременно.</param>
      <param name="maximumCount">Максимальное количество запросов семафора, которое может быть обеспеченно одновременно.</param>
      <exception cref="T:System.ArgumentException">Значение индекса <paramref name="initialCount" /> больше значения <paramref name="maximumCount" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="maximumCount" /> меньше 1.-или-Значение параметра <paramref name="initialCount" /> меньше 0.</exception>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)">
      <summary>[КРИТИЧЕСКИЙ С ТОЧКИ ЗРЕНИЯ БЕЗОПАСНОСТИ] Инициализирует новый экземпляр класса <see cref="T:System.Threading.Semaphore" /> с заданием максимального количества одновременных входов, необязательным резервированием нескольких входов для вызывающего потока и необязательным заданием имени объекта системного семафора.</summary>
      <param name="initialCount">Начальное количество запросов для семафора, которое может быть обеспечено одновременно. </param>
      <param name="maximumCount">Максимальное количество запросов семафора, которое может быть обеспеченно одновременно.</param>
      <param name="name">Имя объекта именованного системного семафора.</param>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)">
      <summary>[КРИТИЧЕСКИЙ С ТОЧКИ ЗРЕНИЯ БЕЗОПАСНОСТИ] Инициализирует новый экземпляр класса <see cref="T:System.Threading.Semaphore" /> с заданием максимального количества одновременных входов, необязательным резервированием нескольких входов для вызывающего потока, необязательным заданием имени объекта системного семафора и заданием переменной, получающей значение, которое указывает на то, был ли создан новый системный семафор.</summary>
      <param name="initialCount">Начальное количество запросов семафора, которое может быть удовлетворено одновременно. </param>
      <param name="maximumCount">Максимальное количество запросов семафора, которое может быть удовлетворено одновременно.</param>
      <param name="name">Имя объекта именованного системного семафора.</param>
      <param name="createdNew">При возврате из метода содержит логическое значение true, если был создан локальный семафор (то есть, если параметр <paramref name="name" /> имеет значение null или содержит пустую строку) или был создан заданный именованный системный семафор; значение false, если указанный именованный семафор уже существовал. Этот параметр передается без инициализации.</param>
    </member>
    <member name="M:System.Threading.Semaphore.OpenExisting(System.String)">
      <summary>[КРИТИЧЕСКИЙ С ТОЧКИ ЗРЕНИЯ БЕЗОПАСНОСТИ] Открывает указанный именованный семафор, если он уже существует.</summary>
      <returns>Объект, представляющий именованный системный семафор.</returns>
      <param name="name">Имя системного семафора, чтобы открыть.</param>
    </member>
    <member name="M:System.Threading.Semaphore.Release">
      <summary>Выходит из семафора и возвращает последнее значение счетчика.</summary>
      <returns>Счетчик семафора перед вызовом метода <see cref="Overload:System.Threading.Semaphore.Release" />. </returns>
      <exception cref="T:System.Threading.SemaphoreFullException">Счетчик семафора уже имеет максимальное значение.</exception>
      <exception cref="T:System.IO.IOException">Произошла ошибка Win32, связанная с именованным семафором.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Текущий семафор представляет именованный системный семафор, но пользователь не имеет прав <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.-или-Текущий семафор представляет именованный системный семафор, но он не был открыт с правами доступа <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</exception>
    </member>
    <member name="M:System.Threading.Semaphore.Release(System.Int32)">
      <summary>Выходит из семафора указанное число раз и возвращает последнее значение счетчика.</summary>
      <returns>Счетчик семафора перед вызовом метода <see cref="Overload:System.Threading.Semaphore.Release" />. </returns>
      <param name="releaseCount">Количество требуемых выходов из семафора.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="releaseCount" /> меньше 1.</exception>
      <exception cref="T:System.Threading.SemaphoreFullException">Счетчик семафора уже имеет максимальное значение.</exception>
      <exception cref="T:System.IO.IOException">Произошла ошибка Win32, связанная с именованным семафором.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Текущий семафор представляет именованный системный семафор, но пользователь не имеет прав <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.-или-Текущий семафор представляет именованный системный семафор, но он не был открыт с правами <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</exception>
    </member>
    <member name="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Threading.Semaphore@)">
      <summary>[КРИТИЧЕСКИЙ С ТОЧКИ ЗРЕНИЯ БЕЗОПАСНОСТИ] Открывает указанный именованный семафор уже существует и возвращает значение, указывающее, успешно ли выполнена операция.</summary>
      <returns>Значение true, если именованный семафор был успешно открыт; в противном случае — значение false.</returns>
      <param name="name">Имя системного семафора, чтобы открыть.</param>
      <param name="result">После возврата из этого метода содержит объект <see cref="T:System.Threading.Semaphore" />, представляющий именованный семафор при удачном вызове, или значение null, если вызов завершился неудачей. Этот параметр интерпретируется как неинициализированным.</param>
    </member>
    <member name="T:System.Windows.Input.ICommand">
      <summary>Определяет контракт для выполнения команд.</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
      <summary>Определяет метод, который определяет, может ли данная команда выполняться в ее текущем состоянии.</summary>
      <returns>true, если команда может быть выполнена; в противном случае — значение false.</returns>
      <param name="parameter">Данные, используемые данной командой. Если для данной команды не требуется передача данных, можно присвоить этому объекту значение null. </param>
    </member>
    <member name="E:System.Windows.Input.ICommand.CanExecuteChanged">
      <summary>Происходит при изменениях, от которых зависит необходимость выполнения команды.</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.Execute(System.Object)">
      <summary>Определяет метод, вызываемый при вызове данной команды.</summary>
      <param name="parameter">Данные, используемые данной командой. Если для данной команды не требуется передача данных, можно присвоить этому объекту значение null. </param>
    </member>
  </members>
</doc>