<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System</name>
  </assembly>
  <members>
    <member name="T:System.FileStyleUriParser">
      <summary>Analyseur personnalisable basé sur le schéma File.</summary>
    </member>
    <member name="M:System.FileStyleUriParser.#ctor">
      <summary>Crée un analyseur personnalisable basé sur le schéma File.</summary>
    </member>
    <member name="T:System.FtpStyleUriParser">
      <summary>Analyseur personnalisable basé sur le schéma FTP.</summary>
    </member>
    <member name="M:System.FtpStyleUriParser.#ctor">
      <summary>Crée un analyseur personnalisable basé sur le schéma FTP.</summary>
    </member>
    <member name="T:System.GenericUriParser">
      <summary>Analyseur personnalisable pour un URI hiérarchique.</summary>
    </member>
    <member name="M:System.GenericUriParser.#ctor(System.GenericUriParserOptions)">
      <summary>Créer un analyseur personnalisable pour un URI hiérarchique.</summary>
      <param name="options">Spécifiez les options pour ce <see cref="T:System.GenericUriParser" />.</param>
    </member>
    <member name="T:System.GenericUriParserOptions">
      <summary>Spécifie les options de <see cref="T:System.UriParser" />.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.AllowEmptyAuthority">
      <summary>L'analyseur autorise un URI sans autorité.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.Default">
      <summary>L'analyseur :</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontCompressPath">
      <summary>L'analyseur ne rend pas l'URI canonique.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontConvertPathBackslashes">
      <summary>L'analyseur ne convertit pas les barres obliques inverses en barres obliques.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontUnescapePathDotsAndSlashes">
      <summary>L'analyseur n'annule pas l'échappement des points de chemin d'accès, barres obliques ou barres obliques inverses.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.GenericAuthority">
      <summary>L'analyseur autorise une autorité basée sur le Registre.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.Idn">
      <summary>L'analyseur prend en charge l'analyse d'IDN (Internationalized Domain Name, nom de domaine international) des noms d'hôte.L'utilisation de l'IDN est dictée par les valeurs de configuration.Pour plus d'informations, consultez la section Remarques.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.IriParsing">
      <summary>L'analyseur prend en charge les règles d'analyse spécifiées dans RFC 3987 pour les IRI (International Resource Identifiers).L'utilisation des IRI est dictée par les valeurs de configuration.Pour plus d'informations, consultez la section Remarques.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoFragment">
      <summary>Le schéma ne définit pas de partie de fragment.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoPort">
      <summary>Le schéma ne définit pas de port.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoQuery">
      <summary>Le schéma ne définit pas de partie de requête.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoUserInfo">
      <summary>Le schéma ne définit pas de partie d'informations utilisateur.</summary>
    </member>
    <member name="T:System.HttpStyleUriParser">
      <summary>Analyseur personnalisable basé sur le schéma HTTP.</summary>
    </member>
    <member name="M:System.HttpStyleUriParser.#ctor">
      <summary>Création d'un analyseur personnalisable basé sur le schéma HTTP.</summary>
    </member>
    <member name="T:System.Uri">
      <summary>Fournit une représentation objet d'un URI (Uniform Resource Identifier) et un accès simplifié aux parties de l'identificateur.</summary>
    </member>
    <member name="M:System.Uri.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Uri" /> avec le URI spécifié.</summary>
      <param name="uriString">URI. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> est null. </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="uriString" /> est vide.– ou – La forme du schéma spécifié dans <paramref name="uriString" /> n'est pas correcte. Consultez <see cref="M:System.Uri.CheckSchemeName(System.String)" />.– ou – <paramref name="uriString" /> contient trop de barres obliques.– ou – Le mot de passe spécifié dans <paramref name="uriString" /> n'est pas valide.– ou – Le nom de l'hôte spécifié dans <paramref name="uriString" /> n'est pas valide.– ou – Le nom du fichier spécifié dans <paramref name="uriString" /> n'est pas valide. – ou – Le nom de l'utilisateur spécifié dans <paramref name="uriString" /> n'est pas valide.– ou – Le nom de l'hôte ou de l'autorité spécifié dans <paramref name="uriString" /> ne peut pas se terminer par des barres obliques inverses.– ou – Le numéro de port spécifié dans <paramref name="uriString" /> n'est pas valide ou ne peut pas être analysé.– ou – La longueur de <paramref name="uriString" /> dépasse 65 519 caractères.– ou – La longueur du schéma spécifiée dans <paramref name="uriString" /> dépasse 1024 caractères.– ou – Il y a une séquence de caractères non valide dans <paramref name="uriString" />.– ou – Le chemin d'accès MS-DOS spécifié dans <paramref name="uriString" /> doit commencer par c:\\.</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String,System.UriKind)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Uri" /> avec le URI spécifié. Ce constructeur vous permet de spécifier si la chaîne d'URI est un URI relatif, un URI absolu ou si elle est indéterminée.</summary>
      <param name="uriString">Chaîne qui identifie la ressource à représenter par l'instance de <see cref="T:System.Uri" />.</param>
      <param name="uriKind">Spécifie si la chaîne d'URI est un URI relatif, un URI absolu ou si elle est indéterminée.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="uriKind" /> n'est pas valide (les valeurs possibles sont <see cref="F:System.UriKind.Absolute" />, <see cref="F:System.UriKind.Relative" /> ou <see cref="F:System.UriKind.RelativeOrAbsolute" />).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> est null. </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="uriString" /> contient un URI relatif et <paramref name="uriKind" /> est <see cref="F:System.UriKind.Absolute" />.ou<paramref name="uriString" /> contient un URI absolu et <paramref name="uriKind" /> est <see cref="F:System.UriKind.Relative" />.</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Uri" /> fondée sur l'URI de base et la chaîne URI relative spécifiés.</summary>
      <param name="baseUri">URI de base. </param>
      <param name="relativeUri">URI relatif à ajouter à l'identificateur de base. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> est null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> n'est pas une instance de <see cref="T:System.Uri" /> absolue.</exception>
      <exception cref="T:System.UriFormatException">L'URI formé en combinant <paramref name="baseUri" /> et <paramref name="relativeUri" /> est vide ou contient uniquement des espaces.– ou – Le schéma spécifié dans l'URI formé en combinant <paramref name="baseUri" /> et <paramref name="relativeUri" /> n'est pas valide.– ou – L'URI formé en combinant <paramref name="baseUri" /> et <paramref name="relativeUri" /> contient trop de barres obliques.– ou – Le mot de passe spécifié dans l'URI formé en combinant <paramref name="baseUri" /> et <paramref name="relativeUri" /> n'est pas valide.– ou – Le nom d'hôte spécifié dans l'URI formé en combinant <paramref name="baseUri" /> et <paramref name="relativeUri" /> n'est pas valide.– ou – Le nom de fichier spécifié dans l'URI formé en combinant <paramref name="baseUri" /> et <paramref name="relativeUri" /> n'est pas valide. – ou – Le nom d'utilisateur spécifié dans l'URI formé en combinant <paramref name="baseUri" /> et <paramref name="relativeUri" /> n'est pas valide.– ou – Le nom d'hôte ou d'autorité spécifié dans l'URI formé en combinant <paramref name="baseUri" /> et <paramref name="relativeUri" /> ne peut pas se terminer par des barres obliques inverses.– ou – Le numéro de port spécifié dans l'URI formé en combinant <paramref name="baseUri" /> et <paramref name="relativeUri" /> n'est pas valide ou ne peut pas être analysé.– ou – La longueur de l’URI formé en combinant <paramref name="baseUri" /> et <paramref name="relativeUri" /> dépasse 65 519 caractères.– ou – La longueur du schéma spécifié dans l'URI formé en combinant <paramref name="baseUri" /> et <paramref name="relativeUri" /> dépasse 1024 caractères.– ou – L'URI formé en combinant <paramref name="baseUri" /> et <paramref name="relativeUri" /> contient une séquence de caractères non valide.– ou – Le chemin d'accès MS-DOS spécifié dans <paramref name="uriString" /> doit commencer par c:\\.</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.Uri)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Uri" /> en s'appuyant sur la combinaison d'une instance de <see cref="T:System.Uri" /> de base et d'une instance de <see cref="T:System.Uri" /> relative spécifiées.</summary>
      <param name="baseUri">
        <see cref="T:System.Uri" /> absolu qui est la base de la nouvelle instance de <see cref="T:System.Uri" />. </param>
      <param name="relativeUri">Instance de <see cref="T:System.Uri" /> relative qui est combinée avec <paramref name="baseUri" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> est null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> n'est pas une instance de <see cref="T:System.Uri" /> absolue.</exception>
      <exception cref="T:System.UriFormatException">L'URI formé en combinant <paramref name="baseUri" /> et <paramref name="relativeUri" /> est vide ou contient uniquement des espaces.– ou – Le schéma spécifié dans l'URI formé en combinant <paramref name="baseUri" /> et <paramref name="relativeUri" /> n'est pas valide.– ou – L'URI formé en combinant <paramref name="baseUri" /> et <paramref name="relativeUri" /> contient trop de barres obliques.– ou – Le mot de passe spécifié dans l'URI formé en combinant <paramref name="baseUri" /> et <paramref name="relativeUri" /> n'est pas valide.– ou – Le nom d'hôte spécifié dans l'URI formé en combinant <paramref name="baseUri" /> et <paramref name="relativeUri" /> n'est pas valide.– ou – Le nom de fichier spécifié dans l'URI formé en combinant <paramref name="baseUri" /> et <paramref name="relativeUri" /> n'est pas valide. – ou – Le nom d'utilisateur spécifié dans l'URI formé en combinant <paramref name="baseUri" /> et <paramref name="relativeUri" /> n'est pas valide.– ou – Le nom d'hôte ou d'autorité spécifié dans l'URI formé en combinant <paramref name="baseUri" /> et <paramref name="relativeUri" /> ne peut pas se terminer par des barres obliques inverses.– ou – Le numéro de port spécifié dans l'URI formé en combinant <paramref name="baseUri" /> et <paramref name="relativeUri" /> n'est pas valide ou ne peut pas être analysé.– ou – La longueur de l’URI formé en combinant <paramref name="baseUri" /> et <paramref name="relativeUri" /> dépasse 65 519 caractères.– ou – La longueur du schéma spécifié dans l'URI formé en combinant <paramref name="baseUri" /> et <paramref name="relativeUri" /> dépasse 1024 caractères.– ou – L'URI formé en combinant <paramref name="baseUri" /> et <paramref name="relativeUri" /> contient une séquence de caractères non valide.– ou – Le chemin d'accès MS-DOS spécifié dans <paramref name="uriString" /> doit commencer par c:\\.</exception>
    </member>
    <member name="P:System.Uri.AbsolutePath">
      <summary>Obtient le chemin d'accès absolu de l'URI.</summary>
      <returns>
        <see cref="T:System.String" /> contenant le chemin d'accès absolu à la ressource.</returns>
      <exception cref="T:System.InvalidOperationException">Cette propriété est uniquement valide pour une instance de <see cref="T:System.Uri" /> absolue. </exception>
    </member>
    <member name="P:System.Uri.AbsoluteUri">
      <summary>Obtient l'URI absolu.</summary>
      <returns>
        <see cref="T:System.String" /> contenant l'URI complet.</returns>
      <exception cref="T:System.InvalidOperationException">Cette propriété est uniquement valide pour une instance de <see cref="T:System.Uri" /> absolue. </exception>
    </member>
    <member name="P:System.Uri.Authority">
      <summary>Obtient le nom de l'hôte DNS (Domain Name System) ou l'adresse IP et le numéro de port pour un serveur.</summary>
      <returns>
        <see cref="T:System.String" /> contenant le composant d'autorité de l'URI représenté par cette instance.</returns>
      <exception cref="T:System.InvalidOperationException">Cette instance représente un URI relatif, et cette propriété est uniquement valide pour les URI absolus. </exception>
    </member>
    <member name="M:System.Uri.CheckHostName(System.String)">
      <summary>Détermine si le nom d'hôte spécifié est un nom DNS valide.</summary>
      <returns>
        <see cref="T:System.UriHostNameType" /> qui indique le type du nom d'hôte. S'il est impossible de déterminer le nom d'hôte ou si ce dernier est null ou une chaîne de longueur zéro, cette méthode renvoie <see cref="F:System.UriHostNameType.Unknown" />.</returns>
      <param name="name">Nom d'hôte à valider. Il peut s'agir d'une adresse IPv4 ou IPv6 ou d'un nom d'hôte Internet. </param>
    </member>
    <member name="M:System.Uri.CheckSchemeName(System.String)">
      <summary>Détermine si le nom de schéma spécifié est valide.</summary>
      <returns>Valeur <see cref="T:System.Boolean" /> égale à true si le nom du schéma est valide, sinon false.</returns>
      <param name="schemeName">Nom de schéma à valider. </param>
    </member>
    <member name="M:System.Uri.Compare(System.Uri,System.Uri,System.UriComponents,System.UriFormat,System.StringComparison)">
      <summary>Compare les parties spécifiées de deux URI à l'aide des règles de comparaison spécifiées.</summary>
      <returns>Valeur <see cref="T:System.Int32" /> qui indique la relation lexicale entre les composants <see cref="T:System.Uri" /> comparés.ValeurSignificationInférieure à zéro<paramref name="uri1" /> est inférieur à <paramref name="uri2" />.Zéro<paramref name="uri1" /> est égale à <paramref name="uri2" />.Supérieure à zéro<paramref name="uri1" /> est supérieure à <paramref name="uri2" />.</returns>
      <param name="uri1">Premier <see cref="T:System.Uri" />.</param>
      <param name="uri2">Deuxième <see cref="T:System.Uri" />.</param>
      <param name="partsToCompare">Combinaison d'opérations de bits des valeurs <see cref="T:System.UriComponents" /> qui spécifie les parties de <paramref name="uri1" /> et <paramref name="uri2" /> à comparer.</param>
      <param name="compareFormat">L'une des valeurs <see cref="T:System.UriFormat" /> qui spécifient la séquence d'échappement de caractères utilisée lors de la comparaison des composants d'URI.</param>
      <param name="comparisonType">Une des valeurs de <see cref="T:System.StringComparison" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> n’est pas une valeur <see cref="T:System.StringComparison" /> valide.</exception>
    </member>
    <member name="P:System.Uri.DnsSafeHost">
      <summary>Obtient un nom d'hôte sans séquence d'échappement dont l'utilisation pour la résolution DNS est sécurisée.</summary>
      <returns>
        <see cref="T:System.String" /> qui contient la partie hôte sans séquence d'échappement de l'URI qui convient pour la résolution DNS ; ou chaîne hôte sans séquence d'échappement d'origine, si elle convient déjà pour la résolution.</returns>
      <exception cref="T:System.InvalidOperationException">Cette propriété est uniquement valide pour une instance de <see cref="T:System.Uri" /> absolue. </exception>
    </member>
    <member name="M:System.Uri.Equals(System.Object)">
      <summary>Compare l'égalité de deux instances de <see cref="T:System.Uri" />.</summary>
      <returns>Valeur <see cref="T:System.Boolean" /> égale à true si les deux instances représentent le même URI, sinon false.</returns>
      <param name="comparand">Instance de <see cref="T:System.Uri" /> ou URI à comparer à l'instance actuelle. </param>
    </member>
    <member name="M:System.Uri.EscapeDataString(System.String)">
      <summary>Convertit une chaîne en sa représentation avec séquence d'échappement.</summary>
      <returns>
        <see cref="T:System.String" /> qui contient la représentation avec séquence d'échappement de <paramref name="stringToEscape" />.</returns>
      <param name="stringToEscape">Chaîne à placer dans une séquence d'échappement.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> est null. </exception>
      <exception cref="T:System.UriFormatException">La longueur de <paramref name="stringToEscape" /> dépasse 32 766 caractères.</exception>
    </member>
    <member name="M:System.Uri.EscapeUriString(System.String)">
      <summary>Convertit une chaîne URI en sa représentation sans séquence d'échappement.</summary>
      <returns>
        <see cref="T:System.String" /> qui contient la représentation avec séquence d'échappement de <paramref name="stringToEscape" />.</returns>
      <param name="stringToEscape">Chaîne à placer dans une séquence d'échappement.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> est null. </exception>
      <exception cref="T:System.UriFormatException">La longueur de <paramref name="stringToEscape" /> dépasse 32 766 caractères.</exception>
    </member>
    <member name="P:System.Uri.Fragment">
      <summary>Obtient le fragment URI avec séquence d'échappement.</summary>
      <returns>
        <see cref="T:System.String" /> qui contient toute information relative au fragment URI.</returns>
      <exception cref="T:System.InvalidOperationException">Cette propriété est uniquement valide pour une instance de <see cref="T:System.Uri" /> absolue. </exception>
    </member>
    <member name="M:System.Uri.FromHex(System.Char)">
      <summary>Obtient la valeur décimale d'un chiffre hexadécimal.</summary>
      <returns>Valeur <see cref="T:System.Int32" /> qui contient un nombre de 0 à 15 qui correspond au chiffre hexadécimal spécifié.</returns>
      <param name="digit">Chiffre hexadécimal (0-9, a-f, A-F) à convertir. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="digit" /> n'est pas un chiffre hexadécimal valide (0-9, a-f, A-F). </exception>
    </member>
    <member name="M:System.Uri.GetComponents(System.UriComponents,System.UriFormat)">
      <summary>Obtient les composants spécifiés de l'instance actuelle à l'aide de la séquence d'échappement spécifiée pour les caractères spéciaux.</summary>
      <returns>
        <see cref="T:System.String" /> qui contient les composants.</returns>
      <param name="components">Combinaison d'opérations de bits des valeurs <see cref="T:System.UriComponents" /> qui spécifie quelles parties de l'instance actuelle retourner à l'appelant.</param>
      <param name="format">L'une des valeurs <see cref="T:System.UriFormat" /> qui contrôlent la façon dont les caractères spéciaux sont placés dans une séquence d'échappement. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="uriComponents" /> n’est pas une combinaison de valeurs <see cref="T:System.UriComponents" /> valides.</exception>
      <exception cref="T:System.InvalidOperationException">Cette méthode est uniquement valide pour une instance de <see cref="T:System.Uri" /> absolue.</exception>
    </member>
    <member name="M:System.Uri.GetHashCode">
      <summary>Obtient le code de hachage pour l'URI.</summary>
      <returns>
        <see cref="T:System.Int32" /> comportant la valeur de hachage générée pour cet URI.</returns>
    </member>
    <member name="P:System.Uri.Host">
      <summary>Obtient le composant hôte de cette instance.</summary>
      <returns>
        <see cref="T:System.String" /> qui contient le nom d'hôte. Il s'agit généralement du nom de l'hôte DNS ou de l'adresse IP du serveur.</returns>
      <exception cref="T:System.InvalidOperationException">Cette propriété est uniquement valide pour une instance de <see cref="T:System.Uri" /> absolue. </exception>
    </member>
    <member name="P:System.Uri.HostNameType">
      <summary>Obtient le type du nom d'hôte spécifié dans l'URI.</summary>
      <returns>Membre de l'énumération <see cref="T:System.UriHostNameType" />.</returns>
      <exception cref="T:System.InvalidOperationException">Cette instance représente un URI relatif, et cette propriété est uniquement valide pour les URI absolus. </exception>
    </member>
    <member name="P:System.Uri.IsAbsoluteUri">
      <summary>Obtient une valeur indiquant si l'instance <see cref="T:System.Uri" /> est absolue.</summary>
      <returns>Valeur <see cref="T:System.Boolean" /> égale à true si l'instance <see cref="T:System.Uri" /> est absolue, sinon false.</returns>
    </member>
    <member name="M:System.Uri.IsBaseOf(System.Uri)">
      <summary>Détermine si l'instance de <see cref="T:System.Uri" /> actuelle est une base de l'instance de <see cref="T:System.Uri" /> spécifiée.</summary>
      <returns>true si l'instance actuelle de <see cref="T:System.Uri" /> est une base de <paramref name="uri" />, sinon false.</returns>
      <param name="uri">Instance de <see cref="T:System.Uri" /> spécifiée à tester. </param>
    </member>
    <member name="P:System.Uri.IsDefaultPort">
      <summary>Obtient une valeur indiquant si la valeur du port de l'URI est la valeur par défaut pour ce schéma.</summary>
      <returns>Valeur <see cref="T:System.Boolean" /> égale à true si la valeur de la propriété <see cref="P:System.Uri.Port" /> est le port par défaut de ce schéma ; sinon, false.</returns>
      <exception cref="T:System.InvalidOperationException">Cette instance représente un URI relatif, et cette propriété est uniquement valide pour les URI absolus. </exception>
    </member>
    <member name="P:System.Uri.IsFile">
      <summary>Obtient une valeur indiquant si le <see cref="T:System.Uri" /> spécifié est un URI de fichier.</summary>
      <returns>Valeur <see cref="T:System.Boolean" /> qui est true si <see cref="T:System.Uri" /> est un URI de fichier, sinon false.</returns>
      <exception cref="T:System.InvalidOperationException">Cette instance représente un URI relatif, et cette propriété est uniquement valide pour les URI absolus. </exception>
    </member>
    <member name="M:System.Uri.IsHexDigit(System.Char)">
      <summary>Détermine si un caractère spécifié est un chiffre hexadécimal valide.</summary>
      <returns>Valeur <see cref="T:System.Boolean" /> égale à true si le caractère est un chiffre hexadécimal valide, sinon false.</returns>
      <param name="character">Caractère à valider. </param>
    </member>
    <member name="P:System.Uri.IsLoopback">
      <summary>Obtient une valeur indiquant si le <see cref="T:System.Uri" /> spécifié référence l'hôte local.</summary>
      <returns>Valeur <see cref="T:System.Boolean" /> qui est true si ce <see cref="T:System.Uri" /> référence l'hôte local, sinon false.</returns>
      <exception cref="T:System.InvalidOperationException">Cette instance représente un URI relatif, et cette propriété est uniquement valide pour les URI absolus. </exception>
    </member>
    <member name="P:System.Uri.IsUnc">
      <summary>Obtient une valeur indiquant si le <see cref="T:System.Uri" /> spécifié est un chemin d'accès UNC (Universal Naming Convention).</summary>
      <returns>Valeur <see cref="T:System.Boolean" /> qui est true si <see cref="T:System.Uri" /> est un chemin d'accès UNC, sinon false.</returns>
      <exception cref="T:System.InvalidOperationException">Cette propriété est uniquement valide pour une instance de <see cref="T:System.Uri" /> absolue. </exception>
    </member>
    <member name="M:System.Uri.IsWellFormedOriginalString">
      <summary>Indique si la chaîne utilisée pour construire ce <see cref="T:System.Uri" /> était bien formée et qu'elle ne doit pas également faire l'objet d'une séquence d'échappement.</summary>
      <returns>Valeur <see cref="T:System.Boolean" /> qui est true si la chaîne est de forme correcte, sinon false.</returns>
    </member>
    <member name="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)">
      <summary>Indique si la chaîne est bien formée en essayant de construire un <see cref="T:System.Uri" /> avec la chaîne et garantit que la chaîne ne doit pas également faire l'objet d'une séquence d'échappement.</summary>
      <returns>Valeur <see cref="T:System.Boolean" /> qui est true si la chaîne a été formée correctement, conformément à la RFC 3986, sinon false.</returns>
      <param name="uriString">
        <see cref="T:System.Uri" /> représenté sous la forme d'une chaîne.</param>
      <param name="uriKind">Type de l'URI dans le paramètre <paramref name="uriString" />.</param>
    </member>
    <member name="P:System.Uri.LocalPath">
      <summary>Obtient une représentation du système d'exploitation local d'un nom de fichier.</summary>
      <returns>
        <see cref="T:System.String" /> qui contient la représentation du système d'exploitation local d'un nom de fichier.</returns>
      <exception cref="T:System.InvalidOperationException">Cette propriété est uniquement valide pour une instance de <see cref="T:System.Uri" /> absolue. </exception>
    </member>
    <member name="M:System.Uri.MakeRelativeUri(System.Uri)">
      <summary>Détermine la différence entre deux instances de <see cref="T:System.Uri" />.</summary>
      <returns>Si le nom d'hôte et le schéma de cette instance d'URI et <paramref name="toUri" /> sont identiques, cette méthode retourne un <see cref="T:System.Uri" /> relatif qui, lorsqu'il est ajouté à l'instance d'URI actuelle, donne <paramref name="toUri" />.Si le nom d'hôte ou le schéma est différent, cette méthode retourne un <see cref="T:System.Uri" /> qui représente le paramètre <paramref name="toUri" />.</returns>
      <param name="uri">URI à comparer à l'identificateur en cours.</param>
      <exception cref="T:System.InvalidOperationException">Cette instance représente un URI relatif, et cette propriété est uniquement valide pour les URI absolus. </exception>
    </member>
    <member name="M:System.Uri.op_Equality(System.Uri,System.Uri)">
      <summary>Détermine si deux instances de <see cref="T:System.Uri" /> ont la même valeur.</summary>
      <returns>Valeur <see cref="T:System.Boolean" /> qui est true si les instances <see cref="T:System.Uri" /> sont équivalentes, sinon false.</returns>
      <param name="uri1">Instance de <see cref="T:System.Uri" /> à comparer à <paramref name="uri2" />. </param>
      <param name="uri2">Instance de <see cref="T:System.Uri" /> à comparer à <paramref name="uri1" />. </param>
    </member>
    <member name="M:System.Uri.op_Inequality(System.Uri,System.Uri)">
      <summary>Détermine si deux instances de <see cref="T:System.Uri" /> n'ont pas la même valeur.</summary>
      <returns>Valeur <see cref="T:System.Boolean" /> qui est true si les instances <see cref="T:System.Uri" /> ne sont pas égales, sinon false. Si l'un des deux paramètres est null, cette méthode renvoie true.</returns>
      <param name="uri1">Instance de <see cref="T:System.Uri" /> à comparer à <paramref name="uri2" />. </param>
      <param name="uri2">Instance de <see cref="T:System.Uri" /> à comparer à <paramref name="uri1" />. </param>
    </member>
    <member name="P:System.Uri.OriginalString">
      <summary>Obtient la chaîne d'URI d'origine passée au constructeur <see cref="T:System.Uri" />.</summary>
      <returns>
        <see cref="T:System.String" /> contenant l'URI exact spécifié lors de la construction de cette instance ; sinon, <see cref="F:System.String.Empty" />.</returns>
      <exception cref="T:System.InvalidOperationException">Cette instance représente un URI relatif, et cette propriété est uniquement valide pour les URI absolus. </exception>
    </member>
    <member name="P:System.Uri.PathAndQuery">
      <summary>Obtient les propriétés <see cref="P:System.Uri.AbsolutePath" /> et <see cref="P:System.Uri.Query" /> séparées par un point d'interrogation (?).</summary>
      <returns>
        <see cref="T:System.String" /> qui contient les propriétés <see cref="P:System.Uri.AbsolutePath" /> et <see cref="P:System.Uri.Query" /> séparées par un point d'interrogation (?).</returns>
      <exception cref="T:System.InvalidOperationException">Cette instance représente un URI relatif, et cette propriété est uniquement valide pour les URI absolus. </exception>
    </member>
    <member name="P:System.Uri.Port">
      <summary>Obtient le numéro de port de l'URI spécifié.</summary>
      <returns>Valeur <see cref="T:System.Int32" /> qui contient le numéro de port pour cet URI.</returns>
      <exception cref="T:System.InvalidOperationException">Cette propriété est uniquement valide pour une instance de <see cref="T:System.Uri" /> absolue. </exception>
    </member>
    <member name="P:System.Uri.Query">
      <summary>Obtient les informations de requête incluses dans l'URI spécifié.</summary>
      <returns>
        <see cref="T:System.String" /> qui contient les informations de requête incluses dans l'URI spécifié.</returns>
      <exception cref="T:System.InvalidOperationException">Cette propriété est uniquement valide pour une instance de <see cref="T:System.Uri" /> absolue. </exception>
    </member>
    <member name="P:System.Uri.Scheme">
      <summary>Obtient le nom de schéma de cet URI.</summary>
      <returns>
        <see cref="T:System.String" /> qui contient le schéma pour cet URI, converti en minuscules.</returns>
      <exception cref="T:System.InvalidOperationException">Cette propriété est uniquement valide pour une instance de <see cref="T:System.Uri" /> absolue. </exception>
    </member>
    <member name="F:System.Uri.SchemeDelimiter">
      <summary>Spécifie les caractères qui séparent le schéma du protocole de communication de la partie adresse de l'URI. Ce champ est en lecture seule.</summary>
    </member>
    <member name="P:System.Uri.Segments">
      <summary>Obtient un tableau contenant des segments de chemin d'accès qui composent l'URI spécifié.</summary>
      <returns>Tableau <see cref="T:System.String" /> qui contient les segments de chemin d'accès qui composent l'URI spécifié.</returns>
      <exception cref="T:System.InvalidOperationException">Cette instance représente un URI relatif, et cette propriété est uniquement valide pour les URI absolus. </exception>
    </member>
    <member name="M:System.Uri.ToString">
      <summary>Obtient une représentation canonique sous forme de chaîne de l'instance de <see cref="T:System.Uri" /> spécifiée.</summary>
      <returns>Instance de <see cref="T:System.String" /> qui contient la représentation réglementaire sans séquence d'échappement de l'instance de <see cref="T:System.Uri" />. Tous les caractères sont sans séquence d'échappement, hormis #, ? et %.</returns>
    </member>
    <member name="M:System.Uri.TryCreate(System.String,System.UriKind,System.Uri@)">
      <summary>Crée <see cref="T:System.Uri" /> à l'aide de l'instance de <see cref="T:System.String" /> spécifiée et de <see cref="T:System.UriKind" />.</summary>
      <returns>Valeur <see cref="T:System.Boolean" /> qui est true si le <see cref="T:System.Uri" /> a été créé avec succès, sinon false.</returns>
      <param name="uriString">
        <see cref="T:System.String" /> représentant <see cref="T:System.Uri" />.</param>
      <param name="uriKind">Type d'URI.</param>
      <param name="result">Cette méthode retourne le <see cref="T:System.Uri" /> construit.</param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.String,System.Uri@)">
      <summary>Crée un <see cref="T:System.Uri" /> à l'aide des instances de <see cref="T:System.String" /> de base et relatives.</summary>
      <returns>Valeur <see cref="T:System.Boolean" /> qui est true si le <see cref="T:System.Uri" /> a été créé avec succès, sinon false.</returns>
      <param name="baseUri">
        <see cref="T:System.Uri" /> de base.</param>
      <param name="relativeUri"> relatif, représenté sous la forme de <see cref="T:System.Uri" /> à ajouter au <see cref="T:System.String" /> de base.<see cref="T:System.Uri" />.</param>
      <param name="result">Cette méthode retourne un <see cref="T:System.Uri" /> construit à partir de <paramref name="baseUri" /> et de <paramref name="relativeUri" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.Uri,System.Uri@)">
      <summary>Crée un <see cref="T:System.Uri" /> à l'aide des instances de <see cref="T:System.Uri" /> de base et relatives.</summary>
      <returns>Valeur <see cref="T:System.Boolean" /> qui est true si le <see cref="T:System.Uri" /> a été créé avec succès, sinon false.</returns>
      <param name="baseUri">
        <see cref="T:System.Uri" /> de base. </param>
      <param name="relativeUri">
        <see cref="T:System.Uri" /> relatif à ajouter à <see cref="T:System.Uri" /> de base. </param>
      <param name="result">Cette méthode retourne un <see cref="T:System.Uri" /> construit à partir de <paramref name="baseUri" /> et de <paramref name="relativeUri" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Uri.UnescapeDataString(System.String)">
      <summary>Convertit une chaîne en sa représentation sans séquence d'échappement.</summary>
      <returns>
        <see cref="T:System.String" /> qui contient la représentation sans séquence d'échappement de <paramref name="stringToUnescape" />. </returns>
      <param name="stringToUnescape">Chaîne à placer hors d'une séquence d'échappement.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToUnescape" /> est null. </exception>
    </member>
    <member name="F:System.Uri.UriSchemeFile">
      <summary>Spécifie que l'URI est un pointeur vers un fichier. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeFtp">
      <summary>Spécifie que l'URI est accessible par l'intermédiaire du protocole FTP (File Transfer Protocol). Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeGopher">
      <summary>Spécifie que l'URI est accessible par l'intermédiaire du protocole Gopher. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeHttp">
      <summary>Spécifie que l'URI est accessible par l'intermédiaire du protocole HTTP (Hypertext Transfer Protocol). Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeHttps">
      <summary>Spécifie que l'URI est accessible par l'intermédiaire du protocole HTTPS (Secure Hypertext Transfer Protocol). Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeMailto">
      <summary>Spécifie que l'URI est une adresse de messagerie accessible par l'intermédiaire du protocole SMTP (Simple Mail Transport Protocol). Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNetPipe">
      <summary>Spécifie que l'URI est accessible via le schéma NetPipe du système « Indigo ». Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNetTcp">
      <summary>Spécifie que l'URI est accessible via le schéma NetTcp du système « Indigo ». Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNews">
      <summary>Spécifie que l'URI est un groupe de discussion Internet accessible par le protocole NNTP (Network News Transport Protocol). Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNntp">
      <summary>Spécifie que l'URI est un groupe de discussion Internet accessible par le protocole NNTP (Network News Transport Protocol). Ce champ est en lecture seule.</summary>
    </member>
    <member name="P:System.Uri.UserEscaped">
      <summary>Indique que la chaîne de l'URI a été placée intégralement dans une séquence d'échappement avant la création de l'instance de <see cref="T:System.Uri" />.</summary>
      <returns>Valeur <see cref="T:System.Boolean" /> qui est true si le paramètre <paramref name="dontEscape" /> a été défini sur true lors de la création de l'instance <see cref="T:System.Uri" />, sinon false.</returns>
    </member>
    <member name="P:System.Uri.UserInfo">
      <summary>Obtient le nom d'utilisateur, le mot de passe et d'autres informations spécifiques à l'utilisateur associés à l'URI spécifié.</summary>
      <returns>
        <see cref="T:System.String" /> qui contient les informations de l'utilisateur associées à l'URI. La valeur retournée ne comprend pas le caractère « @ » réservé pour délimiter la partie informations utilisateur de l'URI.</returns>
      <exception cref="T:System.InvalidOperationException">Cette propriété est uniquement valide pour une instance de <see cref="T:System.Uri" /> absolue. </exception>
    </member>
    <member name="T:System.UriBuilder">
      <summary>Fournit un constructeur personnalisé pour les URI (uniform resource identifier) et les modifie pour la classe <see cref="T:System.Uri" />.</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.UriBuilder" />.</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.UriBuilder" /> avec le URI spécifié.</summary>
      <param name="uri">Chaîne d'identificateur URI. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> est null. </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="uri" /> est une chaîne de longueur zéro ou contient uniquement des espaces.– ou – La routine d'analyse a détecté un schéma dont le format n'est pas valide.– ou – L'analyseur a détecté plus de deux barres obliques consécutives dans un identificateur URI n'utilisant pas le schéma « file ».– ou – <paramref name="uri" /> n’est pas un identificateur URI valide. </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.UriBuilder" /> avec le schéma et l'hôte spécifiés.</summary>
      <param name="schemeName">Protocole d'accès à Internet. </param>
      <param name="hostName">Nom de domaine de type DNS ou adresse IP. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="schemeName" /> n'est pas un nom de modèle autorisé.</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.UriBuilder" /> avec le schéma, l'hôte et le port spécifiés.</summary>
      <param name="scheme">Protocole d'accès à Internet. </param>
      <param name="host">Nom de domaine de type DNS ou adresse IP. </param>
      <param name="portNumber">Numéro de port IP pour le service. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="scheme" /> n'est pas un nom de modèle autorisé. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="portNumber" /> est inférieur à 0 ou supérieur à 65 535. </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.UriBuilder" /> avec le schéma, l'hôte, le numéro de port et le chemin d'accès spécifiés.</summary>
      <param name="scheme">Protocole d'accès à Internet. </param>
      <param name="host">Nom de domaine de type DNS ou adresse IP. </param>
      <param name="port">Numéro de port IP pour le service. </param>
      <param name="pathValue">Chemin d'accès à la ressource Internet. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="scheme" /> n'est pas un nom de modèle autorisé. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> est inférieur à 0 ou supérieur à 65 535. </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.UriBuilder" /> avec le schéma, l'hôte, le numéro de port, le chemin d'accès et la chaîne de requête spécifiés.</summary>
      <param name="scheme">Protocole d'accès à Internet. </param>
      <param name="host">Nom de domaine de type DNS ou adresse IP. </param>
      <param name="port">Numéro de port IP pour le service. </param>
      <param name="path">Chemin d'accès à la ressource Internet. </param>
      <param name="extraValue">Chaîne de requête ou identificateur de fragment. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="extraValue" /> n’est ni null, ni <see cref="F:System.String.Empty" />. Un identificateur de fragment valide ne commence pas par un symbole dièse (#), une chaîne de requête valide ne commence pas par un point d’interrogation (?).– ou – <paramref name="scheme" /> n'est pas un nom de modèle valide. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> est inférieur à 0 ou supérieur à 65 535. </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.Uri)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.UriBuilder" /> avec l'instance de <see cref="T:System.Uri" /> spécifiée.</summary>
      <param name="uri">Instance de la classe <see cref="T:System.Uri" />. </param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="uri" /> est null. </exception>
    </member>
    <member name="M:System.UriBuilder.Equals(System.Object)">
      <summary>Compare l'égalité d'une instance <see cref="T:System.Uri" /> existante au contenu de <see cref="T:System.UriBuilder" />.</summary>
      <returns>La valeur est true si <paramref name="rparam" /> représente la même <see cref="T:System.Uri" /> que la <see cref="T:System.Uri" /> construite par cette instance de <see cref="T:System.UriBuilder" />, sinon false.</returns>
      <param name="rparam">Objet à comparer avec l'instance en cours. </param>
    </member>
    <member name="P:System.UriBuilder.Fragment">
      <summary>Obtient ou définit la partie fragment de l'identificateur URI.</summary>
      <returns>Partie fragment de l'identificateur URI. L'identificateur du fragment (« # ») est ajouté au début du fragment.</returns>
    </member>
    <member name="M:System.UriBuilder.GetHashCode">
      <summary>Retourne le code de hachage pour l'identificateur URI.</summary>
      <returns>Code de hachage généré pour l'identificateur URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Host">
      <summary>Obtient ou définit le nom de l'hôte DNS (Domain Name System) ou l'adresse IP d'un serveur.</summary>
      <returns>Nom de l'hôte DNS ou adresse IP du serveur.</returns>
    </member>
    <member name="P:System.UriBuilder.Password">
      <summary>Obtient ou définit le mot de passe associé à l'utilisateur qui accède à l'URI.</summary>
      <returns>Mot de passe de l'utilisateur qui accède à l'URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Path">
      <summary>Obtient ou définit le chemin d'accès à la ressource référencée par l'identificateur URI.</summary>
      <returns>Chemin d'accès à la ressource référencée par l'identificateur URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Port">
      <summary>Obtient ou définit le numéro de port de l'identificateur URI.</summary>
      <returns>Numéro de port de l'identificateur URI.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le numéro de port ne peut pas être défini sur moins de 0 ou plus de 65 535. </exception>
    </member>
    <member name="P:System.UriBuilder.Query">
      <summary>Obtient ou définit les informations de requête incluses dans l'identificateur URI.</summary>
      <returns>Informations de requête incluses dans l'identificateur URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Scheme">
      <summary>Obtient ou définit le nom de schéma de l'identificateur URI.</summary>
      <returns>Schéma de l'identificateur URI.</returns>
      <exception cref="T:System.ArgumentException">Le nom du modèle peut uniquement être défini sur un nom de modèle autorisé. </exception>
    </member>
    <member name="M:System.UriBuilder.ToString">
      <summary>Retourne la chaîne d'affichage de l'instance de <see cref="T:System.UriBuilder" /> spécifiée.</summary>
      <returns>Chaîne qui contient la chaîne d'affichage ne faisant pas l'objet d'une séquence d'échappement de <see cref="T:System.UriBuilder" />.</returns>
      <exception cref="T:System.UriFormatException">L'URI construit par les propriétés <see cref="T:System.UriBuilder" /> possède un nom d'utilisateur et un mot de passe incorrects (la propriété <see cref="P:System.UriBuilder.UserName" /> est nulle ou vide, mais la propriété <see cref="P:System.UriBuilder.Password" /> n'est pas vide). </exception>
    </member>
    <member name="P:System.UriBuilder.Uri">
      <summary>Obtient l'instance de <see cref="T:System.Uri" /> construite par l'instance de <see cref="T:System.UriBuilder" /> spécifiée.</summary>
      <returns>
        <see cref="T:System.Uri" /> qui contient l'URI construit par <see cref="T:System.UriBuilder" />.</returns>
      <exception cref="T:System.UriFormatException">L'identificateur URI construit par les propriétés <see cref="T:System.UriBuilder" /> n'est pas valide. </exception>
    </member>
    <member name="P:System.UriBuilder.UserName">
      <summary>Nom d'utilisateur associé à l'utilisateur qui accède à l'URI.</summary>
      <returns>Nom de l'utilisateur qui accède à l'URI.</returns>
    </member>
    <member name="T:System.UriComponents">
      <summary>Spécifie les parties de <see cref="T:System.Uri" />.</summary>
    </member>
    <member name="F:System.UriComponents.AbsoluteUri">
      <summary>Données <see cref="P:System.Uri.Scheme" />, <see cref="P:System.Uri.UserInfo" />, <see cref="P:System.Uri.Host" />, <see cref="P:System.Uri.Port" />, <see cref="P:System.Uri.LocalPath" /><see cref="P:System.Uri.Query" /> et <see cref="P:System.Uri.Fragment" />.</summary>
    </member>
    <member name="F:System.UriComponents.Fragment">
      <summary>Données <see cref="P:System.Uri.Fragment" />.</summary>
    </member>
    <member name="F:System.UriComponents.Host">
      <summary>Données <see cref="P:System.Uri.Host" />.</summary>
    </member>
    <member name="F:System.UriComponents.HostAndPort">
      <summary>Données <see cref="P:System.Uri.Host" /> et <see cref="P:System.Uri.Port" />. Si aucune donnée de port ne se trouve dans l'URI et qu'un port par défaut a été assigné à <see cref="P:System.Uri.Scheme" />, le port par défaut est retourné. S'il n'existe aucun port par défaut, - 1 est retourné.</summary>
    </member>
    <member name="F:System.UriComponents.HttpRequestUrl">
      <summary>Données <see cref="P:System.Uri.Scheme" />, <see cref="P:System.Uri.Host" />, <see cref="P:System.Uri.Port" /><see cref="P:System.Uri.LocalPath" /> et <see cref="P:System.Uri.Query" />.</summary>
    </member>
    <member name="F:System.UriComponents.KeepDelimiter">
      <summary>Spécifie que le séparateur doit être inclus.</summary>
    </member>
    <member name="F:System.UriComponents.NormalizedHost">
      <summary>Forme normalisée du <see cref="P:System.Uri.Host" />.</summary>
    </member>
    <member name="F:System.UriComponents.Path">
      <summary>Données <see cref="P:System.Uri.LocalPath" />.</summary>
    </member>
    <member name="F:System.UriComponents.PathAndQuery">
      <summary>Données <see cref="P:System.Uri.LocalPath" /> et <see cref="P:System.Uri.Query" />. </summary>
    </member>
    <member name="F:System.UriComponents.Port">
      <summary>Données <see cref="P:System.Uri.Port" />.</summary>
    </member>
    <member name="F:System.UriComponents.Query">
      <summary>Données <see cref="P:System.Uri.Query" />.</summary>
    </member>
    <member name="F:System.UriComponents.Scheme">
      <summary>Données <see cref="P:System.Uri.Scheme" />.</summary>
    </member>
    <member name="F:System.UriComponents.SchemeAndServer">
      <summary>Données <see cref="P:System.Uri.Scheme" />, <see cref="P:System.Uri.Host" /> et <see cref="P:System.Uri.Port" />.</summary>
    </member>
    <member name="F:System.UriComponents.SerializationInfoString">
      <summary>Contexte <see cref="T:System.Uri" /> complet requis pour les sérialiseurs Uri. Le contexte inclut la portée IPv6.</summary>
    </member>
    <member name="F:System.UriComponents.StrongAuthority">
      <summary>Données <see cref="P:System.Uri.UserInfo" />, <see cref="P:System.Uri.Host" /> et <see cref="P:System.Uri.Port" />. Si aucune donnée de port ne se trouve dans <see cref="T:System.Uri" /> et qu'un port par défaut a été assigné à <see cref="P:System.Uri.Scheme" />, le port par défaut est retourné. S'il n'existe aucun port par défaut, - 1 est retourné.</summary>
    </member>
    <member name="F:System.UriComponents.StrongPort">
      <summary>Données <see cref="P:System.Uri.Port" />. Si aucune donnée de port ne se trouve dans <see cref="T:System.Uri" /> et qu'un port par défaut a été assigné à <see cref="P:System.Uri.Scheme" />, le port par défaut est retourné. S'il n'existe aucun port par défaut, - 1 est retourné.</summary>
    </member>
    <member name="F:System.UriComponents.UserInfo">
      <summary>Données <see cref="P:System.Uri.UserInfo" />.</summary>
    </member>
    <member name="T:System.UriFormat">
      <summary>Contrôle la façon dont les informations d'URI sont placées dans une séquence d'échappement.</summary>
    </member>
    <member name="F:System.UriFormat.SafeUnescaped">
      <summary>Les caractères qui ont une signification réservée dans les composants URI demandés restent dans la séquence d'échappement. Tous les autres ne sont pas placés dans une séquence d'échappement. Consultez la section Notes.</summary>
    </member>
    <member name="F:System.UriFormat.Unescaped">
      <summary>Aucune séquence d'échappement n'est effectuée.</summary>
    </member>
    <member name="F:System.UriFormat.UriEscaped">
      <summary>La séquence d'échappement est effectuée d'après les règles de la RFC 3986.</summary>
    </member>
    <member name="T:System.UriFormatException">
      <summary>Exception levée lorsqu'un identificateur URI (Uniform Resource Identifier) non valide est détecté.</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.UriFormatException" />.</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.UriFormatException" /> avec le message spécifié.</summary>
      <param name="textString">Chaîne du message d'erreur. </param>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.UriFormatException" /> avec le message spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="textString">Chaîne du message d'erreur.</param>
      <param name="e">Exception qui est la cause de l'exception actuelle. Si le paramètre <paramref name="e" /> n'est pas une référence null (Nothing en Visual Basic), l'exception en cours est levée dans un bloc catch qui gère l'exception interne. </param>
    </member>
    <member name="T:System.UriHostNameType">
      <summary>Définit les types de noms d'hôtes pour la méthode <see cref="M:System.Uri.CheckHostName(System.String)" />.</summary>
    </member>
    <member name="F:System.UriHostNameType.Basic">
      <summary>L'hôte est défini, mais le type ne peut pas être déterminé.</summary>
    </member>
    <member name="F:System.UriHostNameType.Dns">
      <summary>Le nom d'hôte est de type DNS (Domain Name System).</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv4">
      <summary>Le nom de l'hôte est une adresse d'hôte de protocole IP (Internet Protocol) version 4.</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv6">
      <summary>Le nom de l'hôte est une adresse d'hôte de protocole IP (Internet Protocol) version 6.</summary>
    </member>
    <member name="F:System.UriHostNameType.Unknown">
      <summary>Le type du nom d'hôte n'est pas fourni.</summary>
    </member>
    <member name="T:System.UriIdnScope">
      <summary>Fournit les valeurs possibles pour le paramètre de configuration de l'analyse des IDN (Internationalized Domain Name).</summary>
    </member>
    <member name="F:System.UriIdnScope.All">
      <summary>Cette valeur convertit tous les noms de domaine Unicode en leurs équivalents Punycode (noms IDN).</summary>
    </member>
    <member name="F:System.UriIdnScope.AllExceptIntranet">
      <summary>Cette valeur convertit tous les noms de domaine Unicode externes pour utiliser leurs équivalents Punycode (noms IDN). Dans ce cas, pour gérer des noms internationaux sur l'Intranet local, les serveurs DNS utilisés pour l'Intranet doivent prendre en charge les noms Unicode.</summary>
    </member>
    <member name="F:System.UriIdnScope.None">
      <summary>Cette valeur ne convertit aucun nom de domaine Unicode pour utiliser Punycode. Il s'agit de la valeur par défaut cohérente avec le comportement du .NET Framework 2.0.</summary>
    </member>
    <member name="T:System.UriKind">
      <summary>Définit les types de <see cref="T:System.Uri" /> pour plusieurs méthodes <see cref="Overload:System.Uri.#ctor" />.</summary>
    </member>
    <member name="F:System.UriKind.Absolute">
      <summary>L'URI est un URI absolu.</summary>
    </member>
    <member name="F:System.UriKind.Relative">
      <summary>L'URI est un URI relatif.</summary>
    </member>
    <member name="F:System.UriKind.RelativeOrAbsolute">
      <summary>Type d'URI indéterminé.</summary>
    </member>
    <member name="T:System.UriParser">
      <summary>Analyse un nouveau schéma URI. Il s'agit d'une classe abstract.</summary>
    </member>
    <member name="M:System.UriParser.#ctor">
      <summary>Construit un analyseur URI par défaut.</summary>
    </member>
    <member name="M:System.UriParser.GetComponents(System.Uri,System.UriComponents,System.UriFormat)">
      <summary>Obtient les composants d'un URI.</summary>
      <returns>Chaîne qui contient les composants.</returns>
      <param name="uri">
        <see cref="T:System.Uri" /> à analyser.</param>
      <param name="components">
        <see cref="T:System.UriComponents" /> à récupérer de <paramref name="uri" />.</param>
      <param name="format">L'une des valeurs <see cref="T:System.UriFormat" /> qui contrôlent la façon dont les caractères spéciaux sont placés dans une séquence d'échappement.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> n'est pas valide– ou –<paramref name="components" /> n’est pas une combinaison de valeurs <see cref="T:System.UriComponents" /> valides. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="uri" /> nécessite une analyse commandée par l'utilisateur– ou –<paramref name="uri" /> n’est pas un URI absolu. Il est impossible d'utiliser des URI relatifs avec cette méthode.</exception>
    </member>
    <member name="M:System.UriParser.InitializeAndValidate(System.Uri,System.UriFormatException@)">
      <summary>Initialise l'état de l'analyseur et valide l'URI.</summary>
      <param name="uri">
        <see cref="T:System.Uri" /> à valider.</param>
      <param name="parsingError">Erreurs de validation, le cas échéant.</param>
    </member>
    <member name="M:System.UriParser.IsBaseOf(System.Uri,System.Uri)">
      <summary>Détermine si <paramref name="baseUri" /> est un URI de base pour <paramref name="relativeUri" />.</summary>
      <returns>La valeur est true si <paramref name="baseUri" /> est un URI de base pour <paramref name="relativeUri" />, sinon false.</returns>
      <param name="baseUri">URI de base.</param>
      <param name="relativeUri">URI à tester.</param>
    </member>
    <member name="M:System.UriParser.IsKnownScheme(System.String)">
      <summary>Indique si l'analyseur d'un schéma est enregistré.</summary>
      <returns>La valeur est true si <paramref name="schemeName" /> a été enregistré, sinon false.</returns>
      <param name="schemeName">Nom du schéma à vérifier.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="schemeName" /> est null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="schemeName" /> n’est pas valide. </exception>
    </member>
    <member name="M:System.UriParser.IsWellFormedOriginalString(System.Uri)">
      <summary>Indique si un URI est de forme correcte.</summary>
      <returns>La valeur est true si <paramref name="uri" /> est formé correctement, sinon false.</returns>
      <param name="uri">URI à vérifier.</param>
    </member>
    <member name="M:System.UriParser.OnNewUri">
      <summary>Appelé par un constructeur <see cref="T:System.Uri" /> pour obtenir une instance <see cref="T:System.UriParser" /></summary>
      <returns>
        <see cref="T:System.UriParser" /> pour le <see cref="T:System.Uri" /> construit.</returns>
    </member>
    <member name="M:System.UriParser.OnRegister(System.String,System.Int32)">
      <summary>Appelé par Framework lorsqu'une méthode <see cref="T:System.UriParser" /> est enregistrée.</summary>
      <param name="schemeName">Schéma associé à ce <see cref="T:System.UriParser" />.</param>
      <param name="defaultPort">Numéro de port du schéma.</param>
    </member>
    <member name="M:System.UriParser.Register(System.UriParser,System.String,System.Int32)">
      <summary>Associe un schéma et un numéro de port à <see cref="T:System.UriParser" />.</summary>
      <param name="uriParser">
        <see cref="T:System.UriParser" /> à inscrire.</param>
      <param name="schemeName">Nom du schéma associé à cet analyseur.</param>
      <param name="defaultPort">Numéro de port par défaut pour le schéma spécifié.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="uriParser" /> est null– ou –Le paramètre <paramref name="schemeName" /> est null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="schemeName" /> n’est pas valide– ou –Le paramètre <paramref name="defaultPort" /> n'est pas valide. Le paramètre <paramref name="defaultPort" /> ne doit pas être inférieur à zéro ou supérieur 65534.</exception>
    </member>
    <member name="M:System.UriParser.Resolve(System.Uri,System.Uri,System.UriFormatException@)">
      <summary>Appelé par les constructeurs <see cref="T:System.Uri" /> et <see cref="Overload:System.Uri.TryCreate" /> pour résoudre un URI relatif.</summary>
      <returns>Chaîne du <see cref="T:System.Uri" /> relatif résolu.</returns>
      <param name="baseUri">URI de base.</param>
      <param name="relativeUri">URI relatif.</param>
      <param name="parsingError">Erreurs pendant le processus de résolution, le cas échéant.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="baseUri" /> n'est pas un <see cref="T:System.Uri" />– ou –Le paramètre <paramref name="baseUri" /> nécessite une analyse exécutée par l’utilisateur.</exception>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary>Convertit les instances du type <see cref="T:System.String" /> en instances <see cref="T:System.Uri" />.</summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.UriTypeConverter" />.</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retourne une valeur indiquant si ce convertisseur peut convertir un objet du type source spécifié en une instance du type <see cref="T:System.Uri" />. </summary>
      <returns>Valeur <see cref="T:System.Boolean" /> qui est true si le convertisseur peut convertir le type spécifié en une instance de <see cref="T:System.Uri" />, sinon false.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> représentant le type à partir duquel effectuer la conversion.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceType" /> est null (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retourne une valeur indiquant si ce convertisseur peut convertir l'objet en objet du type spécifié, à l'aide du contexte déterminé.</summary>
      <returns>Valeur <see cref="T:System.Boolean" /> qui est true si <paramref name="destinationType" /> est de type <see cref="T:System.String" /> ou <see cref="T:System.Uri" />, sinon false.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> représentant le type vers lequel effectuer la conversion.</param>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet donné en objet du type de ce convertisseur, à l'aide du contexte et des informations de culture spécifiés. </summary>
      <returns>Instance de <see cref="T:System.Uri" /> qui représente le <see cref="T:System.Object" /> converti. Si le paramètre <paramref name="value" /> est null, alors null  est renvoyé.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> à utiliser comme culture actuelle.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir en une instance de <see cref="T:System.Uri" />.</param>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. Cette exception se produit si <paramref name="value" /> est un type autre que <see cref="T:System.String" /> ou <see cref="T:System.Uri" /> ou si les paramètres <paramref name="context" /> ou <paramref name="culture" /> ne sont pas pris en charge pour le paramètre <paramref name="value" />.</exception>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet de valeur donné dans le type spécifié, à l'aide du contexte et des informations de culture spécifiés.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />. Si la valeur transmise est null, la culture est supposée être la culture actuelle.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> auquel le paramètre <paramref name="value" /> doit être converti.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="destinationType" /> est null.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratedCodeAttribute">
      <summary>Identifie le code généré par un outil.Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.GeneratedCodeAttribute.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.GeneratedCodeAttribute" />. </summary>
      <param name="tool">Nom de l'outil ayant généré le code.</param>
      <param name="version">Version de l'outil ayant généré le code.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Tool">
      <summary>Obtient le nom de l'outil ayant généré le code.</summary>
      <returns>Nom de l'outil ayant généré le code.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Version">
      <summary>Obtient la version de l'outil ayant généré le code.</summary>
      <returns>Version de l'outil ayant généré le code.</returns>
    </member>
    <member name="T:System.Collections.Generic.ISet`1">
      <summary>Fournit l'interface de base pour l'abstraction des ensembles.</summary>
      <typeparam name="T">Type d'éléments de l'ensemble.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Add(`0)">
      <summary>Ajoute un élément à l'ensemble actuel et retourne une valeur qui indique si l'ajout a réussi. </summary>
      <returns>La valeur est true si l'élément est ajouté à l'ensemble ou false si l'élément figure déjà dans l'ensemble.</returns>
      <param name="item">Élément à ajouter à l'ensemble.</param>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Supprime de l'ensemble actuel tous les éléments de la collection spécifiée.</summary>
      <param name="other">Collection d'éléments à supprimer de l'ensemble.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifie l'ensemble actuel afin qu'il contienne uniquement les éléments qui figurent également dans une collection spécifiée.</summary>
      <param name="other">Collection à comparer au jeu actif.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l'ensemble actuel est un sous-ensemble de propriété (strict) d'une collection spécifiée.</summary>
      <returns>La valeur est true si l'ensemble actuel est un sous-ensemble correct de <paramref name="other" />, sinon false.</returns>
      <param name="other">Collection à comparer au jeu actif.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l'ensemble actuel est un sur-ensemble correct d'une collection spécifiée.</summary>
      <returns>La valeur est true si l'objet <see cref="T:System.Collections.Generic.ISet`1" /> est un sur-ensemble correct de <paramref name="other" />, sinon false.</returns>
      <param name="other">Collection à comparer au jeu actif. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si un ensemble est un sous-ensemble d'une collection spécifiée.</summary>
      <returns>La valeur est true si l'ensemble actuel est un sous-ensemble de <paramref name="other" />, sinon false.</returns>
      <param name="other">Collection à comparer au jeu actif.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l'ensemble actuel est un sur-ensemble d'une collection spécifiée.</summary>
      <returns>La valeur est true si l'ensemble actuel est un sur-ensemble de <paramref name="other" />, sinon false.</returns>
      <param name="other">Collection à comparer au jeu actif.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l'ensemble actuel recoupe la collection spécifiée.</summary>
      <returns>La valeur est true si l'ensemble actuel et <paramref name="other" /> partagent au moins un élément commun, sinon false.</returns>
      <param name="other">Collection à comparer au jeu actif.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l'ensemble actuel et la collection spécifiée contiennent les mêmes éléments.</summary>
      <returns>La valeur est true si l'ensemble actuel est égal à <paramref name="other" />, sinon false.</returns>
      <param name="other">Collection à comparer au jeu actif.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifie l'ensemble actuel afin qu'il contienne uniquement les éléments présents dans l'ensemble actuel ou dans la collection spécifiée, mais pas dans les deux à la fois. </summary>
      <param name="other">Collection à comparer au jeu actif.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifie l'ensemble actuel afin qu'il contienne tous les éléments présents dans l'ensemble actuel et dans la collection spécifiée.</summary>
      <param name="other">Collection à comparer au jeu actif.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> est null.</exception>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1">
      <summary>Représente une liste à lien double.</summary>
      <typeparam name="T">Spécifie le type d'élément de la liste liée.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.LinkedList`1" /> qui est vide.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.LinkedList`1" /> qui contient des éléments copiés à partir du <see cref="T:System.Collections.IEnumerable" /> spécifié et qui possède une capacité suffisante pour accepter le nombre d'éléments copiés. </summary>
      <param name="collection">
        <see cref="T:System.Collections.IEnumerable" /> dont les éléments sont copiés dans le nouveau <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>Ajoute le nouveau nœud spécifié après le nœud existant spécifié dans <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> après lequel insérer <paramref name="newNode" />.</param>
      <param name="newNode">Nouveau <see cref="T:System.Collections.Generic.LinkedListNode`1" /> à ajouter à <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> est null.– ou –<paramref name="newNode" /> est null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> n'est pas dans le <see cref="T:System.Collections.Generic.LinkedList`1" /> actuel.– ou –<paramref name="newNode" /> appartient à une autre <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>Ajoute un nouveau nœud qui contient la valeur spécifiée après le nœud existant spécifié dans <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Le nouveau <see cref="T:System.Collections.Generic.LinkedListNode`1" /> contenant <paramref name="value" />.</returns>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> après lequel insérer un nouveau <see cref="T:System.Collections.Generic.LinkedListNode`1" /> qui contient <paramref name="value" />.</param>
      <param name="value">Valeur à ajouter à <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> est null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> n'est pas dans le <see cref="T:System.Collections.Generic.LinkedList`1" /> actuel.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>Ajoute le nouveau nœud spécifié avant le nœud existant spécifié dans <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> avant lequel insérer <paramref name="newNode" />.</param>
      <param name="newNode">Nouveau <see cref="T:System.Collections.Generic.LinkedListNode`1" /> à ajouter à <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> est null.– ou –<paramref name="newNode" /> est null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> n'est pas dans le <see cref="T:System.Collections.Generic.LinkedList`1" /> actuel.– ou –<paramref name="newNode" /> appartient à une autre <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>Ajoute un nouveau nœud qui contient la valeur spécifiée avant le nœud existant spécifié dans <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Le nouveau <see cref="T:System.Collections.Generic.LinkedListNode`1" /> contenant <paramref name="value" />.</returns>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> avant lequel insérer un nouveau <see cref="T:System.Collections.Generic.LinkedListNode`1" /> qui contient <paramref name="value" />.</param>
      <param name="value">Valeur à ajouter à <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> est null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> n'est pas dans le <see cref="T:System.Collections.Generic.LinkedList`1" /> actuel.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
      <summary>Ajoute le nouveau nœud spécifié au début de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node">Nouveau <see cref="T:System.Collections.Generic.LinkedListNode`1" /> à ajouter au début de <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> est null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> appartient à une autre <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
      <summary>Ajoute un nouveau nœud qui contient la valeur spécifiée au début de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Le nouveau <see cref="T:System.Collections.Generic.LinkedListNode`1" /> contenant <paramref name="value" />.</returns>
      <param name="value">Valeur à ajouter au début de <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
      <summary>Ajoute le nouveau nœud spécifié à la fin de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node">Nouveau <see cref="T:System.Collections.Generic.LinkedListNode`1" /> à ajouter à la fin de <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> est null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> appartient à une autre <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
      <summary>Ajoute un nouveau nœud qui contient la valeur spécifiée à la fin de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Le nouveau <see cref="T:System.Collections.Generic.LinkedListNode`1" /> contenant <paramref name="value" />.</returns>
      <param name="value">Valeur à ajouter à la fin de <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Clear">
      <summary>Supprime tous les nœuds de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
      <summary>Détermine si une valeur est dans <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>La valeur est true si <paramref name="value" /> figure dans le <see cref="T:System.Collections.Generic.LinkedList`1" />, sinon false.</returns>
      <param name="value">Valeur à trouver dans <see cref="T:System.Collections.Generic.LinkedList`1" />. La valeur peut être null pour les types référence.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
      <summary>Copie l'ensemble du <see cref="T:System.Collections.Generic.LinkedList`1" /> vers un <see cref="T:System.Array" /> unidimensionnel compatible, en commençant à l'index spécifié du tableau cible.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.Generic.LinkedList`1" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="index">Index de base zéro dans le <paramref name="array" /> au niveau duquel commence la copie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> est null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est égal ou supérieur à la longueur de <paramref name="array" />.– ou –<paramref name="index" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException">Le nombre d’éléments de <see cref="T:System.Collections.Generic.LinkedList`1" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Count">
      <summary>Obtient le nombre de nœuds réellement contenus dans <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Nombre de nœuds réellement contenus dans <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Find(`0)">
      <summary>Recherche le premier nœud qui contient la valeur spécifiée.</summary>
      <returns>Le premier <see cref="T:System.Collections.Generic.LinkedListNode`1" /> contenant la valeur spécifiée, s'il est trouvé, sinon null.</returns>
      <param name="value">Valeur à trouver dans <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
      <summary>Recherche le dernier nœud qui contient la valeur spécifiée.</summary>
      <returns>Le dernier <see cref="T:System.Collections.Generic.LinkedListNode`1" /> contenant la valeur spécifiée, s'il est trouvé, sinon null.</returns>
      <param name="value">Valeur à trouver dans <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.First">
      <summary>Obtient le premier nœud de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Le premier <see cref="T:System.Collections.Generic.LinkedListNode`1" /> de <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" /> pour <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Last">
      <summary>Obtient le dernier nœud de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Le dernier <see cref="T:System.Collections.Generic.LinkedListNode`1" /> de <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
      <summary>Supprime le nœud spécifié de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> à supprimer de <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> est null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> n'est pas dans le <see cref="T:System.Collections.Generic.LinkedList`1" /> actuel.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
      <summary>Supprime la première occurrence de la valeur spécifiée dans <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>La valeur est true si l'élément contenant <paramref name="value" /> a été supprimé, sinon false.  Cette méthode renvoie également la valeur false si <paramref name="value" /> est introuvable dans le <see cref="T:System.Collections.Generic.LinkedList`1" /> d'origine.</returns>
      <param name="value">Valeur à supprimer de <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
      <summary>Supprime le nœud au début de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> est vide.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveLast">
      <summary>Supprime le nœud à la fin de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> est vide.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Ajoute un élément à la fin de <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="value">Valeur à ajouter à la fin de <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtient une valeur indiquant si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns>La valeur est true si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule, sinon false.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.LinkedList`1" />, cette propriété renvoie toujours la valeur false.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Renvoie un énumérateur qui itère au sein d'une collection.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> qui peut être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copie les éléments de <see cref="T:System.Collections.ICollection" /> dans <see cref="T:System.Array" />, en commençant à un index particulier de <see cref="T:System.Array" />.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.ICollection" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="index">Index de base zéro dans le <paramref name="array" /> au niveau duquel commence la copie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> est null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> est multidimensionnel.– ou –<paramref name="array" /> n'a pas d'indexation de base zéro.– ou –Le nombre d’éléments de <see cref="T:System.Collections.ICollection" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.– ou –Le cast automatique du type du <see cref="T:System.Collections.ICollection" /> source en type du <paramref name="array" /> de destination est impossible.</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
      <summary>Obtient une valeur indiquant si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns>La valeur est true si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe), sinon false.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.LinkedList`1" />, cette propriété renvoie toujours la valeur false.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objet pouvant être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.LinkedList`1" />, cette propriété retourne toujours l'instance actuelle.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de la liste liée en tant que collection.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> pouvant être utilisé pour itérer au sein de la liste liée en tant que collection.</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1.Enumerator">
      <summary>Énumère les éléments de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.Current">
      <summary>Obtient l'élément dans la position actuelle de l'énumérateur.</summary>
      <returns>Élément dans <see cref="T:System.Collections.Generic.LinkedList`1" /> à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.Dispose">
      <summary>Libère toutes les ressources utilisées par <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.MoveNext">
      <summary>Avance l'énumérateur à l'élément suivant de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>La valeur est true si l'énumérateur a pu avancer jusqu'à l'élément suivant ou false si l'énumérateur a dépassé la fin de la collection.</returns>
      <exception cref="T:System.InvalidOperationException">La collection a été modifiée après la création de l'énumérateur. </exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtient l'élément dans la position actuelle de l'énumérateur.</summary>
      <returns>Élément dans la collection à la position actuelle de l'énumérateur.</returns>
      <exception cref="T:System.InvalidOperationException">L’énumérateur précède le premier élément ou suit le dernier élément de la collection. </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Affecte à l'énumérateur sa position initiale, qui précède le premier élément de la collection. Cette classe ne peut pas être héritée.</summary>
      <exception cref="T:System.InvalidOperationException">La collection a été modifiée après la création de l'énumérateur. </exception>
    </member>
    <member name="T:System.Collections.Generic.LinkedListNode`1">
      <summary>Représente un nœud de <see cref="T:System.Collections.Generic.LinkedList`1" />. Cette classe ne peut pas être héritée.</summary>
      <typeparam name="T">Spécifie le type d'élément de la liste liée.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedListNode`1.#ctor(`0)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.LinkedListNode`1" /> comportant la valeur spécifiée.</summary>
      <param name="value">Valeur à contenir dans <see cref="T:System.Collections.Generic.LinkedListNode`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.List">
      <summary>Obtient <see cref="T:System.Collections.Generic.LinkedList`1" /> auquel appartient <see cref="T:System.Collections.Generic.LinkedListNode`1" />.</summary>
      <returns>Référence à <see cref="T:System.Collections.Generic.LinkedList`1" /> à laquelle appartient <see cref="T:System.Collections.Generic.LinkedListNode`1" />, ou null si <see cref="T:System.Collections.Generic.LinkedListNode`1" /> n'est pas lié.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Next">
      <summary>Obtient le nœud suivant dans <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Référence au nœud suivant dans <see cref="T:System.Collections.Generic.LinkedList`1" />, ou null si le nœud actuel est le dernier élément (<see cref="P:System.Collections.Generic.LinkedList`1.Last" />) de <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Previous">
      <summary>Obtient le nœud précédent dans <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Référence au nœud précédent dans <see cref="T:System.Collections.Generic.LinkedList`1" />, ou null si le nœud actuel est le premier élément (<see cref="P:System.Collections.Generic.LinkedList`1.First" />) de <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Value">
      <summary>Obtient la valeur contenue dans le nœud.</summary>
      <returns>Valeur contenue dans le nœud.</returns>
    </member>
    <member name="T:System.Collections.Generic.Queue`1">
      <summary>Représente une collection d'objets premier entré, premier sorti.</summary>
      <typeparam name="T">Spécifie le type d'éléments dans la file d'attente.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.Queue`1" /> qui est vide et possède la capacité initiale par défaut.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.Queue`1" /> qui contient des éléments copiés à partir de la collection spécifiée et qui possède une capacité suffisante pour accepter le nombre d'éléments copiés.</summary>
      <param name="collection">Collection dont les éléments sont copiés dans la nouvelle <see cref="T:System.Collections.Generic.Queue`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.Queue`1" /> qui est vide et possède la capacité initiale spécifiée.</summary>
      <param name="capacity">Nombre initial d'éléments que <see cref="T:System.Collections.Generic.Queue`1" /> peut contenir.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Clear">
      <summary>Supprime tous les objets de <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Contains(`0)">
      <summary>Détermine si un élément est dans <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <returns>La valeur est true si <paramref name="item" /> figure dans le <see cref="T:System.Collections.Generic.Queue`1" />, sinon false.</returns>
      <param name="item">Objet à trouver dans <see cref="T:System.Collections.Generic.Queue`1" />. La valeur peut être null pour les types référence.</param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
      <summary>Copie les éléments <see cref="T:System.Collections.Generic.Queue`1" /> dans un <see cref="T:System.Array" /> unidimensionnel existant, en commençant au niveau de l'index de tableau spécifié.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.Generic.Queue`1" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex">Index de base zéro dans le <paramref name="array" /> au niveau duquel commence la copie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> est null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException">Le nombre d’éléments de <see cref="T:System.Collections.Generic.Queue`1" /> source est supérieur à la quantité d’espace disponible entre <paramref name="arrayIndex" /> et la fin du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Count">
      <summary>Obtient le nombre d'éléments contenus dans <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <returns>Nombre d'éléments contenus dans <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Dequeue">
      <summary>Supprime et retourne l'objet au début de <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <returns>Objet supprimé du début de <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Queue`1" /> est vide.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
      <summary>Ajoute un objet à la fin de <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <param name="item">Objet à ajouter à <see cref="T:System.Collections.Generic.Queue`1" />. La valeur peut être null pour les types référence.</param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> pour <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Peek">
      <summary>Retourne l'objet situé au début de <see cref="T:System.Collections.Generic.Queue`1" /> sans le supprimer.</summary>
      <returns>Objet situé au début de <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Queue`1" /> est vide.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Renvoie un énumérateur qui itère au sein d'une collection.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> qui peut être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copie les éléments de <see cref="T:System.Collections.ICollection" /> dans <see cref="T:System.Array" />, en commençant à un index particulier de <see cref="T:System.Array" />.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.ICollection" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="index">Index de base zéro dans le <paramref name="array" /> au niveau duquel commence la copie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> est null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> est multidimensionnel.– ou –<paramref name="array" /> n'a pas d'indexation de base zéro.– ou –Le nombre d’éléments de <see cref="T:System.Collections.ICollection" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.– ou –Le cast automatique du type du <see cref="T:System.Collections.ICollection" /> source en type du <paramref name="array" /> de destination est impossible.</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
      <summary>Obtient une valeur indiquant si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns>La valeur est true si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe), sinon false.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.Queue`1" />, cette propriété renvoie toujours la valeur false.</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objet pouvant être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.Queue`1" />, cette propriété retourne toujours l'instance actuelle.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Renvoie un énumérateur qui itère au sein d'une collection.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.ToArray">
      <summary>Copie les éléments <see cref="T:System.Collections.Generic.Queue`1" /> vers un nouveau tableau.</summary>
      <returns>Nouveau tableau contenant les éléments copiés à partir de <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TrimExcess">
      <summary>Définit la capacité au nombre réel d'éléments dans <see cref="T:System.Collections.Generic.Queue`1" />, si ce nombre est inférieur à 90 pour cent de capacité actuelle.</summary>
    </member>
    <member name="T:System.Collections.Generic.Queue`1.Enumerator">
      <summary>Énumère les éléments de <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.Current">
      <summary>Obtient l'élément dans la position actuelle de l'énumérateur.</summary>
      <returns>Élément dans <see cref="T:System.Collections.Generic.Queue`1" /> à la position actuelle de l'énumérateur.</returns>
      <exception cref="T:System.InvalidOperationException">L’énumérateur précède le premier élément ou suit le dernier élément de la collection. </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.Dispose">
      <summary>Libère toutes les ressources utilisées par <see cref="T:System.Collections.Generic.Queue`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext">
      <summary>Avance l'énumérateur à l'élément suivant de <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <returns>La valeur est true si l'énumérateur a pu avancer jusqu'à l'élément suivant ou false si l'énumérateur a dépassé la fin de la collection.</returns>
      <exception cref="T:System.InvalidOperationException">La collection a été modifiée après la création de l'énumérateur. </exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtient l'élément dans la position actuelle de l'énumérateur.</summary>
      <returns>Élément dans la collection à la position actuelle de l'énumérateur.</returns>
      <exception cref="T:System.InvalidOperationException">L’énumérateur précède le premier élément ou suit le dernier élément de la collection. </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Affecte à l'énumérateur sa position initiale, qui précède le premier élément de la collection.</summary>
      <exception cref="T:System.InvalidOperationException">La collection a été modifiée après la création de l'énumérateur. </exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2">
      <summary>Représente une collection de paires clé/valeur triées sur la clé. </summary>
      <typeparam name="TKey">Type des clés dans le dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs dans le dictionnaire.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedDictionary`2" /> vide et utilise l'implémentation de <see cref="T:System.Collections.Generic.IComparer`1" /> par défaut pour le type de clé.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedDictionary`2" /> vide et utilise l'implémentation de <see cref="T:System.Collections.Generic.IComparer`1" /> spécifiée pour comparer les clés.</summary>
      <param name="comparer">Implémentation de <see cref="T:System.Collections.Generic.IComparer`1" /> à utiliser lors de la comparaison de clés, ou null pour utiliser le <see cref="T:System.Collections.Generic.Comparer`1" /> par défaut pour le type de la clé.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedDictionary`2" /> qui contient des éléments copiés du <see cref="T:System.Collections.Generic.IDictionary`2" /> spécifié et utilise l'implémentation de <see cref="T:System.Collections.Generic.IComparer`1" /> par défaut pour le type de clé.</summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> dont les éléments sont copiés dans le nouveau <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> contient une ou plusieurs clés dupliquées.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedDictionary`2" /> qui contient des éléments copiés du <see cref="T:System.Collections.Generic.IDictionary`2" /> spécifié et utilise l'implémentation de <see cref="T:System.Collections.Generic.IComparer`1" /> spécifiée pour comparer les clés.</summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> dont les éléments sont copiés dans le nouveau <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</param>
      <param name="comparer">Implémentation de <see cref="T:System.Collections.Generic.IComparer`1" /> à utiliser lors de la comparaison de clés, ou null pour utiliser le <see cref="T:System.Collections.Generic.Comparer`1" /> par défaut pour le type de la clé.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> contient une ou plusieurs clés dupliquées.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Add(`0,`1)">
      <summary>Ajoute un élément avec la clé et la valeur spécifiées dans <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <param name="key">Clé de l'élément à ajouter.</param>
      <param name="value">Valeur de l'élément à ajouter. La valeur peut être null pour les types référence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Un élément possédant la même clé existe déjà dans <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Clear">
      <summary>Supprime tous les éléments de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Comparer">
      <summary>Obtient le <see cref="T:System.Collections.Generic.IComparer`1" /> utilisé pour commander les éléments du <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IComparer`1" /> utilisé pour commander les éléments du <see cref="T:System.Collections.Generic.SortedDictionary`2" /></returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)">
      <summary>Détermine si <see cref="T:System.Collections.Generic.SortedDictionary`2" /> contient un élément avec la clé spécifiée.</summary>
      <returns>La valeur est true si <see cref="T:System.Collections.Generic.SortedDictionary`2" /> contient un élément avec la clé spécifiée, sinon false.</returns>
      <param name="key">Clé à rechercher dans le <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsValue(`1)">
      <summary>Détermine si <see cref="T:System.Collections.Generic.SortedDictionary`2" /> contient un élément avec la clé spécifiée.</summary>
      <returns>La valeur est true si <see cref="T:System.Collections.Generic.SortedDictionary`2" /> contient un élément avec la valeur spécifiée, sinon false.</returns>
      <param name="value">Valeur à trouver dans <see cref="T:System.Collections.Generic.SortedDictionary`2" />. La valeur peut être null pour les types référence.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>Copie les éléments de <see cref="T:System.Collections.Generic.SortedDictionary`2" /> dans le tableau spécifié des structures <see cref="T:System.Collections.Generic.KeyValuePair`2" /> au niveau de l'index spécifié.</summary>
      <param name="array">Tableau unidimensionnel de structures <see cref="T:System.Collections.Generic.KeyValuePair`2" /> qui correspond à la destination des éléments copiés à partir du <see cref="T:System.Collections.Generic.SortedDictionary`2" />. Le tableau doit présenter une indexation de base zéro.</param>
      <param name="index">Index de base zéro dans le <paramref name="array" /> au niveau duquel commence la copie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> est null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException">Le nombre d’éléments de <see cref="T:System.Collections.Generic.SortedDictionary`2" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Count">
      <summary>Obtient le nombre de paires clé/valeur contenues dans <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>Nombre de paires clé/valeur contenues dans <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" /> pour <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Item(`0)">
      <summary>Obtient ou définit la valeur associée à la clé spécifiée.</summary>
      <returns>Valeur associée à la clé spécifiée. Si la clé spécifiée est introuvable, une opération Get retourne <see cref="T:System.Collections.Generic.KeyNotFoundException" /> et une opération Set crée un nouvel élément avec la clé spécifiée.</returns>
      <param name="key">Clé de la valeur à obtenir ou à définir.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> est null.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">La propriété est récupérée et <paramref name="key" /> n'existe pas dans la collection.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Keys">
      <summary>Obtient une collection contenant les clés dans <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> contenant les clés de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Remove(`0)">
      <summary>Supprime de <see cref="T:System.Collections.Generic.SortedDictionary`2" /> l'élément ayant la clé spécifiée.</summary>
      <returns>La valeur est true si la suppression de l'entité a réussi, sinon false.  Cette méthode renvoie également la valeur false si <paramref name="key" /> est introuvable dans <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
      <param name="key">Clé de l'élément à supprimer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Ajoute un élément à <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="keyValuePair">Structure <see cref="T:System.Collections.Generic.KeyValuePair`2" /> à ajouter à <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyValuePair" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Un élément possédant la même clé existe déjà dans <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Détermine si <see cref="T:System.Collections.Generic.ICollection`1" /> contient une clé et une valeur spécifiques.</summary>
      <returns>La valeur est true si <paramref name="keyValuePair" /> figure dans le <see cref="T:System.Collections.Generic.ICollection`1" />, sinon false.</returns>
      <param name="keyValuePair">Structure <see cref="T:System.Collections.Generic.KeyValuePair`2" /> à rechercher dans <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtient une valeur indiquant si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns>La valeur est true si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule, sinon false. Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.SortedDictionary`2" />, cette propriété renvoie toujours la valeur false.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Supprime la première occurrence de l'élément spécifié dans <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>La valeur est true si <paramref name="keyValuePair" /> a pu être supprimé de <see cref="T:System.Collections.Generic.ICollection`1" />, sinon false. Cette méthode renvoie également la valeur false si <paramref name="keyValuePair" /> est introuvable dans <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <param name="keyValuePair">Structure <see cref="T:System.Collections.Generic.KeyValuePair`2" /> à supprimer de <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>Obtient un <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les clés de <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les clés de <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>Obtient un <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les valeurs de <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les valeurs de <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Renvoie un énumérateur qui itère au sein d'une collection.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copie les éléments de l'objet <see cref="T:System.Collections.Generic.ICollection`1" /> dans un tableau, en commençant au niveau d'un index de tableau spécifié.</summary>
      <param name="array">Le tableau unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.Generic.ICollection`1" />. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index">Index de base zéro dans le <paramref name="array" /> au niveau duquel commence la copie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> est null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> est multidimensionnel.– ou –<paramref name="array" /> n'a pas d'indexation de base zéro.– ou –Le nombre d’éléments de <see cref="T:System.Collections.Generic.ICollection`1" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.– ou –Le cast automatique du type du <see cref="T:System.Collections.Generic.ICollection`1" /> source en type du <paramref name="array" /> de destination est impossible.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Obtient une valeur indiquant si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns>La valeur est true si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe), sinon false.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.SortedDictionary`2" />, cette propriété renvoie toujours la valeur false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objet pouvant être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />. </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Ajoute un élément avec la clé et la valeur fournies à <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">Objet à utiliser comme clé de l'élément à ajouter.</param>
      <param name="value">Objet à utiliser comme valeur de l'élément à ajouter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> a un type qui ne peut pas être assigné au type de clé <paramref name="TKey" /> de <see cref="T:System.Collections.IDictionary" />.– ou –<paramref name="value" /> a un type qui ne peut pas être assigné au type valeur <paramref name="TValue" /> de <see cref="T:System.Collections.IDictionary" />.– ou –Un élément possédant la même clé existe déjà dans <see cref="T:System.Collections.IDictionary" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Détermine si <see cref="T:System.Collections.IDictionary" /> contient un élément avec la clé spécifiée.</summary>
      <returns>La valeur est true si <see cref="T:System.Collections.IDictionary" /> contient un élément avec la clé, sinon false.</returns>
      <param name="key">Clé à rechercher dans le <see cref="T:System.Collections.IDictionary" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Retourne un <see cref="T:System.Collections.IDictionaryEnumerator" /> pour l'objet <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> pour <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Obtient une valeur indiquant si <see cref="T:System.Collections.IDictionary" /> est de taille fixe.</summary>
      <returns>La valeur est true si la collection <see cref="T:System.Collections.IDictionary" /> a une taille fixe, sinon false.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.SortedDictionary`2" />, cette propriété renvoie toujours la valeur false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Obtient une valeur indiquant si <see cref="T:System.Collections.IDictionary" /> est en lecture seule.</summary>
      <returns>La valeur est true si <see cref="T:System.Collections.IDictionary" /> est en lecture seule, sinon false.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.SortedDictionary`2" />, cette propriété renvoie toujours la valeur false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Obtient ou définit l'élément avec la clé spécifiée.</summary>
      <returns>Élément avec la clé spécifiée, ou null si <paramref name="key" /> ne figure pas dans le dictionnaire ou si le type de <paramref name="key" /> ne peut pas être assigné au type de clé <paramref name="TKey" /> de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
      <param name="key">Clé de l'élément à obtenir.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Une valeur est assignée et <paramref name="key" /> a un type qui ne peut pas être assigné au type de clé <paramref name="TKey" /> de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.– ou –Une valeur est assignée et <paramref name="value" /> a un type qui ne peut pas être assigné au type valeur <paramref name="TValue" /> de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary>Obtient un <see cref="T:System.Collections.ICollection" /> contenant les clés de <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> contenant les clés de <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Supprime de <see cref="T:System.Collections.IDictionary" /> l'élément ayant la clé spécifiée.</summary>
      <param name="key">Clé de l'élément à supprimer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> est null.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Values">
      <summary>Obtient un <see cref="T:System.Collections.ICollection" /> contenant les valeurs de <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> contenant les valeurs de <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Renvoie un énumérateur itérant au sein de la collection.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> qui peut être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)">
      <summary>Obtient la valeur associée à la clé spécifiée.</summary>
      <returns>La valeur est true si <see cref="T:System.Collections.Generic.SortedDictionary`2" /> contient un élément avec la clé spécifiée, sinon false.</returns>
      <param name="key">Clé de la valeur à obtenir.</param>
      <param name="value">Lorsque cette méthode est retournée, la valeur associée à la clé spécifiée, si la clé est trouvée ; sinon, la valeur par défaut pour le type du paramètre <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> est null.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Values">
      <summary>Obtient une collection contenant les valeurs de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> contenant les valeurs de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.Enumerator">
      <summary>Énumère les éléments de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current">
      <summary>Obtient l'élément dans la position actuelle de l'énumérateur.</summary>
      <returns>Élément dans <see cref="T:System.Collections.Generic.SortedDictionary`2" /> à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.Dispose">
      <summary>Libère toutes les ressources utilisées par <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext">
      <summary>Avance l'énumérateur à l'élément suivant de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>La valeur est true si l'énumérateur a pu avancer jusqu'à l'élément suivant ou false si l'énumérateur a dépassé la fin de la collection.</returns>
      <exception cref="T:System.InvalidOperationException">La collection a été modifiée après la création de l'énumérateur. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary>Obtient l'élément à la position actuelle de l'énumérateur sous la forme d'une structure <see cref="T:System.Collections.DictionaryEntry" />.</summary>
      <returns>Élément dans la collection à la position actuelle du dictionnaire, sous la forme d'une structure <see cref="T:System.Collections.DictionaryEntry" />.</returns>
      <exception cref="T:System.InvalidOperationException">L’énumérateur précède le premier élément ou suit le dernier élément de la collection. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary>Obtient la clé de l'élément à la position actuelle de l'énumérateur.</summary>
      <returns>Clé de l'élément dans la collection à la position actuelle de l'énumérateur.</returns>
      <exception cref="T:System.InvalidOperationException">L’énumérateur précède le premier élément ou suit le dernier élément de la collection. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary>Obtient la valeur de l'élément à la position actuelle de l'énumérateur.</summary>
      <returns>Valeur de l'élément dans la collection à la position actuelle de l'énumérateur.</returns>
      <exception cref="T:System.InvalidOperationException">L’énumérateur précède le premier élément ou suit le dernier élément de la collection. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtient l'élément dans la position actuelle de l'énumérateur.</summary>
      <returns>Élément dans la collection à la position actuelle de l'énumérateur.</returns>
      <exception cref="T:System.InvalidOperationException">L’énumérateur précède le premier élément ou suit le dernier élément de la collection. </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Affecte à l'énumérateur sa position initiale, qui précède le premier élément de la collection.</summary>
      <exception cref="T:System.InvalidOperationException">La collection a été modifiée après la création de l'énumérateur. </exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection">
      <summary>Représente la collection de clés dans <see cref="T:System.Collections.Generic.SortedDictionary`2" />. Cette classe ne peut pas être héritée. </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> qui reflète les clés dans le <see cref="T:System.Collections.Generic.SortedDictionary`2" /> spécifié.</summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> dont les clés sont reflétées dans la nouvelle <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>Copie les éléments <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> dans un tableau unidimensionnel existant commençant au niveau de l'index de tableau spécifié.</summary>
      <param name="array">Le tableau unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index">Index de base zéro dans le <paramref name="array" /> au niveau duquel commence la copie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> est null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException">Le nombre d’éléments de <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Count">
      <summary>Obtient le nombre d'éléments contenus dans <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</summary>
      <returns>Nombre d'éléments contenus dans <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</summary>
      <returns>Structure <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" /> pour <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Ajoute un élément à <see cref="T:System.Collections.Generic.ICollection`1" />.  Cette implémentation lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item">Objet à ajouter à <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Toujours levée ; la collection est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Supprime tous les éléments de <see cref="T:System.Collections.Generic.ICollection`1" />.  Cette implémentation lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Toujours levée ; la collection est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Contains(`0)">
      <summary>Détermine si <see cref="T:System.Collections.Generic.ICollection`1" /> contient la valeur spécifiée.</summary>
      <returns>La valeur est true si <paramref name="item" /> figure dans le <see cref="T:System.Collections.Generic.ICollection`1" />, sinon false.</returns>
      <param name="item">Objet à trouver dans <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtient une valeur indiquant si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns>La valeur est true si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule, sinon false.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />, cette propriété renvoie toujours la valeur false.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Supprime la première occurrence d'un objet spécifique de <see cref="T:System.Collections.Generic.ICollection`1" />.  Cette implémentation lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <returns>La valeur est true si <paramref name="item" /> a pu être supprimé de <see cref="T:System.Collections.Generic.ICollection`1" />, sinon false. Cette méthode renvoie également la valeur false si <paramref name="item" /> est introuvable dans <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <param name="item">Objet à supprimer de <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Toujours levée ; la collection est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Renvoie un énumérateur itérant au sein de la collection.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> qui peut être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copie les éléments du <see cref="T:System.Collections.ICollection" /> dans un tableau, en commençant au niveau d'un index de tableau particulier.</summary>
      <param name="array">Le tableau unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.ICollection" />. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index">Index de base zéro dans le <paramref name="array" /> au niveau duquel commence la copie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> est null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> est multidimensionnel.– ou –<paramref name="array" /> n'a pas d'indexation de base zéro.– ou –Le nombre d’éléments de <see cref="T:System.Collections.ICollection" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.– ou –Le cast automatique du type du <see cref="T:System.Collections.ICollection" /> source en type du <paramref name="array" /> de destination est impossible.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtient une valeur indiquant si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns>La valeur est true si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe), sinon false.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />, cette propriété renvoie toujours la valeur false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objet pouvant être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />, cette propriété retourne toujours l'instance actuelle.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Renvoie un énumérateur itérant au sein de la collection.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator">
      <summary>Énumère les éléments de <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Current">
      <summary>Obtient l'élément dans la position actuelle de l'énumérateur.</summary>
      <returns>Élément dans <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Dispose">
      <summary>Libère toutes les ressources utilisées par <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary>Avance l'énumérateur à l'élément suivant de <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</summary>
      <returns>La valeur est true si l'énumérateur a pu avancer jusqu'à l'élément suivant ou false si l'énumérateur a dépassé la fin de la collection.</returns>
      <exception cref="T:System.InvalidOperationException">La collection a été modifiée après la création de l'énumérateur. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtient l'élément dans la position actuelle de l'énumérateur.</summary>
      <returns>Élément dans la collection à la position actuelle de l'énumérateur.</returns>
      <exception cref="T:System.InvalidOperationException">L’énumérateur précède le premier élément ou suit le dernier élément de la collection. </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Affecte à l'énumérateur sa position initiale, qui précède le premier élément de la collection.</summary>
      <exception cref="T:System.InvalidOperationException">La collection a été modifiée après la création de l'énumérateur. </exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection">
      <summary>Représente la collection de valeurs dans <see cref="T:System.Collections.Generic.SortedDictionary`2" />. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> qui reflète les valeurs dans le <see cref="T:System.Collections.Generic.SortedDictionary`2" /> spécifié.</summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> dont les valeurs sont reflétées dans la nouvelle <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>Copie les éléments <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> dans un tableau unidimensionnel existant commençant au niveau de l'index de tableau spécifié.</summary>
      <param name="array">Le tableau unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index">Index de base zéro dans le <paramref name="array" /> au niveau duquel commence la copie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> est null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException">Le nombre d’éléments de <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Count">
      <summary>Obtient le nombre d'éléments contenus dans <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</summary>
      <returns>Nombre d'éléments contenus dans <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</summary>
      <returns>Structure <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" /> pour <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Add(`1)">
      <summary>Ajoute un élément à <see cref="T:System.Collections.Generic.ICollection`1" />.  Cette implémentation lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item">Objet à ajouter à <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Toujours levée ; la collection est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Supprime tous les éléments de <see cref="T:System.Collections.Generic.ICollection`1" />.  Cette implémentation lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Toujours levée ; la collection est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Contains(`1)">
      <summary>Détermine si <see cref="T:System.Collections.Generic.ICollection`1" /> contient une valeur spécifique.</summary>
      <returns>La valeur est true si <paramref name="item" /> figure dans le <see cref="T:System.Collections.Generic.ICollection`1" />, sinon false.</returns>
      <param name="item">Objet à trouver dans <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtient une valeur indiquant si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns>La valeur est true si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule, sinon false.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />, cette propriété renvoie toujours la valeur false.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Remove(`1)">
      <summary>Supprime la première occurrence d'un objet spécifique de <see cref="T:System.Collections.Generic.ICollection`1" />.  Cette implémentation lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <returns>La valeur est true si <paramref name="item" /> a pu être supprimé de <see cref="T:System.Collections.Generic.ICollection`1" />, sinon false. Cette méthode renvoie également la valeur false si <paramref name="item" /> est introuvable dans <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <param name="item">Objet à supprimer de <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Toujours levée ; la collection est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Supprime la première occurrence d'un objet spécifique de <see cref="T:System.Collections.Generic.ICollection`1" />.  Cette implémentation lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <returns>La valeur est true si <paramref name="item" /> a pu être supprimé de <see cref="T:System.Collections.Generic.ICollection`1" />, sinon false. Cette méthode renvoie également la valeur false si <paramref name="item" /> est introuvable dans <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <exception cref="T:System.NotSupportedException">Toujours levée ; la collection est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copie les éléments du <see cref="T:System.Collections.ICollection" /> dans un tableau, en commençant au niveau d'un index de tableau particulier.</summary>
      <param name="array">Le tableau unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.ICollection" />. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index">Index de base zéro dans le <paramref name="array" /> au niveau duquel commence la copie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> est null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> est multidimensionnel.– ou –<paramref name="array" /> n'a pas d'indexation de base zéro.– ou –Le nombre d’éléments de <see cref="T:System.Collections.ICollection" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.– ou –Le cast automatique du type du <see cref="T:System.Collections.ICollection" /> source en type du <paramref name="array" /> de destination est impossible.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtient une valeur indiquant si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns>La valeur est true si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe), sinon false.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />, cette propriété renvoie toujours la valeur false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objet pouvant être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />, cette propriété retourne toujours l'instance actuelle.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Renvoie un énumérateur itérant au sein de la collection.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator">
      <summary>Énumère les éléments de <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Current">
      <summary>Obtient l'élément dans la position actuelle de l'énumérateur.</summary>
      <returns>Élément dans <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Dispose">
      <summary>Libère toutes les ressources utilisées par <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary>Avance l'énumérateur à l'élément suivant de <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</summary>
      <returns>La valeur est true si l'énumérateur a pu avancer jusqu'à l'élément suivant ou false si l'énumérateur a dépassé la fin de la collection.</returns>
      <exception cref="T:System.InvalidOperationException">La collection a été modifiée après la création de l'énumérateur. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtient l'élément dans la position actuelle de l'énumérateur.</summary>
      <returns>Élément dans la collection à la position actuelle de l'énumérateur.</returns>
      <exception cref="T:System.InvalidOperationException">L’énumérateur précède le premier élément ou suit le dernier élément de la collection. </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Affecte à l'énumérateur sa position initiale, qui précède le premier élément de la collection.</summary>
      <exception cref="T:System.InvalidOperationException">La collection a été modifiée après la création de l'énumérateur. </exception>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1">
      <summary>Représente une collection d'objets maintenue en ordre trié.</summary>
      <typeparam name="T">Type d'éléments de l'ensemble.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedSet`1" />. </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedSet`1" /> qui utilise un comparateur spécifié.</summary>
      <param name="comparer">Comparateur par défaut à utiliser pour la comparaison d'objets. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedSet`1" /> qui contient des éléments copiés d'une collection énumérable spécifiée.</summary>
      <param name="collection">Collection énumérable à copier. </param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedSet`1" /> qui contient des éléments copiés d'une collection énumérable spécifiée et qui utilise un comparateur spécifié.</summary>
      <param name="collection">Collection énumérable à copier. </param>
      <param name="comparer">Comparateur par défaut à utiliser pour la comparaison d'objets. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Add(`0)">
      <summary>Ajoute un élément à l'ensemble et retourne une valeur qui indique si l'ajout a réussi.</summary>
      <returns>La valeur est true si <paramref name="item" /> est ajouté à l'ensemble, sinon false. </returns>
      <param name="item">Élément à ajouter à l'ensemble.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Clear">
      <summary>Supprime tous les éléments de l'ensemble.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Comparer">
      <summary>Obtient l'objet <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> qui est utilisé pour déterminer l'égalité des valeurs de l'ensemble <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns>Comparateur utilisé pour déterminer l'égalité des valeurs de l'ensemble <see cref="T:System.Collections.Generic.SortedSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Contains(`0)">
      <summary>Détermine si l'ensemble contient un élément spécifique.</summary>
      <returns>La valeur est true si l'ensemble contient <paramref name="item" />, sinon false.</returns>
      <param name="item">Élément à rechercher dans l'ensemble.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[])">
      <summary>Copie l'ensemble du <see cref="T:System.Collections.Generic.SortedSet`1" /> dans un tableau unidimensionnel compatible, en commençant au début du tableau cible.</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentException">Le nombre d'éléments dans le <see cref="T:System.Collections.Generic.SortedSet`1" /> source est supérieur au nombre d'éléments que le tableau de destination peut contenir. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)">
      <summary>Copie l'ensemble du <see cref="T:System.Collections.Generic.SortedSet`1" /> dans un tableau unidimensionnel compatible, en commençant au niveau de l'index spécifié du tableau.</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.Generic.SortedSet`1" />. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index">Index de base zéro dans le <paramref name="array" /> au niveau duquel commence la copie.</param>
      <exception cref="T:System.ArgumentException">Le nombre d'éléments dans le tableau source est supérieur à la quantité d'espace disponible entre <paramref name="index" /> et la fin du tableau de destination.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> est null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>Copie un nombre d'éléments spécifié à partir de <see cref="T:System.Collections.Generic.SortedSet`1" /> dans un tableau unidimensionnel compatible en commençant au niveau de l'index spécifié du tableau.</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.Generic.SortedSet`1" />. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index">Index de base zéro dans le <paramref name="array" /> au niveau duquel commence la copie.</param>
      <param name="count">Nombre d'éléments à copier.</param>
      <exception cref="T:System.ArgumentException">Le nombre d'éléments dans le tableau source est supérieur à la quantité d'espace disponible entre <paramref name="index" /> et la fin du tableau de destination.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> est null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro.– ou –<paramref name="count" /> est inférieur à zéro.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Count">
      <summary>Obtient le nombre d'éléments contenus dans <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns>Nombre d'éléments dans le <see cref="T:System.Collections.Generic.SortedSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Supprime tous les éléments figurant dans la collection spécifiée de l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actuel.</summary>
      <param name="other">Collection d'éléments à supprimer de l'objet <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns>Un énumérateur itérant via <see cref="T:System.Collections.Generic.SortedSet`1" /> dans l'ordre du tri.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)">
      <summary>Retourne une vue d'un sous-ensemble dans un <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns>Vue de sous-ensemble qui contient uniquement les valeurs de la plage spécifiée.</returns>
      <param name="lowerValue">Valeur la plus faible souhaitée dans la vue.</param>
      <param name="upperValue">Valeur la plus élevée souhaitée dans la vue. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="lowerValue" /> est supérieur à <paramref name="upperValue" /> d'après le comparateur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Une opération éprouvée sur la vue était à l'extérieur de la plage spécifiée par <paramref name="lowerValue" /> et <paramref name="upperValue" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifie l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actuel afin qu'il contienne uniquement les éléments qui figurent également dans une collection spécifiée.</summary>
      <param name="other">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actif.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si un objet <see cref="T:System.Collections.Generic.SortedSet`1" /> est un sous-ensemble propre à la collection spécifiée.</summary>
      <returns>La valeur est true si l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> est un sous-ensemble propre à <paramref name="other" />, sinon false.</returns>
      <param name="other">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actif.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si un objet <see cref="T:System.Collections.Generic.SortedSet`1" /> est un sur-ensemble propre à la collection spécifiée.</summary>
      <returns>La valeur est true si l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> est un sur-ensemble propre à <paramref name="other" />, sinon false.</returns>
      <param name="other">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actif. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si un objet <see cref="T:System.Collections.Generic.SortedSet`1" /> est un sous-ensemble de la collection spécifiée.</summary>
      <returns>La valeur est true si l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> est un sous-ensemble de <paramref name="other" />, sinon false.</returns>
      <param name="other">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actif.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si un objet <see cref="T:System.Collections.Generic.SortedSet`1" /> est un sur-ensemble de la collection spécifiée.</summary>
      <returns>La valeur est true si l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> est un sur-ensemble de <paramref name="other" />, sinon false.</returns>
      <param name="other">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actif. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> est null.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Max">
      <summary>Obtient la valeur maximale de <see cref="T:System.Collections.Generic.SortedSet`1" />, tel que défini par le comparateur.</summary>
      <returns>Valeur maximale dans l'ensemble.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Min">
      <summary>Obtient la valeur minimale de <see cref="T:System.Collections.Generic.SortedSet`1" />, tel que défini par le comparateur.</summary>
      <returns>Valeur minimale dans l'ensemble.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actuel et une collection spécifiée partagent des éléments communs.</summary>
      <returns>La valeur est true si l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> et <paramref name="other" /> partagent au moins un élément commun, sinon false.</returns>
      <param name="other">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actif.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Remove(`0)">
      <summary>Supprime un élément spécifié de <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns>La valeur est true si l'élément est trouvé et supprimé, sinon false. </returns>
      <param name="item">Élément à supprimer.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>Supprime tous les éléments qui correspondent aux conditions définies par le prédicat spécifié de la collection <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns>Nombre d'éléments supprimés de la collection <see cref="T:System.Collections.Generic.SortedSet`1" />. </returns>
      <param name="match">Délégué qui définit les conditions des éléments à supprimer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Reverse">
      <summary>Retourne un <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui itère dans l'ordre inverse au sein de <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns>Énumérateur qui itère dans l'ordre inverse au sein de <see cref="T:System.Collections.Generic.SortedSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l'objet <see cref="T:System.Collections.Generic.SortedSet`1" />actif et la collection spécifiée contiennent les mêmes éléments.</summary>
      <returns>La valeur est true si l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actuel est égal à <paramref name="other" />, sinon false.</returns>
      <param name="other">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actif.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifie l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actuel afin qu'il contienne uniquement les éléments présents dans l'objet actuel ou dans la collection spécifiée, mais pas dans les deux à la fois.</summary>
      <param name="other">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actif.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Ajoute un élément à un objet <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">Objet à ajouter à l'objet <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">La <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtient une valeur qui indique si <see cref="T:System.Collections.ICollection" /> est en lecture seule.</summary>
      <returns>true si la collection est en lecture seule, sinon false.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Renvoie un énumérateur qui itère au sein d'une collection.</summary>
      <returns>Énumérateur permettant d'itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copie l'ensemble du <see cref="T:System.Collections.Generic.SortedSet`1" /> dans un tableau unidimensionnel compatible, en commençant au niveau de l'index spécifié du tableau.</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.Generic.SortedSet`1" />. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index">Index de base zéro dans le <paramref name="array" /> au niveau duquel commence la copie.</param>
      <exception cref="T:System.ArgumentException">Le nombre d'éléments dans le tableau source est supérieur à la quantité d'espace disponible entre <paramref name="index" /> et la fin du tableau de destination. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> est null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>Obtient une valeur qui indique si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread safe).</summary>
      <returns>La valeur est true si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé, sinon false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objet pouvant être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />. Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />, cette propriété retourne toujours l'instance actuelle.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Renvoie un énumérateur qui itère au sein d'une collection.</summary>
      <returns>Énumérateur permettant d'itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifie l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actuel afin qu'il contienne tous les éléments présents dans l'objet actuel ou dans la collection spécifiée.</summary>
      <param name="other">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actif.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> est null.</exception>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1.Enumerator">
      <summary>Énumère les éléments d'un objet <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.Current">
      <summary>Obtient l'élément dans la position actuelle de l'énumérateur.</summary>
      <returns>Élément dans la collection à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.Dispose">
      <summary>Libère toutes les ressources utilisées par <see cref="T:System.Collections.Generic.SortedSet`1.Enumerator" />. </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.MoveNext">
      <summary>Avance l'énumérateur à l'élément suivant de la collection <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns>La valeur est true si l'énumérateur a pu avancer jusqu'à l'élément suivant ou false si l'énumérateur a dépassé la fin de la collection.</returns>
      <exception cref="T:System.InvalidOperationException">La collection a été modifiée après la création de l'énumérateur. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtient l'élément dans la position actuelle de l'énumérateur.</summary>
      <returns>Élément dans la collection à la position actuelle de l'énumérateur.</returns>
      <exception cref="T:System.InvalidOperationException">L’énumérateur précède le premier élément ou suit le dernier élément de la collection. </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Affecte à l'énumérateur sa position initiale, qui précède le premier élément de la collection.</summary>
      <exception cref="T:System.InvalidOperationException">La collection a été modifiée après la création de l'énumérateur. </exception>
    </member>
    <member name="T:System.Collections.Generic.Stack`1">
      <summary>Représente une collection de type dernier entré premier sorti de taille variable d'instances du même type arbitraire.</summary>
      <typeparam name="T">Spécifie le type d'éléments dans la pile.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.Stack`1" /> qui est vide et possède la capacité initiale par défaut.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.Stack`1" /> qui contient des éléments copiés à partir de la collection spécifiée et qui possède une capacité suffisante pour accepter le nombre d'éléments copiés.</summary>
      <param name="collection">Collection à partir de laquelle copier les éléments.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> est null.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.Stack`1" /> qui est vide et possède une capacité égale à la plus grande valeur parmi la capacité initiale spécifiée et la capacité initiale par défaut.</summary>
      <param name="capacity">Nombre initial d'éléments que <see cref="T:System.Collections.Generic.Stack`1" /> peut contenir.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Clear">
      <summary>Supprime tous les objets de <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Contains(`0)">
      <summary>Détermine si un élément est dans <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <returns>La valeur est true si <paramref name="item" /> figure dans le <see cref="T:System.Collections.Generic.Stack`1" />, sinon false.</returns>
      <param name="item">Objet à trouver dans <see cref="T:System.Collections.Generic.Stack`1" />. La valeur peut être null pour les types référence.</param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
      <summary>Copie <see cref="T:System.Collections.Generic.Stack`1" /> dans un <see cref="T:System.Array" /> unidimensionnel existant commençant à l'index de tableau spécifié.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.Generic.Stack`1" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex">Index de base zéro dans le <paramref name="array" /> au niveau duquel commence la copie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> est null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException">Le nombre d’éléments de <see cref="T:System.Collections.Generic.Stack`1" /> source est supérieur à la quantité d’espace disponible entre <paramref name="arrayIndex" /> et la fin du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Count">
      <summary>Obtient le nombre d'éléments contenus dans <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <returns>Nombre d'éléments contenus dans <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.GetEnumerator">
      <summary>Retourne un énumérateur pour <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> pour <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Peek">
      <summary>Retourne l'objet situé en haut de <see cref="T:System.Collections.Generic.Stack`1" /> sans le supprimer.</summary>
      <returns>Objet situé en haut de <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Stack`1" /> est vide.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Pop">
      <summary>Supprime et retourne l'objet en haut de <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <returns>Objet supprimé du haut de <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Stack`1" /> est vide.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Push(`0)">
      <summary>Insère un objet en haut de <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <param name="item">Objet sur lequel un push doit être exécuté dans <see cref="T:System.Collections.Generic.Stack`1" />. La valeur peut être null pour les types référence.</param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Renvoie un énumérateur itérant au sein de la collection.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> qui peut être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copie les éléments de <see cref="T:System.Collections.ICollection" /> dans <see cref="T:System.Array" />, en commençant à un index particulier de <see cref="T:System.Array" />.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.ICollection" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex">Index de base zéro dans le <paramref name="array" /> au niveau duquel commence la copie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> est null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> est multidimensionnel.– ou –<paramref name="array" /> n'a pas d'indexation de base zéro.– ou –Le nombre d’éléments de <see cref="T:System.Collections.ICollection" /> source est supérieur à la quantité d’espace disponible entre <paramref name="arrayIndex" /> et la fin du <paramref name="array" /> de destination.– ou –Le cast automatique du type du <see cref="T:System.Collections.ICollection" /> source en type du <paramref name="array" /> de destination est impossible.</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
      <summary>Obtient une valeur indiquant si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns>La valeur est true si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe), sinon false.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.Stack`1" />, cette propriété renvoie toujours la valeur false.</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objet pouvant être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.Stack`1" />, cette propriété retourne toujours l'instance actuelle.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Renvoie un énumérateur qui itère au sein d'une collection.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.ToArray">
      <summary>Copie <see cref="T:System.Collections.Generic.Stack`1" /> vers un nouveau tableau.</summary>
      <returns>Nouveau tableau contenant les copies des éléments de <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TrimExcess">
      <summary>Définit la capacité au nombre réel d'éléments dans <see cref="T:System.Collections.Generic.Stack`1" />, si ce nombre est inférieur à 90 pour cent de capacité actuelle.</summary>
    </member>
    <member name="T:System.Collections.Generic.Stack`1.Enumerator">
      <summary>Énumère les éléments de <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.Current">
      <summary>Obtient l'élément dans la position actuelle de l'énumérateur.</summary>
      <returns>Élément dans <see cref="T:System.Collections.Generic.Stack`1" /> à la position actuelle de l'énumérateur.</returns>
      <exception cref="T:System.InvalidOperationException">L’énumérateur précède le premier élément ou suit le dernier élément de la collection. </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.Dispose">
      <summary>Libère toutes les ressources utilisées par <see cref="T:System.Collections.Generic.Stack`1.Enumerator" />. </summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext">
      <summary>Avance l'énumérateur à l'élément suivant de <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <returns>La valeur est true si l'énumérateur a pu avancer jusqu'à l'élément suivant ou false si l'énumérateur a dépassé la fin de la collection.</returns>
      <exception cref="T:System.InvalidOperationException">La collection a été modifiée après la création de l'énumérateur. </exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtient l'élément dans la position actuelle de l'énumérateur.</summary>
      <returns>Élément dans la collection à la position actuelle de l'énumérateur.</returns>
      <exception cref="T:System.InvalidOperationException">L’énumérateur précède le premier élément ou suit le dernier élément de la collection. </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Affecte à l'énumérateur sa position initiale, qui précède le premier élément de la collection. Cette classe ne peut pas être héritée.</summary>
      <exception cref="T:System.InvalidOperationException">La collection a été modifiée après la création de l'énumérateur. </exception>
    </member>
    <member name="T:System.Collections.ObjectModel.ObservableCollection`1">
      <summary>Représente une collection de données dynamiques qui fournit des notifications lorsque des éléments sont ajoutés ou supprimés, ou lorsque la liste entière est actualisée.</summary>
      <typeparam name="T">Type d'éléments de la collection.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor">
      <summary>Initialise une nouvelle instance vide de la classe <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> et la remplit avec des éléments copiés dans la collection spécifiée.</summary>
      <param name="collection">Collection à partir de laquelle les éléments sont copiés.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> est null.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.List{`0})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> et la remplit avec des éléments copiés dans la liste spécifiée.</summary>
      <param name="list">Liste à partir de laquelle les éléments sont copiés.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy">
      <summary>Interdit les tentatives réentrantes destinées à modifier cette collection.</summary>
      <returns>Objet <see cref="T:System.IDisposable" /> qui peut être utilisé pour éliminer l'objet.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.CheckReentrancy">
      <summary>Vérifie les tentatives réentrantes destinées à modifier cette collection.</summary>
      <exception cref="T:System.InvalidOperationException">S'il y a eu un appel à <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy" /> dont la valeur de retour <see cref="T:System.IDisposable" /> n'a pas encore été éliminée. En général, cela signifie qu'il existe d'autres tentatives destinées à modifier cette collection pendant un événement <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" />. Toutefois, cela dépend du moment où les classes dérivées choisissent d'appeler <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.ClearItems">
      <summary>Supprime tous les éléments de la collection.</summary>
      <exception cref="T:System.InvalidOperationException">La méthode est appelée dans un gestionnaire d'événements <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> ou <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" />. </exception>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged">
      <summary>Se produit lorsqu'un élément de la collection est modifié ou lorsque la totalité de la collection est modifiée.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)">
      <summary>Insère un élément dans la collection à l'index spécifié.</summary>
      <param name="index">Index de base zéro auquel <paramref name="item" /> doit être inséré.</param>
      <param name="item">Objet à insérer.</param>
      <exception cref="T:System.InvalidOperationException">La méthode est appelée dans un gestionnaire d'événements <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> ou <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.Move(System.Int32,System.Int32)">
      <summary>Déplace l'élément à l'index spécifié vers un nouvel emplacement dans la collection.</summary>
      <param name="oldIndex">Index de base zéro qui spécifie l'emplacement de l'élément à déplacer.</param>
      <param name="newIndex">Index de base zéro qui spécifie le nouvel emplacement de l'élément.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.MoveItem(System.Int32,System.Int32)">
      <summary>Déplace l'élément à l'index spécifié vers un nouvel emplacement dans la collection.</summary>
      <param name="oldIndex">Index de base zéro qui spécifie l'emplacement de l'élément à déplacer.</param>
      <param name="newIndex">Index de base zéro qui spécifie le nouvel emplacement de l'élément.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Déclenche l'événement <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> avec les données d'événement fournies.</summary>
      <param name="e">Données d'événement à rapporter dans l'événement.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Déclenche l'événement <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> avec les arguments fournis.</summary>
      <param name="e">Données d'événement à rapporter dans l'événement.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged">
      <summary>Se produit lorsqu'une propriété d'un élément individuel de la collection est modifiée.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(System.Int32)">
      <summary>Supprime de la collection l'élément à l'index spécifié.</summary>
      <param name="index">Index de base zéro de l'élément à supprimer.</param>
      <exception cref="T:System.InvalidOperationException">La méthode est appelée dans un gestionnaire d'événements <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> ou <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.SetItem(System.Int32,`0)">
      <summary>Remplace l'élément à l'index spécifié.</summary>
      <param name="index">Index de base zéro de l'élément à remplacer.</param>
      <param name="item">Nouvelle valeur de l'élément à l'index spécifié.</param>
      <exception cref="T:System.InvalidOperationException">La méthode est appelée dans un gestionnaire d'événements <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> ou <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" />. </exception>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Se produit lorsqu'une valeur de propriété est modifiée.</summary>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1">
      <summary>Représente une <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> en lecture seule.</summary>
      <typeparam name="T">Type d'objets présents dans la collection.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" /> qui sert de wrapper pour l'objet <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> spécifié.</summary>
      <param name="list">Collection à inclure dans un wrapper.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged">
      <summary>Se produit lors de l'ajout ou de la suppression d'un élément.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Déclenche l'événement <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged" />. </summary>
      <param name="args">Données de l'événement.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Déclenche l'événement <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged" />. </summary>
      <param name="args">Données de l'événement.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged">
      <summary>Se produit lorsqu'une valeur de propriété est modifiée.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>Pour une description de ce membre, consultez <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Pour une description de ce membre, consultez <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</summary>
    </member>
    <member name="T:System.Collections.Specialized.INotifyCollectionChanged">
      <summary>Notifie des écouteurs de modifications dynamiques à une collection (par exemple, lorsque des éléments sont ajoutés et supprimés, ou lorsque la totalité de l'objet Collection est réinitialisé).</summary>
    </member>
    <member name="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged">
      <summary>Se produit lorsque la liste d'éléments de la collection a changé, ou lorsque la collection est réinitialisée.</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedAction">
      <summary>Décrit l'action qui est à l'origine d'un événement <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />. </summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add">
      <summary>Un ou plusieurs éléments ont été ajoutés à la collection.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move">
      <summary>Un ou plusieurs éléments ont été déplacés dans la collection.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove">
      <summary>Un ou plusieurs éléments ont été supprimés de la collection.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace">
      <summary>Un ou plusieurs éléments ont été remplacés dans la collection.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset">
      <summary>Le contenu de la collection a changé de manière significative.</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs">
      <summary>Fournit les données de l'événement <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> en spécifiant la valeur <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction" />.</summary>
      <param name="action">Valeur de l'action, en tant que valeur de l'énumération. Il doit toujours s'agir de <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />. Consultez la section Notes.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="action" /> n’est pas <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> qui décrit une modification de plusieurs éléments.</summary>
      <param name="action">Action qui a déclenché l'événement. Peut avoir la valeur <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" />, ou <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
      <param name="changedItems">Éléments affectés par la modification.</param>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> qui décrit une modification <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> de plusieurs éléments.</summary>
      <param name="action">Action qui a déclenché l'événement. Cette propriété peut uniquement avoir la valeur <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
      <param name="newItems">Nouveaux éléments qui remplacent les éléments d'origine.</param>
      <param name="oldItems">Éléments d'origine qui ont été remplacés.</param>
      <exception cref="T:System.ArgumentException">Si <paramref name="action" /> n'est pas Replace.</exception>
      <exception cref="T:System.ArgumentNullException">Si <paramref name="oldItems" /> ou <paramref name="newItems" /> est Null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> qui décrit une modification <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> de plusieurs éléments.</summary>
      <param name="action">Action qui a déclenché l'événement. Cette propriété peut uniquement avoir la valeur <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
      <param name="newItems">Nouveaux éléments qui remplacent les éléments d'origine.</param>
      <param name="oldItems">Éléments d'origine qui ont été remplacés.</param>
      <param name="startingIndex">Index du premier élément des éléments remplacés.</param>
      <exception cref="T:System.ArgumentException">Si <paramref name="action" /> n'est pas Replace.</exception>
      <exception cref="T:System.ArgumentNullException">Si <paramref name="oldItems" /> ou <paramref name="newItems" /> est Null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> qui décrit une modification de plusieurs éléments ou une modification <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />.</summary>
      <param name="action">Action qui a déclenché l'événement. Peut avoir la valeur <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" />, ou <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
      <param name="changedItems">Éléments affectés par la modification.</param>
      <param name="startingIndex">Index auquel la modification s'est produite.</param>
      <exception cref="T:System.ArgumentException">Si <paramref name="action" /> n'est pas Reset, Add ou Remove, si <paramref name="action" /> est Reset et soit si <paramref name="changedItems" /> n'est pas Null, soit si <paramref name="startingIndex" /> n'est pas -1, ou si l'action est Add ou Remove et <paramref name="startingIndex" /> est inférieur à -1.</exception>
      <exception cref="T:System.ArgumentNullException">Si <paramref name="action" /> est Add ou Remove et <paramref name="changedItems" /> est Null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> qui décrit une modification <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> de plusieurs éléments.</summary>
      <param name="action">Action qui a déclenché l'événement. Cette propriété peut uniquement avoir la valeur <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />.</param>
      <param name="changedItems">Éléments affectés par la modification.</param>
      <param name="index">Nouvel index pour les éléments modifiés.</param>
      <param name="oldIndex">Ancien index pour les éléments modifiés.</param>
      <exception cref="T:System.ArgumentException">Si <paramref name="action" /> n'est pas Move ou <paramref name="index" /> est inférieur à 0.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> qui décrit une modification d'un élément.</summary>
      <param name="action">Action qui a déclenché l'événement. Peut avoir la valeur <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" />, ou <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
      <param name="changedItem">Élément affecté par la modification.</param>
      <exception cref="T:System.ArgumentException">Si <paramref name="action" /> n'est pas Reset, Add ou Remove, ou si <paramref name="action" /> est Reset et <paramref name="changedItem" /> n'est pas Null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> qui décrit une modification de type <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> ou <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</summary>
      <param name="action">Valeur de l'action, en tant que valeur de l'énumération. Il doit s'agir de <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> ou <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />. Consultez la section Notes.</param>
      <param name="changedItem">Élément affecté par la modification.</param>
      <param name="index">Index auquel la modification s'est produite.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="action" /> n’est pas <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> ou <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> qui décrit une modification <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> d'un élément.</summary>
      <param name="action">Action qui a déclenché l'événement. Cette propriété peut uniquement avoir la valeur <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />.</param>
      <param name="changedItem">Élément affecté par la modification.</param>
      <param name="index">Nouvel index pour l'élément modifié.</param>
      <param name="oldIndex">Ancien index pour l'élément modifié.</param>
      <exception cref="T:System.ArgumentException">Si <paramref name="action" /> n'est pas Move ou <paramref name="index" /> est inférieur à 0.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> qui décrit une modification <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> d'un élément.</summary>
      <param name="action">Action qui a déclenché l'événement. Cette propriété peut uniquement avoir la valeur <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
      <param name="newItem">Nouvel élément qui remplace l'élément d'origine.</param>
      <param name="oldItem">Élément d'origine qui a été remplacé.</param>
      <exception cref="T:System.ArgumentException">Si <paramref name="action" /> n'est pas Replace.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> qui décrit une modification <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</summary>
      <param name="action">Valeur de l'action, en tant que valeur de l'énumération. Il doit s'agir de <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />. Consultez la section Notes.</param>
      <param name="newItem">Nouvel élément qui remplace l'élément d'origine.</param>
      <param name="oldItem">Élément d'origine qui a été remplacé.</param>
      <param name="index">Index de l'élément qui est remplacé.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="action" /> n’est pas <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</exception>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action">
      <summary>Obtient la description de l'action qui a déclenché l'événement. </summary>
      <returns>Description de l'action qui a déclenché l'événement, en tant que valeur de l'énumération.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems">
      <summary>Obtient les éléments affectés par une action.</summary>
      <returns>Liste des éléments affectés par une action. La valeur par défaut est null.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex">
      <summary>Obtient l'index auquel la modification s'est produite.</summary>
      <returns>Index auquel la modification s'est produite.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems">
      <summary>Obtient l'élément affecté par une action <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> ou <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</summary>
      <returns>Liste des éléments affectés par une action <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> ou <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex">
      <summary>Obtient l'index auquel la modification s'est produite pour une action <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> ou <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</summary>
      <returns>Index auquel la modification s'est produite pour une action <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> ou <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</returns>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventHandler">
      <summary>Représente la méthode qui gère les événements implémentant l'événement <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
      <param name="sender">Objet ayant déclenché l'événement.</param>
      <param name="e">Données de l'événement.</param>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventArgs">
      <summary>Fournit des données pour l'événement MethodNameCompleted. </summary>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />.</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />.</summary>
      <param name="error">Toute erreur qui s'est produite pendant l'opération asynchrone.</param>
      <param name="cancelled">Valeur qui indique si l'opération asynchrone a été annulée.</param>
      <param name="userState">Objet d'état facultatif fourni par l'utilisateur et utilisé pour identifier la tâche qui a déclenché l'événement Terminé.</param>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
      <summary>Obtient une valeur qui indique si une opération asynchrone a été annulée.</summary>
      <returns>La valeur est true si l'opération asynchrone a été annulée, sinon false.La valeur par défaut est false.</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
      <summary>Obtient une valeur qui indique l'erreur qui s'est produite pendant une opération asynchrone.</summary>
      <returns>Instance de <see cref="T:System.Exception" />, si une erreur s'est produite durant une opération asynchrone, sinon null.</returns>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
      <summary>Lève une exception fournie par l'utilisateur en cas d'échec d'une opération asynchrone.</summary>
      <exception cref="T:System.InvalidOperationException">La propriété <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> est true.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">La propriété <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> a été définie par l’opération asynchrone.</exception>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
      <summary>Obtient l'identificateur unique de la tâche asynchrone.</summary>
      <returns>Référence d'objet qui identifie uniquement la tâche asynchrone, sinon la valeur est null si aucune valeur n'a été définie.</returns>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventHandler">
      <summary>Représente la méthode qui gérera l'événement MethodNameCompleted d'une opération asynchrone. </summary>
      <param name="sender">Source de l'événement.</param>
      <param name="e">
        <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> contenant les données de l'événement.</param>
    </member>
    <member name="T:System.ComponentModel.AsyncOperation">
      <summary>Suit la durée de vie d'une opération asynchrone. </summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.OperationCompleted">
      <summary>Termine la durée de vie d'une opération asynchrone.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> a été appelé précédemment pour cette tâche.</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Appelle un délégué sur le thread ou le contexte approprié pour le modèle d'application.</summary>
      <param name="d">Objet <see cref="T:System.Threading.SendOrPostCallback" /> encapsulant le délégué à appeler lorsque l'opération se termine.</param>
      <param name="arg">Argument pour le délégué contenu dans le paramètre <paramref name="d" />.</param>
      <exception cref="T:System.InvalidOperationException">La méthode <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> a été appelée précédemment pour cette tâche.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> a la valeur null.</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Termine la durée de vie d'une opération asynchrone.</summary>
      <param name="d">Objet <see cref="T:System.Threading.SendOrPostCallback" /> encapsulant le délégué à appeler lorsque l'opération se termine.</param>
      <param name="arg">Argument pour le délégué contenu dans le paramètre <paramref name="d" />.</param>
      <exception cref="T:System.InvalidOperationException">La méthode <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> a été appelée précédemment pour cette tâche.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> a la valeur null.</exception>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.SynchronizationContext">
      <summary>Obtient l'objet <see cref="T:System.Threading.SynchronizationContext" /> transmis au constructeur lors de la création de l'objet par <see cref="T:System.ComponentModel.AsyncOperationManager" />.</summary>
      <returns>Objet <see cref="T:System.Threading.SynchronizationContext" /> transmis au constructeur.</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
      <summary>Obtient un objet utilisé pour identifier de manière unique une opération asynchrone.</summary>
      <returns>Objet d'état passé à l'appel de méthode asynchrone.</returns>
    </member>
    <member name="T:System.ComponentModel.AsyncOperationManager">
      <summary>Permet de gérer l'accès concurrentiel pour les classes prenant en charge des appels de méthodes asynchrones.Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
      <summary>Renvoie un <see cref="T:System.ComponentModel.AsyncOperation" /> permettant de suivre la durée d'une opération asynchrone particulière.</summary>
      <returns>
        <see cref="T:System.ComponentModel.AsyncOperation" /> que vous pouvez utiliser pour suivre la durée d'un appel de méthode asynchrone.</returns>
      <param name="userSuppliedState">Objet utilisé pour associer une portion d'état client, telle qu'un identificateur de tâche, à une opération asynchrone particulière.</param>
    </member>
    <member name="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
      <summary>Obtient ou définit l'objet <see cref="T:System.Threading.SynchronizationContext" /> pour l'opération asynchrone.</summary>
      <returns>Objet <see cref="T:System.Threading.SynchronizationContext" /> pour l'opération asynchrone.</returns>
    </member>
    <member name="T:System.ComponentModel.BackgroundWorker">
      <summary>Exécute une opération sur un thread séparé.</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.BackgroundWorker" />.</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.CancelAsync">
      <summary>Demande l'annulation d'une opération d'arrière-plan en attente.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /> est défini sur false. </exception>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.CancellationPending">
      <summary>Obtient une valeur indiquant si l'application a demandé l'annulation d'une opération en arrière-plan.</summary>
      <returns>La valeur est true si l'application a demandé l'annulation d'une opération d'arrière-plan, sinon false.La valeur par défaut est false.</returns>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.DoWork">
      <summary>Se produit lorsque <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> est appelé.</summary>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.IsBusy">
      <summary>Obtient une valeur indiquant si <see cref="T:System.ComponentModel.BackgroundWorker" /> exécute une opération en arrière-plan.</summary>
      <returns>La valeur est true si le <see cref="T:System.ComponentModel.BackgroundWorker" /> exécute une opération en arrière-plan, sinon false.</returns>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
      <summary>Déclenche l'événement <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />.</summary>
      <param name="e">
        <see cref="T:System.ComponentModel.DoWorkEventArgs" /> contenant les données de l'événement.</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
      <summary>Déclenche l'événement <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</summary>
      <param name="e">
        <see cref="T:System.ComponentModel.ProgressChangedEventArgs" /> contenant les données de l'événement.</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
      <summary>Déclenche l'événement <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />.</summary>
      <param name="e">
        <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" /> contenant les données de l'événement.</param>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
      <summary>Se produit lorsque <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /> est appelé.</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
      <summary>Déclenche l'événement <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</summary>
      <param name="percentProgress">Pourcentage, de 0 à 100, de l'opération en arrière-plan qui est terminée.</param>
      <exception cref="T:System.InvalidOperationException">La propriété <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> est false. </exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
      <summary>Déclenche l'événement <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</summary>
      <param name="percentProgress">Pourcentage, de 0 à 100, de l'opération en arrière-plan qui est terminée.</param>
      <param name="userState">L'objet d'état est passé à <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />.</param>
      <exception cref="T:System.InvalidOperationException">La propriété <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> est false. </exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
      <summary>Lance l'exécution d'une opération en arrière-plan.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> est true.</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
      <summary>Lance l'exécution d'une opération en arrière-plan et inclut un paramètre utilisable par l'opération en arrière-plan.</summary>
      <param name="argument">Paramètre utilisable par l'opération en arrière-plan dans le gestionnaire d'événements <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> est true.</exception>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
      <summary>Se produit lorsque l'opération d'arrière-plan est terminée, a été annulée ou a levé une exception.</summary>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
      <summary>Obtient ou définit une valeur indiquant si le <see cref="T:System.ComponentModel.BackgroundWorker" /> peut signaler des mises à jour de progression.</summary>
      <returns>La valeur est true si le <see cref="T:System.ComponentModel.BackgroundWorker" /> prend en charge les mises à jour de progression, sinon false.La valeur par défaut est false.</returns>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
      <summary>Obtient ou définit une valeur indiquant si <see cref="T:System.ComponentModel.BackgroundWorker" /> prend en charge l'annulation asynchrone.</summary>
      <returns>La valeur est true si le <see cref="T:System.ComponentModel.BackgroundWorker" /> prend en charge l'annulation, sinon false.La valeur par défaut est false.</returns>
    </member>
    <member name="T:System.ComponentModel.BrowsableAttribute">
      <summary>Spécifie si une propriété ou un événement doit être affiché dans une fenêtre Propriétés.</summary>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.BrowsableAttribute" />.</summary>
      <param name="browsable">La valeur est true si une propriété ou un événement peuvent être modifiés au moment de la conception, sinon false.La valeur par défaut est true.</param>
    </member>
    <member name="P:System.ComponentModel.BrowsableAttribute.Browsable">
      <summary>Obtient une valeur indiquant si un objet est consultable.</summary>
      <returns>La valeur est true si l'objet est consultable, sinon false.</returns>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.Default">
      <summary>Spécifie la valeur par défaut de <see cref="T:System.ComponentModel.BrowsableAttribute" />, qui est <see cref="F:System.ComponentModel.BrowsableAttribute.Yes" />.Ce champ statique est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.Equals(System.Object)">
      <summary>Indique si cette instance et un objet spécifié sont égaux.</summary>
      <returns>La valeur est true si <paramref name="obj" /> est égal à cette instance, sinon false.</returns>
      <param name="obj">Autre objet de comparaison. </param>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.GetHashCode">
      <summary>Renvoie le code de hachage pour cette instance.</summary>
      <returns>Code de hachage entier signé 32 bits.</returns>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.No">
      <summary>Spécifie qu'une propriété ou un événement ne peut pas être modifié au moment du design.Ce champ statique est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.Yes">
      <summary>Spécifie qu'une propriété ou un événement peut être modifié au moment du design.Ce champ statique est en lecture seule.</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventArgs">
      <summary>Fournit des données pour un événement annulable.</summary>
    </member>
    <member name="M:System.ComponentModel.CancelEventArgs.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.CancelEventArgs" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CancelEventArgs.#ctor(System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.CancelEventArgs" /> dont la propriété <see cref="P:System.ComponentModel.CancelEventArgs.Cancel" /> est définie sur la valeur donnée.</summary>
      <param name="cancel">La valeur est true pour annuler l'opération, sinon false.</param>
    </member>
    <member name="P:System.ComponentModel.CancelEventArgs.Cancel">
      <summary>Obtient ou définit une valeur qui indique si l'opération doit être annulée.</summary>
      <returns>La valeur est true si l'opération doit être annulée, sinon false.</returns>
    </member>
    <member name="T:System.ComponentModel.CategoryAttribute">
      <summary>Spécifie le nom de la catégorie dans laquelle regrouper la propriété ou l'événement lorsqu'ils s'affichent dans un contrôle de grille de propriétés défini en mode Par catégorie.</summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.CategoryAttribute" /> à l'aide du nom de catégorie Par défaut.</summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.CategoryAttribute" /> à l'aide du nom de catégorie spécifié.</summary>
      <param name="category">Nom de la catégorie. </param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Action">
      <summary>Obtient un <see cref="T:System.ComponentModel.CategoryAttribute" /> représentant la catégorie Action.</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> pour la catégorie Action.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Appearance">
      <summary>Obtient un <see cref="T:System.ComponentModel.CategoryAttribute" /> représentant la catégorie Apparence.</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> pour la catégorie Apparence.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Asynchronous">
      <summary>Obtient un <see cref="T:System.ComponentModel.CategoryAttribute" /> représentant la catégorie Asynchrone.</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> pour la catégorie Asynchrone.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Behavior">
      <summary>Obtient un <see cref="T:System.ComponentModel.CategoryAttribute" /> représentant la catégorie Comportement.</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> pour la catégorie Comportement.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Category">
      <summary>Obtient le nom de la catégorie pour la propriété ou l'événement auquel cet attribut est appliqué.</summary>
      <returns>Nom de la catégorie pour la propriété ou l'événement auquel cet attribut est appliqué.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Data">
      <summary>Obtient un <see cref="T:System.ComponentModel.CategoryAttribute" /> représentant la catégorie Données.</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> pour la catégorie Données.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Default">
      <summary>Obtient un <see cref="T:System.ComponentModel.CategoryAttribute" /> représentant la catégorie Par défaut.</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> pour la catégorie Par défaut.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Design">
      <summary>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> représentant la catégorie Design.</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> pour la catégorie Design.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.DragDrop">
      <summary>Obtient un <see cref="T:System.ComponentModel.CategoryAttribute" /> représentant la catégorie Glisser-déplacer.</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> pour la catégorie Glisser-déplacer.</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.Equals(System.Object)">
      <summary>Renvoie une valeur indiquant si la valeur de l'objet spécifié est égale au <see cref="T:System.ComponentModel.CategoryAttribute" /> actuel.</summary>
      <returns>La valeur est true si la valeur de l'objet spécifié est égale au <see cref="T:System.ComponentModel.CategoryAttribute" />, sinon false.</returns>
      <param name="obj">Objet dont l'égalité des valeurs doit être vérifiée. </param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Focus">
      <summary>Obtient un <see cref="T:System.ComponentModel.CategoryAttribute" /> représentant la catégorie Focus.</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> pour la catégorie Focus.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Format">
      <summary>Obtient un <see cref="T:System.ComponentModel.CategoryAttribute" /> représentant la catégorie Format.</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> pour la catégorie Format.</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetHashCode">
      <summary>Renvoie le code de hachage pour cet attribut.</summary>
      <returns>Code de hachage entier signé 32 bits.</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetLocalizedString(System.String)">
      <summary>Recherche le nom localisé de la catégorie spécifiée.</summary>
      <returns>Nom localisé de la catégorie ou valeur null s'il n'existe pas.</returns>
      <param name="value">Identificateur de la catégorie à consulter. </param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Key">
      <summary>Obtient un <see cref="T:System.ComponentModel.CategoryAttribute" /> représentant la catégorie Clavier.</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> pour la catégorie Clavier.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Layout">
      <summary>Obtient un <see cref="T:System.ComponentModel.CategoryAttribute" /> représentant la catégorie Disposition.</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> pour la catégorie Disposition.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Mouse">
      <summary>Obtient un <see cref="T:System.ComponentModel.CategoryAttribute" /> représentant la catégorie Souris.</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> pour la catégorie Souris.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.WindowStyle">
      <summary>Obtient un <see cref="T:System.ComponentModel.CategoryAttribute" /> représentant la catégorie Style de fenêtre.</summary>
      <returns>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> pour la catégorie Style de fenêtre.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentCollection">
      <summary>Obtient un composant spécifique dans le conteneur.</summary>
    </member>
    <member name="T:System.ComponentModel.DataErrorsChangedEventArgs">
      <summary>Fournit des données pour l'événement <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DataErrorsChangedEventArgs.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DataErrorsChangedEventArgs" />. </summary>
      <param name="propertyName">Nom de la propriété pour laquelle les erreurs ont été modifiées, ou la valeur est null ou <see cref="F:System.String.Empty" /> pour les erreurs au niveau de l'entité.</param>
    </member>
    <member name="P:System.ComponentModel.DataErrorsChangedEventArgs.PropertyName">
      <summary>Obtient le nom de la propriété pour laquelle les erreurs ont été modifiées, ou la valeur est null ou la <see cref="F:System.String.Empty" /> pour les erreurs au niveau de l'entité.</summary>
      <returns>Nom de la propriété affectée, ou la valeur est null ou <see cref="F:System.String.Empty" /> pour les erreurs au niveau de l'entité.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultValueAttribute">
      <summary>Spécifie la valeur par défaut d'une propriété.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DefaultValueAttribute" /> avec une valeur <see cref="T:System.Boolean" />.</summary>
      <param name="value">
        <see cref="T:System.Boolean" /> étant la valeur part défaut. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Byte)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DefaultValueAttribute" /> avec un entier 8 bits non signé.</summary>
      <param name="value">Valeur par défaut de type entier 8 bits non signé. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Char)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DefaultValueAttribute" /> avec un caractère Unicode.</summary>
      <param name="value">Valeur par défaut de type caractère Unicode. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Double)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DefaultValueAttribute" /> avec un nombre à virgule flottante double précision.</summary>
      <param name="value">Nombre à virgule flottante double précision étant la valeur par défaut. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int16)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DefaultValueAttribute" /> avec un entier 16 bits signé.</summary>
      <param name="value">Valeur par défaut de type entier 16 bits signé. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DefaultValueAttribute" /> avec un entier 32 bits signé.</summary>
      <param name="value">Valeur par défaut de type entier 32 bits signé. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int64)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DefaultValueAttribute" /> avec un entier 64 bits signé.</summary>
      <param name="value">Valeur par défaut de type entier 64 bits signé. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DefaultValueAttribute" />.</summary>
      <param name="value">
        <see cref="T:System.Object" /> représentant la valeur par défaut. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Single)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DefaultValueAttribute" /> avec un nombre à virgule flottante simple précision.</summary>
      <param name="value">Nombre à virgule flottante simple précision étant la valeur par défaut. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DefaultValueAttribute" />, à l'aide de <see cref="T:System.String" />.</summary>
      <param name="value">
        <see cref="T:System.String" /> étant la valeur part défaut. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Type,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DefaultValueAttribute" />, en convertissant la valeur spécifiée en type spécifié et en utilisant une culture dite indifférente comme contexte de traduction.</summary>
      <param name="type">
        <see cref="T:System.Type" /> représentant le type dans lequel la valeur doit être convertie. </param>
      <param name="value">
        <see cref="T:System.String" /> pouvant être converti dans le type à l'aide de <see cref="T:System.ComponentModel.TypeConverter" /> pour le type et les États-Unis.culture américaine.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.Equals(System.Object)">
      <summary>Renvoie une valeur indiquant si la valeur de l'objet donné est égale à l'<see cref="T:System.ComponentModel.DefaultValueAttribute" /> actuel.</summary>
      <returns>La valeur est true si la valeur de l'objet donné est égale à celle de la valeur actuelle, sinon false.</returns>
      <param name="obj">Objet dont l'égalité de la valeur doit être vérifiée. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.GetHashCode"></member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.SetValue(System.Object)">
      <summary>Définit la valeur par défaut de la propriété à laquelle cet attribut est lié.</summary>
      <param name="value">Valeur par défaut.</param>
    </member>
    <member name="P:System.ComponentModel.DefaultValueAttribute.Value">
      <summary>Obtient la valeur par défaut de la propriété à laquelle cet attribut est lié.</summary>
      <returns>
        <see cref="T:System.Object" /> représentant la valeur par défaut de la propriété à laquelle cet attribut est lié.</returns>
    </member>
    <member name="T:System.ComponentModel.DescriptionAttribute">
      <summary>Spécifie la description d'une propriété ou d'un événement.</summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DescriptionAttribute" /> sans paramètre.</summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DescriptionAttribute" /> avec une description.</summary>
      <param name="description">Texte de description. </param>
    </member>
    <member name="F:System.ComponentModel.DescriptionAttribute.Default">
      <summary>Spécifie la valeur par défaut de l'<see cref="T:System.ComponentModel.DescriptionAttribute" /> (chaîne vide ("")).Ce champ static est en lecture seule.</summary>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.Description">
      <summary>Obtient la description stockée dans cet attribut.</summary>
      <returns>Description stockée dans cet attribut.</returns>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.DescriptionValue">
      <summary>Obtient ou définit la chaîne stockée comme description.</summary>
      <returns>Chaîne stockée comme description.La valeur par défaut est une chaîne vide ("").</returns>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.Equals(System.Object)">
      <summary>Renvoie une valeur indiquant si la valeur de l'objet spécifié est égale à l'<see cref="T:System.ComponentModel.DescriptionAttribute" /> actuel.</summary>
      <returns>La valeur est true si la valeur de l'objet spécifié est égale à l'<see cref="T:System.ComponentModel.DescriptionAttribute" /> actuel, sinon false.</returns>
      <param name="obj">Objet dont l'égalité de la valeur doit être vérifiée. </param>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.GetHashCode"></member>
    <member name="T:System.ComponentModel.DoWorkEventArgs">
      <summary>Fournit des données pour l'événement <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DoWorkEventArgs.#ctor(System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DoWorkEventArgs" />.</summary>
      <param name="argument">Spécifie un argument pour une opération asynchrone.</param>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Argument">
      <summary>Obtient une valeur représentant l'argument d'une opération asynchrone.</summary>
      <returns>
        <see cref="T:System.Object" /> représentant l'argument d'une opération asynchrone.</returns>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Cancel">
      <summary>Obtient ou définit une valeur indiquant si l'opération asynchrone a été annulée.</summary>
      <returns>La valeur est true si l'opération a été annulée, sinon false.La valeur par défaut est false.</returns>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Result">
      <summary>Obtient ou définit une valeur représentant le résultat d'une opération asynchrone.</summary>
      <returns>
        <see cref="T:System.Object" /> représentant le résultat d'une opération asynchrone.</returns>
    </member>
    <member name="T:System.ComponentModel.DoWorkEventHandler">
      <summary>Représente la méthode qui doit gérer l'événement <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> déclenché lorsque la méthode <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> est appelée.</summary>
      <param name="sender">Source de l'événement. </param>
      <param name="e">
        <see cref="T:System.ComponentModel.DoWorkEventArgs" /> qui contient les données de l'événement. </param>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableAttribute">
      <summary>Spécifie qu'une propriété ou une méthode peut être affichée dans un éditeur.Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> où <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" /> est défini sur sa valeur par défaut.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor(System.ComponentModel.EditorBrowsableState)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> avec un <see cref="T:System.ComponentModel.EditorBrowsableState" />.</summary>
      <param name="state">
        <see cref="T:System.ComponentModel.EditorBrowsableState" /> à définir sur <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" />. </param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.Equals(System.Object)">
      <summary>Renvoie une valeur indiquant si la valeur de l'objet spécifié est égale à l'<see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> actuel.</summary>
      <returns>La valeur est true si la valeur de l'objet donné est égale à celle de la valeur actuelle, sinon false.</returns>
      <param name="obj">Objet dont l'égalité de la valeur doit être vérifiée. </param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.GetHashCode"></member>
    <member name="P:System.ComponentModel.EditorBrowsableAttribute.State">
      <summary>Obtient l'état de possibilité d'exploration de la propriété ou de la méthode.</summary>
      <returns>
        <see cref="T:System.ComponentModel.EditorBrowsableState" /> représentant l'état de possibilité d'exploration de la propriété ou de la méthode.</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableState">
      <summary>Spécifie la possibilité d'exploration d'une propriété ou d'une méthode dans un éditeur. </summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Advanced">
      <summary>La propriété ou la méthode est une fonctionnalité que seuls les utilisateurs expérimentés doivent voir.Un éditeur peut afficher ou masquer de telles propriétés.</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Always">
      <summary>La propriété ou la méthode peut toujours être explorée dans un éditeur.</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Never">
      <summary>La propriété ou la méthode ne peut jamais être explorée dans un éditeur.</summary>
    </member>
    <member name="T:System.ComponentModel.IChangeTracking">
      <summary>Définit le mécanisme permettant de rechercher des modifications dans l'objet et de réinitialiser l'état modifié. </summary>
    </member>
    <member name="M:System.ComponentModel.IChangeTracking.AcceptChanges">
      <summary>Rétablit l'objet à son état non modifié en acceptant les modifications. </summary>
    </member>
    <member name="P:System.ComponentModel.IChangeTracking.IsChanged">
      <summary>Obtient l'état modifié de l'objet.</summary>
      <returns>La valeur est true si le contenu de l'objet a été modifié depuis le dernier appel vers <see cref="M:System.ComponentModel.IChangeTracking.AcceptChanges" />, sinon false. </returns>
    </member>
    <member name="T:System.ComponentModel.IComponent">
      <summary>Obtient ou définit le <see cref="T:System.ComponentModel.ISite" /> associé au composant lorsqu'il est implémenté par une classe.</summary>
    </member>
    <member name="E:System.ComponentModel.IComponent.Disposed">
      <summary>Ajoute un gestionnaire d'événements qui doit écouter l'événement Disposed pour le composant.</summary>
    </member>
    <member name="P:System.ComponentModel.IComponent.Site">
      <summary>Obtient ou définit le <see cref="T:System.ComponentModel.ISite" /> associé au composant lorsqu'il est implémenté par une classe.</summary>
      <returns>Composant associé à ce <see cref="T:System.ComponentModel.ISite" />.</returns>
    </member>
    <member name="T:System.ComponentModel.IContainer">
      <summary>Fournit des fonctionnalités aux conteneurs.Les conteneurs sont des objets contenant la valeur zéro ou plusieurs composants de façon logique.</summary>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent)">
      <summary>Ajoute un composant au conteneur.</summary>
      <param name="component">Composant à ajouter.</param>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent,System.String)">
      <summary>Ajoute un composant au conteneur.</summary>
      <param name="component">Composant à ajouter.</param>
      <param name="name">Nom d'identification du composant.</param>
    </member>
    <member name="P:System.ComponentModel.IContainer.Components">
      <summary>Obtient tous les composants contenus dans <see cref="T:System.ComponentModel.IContainer" />.</summary>
      <returns>Collection de composants du <see cref="T:System.ComponentModel.IContainer" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IContainer.Remove(System.ComponentModel.IComponent)">
      <summary>Supprime un composant du conteneur.</summary>
      <param name="component">Composant à supprimer.</param>
    </member>
    <member name="T:System.ComponentModel.IEditableObject">
      <summary>Représente un objet en mode édition qui peut valider ou annuler des modifications. </summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.BeginEdit">
      <summary>Provoque le passage de l'objet en mode édition.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.CancelEdit">
      <summary>Provoque l'abandon du mode édition par l'objet et le retour à la valeur précédente non modifiée.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.EndEdit">
      <summary>Provoque l'abandon du mode édition par l'objet et la validation de la valeur modifiée.</summary>
    </member>
    <member name="T:System.ComponentModel.INotifyDataErrorInfo">
      <summary>Définit des membres que les classes d'entité de données peuvent implémenter pour fournir un support de validation personnalisé synchrone et asynchrone.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged">
      <summary>Se produit quand les erreurs de validation ont été modifiées pour une propriété ou pour l'ensemble de l'entité. </summary>
    </member>
    <member name="M:System.ComponentModel.INotifyDataErrorInfo.GetErrors(System.String)">
      <summary>Obtient les erreurs de validation pour une propriété spécifiée ou pour l'ensemble de l'entité.</summary>
      <returns>Erreurs de validation pour la propriété ou l'entité.</returns>
      <param name="propertyName">Nom de la propriété pour laquelle récupérer des erreurs de validation, ou bien null ou <see cref="F:System.String.Empty" /> pour récupérer des erreurs au niveau de l'entité.</param>
    </member>
    <member name="P:System.ComponentModel.INotifyDataErrorInfo.HasErrors">
      <summary>Obtient une valeur indiquant si l'entité comporte des erreurs de validation. </summary>
      <returns>La valeur est true si l'entité comporte actuellement des erreurs de validation, sinon false.</returns>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanged">
      <summary>Notifie les clients qu'une valeur de propriété a été modifiée.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
      <summary>Se produit lorsqu'une valeur de propriété est modifiée.</summary>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanging">
      <summary>Définit un événement pour notifier les clients d'une modification de valeur de propriété.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging">
      <summary>Se produit lorsqu'une valeur de propriété change.</summary>
    </member>
    <member name="T:System.ComponentModel.IRevertibleChangeTracking">
      <summary>Fournit une prise en charge pour la restauration des modifications.</summary>
    </member>
    <member name="M:System.ComponentModel.IRevertibleChangeTracking.RejectChanges">
      <summary>Rétablit l'objet à son état non modifié en rejetant les modifications. </summary>
    </member>
    <member name="T:System.ComponentModel.ISite">
      <summary>Fournit les fonctionnalités requises par les sites.Les sites permettent de lier un composant à un conteneur et d'établir des communications entre eux. Ceci donne au conteneur un moyen de gérer ses composants.</summary>
    </member>
    <member name="P:System.ComponentModel.ISite.Component">
      <summary>Obtient le composant associé à <see cref="T:System.ComponentModel.ISite" /> lorsqu'il est implémenté par une classe.</summary>
      <returns>Composant associé à ce <see cref="T:System.ComponentModel.ISite" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Container">
      <summary>Obtient le conteneur associé à <see cref="T:System.ComponentModel.ISite" /> lorsqu'il est implémenté par une classe.</summary>
      <returns>Conteneur associé à <see cref="T:System.ComponentModel.ISite" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.DesignMode">
      <summary>Détermine si le composant est en mode Design lorsqu'il est implémenté par une classe.</summary>
      <returns>La valeur est true si le mode Design est activé, sinon false.</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Name">
      <summary>Obtient ou définit le nom du composant associé à <see cref="T:System.ComponentModel.ISite" /> lorsqu'il est implémenté par une classe.</summary>
      <returns>Nom du composant.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary>Fournit des informations de contexte à un convertisseur de type ou à un éditeur de valeurs afin que celui-ci puisse effectuer une conversion.</summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary>Obtient le conteneur avec le jeu d'objets pour ce formateur.</summary>
      <returns>Conteneur avec le jeu d'objets pour ce formateur.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary>Obtient l'instance qui appelle la méthode sur l'objet formateur.</summary>
      <returns>Instance qui appelle la méthode sur l'objet formateur.</returns>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary>Déclenche l'événement <see cref="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary>Obtient une valeur précisant si cet objet peut être modifié.</summary>
      <returns>La valeur est true si cet objet peut être modifié, sinon false.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary>Obtient le <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui signale l'élément de contexte donné.</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui signale l'élément de contexte donné.</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary>Spécifie le sens d'une opération de tri.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary>Trie dans l'ordre croissant.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary>Trie dans l'ordre décroissant.</summary>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventArgs">
      <summary>Fournit des données pour l'événement <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ProgressChangedEventArgs.#ctor(System.Int32,System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ProgressChangedEventArgs" />.</summary>
      <param name="progressPercentage">Pourcentage d'une opération asynchrone terminée.</param>
      <param name="userState">État d'utilisateur unique.</param>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage">
      <summary>Obtient le pourcentage d'une opération asynchrone terminée.</summary>
      <returns>Valeur en pourcentage indiquant la progression de l'opération asynchrone.</returns>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.UserState">
      <summary>Obtient un état d'utilisateur unique.</summary>
      <returns>
        <see cref="T:System.Object" /> indiquant l'état d'utilisateur.</returns>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventHandler">
      <summary>Représente la méthode qui doit gérer l'événement <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> déclenché lorsqu'une progression est signalée par un <see cref="T:System.ComponentModel.BackgroundWorker" />.</summary>
      <param name="sender">Source de l'événement. </param>
      <param name="e">
        <see cref="T:System.ComponentModel.ProgressChangedEventArgs" /> contenant les données de l'événement. </param>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventArgs">
      <summary>Fournit des données pour l'événement <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventArgs.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />.</summary>
      <param name="propertyName">Nom de la propriété qui a été modifiée. </param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName">
      <summary>Obtient le nom de la propriété qui a été modifiée.</summary>
      <returns>Nom de la propriété modifiée <see cref="F:System.String.Empty" /> ou null si toutes les propriétés ont été modifiées.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventHandler">
      <summary>Représente la méthode qui gérera l'événement <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</summary>
      <param name="sender">Source de l'événement. </param>
      <param name="e">
        <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> contenant les données d'événement. </param>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventArgs">
      <summary>Fournit des données pour l'événement <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangingEventArgs.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe  <see cref="T:System.ComponentModel.PropertyChangingEventArgs" />.</summary>
      <param name="propertyName">Nom de la propriété en cours de modification.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangingEventArgs.PropertyName">
      <summary>Obtient le nom de la propriété en cours de modification.</summary>
      <returns>Nom de la propriété en cours de modification.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventHandler">
      <summary>Représente une méthode qui gérera l'événement <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" />.</summary>
      <param name="sender">Source de l'événement.</param>
      <param name="e">Données de l'événement.</param>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary>Fournit la description d'une propriété.</summary>
    </member>
    <member name="T:System.ComponentModel.ReadOnlyAttribute">
      <summary>Spécifie si la propriété à laquelle est appliqué cet attribut est en lecture seule ou en lecture/écriture.</summary>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ReadOnlyAttribute" />.</summary>
      <param name="isReadOnly">La valeur est true pour indiquer que la propriété à laquelle est appliqué cet attribut est en lecture seule, sinon false pour indiquer que la propriété est en lecture/écriture.</param>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)">
      <summary>Renvoie une valeur indiquant si cette instance et un objet spécifié sont égaux.</summary>
      <returns>La valeur est true si <paramref name="obj" /> est égal à cette instance, sinon false. </returns>
      <param name="obj">Objet auquel comparer. </param>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.GetHashCode">
      <summary>Renvoie le code de hachage de cette instance. </summary>
      <returns>Code de hachage pour le <see cref="T:System.ComponentModel.ReadOnlyAttribute" /> actuel.</returns>
    </member>
    <member name="P:System.ComponentModel.ReadOnlyAttribute.IsReadOnly">
      <summary>Obtient une valeur indiquant si la propriété à laquelle est appliqué cet attribut est en lecture seule. </summary>
      <returns>La valeur est true si la propriété à laquelle est appliqué cet attribut est en lecture seule, sinon false si la propriété est en lecture/écriture. </returns>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventArgs">
      <summary>Fournit des données pour l'événement <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />.</summary>
    </member>
    <member name="M:System.ComponentModel.RunWorkerCompletedEventArgs.#ctor(System.Object,System.Exception,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" />.</summary>
      <param name="result">Résultat de l'opération asynchrone.</param>
      <param name="error">Toute erreur qui s'est produite pendant l'opération asynchrone.</param>
      <param name="cancelled">Valeur qui indique si l'opération asynchrone a été annulée.</param>
    </member>
    <member name="P:System.ComponentModel.RunWorkerCompletedEventArgs.Result">
      <summary>Obtient une valeur qui représente le résultat d'une opération asynchrone.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente le résultat d'une opération asynchrone.</returns>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventHandler">
      <summary>Représente la méthode gère l'événement <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> déclenché quand opération exécutée par un <see cref="T:System.ComponentModel.BackgroundWorker" /> est terminée, a été annulée ou a levé une exception.</summary>
      <param name="sender">Source de l'événement. </param>
      <param name="e">
        <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" /> contenant les données d'événement. </param>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary>Propose un procédé unifié pour convertir les types de valeurs en d'autres types. <see cref="T:System.ComponentModel.TypeConverter" /> prend généralement en charge la conversion chaîne à objet, que ce soit pour les éditeurs de propriétés dans les environnements de conception ou pour pouvoir utiliser le XAML.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeConverter" />. </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Renvoie une valeur indiquant si le convertisseur de type peut convertir un objet du type spécifié vers le type de ce convertisseur.</summary>
      <returns>La valeur est true si ce convertisseur peut effectuer la conversion, sinon false.</returns>
      <param name="context">Objet fournissant un contexte de format.</param>
      <param name="sourceType">Type à partir duquel vous souhaitez convertir.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary>Renvoie une valeur indiquant si le convertisseur de type peut convertir un objet du type spécifié vers le type de ce convertisseur.</summary>
      <returns>La valeur est true si ce convertisseur peut effectuer la conversion, sinon false.</returns>
      <param name="sourceType">Type à partir duquel vous souhaitez convertir.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Indique si le convertisseur de type peut convertir un objet vers le type spécifié. </summary>
      <returns>La valeur est true si ce convertisseur peut effectuer la conversion, sinon false.</returns>
      <param name="context">Objet fournissant un contexte de format.</param>
      <param name="destinationType">Type vers lequel effectuer la conversion.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary>Indique si le convertisseur de type peut convertir un objet vers le type spécifié. </summary>
      <returns>La valeur est true si ce convertisseur peut effectuer la conversion, sinon false.</returns>
      <param name="destinationType">Type vers lequel effectuer la conversion.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Effectue la conversion de la valeur spécifiée vers le type de conversion prévu pour le convertisseur.</summary>
      <returns>Valeur convertie.</returns>
      <param name="context">Objet fournissant un contexte de format. </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> à utiliser comme culture actuelle. </param>
      <param name="value">Valeur à convertir vers le type de ce convertisseur.</param>
      <exception cref="T:System.NotImplementedException">
        <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> non implémentée dans le <see cref="T:System.ComponentModel.TypeConverter" /> de base.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary>Effectue la conversion de la valeur spécifiée vers le type de ce convertisseur.</summary>
      <returns>Valeur convertie.</returns>
      <param name="value">Valeur à convertir vers le type de ce convertisseur.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary>Convertit le texte spécifié en objet.</summary>
      <returns>Objet représentant la chaîne de caractères convertie.</returns>
      <param name="text">Représentation textuelle de l'objet à convertir.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet de valeur spécifiée vers le type spécifié.</summary>
      <returns>Objet converti.</returns>
      <param name="context">Objet fournissant un contexte de format. </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> à utiliser comme culture actuelle. </param>
      <param name="value">Objet à convertir.</param>
      <param name="destinationType">Type dans lequel convertir l'objet.</param>
      <exception cref="T:System.NotImplementedException">
        <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" /> non implémentée dans le <see cref="T:System.ComponentModel.TypeConverter" /> de base.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary>Convertit l'objet de valeur spécifiée vers le type spécifié.</summary>
      <returns>Objet converti.</returns>
      <param name="value">Objet à convertir.</param>
      <param name="destinationType">Type dans lequel convertir l'objet.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary>Convertit l'objet spécifié en une représentation sous forme de chaîne.</summary>
      <returns>Objet représentant la valeur convertie.</returns>
      <param name="value">Objet à convertir.</param>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>Spécifie la classe à utiliser comme convertisseur de type pour le type ou la propriété auquel cet attribut est lié.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeConverterAttribute" />. </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeConverterAttribute" />, en utilisant le nom de type spécifié comme convertisseur de données pour l'objet auquel cet attribut est lié.</summary>
      <param name="typeName">Nom complet de la classe à utiliser pour la conversion de données de l'objet auquel cet attribut est lié.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeConverterAttribute" />, en utilisant le nom de type spécifié comme convertisseur de données pour l'objet auquel cet attribut est lié.</summary>
      <param name="type">Type de classe de convertisseur à utiliser pour la conversion de données pour l'objet auquel cet attribut est lié.</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>Obtient le nom de type complet du type à utiliser comme convertisseur pour l'objet auquel cet attribut est lié.</summary>
      <returns>Nom de type complet du type à utiliser comme convertisseur pour l'objet auquel cet attribut est lié, ou chaîne vide («  ») s'il n'y en a pas.La valeur par défaut est une chaîne vide («  »).</returns>
    </member>
    <member name="T:System.Diagnostics.Debug">
      <summary>Fournit un jeu de méthodes et de propriétés qui aident à déboguer votre code.Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean)">
      <summary>Vérifie une condition et renvoie la pile des appels si la condition a la valeur false.</summary>
      <param name="condition">Expression conditionnelle à évaluer.Si la condition a la valeur true, la pile des appels n'est pas affichée.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)">
      <summary>Vérifie une condition et affiche un message spécifié si la condition a la valeur false.</summary>
      <param name="condition">Expression conditionnelle à évaluer.Si la condition a la valeur true, le message spécifié n'est pas affiché.</param>
      <param name="message">Message à afficher. </param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)">
      <summary>Vérifie une condition et affiche deux messages spécifiés si la condition a la valeur false.</summary>
      <param name="condition">Expression conditionnelle à évaluer.Si la condition a la valeur true, les messages spécifiés ne sont pas affichés.</param>
      <param name="message">Message à afficher. </param>
      <param name="detailMessage">Message détaillé à afficher. </param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])">
      <summary>Vérifie une condition et renvoie le message et la pile des appels si la condition a la valeur false. </summary>
      <param name="condition">Expression conditionnelle à évaluer.Si la condition a la valeur true, le message spécifié et la pile des appels ne sont pas affichés.</param>
      <param name="message">Message à afficher.</param>
      <param name="detailMessageFormat">Chaîne de format composite contenant du texte avec aucun ou plusieurs éléments de mise en forme qui correspondent à des objets dans le tableau <paramref name="args" />.</param>
      <param name="args">Tableau d'objets contenant aucun ou plusieurs objets à mettre en forme.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.Object)">
      <summary>Écrit la valeur de la méthode <see cref="M:System.Object.ToString" /> d'un objet spécifié dans le débogueur en utilisant la fonction OutputDebugString.</summary>
      <param name="value">Objet dont le nom est envoyé au débogueur en utilisant la fonction OutputDebugString.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String)">
      <summary>Écrit un message spécifié suivi d'une marque de fin de ligne dans le débogueur en utilisant la fonction OutputDebugString.</summary>
      <param name="message">Message à écrire dans le débogueur. </param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String,System.Object[])">
      <summary>Écrit une chaîne mise en forme suivie d'une marque de fin de ligne dans le débogueur en utilisant la fonction OutputDebugString.</summary>
      <param name="format">Chaîne de format composite contenant du texte avec aucun ou plusieurs éléments de mise en forme qui correspondent à des objets dans le tableau <paramref name="args" />.</param>
      <param name="args">Tableau d'objets qui contient zéro ou plusieurs objets à mettre en forme. </param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)">
      <summary>Écrit un message spécifié suivi d'une marque de fin de ligne dans le débogueur en utilisant la fonction OutputDebugString si la condition est true.</summary>
      <param name="condition">Expression conditionnelle à évaluer.Si la condition a la valeur true, le message spécifié est écrit dans le débogueur.</param>
      <param name="message">Message à écrire dans le débogueur. </param>
    </member>
    <member name="T:System.Diagnostics.Stopwatch">
      <summary>Fournit un jeu de méthodes et de propriétés que vous pouvez utiliser pour mesurer le temps écoulé précisément.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.#ctor">
      <summary>Crée une instance de la classe <see cref="T:System.Diagnostics.Stopwatch" />.</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.Elapsed">
      <summary>Obtient le temps total écoulé mesuré par l'instance actuelle.</summary>
      <returns>Renvoie <see cref="T:System.TimeSpan" />.</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds">
      <summary>Obtient le temps total écoulé mesuré par l'instance actuelle, en millisecondes.</summary>
      <returns>Renvoie <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedTicks">
      <summary>Obtient le temps écoulé total mesuré par l'instance actuelle, en graduations de la minuterie.</summary>
      <returns>Renvoie <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.Frequency">
      <summary>Obtient la fréquence de la minuterie en nombre de graduations par seconde. Ce champ est en lecture seule.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetElapsedDateTimeTicks">
      <summary>Obtient le nombre de graduations représentant la date et l'heure de cette instance.</summary>
      <returns>Renvoie <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetRawElapsedTicks">
      <summary>Obtient le temps écoulé total mesuré par l'instance actuelle, en graduations de la minuterie.</summary>
      <returns>Renvoie <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetTimestamp">
      <summary>Obtient le nombre actuel de graduations dans le mécanisme de minuterie (Timer).</summary>
      <returns>Renvoie <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.IsHighResolution">
      <summary>Indique si la minuterie est basée sur un compteur de performance haute résolution. Ce champ est en lecture seule.</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.IsRunning">
      <summary>Obtient une valeur indiquant si la minuterie Stopwatch est en cours d'exécution.</summary>
      <returns>Renvoie <see cref="T:System.Boolean" />.La valeur est true si l'instance Stopwatch est en cours d'exécution et mesure le temps écoulé pour un intervalle, sinon false. </returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Reset">
      <summary>Arrête la mesure d'intervalle de temps et remet le temps écoulé à zéro.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Restart">
      <summary>Arrête la mesure d'intervalle de temps, réinitialise le temps écoulé sur zéro puis commence à le mesurer.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Start">
      <summary>Démarre ou reprend la mesure du temps écoulé pour un intervalle.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.StartNew">
      <summary>Initialise une nouvelle instance Stopwatch, définit la propriété de temps écoulé sur zéro et commence à mesurer le temps écoulé.</summary>
      <returns>Renvoie <see cref="T:System.Diagnostics.Stopwatch" />.</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Stop">
      <summary>Cesse de mesurer le temps écoulé pour un intervalle.</summary>
    </member>
    <member name="T:System.IO.InvalidDataException">
      <summary>Exception qui est levée lorsque le format d'un flux de données n'est pas valide.</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.InvalidDataException" />.</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.InvalidDataException" /> avec un message d'erreur spécifié.</summary>
      <param name="message">Message d'erreur expliquant la raison de l'exception.</param>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.InvalidDataException" /> avec une référence à l'exception interne qui est la cause de cette exception.</summary>
      <param name="message">Message d'erreur expliquant la raison de l'exception.</param>
      <param name="innerException">Exception qui est la cause de l'exception actuelle. Si le paramètre <paramref name="innerException" /> n'a pas la valeur null, l'exception actuelle est levée dans un bloc catch gérant l'exception interne.</param>
    </member>
    <member name="T:System.Net.WebUtility">
      <summary>Fournit des méthodes pour l'encodage et le décodage d'URL lors du traitement de demandes Web. </summary>
    </member>
    <member name="M:System.Net.WebUtility.HtmlDecode(System.String)">
      <summary>Convertit une chaîne qui a été encodée en HTML pour une transmission HTTP en chaîne décodée.</summary>
      <returns>Chaîne décodée.</returns>
      <param name="value">Chaîne à décoder.</param>
    </member>
    <member name="M:System.Net.WebUtility.HtmlEncode(System.String)">
      <summary>Convertit une chaîne en chaîne encodée en HTML.</summary>
      <returns>Chaîne codée.</returns>
      <param name="value">Chaîne à encoder.</param>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecode(System.String)">
      <summary>Convertit en chaîne décodée une chaîne qui a été encodée pour une transmission dans une URL.</summary>
      <returns>Chaîne décodée.</returns>
      <param name="encodedValue">Chaîne à décoder.</param>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>Convertit un tableau d'octets encodé URL en chaîne décodée, à l'aide de l'objet d'encodage spécifié, en commençant à l'emplacement spécifié dans le tableau et en continuant pour le nombre d'octets spécifié.</summary>
      <returns>Chaîne décodée.</returns>
      <param name="encodedValue">Tableau d'octets à décoder.</param>
      <param name="offset">Position dans le tableau d'octets où commencer le décodage.</param>
      <param name="count">Nombre d'octets à décoder.</param>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncode(System.String)">
      <summary>Code une chaîne d'URL.</summary>
      <returns>Chaîne codée.</returns>
      <param name="value">Texte à encoder.</param>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>Convertit un tableau d'octets en chaîne encodé URL, en commençant à l'emplacement spécifié dans le tableau et en continuant pour le nombre d'octets spécifié.</summary>
      <returns>Chaîne codée.</returns>
      <param name="value">Tableau d'octets à encoder.</param>
      <param name="offset">Position dans le tableau d'octets où commencer l'encodage.</param>
      <param name="count">Nombre d'octets à encoder.</param>
    </member>
    <member name="T:System.Text.RegularExpressions.Capture">
      <summary>Représente les résultats d'une capture de sous-expression unique. </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Index">
      <summary>Position dans la chaîne d'origine où a été trouvé le premier caractère de la sous-chaîne capturée.</summary>
      <returns>Position de départ de base zéro dans la chaîne d'origine où a été trouvée la sous-chaîne capturée.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Length">
      <summary>Longueur de la sous-chaîne capturée.</summary>
      <returns>Longueur de la sous-chaîne capturée.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Capture.ToString">
      <summary>Obtient la sous-chaîne capturée à partir de la chaîne d'entrée.</summary>
      <returns>Sous-chaîne réelle capturée par la correspondance.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Value">
      <summary>Obtient la sous-chaîne capturée à partir de la chaîne d'entrée.</summary>
      <returns>Sous-chaîne réelle capturée par la correspondance.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.CaptureCollection">
      <summary>Représente l'ensemble des captures effectuées par un seul groupe de capture. </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copie tous les éléments de la collection dans le tableau donné en commençant à l'index spécifié.</summary>
      <param name="array">Tableau dans lequel la collection doit être copiée. </param>
      <param name="arrayIndex">Position à laquelle la copie doit commencer dans le tableau de destination. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> est en dehors des limites de <paramref name="array" />.– ou –<paramref name="arrayIndex" /> plus <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" /> sont en dehors des limites de <paramref name="array" />. </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Count">
      <summary>Obtient le nombre de sous-chaînes capturées par le groupe.</summary>
      <returns>Nombre d'éléments dans la <see cref="T:System.Text.RegularExpressions.CaptureCollection" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.GetEnumerator">
      <summary>Fournit un énumérateur qui itère au sein de la collection.</summary>
      <returns>Objet contenant tous les objets <see cref="T:System.Text.RegularExpressions.Capture" /> dans <see cref="T:System.Text.RegularExpressions.CaptureCollection" />.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsReadOnly">
      <summary>Obtient une valeur indiquant si la collection est en lecture seule.</summary>
      <returns>La valeur est true dans tous les cas.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsSynchronized">
      <summary>Obtient une valeur indiquant si l'accès à la collection est synchronisé (thread-safe).</summary>
      <returns>La valeur est false dans tous les cas.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)">
      <summary>Obtient un membre individuel de la collection.</summary>
      <returns>Sous-chaîne capturée à la position <paramref name="i" /> dans la collection.</returns>
      <param name="i">Index dans la collection de captures. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> est inférieur à 0 ou supérieur à <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" />. </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l'accès à la collection.</summary>
      <returns>Objet permettant de synchroniser l'accès à la collection.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Group">
      <summary>Représente les résultats d'un groupe de capture unique.</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Captures">
      <summary>Obtient une collection de toutes les captures correspondant au groupe de capture, dans l'ordre du plus profond et du plus à gauche (ou dans l'ordre du plus profond et du plus à droite, si l'expression régulière est modifiée par l'option <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" />).La collection peut contenir entre zéro et plusieurs éléments.</summary>
      <returns>Collection de sous-chaînes correspondant au groupe.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Success">
      <summary>Obtient une valeur indiquant si la correspondance est réussie.</summary>
      <returns>La valeur est true si la correspondance réussit, sinon false.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.GroupCollection">
      <summary>Représente une collection de groupes capturés dans une correspondance unique.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copie tous les éléments de la collection dans le tableau donné en commençant à l'index spécifié.</summary>
      <param name="array">Tableau dans lequel la collection doit être copiée. </param>
      <param name="arrayIndex">Position à laquelle la copie doit commencer dans le tableau de destination. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> a la valeur null.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> est en dehors des limites de <paramref name="array" />.– ou –<paramref name="arrayIndex" /> plus <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> est en dehors des limites du <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Count">
      <summary>Renvoie le nombre de groupes de la collection.</summary>
      <returns>Nombre de groupes de la collection.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator">
      <summary>Renvoie un énumérateur pouvant parcourir la collection.</summary>
      <returns>Objet contenant tous les objets <see cref="T:System.Text.RegularExpressions.Group" /> dans <see cref="T:System.Text.RegularExpressions.GroupCollection" />.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly">
      <summary>Obtient une valeur indiquant si la collection est en lecture seule.</summary>
      <returns>La valeur est true si cette <see cref="T:System.Text.RegularExpressions.GroupCollection" /> est en lecture seule, sinon false..</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized">
      <summary>Obtient une valeur indiquant si l'accès à la <see cref="T:System.Text.RegularExpressions.GroupCollection" /> est synchronisé (thread-safe).</summary>
      <returns>La valeur est false dans tous les cas.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)">
      <summary>Permet l'accès à un membre de la collection via un index d'entiers.</summary>
      <returns>Membre de la collection spécifiée par <paramref name="groupnum" />.</returns>
      <param name="groupnum">Index de base zéro du membre de la collection à récupérer. </param>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)">
      <summary>Permet l'accès à un membre de la collection via un index de chaînes.</summary>
      <returns>Membre de la collection spécifiée par <paramref name="groupname" />.</returns>
      <param name="groupname">Nom du groupe de capture.</param>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.SyncRoot">
      <summary>Obtient un objet pouvant être utilisé pour synchroniser l'accès à la <see cref="T:System.Text.RegularExpressions.GroupCollection" />.</summary>
      <returns>Copie de l'objet <see cref="T:System.Text.RegularExpressions.Match" /> à synchroniser.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Match">
      <summary>Représente les résultats d'une correspondance d'expression régulière unique.</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Empty">
      <summary>Obtient le groupe vide.Toutes les correspondances infructueuses renvoient cette correspondance vide.</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.Match" /> vide.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Groups">
      <summary>Obtient une collection de groupes correspondant à l'expression régulière.</summary>
      <returns>Groupes de caractères correspondant au modèle.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.NextMatch">
      <summary>Renvoie un nouvel objet <see cref="T:System.Text.RegularExpressions.Match" /> avec les résultats de la correspondance suivante, en commençant à la position à laquelle la dernière correspondance s'est terminée (au niveau du caractère qui se trouve au-delà du dernier caractère correspondant).</summary>
      <returns>Correspondance d'expression régulière suivante.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Result(System.String)">
      <summary>Renvoie le déploiement du motif de remplacement spécifié. </summary>
      <returns>Version déployée du paramètre <paramref name="replacement" />.</returns>
      <param name="replacement">Motif de remplacement à utiliser. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replacement" /> a la valeur null.</exception>
      <exception cref="T:System.NotSupportedException">Le déploiement n'est pas autorisé pour ce modèle.</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchCollection">
      <summary>Représente l'ensemble des correspondances exactes trouvées en appliquant de manière itérative une expression régulière à la chaîne d'entrée.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copie tous les éléments de la collection dans le tableau donné en commençant à l'index spécifié.</summary>
      <param name="array">Tableau dans lequel la collection doit être copiée. </param>
      <param name="arrayIndex">Position à laquelle la copie doit commencer dans le tableau. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> est un tableau multidimensionnel.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> est en dehors des limites de <paramref name="array" />.– ou –<paramref name="arrayIndex" /> plus <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> est en dehors des limites du <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Count">
      <summary>Obtient le nombre de correspondances.</summary>
      <returns>Nombre de correspondances.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
      <summary>Fournit un énumérateur dans le même ordre que <see cref="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)" />.</summary>
      <returns>Objet <see cref="T:System.Collections.IEnumerator" /> contenant tous les objets Match du MatchCollection.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsReadOnly">
      <summary>Obtient une valeur indiquant si la collection est en lecture seule.</summary>
      <returns>La valeur de cette propriété est toujours true.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
      <summary>Obtient une valeur indiquant si l'accès à la collection est synchronisé (thread-safe).</summary>
      <returns>La valeur de cette propriété est toujours false.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
      <summary>Obtient un membre individuel de la collection.</summary>
      <returns>Sous-chaîne capturée à la position <paramref name="i" /> dans la collection.</returns>
      <param name="i">Index dans la collection Match. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> est inférieur à 0 ou supérieur ou égal à <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" />. </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
      <summary>Obtient un objet pouvant être utilisé pour synchroniser l'accès à la collection.</summary>
      <returns>Objet permettant de synchroniser l'accès à la collection.Cette propriété renvoie toujours l'objet lui-même.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchEvaluator">
      <summary>Représente la méthode appelée à chaque fois qu'une correspondance avec une expression régulière est trouvée lors d'une opération de méthode <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" />.</summary>
      <returns>Chaîne renvoyée par la méthode représentée par le délégué <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />.</returns>
      <param name="match">Objet <see cref="T:System.Text.RegularExpressions.Match" /> représentant une seule correspondance avec une expression régulière lors d'une opération de méthode <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" />. </param>
    </member>
    <member name="T:System.Text.RegularExpressions.Regex">
      <summary>Représente une expression régulière immuable.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String)">
      <summary>Initialise et compile une nouvelle instance de la classe <see cref="T:System.Text.RegularExpressions.Regex" /> pour l'expression régulière spécifiée.</summary>
      <param name="pattern">Modèle d'expression régulière à mettre en correspondance. </param>
      <exception cref="T:System.ArgumentException">Une erreur d'analyse de l'expression régulière s'est produite.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Initialise et compile une nouvelle instance de la classe <see cref="T:System.Text.RegularExpressions.Regex" /> pour l'expression régulière spécifiée, avec des options modifiant le modèle.</summary>
      <param name="pattern">Modèle d'expression régulière à mettre en correspondance. </param>
      <param name="options">Combinaison d'opérations de bits des valeurs d'énumération. </param>
      <exception cref="T:System.ArgumentException">Une erreur d’analyse de l’expression régulière s’est produite. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> contient un indicateur non valide.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Text.RegularExpressions.Regex" /> pour l'expression régulière spécifiée, avec des options modifiant le modèle et une valeur spécifiant la durée pendant laquelle une méthode de mise en correspondance de modèle doit essayer de trouver une correspondance avant son expiration.</summary>
      <param name="pattern">Modèle d'expression régulière à mettre en correspondance.</param>
      <param name="options">Combinaison de bits de valeurs d'énumération modifiant l'expression régulière.</param>
      <param name="matchTimeout">Délai d'attente, ou <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> pour indiquer que la méthode ne doit pas expirer.</param>
      <exception cref="T:System.ArgumentException">Une erreur d'analyse de l'expression régulière s'est produite.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> n'est pas une valeur <see cref="T:System.Text.RegularExpressions.RegexOptions" /> valide.– ou –<paramref name="matchTimeout" /> est négatif ou supérieur à 24 jours environ.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.CacheSize">
      <summary>Obtient ou définit le nombre maximal d'entrées dans le cache statique actuel des expressions régulières compilées.</summary>
      <returns>Nombre maximal d'entrées dans le cache statique.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">La valeur indiquée dans une opération ensembliste est inférieure à zéro.</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capsize">
      <summary>Utilisé en interne par le moteur d'expressions régulières. </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capslist">
      <summary>Utilisé en interne par le moteur d'expressions régulières. </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Escape(System.String)">
      <summary>Échappement pour pour un ensemble minimal de caractères (\, *, +, ?, |, {, [, (,), ^, $,., # et espace blanc) en les remplaçant par leur code d'échappement.Cela indique au moteur d'expressions régulières qu'il doit interpréter ces caractères littéralement, et non comme des métacaractères.</summary>
      <returns>Chaîne de caractères dont les métacaractères sont remplacés par leurs codes d'échappement.</returns>
      <param name="str">Chaîne d'entrée contenant le texte à convertir. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNames">
      <summary>Renvoie un tableau de noms de groupes de capture pour l'expression régulière.</summary>
      <returns>Tableau de chaînes des noms de groupes.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNumbers">
      <summary>Renvoie un tableau des numéros des groupes de capture correspondant aux noms des groupes dans un tableau.</summary>
      <returns>Tableau d'entiers des numéros de groupes.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)">
      <summary>Obtient le nom du groupe correspondant au numéro de groupe spécifié.</summary>
      <returns>Chaîne contenant le nom du groupe associé au numéro de groupe spécifié.En l'absence de nom de groupe correspondant à <paramref name="i" />, la méthode renvoie <see cref="F:System.String.Empty" />.</returns>
      <param name="i">Numéro de groupe à convertir en nom de groupe correspondant. </param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)">
      <summary>Renvoie le numéro du groupe correspondant au nom de groupe spécifié.</summary>
      <returns>Numéro de groupe correspondant au nom de groupe spécifié, ou -1 si <paramref name="name" /> n'est pas un nom de groupe valide.</returns>
      <param name="name">Nom de groupe à convertir en numéro de groupe correspondant. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> a la valeur null.</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout">
      <summary>Indique qu'une opération de mise en correspondance de modèles ne doit pas expirer.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)">
      <summary>Indique si l'expression régulière spécifiée dans le constructeur <see cref="T:System.Text.RegularExpressions.Regex" /> trouve une correspondance dans la chaîne d'entrée.</summary>
      <returns>La valeur est true si l'expression régulière trouve une correspondance, sinon false.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)">
      <summary>Indique si l'expression régulière spécifiée dans le constructeur <see cref="T:System.Text.RegularExpressions.Regex" /> trouve une correspondance dans la chaîne d'entrée en commençant à la position de départ spécifiée dans la chaîne.</summary>
      <returns>La valeur est true si l'expression régulière trouve une correspondance, sinon false.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée. </param>
      <param name="startat">Position du caractère où la recherche doit commencer. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La valeur de <paramref name="startat" /> ne peut pas être inférieure à zéro ou supérieure à la longueur de <paramref name="input" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)">
      <summary>Indique si l'expression régulière trouve une correspondance dans la chaîne d'entrée à l'aide de l'expression régulière spécifiée dans le paramètre <paramref name="pattern" />.</summary>
      <returns>La valeur est true si l'expression régulière trouve une correspondance, sinon false.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée. </param>
      <param name="pattern">Modèle d'expression régulière à mettre en correspondance. </param>
      <exception cref="T:System.ArgumentException">Une erreur d'analyse de l'expression régulière s'est produite.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.– ou –<paramref name="pattern" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Indique si l'expression régulière trouve une correspondance dans la chaîne d'entrée à l'aide de l'expression régulière spécifiée dans le paramètre <paramref name="pattern" /> et des options de correspondance fournies dans le paramètre <paramref name="options" />.</summary>
      <returns>La valeur est true si l'expression régulière trouve une correspondance, sinon false.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée. </param>
      <param name="pattern">Modèle d'expression régulière à mettre en correspondance. </param>
      <param name="options">Combinaison d'opérations de bits des valeurs d'énumération. </param>
      <exception cref="T:System.ArgumentException">Une erreur d'analyse de l'expression régulière s'est produite.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.– ou –<paramref name="pattern" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> n'est pas une valeur <see cref="T:System.Text.RegularExpressions.RegexOptions" /> valide.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Indique si l'expression régulière spécifiée trouve une correspondance dans la chaîne d'entrée spécifiée, à l'aide des options de correspondance et des délais d'attente spécifiés.</summary>
      <returns>La valeur est true si l'expression régulière trouve une correspondance, sinon false.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée.</param>
      <param name="pattern">Modèle d'expression régulière à mettre en correspondance.</param>
      <param name="options">Combinaison d'opérations de bits des valeurs d'énumération fournissant des options pour la correspondance.</param>
      <param name="matchTimeout">Délai d'attente, ou <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> pour indiquer que la méthode ne doit pas expirer.</param>
      <exception cref="T:System.ArgumentException">Une erreur d'analyse de l'expression régulière s'est produite.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> ou <paramref name="pattern" /> est null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> n'est pas une valeur <see cref="T:System.Text.RegularExpressions.RegexOptions" /> valide.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Erreur de délai d’attente.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String)">
      <summary>Recherche dans la chaîne d'entrée spécifiée la première occurrence de l'expression régulière spécifiée dans le constructeur <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
      <returns>Objet contenant des informations sur la correspondance. </returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)">
      <summary>Recherche dans la chaîne d'entrée la première occurrence d'une expression régulière, la position de départ dans la chaîne d'entrée étant spécifiée.</summary>
      <returns>Objet contenant des informations sur la correspondance.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée. </param>
      <param name="startat">Position du caractère de base zéro à partir duquel commencer la recherche. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> est inférieur à zéro ou supérieur à la durée de <paramref name="input" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)">
      <summary>Recherche dans la chaîne d'entrée la première occurrence d'une expression régulière, la position de départ dans la chaîne d'entrée et la longueur de cette dernière étant spécifiées.</summary>
      <returns>Objet contenant des informations sur la correspondance.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée. </param>
      <param name="beginning">Position dans la chaîne d'entrée du caractère de base zéro définissant la position la plus à gauche à rechercher. </param>
      <param name="length">Nombre de caractères dans la sous-chaîne à inclure dans la recherche. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="beginning" /> est inférieur à zéro ou supérieur à la durée de <paramref name="input" />.– ou –<paramref name="length" /> est inférieur à zéro ou supérieur à la durée de <paramref name="input" />.– ou –<paramref name="beginning" />+<paramref name="length" />– 1 identifie une position en dehors de la plage <paramref name="input" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)">
      <summary>Recherche dans la chaîne d'entrée spécifiée la première occurrence de l'expression régulière fournie dans le paramètre <paramref name="pattern" />.</summary>
      <returns>Objet contenant des informations sur la correspondance.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée. </param>
      <param name="pattern">Modèle d'expression régulière à mettre en correspondance. </param>
      <exception cref="T:System.ArgumentException">Une erreur d'analyse de l'expression régulière s'est produite.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.– ou –<paramref name="pattern" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Recherche dans la chaîne d'entrée la première occurrence de l'expression régulière fournie dans un paramètre <paramref name="pattern" /> avec les options de correspondance fournies dans un paramètre <paramref name="options" />.</summary>
      <returns>Objet contenant des informations sur la correspondance.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée. </param>
      <param name="pattern">Modèle d'expression régulière à mettre en correspondance. </param>
      <param name="options">Combinaison d'opérations de bits des valeurs d'énumération. </param>
      <exception cref="T:System.ArgumentException">Une erreur d'analyse de l'expression régulière s'est produite.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.– ou –<paramref name="pattern" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> n’est pas une combinaison d’opérations de bits des valeurs <see cref="T:System.Text.RegularExpressions.RegexOptions" /> valide.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Recherche dans la chaîne d'entrée la première occurrence de l'expression régulière spécifiée, à l'aide des options de correspondance et des délais d'attente spécifiés.</summary>
      <returns>Objet contenant des informations sur la correspondance.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée.</param>
      <param name="pattern">Modèle d'expression régulière à mettre en correspondance.</param>
      <param name="options">Combinaison d'opérations de bits des valeurs d'énumération fournissant des options pour la correspondance.</param>
      <param name="matchTimeout">Délai d'attente, ou <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> pour indiquer que la méthode ne doit pas expirer.</param>
      <exception cref="T:System.ArgumentException">Une erreur d'analyse de l'expression régulière s'est produite.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> ou <paramref name="pattern" /> est null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> n’est pas une combinaison d’opérations de bits des valeurs <see cref="T:System.Text.RegularExpressions.RegexOptions" /> valide.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Erreur de délai d’attente.Pour plus d’informations sur les délais d’expiration, consultez la section Remarques.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String)">
      <summary>Recherche dans la chaîne d'entrée spécifiée toutes les occurrences d'une expression régulière.</summary>
      <returns>Collection des objets <see cref="T:System.Text.RegularExpressions.Match" /> trouvés par la recherche.Si aucune correspondance n'est trouvée, la méthode renvoie un objet de collection vide.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)">
      <summary>Recherche dans la chaîne d'entrée spécifiée toutes les occurrences d'une expression régulière, commençant à la position de départ spécifiée dans la chaîne.</summary>
      <returns>Collection des objets <see cref="T:System.Text.RegularExpressions.Match" /> trouvés par la recherche.Si aucune correspondance n'est trouvée, la méthode renvoie un objet de collection vide.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée. </param>
      <param name="startat">Position du caractère dans la chaîne d'entrée à partir duquel commencer la recherche. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> est inférieur à zéro ou supérieur à la durée de <paramref name="input" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)">
      <summary>Recherche dans la chaîne d'entrée spécifiée toutes les occurrences de l'expression régulière spécifiée dans le paramètre <paramref name="pattern" />.</summary>
      <returns>Collection des objets <see cref="T:System.Text.RegularExpressions.Match" /> trouvés par la recherche.Si aucune correspondance n'est trouvée, la méthode renvoie un objet de collection vide.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée. </param>
      <param name="pattern">Modèle d'expression régulière à mettre en correspondance. </param>
      <exception cref="T:System.ArgumentException">Une erreur d'analyse de l'expression régulière s'est produite.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.– ou –<paramref name="pattern" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Recherche dans la chaîne d'entrée spécifiée toutes les occurrences de l'expression régulière fournie dans un paramètre <paramref name="pattern" /> avec les options de correspondance fournies dans un paramètre <paramref name="options" />.</summary>
      <returns>Collection des objets <see cref="T:System.Text.RegularExpressions.Match" /> trouvés par la recherche.Si aucune correspondance n'est trouvée, la méthode renvoie un objet de collection vide.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée. </param>
      <param name="pattern">Modèle d'expression régulière à mettre en correspondance. </param>
      <param name="options">Combinaison d'opérations de bits des valeurs d'énumération. </param>
      <exception cref="T:System.ArgumentException">Une erreur d'analyse de l'expression régulière s'est produite.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.– ou –<paramref name="pattern" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> n’est pas une combinaison d’opérations de bits des valeurs <see cref="T:System.Text.RegularExpressions.RegexOptions" /> valide.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Recherche dans la chaîne d'entrée spécifiée toutes les occurrences d'une expression régulière spécifique, à l'aide des options de correspondance et des délais d'attente spécifiés.</summary>
      <returns>Collection des objets <see cref="T:System.Text.RegularExpressions.Match" /> trouvés par la recherche.Si aucune correspondance n'est trouvée, la méthode renvoie un objet de collection vide.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée.</param>
      <param name="pattern">Modèle d'expression régulière à mettre en correspondance.</param>
      <param name="options">Combinaison de bits de valeurs d'énumération spécifiant des options pour la correspondance.</param>
      <param name="matchTimeout">Délai d'attente, ou <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> pour indiquer que la méthode ne doit pas expirer.</param>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.MatchTimeout">
      <summary>Obtient le délai d'attente de l'instance actuelle.</summary>
      <returns>Le délai d'attente maximal pouvant s'écouler dans une opération de mise en correspondance des modèles avant la levée de l'exception <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" />, ou <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> si les délais d'attente sont désactivés.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Options">
      <summary>Renvoie les options passées au constructeur <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
      <returns>Paramètre <paramref name="options" /> ayant été passé au constructeur Regex.</returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.pattern">
      <summary>Utilisé en interne par le moteur d'expressions régulières. </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)">
      <summary>Dans la chaîne d'entrée spécifiée, remplace toutes les chaînes correspondant à un modèle d'expression régulière par une chaîne de remplacement spécifique. </summary>
      <returns>Nouvelle chaîne identique à la chaîne d'entrée, hormis le fait qu'une chaîne de remplacement remplace chaque chaîne correspondante.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée. </param>
      <param name="replacement">Chaîne de remplacement. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.– ou –<paramref name="replacement" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)">
      <summary>Dans la chaîne d'entrée spécifiée, remplace le nombre maximal spécifié de chaînes correspondant à un modèle d'expression régulière par une chaîne de remplacement spécifique. </summary>
      <returns>Nouvelle chaîne identique à la chaîne d'entrée, hormis le fait qu'une chaîne de remplacement remplace chaque chaîne correspondante.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée. </param>
      <param name="replacement">Chaîne de remplacement. </param>
      <param name="count">Nombre maximal de fois où le remplacement peut avoir lieu. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.– ou –<paramref name="replacement" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>Dans la sous-chaîne d'entrée spécifiée, remplace le nombre maximal spécifié de chaînes correspondant à un modèle d'expression régulière par une chaîne de remplacement spécifique. </summary>
      <returns>Nouvelle chaîne identique à la chaîne d'entrée, hormis le fait qu'une chaîne de remplacement remplace chaque chaîne correspondante.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée. </param>
      <param name="replacement">Chaîne de remplacement. </param>
      <param name="count">Nombre maximal de fois où le remplacement peut avoir lieu. </param>
      <param name="startat">Position du caractère dans la chaîne d'entrée où la recherche commence. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.– ou –<paramref name="replacement" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> est inférieur à zéro ou supérieur à la durée de <paramref name="input" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">
      <summary>Dans la chaîne d'entrée spécifiée, remplace toutes les chaînes correspondant à l'expression régulière spécifiée par une chaîne de remplacement spécifique. </summary>
      <returns>Nouvelle chaîne identique à la chaîne d'entrée, hormis le fait qu'une chaîne de remplacement remplace chaque chaîne correspondante.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée. </param>
      <param name="pattern">Modèle d'expression régulière à mettre en correspondance. </param>
      <param name="replacement">Chaîne de remplacement. </param>
      <exception cref="T:System.ArgumentException">Une erreur d'analyse de l'expression régulière s'est produite.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.– ou –<paramref name="pattern" /> a la valeur null.– ou –<paramref name="replacement" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Dans la chaîne d'entrée spécifiée, remplace toutes les chaînes correspondant à l'expression régulière spécifiée par une chaîne de remplacement spécifique.Les options spécifiées modifient l'opération correspondante.</summary>
      <returns>Nouvelle chaîne identique à la chaîne d'entrée, hormis le fait qu'une chaîne de remplacement remplace chaque chaîne correspondante.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée. </param>
      <param name="pattern">Modèle d'expression régulière à mettre en correspondance. </param>
      <param name="replacement">Chaîne de remplacement. </param>
      <param name="options">Combinaison d'opérations de bits des valeurs d'énumération. </param>
      <exception cref="T:System.ArgumentException">Une erreur d'analyse de l'expression régulière s'est produite.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.– ou –<paramref name="pattern" /> a la valeur null.– ou –<paramref name="replacement" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> n’est pas une combinaison d’opérations de bits des valeurs <see cref="T:System.Text.RegularExpressions.RegexOptions" /> valide.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Dans la chaîne d'entrée spécifiée, remplace toutes les chaînes correspondant à l'expression régulière spécifiée par une chaîne de remplacement spécifique.Des paramètres supplémentaires spécifient des options modifiant l'opération de correspondance et un délai d'attente si aucune correspondance n'est trouvée.</summary>
      <returns>Nouvelle chaîne identique à la chaîne d'entrée, hormis le fait que la chaîne de remplacement remplace chaque chaîne correspondante.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée.</param>
      <param name="pattern">Modèle d'expression régulière à mettre en correspondance.</param>
      <param name="replacement">Chaîne de remplacement.</param>
      <param name="options">Combinaison d'opérations de bits des valeurs d'énumération fournissant des options pour la correspondance.</param>
      <param name="matchTimeout">Délai d'attente, ou <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> pour indiquer que la méthode ne doit pas expirer.</param>
      <exception cref="T:System.ArgumentException">Une erreur d'analyse de l'expression régulière s'est produite.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="pattern" /> ou <paramref name="replacement" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> n’est pas une combinaison d’opérations de bits des valeurs <see cref="T:System.Text.RegularExpressions.RegexOptions" /> valide.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Erreur de délai d’attente.Pour plus d’informations sur les délais d’expiration, consultez la section Remarques.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>Dans la chaîne d'entrée spécifiée, remplace toutes les chaînes correspondant à une expression régulière spécifiée par une chaîne renvoyée par un délégué <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />.</summary>
      <returns>Nouvelle chaîne identique à la chaîne d'entrée, hormis le fait qu'une chaîne de remplacement remplace chaque chaîne correspondante.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée. </param>
      <param name="pattern">Modèle d'expression régulière à mettre en correspondance. </param>
      <param name="evaluator">Méthode personnalisée examinant chaque correspondance et renvoyant soit la chaîne correspondante d'origine, soit une chaîne de remplacement.</param>
      <exception cref="T:System.ArgumentException">Une erreur d'analyse de l'expression régulière s'est produite.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.– ou –<paramref name="pattern" /> a la valeur null.– ou –<paramref name="evaluator" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
      <summary>Dans la chaîne d'entrée spécifiée, remplace toutes les chaînes correspondant à une expression régulière spécifiée par une chaîne renvoyée par un délégué <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />.Les options spécifiées modifient l'opération correspondante.</summary>
      <returns>Nouvelle chaîne identique à la chaîne d'entrée, hormis le fait qu'une chaîne de remplacement remplace chaque chaîne correspondante.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée. </param>
      <param name="pattern">Modèle d'expression régulière à mettre en correspondance. </param>
      <param name="evaluator">Méthode personnalisée examinant chaque correspondance et renvoyant soit la chaîne correspondante d'origine, soit une chaîne de remplacement. </param>
      <param name="options">Combinaison d'opérations de bits des valeurs d'énumération. </param>
      <exception cref="T:System.ArgumentException">Une erreur d'analyse de l'expression régulière s'est produite.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.– ou –<paramref name="pattern" /> a la valeur null.– ou –<paramref name="evaluator" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> n’est pas une combinaison d’opérations de bits des valeurs <see cref="T:System.Text.RegularExpressions.RegexOptions" /> valide.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Dans la chaîne d'entrée spécifiée, remplace toutes les sous-chaînes correspondant à une expression régulière spécifiée par une chaîne renvoyée par un délégué <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />.Des paramètres supplémentaires spécifient des options modifiant l'opération de correspondance et un délai d'attente si aucune correspondance n'est trouvée.</summary>
      <returns>Nouvelle chaîne identique à la chaîne d'entrée, hormis le fait que la chaîne de remplacement remplace chaque chaîne correspondante.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée.</param>
      <param name="pattern">Modèle d'expression régulière à mettre en correspondance.</param>
      <param name="evaluator">Méthode personnalisée examinant chaque correspondance et renvoyant soit la chaîne correspondante d'origine, soit une chaîne de remplacement.</param>
      <param name="options">Combinaison d'opérations de bits des valeurs d'énumération fournissant des options pour la correspondance.</param>
      <param name="matchTimeout">Délai d'attente, ou <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> pour indiquer que la méthode ne doit pas expirer.</param>
      <exception cref="T:System.ArgumentException">Une erreur d'analyse de l'expression régulière s'est produite.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="pattern" /> ou <paramref name="evaluator" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> n’est pas une combinaison d’opérations de bits des valeurs <see cref="T:System.Text.RegularExpressions.RegexOptions" /> valide.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Erreur de délai d’attente.Pour plus d’informations sur les délais d’expiration, consultez la section Remarques.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>Dans la chaîne d'entrée spécifiée, remplace toutes les chaînes correspondant à une expression régulière spécifiée par une chaîne renvoyée par un délégué <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />.</summary>
      <returns>Nouvelle chaîne identique à la chaîne d'entrée, hormis le fait qu'une chaîne de remplacement remplace chaque chaîne correspondante.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée. </param>
      <param name="evaluator">Méthode personnalisée examinant chaque correspondance et renvoyant soit la chaîne correspondante d'origine, soit une chaîne de remplacement.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.– ou –<paramref name="evaluator" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)">
      <summary>Dans la chaîne d'entrée spécifiée, remplace le nombre maximal spécifié de chaînes correspondant à un modèle d'expression régulière par une chaîne renvoyée par un délégué <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />.</summary>
      <returns>Nouvelle chaîne identique à la chaîne d'entrée, hormis le fait qu'une chaîne de remplacement remplace chaque chaîne correspondante.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée. </param>
      <param name="evaluator">Méthode personnalisée examinant chaque correspondance et renvoyant soit la chaîne correspondante d'origine, soit une chaîne de remplacement.</param>
      <param name="count">Nombre maximal de fois où le remplacement aura lieu. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.– ou –<paramref name="evaluator" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)">
      <summary>Dans la sous-chaîne d'entrée spécifiée, remplace le nombre maximal spécifié de chaînes correspondant à un modèle d'expression régulière par une chaîne renvoyée par un délégué <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />.</summary>
      <returns>Nouvelle chaîne identique à la chaîne d'entrée, hormis le fait qu'une chaîne de remplacement remplace chaque chaîne correspondante.</returns>
      <param name="input">Chaîne dans laquelle une correspondance doit être recherchée. </param>
      <param name="evaluator">Méthode personnalisée examinant chaque correspondance et renvoyant soit la chaîne correspondante d'origine, soit une chaîne de remplacement.</param>
      <param name="count">Nombre maximal de fois où le remplacement aura lieu. </param>
      <param name="startat">Position du caractère dans la chaîne d'entrée où la recherche commence. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.– ou –<paramref name="evaluator" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> est inférieur à zéro ou supérieur à la durée de <paramref name="input" />.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.RightToLeft">
      <summary>Obtient une valeur indiquant si l'expression régulière cherche de droite à gauche.</summary>
      <returns>La valeur est true si l'expression régulière cherche de droite à gauche, sinon false.</returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.roptions">
      <summary>Utilisé en interne par le moteur d'expressions régulières. </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String)">
      <summary>Fractionne la chaîne d'entrée spécifiée aux positions définies par un modèle d'expression régulière spécifié dans le constructeur <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
      <returns>Tableau de chaînes.</returns>
      <param name="input">Chaîne à fractionner. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)">
      <summary>Fractionne la chaîne d'entrée spécifiée un nombre de fois maximal spécifié aux positions définies par une expression régulière spécifiée dans le constructeur <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
      <returns>Tableau de chaînes.</returns>
      <param name="input">Chaîne à fractionner. </param>
      <param name="count">Nombre maximal de fois où le fractionnement peut avoir lieu. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)">
      <summary>Fractionne la chaîne d'entrée spécifiée un nombre de fois maximal spécifié aux positions définies par une expression régulière spécifiée dans le constructeur <see cref="T:System.Text.RegularExpressions.Regex" />.La recherche du modèle d'expression régulière débute à une position de caractère spécifiée dans la chaîne d'entrée.</summary>
      <returns>Tableau de chaînes.</returns>
      <param name="input">Chaîne à fractionner. </param>
      <param name="count">Nombre maximal de fois où le fractionnement peut avoir lieu. </param>
      <param name="startat">Position du caractère dans la chaîne d'entrée où la recherche commencera. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> est inférieur à zéro ou supérieur à la durée de <paramref name="input" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)">
      <summary>Fractionne la chaîne d'entrée aux positions définies par un modèle d'expression régulière.</summary>
      <returns>Tableau de chaînes.</returns>
      <param name="input">Chaîne à fractionner. </param>
      <param name="pattern">Modèle d'expression régulière à mettre en correspondance. </param>
      <exception cref="T:System.ArgumentException">Une erreur d'analyse de l'expression régulière s'est produite.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.– ou –<paramref name="pattern" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Fractionne la chaîne d'entrée aux positions définies par un modèle d'expression régulière spécifié.Les options spécifiées modifient l'opération correspondante.</summary>
      <returns>Tableau de chaînes.</returns>
      <param name="input">Chaîne à fractionner. </param>
      <param name="pattern">Modèle d'expression régulière à mettre en correspondance. </param>
      <param name="options">Combinaison d'opérations de bits des valeurs d'énumération. </param>
      <exception cref="T:System.ArgumentException">Une erreur d'analyse de l'expression régulière s'est produite.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.– ou –<paramref name="pattern" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> n’est pas une combinaison d’opérations de bits des valeurs <see cref="T:System.Text.RegularExpressions.RegexOptions" /> valide.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Fractionne une chaîne d'entrée en un tableau de sous-chaînes aux positions définies par un modèle d'expression régulière spécifié.Des paramètres supplémentaires spécifient des options modifiant l'opération de correspondance et un délai d'attente si aucune correspondance n'est trouvée.</summary>
      <returns>Tableau de chaînes.</returns>
      <param name="input">Chaîne à fractionner.</param>
      <param name="pattern">Modèle d'expression régulière à mettre en correspondance.</param>
      <param name="options">Combinaison d'opérations de bits des valeurs d'énumération fournissant des options pour la correspondance.</param>
      <param name="matchTimeout">Délai d'attente, ou <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> pour indiquer que la méthode ne doit pas expirer.</param>
      <exception cref="T:System.ArgumentException">Une erreur d'analyse de l'expression régulière s'est produite.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> ou <paramref name="pattern" /> est null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> n’est pas une combinaison d’opérations de bits des valeurs <see cref="T:System.Text.RegularExpressions.RegexOptions" /> valide.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Erreur de délai d’attente.Pour plus d’informations sur les délais d’expiration, consultez la section Remarques.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ToString">
      <summary>Renvoie le modèle d'expression régulière ayant été passé au constructeur Regex.</summary>
      <returns>Paramètre <paramref name="pattern" /> ayant été passé au constructeur Regex.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Unescape(System.String)">
      <summary>Annule le remplacement des caractères d'échappement dans la chaîne d'entrée.</summary>
      <returns>Chaîne de caractères dont les caractères d'échappement remplacés sont remis dans leur forme initiale.</returns>
      <param name="str">Chaîne d'entrée contenant le texte à convertir. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionR">
      <summary>Utilisé en interne par le moteur d'expressions régulières.</summary>
      <returns>La valeur est true si la propriété <see cref="P:System.Text.RegularExpressions.Regex.Options" /> contient l'option <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" />, sinon false.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
      <summary>Exception levée lorsque la durée d'exécution d'une méthode utilisant des caractères spéciaux d'expression régulière dépasse son délai d'attente.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> avec un message fourni par le système.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> avec la chaîne de message spécifiée.</summary>
      <param name="message">Chaîne décrivant l'exception.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message">Chaîne décrivant l'exception.</param>
      <param name="inner">Exception qui est la cause de l'exception actuelle.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.String,System.TimeSpan)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> avec des informations sur le modèle d'expression régulière, le texte d'entrée et le délai d'attente.</summary>
      <param name="regexInput">Texte d'entrée traité par le moteur des expressions régulières lorsque le délai d'attente a expiré.</param>
      <param name="regexPattern">Modèle utilisé par le moteur des expressions régulières lorsque le délai d'attente a expiré.</param>
      <param name="matchTimeout">Délai d'attente.</param>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Input">
      <summary>[SÉCURITÉ CRITIQUE] Obtient le texte d'entrée que le moteur des expressions régulières traitait lorsque le délai d'attente a expiré.</summary>
      <returns>Texte d'entrée de l'expression régulière.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout">
      <summary>[SÉCURITÉ CRITIQUE] Obtient le délai d'attente pour une correspondance d'expression régulière.</summary>
      <returns>Délai d'attente.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Pattern">
      <summary>[SÉCURITÉ CRITIQUE] Obtient le modèle d'expression régulière utilisé dans l'opération de correspondance lorsque le délai a expiré.</summary>
      <returns>Modèle d'expression régulière.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexOptions">
      <summary>Fournit les valeurs énumérées à utiliser pour définir les options des expressions régulières.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Compiled">
      <summary>Spécifie que l'expression régulière est compilée vers un assembly.L'exécution est plus rapide, mais le temps de démarrage s'en trouve augmenté.Cette valeur ne doit pas être assignée à la propriété <see cref="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" /> lors de l'appel de la méthode <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />.Présent uniquement dans Windows Phone, mais non pris en charge.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant">
      <summary>Indique que les différences culturelles dans la langue ne sont pas prises en compte.D'ordinaire, le moteur d'expressions régulières effectue des comparaisons de chaînes selon les conventions de la culture actuelle.Si l'option <see cref="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant" /> est spécifiée, elle utilise les conventions de la culture dite indifférente.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ECMAScript">
      <summary>Active un comportement conforme ECMAScript pour l'expression.Cette valeur ne peut être utilisée qu'en conjonction avec les valeurs <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase" /> et <see cref="F:System.Text.RegularExpressions.RegexOptions.Multiline" />.L'utilisation de cette valeur avec n'importe quelle autre valeur résulte en une exception.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ExplicitCapture">
      <summary>Spécifie que les seules captures valides sont des groupes explicitement nommés ou numérotés du formulaire (?&lt;name&gt;…).Ceci permet à des parenthèses sans nom d'agir comme des groupes qui ne sont pas des groupes de captures sans la lourdeur syntaxique de l'expression (?:…).</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase">
      <summary>Spécifie la correspondance qui ne respecte pas la casse.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace">
      <summary>Élimine l'espace blanc sans séquence d'échappement du modèle et active les commentaires marqués avec #.Toutefois, la valeur <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace" /> n'affecte ni n'élimine l'espace blanc dans les classes de caractères.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Multiline">
      <summary>Mode multiligne.Modifie la signification de ^ et $ de sorte qu'ils correspondent respectivement au début et à la fin de n'importe quelle ligne, et non simplement au début et à la fin de la chaîne entière.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.None">
      <summary>Spécifie qu'aucune option n'est définie.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.RightToLeft">
      <summary>Spécifie que la recherche sera effectuée de droite à gauche et non de gauche à droite.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Singleline">
      <summary>Spécifie le mode à ligne simple.Modifie la signification du point (.) de sorte qu'il corresponde à chaque caractère (et non à chaque caractère sauf \n).</summary>
    </member>
    <member name="T:System.Threading.Barrier">
      <summary>Permet à plusieurs tâches de travailler en parallèle de manière coopérative sur un algorithme via plusieurs phases.</summary>
    </member>
    <member name="M:System.Threading.Barrier.#ctor(System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Barrier" />.</summary>
      <param name="participantCount">Nombre de threads participants.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" /> est inférieur à 0 ou supérieur à 32 767.</exception>
    </member>
    <member name="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Barrier" />.</summary>
      <param name="participantCount">Nombre de threads participants.</param>
      <param name="postPhaseAction">
        <see cref="T:System.Action`1" /> à exécuter après chaque phase. La valeur null (Nothing en Visual Basic) peut être passée pour indiquer qu'aucune action n'est effectuée.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" /> est inférieur à 0 ou supérieur à 32 767.</exception>
    </member>
    <member name="M:System.Threading.Barrier.AddParticipant">
      <summary>Signale à <see cref="T:System.Threading.Barrier" /> qu'il y aura un participant supplémentaire.</summary>
      <returns>Numéro de la phase du cloisonnement à laquelle les nouveaux participants participeront en premier.</returns>
      <exception cref="T:System.ObjectDisposedException">L'instance actuelle a déjà été supprimée.</exception>
      <exception cref="T:System.InvalidOperationException">L'ajout d'un participant provoquerait l'augmentation du nombre de participants du cloisonnement au-delà de 32 767.– ou –La méthode a été appelée à partir d'une action post-phase.</exception>
    </member>
    <member name="M:System.Threading.Barrier.AddParticipants(System.Int32)">
      <summary>Signale à <see cref="T:System.Threading.Barrier" /> qu'il y aura des participants supplémentaires.</summary>
      <returns>Numéro de la phase du cloisonnement à laquelle les nouveaux participants participeront en premier.</returns>
      <param name="participantCount">Nombre de participants supplémentaires à ajouter au cloisonnement.</param>
      <exception cref="T:System.ObjectDisposedException">L'instance actuelle a déjà été supprimée.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" /> est inférieur à 0.– ou –L'ajout de participants (<paramref name="participantCount" />) provoquerait l'augmentation du nombre de participants du cloisonnement au-delà de 32 767.</exception>
      <exception cref="T:System.InvalidOperationException">La méthode a été appelée à partir d'une action post-phase.</exception>
    </member>
    <member name="P:System.Threading.Barrier.CurrentPhaseNumber">
      <summary>Obtient le numéro de la phase actuelle du cloisonnement.</summary>
      <returns>Retourne le numéro de la phase actuelle du cloisonnement.</returns>
    </member>
    <member name="M:System.Threading.Barrier.Dispose">
      <summary>Libère toutes les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Threading.Barrier" />.</summary>
      <exception cref="T:System.InvalidOperationException">La méthode a été appelée à partir d'une action post-phase.</exception>
    </member>
    <member name="M:System.Threading.Barrier.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par <see cref="T:System.Threading.Barrier" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">true pour libérer les ressources managées et non managées ; false pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="P:System.Threading.Barrier.ParticipantCount">
      <summary>Obtient le nombre total de participants au cloisonnement.</summary>
      <returns>Retourne le nombre total de participants au cloisonnement.</returns>
    </member>
    <member name="P:System.Threading.Barrier.ParticipantsRemaining">
      <summary>Obtient le nombre de participants au cloisonnement qui n'ont pas encore été signalés dans la phase actuelle.</summary>
      <returns>Retourne le nombre de participants au cloisonnement qui n'ont pas encore été signalés dans la phase actuelle.</returns>
    </member>
    <member name="M:System.Threading.Barrier.RemoveParticipant">
      <summary>Signale à <see cref="T:System.Threading.Barrier" /> qu'il y aura un participant en moins.</summary>
      <exception cref="T:System.ObjectDisposedException">L'instance actuelle a déjà été supprimée.</exception>
      <exception cref="T:System.InvalidOperationException">La barrière a déjà 0 participant.– ou –La méthode a été appelée à partir d'une action post-phase.</exception>
    </member>
    <member name="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
      <summary>Signale à <see cref="T:System.Threading.Barrier" /> qu'il y aura moins de participants.</summary>
      <param name="participantCount">Nombre de participants supplémentaires à supprimer du cloisonnement.</param>
      <exception cref="T:System.ObjectDisposedException">L'instance actuelle a déjà été supprimée.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" /> est inférieur à 0.</exception>
      <exception cref="T:System.InvalidOperationException">La barrière a déjà 0 participant.– ou –La méthode a été appelée à partir d'une action post-phase. – ou –le nombre de participant actuel est inférieur au participantCount spécifié</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le nombre total de participants est inférieur au<paramref name=" participantCount" /> spécifié</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait">
      <summary>Signale qu'un participant a atteint <see cref="T:System.Threading.Barrier" /> et qu'il attend que tous les autres participants atteignent également le cloisonnement.</summary>
      <exception cref="T:System.ObjectDisposedException">L'instance actuelle a déjà été supprimée.</exception>
      <exception cref="T:System.InvalidOperationException">La méthode a été appelée à partir d'une action post-phase, le cloisonnement comporte actuellement 0 participants, ou il est signalé par un nombre de threads plus important que celui enregistré en tant que participants.</exception>
      <exception cref="T:System.BarrierPostPhaseException">Si une exception est levée par l'action de post-phase d'un cloisonnement après que tous les threads participants aient appelé SignalAndWait, l'exception sera incluse dans un wrapper dans une BarrierPostPhaseException et levée pour tous les threads participants.</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Int32)">
      <summary>Signale qu'un participant a atteint <see cref="T:System.Threading.Barrier" /> et qu'il attend que tous les autres participants atteignent également le cloisonnement, à l'aide d'un entier signé 32 bits pour mesurer le délai d'attente.</summary>
      <returns>si tous les participants ont atteint le cloisonnement dans le délai spécifié ; sinon false.</returns>
      <param name="millisecondsTimeout">Nombre de millisecondes à attendre, ou <see cref="F:System.Threading.Timeout.Infinite" />(-1) pour un délai d'attente infini.</param>
      <exception cref="T:System.ObjectDisposedException">L'instance actuelle a déjà été supprimée.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> est un nombre négatif autre que -1, qui représente un délai d'attente infini.</exception>
      <exception cref="T:System.InvalidOperationException">La méthode a été appelée à partir d'une action post-phase, le cloisonnement comporte actuellement 0 participants, ou il est signalé par un nombre de threads plus important que celui enregistré en tant que participants.</exception>
      <exception cref="T:System.BarrierPostPhaseException">Si une exception est levée par l'action de post-phase d'un cloisonnement après que tous les threads participants aient appelé SignalAndWait, l'exception sera incluse dans un wrapper dans une BarrierPostPhaseException et levée pour tous les threads participants.</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
      <summary>Signale qu'un participant a atteint le cloisonnement et qu'il attend que tous les autres participants atteignent également le cloisonnement, à l'aide d'un entier signé 32 bits pour mesurer le délai d'attente, tout en observant un <see cref="T:System.Threading.CancellationToken" />.</summary>
      <returns>si tous les participants ont atteint le cloisonnement dans le délai spécifié ; sinon false.</returns>
      <param name="millisecondsTimeout">Nombre de millisecondes à attendre, ou <see cref="F:System.Threading.Timeout.Infinite" />(-1) pour un délai d'attente infini.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer.</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> a été annulé.</exception>
      <exception cref="T:System.ObjectDisposedException">L'instance actuelle a déjà été supprimée.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> est un nombre négatif autre que -1, qui représente un délai d'attente infini.</exception>
      <exception cref="T:System.InvalidOperationException">La méthode a été appelée à partir d'une action post-phase, le cloisonnement comporte actuellement 0 participants, ou il est signalé par un nombre de threads plus important que celui enregistré en tant que participants.</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)">
      <summary>Signale qu'un participant a atteint <see cref="T:System.Threading.Barrier" /> et qu'il attend que tous les autres participants atteignent également le cloisonnement, tout en observant un <see cref="T:System.Threading.CancellationToken" />.</summary>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer.</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> a été annulé.</exception>
      <exception cref="T:System.ObjectDisposedException">L'instance actuelle a déjà été supprimée.</exception>
      <exception cref="T:System.InvalidOperationException">La méthode a été appelée à partir d'une action post-phase, le cloisonnement comporte actuellement 0 participants, ou il est signalé par un nombre de threads plus important que celui enregistré en tant que participants.</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)">
      <summary>Signale qu'un participant a atteint <see cref="T:System.Threading.Barrier" /> et qu'il attend que tous les autres participants atteignent également le cloisonnement, à l'aide d'un <see cref="T:System.TimeSpan" /> pour mesurer l'intervalle de temps.</summary>
      <returns>true si tous les autres participants ont atteint le cloisonnement ; sinon, false.</returns>
      <param name="timeout">
        <see cref="T:System.TimeSpan" /> qui représente le nombre de millièmes de secondes à attendre ou <see cref="T:System.TimeSpan" /> qui représente - 1 millième de seconde, pour attendre indéfiniment.</param>
      <exception cref="T:System.ObjectDisposedException">L'instance actuelle a déjà été supprimée.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> est un nombre négatif autre que -1 milliseconde, qui représente un délai d'attente infini, ou sa valeur est supérieure à 32 767.</exception>
      <exception cref="T:System.InvalidOperationException">La méthode a été appelée à partir d'une action post-phase, le cloisonnement comporte actuellement 0 participants, ou il est signalé par un nombre de threads plus important que celui enregistré en tant que participants.</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>Signale qu'un participant a atteint <see cref="T:System.Threading.Barrier" /> et qu'il attend que tous les autres participants atteignent également le cloisonnement, à l'aide d'un <see cref="T:System.TimeSpan" /> pour mesurer l'intervalle de temps, tout en observant un <see cref="T:System.Threading.CancellationToken" />.</summary>
      <returns>true si tous les autres participants ont atteint le cloisonnement ; sinon, false.</returns>
      <param name="timeout">
        <see cref="T:System.TimeSpan" /> qui représente le nombre de millièmes de secondes à attendre ou <see cref="T:System.TimeSpan" /> qui représente - 1 millième de seconde, pour attendre indéfiniment.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer.</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> a été annulé.</exception>
      <exception cref="T:System.ObjectDisposedException">L'instance actuelle a déjà été supprimée.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> est un nombre négatif autre que -1 milliseconde, qui représente un délai d'attente infini.</exception>
      <exception cref="T:System.InvalidOperationException">La méthode a été appelée à partir d'une action post-phase, le cloisonnement comporte actuellement 0 participants, ou il est signalé par un nombre de threads plus important que celui enregistré en tant que participants.</exception>
    </member>
    <member name="T:System.Threading.BarrierPostPhaseException">
      <summary>L'exception levée lorsque l'action post-phase d'un <see cref="T:System.Threading.Barrier" /> échoue.</summary>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.BarrierPostPhaseException" /> avec un message système décrivant l'erreur.</summary>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.BarrierPostPhaseException" /> avec l'exception interne spécifiée.</summary>
      <param name="innerException">Exception qui est la cause de l'exception actuelle.</param>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.BarrierPostPhaseException" /> avec un message spécifié décrivant l'erreur.</summary>
      <param name="message">Message décrivant l'exception. L'appelant de ce constructeur doit s'assurer que cette chaîne a été localisée pour la culture système en cours.</param>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.BarrierPostPhaseException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message">Message décrivant l'exception. L'appelant de ce constructeur doit s'assurer que cette chaîne a été localisée pour la culture système en cours. </param>
      <param name="innerException">Exception qui est la cause de l'exception actuelle. Si le paramètre <paramref name="innerException" /> n'a pas la valeur null, l'exception actuelle est levée dans un bloc catch gérant l'exception interne. </param>
    </member>
    <member name="T:System.Threading.Semaphore">
      <summary>Limite le nombre des threads qui peuvent accéder simultanément à une ressource ou un pool de ressources. </summary>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Semaphore" /> en spécifiant le nombre maximal d'entrées simultanées et en réservant en option des entrées.</summary>
      <param name="initialCount">Nombre initial de demandes pour le sémaphore qui peut être accordé simultanément.</param>
      <param name="maximumCount">Nombre maximal de demandes pour le sémaphore qui peut être accordé simultanément.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="initialCount" /> est supérieur à <paramref name="maximumCount" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumCount" /> est inférieur à 1.– ou –<paramref name="initialCount" /> est inférieur à 0.</exception>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)">
      <summary>[SÉCURITÉ CRITIQUE] Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Semaphore" /> en spécifiant le nombre maximal d'entrées simultanées, en réservant en option certaines entrées pour le thread appelant et en spécifiant en option le nom d'un objet sémaphore système.</summary>
      <param name="initialCount">Nombre initial de demandes pour le sémaphore qui peut être accordé simultanément. </param>
      <param name="maximumCount">Nombre maximal de demandes pour le sémaphore qui peut être accordé simultanément.</param>
      <param name="name">Nom d'un objet de sémaphore système nommé.</param>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)">
      <summary>[SÉCURITÉ CRITIQUE] Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Semaphore" /> en spécifiant le nombre maximal d'entrées simultanées, en réservant en option des entrées pour le thread appelant, en spécifiant en option le nom d'un objet sémaphore système et en spécifiant une variable qui reçoit une valeur indiquant si un nouveau sémaphore système a été créé.</summary>
      <param name="initialCount">Nombre initial de demandes pour le sémaphore qui peut être satisfait simultanément. </param>
      <param name="maximumCount">Nombre maximal de demandes pour le sémaphore qui peut être satisfait simultanément.</param>
      <param name="name">Nom d'un objet de sémaphore système nommé.</param>
      <param name="createdNew">Lorsque cette méthode est renvoyée, contient true si un sémaphore local a été créé (en d'autres termes, si <paramref name="name" /> est null ou une chaîne vide) ou si le sémaphore système nommé spécifié a été créé ; false si le sémaphore système nommé spécifié existait déjà. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Threading.Semaphore.OpenExisting(System.String)">
      <summary>[SÉCURITÉ CRITIQUE] Ouvre le sémaphore nommé spécifié, s'il existe déjà.</summary>
      <returns>Objet représentant le sémaphore système nommé.</returns>
      <param name="name">Nom du sémaphore système à ouvrir.</param>
    </member>
    <member name="M:System.Threading.Semaphore.Release">
      <summary>Quitte le sémaphore et retourne le compteur antérieur.</summary>
      <returns>Compteur du sémaphore avant appel de la méthode <see cref="Overload:System.Threading.Semaphore.Release" />. </returns>
      <exception cref="T:System.Threading.SemaphoreFullException">Le compteur du sémaphore est déjà à la valeur maximale.</exception>
      <exception cref="T:System.IO.IOException">Une erreur Win32 s'est produite avec un sémaphore nommé.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Le sémaphore actuel représente un sémaphore système nommé, mais l'utilisateur ne détient pas de droits <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.– ou –Le sémaphore actuel représente un sémaphore système nommé, mais il n'a pas été ouvert avec des droits <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</exception>
    </member>
    <member name="M:System.Threading.Semaphore.Release(System.Int32)">
      <summary>Quitte le sémaphore un nombre spécifié de fois et retourne le compteur précédent.</summary>
      <returns>Compteur du sémaphore avant appel de la méthode <see cref="Overload:System.Threading.Semaphore.Release" />. </returns>
      <param name="releaseCount">Nombre de fois où quitter le sémaphore.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="releaseCount" /> est inférieur à 1.</exception>
      <exception cref="T:System.Threading.SemaphoreFullException">Le compteur du sémaphore est déjà à la valeur maximale.</exception>
      <exception cref="T:System.IO.IOException">Une erreur Win32 s'est produite avec un sémaphore nommé.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Le sémaphore actuel représente un sémaphore système nommé, mais l'utilisateur ne détient pas de droits <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.– ou –Le sémaphore actuel représente un sémaphore système nommé, mais il n'a pas été ouvert avec des droits <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</exception>
    </member>
    <member name="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Threading.Semaphore@)">
      <summary>[SÉCURITÉ CRITIQUE] Ouvre le sémaphore nommé spécifié, s'il existe déjà et renvoie une valeur qui indique si l'opération a réussi.</summary>
      <returns>La valeur est true si le sémaphore nommé a bien été ouvert, sinon false.</returns>
      <param name="name">Nom du sémaphore système à ouvrir.</param>
      <param name="result">Lorsque cette méthode est renvoyée, contient un objet <see cref="T:System.Threading.Semaphore" /> représentant le sémaphore nommé si l'appel a réussi, ou null s'il a échoué. Ce paramètre est traité comme non initialisé.</param>
    </member>
    <member name="T:System.Windows.Input.ICommand">
      <summary>Définit le contrat pour la commande.</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
      <summary>Définit la méthode qui détermine si la commande peut s'exécuter dans son état actuel.</summary>
      <returns>La valeur est true si cette commande peut être exécutée, sinon false.</returns>
      <param name="parameter">Données utilisées par la commande. Si la commande ne requiert pas que les données soient passées, cet objet peut avoir la valeur null. </param>
    </member>
    <member name="E:System.Windows.Input.ICommand.CanExecuteChanged">
      <summary>Se produit lorsque des modifications influent sur l'exécution de la commande.</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.Execute(System.Object)">
      <summary>Définit la méthode à appeler lorsque la commande est appelée.</summary>
      <param name="parameter">Données utilisées par la commande. Si la commande ne requiert pas que les données soient passées, cet objet peut avoir la valeur null. </param>
    </member>
  </members>
</doc>