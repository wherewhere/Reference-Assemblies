<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System</name>
  </assembly>
  <members>
    <member name="T:System.FileStyleUriParser">
      <summary>File 체계를 기반으로 하는 사용자 지정할 수 있는 파서입니다.</summary>
    </member>
    <member name="M:System.FileStyleUriParser.#ctor">
      <summary>File 체계를 기반으로 하는 사용자 지정할 수 있는 파서를 만듭니다.</summary>
    </member>
    <member name="T:System.FtpStyleUriParser">
      <summary>FTP(파일 전송 프로토콜) 체계를 기반으로 하는 사용자 지정할 수 있는 파서입니다.</summary>
    </member>
    <member name="M:System.FtpStyleUriParser.#ctor">
      <summary>FTP(파일 전송 프로토콜) 체계를 기반으로 하는 사용자 지정할 수 있는 파서를 만듭니다.</summary>
    </member>
    <member name="T:System.GenericUriParser">
      <summary>계층적 URI에 대한 사용자 지정할 수 있는 파서입니다.</summary>
    </member>
    <member name="M:System.GenericUriParser.#ctor(System.GenericUriParserOptions)">
      <summary>계층적 URI에 대한 사용자 지정할 수 있는 파서를 만듭니다.</summary>
      <param name="options">이 <see cref="T:System.GenericUriParser" />에 대한 옵션을 지정합니다.</param>
    </member>
    <member name="T:System.GenericUriParserOptions">
      <summary>
        <see cref="T:System.UriParser" />에 대한 옵션을 지정합니다.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.AllowEmptyAuthority">
      <summary>파서에서 인증 기관이 없는 URI를 허용합니다.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.Default">
      <summary>파서에서 다음을 수행합니다.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontCompressPath">
      <summary>파서에서 URI를 정식화하지 않습니다.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontConvertPathBackslashes">
      <summary>파서에서 백슬래시를 슬래시로 변환하지 않습니다.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontUnescapePathDotsAndSlashes">
      <summary>파서에서 경로 점, 슬래시 또는 백슬래시를 이스케이프 해제합니다.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.GenericAuthority">
      <summary>파서에서 레지스트리 기반 인증 기관을 허용합니다.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.Idn">
      <summary>파서에서 호스트 이름에 대한 IDN(Internationalized Domain Name) 구문 분석을 지원합니다.IDN 사용 여부는 구성 값에 따라 결정됩니다.자세한 내용은 설명 부분을 참조하세요.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.IriParsing">
      <summary>파서에서 RFC 3987의 IRI(International Resource Identifiers)에 지정된 구문 분석 규칙을 지원합니다.IRI 사용 여부는 구성 값에 따라 결정됩니다.자세한 내용은 설명 부분을 참조하세요.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoFragment">
      <summary>구성표에서 조각 부분을 정의하지 않습니다.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoPort">
      <summary>구성표에서 포트를 정의하지 않습니다.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoQuery">
      <summary>구성표에서 쿼리 부분을 정의하지 않습니다.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoUserInfo">
      <summary>구성표에서 사용자 정보 부분을 정의하지 않습니다.</summary>
    </member>
    <member name="T:System.HttpStyleUriParser">
      <summary>HTTP 체계를 기반으로 하는 사용자 지정할 수 있는 파서입니다.</summary>
    </member>
    <member name="M:System.HttpStyleUriParser.#ctor">
      <summary>HTTP 체계를 기반으로 하는 사용자 지정할 수 있는 파서를 만듭니다.</summary>
    </member>
    <member name="T:System.Uri">
      <summary>URI(Uniform Resource Identifier)의 개체 표현을 제공하며 URI 부분에 쉽게 액세스할 수 있도록 합니다.</summary>
    </member>
    <member name="M:System.Uri.#ctor(System.String)">
      <summary>지정된 URI를 사용하는 <see cref="T:System.Uri" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="uriString">URI입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" />가 null인 경우 </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="uriString" />이 비어 있는 경우-또는- <paramref name="uriString" />에 지정된 체계가 제대로 구성되지 않은 경우. <see cref="M:System.Uri.CheckSchemeName(System.String)" />을 참조하세요.-또는- <paramref name="uriString" />에 슬래시가 너무 많은 경우-또는- <paramref name="uriString" />에 지정된 패스워드가 잘못된 경우-또는- <paramref name="uriString" />에 지정된 호스트 이름이 잘못된 경우-또는- <paramref name="uriString" />에 지정된 파일 이름이 잘못된 경우 -또는- <paramref name="uriString" />에 지정된 사용자 이름이 잘못된 경우-또는- <paramref name="uriString" />에 지정된 호스트 또는 인증 기관 이름이 백슬래시로 끝나는 경우-또는- <paramref name="uriString" />에 지정된 포트 번호가 잘못되었거나 구문 분석될 수 없는 경우-또는- <paramref name="uriString" />의 길이가 65519자를 초과하는 경우-또는- <paramref name="uriString" />에 지정된 체계의 길이가 1024자를 초과하는 경우-또는- <paramref name="uriString" />에 잘못된 문자 시퀀스가 있는 경우-또는- <paramref name="uriString" />에 지정된 MS-DOS 경로가 c:\\로 시작하지 않는 경우</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String,System.UriKind)">
      <summary>지정된 URI를 사용하는 <see cref="T:System.Uri" /> 클래스의 새 인스턴스를 초기화합니다. 이 생성자를 사용하면 URI 문자열이 상대 URI 또는 절대 URI인지, 아니면 결정되지 않았는지 여부를 지정할 수 있습니다.</summary>
      <param name="uriString">
        <see cref="T:System.Uri" /> 인스턴스가 나타낼 리소스를 식별하는 문자열입니다.</param>
      <param name="uriKind">URI 문자열이 상대 URI 또는 절대 URI인지, 아니면 결정되지 않았는지 여부를 지정합니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="uriKind" />가 유효하지 않은 경우(가능한 값은 <see cref="F:System.UriKind.Absolute" />, <see cref="F:System.UriKind.Relative" /> 또는 <see cref="F:System.UriKind.RelativeOrAbsolute" />임)</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" />가 null인 경우 </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="uriString" />에 상대 URI가 포함되어 있고 <paramref name="uriKind" />가 <see cref="F:System.UriKind.Absolute" />인 경우또는<paramref name="uriString" />에 절대 URI가 포함되어 있고 <paramref name="uriKind" />가 <see cref="F:System.UriKind.Relative" />인 경우</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String)">
      <summary>지정된 기본 URI와 상대 URI 문자열을 기반으로 <see cref="T:System.Uri" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="baseUri">기본 URI입니다. </param>
      <param name="relativeUri">기본 URI에 추가할 상대 URI입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" />가 null인 경우 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" />가 절대 <see cref="T:System.Uri" /> 인스턴스가 아닌 경우</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="baseUri" />와 <paramref name="relativeUri" />를 조합하여 만든 URI가 비어 있거나 공백만 포함하는 경우-또는- <paramref name="baseUri" />와 <paramref name="relativeUri" />를 조합하여 만든 URI에 지정된 체계가 잘못된 경우-또는- <paramref name="baseUri" />와 <paramref name="relativeUri" />를 조합하여 만든 URI에 슬래시가 너무 많은 경우-또는- <paramref name="baseUri" />와 <paramref name="relativeUri" />를 조합하여 만든 URI에 지정된 비밀번호가 잘못된 경우-또는- <paramref name="baseUri" />와 <paramref name="relativeUri" />를 조합하여 만든 URI에 지정된 호스트 이름이 잘못된 경우-또는- <paramref name="baseUri" />와 <paramref name="relativeUri" />를 조합하여 만든 URI에 지정된 파일 이름이 잘못된 경우 -또는- <paramref name="baseUri" />와 <paramref name="relativeUri" />를 조합하여 만든 URI에 지정된 사용자 이름이 잘못된 경우-또는- <paramref name="baseUri" />와 <paramref name="relativeUri" />를 조합하여 만든 URI에 지정된 호스트 또는 인증 기관 이름이 백슬래시로 끝나는 경우-또는- <paramref name="baseUri" />와 <paramref name="relativeUri" />를 조합하여 만든 URI에 지정된 포트 번호가 잘못되었거나 구문 분석될 수 없는 경우-또는- <paramref name="baseUri" />와 <paramref name="relativeUri" />를 조합하여 만든 URI의 길이가 65519자를 초과하는 경우-또는- <paramref name="baseUri" />와 <paramref name="relativeUri" />를 조합하여 만든 URI에 지정된 체계의 길이가 1024자를 초과하는 경우-또는- <paramref name="baseUri" />와 <paramref name="relativeUri" />를 조합하여 만든 URI에 잘못된 문자 시퀀스가 있는 경우-또는- <paramref name="uriString" />에 지정된 MS-DOS 경로가 c:\\로 시작하지 않는 경우</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.Uri)">
      <summary>지정된 기본 <see cref="T:System.Uri" /> 인스턴스와 상대 <see cref="T:System.Uri" /> 인스턴스의 조합을 기반으로 <see cref="T:System.Uri" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="baseUri">새 <see cref="T:System.Uri" /> 인스턴스의 기본 URI인 절대 <see cref="T:System.Uri" />입니다. </param>
      <param name="relativeUri">
        <paramref name="baseUri" />와 결합되는 상대 <see cref="T:System.Uri" /> 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" />가 절대 <see cref="T:System.Uri" /> 인스턴스가 아닌 경우</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="baseUri" />와 <paramref name="relativeUri" />를 조합하여 만든 URI가 비어 있거나 공백만 포함하는 경우-또는- <paramref name="baseUri" />와 <paramref name="relativeUri" />를 조합하여 만든 URI에 지정된 체계가 잘못된 경우-또는- <paramref name="baseUri" />와 <paramref name="relativeUri" />를 조합하여 만든 URI에 슬래시가 너무 많은 경우-또는- <paramref name="baseUri" />와 <paramref name="relativeUri" />를 조합하여 만든 URI에 지정된 비밀번호가 잘못된 경우-또는- <paramref name="baseUri" />와 <paramref name="relativeUri" />를 조합하여 만든 URI에 지정된 호스트 이름이 잘못된 경우-또는- <paramref name="baseUri" />와 <paramref name="relativeUri" />를 조합하여 만든 URI에 지정된 파일 이름이 잘못된 경우 -또는- <paramref name="baseUri" />와 <paramref name="relativeUri" />를 조합하여 만든 URI에 지정된 사용자 이름이 잘못된 경우-또는- <paramref name="baseUri" />와 <paramref name="relativeUri" />를 조합하여 만든 URI에 지정된 호스트 또는 인증 기관 이름이 백슬래시로 끝나는 경우-또는- <paramref name="baseUri" />와 <paramref name="relativeUri" />를 조합하여 만든 URI에 지정된 포트 번호가 잘못되었거나 구문 분석될 수 없는 경우-또는- <paramref name="baseUri" />와 <paramref name="relativeUri" />를 조합하여 만든 URI의 길이가 65519자를 초과하는 경우-또는- <paramref name="baseUri" />와 <paramref name="relativeUri" />를 조합하여 만든 URI에 지정된 체계의 길이가 1024자를 초과하는 경우-또는- <paramref name="baseUri" />와 <paramref name="relativeUri" />를 조합하여 만든 URI에 잘못된 문자 시퀀스가 있는 경우-또는- <paramref name="uriString" />에 지정된 MS-DOS 경로가 c:\\로 시작하지 않는 경우</exception>
    </member>
    <member name="P:System.Uri.AbsolutePath">
      <summary>URI의 절대 경로를 가져옵니다.</summary>
      <returns>리소스에 대한 절대 경로가 포함된 <see cref="T:System.String" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 속성은 절대 <see cref="T:System.Uri" /> 인스턴스에만 사용할 수 있는 경우 </exception>
    </member>
    <member name="P:System.Uri.AbsoluteUri">
      <summary>절대 URI를 가져옵니다.</summary>
      <returns>전체 URI가 포함된 <see cref="T:System.String" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 속성은 절대 <see cref="T:System.Uri" /> 인스턴스에만 사용할 수 있는 경우 </exception>
    </member>
    <member name="P:System.Uri.Authority">
      <summary>서버의 DNS(Domain Name System) 호스트 이름이나 IP 주소 및 포트 번호를 가져옵니다.</summary>
      <returns>이 인스턴스가 나타내는 URI의 인증 기관 구성 요소가 포함된 <see cref="T:System.String" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 인스턴스가 상대 URI를 나타내고 이 속성이 절대 URI에만 유효한 경우 </exception>
    </member>
    <member name="M:System.Uri.CheckHostName(System.String)">
      <summary>지정된 호스트 이름이 유효한 DNS 이름인지 여부를 확인합니다.</summary>
      <returns>호스트 이름의 형식을 나타내는 <see cref="T:System.UriHostNameType" />입니다. 호스트 이름의 형식을 확인할 수 없거나 호스트 이름이 null 또는 길이가 0인 문자열이면 이 메서드는 <see cref="F:System.UriHostNameType.Unknown" />을 반환합니다.</returns>
      <param name="name">유효성을 확인할 호스트 이름입니다. IPv4 또는 IPv6 주소이거나 인터넷 호스트 이름일 수 있습니다. </param>
    </member>
    <member name="M:System.Uri.CheckSchemeName(System.String)">
      <summary>지정된 체계 이름이 유효한지 여부를 확인합니다.</summary>
      <returns>체계 이름이 올바르면 true이고, 그렇지 않으면 false인 <see cref="T:System.Boolean" /> 값입니다.</returns>
      <param name="schemeName">유효성을 확인할 체계 이름입니다. </param>
    </member>
    <member name="M:System.Uri.Compare(System.Uri,System.Uri,System.UriComponents,System.UriFormat,System.StringComparison)">
      <summary>지정된 비교 규칙을 사용하여 두 URI의 지정된 부분을 비교합니다.</summary>
      <returns>비교하는 <see cref="T:System.Uri" /> 구성 요소 간의 어휘 관계를 나타내는 <see cref="T:System.Int32" /> 값입니다.값의미0보다 작음<paramref name="uri1" />가 <paramref name="uri2" />보다 작은 경우0<paramref name="uri1" />가 <paramref name="uri2" />와 같은 경우0보다 큼<paramref name="uri1" />가 <paramref name="uri2" />보다 큰 경우</returns>
      <param name="uri1">첫째 <see cref="T:System.Uri" />입니다.</param>
      <param name="uri2">둘째 <see cref="T:System.Uri" />입니다.</param>
      <param name="partsToCompare">비교할 <paramref name="uri1" />과 <paramref name="uri2" />의 부분을 지정하는 <see cref="T:System.UriComponents" /> 값의 비트 조합입니다.</param>
      <param name="compareFormat">URI 구성 요소를 비교할 때 사용되는 문자 이스케이프를 지정하는 <see cref="T:System.UriFormat" /> 값 중 하나입니다.</param>
      <param name="comparisonType">
        <see cref="T:System.StringComparison" /> 값 중 하나입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" />가 유효한 <see cref="T:System.StringComparison" /> 값이 아닌 경우</exception>
    </member>
    <member name="P:System.Uri.DnsSafeHost">
      <summary>DNS 확인에 사용하는 데 안전한 이스케이프되지 않은 호스트 이름을 가져옵니다.</summary>
      <returns>DNS 확인에 적합한 URI의 이스케이프되지 않은 호스트 부분이 포함된 <see cref="T:System.String" />이거나, DNS 확인에 이미 적합한 경우 이스케이프가 해제된 원래 호스트 문자열입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 속성은 절대 <see cref="T:System.Uri" /> 인스턴스에만 사용할 수 있는 경우 </exception>
    </member>
    <member name="M:System.Uri.Equals(System.Object)">
      <summary>두 <see cref="T:System.Uri" /> 인스턴스가 같은지 비교합니다.</summary>
      <returns>두 인스턴스가 같은 URI를 나타내면 true이고, 그렇지 않으면 false인 <see cref="T:System.Boolean" /> 값입니다.</returns>
      <param name="comparand">현재 인스턴스와 비교할 URI 식별자나 <see cref="T:System.Uri" /> 인스턴스입니다. </param>
    </member>
    <member name="M:System.Uri.EscapeDataString(System.String)">
      <summary>문자열을 이스케이프된 표현으로 변환합니다.</summary>
      <returns>
        <paramref name="stringToEscape" />에 대한 이스케이프된 표현이 포함된 <see cref="T:System.String" />입니다.</returns>
      <param name="stringToEscape">이스케이프할 문자열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" />가 null인 경우 </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="stringToEscape" />의 길이가 32766자를 초과하는 경우</exception>
    </member>
    <member name="M:System.Uri.EscapeUriString(System.String)">
      <summary>URI 문자열을 이스케이프된 표현으로 변환합니다.</summary>
      <returns>
        <paramref name="stringToEscape" />에 대한 이스케이프된 표현이 포함된 <see cref="T:System.String" />입니다.</returns>
      <param name="stringToEscape">이스케이프할 문자열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" />가 null인 경우 </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="stringToEscape" />의 길이가 32766자를 초과하는 경우</exception>
    </member>
    <member name="P:System.Uri.Fragment">
      <summary>이스케이프된 URI 조각을 가져옵니다.</summary>
      <returns>URI 조각 정보가 포함된 <see cref="T:System.String" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 속성은 절대 <see cref="T:System.Uri" /> 인스턴스에만 사용할 수 있는 경우 </exception>
    </member>
    <member name="M:System.Uri.FromHex(System.Char)">
      <summary>16진수의 10진수 값을 가져옵니다.</summary>
      <returns>지정된 16진수에 해당하는 0에서 15까지의 숫자가 포함된 <see cref="T:System.Int32" /> 값입니다.</returns>
      <param name="digit">변환할 16진수(0-9, a-f, A-F)입니다. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="digit" />가 유효한 16진수(0-9, a-f, A-F)가 아닌 경우 </exception>
    </member>
    <member name="M:System.Uri.GetComponents(System.UriComponents,System.UriFormat)">
      <summary>특수 문자의 지정된 이스케이프를 사용하여 현재 인스턴스의 지정된 구성 요소를 가져옵니다.</summary>
      <returns>구성 요소가 포함된 <see cref="T:System.String" />입니다.</returns>
      <param name="components">호출자에게 반환할 현재 인스턴스의 부분을 지정하는 <see cref="T:System.UriComponents" /> 값의 비트 조합입니다.</param>
      <param name="format">특수 문자가 이스케이프되는 방법을 제어하는 <see cref="T:System.UriFormat" /> 값 중 하나입니다. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="uriComponents" />가 유효한 <see cref="T:System.UriComponents" /> 값의 조합이 아닌 경우</exception>
      <exception cref="T:System.InvalidOperationException">이 메서드는 절대 <see cref="T:System.Uri" /> 인스턴스에만 사용할 수 있는 경우</exception>
    </member>
    <member name="M:System.Uri.GetHashCode">
      <summary>URI의 해시 코드를 가져옵니다.</summary>
      <returns>이 URI에 대해 생성된 해시 값이 포함된 <see cref="T:System.Int32" />입니다.</returns>
    </member>
    <member name="P:System.Uri.Host">
      <summary>이 인스턴스의 호스트 구성 요소를 가져옵니다.</summary>
      <returns>호스트 이름이 포함된 <see cref="T:System.String" />입니다. 대개 서버의 DNS 호스트 이름이나 IP 주소입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 속성은 절대 <see cref="T:System.Uri" /> 인스턴스에만 사용할 수 있는 경우 </exception>
    </member>
    <member name="P:System.Uri.HostNameType">
      <summary>URI에 지정된 호스트 이름의 형식을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.UriHostNameType" /> 열거의 멤버입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 인스턴스가 상대 URI를 나타내고 이 속성이 절대 URI에만 유효한 경우 </exception>
    </member>
    <member name="P:System.Uri.IsAbsoluteUri">
      <summary>
        <see cref="T:System.Uri" /> 인스턴스가 절대 URI인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Uri" /> 인스턴스가 절대 URI이면 true이고, 그렇지 않으면 false인 <see cref="T:System.Boolean" /> 값입니다.</returns>
    </member>
    <member name="M:System.Uri.IsBaseOf(System.Uri)">
      <summary>현재 <see cref="T:System.Uri" /> 인스턴스가 지정된 <see cref="T:System.Uri" /> 인스턴스의 기본 URI인지 여부를 확인합니다.</summary>
      <returns>현재 <see cref="T:System.Uri" /> 인스턴스가 <paramref name="uri" />의 기본 URI이면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="uri">테스트할 지정된 <see cref="T:System.Uri" /> 인스턴스입니다. </param>
    </member>
    <member name="P:System.Uri.IsDefaultPort">
      <summary>URI의 포트 값이 이 체계의 기본값인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="P:System.Uri.Port" /> 속성의 값이 이 체계의 기본 포트이면 true이고, 그렇지 않으면 false인 <see cref="T:System.Boolean" /> 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 인스턴스가 상대 URI를 나타내고 이 속성이 절대 URI에만 유효한 경우 </exception>
    </member>
    <member name="P:System.Uri.IsFile">
      <summary>지정된 <see cref="T:System.Uri" />가 파일 URI인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Uri" />가 파일 URI이면 true이고, 그렇지 않으면 false인 <see cref="T:System.Boolean" /> 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 인스턴스가 상대 URI를 나타내고 이 속성이 절대 URI에만 유효한 경우 </exception>
    </member>
    <member name="M:System.Uri.IsHexDigit(System.Char)">
      <summary>지정된 문자가 유효한 16진수인지 여부를 확인합니다.</summary>
      <returns>문자가 유효한 16진수이면 true이고, 그렇지 않으면 false인 <see cref="T:System.Boolean" /> 값입니다.</returns>
      <param name="character">유효성을 확인할 문자입니다. </param>
    </member>
    <member name="P:System.Uri.IsLoopback">
      <summary>지정된 <see cref="T:System.Uri" />가 로컬 호스트를 참조하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Uri" />가 로컬 호스트를 참조하면 true이고, 그렇지 않으면 false인 <see cref="T:System.Boolean" /> 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 인스턴스가 상대 URI를 나타내고 이 속성이 절대 URI에만 유효한 경우 </exception>
    </member>
    <member name="P:System.Uri.IsUnc">
      <summary>지정된 <see cref="T:System.Uri" />가 UNC(Universal Naming Convention) 경로인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Uri" />가 UNC 경로이면 true이고, 그렇지 않으면 false인 <see cref="T:System.Boolean" /> 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 속성은 절대 <see cref="T:System.Uri" /> 인스턴스에만 사용할 수 있는 경우 </exception>
    </member>
    <member name="M:System.Uri.IsWellFormedOriginalString">
      <summary>이 <see cref="T:System.Uri" />를 구성하는 데 사용된 문자열의 형식이 올바른지, 이후에 문자열을 이스케이프하지 않아도 되는지 여부를 나타냅니다.</summary>
      <returns>문자열이 제대로 구성되었으면 true이고, 그렇지 않으면 false인 <see cref="T:System.Boolean" /> 값입니다.</returns>
    </member>
    <member name="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)">
      <summary>문자열로 <see cref="T:System.Uri" /> 생성을 시도하여 문자열 형식이 올바른지 여부를 나타내고 이후에 문자열을 이스케이프하지 않아도 되는지 확인합니다.</summary>
      <returns>문자열이 RFC 3986에 따라 제대로 구성되었으면 true이고, 그렇지 않으면 false인 <see cref="T:System.Boolean" /> 값입니다.</returns>
      <param name="uriString">문자열로 표시된 <see cref="T:System.Uri" />입니다.</param>
      <param name="uriKind">
        <paramref name="uriString" /> 매개 변수의 URI 형식입니다.</param>
    </member>
    <member name="P:System.Uri.LocalPath">
      <summary>파일 이름에 대한 로컬 운영 체제 표현을 가져옵니다.</summary>
      <returns>파일 이름에 대한 로컬 운영 체제 표현이 포함된 <see cref="T:System.String" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 속성은 절대 <see cref="T:System.Uri" /> 인스턴스에만 사용할 수 있는 경우 </exception>
    </member>
    <member name="M:System.Uri.MakeRelativeUri(System.Uri)">
      <summary>두 <see cref="T:System.Uri" /> 인스턴스 간의 차이점을 확인합니다.</summary>
      <returns>이 URI 인스턴스와 <paramref name="toUri" />의 호스트 이름 및 체계가 같으면 이 메서드는 상대 <see cref="T:System.Uri" />를 반환합니다. 이 상대 URI가 현재 URI 인스턴스에 추가되면 <paramref name="toUri" />가 생성됩니다.호스트 이름이나 체계가 다르면 이 메서드는 <paramref name="toUri" /> 매개 변수를 나타내는 <see cref="T:System.Uri" />을 반환합니다.</returns>
      <param name="uri">현재 URI와 비교할 URI입니다.</param>
      <exception cref="T:System.InvalidOperationException">이 인스턴스가 상대 URI를 나타내고 이 속성이 절대 URI에만 유효한 경우 </exception>
    </member>
    <member name="M:System.Uri.op_Equality(System.Uri,System.Uri)">
      <summary>두 가지 <see cref="T:System.Uri" /> 인스턴스의 값이 같은지 여부를 확인합니다.</summary>
      <returns>
        <see cref="T:System.Uri" /> 인스턴스가 서로 같으면 true이고, 그렇지 않으면 false인 <see cref="T:System.Boolean" /> 값입니다.</returns>
      <param name="uri1">
        <paramref name="uri2" />과 비교할 <see cref="T:System.Uri" /> 인스턴스입니다. </param>
      <param name="uri2">
        <paramref name="uri1" />와 비교할 <see cref="T:System.Uri" /> 인스턴스입니다. </param>
    </member>
    <member name="M:System.Uri.op_Inequality(System.Uri,System.Uri)">
      <summary>두 가지 <see cref="T:System.Uri" /> 인스턴스의 값이 같지 않은지 여부를 확인합니다.</summary>
      <returns>두 <see cref="T:System.Uri" /> 인스턴스가 서로 같지 않으면 true이고, 그렇지 않으면 false인 <see cref="T:System.Boolean" /> 값입니다. 매개 변수 중 하나가 null이면 이 메서드에서 true가 반환됩니다.</returns>
      <param name="uri1">
        <paramref name="uri2" />과 비교할 <see cref="T:System.Uri" /> 인스턴스입니다. </param>
      <param name="uri2">
        <paramref name="uri1" />와 비교할 <see cref="T:System.Uri" /> 인스턴스입니다. </param>
    </member>
    <member name="P:System.Uri.OriginalString">
      <summary>
        <see cref="T:System.Uri" /> 생성자에 전달된 원래 URI 문자열을 가져옵니다.</summary>
      <returns>이 인스턴스를 만들 때 URI를 지정했으면 해당 URI가 포함된 <see cref="T:System.String" />이고, 그렇지 않으면 <see cref="F:System.String.Empty" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 인스턴스가 상대 URI를 나타내고 이 속성이 절대 URI에만 유효한 경우 </exception>
    </member>
    <member name="P:System.Uri.PathAndQuery">
      <summary>물음표(?)로 구분된 <see cref="P:System.Uri.AbsolutePath" /> 속성과 <see cref="P:System.Uri.Query" /> 속성을 가져옵니다.</summary>
      <returns>물음표(?)로 구분된 <see cref="P:System.Uri.AbsolutePath" /> 및 <see cref="P:System.Uri.Query" /> 속성이 포함된 <see cref="T:System.String" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 인스턴스가 상대 URI를 나타내고 이 속성이 절대 URI에만 유효한 경우 </exception>
    </member>
    <member name="P:System.Uri.Port">
      <summary>이 URI의 포트 번호를 가져옵니다.</summary>
      <returns>이 URI의 포트 번호가 포함된 <see cref="T:System.Int32" /> 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 속성은 절대 <see cref="T:System.Uri" /> 인스턴스에만 사용할 수 있는 경우 </exception>
    </member>
    <member name="P:System.Uri.Query">
      <summary>지정된 URI에 포함된 쿼리 정보를 가져옵니다.</summary>
      <returns>지정된 URI에 포함된 쿼리 정보를 포함하는 <see cref="T:System.String" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 속성은 절대 <see cref="T:System.Uri" /> 인스턴스에만 사용할 수 있는 경우 </exception>
    </member>
    <member name="P:System.Uri.Scheme">
      <summary>이 URI의 체계 이름을 가져옵니다.</summary>
      <returns>소문자로 변환된 이 URI의 스키마가 포함된 <see cref="T:System.String" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 속성은 절대 <see cref="T:System.Uri" /> 인스턴스에만 사용할 수 있는 경우 </exception>
    </member>
    <member name="F:System.Uri.SchemeDelimiter">
      <summary>통신 프로토콜 체계를 URI의 주소 부분과 구분하는 문자를 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="P:System.Uri.Segments">
      <summary>지정된 URI를 구성하는 경로 세그먼트가 포함된 배열을 가져옵니다.</summary>
      <returns>지정된 URI를 구성하는 경로 세그먼트가 포함된 <see cref="T:System.String" /> 배열입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 인스턴스가 상대 URI를 나타내고 이 속성이 절대 URI에만 유효한 경우 </exception>
    </member>
    <member name="M:System.Uri.ToString">
      <summary>지정된 <see cref="T:System.Uri" /> 인스턴스에 대한 정식 문자열 표현을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Uri" /> 인스턴스의 이스케이프 해제된 정규 표현을 포함하는 <see cref="T:System.String" /> 인스턴스입니다. #, ? 및 %를 제외한 모든 문자가 이스케이프 해제됩니다.</returns>
    </member>
    <member name="M:System.Uri.TryCreate(System.String,System.UriKind,System.Uri@)">
      <summary>지정된 <see cref="T:System.String" /> 인스턴스와 <see cref="T:System.UriKind" />를 사용하여 새 <see cref="T:System.Uri" />를 만듭니다.</summary>
      <returns>
        <see cref="T:System.Uri" />가 성공적으로 만들어졌으면 true이고, 그렇지 않으면 false인 <see cref="T:System.Boolean" /> 값입니다.</returns>
      <param name="uriString">
        <see cref="T:System.Uri" />를 나타내는 <see cref="T:System.String" />입니다.</param>
      <param name="uriKind">URI의 형식입니다.</param>
      <param name="result">이 메서드가 반환될 때 생성된 <see cref="T:System.Uri" />를 포함합니다.</param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.String,System.Uri@)">
      <summary>지정된 기본 및 상대 <see cref="T:System.String" /> 인스턴스를 사용하여 새 <see cref="T:System.Uri" />를 만듭니다.</summary>
      <returns>
        <see cref="T:System.Uri" />가 성공적으로 만들어졌으면 true이고, 그렇지 않으면 false인 <see cref="T:System.Boolean" /> 값입니다.</returns>
      <param name="baseUri">기본 <see cref="T:System.Uri" />입니다.</param>
      <param name="relativeUri">기본 <see cref="T:System.Uri" />에 추가할, <see cref="T:System.String" />으로 나타낸 상대 <see cref="T:System.Uri" />입니다.</param>
      <param name="result">이 메서드가 반환될 때 <paramref name="baseUri" />와 <paramref name="relativeUri" />에서 만든 <see cref="T:System.Uri" />를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.Uri,System.Uri@)">
      <summary>지정된 기본 및 상대 <see cref="T:System.Uri" /> 인스턴스를 사용하여 새 <see cref="T:System.Uri" />를 만듭니다.</summary>
      <returns>
        <see cref="T:System.Uri" />가 성공적으로 만들어졌으면 true이고, 그렇지 않으면 false인 <see cref="T:System.Boolean" /> 값입니다.</returns>
      <param name="baseUri">기본 <see cref="T:System.Uri" />입니다. </param>
      <param name="relativeUri">기본 <see cref="T:System.Uri" />에 추가할 상대 <see cref="T:System.Uri" />입니다. </param>
      <param name="result">이 메서드가 반환될 때 <paramref name="baseUri" />와 <paramref name="relativeUri" />에서 만든 <see cref="T:System.Uri" />를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Uri.UnescapeDataString(System.String)">
      <summary>문자열을 이스케이프 해제된 표현으로 변환합니다.</summary>
      <returns>
        <paramref name="stringToUnescape" />에 대한 이스케이프 해제된 표현이 포함된 <see cref="T:System.String" />입니다. </returns>
      <param name="stringToUnescape">이스케이프 해제할 문자열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToUnescape" />가 null인 경우 </exception>
    </member>
    <member name="F:System.Uri.UriSchemeFile">
      <summary>URI를 파일 포인터로 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeFtp">
      <summary>FTP(파일 전송 프로토콜)를 통해 URI에 액세스하도록 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeGopher">
      <summary>Gopher 프로토콜을 통해 URI에 액세스하도록 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeHttp">
      <summary>HTTP(Hypertext Transfer Protocol)를 통해 URI에 액세스하도록 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeHttps">
      <summary>HTTPS(Secure Hypertext Transfer Protocol)를 통해 URI에 액세스하도록 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeMailto">
      <summary>URI를 전자 메일 주소로 지정하고 SMTP(Simple Mail Transport Protocol)를 통해 URI에 액세스하도록 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNetPipe">
      <summary>"Indigo" 시스템의 NetPipe 체계를 통해 URI에 액세스하도록 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNetTcp">
      <summary>"Indigo" 시스템의 NetTcp 체계를 통해 URI에 액세스하도록 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNews">
      <summary>URI를 인터넷 뉴스 그룹으로 지정하고 NNTP(Network News Transport Protocol)를 통해 URI에 액세스하도록 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNntp">
      <summary>URI를 인터넷 뉴스 그룹으로 지정하고 NNTP(Network News Transport Protocol)를 통해 URI에 액세스하도록 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="P:System.Uri.UserEscaped">
      <summary>
        <see cref="T:System.Uri" /> 인스턴스를 만들기 전에 URI 문자열을 완전히 이스케이프했음을 나타냅니다.</summary>
      <returns>
        <see cref="T:System.Uri" /> 인스턴스를 만들 때 <paramref name="dontEscape" /> 매개 변수가 true로 설정되었으면 true이고, 그렇지 않으면 false인 <see cref="T:System.Boolean" /> 값입니다.</returns>
    </member>
    <member name="P:System.Uri.UserInfo">
      <summary>지정된 URI와 연결된 사용자 이름, 패스워드 및 기타 사용자 관련 정보를 가져옵니다.</summary>
      <returns>URI와 연결된 사용자 정보가 포함된 <see cref="T:System.String" />입니다. 반환된 값에는 URI의 사용자 정보 부분을 구분하기 위해 예약된 '@' 문자가 포함되지 않습니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 속성은 절대 <see cref="T:System.Uri" /> 인스턴스에만 사용할 수 있는 경우 </exception>
    </member>
    <member name="T:System.UriBuilder">
      <summary>URI(Uniform Resource Indentifier)에 대한 사용자 지정 생성자를 제공하고 <see cref="T:System.Uri" /> 클래스의 URI를 수정합니다.</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor">
      <summary>
        <see cref="T:System.UriBuilder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String)">
      <summary>지정된 URI를 사용하는 <see cref="T:System.UriBuilder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="uri">URI 문자열입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" />가 null인 경우 </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="uri" />가 길이가 0인 문자열이거나 공백만 포함하는 경우-또는- 구문 분석 루틴이 잘못된 형식에서 체계를 발견한 경우-또는- 파서가 "file" 체계를 사용하지 않는 URI에서 두 개 이상의 연속된 슬래시를 발견한 경우-또는- <paramref name="uri" />가 올바른 URI가 아닌 경우 </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String)">
      <summary>지정된 체계 및 호스트를 사용하여 <see cref="T:System.UriBuilder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="schemeName">인터넷 액세스 프로토콜입니다. </param>
      <param name="hostName">DNS 스타일의 도메인 이름 또는 IP 주소입니다. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="schemeName" />이 올바른 체계 이름이 아닌 경우</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32)">
      <summary>지정된 체계, 호스트 및 포트를 사용하여 <see cref="T:System.UriBuilder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="scheme">인터넷 액세스 프로토콜입니다. </param>
      <param name="host">DNS 스타일의 도메인 이름 또는 IP 주소입니다. </param>
      <param name="portNumber">서비스의 IP 포트 번호입니다. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="scheme" />이 올바른 체계 이름이 아닌 경우 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="portNumber" />가 0보다 작거나 65,535보다 큰 경우 </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String)">
      <summary>지정된 체계, 호스트, 포트 번호 및 경로를 사용하여 <see cref="T:System.UriBuilder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="scheme">인터넷 액세스 프로토콜입니다. </param>
      <param name="host">DNS 스타일의 도메인 이름 또는 IP 주소입니다. </param>
      <param name="port">서비스의 IP 포트 번호입니다. </param>
      <param name="pathValue">인터넷 리소스의 경로입니다. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="scheme" />이 올바른 체계 이름이 아닌 경우 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" />가 0보다 작거나 65,535보다 큰 경우 </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
      <summary>지정된 체계, 호스트, 포트 번호, 경로 및 쿼리 문자열이나 단편 식별자를 사용하여 <see cref="T:System.UriBuilder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="scheme">인터넷 액세스 프로토콜입니다. </param>
      <param name="host">DNS 스타일의 도메인 이름 또는 IP 주소입니다. </param>
      <param name="port">서비스의 IP 포트 번호입니다. </param>
      <param name="path">인터넷 리소스의 경로입니다. </param>
      <param name="extraValue">쿼리 문자열 또는 단편 식별자입니다. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="extraValue" />가 null, <see cref="F:System.String.Empty" />, 번호 기호(#)로 시작하는 유효한 단편 식별자 또는 물음표(?)로 시작하는 유효한 쿼리 문자열이 아닌 경우-또는- <paramref name="scheme" />이 올바른 체계 이름이 아닌 경우 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" />가 0보다 작거나 65,535보다 큰 경우 </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.Uri)">
      <summary>지정된 <see cref="T:System.Uri" /> 인스턴스를 사용하여 <see cref="T:System.UriBuilder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="uri">
        <see cref="T:System.Uri" /> 클래스의 인스턴스입니다. </param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="uri" />가 null인 경우 </exception>
    </member>
    <member name="M:System.UriBuilder.Equals(System.Object)">
      <summary>기존 <see cref="T:System.Uri" /> 인스턴스와 <see cref="T:System.UriBuilder" />의 콘텐츠가 같은지 비교합니다.</summary>
      <returns>
        <paramref name="rparam" />이 이 <see cref="T:System.UriBuilder" /> 인스턴스에서 생성된 <see cref="T:System.Uri" />와 같은 <see cref="T:System.Uri" />를 나타내면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="rparam">현재 인스턴스와 비교할 개체입니다. </param>
    </member>
    <member name="P:System.UriBuilder.Fragment">
      <summary>URI의 단편 부분을 가져오거나 설정합니다.</summary>
      <returns>URI의 단편 부분입니다. 단편 시작 부분에 단편 식별자("#")가 추가됩니다.</returns>
    </member>
    <member name="M:System.UriBuilder.GetHashCode">
      <summary>URI의 해시 코드를 반환합니다.</summary>
      <returns>URI용으로 생성된 해시 코드입니다.</returns>
    </member>
    <member name="P:System.UriBuilder.Host">
      <summary>서버의 DNS(Domain Name System) 호스트 이름이나 IP 주소를 가져오거나 설정합니다.</summary>
      <returns>서버의 DNS 호스트 이름 또는 IP 주소입니다.</returns>
    </member>
    <member name="P:System.UriBuilder.Password">
      <summary>URI에 액세스하는 사용자와 관련된 비밀번호를 가져오거나 설정합니다.</summary>
      <returns>URI에 액세스하는 사용자의 비밀번호입니다.</returns>
    </member>
    <member name="P:System.UriBuilder.Path">
      <summary>URI가 참조하는 리소스에 대한 경로를 가져오거나 설정합니다.</summary>
      <returns>URI가 참조하는 리소스에 대한 경로입니다.</returns>
    </member>
    <member name="P:System.UriBuilder.Port">
      <summary>URI의 포트 번호를 가져오거나 설정합니다.</summary>
      <returns>URI의 포트 번호입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">포트 번호를 0보다 작거나 65,535보다 큰 값으로 설정할 수 없는 경우 </exception>
    </member>
    <member name="P:System.UriBuilder.Query">
      <summary>URI에 포함된 쿼리 정보를 가져오거나 설정합니다.</summary>
      <returns>URI에 포함된 쿼리 정보입니다.</returns>
    </member>
    <member name="P:System.UriBuilder.Scheme">
      <summary>URI의 체계 이름을 가져오거나 설정합니다.</summary>
      <returns>URI의 체계입니다.</returns>
      <exception cref="T:System.ArgumentException">체계 이름을 올바른 체계 이름으로만 설정할 수 있는 경우 </exception>
    </member>
    <member name="M:System.UriBuilder.ToString">
      <summary>지정된 <see cref="T:System.UriBuilder" /> 인스턴스의 표시 문자열을 반환합니다.</summary>
      <returns>
        <see cref="T:System.UriBuilder" />의 이스케이프되지 않은 표시 문자열이 포함된 문자열입니다.</returns>
      <exception cref="T:System.UriFormatException">
        <see cref="T:System.UriBuilder" /> 속성에서 생성된 URI에 잘못된 사용자 이름과 비밀번호가 있는 경우(<see cref="P:System.UriBuilder.UserName" /> 속성이 null이거나 빈 문자열이지만 <see cref="P:System.UriBuilder.Password" /> 속성이 비어 있지 않은 경우) </exception>
    </member>
    <member name="P:System.UriBuilder.Uri">
      <summary>지정된 <see cref="T:System.UriBuilder" /> 인스턴스가 만든 <see cref="T:System.Uri" /> 인스턴스를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.UriBuilder" />에서 생성한 URI가 포함된 <see cref="T:System.Uri" />입니다.</returns>
      <exception cref="T:System.UriFormatException">
        <see cref="T:System.UriBuilder" /> 속성에 의해 만들어진 URI가 잘못된 경우 </exception>
    </member>
    <member name="P:System.UriBuilder.UserName">
      <summary>URI에 액세스하는 사용자와 관련된 사용자 이름입니다.</summary>
      <returns>URI에 액세스하는 사용자의 사용자 이름입니다.</returns>
    </member>
    <member name="T:System.UriComponents">
      <summary>
        <see cref="T:System.Uri" />의 부분을 지정합니다.</summary>
    </member>
    <member name="F:System.UriComponents.AbsoluteUri">
      <summary>
        <see cref="P:System.Uri.Scheme" />, <see cref="P:System.Uri.UserInfo" />, <see cref="P:System.Uri.Host" />, <see cref="P:System.Uri.Port" />, <see cref="P:System.Uri.LocalPath" />, <see cref="P:System.Uri.Query" /> 및 <see cref="P:System.Uri.Fragment" /> 데이터입니다.</summary>
    </member>
    <member name="F:System.UriComponents.Fragment">
      <summary>
        <see cref="P:System.Uri.Fragment" /> 데이터입니다.</summary>
    </member>
    <member name="F:System.UriComponents.Host">
      <summary>
        <see cref="P:System.Uri.Host" /> 데이터입니다.</summary>
    </member>
    <member name="F:System.UriComponents.HostAndPort">
      <summary>
        <see cref="P:System.Uri.Host" /> 및 <see cref="P:System.Uri.Port" /> 데이터입니다. 포트 데이터가 Uri에 없고 기본 포트가 <see cref="P:System.Uri.Scheme" />에 할당되어 있는 경우 기본 포트가 반환됩니다. 기본 포트가 없으면 -1이 반환됩니다.</summary>
    </member>
    <member name="F:System.UriComponents.HttpRequestUrl">
      <summary>
        <see cref="P:System.Uri.Scheme" />, <see cref="P:System.Uri.Host" />, <see cref="P:System.Uri.Port" />, <see cref="P:System.Uri.LocalPath" /> 및 <see cref="P:System.Uri.Query" /> 데이터입니다.</summary>
    </member>
    <member name="F:System.UriComponents.KeepDelimiter">
      <summary>구분 기호가 포함되도록 지정합니다.</summary>
    </member>
    <member name="F:System.UriComponents.NormalizedHost">
      <summary>
        <see cref="P:System.Uri.Host" />의 정규화된 형태입니다.</summary>
    </member>
    <member name="F:System.UriComponents.Path">
      <summary>
        <see cref="P:System.Uri.LocalPath" /> 데이터입니다.</summary>
    </member>
    <member name="F:System.UriComponents.PathAndQuery">
      <summary>
        <see cref="P:System.Uri.LocalPath" /> 및 <see cref="P:System.Uri.Query" /> 데이터입니다. </summary>
    </member>
    <member name="F:System.UriComponents.Port">
      <summary>
        <see cref="P:System.Uri.Port" /> 데이터입니다.</summary>
    </member>
    <member name="F:System.UriComponents.Query">
      <summary>
        <see cref="P:System.Uri.Query" /> 데이터입니다.</summary>
    </member>
    <member name="F:System.UriComponents.Scheme">
      <summary>
        <see cref="P:System.Uri.Scheme" /> 데이터입니다.</summary>
    </member>
    <member name="F:System.UriComponents.SchemeAndServer">
      <summary>
        <see cref="P:System.Uri.Scheme" />, <see cref="P:System.Uri.Host" /> 및 <see cref="P:System.Uri.Port" /> 데이터입니다.</summary>
    </member>
    <member name="F:System.UriComponents.SerializationInfoString">
      <summary>URI Serializer에 필요한 완전한 <see cref="T:System.Uri" /> 컨텍스트입니다. 이 컨텍스트에는 IPv6 범위가 포함됩니다.</summary>
    </member>
    <member name="F:System.UriComponents.StrongAuthority">
      <summary>
        <see cref="P:System.Uri.UserInfo" />, <see cref="P:System.Uri.Host" /> 및 <see cref="P:System.Uri.Port" /> 데이터입니다. 포트 데이터가 <see cref="T:System.Uri" />에 없고 기본 포트가 <see cref="P:System.Uri.Scheme" />에 할당되어 있는 경우 기본 포트가 반환됩니다. 기본 포트가 없으면 -1이 반환됩니다.</summary>
    </member>
    <member name="F:System.UriComponents.StrongPort">
      <summary>
        <see cref="P:System.Uri.Port" /> 데이터입니다. 포트 데이터가 <see cref="T:System.Uri" />에 없고 기본 포트가 <see cref="P:System.Uri.Scheme" />에 할당되어 있는 경우 기본 포트가 반환됩니다. 기본 포트가 없으면 -1이 반환됩니다.</summary>
    </member>
    <member name="F:System.UriComponents.UserInfo">
      <summary>
        <see cref="P:System.Uri.UserInfo" /> 데이터입니다.</summary>
    </member>
    <member name="T:System.UriFormat">
      <summary>URI 정보가 이스케이프되는 방법을 제어합니다.</summary>
    </member>
    <member name="F:System.UriFormat.SafeUnescaped">
      <summary>요청된 URI 구성 요소에서 예약된 의미를 갖는 문자가 이스케이프된 상태로 유지됩니다. 다른 모든 문자는 이스케이프되지 않습니다. 설명을 참조하세요.</summary>
    </member>
    <member name="F:System.UriFormat.Unescaped">
      <summary>이스케이프가 수행되지 않습니다.</summary>
    </member>
    <member name="F:System.UriFormat.UriEscaped">
      <summary>이스케이프가 RFC 3986의 규칙에 따라 수행됩니다.</summary>
    </member>
    <member name="T:System.UriFormatException">
      <summary>잘못된 URI(Uniform Resource Identifier)가 감지될 때 발생되는 예외입니다.</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor">
      <summary>
        <see cref="T:System.UriFormatException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String)">
      <summary>지정된 메시지를 사용하여 <see cref="T:System.UriFormatException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="textString">오류 메시지 문자열입니다. </param>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String,System.Exception)">
      <summary>지정된 메시지와 해당 예외의 근본 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.UriFormatException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="textString">오류 메시지 문자열입니다.</param>
      <param name="e">현재 예외의 원인인 예외입니다. <paramref name="e" /> 매개 변수가 null 참조(Visual Basic에서는 Nothing)가 아니면 내부 예외를 처리하는 catch 블록에서 현재 예외가 발생합니다. </param>
    </member>
    <member name="T:System.UriHostNameType">
      <summary>
        <see cref="M:System.Uri.CheckHostName(System.String)" /> 메서드에 대한 호스트 이름 형식을 정의합니다.</summary>
    </member>
    <member name="F:System.UriHostNameType.Basic">
      <summary>호스트를 설정했지만 형식을 확인할 수 없습니다.</summary>
    </member>
    <member name="F:System.UriHostNameType.Dns">
      <summary>호스트 이름이 DNS 스타일의 호스트 이름입니다.</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv4">
      <summary>호스트 이름이 IP(인터넷 프로토콜) 버전 4 호스트 주소입니다.</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv6">
      <summary>호스트 이름이 IP(인터넷 프로토콜) 버전 6 호스트 주소입니다.</summary>
    </member>
    <member name="F:System.UriHostNameType.Unknown">
      <summary>호스트 이름 형식이 제공되지 않습니다.</summary>
    </member>
    <member name="T:System.UriIdnScope">
      <summary>구성 설정 IDN(Internationalized Domain Name) 구문 분석에 사용할 수 있는 값을 제공합니다.</summary>
    </member>
    <member name="F:System.UriIdnScope.All">
      <summary>이 값은 모든 유니코드 도메인 이름을 해당하는 Punycode 항목(IDN 이름)으로 변환합니다.</summary>
    </member>
    <member name="F:System.UriIdnScope.AllExceptIntranet">
      <summary>이 값은 해당하는 Punycode 항목(IDN 이름)을 사용하도록 모든 외부 유니코드 도메인 이름을 변환합니다. 이 경우 로컬 인트라넷에 있는 국가별 이름을 처리하기 위해 인트라넷에 사용되는 DNS 서버가 유니코드 이름 확인을 지원해야 합니다.</summary>
    </member>
    <member name="F:System.UriIdnScope.None">
      <summary>이 값은 Punycode를 사용하도록 어떠한 유니코드 도메인 이름도 변환하지 않습니다. 이 값은 .NET Framework 2.0 동작과 일치하는 기본값입니다.</summary>
    </member>
    <member name="T:System.UriKind">
      <summary>몇 가지 <see cref="Overload:System.Uri.#ctor" /> 메서드에 대한 <see cref="T:System.Uri" />의 종류를 정의합니다.</summary>
    </member>
    <member name="F:System.UriKind.Absolute">
      <summary>URI가 절대 URI입니다.</summary>
    </member>
    <member name="F:System.UriKind.Relative">
      <summary>URI가 상대 URI입니다.</summary>
    </member>
    <member name="F:System.UriKind.RelativeOrAbsolute">
      <summary>URI의 종류가 결정되지 않았습니다.</summary>
    </member>
    <member name="T:System.UriParser">
      <summary>새 URI 체계를 구문 분석합니다. 이 클래스는 추상 클래스입니다.</summary>
    </member>
    <member name="M:System.UriParser.#ctor">
      <summary>기본 URI 파서를 만듭니다.</summary>
    </member>
    <member name="M:System.UriParser.GetComponents(System.Uri,System.UriComponents,System.UriFormat)">
      <summary>URI에서 구성 요소를 가져옵니다.</summary>
      <returns>구성 요소를 포함하는 문자열입니다.</returns>
      <param name="uri">구문 분석할 <see cref="T:System.Uri" />입니다.</param>
      <param name="components">
        <paramref name="uri" />에서 검색할 <see cref="T:System.UriComponents" />입니다.</param>
      <param name="format">특수 문자가 이스케이프되는 방법을 제어하는 <see cref="T:System.UriFormat" /> 값 중 하나입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" />이 잘못된 경우-또는-<paramref name="components" />가 유효한 <see cref="T:System.UriComponents" /> 값의 조합이 아닌 경우 </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="uri" />에 사용자 기반 구문 분석이 필요한 경우-또는-<paramref name="uri" />가 절대 URI가 아닌 경우. 상대 URI는 이 메서드에서 사용할 수 있는 경우</exception>
    </member>
    <member name="M:System.UriParser.InitializeAndValidate(System.Uri,System.UriFormatException@)">
      <summary>파서의 상태를 초기화하고 URI의 유효성을 검사합니다.</summary>
      <param name="uri">유효성을 검사할 <see cref="T:System.Uri" />입니다.</param>
      <param name="parsingError">유효성 검사 오류가 발생한 경우 해당 오류입니다.</param>
    </member>
    <member name="M:System.UriParser.IsBaseOf(System.Uri,System.Uri)">
      <summary>
        <paramref name="baseUri" />가 <paramref name="relativeUri" />의 기본 URI인지 여부를 확인합니다.</summary>
      <returns>
        <paramref name="baseUri" />가 <paramref name="relativeUri" />의 기본 URI이면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="baseUri">기본 URI입니다.</param>
      <param name="relativeUri">테스트할 URI입니다.</param>
    </member>
    <member name="M:System.UriParser.IsKnownScheme(System.String)">
      <summary>체계의 파서가 등록되었는지 여부를 나타냅니다.</summary>
      <returns>
        <paramref name="schemeName" />이 등록되었으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="schemeName">확인할 체계 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemeName" /> 매개 변수가 null인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">잘못된 <paramref name="schemeName" /> 매개 변수인 경우 </exception>
    </member>
    <member name="M:System.UriParser.IsWellFormedOriginalString(System.Uri)">
      <summary>URI가 제대로 구성되었는지 여부를 나타냅니다.</summary>
      <returns>
        <paramref name="uri" />가 제대로 구성되었으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="uri">확인할 URI입니다.</param>
    </member>
    <member name="M:System.UriParser.OnNewUri">
      <summary>
        <see cref="T:System.Uri" /> 생성자에 의해 호출되어 <see cref="T:System.UriParser" /> 인스턴스를 가져옵니다.</summary>
      <returns>생성된 <see cref="T:System.Uri" />의 <see cref="T:System.UriParser" />입니다.</returns>
    </member>
    <member name="M:System.UriParser.OnRegister(System.String,System.Int32)">
      <summary>
        <see cref="T:System.UriParser" /> 메서드가 등록될 때 Framework에서 호출됩니다.</summary>
      <param name="schemeName">이 <see cref="T:System.UriParser" />와 연결된 체계입니다.</param>
      <param name="defaultPort">체계의 포트 번호입니다.</param>
    </member>
    <member name="M:System.UriParser.Register(System.UriParser,System.String,System.Int32)">
      <summary>체계 및 포트 번호와 <see cref="T:System.UriParser" />를 연결합니다.</summary>
      <param name="uriParser">등록할 <see cref="T:System.UriParser" />입니다.</param>
      <param name="schemeName">이 파서와 연결된 체계의 이름입니다.</param>
      <param name="defaultPort">지정된 체계의 기본 포트 번호입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriParser" /> 매개 변수가 null입니다.-또는-<paramref name="schemeName" /> 매개 변수가 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="schemeName" /> 매개 변수가 잘못된 경우-또는-<paramref name="defaultPort" /> 매개 변수가 잘못된 경우 <paramref name="defaultPort" /> 매개 변수가 0보다 작거나 65534보다 큰 경우</exception>
    </member>
    <member name="M:System.UriParser.Resolve(System.Uri,System.Uri,System.UriFormatException@)">
      <summary>
        <see cref="T:System.Uri" /> 생성자와 <see cref="Overload:System.Uri.TryCreate" />에서 호출되어 상대 URI를 확인합니다.</summary>
      <returns>확인된 상대 <see cref="T:System.Uri" />의 문자열입니다.</returns>
      <param name="baseUri">기본 URI입니다.</param>
      <param name="relativeUri">상대 URI입니다.</param>
      <param name="parsingError">확인 프로세스 중 오류가 발생한 경우 해당 오류입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="baseUri" /> 매개 변수가 절대가 아닌 경우 <see cref="T:System.Uri" />-또는-<paramref name="baseUri" /> 매개 변수에 사용자 기반 구문 분석이 필요한 경우</exception>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary>
        <see cref="T:System.String" /> 형식의 인스턴스를 <see cref="T:System.Uri" /> 인스턴스로 변환합니다.</summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary>
        <see cref="T:System.UriTypeConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>이 변환기가 지정된 소스 형식의 개체를 <see cref="T:System.Uri" /> 형식의 인스턴스로 변환할 수 있는지 여부를 반환합니다. </summary>
      <returns>변환기에서 지정된 형식을 <see cref="T:System.Uri" />의 인스턴스로 변환할 수 있으면 true이고, 그렇지 않으면 false인 <see cref="T:System.Boolean" /> 값입니다.</returns>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType">변환할 원본 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceType" />이 null(Visual Basic에서는Nothing)인 경우</exception>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>이 변환기가 지정된 컨텍스트를 사용하여 개체를 지정된 형식으로 변환할 수 있는지 여부를 반환합니다.</summary>
      <returns>
        <paramref name="destinationType" />이 <see cref="T:System.String" /> 또는 <see cref="T:System.Uri" /> 형식이면 true이고, 그렇지 않으면 false인 <see cref="T:System.Boolean" /> 값입니다.</returns>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType">변환할 대상 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 컨텍스트 및 문화권 정보를 사용하여, 지정된 개체를 이 변환기의 형식으로 변환합니다. </summary>
      <returns>변환된 <see cref="T:System.Object" />를 나타내는 <see cref="T:System.Uri" /> 인스턴스입니다. <paramref name="value" /> 매개 변수가 null이면 null이 반환됩니다.</returns>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">현재 문화권으로 사용할 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value">
        <see cref="T:System.Uri" />의 인스턴스로 변환할 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우 <paramref name="value" />가 <see cref="T:System.String" /> 또는 <see cref="T:System.Uri" /> 이외의 형식이면 이 예외가 발생합니다. <paramref name="context" /> 또는 <paramref name="culture" /> 매개 변수는 <paramref name="value" /> 매개 변수에 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>지정된 컨텍스트 및 문화권 정보를 사용하여 지정된 값 개체를 지정된 형식으로 변환합니다.</summary>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />입니다. null이 전달되면 현재 문화권이 선택됩니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType">
        <paramref name="value" /> 매개 변수를 변환할 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 매개 변수가 null인 경우</exception>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratedCodeAttribute">
      <summary>도구에서 생성한 코드를 식별합니다.이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.GeneratedCodeAttribute.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.CodeDom.Compiler.GeneratedCodeAttribute" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="tool">코드를 생성한 도구의 이름입니다.</param>
      <param name="version">코드를 생성한 도구의 버전입니다.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Tool">
      <summary>코드를 생성한 도구의 이름을 가져옵니다.</summary>
      <returns>코드를 생성한 도구의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Version">
      <summary>코드를 생성한 도구의 버전을 가져옵니다.</summary>
      <returns>코드를 생성한 도구의 버전입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.ISet`1">
      <summary>집합 추상화를 위한 기본 인터페이스를 제공합니다.</summary>
      <typeparam name="T">집합에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Add(`0)">
      <summary>현재 집합에 요소를 추가하고 요소가 성공적으로 추가되었는지 여부를 나타내는 값을 반환합니다. </summary>
      <returns>요소가 집합에 추가되었으면 true이고, 요소가 집합에 이미 있으면 false입니다.</returns>
      <param name="item">집합에 추가할 요소입니다.</param>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합에서 지정된 컬렉션의 모든 요소를 제거합니다.</summary>
      <param name="other">집합에서 제거할 항목의 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>지정된 컬렉션에도 있는 요소만 포함되도록 현재 집합을 수정합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합이 지정된 컬렉션의 속성(고급) 하위 집합인지 여부를 확인합니다.</summary>
      <returns>현재 집합이 <paramref name="other" />의 진 부분 집합이면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합이 지정된 컬렉션의 올바른 상위 집합인지 여부를 확인합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ISet`1" /> 개체가 <paramref name="other" />의 진 포함 집합이면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">현재 집합과 비교할 컬렉션입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>집합이 지정된 컬렉션의 하위 집합인지 여부를 확인합니다.</summary>
      <returns>현재 집합이 <paramref name="other" />의 하위 집합이면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합이 지정된 컬렉션의 상위 집합인지 여부를 확인합니다.</summary>
      <returns>현재 집합이 <paramref name="other" />의 상위 집합이면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합이 지정된 컬렉션과 겹치는지 여부를 확인합니다.</summary>
      <returns>현재 집합과 <paramref name="other" />가 최소한 하나의 요소를 공유하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합과 지정된 컬렉션에 같은 요소가 들어 있는지 여부를 확인합니다.</summary>
      <returns>현재 집합이 <paramref name="other" />과 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합이나 지정된 컬렉션에 있고 둘 다에는 없는 요소만 포함되도록 현재 집합을 수정합니다. </summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합과 지정된 컬렉션 둘 다에 있는 요소가 모두 포함되도록 현재 집합을 수정합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1">
      <summary>이중 연결 목록을 나타냅니다.</summary>
      <typeparam name="T">링크된 목록의 요소 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor">
      <summary>비어 있는 <see cref="T:System.Collections.Generic.LinkedList`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>지정한 <see cref="T:System.Collections.IEnumerable" />에서 복사된 요소가 포함되어 있고 복사된 요소의 수를 수용할 수 있는 충분한 용량을 가지는 <see cref="T:System.Collections.Generic.LinkedList`1" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="collection">요소가 새 <see cref="T:System.Collections.Generic.LinkedList`1" />에 복사되는 <see cref="T:System.Collections.IEnumerable" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 지정한 기존 노드 다음에 지정한 새 노드를 추가합니다.</summary>
      <param name="node">
        <paramref name="newNode" />를 삽입할 위치 앞에 있는 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</param>
      <param name="newNode">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에 추가할 새 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" />가 null입니다.-또는-<paramref name="newNode" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">현재 <see cref="T:System.Collections.Generic.LinkedList`1" />에 <paramref name="node" />가 없습니다.-또는-<paramref name="newNode" />가 다른 <see cref="T:System.Collections.Generic.LinkedList`1" />에 속합니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 지정한 기존 노드 다음에 지정한 값이 포함된 새 노드를 추가합니다.</summary>
      <returns>
        <paramref name="value" />가 포함된 새 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</returns>
      <param name="node">
        <paramref name="value" />가 포함된 새 <see cref="T:System.Collections.Generic.LinkedListNode`1" />을 삽입할 위치 앞에 있는 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</param>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에 추가할 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">현재 <see cref="T:System.Collections.Generic.LinkedList`1" />에 <paramref name="node" />가 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 지정한 기존 노드 앞에 지정한 새 노드를 추가합니다.</summary>
      <param name="node">
        <paramref name="newNode" />를 삽입할 위치 뒤에 있는 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</param>
      <param name="newNode">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에 추가할 새 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" />가 null입니다.-또는-<paramref name="newNode" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">현재 <see cref="T:System.Collections.Generic.LinkedList`1" />에 <paramref name="node" />가 없습니다.-또는-<paramref name="newNode" />가 다른 <see cref="T:System.Collections.Generic.LinkedList`1" />에 속합니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 지정한 기존 노드 앞에 지정한 값이 포함된 새 노드를 추가합니다.</summary>
      <returns>
        <paramref name="value" />가 포함된 새 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</returns>
      <param name="node">
        <paramref name="value" />가 포함된 새 <see cref="T:System.Collections.Generic.LinkedListNode`1" />을 삽입할 위치 뒤에 있는 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</param>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에 추가할 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">현재 <see cref="T:System.Collections.Generic.LinkedList`1" />에 <paramref name="node" />가 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 시작 위치에 지정한 새 노드를 추가합니다.</summary>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 시작 위치에 추가할 새 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" />가 다른 <see cref="T:System.Collections.Generic.LinkedList`1" />에 속합니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 시작 위치에 지정한 값이 포함된 새 노드를 추가합니다.</summary>
      <returns>
        <paramref name="value" />가 포함된 새 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</returns>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 시작 위치에 추가할 값입니다.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 끝에 지정한 새 노드를 추가합니다.</summary>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 끝에 추가할 새 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" />가 다른 <see cref="T:System.Collections.Generic.LinkedList`1" />에 속합니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 끝에 지정한 값이 포함된 새 노드를 추가합니다.</summary>
      <returns>
        <paramref name="value" />가 포함된 새 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</returns>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 끝에 추가할 값입니다.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />에서 노드를 모두 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
      <summary>값이 <see cref="T:System.Collections.Generic.LinkedList`1" />에 있는지 여부를 확인합니다.</summary>
      <returns>
        <paramref name="value" />가 <see cref="T:System.Collections.Generic.LinkedList`1" />에 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에서 찾을 수 있는 값입니다. 참조 형식에 대한 값이 null일 수 있습니다.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
      <summary>대상 배열의 지정된 인덱스에서 시작하여 전체 <see cref="T:System.Collections.Generic.LinkedList`1" />를 호환되는 1차원 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Array" />입니다. <see cref="T:System.Array" />에서는 0부터 시작하는 인덱스를 사용해야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 인덱스이며 0부터 시작합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 <paramref name="array" />의 길이보다 크거나 같습니다.-또는-<paramref name="index" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">소스 <see cref="T:System.Collections.Generic.LinkedList`1" />의 요소 수가 <paramref name="index" />에서 대상 <paramref name="array" /> 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Count">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />에 실제로 포함된 노드의 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" />에 실제로 포함된 노드의 수입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Find(`0)">
      <summary>지정한 값이 포함된 첫 번째 노드를 찾습니다.</summary>
      <returns>지정된 값이 있으면 해당 값이 포함된 첫 번째 <see cref="T:System.Collections.Generic.LinkedListNode`1" />이고, 그렇지 않으면 null입니다.</returns>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에서 찾을 수 있는 값입니다.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
      <summary>지정한 값이 포함된 마지막 노드를 찾습니다.</summary>
      <returns>지정된 값이 있으면 해당 값이 포함된 마지막 <see cref="T:System.Collections.Generic.LinkedListNode`1" />이고, 그렇지 않으면 null입니다.</returns>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에서 찾을 수 있는 값입니다.</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.First">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 첫 번째 노드를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 첫 번째 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 전체에 걸쳐 반복하는 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" />에 대한 <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Last">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 마지막 노드를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 마지막 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />에서 지정된 노드를 제거합니다.</summary>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에서 제거할 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">현재 <see cref="T:System.Collections.Generic.LinkedList`1" />에 <paramref name="node" />가 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />에서 맨 처음 발견되는 지정된 값을 제거합니다.</summary>
      <returns>
        <paramref name="value" />를 포함하는 요소를 성공적으로 제거한 경우 true이고, 그렇지 않으면 false입니다. 이 메서드는 <paramref name="value" />가 원래 <see cref="T:System.Collections.Generic.LinkedList`1" />에 없는 경우에도 false를 반환합니다.</returns>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에서 제거할 값입니다.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 시작 위치에서 노드를 제거합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.LinkedList`1" />이 비어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveLast">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 끝에서 노드를 제거합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.LinkedList`1" />이 비어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />의 끝에 항목을 추가합니다.</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.ICollection`1" />의 끝에 추가할 값입니다.</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용이면 true이고, 그렇지 않으면 false입니다. <see cref="T:System.Collections.Generic.LinkedList`1" />의 기본 구현에서 이 속성은 항상 false를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>컬렉션 전체에서 반복되는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>특정 <see cref="T:System.Array" /> 인덱스부터 시작하여 <see cref="T:System.Collections.ICollection" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.ICollection" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Array" />입니다. <see cref="T:System.Array" />에서는 0부터 시작하는 인덱스를 사용해야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 인덱스이며 0부터 시작합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원입니다.-또는-<paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.-또는-소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 <paramref name="index" />에서 대상 <paramref name="array" /> 끝까지 사용 가능한 공간보다 큽니다.-또는-소스 <see cref="T:System.Collections.ICollection" /> 형식을 대상 <paramref name="array" /> 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 true이고, 그렇지 않으면 false입니다. <see cref="T:System.Collections.Generic.LinkedList`1" />의 기본 구현에서 이 속성은 항상 false를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다. <see cref="T:System.Collections.Generic.LinkedList`1" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>링크된 목록을 컬렉션으로 반복하는 열거자를 반환합니다.</summary>
      <returns>링크된 목록을 컬렉션으로 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 요소를 열거합니다.</summary>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.MoveNext">
      <summary>열거자를 <see cref="T:System.Collections.Generic.LinkedList`1" />의 다음 요소로 이동합니다.</summary>
      <returns>열거자가 다음 요소로 이동한 경우 true가 반환되고, 컬렉션의 끝을 지난 경우 false가 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후 컬렉션이 수정되었습니다. </exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 위치합니다. </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다. 이 클래스는 상속될 수 없습니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후 컬렉션이 수정되었습니다. </exception>
    </member>
    <member name="T:System.Collections.Generic.LinkedListNode`1">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 노드를 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
      <typeparam name="T">링크된 목록의 요소 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedListNode`1.#ctor(`0)">
      <summary>지정한 값을 포함하는 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" />에 포함할 값입니다.</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.List">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedListNode`1" />이 속하는 <see cref="T:System.Collections.Generic.LinkedList`1" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedListNode`1" />이 속하는 <see cref="T:System.Collections.Generic.LinkedList`1" />에 대한 참조이거나, <see cref="T:System.Collections.Generic.LinkedListNode`1" />이 링크되어 있지 않으면 null입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Next">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 다음 노드를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 다음 노드에 대한 참조이거나, 현재 노드가 <see cref="T:System.Collections.Generic.LinkedList`1" />의 마지막 요소(<see cref="P:System.Collections.Generic.LinkedList`1.Last" />)이면 null입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Previous">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 이전 노드를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 이전 노드에 대한 참조이거나, 현재 노드가 <see cref="T:System.Collections.Generic.LinkedList`1" />의 첫 번째 요소(<see cref="P:System.Collections.Generic.LinkedList`1.First" />)이면 null입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Value">
      <summary>노드에 포함된 값을 가져옵니다.</summary>
      <returns>노드에 포함된 값입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.Queue`1">
      <summary>개체의 선입선출(FIFO) 컬렉션을 나타냅니다.</summary>
      <typeparam name="T">큐에 있는 요소의 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor">
      <summary>비어 있는 상태에서 기본 초기 용량을 가지는 <see cref="T:System.Collections.Generic.Queue`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>지정한 컬렉션에서 복사된 요소가 포함되어 있고 복사된 요소의 수를 수용하는 충분한 용량을 가지는 <see cref="T:System.Collections.Generic.Queue`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="collection">해당 요소가 새 <see cref="T:System.Collections.Generic.Queue`1" />에 복사되는 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
      <summary>비어 있는 상태에서 지정한 초기 용량을 가지는 <see cref="T:System.Collections.Generic.Queue`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Queue`1" />에 포함될 수 있는 초기 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" />가 0보다 작습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" />에서 개체를 모두 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Contains(`0)">
      <summary>요소가 <see cref="T:System.Collections.Generic.Queue`1" />에 있는지 여부를 확인합니다.</summary>
      <returns>
        <paramref name="item" />이 <see cref="T:System.Collections.Generic.Queue`1" />에 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="item">
        <see cref="T:System.Collections.Generic.Queue`1" />에서 찾을 개체입니다. 참조 형식에 대한 값이 null일 수 있습니다.</param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" /> 요소를 지정한 배열 인덱스에서 시작하여 기존의 1차원 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.Queue`1" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Array" />입니다. <see cref="T:System.Array" />에서는 0부터 시작하는 인덱스를 사용해야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 인덱스이며 0부터 시작합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">소스 <see cref="T:System.Collections.Generic.Queue`1" />의 요소 수가 <paramref name="arrayIndex" />에서 대상 <paramref name="array" /> 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Count">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" />에 포함된 요소 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" />에 포함된 요소 수입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Dequeue">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" />의 시작 부분에서 개체를 제거하고 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" />의 시작에서 제거하는 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Queue`1" />이 비어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
      <summary>개체를 <see cref="T:System.Collections.Generic.Queue`1" />의 끝 부분에 추가합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.Queue`1" />에 추가할 개체입니다. 참조 형식에 대한 값이 null일 수 있습니다.</param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" /> 전체에 걸쳐 반복하는 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" />에 대한 <see cref="T:System.Collections.Generic.Queue`1.Enumerator" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Peek">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" />의 시작 부분에서 개체를 제거하지 않고 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" />의 처음에 있는 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Queue`1" />이 비어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>컬렉션 전체에서 반복되는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>특정 <see cref="T:System.Array" /> 인덱스부터 시작하여 <see cref="T:System.Collections.ICollection" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.ICollection" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Array" />입니다. <see cref="T:System.Array" />에서는 0부터 시작하는 인덱스를 사용해야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 인덱스이며 0부터 시작합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원입니다.-또는-<paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.-또는-소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 <paramref name="index" />에서 대상 <paramref name="array" /> 끝까지 사용 가능한 공간보다 큽니다.-또는-소스 <see cref="T:System.Collections.ICollection" /> 형식을 대상 <paramref name="array" /> 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 true이고, 그렇지 않으면 false입니다. <see cref="T:System.Collections.Generic.Queue`1" />의 기본 구현에서 이 속성은 항상 false를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다. <see cref="T:System.Collections.Generic.Queue`1" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션 전체에서 반복되는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.ToArray">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" /> 요소를 새 배열에 복사합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" />에서 복사된 요소를 포함하는 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TrimExcess">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" />의 실제 요소 수가 현재 용량의 90% 미만인 경우 용량을 이 값으로 설정합니다.</summary>
    </member>
    <member name="T:System.Collections.Generic.Queue`1.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" />의 요소를 열거합니다.</summary>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 위치합니다. </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext">
      <summary>열거자를 <see cref="T:System.Collections.Generic.Queue`1" />의 다음 요소로 이동합니다.</summary>
      <returns>열거자가 다음 요소로 이동한 경우 true가 반환되고, 컬렉션의 끝을 지난 경우 false가 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후 컬렉션이 수정되었습니다. </exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 위치합니다. </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후 컬렉션이 수정되었습니다. </exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2">
      <summary>키에 따라 정렬된 키/값 쌍의 컬렉션을 나타냅니다. </summary>
      <typeparam name="TKey">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 있는 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor">
      <summary>비어 있고 키 형식에 대해 기본적으로 구현된 <see cref="T:System.Collections.Generic.IComparer`1" />를 사용하는 빈 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>지정된 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현을 사용하여 키를 비교하는 빈 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="comparer">키를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현을 지정하거나, 해당 키 형식에 기본 <see cref="T:System.Collections.Generic.Comparer`1" />을 사용하려면 null을 지정합니다.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>지정한 <see cref="T:System.Collections.Generic.IDictionary`2" />에서 복사된 요소를 포함하고 키 형식에 대해 기본적으로 구현된 <see cref="T:System.Collections.Generic.IComparer`1" />를 사용하는 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dictionary">요소가 새 <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 복사되는 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" />에 중복 키가 하나 이상 포함되어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary>지정한 <see cref="T:System.Collections.Generic.IDictionary`2" />에서 복사된 요소를 포함하고 지정한 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현을 사용하여 키를 비교하는 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dictionary">요소가 새 <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 복사되는 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</param>
      <param name="comparer">키를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현을 지정하거나, 해당 키 형식에 기본 <see cref="T:System.Collections.Generic.Comparer`1" />을 사용하려면 null을 지정합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" />에 중복 키가 하나 이상 포함되어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Add(`0,`1)">
      <summary>지정한 키와 값을 가지는 요소를 <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 추가합니다.</summary>
      <param name="key">추가할 요소의 키입니다.</param>
      <param name="value">추가할 요소의 값입니다. 값은 참조 형식에 대해 null이 될 수 있습니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">같은 키를 가지는 요소가 이미 <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에서 요소를 모두 제거합니다.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Comparer">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 요소를 정렬하는 데 사용되는 <see cref="T:System.Collections.Generic.IComparer`1" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 요소를 정렬하는 데 사용되는 <see cref="T:System.Collections.Generic.IComparer`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 지정된 키를 가진 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 지정한 키가 있는 요소가 포함되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="key">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에서 찾을 수 있는 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsValue(`1)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 지정한 값이 있는 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 지정한 값이 있는 요소가 포함되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="value">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에서 찾을 수 있는 값입니다. 참조 형식에 대한 값이 null일 수 있습니다.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>지정한 인덱스로부터 <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 요소를 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 구조체의 지정한 배열에 복사합니다.</summary>
      <param name="array">현재 <see cref="T:System.Collections.Generic.SortedDictionary`2" />에서 복사된 요소의 대상인 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 구조체의 1차원 배열입니다. 이 배열의 인덱스는 0부터 시작해야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 인덱스이며 0부터 시작합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">소스 <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 요소 수가 <paramref name="index" />에서 대상 <paramref name="array" /> 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Count">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 포함된 키/값 쌍의 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 포함된 키/값 쌍의 수입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 전체에 걸쳐 반복하는 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 대한 <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Item(`0)">
      <summary>지정한 키와 연결된 값을 가져오거나 설정합니다.</summary>
      <returns>지정한 키와 연결된 값입니다. 지정한 키가 없으면 get 작업에서 <see cref="T:System.Collections.Generic.KeyNotFoundException" />을 발생하고 set 작업에서 지정한 키가 있는 새 요소를 만듭니다.</returns>
      <param name="key">가져오거나 설정할 값의 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 null입니다.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">속성을 검색할 때 컬렉션에 <paramref name="key" />가 없습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Keys">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 키를 포함하는 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 키를 포함하는 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Remove(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에서 지정한 키를 가지는 요소를 제거합니다.</summary>
      <returns>요소를 성공적으로 제거한 경우 true이고, 그렇지 않으면 false입니다. 이 메서드는 <paramref name="key" />가 <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 없는 경우에도 false를 반환합니다.</returns>
      <param name="key">제거할 요소의 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에 항목을 추가합니다.</summary>
      <param name="keyValuePair">
        <see cref="T:System.Collections.Generic.ICollection`1" />에 추가할 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 구조체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyValuePair" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">같은 키를 가지는 요소가 이미 <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에 특정 키와 값이 들어 있는지 여부를 확인합니다.</summary>
      <returns>
        <paramref name="keyValuePair" />가 <see cref="T:System.Collections.Generic.ICollection`1" />에 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="keyValuePair">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 찾을 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 구조체입니다.</param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용이면 true이고, 그렇지 않으면 false입니다. <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 기본 구현에서 이 속성은 항상 false를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 맨 처음 발견되는 지정된 요소를 제거합니다.</summary>
      <returns>
        <paramref name="keyValuePair" />가 <see cref="T:System.Collections.Generic.ICollection`1" />에서 성공적으로 제거되었으면 true이고, 그렇지 않으면 false입니다. 이 메서드는 <paramref name="keyValuePair" />가 <see cref="T:System.Collections.Generic.ICollection`1" />에 없는 경우에도 false를 반환합니다.</returns>
      <param name="keyValuePair">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 제거할 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 구조체입니다.</param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>
        <see cref="T:System.Collections.Generic.IDictionary`2" />의 키를 포함하는 <see cref="T:System.Collections.Generic.ICollection`1" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" />의 키를 포함하는 <see cref="T:System.Collections.Generic.ICollection`1" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>
        <see cref="T:System.Collections.Generic.IDictionary`2" />의 값을 포함하는 <see cref="T:System.Collections.Generic.ICollection`1" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" />의 값을 포함하는 <see cref="T:System.Collections.Generic.ICollection`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>컬렉션 전체에서 반복되는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>지정한 배열 인덱스부터 <see cref="T:System.Collections.Generic.ICollection`1" />의 요소를 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 인덱스이며 0부터 시작합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원입니다.-또는-<paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.-또는-소스 <see cref="T:System.Collections.Generic.ICollection`1" />의 요소 수가 <paramref name="index" />에서 대상 <paramref name="array" /> 끝까지 사용 가능한 공간보다 큽니다.-또는-소스 <see cref="T:System.Collections.Generic.ICollection`1" /> 형식을 대상 <paramref name="array" /> 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 true이고, 그렇지 않으면 false입니다. <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 기본 구현에서 이 속성은 항상 false를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다. </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>제공된 키와 값이 있는 요소를 <see cref="T:System.Collections.IDictionary" />에 추가합니다.</summary>
      <param name="key">추가할 요소의 키로 사용할 개체입니다.</param>
      <param name="value">추가할 요소의 값으로 사용할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" />의 형식을 <see cref="T:System.Collections.IDictionary" />의 <paramref name="TKey" /> 키 형식에 할당할 수 없습니다.-또는-<paramref name="value" />의 형식을 <see cref="T:System.Collections.IDictionary" />의 <paramref name="TValue" /> 값유형에 할당할 수 없습니다.-또는-같은 키를 가지는 요소가 이미 <see cref="T:System.Collections.IDictionary" />에 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>
        <see cref="T:System.Collections.IDictionary" />에 지정된 키를 가진 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" />에 해당 키가 있는 요소가 포함되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="key">
        <see cref="T:System.Collections.IDictionary" />에서 찾을 수 있는 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>
        <see cref="T:System.Collections.IDictionary" />에 대한 <see cref="T:System.Collections.IDictionaryEnumerator" />를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" />에 대한 <see cref="T:System.Collections.IDictionaryEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IDictionary" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" />의 크기가 고정되어 있으면 true이고, 그렇지 않으면 false입니다. <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 기본 구현에서 이 속성은 항상 false를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.IDictionary" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" />가 읽기 전용이면 true이고, 그렇지 않으면 false입니다. <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 기본 구현에서 이 속성은 항상 false를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>지정된 키가 있는 요소를 가져오거나 설정합니다.</summary>
      <returns>지정한 키를 갖는 요소입니다. <paramref name="key" />가 사전에 없거나 <paramref name="key" />의 형식을 <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 <paramref name="TKey" /> 키 형식에 할당할 수 없으면 null입니다.</returns>
      <param name="key">가져올 요소의 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">값이 할당되어 있고 <paramref name="key" />의 형식을 <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 <paramref name="TKey" /> 키 형식에 할당할 수 없습니다.-또는-값이 할당되어 있고 <paramref name="value" />의 형식을 <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 <paramref name="TValue" /> 값 형식에 할당할 수 없습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary>
        <see cref="T:System.Collections.IDictionary" />의 키를 포함하는 <see cref="T:System.Collections.ICollection" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" />의 키를 포함하는 <see cref="T:System.Collections.ICollection" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>
        <see cref="T:System.Collections.IDictionary" />에서 지정한 키를 가지는 요소를 제거합니다.</summary>
      <param name="key">제거할 요소의 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 null입니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Values">
      <summary>
        <see cref="T:System.Collections.IDictionary" />의 값을 포함하는 <see cref="T:System.Collections.ICollection" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" />의 값을 포함하는 <see cref="T:System.Collections.ICollection" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션 전체에서 반복되는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)">
      <summary>지정된 키와 연결된 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 지정한 키가 있는 요소가 포함되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="key">가져올 값의 키입니다.</param>
      <param name="value">이 메서드가 반환될 때 지정된 키가 있으면 해당 키와 연결된 값이고, 그렇지 않으면 <paramref name="value" /> 매개 변수의 형식에 대한 기본값입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 null입니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Values">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 값을 포함하는 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 값을 포함하는 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 요소를 열거합니다.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext">
      <summary>열거자를 <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 다음 요소로 이동합니다.</summary>
      <returns>열거자가 다음 요소로 이동한 경우 true가 반환되고, 컬렉션의 끝을 지난 경우 false가 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후 컬렉션이 수정되었습니다. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary>열거자의 현재 위치에 있는 요소를 <see cref="T:System.Collections.DictionaryEntry" /> 구조체로 가져옵니다.</summary>
      <returns>컬렉션에서 사전의 현재 위치에 있는 요소인 <see cref="T:System.Collections.DictionaryEntry" /> 구조체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 위치합니다. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary>열거자의 현재 위치에 있는 요소의 키를 가져옵니다.</summary>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소의 키입니다.</returns>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 위치합니다. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary>열거자의 현재 위치에 있는 요소의 값을 가져옵니다.</summary>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소의 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 위치합니다. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 위치합니다. </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후 컬렉션이 수정되었습니다. </exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 키 컬렉션을 나타냅니다. 이 클래스는 상속될 수 없습니다. </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary>지정한 <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 키를 반영하는 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dictionary">해당 키가 새 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />에 반영되는 <see cref="T:System.Collections.Generic.SortedDictionary`2" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 요소를 지정한 배열 인덱스에서 시작하여 기존의 1차원 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 인덱스이며 0부터 시작합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 null입니다. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">소스 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />의 요소 수가 <paramref name="index" />에서 대상 <paramref name="array" /> 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Count">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />에 포함된 요소 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />에 포함된 요소 수입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 전체에 걸쳐 반복하는 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />에 대한 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에 항목을 추가합니다. 이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />에 추가할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">항상 발생합니다. 컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Clear">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 항목을 모두 제거합니다. 이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생합니다.</summary>
      <exception cref="T:System.NotSupportedException">항상 발생합니다. 컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Contains(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에 지정한 값이 들어 있는지 여부를 확인합니다.</summary>
      <returns>
        <paramref name="item" />이 <see cref="T:System.Collections.Generic.ICollection`1" />에 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 찾을 개체입니다.</param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용이면 true이고, 그렇지 않으면 false입니다. <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />의 기본 구현에서 이 속성은 항상 false를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 맨 처음 발견되는 특정 개체를 제거합니다. 이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생합니다.</summary>
      <returns>
        <paramref name="item" />이 <see cref="T:System.Collections.Generic.ICollection`1" />에서 성공적으로 제거되면 true이고, 그렇지 않으면 false입니다. 이 메서드는 <paramref name="item" />이 <see cref="T:System.Collections.Generic.ICollection`1" />에 없는 경우에도 false를 반환합니다.</returns>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 제거할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">항상 발생합니다. 컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>컬렉션 전체에서 반복되는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>특정 배열 인덱스부터 <see cref="T:System.Collections.ICollection" />의 요소를 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.ICollection" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 인덱스이며 0부터 시작합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원입니다.-또는-<paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.-또는-소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 <paramref name="index" />에서 대상 <paramref name="array" /> 끝까지 사용 가능한 공간보다 큽니다.-또는-소스 <see cref="T:System.Collections.ICollection" /> 형식을 대상 <paramref name="array" /> 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 true이고, 그렇지 않으면 false입니다. <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />의 기본 구현에서 이 속성은 항상 false를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다. <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션 전체에서 반복되는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />의 요소를 열거합니다.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary>열거자를 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />의 다음 요소로 이동합니다.</summary>
      <returns>열거자가 다음 요소로 이동한 경우 true가 반환되고, 컬렉션의 끝을 지난 경우 false가 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후 컬렉션이 수정되었습니다. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 위치합니다. </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후 컬렉션이 수정되었습니다. </exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 값 컬렉션을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary>지정한 <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 값을 반영하는 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dictionary">해당 값이 새 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />에 반영되는 <see cref="T:System.Collections.Generic.SortedDictionary`2" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 요소를 지정한 배열 인덱스에서 시작하여 기존의 1차원 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 인덱스이며 0부터 시작합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">소스 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />의 요소 수가 <paramref name="index" />에서 대상 <paramref name="array" /> 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Count">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />에 포함된 요소 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />에 포함된 요소 수입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 전체에 걸쳐 반복하는 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />에 대한 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Add(`1)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에 항목을 추가합니다. 이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />에 추가할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">항상 발생합니다. 컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Clear">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 항목을 모두 제거합니다. 이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생합니다.</summary>
      <exception cref="T:System.NotSupportedException">항상 발생합니다. 컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Contains(`1)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에 지정한 값이 들어 있는지 여부를 확인합니다.</summary>
      <returns>
        <paramref name="item" />이 <see cref="T:System.Collections.Generic.ICollection`1" />에 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 찾을 개체입니다.</param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용이면 true이고, 그렇지 않으면 false입니다. <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />의 기본 구현에서 이 속성은 항상 false를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Remove(`1)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 맨 처음 발견되는 특정 개체를 제거합니다. 이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생합니다.</summary>
      <returns>
        <paramref name="item" />이 <see cref="T:System.Collections.Generic.ICollection`1" />에서 성공적으로 제거되면 true이고, 그렇지 않으면 false입니다. 이 메서드는 <paramref name="item" />이 <see cref="T:System.Collections.Generic.ICollection`1" />에 없는 경우에도 false를 반환합니다.</returns>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 제거할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">항상 발생합니다. 컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 맨 처음 발견되는 특정 개체를 제거합니다. 이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생합니다.</summary>
      <returns>
        <paramref name="item" />이 <see cref="T:System.Collections.Generic.ICollection`1" />에서 성공적으로 제거되면 true이고, 그렇지 않으면 false입니다. 이 메서드는 <paramref name="item" />이 <see cref="T:System.Collections.Generic.ICollection`1" />에 없는 경우에도 false를 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException">항상 발생합니다. 컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>특정 배열 인덱스부터 <see cref="T:System.Collections.ICollection" />의 요소를 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.ICollection" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 인덱스이며 0부터 시작합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원입니다.-또는-<paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.-또는-소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 <paramref name="index" />에서 대상 <paramref name="array" /> 끝까지 사용 가능한 공간보다 큽니다.-또는-소스 <see cref="T:System.Collections.ICollection" /> 형식을 대상 <paramref name="array" /> 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 true이고, 그렇지 않으면 false입니다. <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />의 기본 구현에서 이 속성은 항상 false를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다. <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션 전체에서 반복되는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />의 요소를 열거합니다.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary>열거자를 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />의 다음 요소로 이동합니다.</summary>
      <returns>열거자가 다음 요소로 이동한 경우 true가 반환되고, 컬렉션의 끝을 지난 경우 false가 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후 컬렉션이 수정되었습니다. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 위치합니다. </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후 컬렉션이 수정되었습니다. </exception>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1">
      <summary>정렬된 순서대로 유지 관리되는 개체의 컬렉션을 나타냅니다.</summary>
      <typeparam name="T">집합에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>지정된 비교자를 사용하는 <see cref="T:System.Collections.Generic.SortedSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="comparer">개체 비교에 사용할 기본 비교자입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>지정한 열거 가능한 컬렉션에서 복사된 요소를 포함하는 <see cref="T:System.Collections.Generic.SortedSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="collection">복사할 열거 가능한 컬렉션입니다. </param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
      <summary>지정한 열거 가능한 컬렉션에서 복사된 요소를 포함하고 지정된 비교자를 사용하는 <see cref="T:System.Collections.Generic.SortedSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="collection">복사할 열거 가능한 컬렉션입니다. </param>
      <param name="comparer">개체 비교에 사용할 기본 비교자입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Add(`0)">
      <summary>집합에 요소를 추가하고 성공적으로 추가되었는지 여부를 나타내는 값을 반환합니다.</summary>
      <returns>
        <paramref name="item" />이 집합에 추가되면 true이고, 그렇지 않으면 false입니다. </returns>
      <param name="item">집합에 추가할 요소입니다.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Clear">
      <summary>집합에서 요소를 모두 제거합니다.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Comparer">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" />의 값이 같은지 확인하는 데 사용되는 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" />의 값이 같은지 확인하는 데 사용되는 비교자입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Contains(`0)">
      <summary>집합에 특정 요소가 들어 있는지 여부를 확인합니다.</summary>
      <returns>집합에 <paramref name="item" />이 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="item">집합에서 찾을 요소입니다.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[])">
      <summary>대상 배열의 처음부터 시작하여 전체 <see cref="T:System.Collections.Generic.SortedSet`1" />를 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.SortedSet`1" />에서 복사한 요소의 대상인 1차원 배열입니다.</param>
      <exception cref="T:System.ArgumentException">소스 <see cref="T:System.Collections.Generic.SortedSet`1" />의 요소의 수가 대상 배열이 포함할 수 있는 요소의 수를 초과하는 경우 </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)">
      <summary>지정된 배열 인덱스에서 시작하여 전체 <see cref="T:System.Collections.Generic.SortedSet`1" />를 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.SortedSet`1" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 인덱스이며 0부터 시작합니다.</param>
      <exception cref="T:System.ArgumentException">소스 배열의 요소 수가 <paramref name="index" />에서 대상 배열 끝까지의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>지정된 배열 인덱스에서 시작하여 <see cref="T:System.Collections.Generic.SortedSet`1" />에 있는 지정된 개수의 요소를 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.SortedSet`1" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 인덱스이며 0부터 시작합니다.</param>
      <param name="count">복사할 요소의 개수입니다.</param>
      <exception cref="T:System.ArgumentException">소스 배열의 요소 수가 <paramref name="index" />에서 대상 배열 끝까지의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작습니다.-또는-<paramref name="count" />가 0보다 작습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Count">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" />의 요소 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" />의 요소 수입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체에서 지정된 컬렉션에 있는 모든 요소를 제거합니다.</summary>
      <param name="other">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체에서 제거할 항목 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 전체에 걸쳐 반복하는 열거자를 반환합니다.</summary>
      <returns>정렬된 순서로 <see cref="T:System.Collections.Generic.SortedSet`1" />를 통해 반복되는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" />에 있는 하위 집합의 뷰를 반환합니다.</summary>
      <returns>지정된 범위의 값만 포함하는 하위 집합 뷰입니다.</returns>
      <param name="lowerValue">뷰에서 원하는 가장 낮은 값입니다.</param>
      <param name="upperValue">뷰에서 원하는 가장 높은 값입니다. </param>
      <exception cref="T:System.ArgumentException">비교자에 따르면 <paramref name="lowerValue" />은 <paramref name="upperValue" />보다 큽니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">뷰에서 시도한 작업이 <paramref name="lowerValue" /> 및 <paramref name="upperValue" />에 의해 지정된 범위를 벗어났습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>지정된 컬렉션에도 있는 요소만 포함되도록 현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체를 수정합니다.</summary>
      <param name="other">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 지정된 컬렉션의 진 부분 집합인지 확인합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 <paramref name="other" />의 진 부분 집합이면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 지정된 컬렉션의 진 포함 집합인지 확인합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 <paramref name="other" />의 진 포함 집합이면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 지정된 컬렉션의 하위 집합인지 확인합니다.</summary>
      <returns>현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 <paramref name="other" />의 하위 집합이면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 지정된 컬렉션의 상위 집합인지 확인합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 <paramref name="other" />의 상위 집합이면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Max">
      <summary>비교자로 정의된 <see cref="T:System.Collections.Generic.SortedSet`1" />의 최대값을 가져옵니다.</summary>
      <returns>집합의 최대값입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Min">
      <summary>비교자로 정의된 <see cref="T:System.Collections.Generic.SortedSet`1" />의 최소값을 가져옵니다.</summary>
      <returns>집합의 최소값입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 지정된 컬렉션이 공통 요소를 공유하는지 여부를 확인합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 <paramref name="other" />가 최소한 하나의 요소를 공유하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Remove(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" />에서 지정된 항목을 제거합니다.</summary>
      <returns>요소를 성공적으로 찾아서 제거한 경우 true이고, 그렇지 않으면 false입니다. </returns>
      <param name="item">제거할 요소입니다.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" />에서 지정된 조건자로 정의된 조건과 일치하는 요소를 모두 제거합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 컬렉션에서 제거된 요소 수입니다. </returns>
      <param name="match">제거할 요소의 조건을 정의하는 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Reverse">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" />를 역순으로 반복하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" />를 역순으로 반복하는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 지정된 컬렉션에 같은 요소가 들어 있는지 여부를 확인합니다.</summary>
      <returns>현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 <paramref name="other" />과 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 개체나 지정된 컬렉션에 있고 둘 다에는 없는 요소만 포함되도록 현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체를 수정합니다.</summary>
      <param name="other">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 개체에 항목을 추가합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 개체에 추가할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" />이 읽기 전용입니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.ICollection" />이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션이 읽기 전용이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>컬렉션 전체에서 반복되는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>지정된 배열 인덱스에서 시작하여 전체 <see cref="T:System.Collections.Generic.SortedSet`1" />를 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.SortedSet`1" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 인덱스이며 0부터 시작합니다.</param>
      <exception cref="T:System.ArgumentException">소스 배열의 요소 수가 <paramref name="index" />에서 대상 배열 끝까지의 사용 가능한 공간보다 큰 경우 </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되었는지 여부, 즉 스레드로부터 안전한지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다. <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션 전체에서 반복되는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 개체 또는 지정된 컬렉션에 있는 요소를 모두 포함되도록 현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체를 수정합니다.</summary>
      <param name="other">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체의 요소를 열거합니다.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1.Enumerator" />에서 사용하는 모든 리소스를 해제합니다. </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.MoveNext">
      <summary>열거자를 <see cref="T:System.Collections.Generic.SortedSet`1" /> 컬렉션의 다음 요소로 이동합니다.</summary>
      <returns>열거자가 다음 요소로 이동한 경우 true가 반환되고, 컬렉션의 끝을 지난 경우 false가 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후 컬렉션이 수정되었습니다. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 위치합니다. </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후 컬렉션이 수정되었습니다. </exception>
    </member>
    <member name="T:System.Collections.Generic.Stack`1">
      <summary>동일한 임의 형식의 인스턴스로 이루어진 가변 크기 LIFO(후입선출) 방식의 컬렉션을 나타냅니다.</summary>
      <typeparam name="T">스택에 있는 요소의 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor">
      <summary>비어 있는 상태에서 기본 초기 용량을 가지는 <see cref="T:System.Collections.Generic.Stack`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>지정한 컬렉션에서 복사된 요소가 포함되어 있고 복사된 요소의 수를 수용하는 충분한 용량을 가지는 <see cref="T:System.Collections.Generic.Stack`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="collection">요소를 복사할 원본 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
      <summary>비어 있는 상태이고 지정한 초기 용량과 기본 초기 용량 중에서 더 큰 용량을 가지는 <see cref="T:System.Collections.Generic.Stack`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Stack`1" />에 포함될 수 있는 초기 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" />가 0보다 작습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" />에서 개체를 모두 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Contains(`0)">
      <summary>요소가 <see cref="T:System.Collections.Generic.Stack`1" />에 있는지 여부를 확인합니다.</summary>
      <returns>
        <paramref name="item" />이 <see cref="T:System.Collections.Generic.Stack`1" />에 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="item">
        <see cref="T:System.Collections.Generic.Stack`1" />에서 찾을 개체입니다. 참조 형식에 대한 값이 null일 수 있습니다.</param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" />을 지정한 배열 인덱스에서 시작하여 기존의 1차원 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.Stack`1" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Array" />입니다. <see cref="T:System.Array" />에서는 0부터 시작하는 인덱스를 사용해야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 인덱스이며 0부터 시작합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">소스 <see cref="T:System.Collections.Generic.Stack`1" />의 요소 수가 <paramref name="arrayIndex" />에서 대상 <paramref name="array" /> 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Count">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" />에 포함된 요소 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" />에 포함된 요소 수입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" />에 대한 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" />에 대한 <see cref="T:System.Collections.Generic.Stack`1.Enumerator" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Peek">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" />의 맨 위에서 개체를 제거하지 않고 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" />의 맨 위에 있는 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Stack`1" />이 비어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Pop">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" />의 맨 위에서 개체를 제거하고 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" />의 맨 위에서 제거되는 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Stack`1" />이 비어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Push(`0)">
      <summary>개체를 <see cref="T:System.Collections.Generic.Stack`1" />의 맨 위에 삽입합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.Stack`1" />에 적용할 개체입니다. 참조 형식에 대한 값이 null일 수 있습니다.</param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>컬렉션 전체에서 반복되는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>특정 <see cref="T:System.Array" /> 인덱스부터 시작하여 <see cref="T:System.Collections.ICollection" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.ICollection" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Array" />입니다. <see cref="T:System.Array" />에서는 0부터 시작하는 인덱스를 사용해야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 인덱스이며 0부터 시작합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원입니다.-또는-<paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.-또는-소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 <paramref name="arrayIndex" />에서 대상 <paramref name="array" /> 끝까지 사용 가능한 공간보다 큽니다.-또는-소스 <see cref="T:System.Collections.ICollection" /> 형식을 대상 <paramref name="array" /> 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 true이고, 그렇지 않으면 false입니다. <see cref="T:System.Collections.Generic.Stack`1" />의 기본 구현에서 이 속성은 항상 false를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다. <see cref="T:System.Collections.Generic.Stack`1" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션 전체에서 반복되는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.ToArray">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" />을 새 배열에 복사합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" />의 요소 복사본을 포함하는 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TrimExcess">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" />의 실제 요소 수가 현재 용량의 90% 미만인 경우 용량을 이 값으로 설정합니다.</summary>
    </member>
    <member name="T:System.Collections.Generic.Stack`1.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" />의 요소를 열거합니다.</summary>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 위치하는 경우 </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1.Enumerator" />에서 사용하는 모든 리소스를 해제합니다. </summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext">
      <summary>열거자를 <see cref="T:System.Collections.Generic.Stack`1" />의 다음 요소로 이동합니다.</summary>
      <returns>열거자가 다음 요소로 이동한 경우 true가 반환되고, 컬렉션의 끝을 지난 경우 false가 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후 컬렉션이 수정되었습니다. </exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 위치하는 경우 </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다. 이 클래스는 상속될 수 없습니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후 컬렉션이 수정되었습니다. </exception>
    </member>
    <member name="T:System.Collections.ObjectModel.ObservableCollection`1">
      <summary>항목이 추가 또는 제거되거나 전체 목록이 새로 고쳐질 때 알림을 제공하는 동적 데이터 컬렉션을 나타냅니다.</summary>
      <typeparam name="T">컬렉션에 있는 항목의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor">
      <summary>
        <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> 클래스의 비어 있는 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> 클래스의 새 인스턴스를 초기화하고 지정된 컬렉션에서 복사한 항목으로 채웁니다.</summary>
      <param name="collection">항목을 복사해 올 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.List{`0})">
      <summary>
        <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> 클래스의 새 인스턴스를 초기화하고 지정된 목록에서 복사한 항목으로 채웁니다.</summary>
      <param name="list">항목을 복사해 올 목록입니다.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy">
      <summary>이 컬렉션을 변경하려는 재진입 시도를 허용하지 않습니다.</summary>
      <returns>개체를 삭제하는 데 사용할 수 있는 <see cref="T:System.IDisposable" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.CheckReentrancy">
      <summary>이 컬렉션을 변경하려는 재진입 시도를 확인합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.IDisposable" /> 반환 값이 아직 삭제되지 않은 상태에서 <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy" />를 호출한 경우. 일반적으로 이는 <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> 이벤트 도중 이 컬렉션을 추가로 변경하려고 한 경우입니다. 그러나 이 동작은 파생 클래스에서 <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy" />를 호출하는 시점에 따라 다릅니다.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.ClearItems">
      <summary>컬렉션에서 모든 항목을 제거합니다.</summary>
      <exception cref="T:System.InvalidOperationException">이 메서드가 <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> 또는 <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> 이벤트 처리기에서 호출되는 경우 </exception>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged">
      <summary>컬렉션의 항목이 변경되거나 전체 컬렉션이 변경될 때 발생합니다.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)">
      <summary>항목을 컬렉션 내의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index">
        <paramref name="item" />를 삽입할 인덱스(0부터 시작)입니다.</param>
      <param name="item">삽입할 개체입니다.</param>
      <exception cref="T:System.InvalidOperationException">이 메서드가 <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> 또는 <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> 이벤트 처리기에서 호출되는 경우</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.Move(System.Int32,System.Int32)">
      <summary>지정된 인덱스에 있는 항목을 컬렉션에서 새 위치로 이동합니다.</summary>
      <param name="oldIndex">이동할 항목의 위치를 지정하는 인덱스(0부터 시작)입니다.</param>
      <param name="newIndex">항목의 새 위치를 지정하는 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.MoveItem(System.Int32,System.Int32)">
      <summary>지정된 인덱스에 있는 항목을 컬렉션에서 새 위치로 이동합니다.</summary>
      <param name="oldIndex">이동할 항목의 위치를 지정하는 인덱스(0부터 시작)입니다.</param>
      <param name="newIndex">항목의 새 위치를 지정하는 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>제공된 이벤트 데이터를 사용하여 <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트에서 보고할 이벤트 데이터입니다.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>제공된 인수를 사용하여 <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트에서 보고할 이벤트 데이터입니다.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged">
      <summary>컬렉션의 개별 항목에 대한 속성이 변경될 때 발생합니다.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(System.Int32)">
      <summary>컬렉션에서 지정된 인덱스의 항목을 제거합니다.</summary>
      <param name="index">제거할 항목의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.InvalidOperationException">이 메서드가 <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> 또는 <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> 이벤트 처리기에서 호출되는 경우</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.SetItem(System.Int32,`0)">
      <summary>지정된 인덱스에 있는 항목을 바꿉니다.</summary>
      <param name="index">바꿀 항목의 인덱스(0부터 시작)입니다.</param>
      <param name="item">지정된 인덱스에 있는 항목의 새 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">이 메서드가 <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> 또는 <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> 이벤트 처리기에서 호출되는 경우 </exception>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>속성 값이 변경되면 발생합니다.</summary>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1">
      <summary>읽기 전용 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />을 나타냅니다.</summary>
      <typeparam name="T">컬렉션에 있는 개체의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
      <summary>지정된 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />에 대한 래퍼 역할을 하는 <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="list">래핑할 컬렉션입니다.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged">
      <summary>항목이 추가되거나 제거되는 경우 발생합니다.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
        <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged" /> 이벤트를 발생시킵니다. </summary>
      <param name="args">이벤트 데이터입니다.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
        <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged" /> 이벤트를 발생시킵니다. </summary>
      <param name="args">이벤트 데이터입니다.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged">
      <summary>속성 값이 변경되면 발생합니다.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>이 멤버에 대한 설명은 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />를 참조하세요.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>이 멤버에 대한 설명은 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />를 참조하세요.</summary>
    </member>
    <member name="T:System.Collections.Specialized.INotifyCollectionChanged">
      <summary>항목이 추가 및 제거되는 경우 또는 전체 컬렉션 개체가 재설정되는 경우처럼 수신기에 컬렉션에 대한 동적 변경 사항을 알립니다.</summary>
    </member>
    <member name="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged">
      <summary>컬렉션의 항목 목록이 변경되거나 컬렉션이 재설정되는 경우 발생합니다.</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedAction">
      <summary>
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 이벤트를 발생시킨 작업을 설명합니다. </summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add">
      <summary>컬렉션에 하나 이상의 항목이 추가되었습니다.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move">
      <summary>컬렉션 내에서 하나 이상의 항목이 이동했습니다.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove">
      <summary>컬렉션에서 하나 이상의 항목이 제거되었습니다.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace">
      <summary>컬렉션에서 하나 이상의 항목이 바뀌었습니다.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset">
      <summary>컬렉션의 내용이 크게 변경되었습니다.</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs">
      <summary>
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 이벤트에 대한 이벤트 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)">
      <summary>
        <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction" /> 값을 지정하여 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="action">열거형 값인 동작 값입니다. 이 값은 항상 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />이어야 합니다. 설명 부분을 참조하세요.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="action" />이 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />이 아닙니다.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)">
      <summary>여러 항목 변경을 설명하는 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="action">이벤트를 발생시킨 작업입니다. <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> 또는 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />로 설정될 수 있습니다.</param>
      <param name="changedItems">변경의 영향을 받은 여러 항목입니다.</param>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)">
      <summary>여러 항목의 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> 변경을 설명하는 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="action">이벤트를 발생시킨 작업입니다. <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />로만 설정될 수 있습니다.</param>
      <param name="newItems">원래 항목을 대체하는 새 항목입니다.</param>
      <param name="oldItems">대체된 원래 항목입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" />이 Replace가 아닌 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldItems" /> 또는 <paramref name="newItems" />가 null인 경우</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)">
      <summary>여러 항목의 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> 변경을 설명하는 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="action">이벤트를 발생시킨 작업입니다. <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />로만 설정될 수 있습니다.</param>
      <param name="newItems">원래 항목을 대체하는 새 항목입니다.</param>
      <param name="oldItems">대체된 원래 항목입니다.</param>
      <param name="startingIndex">대체되는 항목 중 첫 번째 항목의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" />이 Replace가 아닌 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldItems" /> 또는 <paramref name="newItems" />가 null인 경우</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)">
      <summary>여러 항목 변경이나 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" /> 변경을 설명하는 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="action">이벤트를 발생시킨 작업입니다. <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> 또는 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />로 설정될 수 있습니다.</param>
      <param name="changedItems">변경의 영향을 받은 항목입니다.</param>
      <param name="startingIndex">변경이 발생한 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" />이 Reset, Add 또는 Remove가 아닌 경우, <paramref name="action" />이 Reset이고 <paramref name="changedItems" />가 null이 아니거나 <paramref name="startingIndex" />가 -1이 아닌 경우 또는 action이 Add 또는 Remove이고 <paramref name="startingIndex" />가 -1보다 작은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" />이 Add 또는 Remove이고 <paramref name="changedItems" />가 null인 경우</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)">
      <summary>여러 항목의 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> 변경을 설명하는 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="action">이벤트를 발생시킨 작업입니다. <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />로만 설정될 수 있습니다.</param>
      <param name="changedItems">변경의 영향을 받은 항목입니다.</param>
      <param name="index">변경된 항목의 새 인덱스입니다.</param>
      <param name="oldIndex">변경된 항목의 이전 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" />이 Move가 아니거나 <paramref name="index" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)">
      <summary>단일 항목 변경을 설명하는 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="action">이벤트를 발생시킨 작업입니다. <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> 또는 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />로 설정될 수 있습니다.</param>
      <param name="changedItem">변경의 영향을 받은 항목입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" />이 Reset, Add 또는 Remove가 아니거나 <paramref name="action" />이 Reset이고 <paramref name="changedItem" />가 null이 아닌 경우</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
      <summary>
        <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> 또는 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> 변경을 설명하는 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="action">열거형 값인 동작 값입니다. 이 값은 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> 또는 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />이어야 합니다. 설명 부분을 참조하세요.</param>
      <param name="changedItem">변경의 영향을 받은 항목입니다.</param>
      <param name="index">변경이 발생한 인덱스입니다.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="action" />가 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> 또는 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
      <summary>단일 항목의 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> 변경을 설명하는 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="action">이벤트를 발생시킨 작업입니다. <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />로만 설정될 수 있습니다.</param>
      <param name="changedItem">변경의 영향을 받은 항목입니다.</param>
      <param name="index">변경된 항목의 새 인덱스입니다.</param>
      <param name="oldIndex">변경된 항목의 이전 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" />이 Move가 아니거나 <paramref name="index" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)">
      <summary>단일 항목의 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> 변경을 설명하는 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="action">이벤트를 발생시킨 작업입니다. <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />로만 설정될 수 있습니다.</param>
      <param name="newItem">원래 항목을 대체하는 새 항목입니다.</param>
      <param name="oldItem">대체된 원래 항목입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" />이 Replace가 아닌 경우</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
      <summary>
        <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> 변경을 설명하는 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="action">열거형 값인 동작 값입니다. 이 값은 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />이어야 합니다. 설명 부분을 참조하세요.</param>
      <param name="newItem">원래 항목을 대체하는 새 항목입니다.</param>
      <param name="oldItem">대체된 원래 항목입니다.</param>
      <param name="index">대체되는 항목의 인덱스입니다.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="action" />이 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />이 아닙니다.</exception>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action">
      <summary>이벤트를 발생시킨 작업에 대한 설명을 가져옵니다. </summary>
      <returns>이벤트를 발생시킨 동작에 대한 설명(열거형의 값)입니다.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems">
      <summary>동작의 영향을 받은 항목을 가져옵니다.</summary>
      <returns>동작의 영향을 받은 항목의 목록입니다. 기본값은 null입니다.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex">
      <summary>변경이 발생한 인덱스를 가져옵니다.</summary>
      <returns>변경이 발생한 인덱스입니다.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems">
      <summary>
        <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> 또는 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> 동작의 영향을 받은 항목을 가져옵니다.</summary>
      <returns>
        <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> 또는 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> 동작의 영향을 받는 항목 목록입니다.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex">
      <summary>
        <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> 또는 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> 동작에 대해 변경이 발생한 인덱스를 가져옵니다.</summary>
      <returns>
        <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> 또는 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> 동작에 대해 변경이 발생한 인덱스입니다.</returns>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventHandler">
      <summary>
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 이벤트를 구현하는 이벤트를 처리하는 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트를 발생시킨 개체입니다.</param>
      <param name="e">이벤트 데이터입니다.</param>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventArgs">
      <summary>MethodNameCompleted 이벤트에 대한 이벤트 데이터를 제공합니다. </summary>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
      <summary>
        <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="error">비동기 작업 중 발생한 오류입니다.</param>
      <param name="cancelled">비동기 작업이 취소되었는지 여부를 나타내는 값입니다.</param>
      <param name="userState">Completed 이벤트를 발생시킨 작업을 식별하는 데 사용되는 사용자가 제공한 선택적인 상태 개체입니다.</param>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
      <summary>비동기 작업이 취소되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>비동기 작업이 취소되었으면 true이고, 그렇지 않으면 false입니다.기본값은 false입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
      <summary>비동기 작업 중 발생한 오류를 나타내는 값을 가져옵니다.</summary>
      <returns>비동기 작업 중 오류가 발생했으면 <see cref="T:System.Exception" /> 인스턴스이고, 그렇지 않으면 null입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
      <summary>비동기 작업에 실패한 경우 사용자가 제공한 예외를 발생시킵니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> 속성이 true입니다.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">
        <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> 속성이 비동기 작업에서 설정되었습니다.</exception>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
      <summary>비동기 작업의 고유 식별자를 가져옵니다.</summary>
      <returns>비동기 작업을 고유하게 식별하는 개체 참조이거나, 설정된 값이 없는 경우 null입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventHandler">
      <summary>비동기 작업의 MethodNameCompleted 이벤트를 처리할 메서드를 나타냅니다. </summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터가 들어 있는 <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.AsyncOperation">
      <summary>비동기 작업의 수명을 추적합니다. </summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.OperationCompleted">
      <summary>비동기 작업의 수명을 끝냅니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> 가 이 작업에 대해 이미 호출되었습니다.</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>응용프로그램 모델에 적절한 스레드나 컨텍스트에서 대리자를 호출합니다.</summary>
      <param name="d">작업이 끝날 때 호출될 대리자를 래핑하는 <see cref="T:System.Threading.SendOrPostCallback" /> 개체입니다.</param>
      <param name="arg">
        <paramref name="d" /> 매개 변수에 포함된 대리자에 대한 인수입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> 메서드가 이 작업에 대해 이전에 호출되었습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" />이 null입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
      <summary>비동기 작업의 수명을 끝냅니다.</summary>
      <param name="d">작업이 끝날 때 호출될 대리자를 래핑하는 <see cref="T:System.Threading.SendOrPostCallback" /> 개체입니다.</param>
      <param name="arg">
        <paramref name="d" /> 매개 변수에 포함된 대리자에 대한 인수입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> 메서드가 이 작업에 대해 이전에 호출되었습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" />이 null입니다.</exception>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.SynchronizationContext">
      <summary>
        <see cref="T:System.ComponentModel.AsyncOperationManager" />에서 개체를 만들 때 생성자에 전달된 <see cref="T:System.Threading.SynchronizationContext" /> 개체를 가져옵니다.</summary>
      <returns>생성자에 전달된 <see cref="T:System.Threading.SynchronizationContext" /> 개체입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
      <summary>비동기 작업을 고유하게 식별하는 데 사용되는 개체를 가져옵니다.</summary>
      <returns>비동기 메서드 호출에 전달된 상태 개체입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.AsyncOperationManager">
      <summary>비동기 메서드 호출을 지원하는 클래스에 대한 동시성 관리 기능을 제공합니다.이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
      <summary>특정 비동기 작업의 기간을 추적하기 위한 <see cref="T:System.ComponentModel.AsyncOperation" />을 반환합니다.</summary>
      <returns>비동기 메서드 호출의 기간을 추적하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.AsyncOperation" />입니다.</returns>
      <param name="userSuppliedState">작업 ID와 같은 클라이언트 상태 정보와 특정 비동기 작업을 연결하는 데 사용되는 개체입니다.</param>
    </member>
    <member name="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
      <summary>비동기 작업의 <see cref="T:System.Threading.SynchronizationContext" />를 가져오거나 설정합니다.</summary>
      <returns>비동기 작업에 대한 <see cref="T:System.Threading.SynchronizationContext" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.BackgroundWorker">
      <summary>별도의 스레드에서 작업을 실행합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.BackgroundWorker" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.CancelAsync">
      <summary>보류 중인 백그라운드 작업의 취소를 요청합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" />이 false인 경우 </exception>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.CancellationPending">
      <summary>응용프로그램에서 백그라운드 작업의 취소를 요청했는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>응용프로그램에서 백그라운드 작업의 취소를 요청했으면 true이고, 그렇지 않으면 false입니다.기본값은 false입니다.</returns>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.DoWork">
      <summary>
        <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" />를 호출할 때 발생합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.IsBusy">
      <summary>
        <see cref="T:System.ComponentModel.BackgroundWorker" />가 백그라운드 작업을 실행하고 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.BackgroundWorker" />가 백그라운드 작업을 실행하고 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터가 들어 있는 <see cref="T:System.ComponentModel.DoWorkEventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터가 들어 있는 <see cref="T:System.ComponentModel.ProgressChangedEventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터가 들어 있는 <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" />입니다.</param>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
      <summary>
        <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" />를 호출할 때 발생합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
      <summary>
        <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 이벤트를 발생시킵니다.</summary>
      <param name="percentProgress">백그라운드 작업의 완료율(0부터 100까지)입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" />속성이 false로 설정된 경우 </exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
      <summary>
        <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 이벤트를 발생시킵니다.</summary>
      <param name="percentProgress">백그라운드 작업의 완료율(0부터 100까지)입니다.</param>
      <param name="userState">
        <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />에 전달된 상태 개체입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" />속성이 false로 설정된 경우 </exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
      <summary>백그라운드 작업 실행을 시작합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" />가 true인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
      <summary>백그라운드 작업 실행을 시작하며 백그라운드 작업에서 사용하는 매개 변수를 포함합니다.</summary>
      <param name="argument">
        <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> 이벤트 처리기의 백그라운드 작업에서 사용하는 매개 변수입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" />가 true인 경우</exception>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
      <summary>백그라운드 작업이 완료되거나 취소되거나 예외를 발생시켰을 때 발생합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
      <summary>
        <see cref="T:System.ComponentModel.BackgroundWorker" />가 진행률 업데이트를 보고할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.BackgroundWorker" />가 진행률 업데이트를 지원하면 true이고, 그렇지 않으면 false입니다.기본값은 false입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
      <summary>
        <see cref="T:System.ComponentModel.BackgroundWorker" />가 비동기 취소를 지원하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.BackgroundWorker" />가 취소를 지원하면 true이고, 그렇지 않으면 false입니다.기본값은 false입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.BrowsableAttribute">
      <summary>속성 또는 이벤트를 속성 창에 표시해야 할지 여부를 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.BrowsableAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="browsable">디자인 타임에서 속성 또는 이벤트를 수정할 수 있으면 true이고, 그렇지 않으면 false입니다.기본값은 true입니다.</param>
    </member>
    <member name="P:System.ComponentModel.BrowsableAttribute.Browsable">
      <summary>찾아볼 수 있는 개체인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>검색 가능 개체이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.BrowsableAttribute" />의 기본값인 <see cref="F:System.ComponentModel.BrowsableAttribute.Yes" />를 지정합니다.이 정적 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.Equals(System.Object)">
      <summary>이 인스턴스와 지정된 개체가 같은지 여부를 나타냅니다.</summary>
      <returns>
        <paramref name="obj" />와 이 인스턴스가 서로 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">비교할 다른 개체입니다. </param>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.GetHashCode">
      <summary>해당 인스턴스에 대한 해시 코드를 반환합니다.</summary>
      <returns>32비트 부호 있는 정수 해시 코드입니다.</returns>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.No">
      <summary>디자인 타임에서 속성 또는 이벤트를 수정할 수 없도록 지정합니다.이 정적 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.Yes">
      <summary>디자인 타임에서 속성 또는 이벤트를 수정할 수 있도록 지정합니다.이 정적 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventArgs">
      <summary>취소할 수 있는 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CancelEventArgs.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.CancelEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CancelEventArgs.#ctor(System.Boolean)">
      <summary>지정된 값으로 설정된 <see cref="P:System.ComponentModel.CancelEventArgs.Cancel" /> 속성을 사용하여 <see cref="T:System.ComponentModel.CancelEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="cancel">작업을 취소하려면 true로 설정하고, 그렇지 않으면 false로 설정합니다.</param>
    </member>
    <member name="P:System.ComponentModel.CancelEventArgs.Cancel">
      <summary>작업 취소 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>작업을 취소해야 하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.CategoryAttribute">
      <summary>항목별 모드로 설정된 속성 표 컨트롤에 표시될 때 속성이나 이벤트를 그룹화할 범주 이름을 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor">
      <summary>범주 이름 기본을 사용하여 <see cref="T:System.ComponentModel.CategoryAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor(System.String)">
      <summary>지정된 범주 이름을 사용하여 <see cref="T:System.ComponentModel.CategoryAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="category">범주의 이름입니다. </param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Action">
      <summary>작업 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>작업 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Appearance">
      <summary>모양 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>모양 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Asynchronous">
      <summary>비동기 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>비동기 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Behavior">
      <summary>동작 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>동작 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Category">
      <summary>이 특성이 적용되는 속성 또는 이벤트의 범주 이름을 가져옵니다.</summary>
      <returns>이 특성이 적용되는 속성 또는 이벤트의 범주 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Data">
      <summary>데이터 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>데이터 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Default">
      <summary>기본 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>기본 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Design">
      <summary>디자인 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>디자인 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.DragDrop">
      <summary>끌어서 놓기 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>끌어서 놓기 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.Equals(System.Object)">
      <summary>지정된 개체의 값이 현재 <see cref="T:System.ComponentModel.CategoryAttribute" />와 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <returns>지정된 개체의 값이 현재 <see cref="T:System.ComponentModel.CategoryAttribute" />와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">값이 같은지 테스트할 개체입니다. </param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Focus">
      <summary>포커스 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>포커스 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Format">
      <summary>형식 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>형식 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetHashCode">
      <summary>해당 특성의 해시 코드를 반환합니다.</summary>
      <returns>32비트 부호 있는 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetLocalizedString(System.String)">
      <summary>지정된 범주의 지역화 이름을 찾습니다.</summary>
      <returns>범주의 지역화 이름이거나 지역화 이름이 없는 경우 null입니다.</returns>
      <param name="value">찾을 범주의 식별자입니다. </param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Key">
      <summary>키 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>키 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Layout">
      <summary>레이아웃 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>레이아웃 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Mouse">
      <summary>마우스 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>마우스 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.WindowStyle">
      <summary>창 스타일 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>창 스타일 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentCollection">
      <summary>컨테이너의 특정 구성 요소를 가져옵니다.</summary>
    </member>
    <member name="T:System.ComponentModel.DataErrorsChangedEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DataErrorsChangedEventArgs.#ctor(System.String)">
      <summary>
        <see cref="T:System.ComponentModel.DataErrorsChangedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="propertyName">오류가 변경된 속성의 이름이거나, 엔터티 수준 오류의 경우 null 또는 <see cref="F:System.String.Empty" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.DataErrorsChangedEventArgs.PropertyName">
      <summary>오류가 변경된 속성의 이름을 가져오거나, 엔터티 수준 오류의 경우 null 또는 <see cref="F:System.String.Empty" />를 가져옵니다.</summary>
      <returns>영향을 받는 속성의 이름이거나, 엔터티 수준 오류의 경우 null 또는 <see cref="F:System.String.Empty" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultValueAttribute">
      <summary>속성의 기본값을 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.Boolean" /> 값을 사용하여 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">
        <see cref="T:System.Boolean" />입니다(기본값). </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Byte)">
      <summary>8비트 부호 없는 정수를 사용하여 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">8비트 부호 없는 정수입니다(기본값). </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Char)">
      <summary>유니코드 문자를 사용하여 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">유니코드 문자입니다(기본값). </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Double)">
      <summary>배정밀도 부동 소수점 숫자를 사용하여 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">배정밀도 부동 소수점 숫자입니다(기본값). </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int16)">
      <summary>16비트 부호 있는 정수를 사용하여 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">16비트 부호 있는 정수입니다(기본값). </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int32)">
      <summary>32비트 부호 있는 정수를 사용하여 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">32비트 부호 있는 정수입니다(기본값). </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int64)">
      <summary>64비트 부호 있는 정수를 사용하여 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">64비트 부호 있는 정수입니다(기본값). </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Object)">
      <summary>
        <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">기본값을 나타내는 <see cref="T:System.Object" />입니다. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Single)">
      <summary>단정밀도 부동 소수점 숫자를 사용하여 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">단정밀도 부동 소수점 숫자입니다(기본값). </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.String" />을 사용하여 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">
        <see cref="T:System.String" />입니다(기본값). </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Type,System.String)">
      <summary>지정된 값을 지정된 형식으로 변환하고 고정 문화권을 번역 컨텍스트로 사용하여 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">값을 변환할 대상 형식을 나타내는 <see cref="T:System.Type" />입니다. </param>
      <param name="value">형식에 대한 <see cref="T:System.ComponentModel.TypeConverter" /> 및 미국 영어 문화권을 사용하여 해당 형식으로 변환할 수 있는 <see cref="T:System.String" />입니다.영어 문화권의 경우).</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.Equals(System.Object)">
      <summary>주어진 개체의 값이 현재 <see cref="T:System.ComponentModel.DefaultValueAttribute" />와 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <returns>지정된 개체의 값이 현재 값과 같으면 True이고, 그렇지 않으면 False입니다.</returns>
      <param name="obj">값이 같은지 테스트할 개체입니다. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.GetHashCode"></member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.SetValue(System.Object)">
      <summary>이 특성이 바인딩될 속성의 기본값을 설정합니다.</summary>
      <param name="value">기본값입니다.</param>
    </member>
    <member name="P:System.ComponentModel.DefaultValueAttribute.Value">
      <summary>이 특성이 바인딩될 속성의 기본값을 가져옵니다.</summary>
      <returns>이 특성이 바인딩될 속성의 기본값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.DescriptionAttribute">
      <summary>속성 또는 이벤트에 대한 설명을 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor">
      <summary>매개 변수를 사용하지 않고 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)">
      <summary>설명을 사용하여 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="description">설명 텍스트입니다. </param>
    </member>
    <member name="F:System.ComponentModel.DescriptionAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.DescriptionAttribute" />의 기본값인 빈 문자열("")을 지정합니다.이 정적 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.Description">
      <summary>이 특성에 저장된 설명을 가져옵니다.</summary>
      <returns>이 특성에 저장된 설명입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.DescriptionValue">
      <summary>설명으로 저장된 문자열을 가져오거나 설정합니다.</summary>
      <returns>설명으로 저장된 문자열입니다.기본값은 빈 문자열("")입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.Equals(System.Object)">
      <summary>지정된 개체의 값이 현재 <see cref="T:System.ComponentModel.DescriptionAttribute" />와 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <returns>지정된 개체의 값이 현재 <see cref="T:System.ComponentModel.DescriptionAttribute" />와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">값이 같은지 테스트할 개체입니다. </param>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.GetHashCode"></member>
    <member name="T:System.ComponentModel.DoWorkEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DoWorkEventArgs.#ctor(System.Object)">
      <summary>
        <see cref="T:System.ComponentModel.DoWorkEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="argument">비동기 작업의 인수를 지정합니다.</param>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Argument">
      <summary>비동기 작업의 인수를 나타내는 값을 가져옵니다.</summary>
      <returns>비동기 작업의 인수를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Cancel">
      <summary>비동기 작업이 취소되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>작업이 취소되었으면 true이고, 그렇지 않으면 false입니다.기본값은 false입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Result">
      <summary>비동기 작업의 결과를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>비동기 작업의 결과를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.DoWorkEventHandler">
      <summary>
        <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> 메서드가 호출될 때 발생하는 <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다. </param>
      <param name="e">이벤트 데이터가 들어 있는 <see cref="T:System.ComponentModel.DoWorkEventArgs" />입니다. </param>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableAttribute">
      <summary>속성 또는 메서드가 편집기에 표시되도록 지정합니다.이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor">
      <summary>기본 상태로 설정된 <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" />를 사용하여 <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor(System.ComponentModel.EditorBrowsableState)">
      <summary>
        <see cref="T:System.ComponentModel.EditorBrowsableState" />를 사용하여 <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="state">
        <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" />를 설정할 <see cref="T:System.ComponentModel.EditorBrowsableState" />입니다. </param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.Equals(System.Object)">
      <summary>지정된 개체의 값이 현재 <see cref="T:System.ComponentModel.EditorBrowsableAttribute" />와 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <returns>주어진 개체의 값이 현재 값과 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">값이 같은지 테스트할 개체입니다. </param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.GetHashCode"></member>
    <member name="P:System.ComponentModel.EditorBrowsableAttribute.State">
      <summary>속성 또는 메서드의 찾아볼 수 있는 상태를 가져옵니다.</summary>
      <returns>속성 또는 메서드의 찾아볼 수 있는 상태인 <see cref="T:System.ComponentModel.EditorBrowsableState" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableState">
      <summary>편집기 내에서 속성 또는 메서드의 찾아볼 수 있는 상태를 지정합니다. </summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Advanced">
      <summary>속성 또는 메서드는 고급 사용자만 봐야 하는 기능입니다.편집기에서는 이러한 속성을 표시하거나 숨길 수 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Always">
      <summary>이 속성 또는 메서드는 편집기 내에서 항상 찾아볼 수 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Never">
      <summary>이 속성 또는 메서드는 편집기 내에서 찾아볼 수 없습니다.</summary>
    </member>
    <member name="T:System.ComponentModel.IChangeTracking">
      <summary>개체에서 변경 내용을 쿼리하고 변경된 상태를 다시 설정하는 메커니즘을 정의합니다. </summary>
    </member>
    <member name="M:System.ComponentModel.IChangeTracking.AcceptChanges">
      <summary>수정을 허용하여 개체의 상태를 변경되지 않은 상태로 다시 설정합니다. </summary>
    </member>
    <member name="P:System.ComponentModel.IChangeTracking.IsChanged">
      <summary>개체의 변경된 상태를 가져옵니다.</summary>
      <returns>
        <see cref="M:System.ComponentModel.IChangeTracking.AcceptChanges" />를 마지막으로 호출한 이후 개체의 내용이 변경되었으면 true이고, 그렇지 않으면 false입니다. </returns>
    </member>
    <member name="T:System.ComponentModel.IComponent">
      <summary>클래스에서 구현된 경우 구성 요소와 관련된 <see cref="T:System.ComponentModel.ISite" />를 가져오거나 설정합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.IComponent.Disposed">
      <summary>구성 요소에 대한 Disposed 이벤트를 수신하는 이벤트 처리기를 추가합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.IComponent.Site">
      <summary>클래스에서 구현된 경우 구성 요소와 관련된 <see cref="T:System.ComponentModel.ISite" />를 가져오거나 설정합니다.</summary>
      <returns>구성 요소와 관련된 <see cref="T:System.ComponentModel.ISite" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.IContainer">
      <summary>컨테이너의 기능을 제공합니다.컨테이너는 논리적으로 0개 이상의 구성 요소를 포함하는 개체입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent)">
      <summary>구성 요소를 컨테이너에 추가합니다.</summary>
      <param name="component">추가할 구성 요소입니다.</param>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent,System.String)">
      <summary>구성 요소를 컨테이너에 추가합니다.</summary>
      <param name="component">추가할 구성 요소입니다.</param>
      <param name="name">구성 요소의 식별 이름입니다.</param>
    </member>
    <member name="P:System.ComponentModel.IContainer.Components">
      <summary>
        <see cref="T:System.ComponentModel.IContainer" />의 모든 구성 요소를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.IContainer" />에 있는 구성 요소의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IContainer.Remove(System.ComponentModel.IComponent)">
      <summary>컨테이너에서 구성 요소를 제거합니다.</summary>
      <param name="component">제거할 구성 요소입니다.</param>
    </member>
    <member name="T:System.ComponentModel.IEditableObject">
      <summary>편집 모드가 있고 변경 사항을 커밋하거나 되돌리는 기능이 있는 개체를 나타냅니다. </summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.BeginEdit">
      <summary>개체를 편집 모드로 전환하도록 합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.CancelEdit">
      <summary>개체를 편집 모드에서 종료하고 이전의 편집되지 않은 값으로 되돌리도록 합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.EndEdit">
      <summary>개체를 편집 모드에서 종료하고 편집된 값을 커밋합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.INotifyDataErrorInfo">
      <summary>데이터 엔터티 클래스에서 사용자 지정 동기 및 비동기 유효성 검사 지원을 제공하기 위해 구현할 수 있는 멤버를 정의합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged">
      <summary>속성 또는 전체 엔터티에 대한 유효성 검사 오류가 변경된 경우 발생합니다. </summary>
    </member>
    <member name="M:System.ComponentModel.INotifyDataErrorInfo.GetErrors(System.String)">
      <summary>지정된 속성 또는 전체 엔터티에 대한 유효성 검사 오류를 가져옵니다.</summary>
      <returns>속성 또는 엔터티에 대한 유효성 검사 오류입니다.</returns>
      <param name="propertyName">유효성 검사 오류를 검색할 속성의 이름이거나, 엔터티 수준 오류를 검색하려는 경우 null 또는 <see cref="F:System.String.Empty" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.INotifyDataErrorInfo.HasErrors">
      <summary>엔터티에 유효성 검사 오류가 있는지 여부를 나타내는 값을 가져옵니다. </summary>
      <returns>엔터티에 현재 유효성 검사 오류가 있으면 True이고, 그렇지 않으면 False입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanged">
      <summary>속성 값이 변경되었음을 클라이언트에 알립니다.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
      <summary>속성 값이 변경되면 발생합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanging">
      <summary>속성 값이 변경되고 있음을 클라이언트에 알리기 위한 이벤트를 정의합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging">
      <summary>속성 값이 변경될 때 발생합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.IRevertibleChangeTracking">
      <summary>변경 내용 롤백을 지원합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.IRevertibleChangeTracking.RejectChanges">
      <summary>수정을 거부하여 개체를 변경되지 않은 상태로 다시 설정합니다. </summary>
    </member>
    <member name="T:System.ComponentModel.ISite">
      <summary>사이트에 필요한 기능을 제공합니다.사이트는 구성 요소를 컨테이너에 바인딩하여 서로 통신할 수 있도록 할 뿐만 아니라 컨테이너에서 해당 구성 요소를 관리할 수 있는 방법도 제공합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.ISite.Component">
      <summary>클래스에서 구현될 때 <see cref="T:System.ComponentModel.ISite" />와 관련된 구성 요소를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISite" />와 관련된 구성 요소입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Container">
      <summary>클래스에서 구현될 때 <see cref="T:System.ComponentModel.ISite" />와 관련된 컨테이너를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISite" />와 관련된 컨테이너입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.DesignMode">
      <summary>클래스에서 구현될 때 구성 요소가 디자인 모드에 있는지 여부를 확인합니다.</summary>
      <returns>디자인 모드에 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Name">
      <summary>클래스에서 구현된 경우 <see cref="T:System.ComponentModel.ISite" />와 관련된 구성 요소의 이름을 가져오거나 설정합니다.</summary>
      <returns>구성 요소의 이름입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary>형식 변환기 또는 편집기가 변환을 수행할 수 있도록 형식 변환기 또는 값 편집기에 컨텍스트 정보를 제공합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary>이 포맷터에 대한 개체 집합이 포함된 컨테이너를 가져옵니다.</summary>
      <returns>이 포맷터에 대한 개체 집합이 포함된 컨테이너입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary>포맷터 개체에 대한 메서드를 호출하는 인스턴스를 가져옵니다.</summary>
      <returns>포맷터 개체에 대한 메서드를 호출하는 인스턴스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary>
        <see cref="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged" /> 이벤트를 발생시킵니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary>이 개체를 변경할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>해당 개체를 변경할 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary>지정된 컨텍스트 항목을 표시하는 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 가져옵니다.</summary>
      <returns>지정된 컨텍스트 항목을 표시하는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary>정렬 작업의 방향을 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary>오름차순으로 정렬합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary>내림차순으로 정렬합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ProgressChangedEventArgs.#ctor(System.Int32,System.Object)">
      <summary>
        <see cref="T:System.ComponentModel.ProgressChangedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="progressPercentage">비동기 작업의 완료율입니다.</param>
      <param name="userState">고유한 사용자 상태입니다.</param>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage">
      <summary>비동기 작업의 완료율을 가져옵니다.</summary>
      <returns>비동기 작업의 진행을 나타내는 백분율 값입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.UserState">
      <summary>고유한 사용자 상태를 가져옵니다.</summary>
      <returns>사용자 상태를 나타내는 고유한 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventHandler">
      <summary>
        <see cref="T:System.ComponentModel.BackgroundWorker" />에서 진행률을 보고할 때 발생하는 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다. </param>
      <param name="e">이벤트 데이터가 들어 있는 <see cref="T:System.ComponentModel.ProgressChangedEventArgs" />입니다. </param>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventArgs.#ctor(System.String)">
      <summary>
        <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="propertyName">변경된 속성의 이름입니다. </param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName">
      <summary>변경된 속성의 이름을 가져옵니다.</summary>
      <returns>변경된 속성의 이름이거나, 모든 속성이 변경된 경우 <see cref="F:System.String.Empty" /> 또는 null입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventHandler">
      <summary>
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다. </param>
      <param name="e">이벤트 데이터가 들어 있는 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />입니다. </param>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangingEventArgs.#ctor(System.String)">
      <summary>
        <see cref="T:System.ComponentModel.PropertyChangingEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="propertyName">변경되고 있는 속성의 이름입니다.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangingEventArgs.PropertyName">
      <summary>변경되고 있는 속성의 이름을 가져옵니다.</summary>
      <returns>변경되고 있는 속성의 이름입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventHandler">
      <summary>
        <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터입니다.</param>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary>속성에 대한 설명입니다.</summary>
    </member>
    <member name="T:System.ComponentModel.ReadOnlyAttribute">
      <summary>이 특성이 적용되는 속성이 읽기 전용인지 아니면 읽기/쓰기인지를 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.ReadOnlyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="isReadOnly">이 특성이 적용되는 속성이 읽기 전용임을 나타내면 true이고, 속성이 읽기/쓰기가 가능함을 나타내면 false입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)">
      <summary>이 인스턴스와 지정된 개체가 같은지 여부를 반환합니다.</summary>
      <returns>
        <paramref name="obj" />와 이 인스턴스가 서로 같으면 true이고, 그렇지 않으면 false입니다. </returns>
      <param name="obj">비교할 개체입니다. </param>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.GetHashCode">
      <summary>해당 인스턴스에 대한 해시 코드를 반환합니다. </summary>
      <returns>현재 <see cref="T:System.ComponentModel.ReadOnlyAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ReadOnlyAttribute.IsReadOnly">
      <summary>이 특성이 적용되는 속성이 읽기 전용인지 여부를 나타내는 값을 가져옵니다. </summary>
      <returns>이 특성이 적용되는 속성이 읽기 전용이면 true이고, 속성이 읽기/쓰기이면 false입니다. </returns>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.RunWorkerCompletedEventArgs.#ctor(System.Object,System.Exception,System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="result">비동기 작업의 결과입니다.</param>
      <param name="error">비동기 작업 중 발생한 오류입니다.</param>
      <param name="cancelled">비동기 작업이 취소되었는지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="P:System.ComponentModel.RunWorkerCompletedEventArgs.Result">
      <summary>비동기 작업의 결과를 나타내는 값을 가져옵니다.</summary>
      <returns>비동기 작업의 결과를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventHandler">
      <summary>
        <see cref="T:System.ComponentModel.BackgroundWorker" />에서 수행하는 작업이 완료되거나, 취소되거나, 예외를 발생시킨 경우 발생하는 <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> 이벤트를 처리하는 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다. </param>
      <param name="e">이벤트 데이터가 들어 있는 <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" />입니다. </param>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary>값 형식을 다른 형식으로 변환하는 통합된 방법을 제공합니다. <see cref="T:System.ComponentModel.TypeConverter" />는 일반적으로 문자열에서 개체로의 변환을 지원하며, 이는 디자인 환경의 속성 편집기 또는 XAML 사용을 위한 것입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.TypeConverter" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>형식 변환기가 지정된 형식의 개체를 이 변환기의 형식으로 변환할 수 있는지 여부를 반환합니다.</summary>
      <returns>이 변환기가 변환을 수행할 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="context">형식 컨텍스트를 제공하는 개체입니다.</param>
      <param name="sourceType">변환할 원본 형식입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary>형식 변환기가 지정된 형식의 개체를 이 변환기의 형식으로 변환할 수 있는지 여부를 반환합니다.</summary>
      <returns>이 변환기가 변환을 수행할 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="sourceType">변환할 원본 형식입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>형식 변환기가 개체를 지정된 형식으로 변환할 수 있는지 여부를 나타내는 값을 반환합니다. </summary>
      <returns>이 변환기가 변환을 수행할 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="context">형식 컨텍스트를 제공하는 개체입니다.</param>
      <param name="destinationType">변환할 형식입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary>형식 변환기가 개체를 지정된 형식으로 변환할 수 있는지 여부를 나타내는 값을 반환합니다. </summary>
      <returns>이 변환기가 변환을 수행할 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="destinationType">변환할 형식입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 값을 변환기의 변환 형식으로 변환합니다.</summary>
      <returns>변환된 값입니다.</returns>
      <param name="context">형식 컨텍스트를 제공하는 개체입니다. </param>
      <param name="culture">현재 문화권으로 사용할 <see cref="T:System.Globalization.CultureInfo" />입니다. </param>
      <param name="value">이 변환기의 형식으로 변환할 값입니다.</param>
      <exception cref="T:System.NotImplementedException">
        <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />가 기본 <see cref="T:System.ComponentModel.TypeConverter" />에서 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary>지정된 값을 이 변환기의 형식으로 변환합니다.</summary>
      <returns>변환된 값입니다.</returns>
      <param name="value">이 변환기의 형식으로 변환할 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary>지정된 텍스트를 개체로 변환합니다.</summary>
      <returns>변환된 텍스트 문자열을 나타내는 개체입니다.</returns>
      <param name="text">변환할 개체의 텍스트 표현입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>지정된 값 개체를 지정된 형식으로 변환합니다.</summary>
      <returns>변환된 개체입니다.</returns>
      <param name="context">형식 컨텍스트를 제공하는 개체입니다. </param>
      <param name="culture">현재 문화권으로 사용할 <see cref="T:System.Globalization.CultureInfo" />입니다. </param>
      <param name="value">변환할 개체입니다.</param>
      <param name="destinationType">개체를 변환할 대상 형식입니다.</param>
      <exception cref="T:System.NotImplementedException">
        <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />가 기본 <see cref="T:System.ComponentModel.TypeConverter" />에서 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary>지정된 값 개체를 지정된 형식으로 변환합니다.</summary>
      <returns>변환된 개체입니다.</returns>
      <param name="value">변환할 개체입니다.</param>
      <param name="destinationType">개체를 변환할 대상 형식입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary>지정된 개체를 문자열 표현으로 변환합니다.</summary>
      <returns>변환된 값을 나타내는 개체입니다.</returns>
      <param name="value">변환할 개체입니다.</param>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>이 특성이 바인딩되는 형식 또는 속성의 형식 변환기로 사용할 클래스를 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>지정된 형식 이름을 이 특성이 바인딩되는 개체의 데이터 변환기로 사용하여 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeName">이 특성이 바인딩되는 개체의 데이터 변환에 사용할 클래스의 정규화된 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>지정된 형식을 이 특성이 바인딩되는 개체의 데이터 변환기로 사용하여 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">이 특성이 바인딩되는 개체의 데이터 변환에 사용할 변환기 클래스의 형식입니다.</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>이 특성이 바인딩되는 개체의 변환기로 사용할 형식의 정규화된 형식 이름을 가져옵니다.</summary>
      <returns>이 특성이 바인딩되는 개체의 변환기로 사용할 형식의 정규화된 형식 이름이거나 정규화된 이름이 없는 경우 빈 문자열("")입니다.기본값은 빈 문자열("")입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.Debug">
      <summary>코드를 디버깅하는 데 필요한 메서드 및 속성 집합을 제공합니다.이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean)">
      <summary>조건을 확인한 다음 해당 조건이 false이면 호출 스택을 출력합니다.</summary>
      <param name="condition">계산할 조건식입니다.조건이 true이면 호출 스택이 표시되지 않습니다.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)">
      <summary>조건을 확인한 다음 해당 조건이 false이면 지정된 메시지를 표시합니다.</summary>
      <param name="condition">계산할 조건식입니다.조건이 true이면 지정된 메시지가 표시되지 않습니다.</param>
      <param name="message">표시할 메시지입니다. </param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)">
      <summary>조건을 확인한 다음 해당 조건이 false이면 지정된 메시지를 표시합니다.</summary>
      <param name="condition">계산할 조건식입니다.조건이 true이면 지정된 메시지가 표시되지 않습니다.</param>
      <param name="message">표시할 메시지입니다. </param>
      <param name="detailMessage">표시할 자세한 메시지입니다. </param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])">
      <summary>조건을 확인한 다음 해당 조건이 false이면 메시지와 호출 스택을 출력합니다. </summary>
      <param name="condition">계산할 조건식입니다.조건이 true이면 지정된 메시지와 호출 스택이 표시되지 않습니다.</param>
      <param name="message">표시할 메시지입니다.</param>
      <param name="detailMessageFormat">
        <paramref name="args" /> 배열의 개체에 해당하는 0개 이상의 형식 항목과 혼합된 텍스트가 들어 있는 합성 형식 문자열입니다.</param>
      <param name="args">형식을 지정할 개체를 0개 이상 포함하는 개체 배열입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.Object)">
      <summary>OutputDebugString 함수를 사용하여 지정된 개체의 <see cref="M:System.Object.ToString" /> 메서드 값을 디버거에 씁니다.</summary>
      <param name="value">OutputDebugString 함수를 사용하여 디버거에 이름을 보낼 개체입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String)">
      <summary>OutputDebugString 함수를 사용하여 지정된 메시지를 쓰고 뒤에 줄 종결자를 붙입니다.</summary>
      <param name="message">디버거에 쓸 메시지입니다. </param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String,System.Object[])">
      <summary>OutputDebugString 함수를 사용하여 형식이 지정된 문자열을 쓰고 뒤에 줄 종결자를 붙입니다.</summary>
      <param name="format">
        <paramref name="args" /> 배열의 개체에 해당하는 0개 이상의 형식 항목과 혼합된 텍스트가 들어 있는 합성 형식 문자열입니다.</param>
      <param name="args">형식을 지정할 개체가 0개 이상 들어 있는 개체 배열입니다. </param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)">
      <summary>조건이 true일 경우 OutputDebugString 함수를 사용하여 지정된 메시지를 쓰고 뒤에 줄 종결자를 붙입니다.</summary>
      <param name="condition">계산할 조건식입니다.조건이 true이면 지정된 메시지가 디버거에 기록됩니다.</param>
      <param name="message">디버거에 쓸 메시지입니다. </param>
    </member>
    <member name="T:System.Diagnostics.Stopwatch">
      <summary>경과 시간을 정확하게 측정하는 데 사용할 수 있는 메서드 및 속성 집합을 제공합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.Stopwatch" /> 클래스의 새 인스턴스를 만듭니다.</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.Elapsed">
      <summary>현재 인스턴스에서 측정된 총 경과 시간을 가져옵니다.</summary>
      <returns>반환 값: <see cref="T:System.TimeSpan" /></returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds">
      <summary>현재 인스턴스에서 측정된 총 경과 시간(밀리초)을 가져옵니다.</summary>
      <returns>반환 값: <see cref="T:System.Int64" /></returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedTicks">
      <summary>현재 인스턴스에서 측정된 총 경과 시간(타이머 틱)을 가져옵니다.</summary>
      <returns>반환 값: <see cref="T:System.Int64" /></returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.Frequency">
      <summary>초당 틱 수로 나타낸 타이머 진동수를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetElapsedDateTimeTicks">
      <summary>이 인스턴스의 날짜와 시간을 나타내는 틱 수를 가져옵니다.</summary>
      <returns>반환 값: <see cref="T:System.Int64" /></returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetRawElapsedTicks">
      <summary>현재 인스턴스에서 측정된 총 경과 시간(타이머 틱)을 가져옵니다.</summary>
      <returns>반환 값: <see cref="T:System.Int64" /></returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetTimestamp">
      <summary>타이머 메커니즘의 현재 틱 수를 가져옵니다.</summary>
      <returns>반환 값: <see cref="T:System.Int64" /></returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.IsHighResolution">
      <summary>타이머가 고정밀도 성능 카운터를 기반으로 하는지 여부를 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.IsRunning">
      <summary>Stopwatch 타이머가 실행 중인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>반환 값: <see cref="T:System.Boolean" />Stopwatch 인스턴스가 현재 실행되고 있고 간격의 경과 시간을 측정 중이면 true이고, 그렇지 않으면 false입니다. </returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Reset">
      <summary>시간 간격 측정을 중지하고 경과 시간을 0으로 다시 설정합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Restart">
      <summary>시간 간격 측정을 중지하고 경과 시간 값을 0으로 다시 설정한 다음 경과 시간 측정을 시작합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Start">
      <summary>간격의 경과 시간 측정을 시작하거나 다시 시작합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.StartNew">
      <summary>새 Stopwatch 인스턴스를 초기화하고 경과 시간 속성을 0으로 설정한 다음 경과 시간 측정을 시작합니다.</summary>
      <returns>반환 값: <see cref="T:System.Diagnostics.Stopwatch" /></returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Stop">
      <summary>간격의 경과 시간 측정을 중지합니다.</summary>
    </member>
    <member name="T:System.IO.InvalidDataException">
      <summary>데이터 스트림의 형식이 잘못된 경우 발생되는 예외입니다.</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor">
      <summary>
        <see cref="T:System.IO.InvalidDataException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String)">
      <summary>지정된 오류 메시지를 사용하여 <see cref="T:System.IO.InvalidDataException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 원인을 설명하는 오류 메시지입니다.</param>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String,System.Exception)">
      <summary>이 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.IO.InvalidDataException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 원인을 설명하는 오류 메시지입니다.</param>
      <param name="innerException">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 null이 아니면 현재 예외는 내부 예외를 처리하는 catch 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.Net.WebUtility">
      <summary>웹 요청을 처리할 경우 URL의 인코딩 및 디코딩 메서드를 제공합니다. </summary>
    </member>
    <member name="M:System.Net.WebUtility.HtmlDecode(System.String)">
      <summary>HTTP 전송을 위해 HTML 인코딩된 문자열을 디코딩된 문자열로 변환합니다.</summary>
      <returns>디코딩된 문자열입니다.</returns>
      <param name="value">디코딩할 문자열입니다.</param>
    </member>
    <member name="M:System.Net.WebUtility.HtmlEncode(System.String)">
      <summary>문자열을 HTML로 인코딩된 문자열로 변환합니다.</summary>
      <returns>인코딩된 문자열입니다.</returns>
      <param name="value">인코딩할 문자열입니다.</param>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecode(System.String)">
      <summary>URL 전송을 위해 인코딩된 문자열을 디코딩된 문자열로 변환합니다.</summary>
      <returns>디코딩된 문자열입니다.</returns>
      <param name="encodedValue">디코딩할 문자열입니다.</param>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>지정된 인코딩 개체를 사용하여 URL로 인코딩된 바이트 배열을 배열의 지정된 위치부터 지정된 바이트 수만큼씩 디코딩된 문자열로 변환합니다.</summary>
      <returns>디코딩된 문자열입니다.</returns>
      <param name="encodedValue">디코딩할 바이트 배열입니다.</param>
      <param name="offset">디코딩할 바이트의 시작 위치입니다.</param>
      <param name="count">디코딩할 바이트 수입니다.</param>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncode(System.String)">
      <summary>URL 문자열을 인코딩합니다.</summary>
      <returns>인코딩된 문자열입니다.</returns>
      <param name="value">인코딩할 텍스트입니다.</param>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>바이트 배열을 배열의 지정된 위치부터 지정된 바이트 수만큼씩 URL로 인코딩된 문자열로 변환합니다.</summary>
      <returns>인코딩된 문자열입니다.</returns>
      <param name="value">인코딩할 바이트 배열입니다.</param>
      <param name="offset">인코딩할 바이트 배열의 시작 위치입니다.</param>
      <param name="count">인코딩할 바이트 수입니다.</param>
    </member>
    <member name="T:System.Text.RegularExpressions.Capture">
      <summary>단일 하위 식 캡처의 결과를 나타냅니다. </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Index">
      <summary>원래 문자열에서 캡처된 부분 문자열의 첫째 문자를 찾은 위치입니다.</summary>
      <returns>원래 문자열에서 캡처된 부분 문자열을 찾은 0부터 시작하는 시작 위치입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Length">
      <summary>캡처된 부분 문자열의 길이입니다.</summary>
      <returns>캡처된 부분 문자열의 길이입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Capture.ToString">
      <summary>입력 문자열에서 캡처된 부분 문자열을 가져옵니다.</summary>
      <returns>일치 항목으로 캡처한 실제 부분 문자열입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Value">
      <summary>입력 문자열에서 캡처된 부분 문자열을 가져옵니다.</summary>
      <returns>일치 항목으로 캡처한 실제 부분 문자열입니다.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.CaptureCollection">
      <summary>단일 캡처링 그룹에서 만든 캡처 집합을 나타냅니다. </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Array,System.Int32)">
      <summary>지정된 인덱스에서 시작하여 지정된 배열에 컬렉션의 요소를 모두 복사합니다.</summary>
      <param name="array">컬렉션을 복사할 대상 배열입니다. </param>
      <param name="arrayIndex">대상 배열에서 복사를 시작할 위치입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" />가 <paramref name="array" />의 범위 밖인 경우-또는-<paramref name="arrayIndex" />에 <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" />를 더한 값이 <paramref name="array" />의 범위 밖인 경우 </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Count">
      <summary>그룹에서 캡처한 부분 문자열의 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.CaptureCollection" />의 항목 수입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 제공합니다.</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.CaptureCollection" /> 내의 <see cref="T:System.Text.RegularExpressions.Capture" /> 개체가 모두 포함되어 있는 개체입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsReadOnly">
      <summary>컬렉션이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>항상 true입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsSynchronized">
      <summary>해당 컬렉션에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>항상 false입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)">
      <summary>컬렉션의 개별 멤버를 가져옵니다.</summary>
      <returns>컬렉션의 위치 <paramref name="i" />에서 캡처된 부분 문자열입니다.</returns>
      <param name="i">캡처 컬렉션의 인덱스입니다. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" />가 0보다 작거나 <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" />보다 큰 경우 </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.SyncRoot">
      <summary>컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Group">
      <summary>단일 캡처링 그룹의 결과를 나타냅니다.</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Captures">
      <summary>안쪽-왼쪽 우선 순서로 캡처링 그룹을 사용하여 일치시킨 모든 캡처의 컬렉션을 가져옵니다. 정규식을 <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> 옵션으로 수정한 경우에는 안쪽-오른쪽 우선 순서로 가져올 수 있습니다.컬렉션에는 0이상의 항목이 있을 수 있습니다.</summary>
      <returns>그룹을 사용하여 일치시킨 부분 문자열의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Success">
      <summary>일치 작업이 성공적이었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>연산이 성공하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.GroupCollection">
      <summary>단일 일치 항목의 캡처된 그룹 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)">
      <summary>지정된 인덱스에서 시작하여 지정된 배열에 컬렉션의 요소를 모두 복사합니다.</summary>
      <param name="array">컬렉션을 복사할 대상 배열입니다. </param>
      <param name="arrayIndex">대상 배열에서 복사를 시작할 위치입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이 null입니다.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" />가 <paramref name="array" />의 범위 밖인 경우-또는-<paramref name="arrayIndex" />에 <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" />를 더한 값이 <paramref name="array" />의 범위 밖인 경우</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Count">
      <summary>컬렉션의 그룹 수를 반환합니다.</summary>
      <returns>컬렉션의 그룹 수입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator">
      <summary>컬렉션 전체에서 반복할 수 있는 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 안에 모든 <see cref="T:System.Text.RegularExpressions.Group" /> 개체를 포함하는 개체입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly">
      <summary>컬렉션이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.GroupCollection" />이 읽기 전용이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized">
      <summary>
        <see cref="T:System.Text.RegularExpressions.GroupCollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>항상 false입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)">
      <summary>정수 인덱스에 따라 컬렉션의 멤버에 대한 액세스를 가능하게 합니다.</summary>
      <returns>
        <paramref name="groupnum" />으로 지정한 컬렉션의 멤버입니다.</returns>
      <param name="groupnum">검색할 컬렉션 멤버의 인덱스(0부터 시작)입니다. </param>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)">
      <summary>문자열 인덱스에 따라 컬렉션의 멤버에 대한 액세스를 가능하게 합니다.</summary>
      <returns>
        <paramref name="groupname" />으로 지정한 컬렉션의 멤버입니다.</returns>
      <param name="groupname">캡처링 그룹의 이름입니다.</param>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.SyncRoot">
      <summary>
        <see cref="T:System.Text.RegularExpressions.GroupCollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>동기화할 <see cref="T:System.Text.RegularExpressions.Match" /> 개체의 복사본입니다.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Match">
      <summary>정규식으로 찾은 단일 일치 항목의 결과를 나타냅니다.</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Empty">
      <summary>빈 그룹을 가져옵니다.일치 항목을 찾지 못하는 모든 경우에는 이 빈 일치 항목이 반환됩니다.</summary>
      <returns>빈 <see cref="T:System.Text.RegularExpressions.Match" />입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Groups">
      <summary>정규식으로 일치시킨 그룹의 컬렉션을 가져옵니다.</summary>
      <returns>해당 패턴으로 일치시킨 문자 그룹입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.NextMatch">
      <summary>마지막 일치 항목이 끝나는 위치(마지막으로 일치한 문자 다음 문자)에서 시작하여 다음 일치 항목에 대한 결과와 함께 새로운 <see cref="T:System.Text.RegularExpressions.Match" /> 개체를 반환합니다.</summary>
      <returns>다음 정규식 일치 항목입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Result(System.String)">
      <summary>지정된 바꾸기 패턴의 확장을 반환합니다. </summary>
      <returns>
        <paramref name="replacement" /> 매개 변수의 확장 버전입니다.</returns>
      <param name="replacement">사용할 바꾸기 패턴입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replacement" />이 null입니다.</exception>
      <exception cref="T:System.NotSupportedException">이 패턴에 대해 확장이 허용되지 않는 경우</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchCollection">
      <summary>정규식 패턴을 입력 문자열에 반복적으로 적용하여 찾은 성공적인 일치 집합을 나타냅니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
      <summary>지정된 인덱스에서 시작하여 지정된 배열에 컬렉션의 요소를 모두 복사합니다.</summary>
      <param name="array">컬렉션을 복사할 대상 배열입니다. </param>
      <param name="arrayIndex">배열 내에서 복사를 시작할 위치입니다. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원 배열일 경우</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" />가 <paramref name="array" />의 범위 밖인 경우-또는-<paramref name="arrayIndex" />에 <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" />를 더한 값이 <paramref name="array" />의 범위 밖인 경우</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Count">
      <summary>일치하는 항목의 개수를 가져옵니다.</summary>
      <returns>일치하는 항목의 개수입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
      <summary>열거자를 <see cref="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)" />과 같은 순서로 제공합니다.</summary>
      <returns>MatchCollection 내의 Match 개체가 모두 포함되어 있는<see cref="T:System.Collections.IEnumerator" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsReadOnly">
      <summary>컬렉션이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 속성의 값은 항상 true입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
      <summary>해당 컬렉션에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 속성의 값은 항상 false입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
      <summary>컬렉션의 개별 멤버를 가져옵니다.</summary>
      <returns>컬렉션의 위치 <paramref name="i" />에서 캡처된 부분 문자열입니다.</returns>
      <param name="i">Match 컬렉션의 인덱스입니다. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" />가 0보다 작거나 <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" />보다 크거나 같은 경우 </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
      <summary>컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.이 속성은 항상 개체 자체를 반환합니다.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchEvaluator">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" /> 메서드 작업을 하는 동안 정규식을 사용하여 일치 항목을 찾을 때마다 호출되는 메서드를 나타냅니다.</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 대리자가 나타내는 메서드에서 반환된 문자열입니다.</returns>
      <param name="match">
        <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" /> 메서드 작업을 하는 동안 단일 정규식 일치 항목을 나타내는 <see cref="T:System.Text.RegularExpressions.Match" /> 개체입니다. </param>
    </member>
    <member name="T:System.Text.RegularExpressions.Regex">
      <summary>변경할 수 없는 정규식을 나타냅니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor">
      <summary>
        <see cref="T:System.Text.RegularExpressions.Regex" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String)">
      <summary>지정된 정규식에 대해 <see cref="T:System.Text.RegularExpressions.Regex" /> 클래스의 새 인스턴스를 초기화하고 컴파일합니다.</summary>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다. </param>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" />이 null입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>패턴을 수정할 수 있는 옵션을 사용하여 <see cref="T:System.Text.RegularExpressions.Regex" /> 클래스의 새 인스턴스를 지정된 정규식에 대해 초기화하고 컴파일합니다.</summary>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다. </param>
      <param name="options">열거형 값의 비트 조합입니다. </param>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우 </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" />에 잘못된 플래그가 포함된 경우</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>패턴을 수정하는 옵션 및 제한 시간이 끝나기 전에 패턴 일치 메서드가 검색을 시도하는 시간을 지정하는 값을 사용하여 지정된 정규식에 대한 <see cref="T:System.Text.RegularExpressions.Regex" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <param name="options">정규식을 수정하는 열거형 값의 비트 조합입니다.</param>
      <param name="matchTimeout">시간 제한 간격, 즉 메서드의 제한 시간이 초과되지 않아야 한다는 것을 나타내는 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />입니다.</param>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" />가 유효한 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값이 아닌 경우-또는-<paramref name="matchTimeout" />이 음수이거나 약 24일보다 큰 경우</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.CacheSize">
      <summary>컴파일된 정규식에 대한 현재 정적 캐시의 최대 엔트리 수를 가져오거나 설정합니다.</summary>
      <returns>현재 정적 캐시의 최대 엔트리 수입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">set 작업의 값이 0보다 작은 경우</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capsize">
      <summary>정규식 엔진에서 내부적으로 사용됩니다. </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capslist">
      <summary>정규식 엔진에서 내부적으로 사용됩니다. </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Escape(System.String)">
      <summary>문자(\, *, +, ?, |, {, [, (,), ^, $,., # 및 공백)의 최소 집합을 자체 이스케이프 코드로 대체하여 이스케이프합니다.이렇게 하면 정규식 엔진에서 이러한 문자를 메타문자가 아닌 문자 그대로 해석합니다.</summary>
      <returns>메타문자가 이스케이프 서식으로 변환된 문자열입니다.</returns>
      <param name="str">변환할 텍스트가 포함된 입력 문자열입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" />이 null입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNames">
      <summary>정규식에 대한 캡처링 그룹 이름의 배열을 반환합니다.</summary>
      <returns>그룹 이름의 문자열 배열입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNumbers">
      <summary>배열 내의 그룹 이름에 해당하는 캡처링 그룹 번호의 배열을 반환합니다.</summary>
      <returns>그룹 번호의 정수 배열입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)">
      <summary>지정된 그룹 번호에 해당하는 그룹 이름을 가져옵니다.</summary>
      <returns>지정된 그룹 번호에 연결되어 있는 그룹 이름이 포함된 문자열입니다.<paramref name="i" />에 해당하는 그룹 이름이 없는 경우 이 메서드는 <see cref="F:System.String.Empty" />를 반환합니다.</returns>
      <param name="i">해당 그룹 이름으로 변환할 그룹 번호입니다. </param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)">
      <summary>지정된 그룹 이름에 해당하는 그룹 번호를 반환합니다.</summary>
      <returns>지정된 그룹 이름에 해당하는 그룹 번호이거나, <paramref name="name" />이 유효한 그룹 이름이 아닌 경우 -1입니다.</returns>
      <param name="name">해당 그룹 번호로 변환할 그룹 이름입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />이 null입니다.</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout">
      <summary>패턴 일치 작업이 제한 시간이 초과되지 않아야 한다는 것을 지정합니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)">
      <summary>
        <see cref="T:System.Text.RegularExpressions.Regex" /> 생성자에 지정된 정규식이 입력 문자열에서 일치하는 항목을 찾는지 여부를 나타냅니다.</summary>
      <returns>정규식이 일치 항목을 찾으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)">
      <summary>
        <see cref="T:System.Text.RegularExpressions.Regex" /> 생성자에 지정된 정규식이 입력 문자열의 지정된 시작 위치부터 일치하는 항목을 찾는지 여부를 나타냅니다.</summary>
      <returns>정규식이 일치 항목을 찾으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다. </param>
      <param name="startat">검색을 시작할 문자 위치입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" />이 0보다 작거나 <paramref name="input" />의 길이보다 큰 경우</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)">
      <summary>정규식이 <paramref name="pattern" /> 매개 변수에 지정된 정규식을 사용하여 입력 문자열에서 일치하는 항목을 찾는지 여부를 나타냅니다.</summary>
      <returns>정규식이 일치 항목을 찾으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다. </param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다. </param>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.-또는-<paramref name="pattern" />이 null입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>정규식이 <paramref name="pattern" /> 매개 변수에 지정된 정규식 및 <paramref name="options" /> 매개 변수에 제공된 일치 옵션을 사용하여 입력 문자열에서 일치하는 항목을 찾는지 여부를 나타냅니다.</summary>
      <returns>정규식이 일치 항목을 찾으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다. </param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다. </param>
      <param name="options">열거형 값의 비트 조합입니다. </param>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.-또는-<paramref name="pattern" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" />가 유효한 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값이 아닌 경우</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>지정된 정규식이 지정된 일치 옵션 및 시간 제한 간격을 사용하여 지정된 입력 문자열에서 일치하는 항목을 찾을 것인지 여부를 나타냅니다.</summary>
      <returns>정규식이 일치 항목을 찾으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <param name="options">일치 옵션을 제공하는 열거형 값의 비트 조합입니다.</param>
      <param name="matchTimeout">시간 제한 간격, 즉 메서드의 제한 시간이 초과되지 않아야 한다는 것을 나타내는 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />입니다.</param>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="pattern" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" />가 유효한 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값이 아닌 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간 제한이 초과되었습니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String)">
      <summary>지정된 입력 문자열에서 <see cref="T:System.Text.RegularExpressions.Regex" /> 생성자에 지정된 정규식의 처음 발견되는 항목을 검색합니다.</summary>
      <returns>일치에 대한 정보가 들어 있는 개체입니다. </returns>
      <param name="input">일치 항목을 검색할 문자열입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)">
      <summary>지정된 입력 문자열 시작 위치를 사용하여 입력 문자열에서 정규식의 처음 발견되는 항목을 검색합니다.</summary>
      <returns>일치에 대한 정보가 들어 있는 개체입니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다. </param>
      <param name="startat">검색을 시작할 문자 위치(0부터 시작)입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" />이 0보다 작거나 <paramref name="input" />의 길이보다 큰 경우</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)">
      <summary>지정된 입력 문자열 시작 위치 및 입력 문자열 길이를 사용하여 입력 문자열에서 정규식의 처음 발견되는 항목을 검색합니다.</summary>
      <returns>일치에 대한 정보가 들어 있는 개체입니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다. </param>
      <param name="beginning">입력 문자열에서 검색할 맨 왼쪽 위치를 정의하는 문자 위치(0부터 시작)입니다.. </param>
      <param name="length">검색에 포함시킬 부분 문자열의 문자 수입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="beginning" />이 0보다 작거나 <paramref name="input" />의 길이보다 큰 경우-또는-<paramref name="length" />이 0보다 작거나 <paramref name="input" />의 길이보다 큰 경우-또는-<paramref name="beginning" />+<paramref name="length" />– 1은 <paramref name="input" />의 범위를 벗어나는 위치를 식별합니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)">
      <summary>지정된 입력 문자열에서 <paramref name="pattern" /> 매개 변수에 지정된 정규식의 처음 발견되는 항목을 검색합니다.</summary>
      <returns>일치에 대한 정보가 들어 있는 개체입니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다. </param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다. </param>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.-또는-<paramref name="pattern" />이 null입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>입력 문자열에서 <paramref name="pattern" /> 매개 변수에 지정된 일치 옵션을 사용하여 <paramref name="options" /> 매개 변수에 지정된 정규식의 처음 발견된 항목을 검색합니다.</summary>
      <returns>일치에 대한 정보가 들어 있는 개체입니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다. </param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다. </param>
      <param name="options">열거형 값의 비트 조합입니다. </param>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.-또는-<paramref name="pattern" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" />가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닌 경우</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>지정된 일치 옵션 및 시간 제한 간격을 사용하여 입력 문자열에서 첫 번째 지정된 정규식을 검색합니다.</summary>
      <returns>일치에 대한 정보가 들어 있는 개체입니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <param name="options">일치 옵션을 제공하는 열거형 값의 비트 조합입니다.</param>
      <param name="matchTimeout">시간 제한 간격, 즉 메서드의 제한 시간이 초과되지 않아야 한다는 것을 나타내는 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />입니다.</param>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="pattern" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" />가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닌 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간 제한이 초과되었습니다.시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String)">
      <summary>지정된 입력 문자열에서 정규식을 모두 검색합니다.</summary>
      <returns>검색에서 찾은 <see cref="T:System.Text.RegularExpressions.Match" /> 개체의 컬렉션입니다.일치 항목을 찾을 수 없으면 메서드가 빈 컬렉션 개체를 반환합니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)">
      <summary>문자열의 지정된 시작 위치에서 시작하여 지정된 입력 문자열에서 정규식을 모두 검색합니다.</summary>
      <returns>검색에서 찾은 <see cref="T:System.Text.RegularExpressions.Match" /> 개체의 컬렉션입니다.일치 항목을 찾을 수 없으면 메서드가 빈 컬렉션 개체를 반환합니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다. </param>
      <param name="startat">입력 문자열에서 검색을 시작할 문자 위치입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" />이 0보다 작거나 <paramref name="input" />의 길이보다 큰 경우</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)">
      <summary>지정된 입력 문자열에서 <paramref name="pattern" /> 매개 변수에 지정된 정규식을 모두 검색합니다.</summary>
      <returns>검색에서 찾은 <see cref="T:System.Text.RegularExpressions.Match" /> 개체의 컬렉션입니다.일치 항목을 찾을 수 없으면 메서드가 빈 컬렉션 개체를 반환합니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다. </param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다. </param>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.-또는-<paramref name="pattern" />이 null입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>지정된 입력 문자열에서 <paramref name="pattern" /> 매개 변수에 지정된 일치 옵션을 사용하여 <paramref name="options" /> 매개 변수에 지정된 정규식을 모두 검색합니다.</summary>
      <returns>검색에서 찾은 <see cref="T:System.Text.RegularExpressions.Match" /> 개체의 컬렉션입니다.일치 항목을 찾을 수 없으면 메서드가 빈 컬렉션 개체를 반환합니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다. </param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다. </param>
      <param name="options">열거형 값의 비트 조합입니다. </param>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.-또는-<paramref name="pattern" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" />가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닌 경우</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>지정된 일치 옵션 및 시간 제한 간격을 사용하여 지정된 입력 문자열에서 지정된 정규식을 모두 검색합니다.</summary>
      <returns>검색에서 찾은 <see cref="T:System.Text.RegularExpressions.Match" /> 개체의 컬렉션입니다.일치 항목을 찾을 수 없으면 메서드가 빈 컬렉션 개체를 반환합니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <param name="options">일치 옵션을 지정하는 열거형 값의 비트 조합입니다.</param>
      <param name="matchTimeout">시간 제한 간격, 즉 메서드의 제한 시간이 초과되지 않아야 한다는 것을 나타내는 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />입니다.</param>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.MatchTimeout">
      <summary>현재 인스턴스의 시간 제한 간격을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" />이 발생되기 전 패턴 일치 작업에서 경과할 수 있는 최대 시간 간격입니다. 제한 시간을 사용할 수 없는 경우에는 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Options">
      <summary>
        <see cref="T:System.Text.RegularExpressions.Regex" /> 생성자로 전달된 옵션을 반환합니다.</summary>
      <returns>Regex 생성자로 전달된 <paramref name="options" /> 매개 변수입니다.</returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.pattern">
      <summary>정규식 엔진에서 내부적으로 사용됩니다. </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)">
      <summary>지정된 입력 문자열 내에서 정규식 패턴과 일치하는 모든 문자열을 지정된 대체 문자열로 바꿉니다. </summary>
      <returns>입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다. </param>
      <param name="replacement">대체 문자열입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.-또는-<paramref name="replacement" />이 null입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)">
      <summary>지정된 입력 문자열 내에서 정규식 패턴과 일치하는 지정된 최대 개수의 문자열을 지정된 대체 문자열로 바꿉니다. </summary>
      <returns>입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다. </param>
      <param name="replacement">대체 문자열입니다. </param>
      <param name="count">바꾸기를 하는 최대 횟수입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.-또는-<paramref name="replacement" />이 null입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>지정된 입력 부분 문자열 내에서 정규식 패턴과 일치하는 지정된 최대 개수의 문자열을 지정된 대체 문자열로 바꿉니다. </summary>
      <returns>입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다. </param>
      <param name="replacement">대체 문자열입니다. </param>
      <param name="count">바꾸기를 하는 최대 횟수입니다. </param>
      <param name="startat">입력 문자열에서 검색을 시작할 문자 위치입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.-또는-<paramref name="replacement" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" />이 0보다 작거나 <paramref name="input" />의 길이보다 큰 경우</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">
      <summary>지정된 입력 문자열 내에서 지정된 정규식과 일치하는 모든 문자열을 지정된 대체 문자열로 바꿉니다. </summary>
      <returns>입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다. </param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다. </param>
      <param name="replacement">대체 문자열입니다. </param>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.-또는-<paramref name="pattern" />이 null입니다.-또는-<paramref name="replacement" />이 null입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>지정된 입력 문자열 내에서 지정된 정규식과 일치하는 모든 문자열을 지정된 대체 문자열로 바꿉니다.지정한 옵션에 따라 일치 작업이 수정됩니다.</summary>
      <returns>입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다. </param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다. </param>
      <param name="replacement">대체 문자열입니다. </param>
      <param name="options">열거형 값의 비트 조합입니다. </param>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.-또는-<paramref name="pattern" />이 null입니다.-또는-<paramref name="replacement" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" />가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닌 경우</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>지정된 입력 문자열 내에서 지정된 정규식과 일치하는 모든 문자열을 지정된 대체 문자열로 바꿉니다.추가 매개 변수는 일치 항목이 없는 경우 일치 작업 및 시간 제한 간격을 수정하는 옵션을 지정합니다.</summary>
      <returns>입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <param name="replacement">대체 문자열입니다.</param>
      <param name="options">일치 옵션을 제공하는 열거형 값의 비트 조합입니다.</param>
      <param name="matchTimeout">시간 제한 간격, 즉 메서드의 제한 시간이 초과되지 않아야 한다는 것을 나타내는 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />입니다.</param>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="pattern" /> 또는 <paramref name="replacement" />이 null인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" />가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닌 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간 제한이 초과되었습니다.시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>지정된 입력 문자열 내에서 지정된 정규식과 일치하는 모든 문자열을 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 대리자가 반환한 문자열로 바꿉니다.</summary>
      <returns>입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다. </param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다. </param>
      <param name="evaluator">각각의 일치 항목을 검사하여 원래 일치하는 문자열 또는 대체 문자열을 반환하는 사용자 지정 메서드입니다.</param>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.-또는-<paramref name="pattern" />이 null입니다.-또는-<paramref name="evaluator" />이 null입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
      <summary>지정된 입력 문자열 내에서 지정된 정규식과 일치하는 모든 문자열을 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 대리자가 반환한 문자열로 바꿉니다.지정한 옵션에 따라 일치 작업이 수정됩니다.</summary>
      <returns>입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다. </param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다. </param>
      <param name="evaluator">각각의 일치 항목을 검사하여 원래 일치하는 문자열 또는 대체 문자열을 반환하는 사용자 지정 메서드입니다. </param>
      <param name="options">열거형 값의 비트 조합입니다. </param>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.-또는-<paramref name="pattern" />이 null입니다.-또는-<paramref name="evaluator" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" />가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닌 경우</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>지정된 입력 문자열 내에서 지정된 정규식과 일치하는 모든 부분 문자열을 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 대리자가 반환한 문자열로 바꿉니다.추가 매개 변수는 일치 항목이 없는 경우 일치 작업 및 시간 제한 간격을 수정하는 옵션을 지정합니다.</summary>
      <returns>입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <param name="evaluator">각각의 일치 항목을 검사하여 원래 일치하는 문자열 또는 대체 문자열을 반환하는 사용자 지정 메서드입니다.</param>
      <param name="options">일치 옵션을 제공하는 열거형 값의 비트 조합입니다.</param>
      <param name="matchTimeout">시간 제한 간격, 즉 메서드의 제한 시간이 초과되지 않아야 한다는 것을 나타내는 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />입니다.</param>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="pattern" /> 또는 <paramref name="evaluator" />이 null인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" />가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닌 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간 제한이 초과되었습니다.시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>지정된 입력 문자열 내에서 지정된 정규식과 일치하는 모든 문자열을 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 대리자가 반환한 문자열로 바꿉니다.</summary>
      <returns>입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다. </param>
      <param name="evaluator">각각의 일치 항목을 검사하여 원래 일치하는 문자열 또는 대체 문자열을 반환하는 사용자 지정 메서드입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.-또는-<paramref name="evaluator" />이 null입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)">
      <summary>지정된 입력 문자열 내에서 정규식 패턴과 일치하는 지정된 최대 개수의 문자열을 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 대리자가 반환한 문자열로 바꿉니다.</summary>
      <returns>입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다. </param>
      <param name="evaluator">각각의 일치 항목을 검사하여 원래 일치하는 문자열 또는 대체 문자열을 반환하는 사용자 지정 메서드입니다.</param>
      <param name="count">바꾸기를 하는 최대 횟수입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.-또는-<paramref name="evaluator" />이 null입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)">
      <summary>지정된 입력 부분 문자열 내에서 정규식 패턴과 일치하는 지정된 최대 개수의 문자열을 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 대리자가 반환한 문자열로 바꿉니다.</summary>
      <returns>입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다.</returns>
      <param name="input">일치 항목을 검색할 문자열입니다. </param>
      <param name="evaluator">각각의 일치 항목을 검사하여 원래 일치하는 문자열 또는 대체 문자열을 반환하는 사용자 지정 메서드입니다.</param>
      <param name="count">바꾸기를 하는 최대 횟수입니다. </param>
      <param name="startat">입력 문자열에서 검색을 시작할 문자 위치입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.-또는-<paramref name="evaluator" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" />이 0보다 작거나 <paramref name="input" />의 길이보다 큰 경우</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.RightToLeft">
      <summary>정규식이 오른쪽에서 왼쪽으로 검색하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>정규식을 사용하여 오른쪽에서 왼쪽으로 검색하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.roptions">
      <summary>정규식 엔진에서 내부적으로 사용됩니다. </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String)">
      <summary>
        <see cref="T:System.Text.RegularExpressions.Regex" /> 생성자에 지정된 정규식 패턴으로 정의된 위치에서 지정된 입력 문자열을 분할합니다.</summary>
      <returns>문자열 배열입니다.</returns>
      <param name="input">분할할 문자열입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)">
      <summary>지정된 입력 문자열을 <see cref="T:System.Text.RegularExpressions.Regex" /> 생성자에서 지정된 정규식에 의해 정의된 위치에서 지정된 최대 수만큼 분할합니다.</summary>
      <returns>문자열 배열입니다.</returns>
      <param name="input">분할할 문자열입니다. </param>
      <param name="count">분할할 수 있는 최대 횟수입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)">
      <summary>지정된 입력 문자열을 <see cref="T:System.Text.RegularExpressions.Regex" /> 생성자에서 지정된 정규식에 의해 정의된 위치에서 지정된 최대 수만큼 분할합니다.입력 문자열에서 지정된 문자 위치부터 정규식 패턴을 검색합니다.</summary>
      <returns>문자열 배열입니다.</returns>
      <param name="input">분할할 문자열입니다. </param>
      <param name="count">분할할 수 있는 최대 횟수입니다. </param>
      <param name="startat">입력 문자열에서 검색을 시작할 문자 위치입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" />이 0보다 작거나 <paramref name="input" />의 길이보다 큰 경우</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)">
      <summary>입력 문자열을 정규식 패턴에 의해 정의된 위치에서 분할합니다.</summary>
      <returns>문자열 배열입니다.</returns>
      <param name="input">분할할 문자열입니다. </param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다. </param>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.-또는-<paramref name="pattern" />이 null입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>지정된 입력 문자열을 정규식 패턴에 의해 정의된 위치에서 분할합니다.지정한 옵션에 따라 일치 작업이 수정됩니다.</summary>
      <returns>문자열 배열입니다.</returns>
      <param name="input">분할할 문자열입니다. </param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다. </param>
      <param name="options">열거형 값의 비트 조합입니다. </param>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.-또는-<paramref name="pattern" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" />가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닌 경우</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>입력 문자열을 지정된 정규식 패턴에 의해 정의된 위치에서 부분 문자열로 이루어진 배열로 분할합니다.추가 매개 변수는 일치 항목이 없는 경우 일치 작업 및 시간 제한 간격을 수정하는 옵션을 지정합니다.</summary>
      <returns>문자열 배열입니다.</returns>
      <param name="input">분할할 문자열입니다.</param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <param name="options">일치 옵션을 제공하는 열거형 값의 비트 조합입니다.</param>
      <param name="matchTimeout">시간 제한 간격, 즉 메서드의 제한 시간이 초과되지 않아야 한다는 것을 나타내는 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />입니다.</param>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="pattern" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" />가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닌 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간 제한이 초과되었습니다.시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ToString">
      <summary>Regex 생성자로 전달된 정규식 패턴을 반환합니다.</summary>
      <returns>Regex 생성자로 전달된 <paramref name="pattern" /> 매개 변수입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Unescape(System.String)">
      <summary>입력 문자열에서 이스케이프 서식이 추가된 문자를 원래대로 되돌립니다.</summary>
      <returns>이스케이프된 문자가 이스케이프 해제된 형식으로 변환된 문자열입니다.</returns>
      <param name="str">변환할 텍스트가 포함된 입력 문자열입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" />이 null입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionR">
      <summary>정규식 엔진에서 내부적으로 사용됩니다.</summary>
      <returns>
        <see cref="P:System.Text.RegularExpressions.Regex.Options" /> 속성에 <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> 옵션이 포함되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
      <summary>정규식 패턴 일치 메서드의 실행 시간이 시간 제한 간격을 초과하는 경우에 발생되는 예외입니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor">
      <summary>시스템 제공 메시지를 사용하여 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String)">
      <summary>지정된 메시지 문자열을 사용하여 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외를 설명하는 문자열입니다.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 근본 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외를 설명하는 문자열입니다.</param>
      <param name="inner">현재 예외의 원인인 예외입니다.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.String,System.TimeSpan)">
      <summary>정규식 패턴, 입력 텍스트 및 시간 제한 간격에 대한 정보를 사용하여 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="regexInput">시간이 초과될 때 정규식 엔진에서 처리한 입력 텍스트입니다.</param>
      <param name="regexPattern">시간이 초과될 때 정규식 엔진에서 사용한 패턴입니다.</param>
      <param name="matchTimeout">시간 제한 간격입니다.</param>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Input">
      <summary>[보안상 중요] 시간이 초과되었을 때 정규식 엔진이 처리 중이던 입력 텍스트를 가져옵니다.</summary>
      <returns>정규식 입력 텍스트입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout">
      <summary>[보안상 중요] 정규식 일치에 대한 시간 제한 간격을 가져옵니다.</summary>
      <returns>시간 제한 간격입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Pattern">
      <summary>[보안상 중요] 시간이 초과되었을 때 일치 작업에서 사용되었던 정규식 패턴을 가져옵니다.</summary>
      <returns>정규식 패턴입니다.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexOptions">
      <summary>정규식 옵션을 설정하는 데 사용하는 열거형 값을 제공합니다.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Compiled">
      <summary>정규식이 어셈블리로 컴파일되도록 지정합니다.이렇게 하면 실행은 빨라지지만 시작 시간은 늘어납니다.<see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> 메서드를 호출할 때는 <see cref="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" /> 속성에 이 값을 할당하지 말아야 합니다.Windows Phone에만 제공되지만 지원되지는 않습니다.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant">
      <summary>언어의 문화권 차이점이 무시되도록 지정합니다.일반적으로 정규식 엔진은 현재 문화권의 규칙을 기준으로 문자열을 비교합니다.<see cref="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant" /> 옵션이 지정된 경우에는 고정 문화권의 규칙을 사용합니다.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ECMAScript">
      <summary>해당 식에 ECMAScript 규격 동작을 사용 가능하게 합니다.이 값은 <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase" /> 및 <see cref="F:System.Text.RegularExpressions.RegexOptions.Multiline" /> 값과 함께만 사용할 수 있습니다.이 값을 다른 값과 함께 사용하면 예외가 발생합니다.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ExplicitCapture">
      <summary>(?&lt;name&gt;…) 형식의 명시적으로 명명되거나 번호가 매겨진 그룹만 유효한 캡처가 되도록 지정합니다.이렇게 하면 명명되지 않은 괄호가 (?:¡K) 식과 같이 구문적으로 어색한 부분 없이 비캡처링 그룹의 역할을 할 수 있습니다.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase">
      <summary>대/소문자를 구분하지 않고 일치 항목을 찾도록 지정합니다.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace">
      <summary>이스케이프되지 않은 공백을 패턴에서 제거하고 주석을 #으로 표시할 수 있게 합니다.그러나 문자 클래스의 공백은 <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace" /> 값의 영향을 받거나 제거되지 않습니다.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Multiline">
      <summary>여러 줄 모드입니다.전체 문자열의 시작과 끝뿐만 아니라 모든 줄의 시작과 끝에서 각각 일치하도록 ^과 $의 의미를 변경합니다.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.None">
      <summary>옵션이 설정되지 않도록 지정합니다.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.RightToLeft">
      <summary>왼쪽에서 오른쪽이 아닌 오른쪽에서 왼쪽으로 검색이 진행되도록 지정합니다.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Singleline">
      <summary>한 줄 모드를 지정합니다.\n을 제외한 모든 문자가 아닌 \n을 포함한 모든 문자와 일치하도록 점(.)의 의미를 변경합니다.</summary>
    </member>
    <member name="T:System.Threading.Barrier">
      <summary>여러 작업이 여러 단계에 걸쳐 특정 알고리즘에서 병렬로 함께 작동할 수 있도록 합니다.</summary>
    </member>
    <member name="M:System.Threading.Barrier.#ctor(System.Int32)">
      <summary>
        <see cref="T:System.Threading.Barrier" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="participantCount">참여 스레드의 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" />가 0보다 작거나 32,767보다 큰 경우</exception>
    </member>
    <member name="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})">
      <summary>
        <see cref="T:System.Threading.Barrier" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="participantCount">참여 스레드의 수입니다.</param>
      <param name="postPhaseAction">각 단계 후에 실행될 <see cref="T:System.Action`1" />입니다. 아무 작업도 수행되지 않음을 나타내려는 경우 null(Visual Basic에서는 Nothing)이 전달될 수 있습니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" />가 0보다 작거나 32,767보다 큰 경우</exception>
    </member>
    <member name="M:System.Threading.Barrier.AddParticipant">
      <summary>추가 참가자가 있음을 <see cref="T:System.Threading.Barrier" />에 알립니다.</summary>
      <returns>새 참가자가 처음으로 참여할 장벽의 단계 번호입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">현재 인스턴스가 이미 삭제된 경우</exception>
      <exception cref="T:System.InvalidOperationException">참가자를 추가하면 해당 장벽 참가자 수가 32,767을 초과하는 경우-또는-이 메서드가 사후 단계 작업 내에서 호출된 경우</exception>
    </member>
    <member name="M:System.Threading.Barrier.AddParticipants(System.Int32)">
      <summary>추가 참가자가 있음을 <see cref="T:System.Threading.Barrier" />에 알립니다.</summary>
      <returns>새 참가자가 처음으로 참여할 장벽의 단계 번호입니다.</returns>
      <param name="participantCount">장벽에 추가할 추가 참가자의 수입니다.</param>
      <exception cref="T:System.ObjectDisposedException">현재 인스턴스가 이미 삭제된 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" />가 0보다 작은 경우-또는-<paramref name="participantCount" /> 참가자를 추가하면 해당 장벽 참가자 수가 32,767을 초과하는 경우</exception>
      <exception cref="T:System.InvalidOperationException">이 메서드가 사후 단계 작업 내에서 호출된 경우</exception>
    </member>
    <member name="P:System.Threading.Barrier.CurrentPhaseNumber">
      <summary>장벽의 현재 단계 번호를 가져옵니다.</summary>
      <returns>장벽의 현재 단계 번호를 반환합니다.</returns>
    </member>
    <member name="M:System.Threading.Barrier.Dispose">
      <summary>
        <see cref="T:System.Threading.Barrier" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
      <exception cref="T:System.InvalidOperationException">이 메서드가 사후 단계 작업 내에서 호출된 경우</exception>
    </member>
    <member name="M:System.Threading.Barrier.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Threading.Barrier" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 true이고, 관리되지 않는 리소스만 해제하려면 false입니다.</param>
    </member>
    <member name="P:System.Threading.Barrier.ParticipantCount">
      <summary>장벽에 있는 참가자의 총 수를 가져옵니다.</summary>
      <returns>장벽에 있는 참가자의 총 수를 반환합니다.</returns>
    </member>
    <member name="P:System.Threading.Barrier.ParticipantsRemaining">
      <summary>현재 단계에서 아직 신호를 받지 않은 장벽의 참가자 수를 가져옵니다.</summary>
      <returns>현재 단계에서 아직 신호를 받지 않은 장벽의 참가자 수를 반환합니다.</returns>
    </member>
    <member name="M:System.Threading.Barrier.RemoveParticipant">
      <summary>참가자가 하나 감소함을 <see cref="T:System.Threading.Barrier" />에 알립니다.</summary>
      <exception cref="T:System.ObjectDisposedException">현재 인스턴스가 이미 삭제된 경우</exception>
      <exception cref="T:System.InvalidOperationException">해당 장벽에 이미 0 참가자가 있는 경우-또는-이 메서드가 사후 단계 작업 내에서 호출된 경우</exception>
    </member>
    <member name="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
      <summary>참가자가 감소함을 <see cref="T:System.Threading.Barrier" />에 알립니다.</summary>
      <param name="participantCount">장벽에서 제거할 추가 참가자의 수입니다.</param>
      <exception cref="T:System.ObjectDisposedException">현재 인스턴스가 이미 삭제된 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" />가 0보다 작은 경우</exception>
      <exception cref="T:System.InvalidOperationException">해당 장벽에 이미 0 참가자가 있는 경우-또는-이 메서드가 사후 단계 작업 내에서 호출된 경우 -또는-현재 참가자 수가 지정된 participantCount보다 작은 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">총 참가자 수가 지정된 <paramref name=" participantCount" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait">
      <summary>참가자가 <see cref="T:System.Threading.Barrier" />에 도달했다는 신호를 보내고 다른 모든 참가자도 장벽에 도달할 때까지 기다립니다.</summary>
      <exception cref="T:System.ObjectDisposedException">현재 인스턴스가 이미 삭제된 경우</exception>
      <exception cref="T:System.InvalidOperationException">메서드가 사후 단계 작업 내에서 호출되었거나, 현재 장벽에 0 참가자가 있거나, 장벽이 참가자로 등록된 것보다 많은 스레드로부터 신호를 받은 경우</exception>
      <exception cref="T:System.BarrierPostPhaseException">모든 참가 스레드가 SignalAndWait를 호출한 후에 장벽의 사후 단계 작업에서 예외가 발생하면 예외가 BarrierPostPhaseException에서 래핑되고 모든 참가 스레드에서 발생하는 경우</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Int32)">
      <summary>참가자가 <see cref="T:System.Threading.Barrier" />에 도달했다는 신호를 보내고 부호 있는 32비트 정수로 시간 제한을 측정하여 다른 모든 참가자도 장벽에 도달할 때까지 기다립니다.</summary>
      <returns>지정된 시간 내에 모든 참가자가 장벽에 도달했으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="millisecondsTimeout">대기할 시간(밀리초)이거나, 무기한 대기할 경우 <see cref="F:System.Threading.Timeout.Infinite" />(-1)입니다.</param>
      <exception cref="T:System.ObjectDisposedException">현재 인스턴스가 이미 삭제된 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" />이 무기한 시간 제한을 나타내는 -1 이외의 음수인 경우</exception>
      <exception cref="T:System.InvalidOperationException">메서드가 사후 단계 작업 내에서 호출되었거나, 현재 장벽에 0 참가자가 있거나, 장벽이 참가자로 등록된 것보다 많은 스레드로부터 신호를 받은 경우</exception>
      <exception cref="T:System.BarrierPostPhaseException">모든 참가 스레드가 SignalAndWait를 호출한 후에 장벽의 사후 단계 작업에서 예외가 발생하면 예외가 BarrierPostPhaseException에서 래핑되고 모든 참가 스레드에서 발생하는 경우</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
      <summary>참가자가 장벽에 도달했다는 신호를 보내고 <see cref="T:System.Threading.CancellationToken" />을 확인하면서 부호 있는 32비트 정수로 시간 제한을 측정하여 다른 모든 참가자도 장벽에 도달할 때까지 기다립니다.</summary>
      <returns>지정된 시간 내에 모든 참가자가 장벽에 도달했으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="millisecondsTimeout">대기할 시간(밀리초)이거나, 무기한 대기할 경우 <see cref="F:System.Threading.Timeout.Infinite" />(-1)입니다.</param>
      <param name="cancellationToken">확인할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" />이 취소되었습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">현재 인스턴스가 이미 삭제된 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" />이 무기한 시간 제한을 나타내는 -1 이외의 음수인 경우</exception>
      <exception cref="T:System.InvalidOperationException">메서드가 사후 단계 작업 내에서 호출되었거나, 현재 장벽에 0 참가자가 있거나, 장벽이 참가자로 등록된 것보다 많은 스레드로부터 신호를 받은 경우</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)">
      <summary>참가자가 <see cref="T:System.Threading.Barrier" />에 도달했다는 신호를 보내고 <see cref="T:System.Threading.CancellationToken" />을 확인하면서 다른 모든 참가자도 장벽에 도달할 때까지 기다립니다.</summary>
      <param name="cancellationToken">확인할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" />이 취소되었습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">현재 인스턴스가 이미 삭제된 경우</exception>
      <exception cref="T:System.InvalidOperationException">메서드가 사후 단계 작업 내에서 호출되었거나, 현재 장벽에 0 참가자가 있거나, 장벽이 참가자로 등록된 것보다 많은 스레드로부터 신호를 받은 경우</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)">
      <summary>참가자가 <see cref="T:System.Threading.Barrier" />에 도달했다는 신호를 보내고 <see cref="T:System.TimeSpan" />을 사용하여 시간 간격을 측정하여 다른 참가자도 장벽에 도달할 때까지 기다립니다.</summary>
      <returns>다른 모든 참가자가 장벽에 도달했으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="timeout">대기할 시간(밀리초)을 나타내는 <see cref="T:System.TimeSpan" />이거나, 무한 대기하도록 -1밀리초를 나타내는 <see cref="T:System.TimeSpan" />입니다.</param>
      <exception cref="T:System.ObjectDisposedException">현재 인스턴스가 이미 삭제된 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" />이 무기한 시간 제한을 나타내는 -1밀리초 이외의 음수이거나 시간 제한이 없거나, 32,767보다 큰 경우.</exception>
      <exception cref="T:System.InvalidOperationException">메서드가 사후 단계 작업 내에서 호출되었거나, 현재 장벽에 0 참가자가 있거나, 장벽이 참가자로 등록된 것보다 많은 스레드로부터 신호를 받은 경우</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>참가자가 <see cref="T:System.Threading.Barrier" />에 도달했다는 신호를 보내고 <see cref="T:System.Threading.CancellationToken" />을 확인하면서 <see cref="T:System.TimeSpan" />을 사용하여 시간 간격을 측정하여 다른 참가자도 장벽에 도달할 때까지 기다립니다.</summary>
      <returns>다른 모든 참가자가 장벽에 도달했으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="timeout">대기할 시간(밀리초)을 나타내는 <see cref="T:System.TimeSpan" />이거나, 무한 대기하도록 -1밀리초를 나타내는 <see cref="T:System.TimeSpan" />입니다.</param>
      <param name="cancellationToken">확인할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" />이 취소되었습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">현재 인스턴스가 이미 삭제된 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" />이 무기한 시간 제한을 나타내는 -1밀리초 이외의 음수인 경우</exception>
      <exception cref="T:System.InvalidOperationException">메서드가 사후 단계 작업 내에서 호출되었거나, 현재 장벽에 0 참가자가 있거나, 장벽이 참가자로 등록된 것보다 많은 스레드로부터 신호를 받은 경우</exception>
    </member>
    <member name="T:System.Threading.BarrierPostPhaseException">
      <summary>
        <see cref="T:System.Threading.Barrier" />의 사후 단계 작업이 실패할 경우 발생되는 예외입니다.</summary>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor">
      <summary>오류를 설명하는 시스템 제공 메시지를 사용하여 <see cref="T:System.Threading.BarrierPostPhaseException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.Exception)">
      <summary>지정된 내부 예외를 사용하여 <see cref="T:System.Threading.BarrierPostPhaseException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="innerException">현재 예외의 원인인 예외입니다.</param>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.String)">
      <summary>오류를 설명하는 지정된 메시지를 사용하여 <see cref="T:System.Threading.BarrierPostPhaseException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 근본 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Threading.BarrierPostPhaseException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다. </param>
      <param name="innerException">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 null이 아니면 현재 예외는 내부 예외를 처리하는 catch 블록에서 발생합니다. </param>
    </member>
    <member name="T:System.Threading.Semaphore">
      <summary>리소스 또는 리소스 풀에 동시에 액세스할 수 있는 스레드 수를 제한합니다. </summary>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32)">
      <summary>동시 엔트리의 최대 수를 지정하고, 선택적으로 일부 엔트리를 예약하여 <see cref="T:System.Threading.Semaphore" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="initialCount">세마포에 동시에 부여할 수 있는 초기 요청 수입니다.</param>
      <param name="maximumCount">세마포에 동시에 부여할 수 있는 최대 요청 수입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="initialCount" />가 <paramref name="maximumCount" />보다 큰 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumCount" />가 1보다 작은 경우-또는-<paramref name="initialCount" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)">
      <summary>[보안상 중요] 동시 엔트리의 최대 개수를 지정하고, 선택적으로 호출한 스레드에 일부 엔트리를 예약하고, 선택적으로 시스템 세마포 개체의 이름을 지정하여 <see cref="T:System.Threading.Semaphore" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="initialCount">세마포에 동시에 부여할 수 있는 초기 요청 수입니다. </param>
      <param name="maximumCount">세마포에 동시에 부여할 수 있는 최대 요청 수입니다.</param>
      <param name="name">명명된 시스템 세마포 개체의 이름입니다.</param>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)">
      <summary>[보안상 중요] 동시 엔트리의 최대 개수를 지정하고, 선택적으로 호출한 스레드에 일부 엔트리를 예약하고, 선택적으로 시스템 세마포 개체의 이름을 지정하고, 새 시스템 세마포가 만들어졌는지 여부를 나타내는 값을 받을 변수를 지정하여 <see cref="T:System.Threading.Semaphore" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="initialCount">세마포에서 동시에 충족될 수 있는 초기 요청 수입니다. </param>
      <param name="maximumCount">세마포에서 동시에 충족될 수 있는 최대 요청 수입니다.</param>
      <param name="name">명명된 시스템 세마포 개체의 이름입니다.</param>
      <param name="createdNew">이 메서드가 반환될 때 로컬 세마포가 만들어진 경우(즉, <paramref name="name" />이 null이거나 빈 문자열인 경우)나 지정된 명명된 시스템 세마포가 만들어진 경우에는 true가 포함되고, 지정된 명명된 시스템 세마포가 이미 있는 경우에는 false가 포함됩니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Threading.Semaphore.OpenExisting(System.String)">
      <summary>[보안상 중요] 이미 있는 경우 지정된 명명된 세마포를 엽니다.</summary>
      <returns>명명된 시스템 세마포를 나타내는 개체입니다.</returns>
      <param name="name">열려는 시스템 세마포의 이름입니다.</param>
    </member>
    <member name="M:System.Threading.Semaphore.Release">
      <summary>세마포를 종료하고 이전 카운트를 반환합니다.</summary>
      <returns>
        <see cref="Overload:System.Threading.Semaphore.Release" /> 메서드가 호출되기 전의 세마포 카운트입니다. </returns>
      <exception cref="T:System.Threading.SemaphoreFullException">세마포 카운트가 이미 최대값인 경우</exception>
      <exception cref="T:System.IO.IOException">명명된 세마포에서 Win32 오류가 발생한 경우</exception>
      <exception cref="T:System.UnauthorizedAccessException">현재 세마포가 명명된 시스템 세마포를 나타내지만 사용자에게 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />가 없는 경우-또는-현재 세마포가 명명된 시스템 세마포를 나타내지만 세마포가 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />를 사용하여 열리지 않은 경우</exception>
    </member>
    <member name="M:System.Threading.Semaphore.Release(System.Int32)">
      <summary>지정된 횟수만큼 세마포를 종료하고 이전 카운트를 반환합니다.</summary>
      <returns>
        <see cref="Overload:System.Threading.Semaphore.Release" /> 메서드가 호출되기 전의 세마포 카운트입니다. </returns>
      <param name="releaseCount">세마포를 종료할 횟수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="releaseCount" />가 1보다 작은 경우</exception>
      <exception cref="T:System.Threading.SemaphoreFullException">세마포 카운트가 이미 최대값인 경우</exception>
      <exception cref="T:System.IO.IOException">명명된 세마포에서 Win32 오류가 발생한 경우</exception>
      <exception cref="T:System.UnauthorizedAccessException">현재 세마포가 명명된 시스템 세마포를 나타내지만 사용자에게 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 권한이 없는 경우-또는-현재 세마포가 명명된 시스템 세마포를 나타내지만 세마포가 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 권한을 사용하여 열리지 않은 경우</exception>
    </member>
    <member name="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Threading.Semaphore@)">
      <summary>[보안상 중요] 지정된 명명된 세마포가 이미 있는 경우 열고 작업의 성공 여부를 나타내는 값을 반환합니다.</summary>
      <returns>명명된 세마포가 성공적으로 열렸으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="name">열려는 시스템 세마포의 이름입니다.</param>
      <param name="result">이 메서드가 반환되면 호출이 성공적으로 수행되면 명명된 세마포를 나타내는 <see cref="T:System.Threading.Semaphore" /> 개체를 포함하고, 호출이 실패하면 null을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
    </member>
    <member name="T:System.Windows.Input.ICommand">
      <summary>명령에 대한 계약을 정의합니다.</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
      <summary>현재 상태에서 명령을 실행할 수 있는지 여부를 확인하는 메서드를 정의합니다.</summary>
      <returns>이 명령을 실행할 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="parameter">명령에서 사용하는 데이터입니다. 명령에서 데이터를 전달할 필요가 없으면 이 개체를 null로 설정할 수 있습니다. </param>
    </member>
    <member name="E:System.Windows.Input.ICommand.CanExecuteChanged">
      <summary>명령을 실행해야 하는지 여부에 영향을 주는 변경이 발생할 때 발생합니다.</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.Execute(System.Object)">
      <summary>명령이 호출될 때 호출할 메서드를 정의합니다.</summary>
      <param name="parameter">명령에서 사용하는 데이터입니다. 명령에서 데이터를 전달할 필요가 없으면 이 개체를 null로 설정할 수 있습니다. </param>
    </member>
  </members>
</doc>