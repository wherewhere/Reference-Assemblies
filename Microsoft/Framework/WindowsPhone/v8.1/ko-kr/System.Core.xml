<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Core</name>
  </assembly>
  <members>
    <member name="T:System.Action`10">
      <summary>매개 변수가 10개이고 값을 반환하지 않는 메서드를 캡슐화합니다.</summary>
      <param name="arg1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수입니다.</param>
      <param name="arg2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수입니다.</param>
      <param name="arg3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수입니다.</param>
      <param name="arg4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수입니다.</param>
      <param name="arg5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수입니다.</param>
      <param name="arg6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수입니다.</param>
      <param name="arg7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수입니다.</param>
      <param name="arg8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수입니다.</param>
      <param name="arg9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수입니다.</param>
      <param name="arg10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수입니다.</param>
      <typeparam name="T1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수 형식입니다.이 형식 매개 변수는 반공변(contravariant)입니다. 즉, 지정한 형식을 사용하거나 덜 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
      <typeparam name="T2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수 형식입니다.</typeparam>
    </member>
    <member name="T:System.Action`11">
      <summary>매개 변수가 11개이고 값을 반환하지 않는 메서드를 캡슐화합니다.</summary>
      <param name="arg1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수입니다.</param>
      <param name="arg2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수입니다.</param>
      <param name="arg3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수입니다.</param>
      <param name="arg4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수입니다.</param>
      <param name="arg5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수입니다.</param>
      <param name="arg6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수입니다.</param>
      <param name="arg7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수입니다.</param>
      <param name="arg8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수입니다.</param>
      <param name="arg9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수입니다.</param>
      <param name="arg10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수입니다.</param>
      <param name="arg11">이 대리자가 캡슐화하는 메서드의 11번째 매개 변수입니다.</param>
      <typeparam name="T1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수 형식입니다.이 형식 매개 변수는 반공변(contravariant)입니다. 즉, 지정한 형식을 사용하거나 덜 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
      <typeparam name="T2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T11">이 대리자가 캡슐화하는 메서드의 11번째 매개 변수 형식입니다.</typeparam>
    </member>
    <member name="T:System.Action`12">
      <summary>매개 변수가 12개이고 값을 반환하지 않는 메서드를 캡슐화합니다.</summary>
      <param name="arg1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수입니다.</param>
      <param name="arg2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수입니다.</param>
      <param name="arg3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수입니다.</param>
      <param name="arg4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수입니다.</param>
      <param name="arg5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수입니다.</param>
      <param name="arg6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수입니다.</param>
      <param name="arg7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수입니다.</param>
      <param name="arg8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수입니다.</param>
      <param name="arg9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수입니다.</param>
      <param name="arg10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수입니다.</param>
      <param name="arg11">이 대리자가 캡슐화하는 메서드의 11번째 매개 변수입니다.</param>
      <param name="arg12">이 대리자가 캡슐화하는 메서드의 12번째 매개 변수입니다.</param>
      <typeparam name="T1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수 형식입니다.이 형식 매개 변수는 반공변(contravariant)입니다. 즉, 지정한 형식을 사용하거나 덜 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
      <typeparam name="T2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T11">이 대리자가 캡슐화하는 메서드의 11번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T12">이 대리자가 캡슐화하는 메서드의 12번째 매개 변수 형식입니다.</typeparam>
    </member>
    <member name="T:System.Action`13">
      <summary>매개 변수가 13개이고 값을 반환하지 않는 메서드를 캡슐화합니다.</summary>
      <param name="arg1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수입니다.</param>
      <param name="arg2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수입니다.</param>
      <param name="arg3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수입니다.</param>
      <param name="arg4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수입니다.</param>
      <param name="arg5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수입니다.</param>
      <param name="arg6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수입니다.</param>
      <param name="arg7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수입니다.</param>
      <param name="arg8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수입니다.</param>
      <param name="arg9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수입니다.</param>
      <param name="arg10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수입니다.</param>
      <param name="arg11">이 대리자가 캡슐화하는 메서드의 11번째 매개 변수입니다.</param>
      <param name="arg12">이 대리자가 캡슐화하는 메서드의 12번째 매개 변수입니다.</param>
      <param name="arg13">이 대리자가 캡슐화하는 메서드의 13번째 매개 변수입니다.</param>
      <typeparam name="T1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수 형식입니다.이 형식 매개 변수는 반공변(contravariant)입니다. 즉, 지정한 형식을 사용하거나 덜 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
      <typeparam name="T2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T11">이 대리자가 캡슐화하는 메서드의 11번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T12">이 대리자가 캡슐화하는 메서드의 12번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T13">이 대리자가 캡슐화하는 메서드의 13번째 매개 변수 형식입니다.</typeparam>
    </member>
    <member name="T:System.Action`14">
      <summary>매개 변수가 14개이고 값을 반환하지 않는 메서드를 캡슐화합니다.</summary>
      <param name="arg1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수입니다.</param>
      <param name="arg2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수입니다.</param>
      <param name="arg3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수입니다.</param>
      <param name="arg4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수입니다.</param>
      <param name="arg5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수입니다.</param>
      <param name="arg6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수입니다.</param>
      <param name="arg7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수입니다.</param>
      <param name="arg8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수입니다.</param>
      <param name="arg9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수입니다.</param>
      <param name="arg10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수입니다.</param>
      <param name="arg11">이 대리자가 캡슐화하는 메서드의 11번째 매개 변수입니다.</param>
      <param name="arg12">이 대리자가 캡슐화하는 메서드의 12번째 매개 변수입니다.</param>
      <param name="arg13">이 대리자가 캡슐화하는 메서드의 13번째 매개 변수입니다.</param>
      <param name="arg14">이 대리자가 캡슐화하는 메서드의 14번째 매개 변수입니다.</param>
      <typeparam name="T1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수 형식입니다.이 형식 매개 변수는 반공변(contravariant)입니다. 즉, 지정한 형식을 사용하거나 덜 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
      <typeparam name="T2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T11">이 대리자가 캡슐화하는 메서드의 11번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T12">이 대리자가 캡슐화하는 메서드의 12번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T13">이 대리자가 캡슐화하는 메서드의 13번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T14">이 대리자가 캡슐화하는 메서드의 14번째 매개 변수 형식입니다.</typeparam>
    </member>
    <member name="T:System.Action`15">
      <summary>매개 변수가 15개이고 값을 반환하지 않는 메서드를 캡슐화합니다.</summary>
      <param name="arg1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수입니다.</param>
      <param name="arg2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수입니다.</param>
      <param name="arg3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수입니다.</param>
      <param name="arg4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수입니다.</param>
      <param name="arg5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수입니다.</param>
      <param name="arg6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수입니다.</param>
      <param name="arg7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수입니다.</param>
      <param name="arg8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수입니다.</param>
      <param name="arg9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수입니다.</param>
      <param name="arg10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수입니다.</param>
      <param name="arg11">이 대리자가 캡슐화하는 메서드의 11번째 매개 변수입니다.</param>
      <param name="arg12">이 대리자가 캡슐화하는 메서드의 12번째 매개 변수입니다.</param>
      <param name="arg13">이 대리자가 캡슐화하는 메서드의 13번째 매개 변수입니다.</param>
      <param name="arg14">이 대리자가 캡슐화하는 메서드의 14번째 매개 변수입니다.</param>
      <param name="arg15">이 대리자가 캡슐화하는 메서드의 15번째 매개 변수입니다.</param>
      <typeparam name="T1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수 형식입니다.이 형식 매개 변수는 반공변(contravariant)입니다. 즉, 지정한 형식을 사용하거나 덜 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
      <typeparam name="T2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T11">이 대리자가 캡슐화하는 메서드의 11번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T12">이 대리자가 캡슐화하는 메서드의 12번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T13">이 대리자가 캡슐화하는 메서드의 13번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T14">이 대리자가 캡슐화하는 메서드의 14번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T15">이 대리자가 캡슐화하는 메서드의 15번째 매개 변수 형식입니다.</typeparam>
    </member>
    <member name="T:System.Action`16">
      <summary>매개 변수가 16개이고 값을 반환하지 않는 메서드를 캡슐화합니다.</summary>
      <param name="arg1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수입니다.</param>
      <param name="arg2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수입니다.</param>
      <param name="arg3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수입니다.</param>
      <param name="arg4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수입니다.</param>
      <param name="arg5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수입니다.</param>
      <param name="arg6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수입니다.</param>
      <param name="arg7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수입니다.</param>
      <param name="arg8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수입니다.</param>
      <param name="arg9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수입니다.</param>
      <param name="arg10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수입니다.</param>
      <param name="arg11">이 대리자가 캡슐화하는 메서드의 11번째 매개 변수입니다.</param>
      <param name="arg12">이 대리자가 캡슐화하는 메서드의 12번째 매개 변수입니다.</param>
      <param name="arg13">이 대리자가 캡슐화하는 메서드의 13번째 매개 변수입니다.</param>
      <param name="arg14">이 대리자가 캡슐화하는 메서드의 14번째 매개 변수입니다.</param>
      <param name="arg15">이 대리자가 캡슐화하는 메서드의 15번째 매개 변수입니다.</param>
      <param name="arg16">이 대리자가 캡슐화하는 메서드의 16번째 매개 변수입니다.</param>
      <typeparam name="T1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수 형식입니다.이 형식 매개 변수는 반공변(contravariant)입니다. 즉, 지정한 형식을 사용하거나 덜 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
      <typeparam name="T2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T11">이 대리자가 캡슐화하는 메서드의 11번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T12">이 대리자가 캡슐화하는 메서드의 12번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T13">이 대리자가 캡슐화하는 메서드의 13번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T14">이 대리자가 캡슐화하는 메서드의 14번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T15">이 대리자가 캡슐화하는 메서드의 15번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T16">이 대리자가 캡슐화하는 메서드의 16번째 매개 변수 형식입니다.</typeparam>
    </member>
    <member name="T:System.Action`9">
      <summary>매개 변수가 아홉 개이고 값을 반환하지 않는 메서드를 캡슐화합니다.</summary>
      <param name="arg1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수입니다.</param>
      <param name="arg2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수입니다.</param>
      <param name="arg3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수입니다.</param>
      <param name="arg4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수입니다.</param>
      <param name="arg5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수입니다.</param>
      <param name="arg6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수입니다.</param>
      <param name="arg7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수입니다.</param>
      <param name="arg8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수입니다.</param>
      <param name="arg9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수입니다.</param>
      <typeparam name="T1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수 형식입니다.이 형식 매개 변수는 반공변(contravariant)입니다. 즉, 지정한 형식을 사용하거나 덜 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
      <typeparam name="T2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수 형식입니다.</typeparam>
    </member>
    <member name="T:System.Func`10">
      <summary>매개 변수가 9개이고 <paramref name="TResult" /> 매개 변수에 지정된 형식의 값을 반환하는 메서드를 캡슐화합니다.</summary>
      <returns>이 대리자가 캡슐화하는 메서드의 반환 값입니다.</returns>
      <param name="arg1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수입니다.</param>
      <param name="arg2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수입니다.</param>
      <param name="arg3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수입니다.</param>
      <param name="arg4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수입니다.</param>
      <param name="arg5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수입니다.</param>
      <param name="arg6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수입니다.</param>
      <param name="arg7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수입니다.</param>
      <param name="arg8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수입니다.</param>
      <param name="arg9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수입니다.</param>
      <typeparam name="T1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수 형식입니다.이 형식 매개 변수는 반공변(contravariant)입니다. 즉, 지정한 형식을 사용하거나 덜 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
      <typeparam name="T2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="TResult">이 대리자가 캡슐화하는 메서드의 반환 값 형식입니다.이 형식 매개 변수는 공변(covariant)입니다. 즉, 지정한 형식을 사용하거나 더 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
    </member>
    <member name="T:System.Func`11">
      <summary>매개 변수가 10개이고 <paramref name="TResult" /> 매개 변수로 지정된 형식의 값을 반환하는 메서드를 캡슐화합니다.</summary>
      <returns>이 대리자가 캡슐화하는 메서드의 반환 값입니다.</returns>
      <param name="arg1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수입니다.</param>
      <param name="arg2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수입니다.</param>
      <param name="arg3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수입니다.</param>
      <param name="arg4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수입니다.</param>
      <param name="arg5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수입니다.</param>
      <param name="arg6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수입니다.</param>
      <param name="arg7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수입니다.</param>
      <param name="arg8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수입니다.</param>
      <param name="arg9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수입니다.</param>
      <param name="arg10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수입니다.</param>
      <typeparam name="T1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수 형식입니다.이 형식 매개 변수는 반공변(contravariant)입니다. 즉, 지정한 형식을 사용하거나 덜 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
      <typeparam name="T2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="TResult">이 대리자가 캡슐화하는 메서드의 반환 값 형식입니다.이 형식 매개 변수는 공변(covariant)입니다. 즉, 지정한 형식을 사용하거나 더 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
    </member>
    <member name="T:System.Func`12">
      <summary>매개 변수가 11개이고 <paramref name="TResult" /> 매개 변수로 지정된 형식의 값을 반환하는 메서드를 캡슐화합니다.</summary>
      <returns>이 대리자가 캡슐화하는 메서드의 반환 값입니다.</returns>
      <param name="arg1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수입니다.</param>
      <param name="arg2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수입니다.</param>
      <param name="arg3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수입니다.</param>
      <param name="arg4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수입니다.</param>
      <param name="arg5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수입니다.</param>
      <param name="arg6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수입니다.</param>
      <param name="arg7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수입니다.</param>
      <param name="arg8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수입니다.</param>
      <param name="arg9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수입니다.</param>
      <param name="arg10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수입니다.</param>
      <param name="arg11">이 대리자가 캡슐화하는 메서드의 11번째 매개 변수입니다.</param>
      <typeparam name="T1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수 형식입니다.이 형식 매개 변수는 반공변(contravariant)입니다. 즉, 지정한 형식을 사용하거나 덜 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
      <typeparam name="T2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T11">이 대리자가 캡슐화하는 메서드의 11번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="TResult">이 대리자가 캡슐화하는 메서드의 반환 값 형식입니다.이 형식 매개 변수는 공변(covariant)입니다. 즉, 지정한 형식을 사용하거나 더 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
    </member>
    <member name="T:System.Func`13">
      <summary>매개 변수가 12개이고 <paramref name="TResult" /> 매개 변수로 지정된 형식의 값을 반환하는 메서드를 캡슐화합니다.</summary>
      <returns>이 대리자가 캡슐화하는 메서드의 반환 값입니다.</returns>
      <param name="arg1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수입니다.</param>
      <param name="arg2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수입니다.</param>
      <param name="arg3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수입니다.</param>
      <param name="arg4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수입니다.</param>
      <param name="arg5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수입니다.</param>
      <param name="arg6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수입니다.</param>
      <param name="arg7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수입니다.</param>
      <param name="arg8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수입니다.</param>
      <param name="arg9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수입니다.</param>
      <param name="arg10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수입니다.</param>
      <param name="arg11">이 대리자가 캡슐화하는 메서드의 11번째 매개 변수입니다.</param>
      <param name="arg12">이 대리자가 캡슐화하는 메서드의 12번째 매개 변수입니다.</param>
      <typeparam name="T1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수 형식입니다.이 형식 매개 변수는 반공변(contravariant)입니다. 즉, 지정한 형식을 사용하거나 덜 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
      <typeparam name="T2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T11">이 대리자가 캡슐화하는 메서드의 11번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T12">이 대리자가 캡슐화하는 메서드의 12번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="TResult">이 대리자가 캡슐화하는 메서드의 반환 값 형식입니다.이 형식 매개 변수는 공변(covariant)입니다. 즉, 지정한 형식을 사용하거나 더 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
    </member>
    <member name="T:System.Func`14">
      <summary>매개 변수가 13개이고 <paramref name="TResult" /> 매개 변수로 지정된 형식의 값을 반환하는 메서드를 캡슐화합니다.</summary>
      <returns>이 대리자가 캡슐화하는 메서드의 반환 값입니다.</returns>
      <param name="arg1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수입니다.</param>
      <param name="arg2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수입니다.</param>
      <param name="arg3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수입니다.</param>
      <param name="arg4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수입니다.</param>
      <param name="arg5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수입니다.</param>
      <param name="arg6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수입니다.</param>
      <param name="arg7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수입니다.</param>
      <param name="arg8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수입니다.</param>
      <param name="arg9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수입니다.</param>
      <param name="arg10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수입니다.</param>
      <param name="arg11">이 대리자가 캡슐화하는 메서드의 11번째 매개 변수입니다.</param>
      <param name="arg12">이 대리자가 캡슐화하는 메서드의 12번째 매개 변수입니다.</param>
      <param name="arg13">이 대리자가 캡슐화하는 메서드의 13번째 매개 변수입니다.</param>
      <typeparam name="T1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수 형식입니다.이 형식 매개 변수는 반공변(contravariant)입니다. 즉, 지정한 형식을 사용하거나 덜 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
      <typeparam name="T2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T11">이 대리자가 캡슐화하는 메서드의 11번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T12">이 대리자가 캡슐화하는 메서드의 12번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T13">이 대리자가 캡슐화하는 메서드의 13번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="TResult">이 대리자가 캡슐화하는 메서드의 반환 값 형식입니다.이 형식 매개 변수는 공변(covariant)입니다. 즉, 지정한 형식을 사용하거나 더 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
    </member>
    <member name="T:System.Func`15">
      <summary>매개 변수가 14개이고 <paramref name="TResult" /> 매개 변수로 지정된 형식의 값을 반환하는 메서드를 캡슐화합니다.</summary>
      <returns>이 대리자가 캡슐화하는 메서드의 반환 값입니다.</returns>
      <param name="arg1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수입니다.</param>
      <param name="arg2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수입니다.</param>
      <param name="arg3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수입니다.</param>
      <param name="arg4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수입니다.</param>
      <param name="arg5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수입니다.</param>
      <param name="arg6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수입니다.</param>
      <param name="arg7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수입니다.</param>
      <param name="arg8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수입니다.</param>
      <param name="arg9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수입니다.</param>
      <param name="arg10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수입니다.</param>
      <param name="arg11">이 대리자가 캡슐화하는 메서드의 11번째 매개 변수입니다.</param>
      <param name="arg12">이 대리자가 캡슐화하는 메서드의 12번째 매개 변수입니다.</param>
      <param name="arg13">이 대리자가 캡슐화하는 메서드의 13번째 매개 변수입니다.</param>
      <param name="arg14">이 대리자가 캡슐화하는 메서드의 14번째 매개 변수입니다.</param>
      <typeparam name="T1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수 형식입니다.이 형식 매개 변수는 반공변(contravariant)입니다. 즉, 지정한 형식을 사용하거나 덜 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
      <typeparam name="T2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T11">이 대리자가 캡슐화하는 메서드의 11번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T12">이 대리자가 캡슐화하는 메서드의 12번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T13">이 대리자가 캡슐화하는 메서드의 13번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T14">이 대리자가 캡슐화하는 메서드의 14번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="TResult">이 대리자가 캡슐화하는 메서드의 반환 값 형식입니다.이 형식 매개 변수는 공변(covariant)입니다. 즉, 지정한 형식을 사용하거나 더 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
    </member>
    <member name="T:System.Func`16">
      <summary>매개 변수가 15개이고 <paramref name="TResult" /> 매개 변수로 지정된 형식의 값을 반환하는 메서드를 캡슐화합니다.</summary>
      <returns>이 대리자가 캡슐화하는 메서드의 반환 값입니다.</returns>
      <param name="arg1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수입니다.</param>
      <param name="arg2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수입니다.</param>
      <param name="arg3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수입니다.</param>
      <param name="arg4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수입니다.</param>
      <param name="arg5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수입니다.</param>
      <param name="arg6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수입니다.</param>
      <param name="arg7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수입니다.</param>
      <param name="arg8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수입니다.</param>
      <param name="arg9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수입니다.</param>
      <param name="arg10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수입니다.</param>
      <param name="arg11">이 대리자가 캡슐화하는 메서드의 11번째 매개 변수입니다.</param>
      <param name="arg12">이 대리자가 캡슐화하는 메서드의 12번째 매개 변수입니다.</param>
      <param name="arg13">이 대리자가 캡슐화하는 메서드의 13번째 매개 변수입니다.</param>
      <param name="arg14">이 대리자가 캡슐화하는 메서드의 14번째 매개 변수입니다.</param>
      <param name="arg15">이 대리자가 캡슐화하는 메서드의 15번째 매개 변수입니다.</param>
      <typeparam name="T1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수 형식입니다.이 형식 매개 변수는 반공변(contravariant)입니다. 즉, 지정한 형식을 사용하거나 덜 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
      <typeparam name="T2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T11">이 대리자가 캡슐화하는 메서드의 11번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T12">이 대리자가 캡슐화하는 메서드의 12번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T13">이 대리자가 캡슐화하는 메서드의 13번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T14">이 대리자가 캡슐화하는 메서드의 14번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T15">이 대리자가 캡슐화하는 메서드의 15번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="TResult">이 대리자가 캡슐화하는 메서드의 반환 값 형식입니다.이 형식 매개 변수는 공변(covariant)입니다. 즉, 지정한 형식을 사용하거나 더 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
    </member>
    <member name="T:System.Func`17">
      <summary>매개 변수가 16개이고 <paramref name="TResult" /> 매개 변수로 지정된 형식의 값을 반환하는 메서드를 캡슐화합니다.</summary>
      <returns>이 대리자가 캡슐화하는 메서드의 반환 값입니다.</returns>
      <param name="arg1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수입니다.</param>
      <param name="arg2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수입니다.</param>
      <param name="arg3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수입니다.</param>
      <param name="arg4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수입니다.</param>
      <param name="arg5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수입니다.</param>
      <param name="arg6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수입니다.</param>
      <param name="arg7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수입니다.</param>
      <param name="arg8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수입니다.</param>
      <param name="arg9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수입니다.</param>
      <param name="arg10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수입니다.</param>
      <param name="arg11">이 대리자가 캡슐화하는 메서드의 11번째 매개 변수입니다.</param>
      <param name="arg12">이 대리자가 캡슐화하는 메서드의 12번째 매개 변수입니다.</param>
      <param name="arg13">이 대리자가 캡슐화하는 메서드의 13번째 매개 변수입니다.</param>
      <param name="arg14">이 대리자가 캡슐화하는 메서드의 14번째 매개 변수입니다.</param>
      <param name="arg15">이 대리자가 캡슐화하는 메서드의 15번째 매개 변수입니다.</param>
      <param name="arg16">이 대리자가 캡슐화하는 메서드의 16번째 매개 변수입니다.</param>
      <typeparam name="T1">이 대리자가 캡슐화하는 메서드의 첫 번째 매개 변수 형식입니다.이 형식 매개 변수는 반공변(contravariant)입니다. 즉, 지정한 형식을 사용하거나 덜 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
      <typeparam name="T2">이 대리자가 캡슐화하는 메서드의 두 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T3">이 대리자가 캡슐화하는 메서드의 세 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T4">이 대리자가 캡슐화하는 메서드의 네 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T5">이 대리자가 캡슐화하는 메서드의 다섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T6">이 대리자가 캡슐화하는 메서드의 여섯 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T7">이 대리자가 캡슐화하는 메서드의 일곱 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T8">이 대리자가 캡슐화하는 메서드의 여덟 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T9">이 대리자가 캡슐화하는 메서드의 아홉 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T10">이 대리자가 캡슐화하는 메서드의 열 번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T11">이 대리자가 캡슐화하는 메서드의 11번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T12">이 대리자가 캡슐화하는 메서드의 12번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T13">이 대리자가 캡슐화하는 메서드의 13번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T14">이 대리자가 캡슐화하는 메서드의 14번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T15">이 대리자가 캡슐화하는 메서드의 15번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="T16">이 대리자가 캡슐화하는 메서드의 16번째 매개 변수 형식입니다.</typeparam>
      <typeparam name="TResult">이 대리자가 캡슐화하는 메서드의 반환 값 형식입니다.이 형식 매개 변수는 공변(covariant)입니다. 즉, 지정한 형식을 사용하거나 더 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1">
      <summary>값 집합을 나타냅니다.</summary>
      <typeparam name="T">해시 집합에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor">
      <summary>비어 있으며 집합 형식에 대한 기본 같음 비교자를 사용하는 <see cref="T:System.Collections.Generic.HashSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>집합 형식에 대한 기본 같음 비교자를 사용하고 지정된 컬렉션에서 복사한 요소가 들어 있으며 복사된 요소 수를 수용하기에 용량이 충분한 <see cref="T:System.Collections.Generic.HashSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="collection">새 집합에 복사되는 요소를 포함한 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>집합 형식에 대한 지정된 같음 비교자를 사용하고 지정된 컬렉션에서 복사한 요소가 들어 있으며 복사된 요소 수를 수용하기에 용량이 충분한 <see cref="T:System.Collections.Generic.HashSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="collection">새 집합에 복사되는 요소를 포함한 컬렉션입니다.</param>
      <param name="comparer">집합의 값을 비교하는 데 사용할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 구현을 지정하거나, 집합 형식에 대한 기본 <see cref="T:System.Collections.Generic.EqualityComparer`1" /> 구현을 사용하려면 null을 지정합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>비어 있으며 집합 형식에 대한 지정된 같음 비교자를 사용하는 <see cref="T:System.Collections.Generic.HashSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="comparer">집합의 값을 비교하는 데 사용할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 구현을 지정하거나, 집합 형식에 대한 기본 <see cref="T:System.Collections.Generic.EqualityComparer`1" /> 구현을 사용하려면 null을 지정합니다.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Add(`0)">
      <summary>지정된 요소를 집합에 추가합니다.</summary>
      <returns>요소가 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에 추가되면 true이고, 요소가 이미 있으면 false입니다.</returns>
      <param name="item">집합에 추가할 요소입니다.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 요소를 모두 제거합니다.</summary>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Comparer">
      <summary>집합의 값이 같은지 확인하는 데 사용되는 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 개체를 가져옵니다.</summary>
      <returns>집합의 값이 같은지 확인하는 데 사용되는 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Contains(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에 지정된 요소가 들어 있는지 확인합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에 지정된 요소가 포함되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="item">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 찾을 요소입니다.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[])">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체의 요소를 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)">
      <summary>지정된 배열 인덱스에서 시작하여 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체의 요소를 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 인덱스이며 0부터 시작합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" />가 대상 <paramref name="array" />의 길이보다 큽니다.-또는-<paramref name="count" />가 대상 <paramref name="array" />의 크기보다 큽니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>지정된 배열 인덱스에서 시작하여 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 지정된 수의 요소를 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 인덱스이며 0부터 시작합니다.</param>
      <param name="count">
        <paramref name="array" />에 복사할 요소 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" />가 0보다 작습니다.-또는-<paramref name="count" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" />가 대상 <paramref name="array" />의 길이보다 큽니다.-또는-<paramref name="count" />가 <paramref name="index" />에서 대상 <paramref name="array" /> 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Count">
      <summary>집합에 들어 있는 요소 수를 가져옵니다.</summary>
      <returns>집합에 들어 있는 요소 수입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 지정된 컬렉션의 모든 요소를 제거합니다.</summary>
      <param name="other">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 제거할 항목 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 반복되는 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에 대한 <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체를 수정하여 해당 개체와 지정된 컬렉션에 동시에 있는 요소만 포함시킵니다.</summary>
      <param name="other">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 지정된 컬렉션의 진 부분 집합인지 확인합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 <paramref name="other" />의 진 부분 집합이면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 지정된 컬렉션의 진 포함 집합인지 확인합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 <paramref name="other" />의 진 포함 집합이면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 지정된 컬렉션의 하위 집합인지 확인합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 <paramref name="other" />의 하위 집합이면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 지정된 컬렉션의 상위 집합인지 확인합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 <paramref name="other" />의 상위 집합이면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 지정된 컬렉션이 공통 요소를 공유하는지 여부를 확인합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 <paramref name="other" />가 최소한 하나의 요소를 공유하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Remove(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 지정된 요소를 제거합니다.</summary>
      <returns>요소를 성공적으로 찾아서 제거한 경우 true이고, 그렇지 않으면 false입니다. 이 메서드는 <paramref name="item" />이 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에 없는 경우 false를 반환합니다.</returns>
      <param name="item">제거할 요소입니다.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 컬렉션에서 지정된 조건자에 정의된 조건과 일치하는 요소를 모두 제거합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 컬렉션에서 제거된 요소 수입니다.</returns>
      <param name="match">제거할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 지정된 컬렉션에 같은 요소가 들어 있는지 확인합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 <paramref name="other" />와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체를 수정하여 해당 개체와 지정된 컬렉션 중 하나에만 있는 요소만 포함시킵니다.</summary>
      <param name="other">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 개체에 항목을 추가합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 개체에 추가할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" />이 읽기 전용입니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>컬렉션이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션이 읽기 전용이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>컬렉션 전체에서 반복되는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션 전체에서 반복되는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TrimExcess">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체의 용량을 실제로 포함된 요소 수로 설정하고 구현별로 다른 근방 값으로 올림합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체를 수정하여 해당 개체와 지정된 컬렉션 양쪽 모두에 있는 요소를 포함합니다.</summary>
      <param name="other">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />가 null입니다.</exception>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체의 요소를 열거합니다.</summary>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> 개체에 사용되는 리소스를 모두 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.MoveNext">
      <summary>열거자를 <see cref="T:System.Collections.Generic.HashSet`1" /> 컬렉션의 다음 요소로 이동합니다.</summary>
      <returns>열거자가 다음 요소로 이동한 경우 true가 반환되고, 컬렉션의 끝을 지난 경우 false가 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후 컬렉션이 수정되었습니다. </exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소인 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 위치합니다. </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후 컬렉션이 수정되었습니다. </exception>
    </member>
    <member name="T:System.Dynamic.BinaryOperationBinder">
      <summary>호출 사이트의 동적 이항 연산을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>
        <see cref="T:System.Dynamic.BinaryOperationBinder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="operation">이항 연산 종류입니다.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 이항 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 연산의 대상입니다.</param>
      <param name="args">동적 연산의 인수 배열입니다.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 이항 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 이항 연산의 대상입니다.</param>
      <param name="arg">동적 이항 연산의 오른쪽 피연산자입니다.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 이항 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 이항 연산의 대상입니다.</param>
      <param name="arg">동적 이항 연산의 오른쪽 피연산자입니다.</param>
      <param name="errorSuggestion">바인딩이 실패한 경우 바인딩 결과 또는 null입니다.</param>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.Operation">
      <summary>이항 연산 종류입니다.</summary>
      <returns>이항 연산 종류를 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.ReturnType">
      <summary>연산의 결과 형식입니다.</summary>
      <returns>연산의 결과 형식입니다.</returns>
    </member>
    <member name="T:System.Dynamic.BindingRestrictions">
      <summary>동적 바인딩이 유효한 <see cref="T:System.Dynamic.DynamicMetaObject" />의 바인딩 제한 집합을 나타냅니다.</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})">
      <summary>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 인스턴스 목록의 바인딩 제한을 하나의 제한 집합으로 결합합니다.</summary>
      <returns>새 바인딩 제한 집합입니다.</returns>
      <param name="contributingObjects">제한을 결합할 <see cref="T:System.Dynamic.DynamicMetaObject" /> 인스턴스 목록입니다.</param>
    </member>
    <member name="F:System.Dynamic.BindingRestrictions.Empty">
      <summary>빈 바인딩 제한 집합을 나타냅니다.이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)">
      <summary>식에서 임의의 변경할 수 없는 속성을 확인하는 바인딩 제한을 만듭니다.</summary>
      <returns>새 바인딩 제한입니다.</returns>
      <param name="expression">제한을 나타내는 식입니다.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)">
      <summary>식에서 개체 인스턴스 ID를 확인하는 바인딩 제한을 만듭니다.</summary>
      <returns>새 바인딩 제한입니다.</returns>
      <param name="expression">테스트할 식입니다.</param>
      <param name="instance">테스트할 정확한 개체 인스턴스입니다.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)">
      <summary>식에서 런타임 형식 ID를 확인하는 바인딩 제한을 만듭니다.</summary>
      <returns>새 바인딩 제한입니다.</returns>
      <param name="expression">테스트할 식입니다.</param>
      <param name="type">테스트할 정확한 형식입니다.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)">
      <summary>바인딩 제한 집합을 현재 바인딩 제한과 병합합니다.</summary>
      <returns>새 바인딩 제한 집합입니다.</returns>
      <param name="restrictions">현재 바인딩 제한과 병합할 제한 집합입니다.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.ToExpression">
      <summary>바인딩 제한을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />을 만듭니다.</summary>
      <returns>제한을 나타내는 식 트리입니다.</returns>
    </member>
    <member name="T:System.Dynamic.CallInfo">
      <summary>동적 바인딩 프로세스의 인수에 대해 설명합니다.</summary>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary>동적 바인딩 프로세스의 인수를 나타내는 새 CallInfo를 만듭니다.</summary>
      <param name="argCount">인수의 수입니다.</param>
      <param name="argNames">인수 이름입니다.</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])">
      <summary>새 PositionalArgumentInfo를 만듭니다.</summary>
      <param name="argCount">인수의 수입니다.</param>
      <param name="argNames">인수 이름입니다.</param>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentCount">
      <summary>인수의 수입니다.</summary>
      <returns>인수의 수입니다.</returns>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentNames">
      <summary>인수 이름입니다.</summary>
      <returns>인수 이름의 읽기 전용 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.Equals(System.Object)">
      <summary>지정된 CallInfo 인스턴스와 현재 인스턴스가 같다고 간주할지 여부를 확인합니다.</summary>
      <returns>지정된 인스턴스가 현재 인스턴스와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 인스턴스와 비교할 <see cref="T:System.Dynamic.CallInfo" />의 인스턴스입니다.</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.GetHashCode">
      <summary>현재 <see cref="T:System.Dynamic.CallInfo" />에 대한 해시 함수의 역할을 합니다.</summary>
      <returns>현재 <see cref="T:System.Dynamic.CallInfo" />의 해시 코드입니다.</returns>
    </member>
    <member name="T:System.Dynamic.ConvertBinder">
      <summary>호출 사이트의 동적 변환 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.#ctor(System.Type,System.Boolean)">
      <summary>
        <see cref="T:System.Dynamic.ConvertBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">변환할 형식입니다.</param>
      <param name="explicit">변환 시 명시적 변환을 고려해야 하면 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 변환 작업의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 변환 연산의 대상입니다.</param>
      <param name="args">동적 변환 작업의 인수 배열입니다.</param>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Explicit">
      <summary>변환 시 명시적 변환을 고려해야 하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>명시적 변환이 있으면 True이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject)">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 변환 작업의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 변환 연산의 대상입니다.</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 변환 작업의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 변환 연산의 대상입니다.</param>
      <param name="errorSuggestion">바인딩이 실패하면 사용할 바인딩 결과 또는 null입니다.</param>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.ReturnType">
      <summary>연산의 결과 형식입니다.</summary>
      <returns>작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Type">
      <summary>변환할 형식입니다.</summary>
      <returns>변환할 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.CreateInstanceBinder">
      <summary>호출 사이트의 동적 만들기 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>
        <see cref="T:System.Dynamic.CreateInstanceBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="callInfo">호출 사이트의 인수 서명입니다.</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 만들기 작업의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 만들기 연산의 대상입니다.</param>
      <param name="args">동적 만들기 작업의 인수 배열입니다.</param>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.CallInfo">
      <summary>호출 사이트의 인수 서명을 가져옵니다.</summary>
      <returns>호출 사이트의 인수 서명입니다.</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 만들기 작업의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 만들기 연산의 대상입니다.</param>
      <param name="args">동적 만들기 연산의 인수입니다.</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 만들기 작업의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 만들기 연산의 대상입니다.</param>
      <param name="args">동적 만들기 연산의 인수입니다.</param>
      <param name="errorSuggestion">바인딩이 실패하면 사용할 바인딩 결과 또는 null입니다.</param>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.ReturnType">
      <summary>연산의 결과 형식입니다.</summary>
      <returns>작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.DeleteIndexBinder">
      <summary>호출 사이트의 동적 인덱스 삭제 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>
        <see cref="T:System.Dynamic.DeleteIndexBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="callInfo">호출 사이트의 인수 서명입니다.</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 인덱스 삭제 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 인덱스 삭제 연산의 대상입니다.</param>
      <param name="args">동적 인덱스 삭제 작업의 인수 배열입니다.</param>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.CallInfo">
      <summary>호출 사이트의 인수 서명을 가져옵니다.</summary>
      <returns>호출 사이트의 인수 서명입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 인덱스 삭제 작업의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 인덱스 삭제 연산의 대상입니다.</param>
      <param name="indexes">동적 인덱스 삭제 연산의 인수입니다.</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 인덱스 삭제 작업의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 인덱스 삭제 연산의 대상입니다.</param>
      <param name="indexes">동적 인덱스 삭제 연산의 인수입니다.</param>
      <param name="errorSuggestion">바인딩이 실패하면 사용할 바인딩 결과 또는 null입니다.</param>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.ReturnType">
      <summary>연산의 결과 형식입니다.</summary>
      <returns>작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.DeleteMemberBinder">
      <summary>호출 사이트의 동적 멤버 삭제 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>
        <see cref="T:System.Dynamic.DeleteIndexBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">삭제할 멤버의 이름입니다.</param>
      <param name="ignoreCase">대/소문자를 무시하고 이름이 일치해야 하면 True이고, 그렇지 않으면 False입니다.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 멤버 삭제 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 멤버 삭제 연산의 대상입니다.</param>
      <param name="args">동적 멤버 삭제 작업의 인수 배열입니다.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject)">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 멤버 삭제 작업의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 멤버 삭제 연산의 대상입니다.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 멤버 삭제 작업의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 멤버 삭제 연산의 대상입니다.</param>
      <param name="errorSuggestion">바인딩이 실패하면 사용할 바인딩 결과 또는 null입니다.</param>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.IgnoreCase">
      <summary>문자열 비교에서 멤버 이름의 대/소문자를 무시해야 할지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>문자열 비교 시 대/소문자를 무시해야 하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.Name">
      <summary>삭제할 멤버의 이름을 가져옵니다.</summary>
      <returns>삭제할 멤버의 이름입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.ReturnType">
      <summary>연산의 결과 형식입니다.</summary>
      <returns>작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObject">
      <summary>동적 바인딩에 참가하는 개체의 바인딩 논리와 동적 바인딩을 나타냅니다.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)">
      <summary>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="expression">동적 바인딩 프로세스 중에 이 <see cref="T:System.Dynamic.DynamicMetaObject" />를 나타내는 식입니다.</param>
      <param name="restrictions">바인딩이 유효한 바인딩 제한 집합입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)">
      <summary>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="expression">동적 바인딩 프로세스 중에 이 <see cref="T:System.Dynamic.DynamicMetaObject" />를 나타내는 식입니다.</param>
      <param name="restrictions">바인딩이 유효한 바인딩 제한 집합입니다.</param>
      <param name="value">
        <see cref="T:System.Dynamic.DynamicMetaObject" />에서 나타내는 런타임 값입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
      <summary>동적 이항 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="binder">동적 연산의 세부 정보를 나타내는 <see cref="T:System.Dynamic.BinaryOperationBinder" />의 인스턴스입니다.</param>
      <param name="arg">이항 연산의 오른쪽을 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />의 인스턴스입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
      <summary>동적 변환 작업의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="binder">동적 연산의 세부 정보를 나타내는 <see cref="T:System.Dynamic.ConvertBinder" />의 인스턴스입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 인스턴스 만들기 작업의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="binder">동적 연산의 세부 정보를 나타내는 <see cref="T:System.Dynamic.CreateInstanceBinder" />의 인스턴스입니다.</param>
      <param name="args">인스턴스 만들기 연산에 대한 인수로서, <see cref="T:System.Dynamic.DynamicMetaObject" /> 인스턴스의 배열입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 인덱스 삭제 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="binder">동적 연산의 세부 정보를 나타내는 <see cref="T:System.Dynamic.DeleteIndexBinder" />의 인스턴스입니다.</param>
      <param name="indexes">인덱스 삭제 연산에 대한 인수로서, <see cref="T:System.Dynamic.DynamicMetaObject" /> 인스턴스의 배열입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>동적 멤버 삭제 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="binder">동적 연산의 세부 정보를 나타내는 <see cref="T:System.Dynamic.DeleteMemberBinder" />의 인스턴스입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 인덱스 가져오기 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="binder">동적 연산의 세부 정보를 나타내는 <see cref="T:System.Dynamic.GetIndexBinder" />의 인스턴스입니다.</param>
      <param name="indexes">인덱스 가져오기 연산에 대한 인수로서, <see cref="T:System.Dynamic.DynamicMetaObject" /> 인스턴스의 배열입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
      <summary>동적 멤버 가져오기 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="binder">동적 연산의 세부 정보를 나타내는 <see cref="T:System.Dynamic.GetMemberBinder" />의 인스턴스입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 호출 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="binder">동적 연산의 세부 정보를 나타내는 <see cref="T:System.Dynamic.InvokeBinder" />의 인스턴스입니다.</param>
      <param name="args">호출 연산에 대한 인수로서, <see cref="T:System.Dynamic.DynamicMetaObject" /> 인스턴스의 배열입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 멤버 호출 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="binder">동적 연산의 세부 정보를 나타내는 <see cref="T:System.Dynamic.InvokeMemberBinder" />의 인스턴스입니다.</param>
      <param name="args">멤버 호출 연산에 대한 인수로서, <see cref="T:System.Dynamic.DynamicMetaObject" /> 인스턴스의 배열입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>동적 인덱스 설정 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="binder">동적 연산의 세부 정보를 나타내는 <see cref="T:System.Dynamic.SetIndexBinder" />의 인스턴스입니다.</param>
      <param name="indexes">인덱스 설정 연산에 대한 인수로서, <see cref="T:System.Dynamic.DynamicMetaObject" /> 인스턴스의 배열입니다.</param>
      <param name="value">인덱스 설정 연산의 값을 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
      <summary>동적 멤버 설정 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="binder">동적 연산의 세부 정보를 나타내는 <see cref="T:System.Dynamic.SetMemberBinder" />의 인스턴스입니다.</param>
      <param name="value">멤버 설정 연산의 값을 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
      <summary>동적 단항 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="binder">동적 연산의 세부 정보를 나타내는 <see cref="T:System.Dynamic.UnaryOperationBinder" />의 인스턴스입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)">
      <summary>지정한 개체에 대한 메타 개체를 만듭니다.</summary>
      <returns>지정된 개체가 <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" />를 구현하고 현재 AppDomain 외부의 원격 개체가 아니면 <see cref="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)" />에서 반환된 개체의 특정 메타 개체를 반환합니다.그렇지 않으면 아무 제한도 없는 일반 메타 개체가 새로 만들어져 반환됩니다.</returns>
      <param name="value">메타 개체를 가져올 개체입니다.</param>
      <param name="expression">동적 바인딩 프로세스 중에 이 <see cref="T:System.Dynamic.DynamicMetaObject" />를 나타내는 식입니다.</param>
    </member>
    <member name="F:System.Dynamic.DynamicMetaObject.EmptyMetaObjects">
      <summary>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 형식의 빈 배열을 나타냅니다.이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Expression">
      <summary>동적 바인딩 프로세스 중에 <see cref="T:System.Dynamic.DynamicMetaObject" />를 나타내는 식입니다.</summary>
      <returns>동적 바인딩 프로세스 중에 <see cref="T:System.Dynamic.DynamicMetaObject" />를 나타내는 식입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.GetDynamicMemberNames">
      <summary>모든 동적 멤버 이름의 열거형을 반환합니다.</summary>
      <returns>동적 멤버 이름의 목록입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.HasValue">
      <summary>
        <see cref="T:System.Dynamic.DynamicMetaObject" />에 런타임 값이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />에 런타임 값이 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.LimitType">
      <summary>
        <see cref="T:System.Dynamic.DynamicMetaObject" />의 제한 형식을 가져옵니다.</summary>
      <returns>런타임 값을 사용할 수 있으면 <see cref="P:System.Dynamic.DynamicMetaObject.RuntimeType" />이고, 그렇지 않으면 <see cref="P:System.Dynamic.DynamicMetaObject.Expression" />의 형식입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Restrictions">
      <summary>바인딩이 유효한 바인딩 제한 집합입니다.</summary>
      <returns>바인딩 제한 집합입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.RuntimeType">
      <summary>
        <see cref="T:System.Dynamic.DynamicMetaObject" />에 연결된 값이 없는 경우 런타임 값의 <see cref="T:System.Type" /> 또는 null을 가져옵니다.</summary>
      <returns>런타임 값의 <see cref="T:System.Type" /> 또는 null입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Value">
      <summary>이 <see cref="T:System.Dynamic.DynamicMetaObject" />에서 나타내는 런타임 값입니다.</summary>
      <returns>이 <see cref="T:System.Dynamic.DynamicMetaObject" />에서 나타내는 런타임 값입니다.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObjectBinder">
      <summary>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 바인딩 프로토콜에 참가하는 동적 호출 사이트 바인더입니다.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.#ctor">
      <summary>
        <see cref="T:System.Dynamic.DynamicMetaObjectBinder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>파생 클래스에서 재정의된 경우 동적 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 연산의 대상입니다.</param>
      <param name="args">동적 연산의 인수 배열입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>인수 집합에서 동적 연산의 런타임 바인딩을 수행합니다.</summary>
      <returns>동적 연산의 인수에서 테스트를 수행하고, 테스트에 성공하는 경우 동적 연산을 수행하는 식입니다.이후의 동적 연산에서 테스트에 실패하는 경우 새 인수 형식에 대한 새 <see cref="T:System.Linq.Expressions.Expression" />을 생성하기 위해 Bind가 다시 호출됩니다.</returns>
      <param name="args">동적 연산의 인수 배열입니다.</param>
      <param name="parameters">바인딩 프로세스에서 호출 사이트의 매개 변수를 나타내는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 인스턴스의 배열입니다.</param>
      <param name="returnLabel">동적 바인딩의 결과를 반환하는 데 사용되는 LabelTarget입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>나중에 모든 동적 연산 인수의 런타임 값이 계산될 때까지 연산의 바인딩을 지연합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 연산의 대상입니다.</param>
      <param name="args">동적 연산의 인수 배열입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject[])">
      <summary>나중에 모든 동적 연산 인수의 런타임 값이 계산될 때까지 연산의 바인딩을 지연합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="args">동적 연산의 인수 배열입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.GetUpdateExpression(System.Type)">
      <summary>바인딩이 업데이트되도록 할 식을 가져옵니다.식의 바인딩이 더 이상 유효하지 않음을 나타냅니다.일반적으로 동적 개체의 "버전"이 변경될 때 사용됩니다.</summary>
      <returns>업데이트 식입니다.</returns>
      <param name="type">결과 식의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성입니다. 모든 형식을 사용할 수 있습니다.</param>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObjectBinder.ReturnType">
      <summary>연산의 결과 형식입니다.</summary>
      <returns>작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicObject">
      <summary>런타임에 동적 동작을 지정하기 위한 기본 클래스를 제공합니다.이 클래스는 상속되어야 하며 직접 인스턴스화할 수 없습니다.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.#ctor">
      <summary>파생 형식이 <see cref="T:System.Dynamic.DynamicObject" /> 형식의 새 인스턴스를 초기화할 수 있도록 합니다.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
      <summary>모든 동적 멤버 이름의 열거형을 반환합니다. </summary>
      <returns>동적 멤버 이름이 들어 있는 시퀀스입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>동적 가상 메서드를 디스패치하는 <see cref="T:System.Dynamic.DynamicMetaObject" />를 제공합니다.개체를 다른 <see cref="T:System.Dynamic.DynamicMetaObject" /> 내에 캡슐화하여 개별 작업에 대해 사용자 지정 동작을 제공할 수 있습니다.이 메서드는 언어 구현자에 대한 동적 언어 런타임 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 형식의 개체입니다.</returns>
      <param name="parameter">동적 가상 메서드에 디스패치할 <see cref="T:System.Dynamic.DynamicMetaObject" />를 나타내는 식입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
      <summary>이항 연산에 대한 구현을 제공합니다.<see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 더하기와 곱하기 같은 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <returns>연산이 성공하면 true이고, 그렇지 않으면 false입니다.이 메서드가 false를 반환하는 경우 언어의 런타임 바인더가 동작을 결정합니다.대부분의 경우 언어별 런타임 예외가 발생됩니다.</returns>
      <param name="binder">이항 연산에 대한 정보를 제공합니다.binder.Operation 속성은 <see cref="T:System.Linq.Expressions.ExpressionType" /> 개체를 반환합니다.예를 들어 sum = first + second 문의 경우, first 및 second는 DynamicObject 클래스에서 파생되고 binder.Operation은 ExpressionType.Add를 반환합니다.</param>
      <param name="arg">이항 연산의 오른쪽 피연산자입니다.예를 들어 sum = first + second 문의 경우, first 및 second는 DynamicObject 클래스에서 파생되고 <paramref name="arg" />는 second와 동일합니다.</param>
      <param name="result">이항 연산의 결과입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
      <summary>형식 변환 연산에 대한 구현을 제공합니다.<see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 개체를 한 형식에서 다른 형식으로 변환하는 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <returns>연산이 성공하면 true이고, 그렇지 않으면 false입니다.이 메서드가 false를 반환하는 경우 언어의 런타임 바인더가 동작을 결정합니다.대부분의 경우 언어별 런타임 예외가 발생됩니다.</returns>
      <param name="binder">변환 연산에 대한 정보를 제공합니다.binder.Type 속성은 개체가 변환되어야 하는 형식을 제공합니다.예를 들어 C#의 (String)sampleObject 문(Visual Basic의 CType(sampleObject, Type))의 경우, sampleObject는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스의 인스턴스이고 binder.Type은 <see cref="T:System.String" /> 형식을 반환합니다.binder.Explicit 속성은 발생하는 변환의 종류에 대한 정보를 제공합니다.명시적 변환의 경우 true를 반환하고, 암시적 변환의 경우 false를 반환합니다.</param>
      <param name="result">형식 변환 연산의 결과입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
      <summary>동적 개체의 새 인스턴스를 초기화하는 연산에 대한 구현을 제공합니다.이 메서드는 C# 또는 Visual Basic에서 사용할 수 없습니다.</summary>
      <returns>연산이 성공하면 true이고, 그렇지 않으면 false입니다.이 메서드가 false를 반환하는 경우 언어의 런타임 바인더가 동작을 결정합니다.대부분의 경우 언어별 런타임 예외가 발생됩니다.</returns>
      <param name="binder">초기화 연산에 대한 정보를 제공합니다.</param>
      <param name="args">초기화하는 동안 개체에 전달되는 인수입니다.예를 들어 new SampleType(100) 연산의 경우, SampleType은 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 형식이고 <paramref name="args[0]" />은 100과 같습니다.</param>
      <param name="result">초기화의 결과입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
      <summary>인덱스별로 개체를 삭제하는 연산에 대한 구현을 제공합니다.이 메서드는 C# 또는 Visual Basic에서 사용할 수 없습니다.</summary>
      <returns>연산이 성공하면 true이고, 그렇지 않으면 false입니다.이 메서드가 false를 반환하는 경우 언어의 런타임 바인더가 동작을 결정합니다.대부분의 경우 언어별 런타임 예외가 발생됩니다.</returns>
      <param name="binder">삭제에 대한 정보를 제공합니다.</param>
      <param name="indexes">삭제할 인덱스입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>개체 멤버를 삭제하는 연산에 대한 구현을 제공합니다.이 메서드는 C# 또는 Visual Basic에서 사용할 수 없습니다.</summary>
      <returns>연산이 성공하면 true이고, 그렇지 않으면 false입니다.이 메서드가 false를 반환하는 경우 언어의 런타임 바인더가 동작을 결정합니다.대부분의 경우 언어별 런타임 예외가 발생됩니다.</returns>
      <param name="binder">삭제에 대한 정보를 제공합니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary>인덱스별로 값을 가져오는 연산에 대한 구현을 제공합니다.<see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 인덱싱 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <returns>연산이 성공하면 true이고, 그렇지 않으면 false입니다.이 메서드가 false를 반환하는 경우 언어의 런타임 바인더가 동작을 결정합니다.대부분의 경우 런타임 예외가 발생됩니다.</returns>
      <param name="binder">연산에 대한 정보를 제공합니다. </param>
      <param name="indexes">연산에 사용되는 인덱스입니다.예를 들어 C#의 sampleObject[3] 연산(Visual Basic의 sampleObject(3))의 경우, sampleObject는 DynamicObject 클래스에서 파생되고 <paramref name="indexes[0]" />은 3과 같습니다.</param>
      <param name="result">인덱스 연산의 결과입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>멤버 값을 가져오는 연산에 대한 구현을 제공합니다.<see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 속성 값 가져오기와 같은 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <returns>연산이 성공하면 true이고, 그렇지 않으면 false입니다.이 메서드가 false를 반환하는 경우 언어의 런타임 바인더가 동작을 결정합니다.대부분의 경우 런타임 예외가 발생됩니다.</returns>
      <param name="binder">동적 연산을 호출한 개체에 대한 정보를 제공합니다.binder.Name 속성은 동적 연산이 수행된 멤버의 이름을 제공합니다.예를 들어 Console.WriteLine(sampleObject.SampleProperty) 문의 경우, sampleObject는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스의 인스턴스이고 binder.Name은 "SampleProperty"를 반환합니다.binder.IgnoreCase 속성은 멤버 이름이 대/소문자를 구분하는지 여부를 지정합니다.</param>
      <param name="result">가져오기 연산의 결과입니다.예를 들어 속성에 대한 메서드가 호출되면 <paramref name="result" />에 속성 값을 할당할 수 있습니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
      <summary>개체를 호출하는 연산에 대한 구현을 제공합니다.<see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 개체 또는 대리자 호출과 같은 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <returns>연산이 성공하면 true이고, 그렇지 않으면 false입니다.이 메서드가 false를 반환하는 경우 언어의 런타임 바인더가 동작을 결정합니다.대부분의 경우 언어별 런타임 예외가 발생됩니다.</returns>
      <param name="binder">호출 연산에 대한 정보를 제공합니다.</param>
      <param name="args">호출 연산을 수행하는 동안 개체에 전달되는 인수입니다.예를 들어 sampleObject(100) 연산의 경우, sampleObject는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생되고 <paramref name="args[0]" />은 100과 같습니다.</param>
      <param name="result">개체 호출의 결과입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>멤버를 호출하는 연산에 대한 구현을 제공합니다.<see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 메서드 호출과 같은 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <returns>연산이 성공하면 true이고, 그렇지 않으면 false입니다.이 메서드가 false를 반환하는 경우 언어의 런타임 바인더가 동작을 결정합니다.대부분의 경우 언어별 런타임 예외가 발생됩니다.</returns>
      <param name="binder">동적 연산에 대한 정보를 제공합니다.binder.Name 속성은 동적 연산이 수행된 멤버의 이름을 제공합니다.예를 들어 sampleObject.SampleMethod(100) 문의 경우, sampleObject는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스의 인스턴스이고 binder.Name은 "SampleMethod"를 반환합니다.binder.IgnoreCase 속성은 멤버 이름이 대/소문자를 구분하는지 여부를 지정합니다.</param>
      <param name="args">호출 연산을 수행하는 동안 개체 멤버에 전달되는 인수입니다.예를 들어 sampleObject.SampleMethod(100) 문의 경우, sampleObject는<see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생되고 <paramref name="args[0]" />은 100과 같습니다.</param>
      <param name="result">멤버 호출의 결과입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
      <summary>인덱스별로 값을 설정하는 연산에 대한 구현을 제공합니다.<see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 지정된 인덱스별로 개체에 액세스하는 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <returns>연산이 성공하면 true이고, 그렇지 않으면 false입니다.이 메서드가 false를 반환하는 경우 언어의 런타임 바인더가 동작을 결정합니다.대부분의 경우 언어별 런타임 예외가 발생됩니다.</returns>
      <param name="binder">연산에 대한 정보를 제공합니다. </param>
      <param name="indexes">연산에 사용되는 인덱스입니다.예를 들어 C#의 sampleObject[3] = 10 연산(Visual Basic의 sampleObject(3) = 10)의 경우, sampleObject는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생되고 <paramref name="indexes[0]" />은 3과 같습니다.</param>
      <param name="value">지정된 인덱스를 가진 개체로 설정할 값입니다.예를 들어 C#의 sampleObject[3] = 10 연산(Visual Basic의 sampleObject(3) = 10)의 경우, sampleObject는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생되고 <paramref name="value" />은 10과 같습니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>멤버 값을 설정하는 연산에 대한 구현을 제공합니다.<see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 속성 값 설정과 같은 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <returns>연산이 성공하면 true이고, 그렇지 않으면 false입니다.이 메서드가 false를 반환하는 경우 언어의 런타임 바인더가 동작을 결정합니다.대부분의 경우 언어별 런타임 예외가 발생됩니다.</returns>
      <param name="binder">동적 연산을 호출한 개체에 대한 정보를 제공합니다.binder.Name 속성은 값이 할당될 멤버의 이름을 제공합니다.예를 들어 sampleObject.SampleProperty = "Test" 문의 경우, sampleObject는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스의 인스턴스이고 binder.Name은 "SampleProperty"를 반환합니다.binder.IgnoreCase 속성은 멤버 이름이 대/소문자를 구분하는지 여부를 지정합니다.</param>
      <param name="value">멤버에 설정할 값입니다.예를 들어 sampleObject.SampleProperty = "Test"의 경우, sampleObject는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스의 인스턴스이고 <paramref name="value" />는 "Test"입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
      <summary>단항 연산에 대한 구현을 제공합니다.<see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 부정, 증가 또는 감소와 같은 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <returns>연산이 성공하면 true이고, 그렇지 않으면 false입니다.이 메서드가 false를 반환하는 경우 언어의 런타임 바인더가 동작을 결정합니다.대부분의 경우 언어별 런타임 예외가 발생됩니다.</returns>
      <param name="binder">단항 연산에 대한 정보를 제공합니다.binder.Operation 속성은 <see cref="T:System.Linq.Expressions.ExpressionType" /> 개체를 반환합니다.예를 들어 negativeNumber = -number 문의 경우, number는 DynamicObject에서 파생되고 binder.Operation은 "Negate"를 반환합니다.</param>
      <param name="result">단항 연산의 결과입니다.</param>
    </member>
    <member name="T:System.Dynamic.ExpandoObject">
      <summary>런타임에 동적으로 추가 및 제거할 수 있는 멤버가 있는 개체를 나타냅니다.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.#ctor">
      <summary>멤버가 없는 새 ExpandoObject를 초기화합니다.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>지정된 키를 가진 <see cref="T:System.Collections.Generic.ICollection`1" />에 지정된 값을 추가합니다.</summary>
      <param name="item">컬렉션에 추가할 키와 값을 나타내는 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 구조체입니다.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Clear">
      <summary>컬렉션에서 모든 항목을 제거합니다.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에 특정 키와 값이 들어 있는지 여부를 확인합니다.</summary>
      <returns>컬렉션에 특정 키와 값이 포함되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 찾을 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 구조체입니다.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>지정한 배열 인덱스부터 <see cref="T:System.Collections.Generic.ICollection`1" />의 요소를 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 형식의 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 복사한 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 요소의 대상인 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 형식의 1차원 배열입니다.배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 인덱스입니다(0부터 시작).</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Count">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에 있는 요소의 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />의 요소 수입니다.</returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />이 읽기 전용이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>컬렉션에서 키와 값을 제거합니다.</summary>
      <returns>성공적으로 키와 값을 찾아서 제거하면 true이고, 그렇지 않으면 false입니다.이 메서드는 <see cref="T:System.Collections.Generic.ICollection`1" />에 키와 값이 없는 경우 false를 반환합니다.</returns>
      <param name="item">컬렉션에서 제거할 키와 값을 나타내는 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 구조체입니다.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Add(System.String,System.Object)">
      <summary>지정한 키와 값을 사전에 추가합니다.</summary>
      <param name="key">키로 사용할 개체입니다.</param>
      <param name="value">값으로 사용할 개체입니다.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#ContainsKey(System.String)">
      <summary>사전에 지정한 키가 들어 있는지 여부를 확인합니다.</summary>
      <returns>사전에 지정된 키를 가진 요소가 포함되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="key">사전에서 찾을 수 있는 키입니다.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Item(System.String)">
      <summary>지정된 키를 갖는 요소를 가져오거나 설정합니다.</summary>
      <returns>지정된 키를 갖는 요소입니다.</returns>
      <param name="key">가져오거나 설정할 요소의 키입니다.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>
        <see cref="T:System.Collections.Generic.IDictionary`2" />의 키를 포함하는 <see cref="T:System.Collections.Generic.ICollection`1" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" />를 구현하는 개체의 키가 들어 있는 <see cref="T:System.Collections.Generic.ICollection`1" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(System.String)">
      <summary>
        <see cref="T:System.Collections.IDictionary" />에서 지정된 키를 가진 요소를 제거합니다.</summary>
      <returns>요소가 제거되면 true이고, 그렇지 않으면 false입니다.또한 이 메서드는 <paramref name="key" />가 원래 <see cref="T:System.Collections.Generic.IDictionary`2" />에 없는 경우에도 false를 반환합니다.</returns>
      <param name="key">제거할 요소의 키입니다.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#TryGetValue(System.String,System.Object@)">
      <summary>지정된 키와 연결된 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" />를 구현하는 개체에 지정된 키를 가진 요소가 포함되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="key">가져올 값의 키입니다.</param>
      <param name="value">이 메서드가 반환될 때 지정된 키가 있으면 해당 키와 연관된 값을 포함하고, 그렇지 않으면 <paramref name="value" /> 매개 변수의 형식에 대한 기본값을 포함합니다.이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>
        <see cref="T:System.Collections.Generic.IDictionary`2" />의 값을 포함하는 <see cref="T:System.Collections.Generic.ICollection`1" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" />를 구현하는 개체의 값이 들어 있는 <see cref="T:System.Collections.Generic.ICollection`1" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>컬렉션 전체에서 반복되는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션 전체에서 반복되는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="E:System.Dynamic.ExpandoObject.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>속성 값이 변경되면 발생합니다.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>제공된 MetaObject가 동적 가상 메서드에 디스패치됩니다.개체를 다른 MetaObject에 캡슐화하여 개별 작업에 대해 사용자 지정 동작을 제공할 수 있습니다.</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 형식의 개체입니다.</returns>
      <param name="parameter">동적 가상 메서드에 디스패치할 MetaObject를 나타내는 식입니다.</param>
    </member>
    <member name="T:System.Dynamic.GetIndexBinder">
      <summary>호출 사이트의 동적 인덱스 가져오기 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>
        <see cref="T:System.Dynamic.GetIndexBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="callInfo">호출 사이트의 인수 서명입니다.</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 인덱스 가져오기 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 인덱스 가져오기 연산의 대상입니다.</param>
      <param name="args">동적 인덱스 가져오기 작업의 인수 배열입니다.</param>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.CallInfo">
      <summary>호출 사이트의 인수 서명을 가져옵니다.</summary>
      <returns>호출 사이트의 인수 서명입니다.</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 인덱스 가져오기 작업의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 인덱스 가져오기 연산의 대상입니다.</param>
      <param name="indexes">동적 인덱스 가져오기 연산의 인수입니다.</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 인덱스 가져오기 작업의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 인덱스 가져오기 연산의 대상입니다.</param>
      <param name="indexes">동적 인덱스 가져오기 연산의 인수입니다.</param>
      <param name="errorSuggestion">바인딩이 실패하면 사용할 바인딩 결과 또는 null입니다.</param>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.ReturnType">
      <summary>연산의 결과 형식입니다.</summary>
      <returns>작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.GetMemberBinder">
      <summary>호출 사이트의 동적 멤버 가져오기 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>
        <see cref="T:System.Dynamic.GetMemberBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">가져올 멤버의 이름입니다.</param>
      <param name="ignoreCase">대/소문자를 무시하고 이름이 일치해야 하면 True이고, 그렇지 않으면 False입니다.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 멤버 가져오기 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 멤버 가져오기 연산의 대상입니다.</param>
      <param name="args">동적 멤버 가져오기 작업의 인수 배열입니다.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject)">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 멤버 가져오기 작업의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 멤버 가져오기 연산의 대상입니다.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 멤버 가져오기 작업의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 멤버 가져오기 연산의 대상입니다.</param>
      <param name="errorSuggestion">바인딩이 실패하면 사용할 바인딩 결과 또는 null입니다.</param>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.IgnoreCase">
      <summary>문자열 비교에서 멤버 이름의 대/소문자를 무시해야 할지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>대/소문자가 무시되면 True이고, 그렇지 않으면 False입니다.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.Name">
      <summary>가져올 멤버의 이름을 가져옵니다.</summary>
      <returns>가져올 멤버의 이름입니다.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.ReturnType">
      <summary>연산의 결과 형식입니다.</summary>
      <returns>작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.IDynamicMetaObjectProvider">
      <summary>런타임에 작업이 바인딩될 수 있는 동적 개체를 나타냅니다.</summary>
    </member>
    <member name="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>이 개체에서 바인딩 연산을 수행하는 <see cref="T:System.Dynamic.DynamicMetaObject" />를 반환합니다.</summary>
      <returns>이 개체를 바인딩할 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="parameter">런타임 값의 식 트리 표현입니다.</param>
    </member>
    <member name="T:System.Dynamic.IInvokeOnGetBinder">
      <summary>get 작업을 수행할 때 get 멤버가 속성을 호출할지 여부를 알려 주는 동적 get 멤버 작업에 대한 정보를 나타냅니다.</summary>
    </member>
    <member name="P:System.Dynamic.IInvokeOnGetBinder.InvokeOnGet">
      <summary>get 작업을 수행할 때 이 get 멤버 작업이 속성을 호출할지 여부를 알려 주는 값을 가져옵니다.이 인터페이스가 없으면 기본값은 true입니다.</summary>
      <returns>get 작업을 수행할 때 이 get 멤버 작업이 속성을 호출해야 하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="T:System.Dynamic.InvokeBinder">
      <summary>호출 사이트의 동적 호출 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>
        <see cref="T:System.Dynamic.InvokeBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="callInfo">호출 사이트의 인수 서명입니다.</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 호출 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 호출 연산의 대상입니다.</param>
      <param name="args">동적 호출 작업의 인수 배열입니다.</param>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.CallInfo">
      <summary>호출 사이트의 인수 서명을 가져옵니다.</summary>
      <returns>호출 사이트의 인수 서명입니다.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 호출 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 호출 연산의 대상입니다.</param>
      <param name="args">동적 호출 연산의 인수입니다.</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 호출 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 호출 연산의 대상입니다.</param>
      <param name="args">동적 호출 연산의 인수입니다.</param>
      <param name="errorSuggestion">바인딩이 실패하면 사용할 바인딩 결과 또는 null입니다.</param>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.ReturnType">
      <summary>연산의 결과 형식입니다.</summary>
      <returns>작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.InvokeMemberBinder">
      <summary>호출 사이트의 동적 멤버 호출 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.#ctor(System.String,System.Boolean,System.Dynamic.CallInfo)">
      <summary>
        <see cref="T:System.Dynamic.InvokeMemberBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">호출할 멤버의 이름입니다.</param>
      <param name="ignoreCase">대/소문자를 무시하고 이름이 일치해야 하면 true이고, 그렇지 않으면 false입니다.</param>
      <param name="callInfo">호출 사이트의 인수 서명입니다.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 멤버 호출 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 멤버 호출 연산의 대상입니다.</param>
      <param name="args">동적 멤버 호출 작업의 인수 배열입니다.</param>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.CallInfo">
      <summary>호출 사이트의 인수 서명을 가져옵니다.</summary>
      <returns>호출 사이트의 인수 서명입니다.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 호출 작업의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 호출 연산의 대상입니다.</param>
      <param name="args">동적 호출 연산의 인수입니다.</param>
      <param name="errorSuggestion">바인딩이 실패하면 사용할 바인딩 결과 또는 null입니다.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 멤버 호출 작업의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 멤버 호출 연산의 대상입니다.</param>
      <param name="args">동적 멤버 호출 연산의 인수입니다.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 멤버 호출 작업의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 멤버 호출 연산의 대상입니다.</param>
      <param name="args">동적 멤버 호출 연산의 인수입니다.</param>
      <param name="errorSuggestion">바인딩이 실패하면 사용할 바인딩 결과 또는 null입니다.</param>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.IgnoreCase">
      <summary>문자열 비교에서 멤버 이름의 대/소문자를 무시해야 할지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>대/소문자가 무시되면 True이고, 그렇지 않으면 False입니다.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.Name">
      <summary>호출할 멤버의 이름을 가져옵니다.</summary>
      <returns>호출할 멤버의 이름입니다.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.ReturnType">
      <summary>연산의 결과 형식입니다.</summary>
      <returns>작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.SetIndexBinder">
      <summary>호출 사이트의 동적 인덱스 설정 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>
        <see cref="T:System.Dynamic.SetIndexBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="callInfo">호출 사이트의 인수 서명입니다.</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 인덱스 설정 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 인덱스 설정 연산의 대상입니다.</param>
      <param name="args">동적 인덱스 설정 작업의 인수 배열입니다.</param>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.CallInfo">
      <summary>호출 사이트의 인수 서명을 가져옵니다.</summary>
      <returns>호출 사이트의 인수 서명입니다.</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 인덱스 설정 작업의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 인덱스 설정 연산의 대상입니다.</param>
      <param name="indexes">동적 인덱스 설정 연산의 인수입니다.</param>
      <param name="value">컬렉션에 설정할 값입니다.</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 인덱스 설정 작업의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 인덱스 설정 연산의 대상입니다.</param>
      <param name="indexes">동적 인덱스 설정 연산의 인수입니다.</param>
      <param name="value">컬렉션에 설정할 값입니다.</param>
      <param name="errorSuggestion">바인딩이 실패하면 사용할 바인딩 결과 또는 null입니다.</param>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.ReturnType">
      <summary>연산의 결과 형식입니다.</summary>
      <returns>작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.SetMemberBinder">
      <summary>호출 사이트의 동적 멤버 설정 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>
        <see cref="T:System.Dynamic.SetMemberBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">가져올 멤버의 이름입니다.</param>
      <param name="ignoreCase">대/소문자를 무시하고 이름이 일치해야 하면 True이고, 그렇지 않으면 False입니다.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 멤버 설정 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 멤버 설정 연산의 대상입니다.</param>
      <param name="args">동적 멤버 설정 작업의 인수 배열입니다.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 멤버 설정 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 멤버 설정 연산의 대상입니다.</param>
      <param name="value">멤버에 설정할 값입니다.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 멤버 설정 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 멤버 설정 연산의 대상입니다.</param>
      <param name="value">멤버에 설정할 값입니다.</param>
      <param name="errorSuggestion">바인딩이 실패하면 사용할 바인딩 결과 또는 null입니다.</param>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.IgnoreCase">
      <summary>문자열 비교에서 멤버 이름의 대/소문자를 무시해야 할지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>대/소문자가 무시되면 True이고, 그렇지 않으면 False입니다.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.Name">
      <summary>가져올 멤버의 이름을 가져옵니다.</summary>
      <returns>가져올 멤버의 이름입니다.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.ReturnType">
      <summary>연산의 결과 형식입니다.</summary>
      <returns>작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.UnaryOperationBinder">
      <summary>호출 사이트의 동적 단항 연산을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>
        <see cref="T:System.Dynamic.BinaryOperationBinder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="operation">단항 연산 종류입니다.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 단항 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 연산의 대상입니다.</param>
      <param name="args">동적 연산의 인수 배열입니다.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 단항 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 단항 연산의 대상입니다.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 단항 연산의 바인딩을 수행합니다.</summary>
      <returns>바인딩 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
      <param name="target">동적 단항 연산의 대상입니다.</param>
      <param name="errorSuggestion">바인딩이 실패한 경우 바인딩 결과 또는 null입니다.</param>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.Operation">
      <summary>단항 연산 종류입니다.</summary>
      <returns>단항 연산 종류를 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />의 개체입니다.</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.ReturnType">
      <summary>연산의 결과 형식입니다.</summary>
      <returns>작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Linq.Enumerable">
      <summary>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />을 구현하는 개체를 쿼리하기 위한 정적(Visual Basic의 경우 Shared) 메서드 집합을 제공합니다.</summary>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
      <summary>시퀀스에 누산기 함수를 적용합니다.</summary>
      <returns>최종 누산기 값입니다.</returns>
      <param name="source">집계할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="func">각 요소에서 호출될 누산기 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="func" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
      <summary>시퀀스에 누산기 함수를 적용합니다.지정된 시드 값은 초기 누적기 값으로 사용됩니다.</summary>
      <returns>최종 누산기 값입니다.</returns>
      <param name="source">집계할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="seed">초기 누산기 값입니다.</param>
      <param name="func">각 요소에서 호출될 누산기 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TAccumulate">누산기 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="func" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>시퀀스에 누산기 함수를 적용합니다.지정된 시드 값은 초기 누적기 값으로 사용되고 지정된 함수는 결과 값을 선택하는 데 사용됩니다.</summary>
      <returns>변형된 최종 누산기 값입니다.</returns>
      <param name="source">집계할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="seed">초기 누산기 값입니다.</param>
      <param name="func">각 요소에서 호출될 누산기 함수입니다.</param>
      <param name="resultSelector">최종 누산기 값을 결과 값으로 변형하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TAccumulate">누산기 값의 형식입니다.</typeparam>
      <typeparam name="TResult">결과 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="func" /> 또는 <paramref name="resultSelector" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>시퀀스의 모든 요소가 특정 조건에 맞는지 확인합니다.</summary>
      <returns>소스 시퀀스의 모든 요소가 지정된 조건자의 테스트를 통과하거나 시퀀스가 비어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="source">조건자를 적용할 요소를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>시퀀스에 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <returns>소스 시퀀스에 요소가 하나라도 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="source">비어 있음을 확인할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>시퀀스의 요소가 조건을 충족하는지 여부를 확인합니다.</summary>
      <returns>소스 시퀀스의 요소가 하나라도 지정된 조건자의 테스트를 통과하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="source">조건자를 적용할 요소를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />로 형식이 지정된 입력을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />로 형식화된 입력 시퀀스입니다.</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />로 형식을 지정할 시퀀스입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
        <see cref="T:System.Decimal" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다.</returns>
      <param name="source">평균을 계산할 <see cref="T:System.Decimal" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
        <see cref="T:System.Double" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다.</returns>
      <param name="source">평균을 계산할 <see cref="T:System.Double" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
        <see cref="T:System.Int32" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다.</returns>
      <param name="source">평균을 계산할 <see cref="T:System.Int32" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
        <see cref="T:System.Int64" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다.</returns>
      <param name="source">평균을 계산할 <see cref="T:System.Int64" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>nullable <see cref="T:System.Decimal" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다. 또는 소스 시퀀스가 비어 있거나 null인 값만 포함하는 경우 null입니다.</returns>
      <param name="source">평균을 계산할 nullable <see cref="T:System.Decimal" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.OverflowException">시퀀스에 있는 요소의 합계가 <see cref="F:System.Decimal.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>nullable <see cref="T:System.Double" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다. 또는 소스 시퀀스가 비어 있거나 null인 값만 포함하는 경우 null입니다.</returns>
      <param name="source">평균을 계산할 nullable <see cref="T:System.Double" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>nullable <see cref="T:System.Int32" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다. 또는 소스 시퀀스가 비어 있거나 null인 값만 포함하는 경우 null입니다.</returns>
      <param name="source">평균을 계산할 nullable <see cref="T:System.Int32" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.OverflowException">시퀀스에 있는 요소의 합계가 <see cref="F:System.Int64.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>nullable <see cref="T:System.Int64" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다. 또는 소스 시퀀스가 비어 있거나 null인 값만 포함하는 경우 null입니다.</returns>
      <param name="source">평균을 계산할 nullable <see cref="T:System.Int64" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.OverflowException">시퀀스에 있는 요소의 합계가 <see cref="F:System.Int64.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>nullable <see cref="T:System.Single" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다. 또는 소스 시퀀스가 비어 있거나 null인 값만 포함하는 경우 null입니다.</returns>
      <param name="source">평균을 계산할 nullable <see cref="T:System.Single" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
        <see cref="T:System.Single" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다.</returns>
      <param name="source">평균을 계산할 <see cref="T:System.Single" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>입력 시퀀스의 각 요소에서 변형 함수를 호출하여 가져온 <see cref="T:System.Decimal" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다.</returns>
      <param name="source">평균을 계산하는 데 사용되는 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
      <exception cref="T:System.OverflowException">시퀀스에 있는 요소의 합계가 <see cref="F:System.Decimal.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>입력 시퀀스의 각 요소에서 변형 함수를 호출하여 가져온 <see cref="T:System.Double" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다.</returns>
      <param name="source">평균을 계산할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>입력 시퀀스의 각 요소에서 변형 함수를 호출하여 가져온 <see cref="T:System.Int32" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다.</returns>
      <param name="source">평균을 계산할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
      <exception cref="T:System.OverflowException">시퀀스에 있는 요소의 합계가 <see cref="F:System.Int64.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>입력 시퀀스의 각 요소에서 변형 함수를 호출하여 가져온 <see cref="T:System.Int64" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다.</returns>
      <param name="source">평균을 계산할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">소스 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
      <exception cref="T:System.OverflowException">시퀀스에 있는 요소의 합계가 <see cref="F:System.Int64.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>입력 시퀀스의 각 요소에서 변형 함수를 호출하여 가져온 <see cref="T:System.Decimal" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다. 또는 소스 시퀀스가 비어 있거나 null인 값만 포함하는 경우 null입니다.</returns>
      <param name="source">평균을 계산할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.OverflowException">시퀀스에 있는 요소의 합계가 <see cref="F:System.Decimal.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>입력 시퀀스의 각 요소에서 변형 함수를 호출하여 가져온 <see cref="T:System.Double" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다. 또는 소스 시퀀스가 비어 있거나 null인 값만 포함하는 경우 null입니다.</returns>
      <param name="source">평균을 계산할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>입력 시퀀스의 각 요소에서 변형 함수를 호출하여 가져온 <see cref="T:System.Int32" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다. 또는 소스 시퀀스가 비어 있거나 null인 값만 포함하는 경우 null입니다.</returns>
      <param name="source">평균을 계산할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.OverflowException">시퀀스에 있는 요소의 합계가 <see cref="F:System.Int64.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>입력 시퀀스의 각 요소에서 변형 함수를 호출하여 가져온 <see cref="T:System.Int64" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다. 또는 소스 시퀀스가 비어 있거나 null인 값만 포함하는 경우 null입니다.</returns>
      <param name="source">평균을 계산할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>입력 시퀀스의 각 요소에서 변형 함수를 호출하여 가져온 <see cref="T:System.Single" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다. 또는 소스 시퀀스가 비어 있거나 null인 값만 포함하는 경우 null입니다.</returns>
      <param name="source">평균을 계산할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>입력 시퀀스의 각 요소에서 변형 함수를 호출하여 가져온 <see cref="T:System.Single" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다.</returns>
      <param name="source">평균을 계산할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
      <summary>
        <see cref="T:System.Collections.IEnumerable" />의 요소를 지정된 형식으로 변환합니다.</summary>
      <returns>지정된 형식으로 변환된 소스 시퀀스의 각 요소가 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="source">변환될 요소를 포함하는 <see cref="T:System.Collections.IEnumerable" />입니다.</param>
      <typeparam name="TResult">
        <paramref name="source" />의 요소를 변환할 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidCastException">시퀀스의 요소를 <paramref name="TResult" /> 형식으로 캐스팅할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>두 시퀀스를 연결합니다.</summary>
      <returns>두 입력 시퀀스의 연결된 요소가 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="first">연결할 첫 번째 시퀀스입니다.</param>
      <param name="second">첫 번째 시퀀스에 연결할 시퀀스입니다.</param>
      <typeparam name="TSource">입력 시퀀스의 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 또는 <paramref name="second" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>기본 같음 비교자를 사용하여 시퀀스에 지정된 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <returns>소스 시퀀스에 지정된 값을 가진 요소가 포함되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="source">값을 찾을 시퀀스입니다.</param>
      <param name="value">시퀀스에서 찾을 값입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>지정된 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />을 사용하여 시퀀스에 지정된 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <returns>소스 시퀀스에 지정된 값을 가진 요소가 포함되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="source">값을 찾을 시퀀스입니다.</param>
      <param name="value">시퀀스에서 찾을 값입니다.</param>
      <param name="comparer">값을 비교할 같음 비교자입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>시퀀스에 있는 요소의 수를 반환합니다.</summary>
      <returns>입력 시퀀스에 있는 요소의 수입니다.</returns>
      <param name="source">개수를 셀 요소가 들어 있는 시퀀스입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />에 있는 요소의 수가 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>지정된 시퀀스에서 특정 조건에 맞는 요소 수를 나타내는 숫자를 반환합니다.</summary>
      <returns>시퀀스에서 조건자 함수의 조건을 충족하는 요소의 수를 나타내는 수입니다.</returns>
      <param name="source">테스트하여 개수를 셀 요소가 들어 있는 시퀀스입니다.</param>
      <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />에 있는 요소의 수가 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>지정된 시퀀스의 요소를 반환하거나, 시퀀스가 비어 있으면 Singleton 컬렉션의 형식 매개 변수의 기본값을 반환합니다.</summary>
      <returns>
        <paramref name="source" />가 비어 있으면 <paramref name="TSource" /> 형식에 대한 기본값이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 개체이고, 그렇지 않으면 <paramref name="source" />입니다.</returns>
      <param name="source">비어 있는 경우 기본값을 반환할 시퀀스입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>지정된 시퀀스의 요소를 반환하거나, 시퀀스가 비어 있으면 Singleton 컬렉션의 지정된 값을 반환합니다.</summary>
      <returns>
        <paramref name="source" />가 비어 있으면 <paramref name="defaultValue" />가 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />이고, 그렇지 않으면 <paramref name="source" />입니다.</returns>
      <param name="source">비어 있는 경우 지정된 값을 반환할 시퀀스입니다.</param>
      <param name="defaultValue">시퀀스가 비어 있는 경우 반환할 값입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>기본 같음 비교자로 값을 비교하여 시퀀스에서 고유 요소를 반환합니다.</summary>
      <returns>소스 시퀀스의 고유 요소를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="source">중복 요소를 제거할 시퀀스입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>지정된 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />로 값을 비교하여 시퀀스에서 고유 요소를 반환합니다.</summary>
      <returns>소스 시퀀스의 고유 요소를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="source">중복 요소를 제거할 시퀀스입니다.</param>
      <param name="comparer">값을 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>시퀀스에서 지정된 인덱스의 요소를 반환합니다.</summary>
      <returns>소스 시퀀스에서 지정된 위치의 요소입니다.</returns>
      <param name="source">요소를 반환할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="index">검색할 요소의 인덱스입니다(0부터 시작).</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작거나 <paramref name="source" />의 요소 수보다 크거나 같은 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>시퀀스에서 지정된 인덱스의 요소를 반환하거나, 인덱스가 범위를 벗어나면 기본값을 반환합니다.</summary>
      <returns>인덱스가 소스 시퀀스의 범위를 벗어나면 기본값(<paramref name="TSource" />)이고, 그렇지 않으면 소스 시퀀스에서 지정된 위치에 있는 요소입니다.</returns>
      <param name="source">요소를 반환할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="index">검색할 요소의 인덱스입니다(0부터 시작).</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Empty``1">
      <summary>지정된 형식 인수를 갖는 빈 <see cref="T:System.Collections.Generic.IEnumerable`1" />을 반환합니다.</summary>
      <returns>해당 형식 인수가 <paramref name="TResult" />인 빈 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <typeparam name="TResult">반환된 제네릭 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 형식 매개 변수에 할당할 형식입니다.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>기본 같음 비교자로 값을 비교하여 두 시퀀스의 차집합을 구합니다.</summary>
      <returns>두 시퀀스 요소의 차집합을 포함하는 시퀀스입니다.</returns>
      <param name="first">
        <paramref name="second" />에는 없는 요소가 반환될 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="second">첫 번째 시퀀스에도 있는 요소가 반환된 시퀀스에서 해당 요소를 제거하게 할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <typeparam name="TSource">입력 시퀀스의 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 또는 <paramref name="second" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>지정된 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />로 값을 비교하여 두 시퀀스의 차집합을 구합니다.</summary>
      <returns>두 시퀀스 요소의 차집합을 포함하는 시퀀스입니다.</returns>
      <param name="first">
        <paramref name="second" />에는 없는 요소가 반환될 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="second">첫 번째 시퀀스에도 있는 요소가 반환된 시퀀스에서 해당 요소를 제거하게 할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="comparer">값을 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TSource">입력 시퀀스의 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 또는 <paramref name="second" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>시퀀스의 첫 번째 요소를 반환합니다.</summary>
      <returns>지정된 시퀀스의 첫 번째 요소입니다.</returns>
      <param name="source">첫 번째 요소를 반환할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">소스 시퀀스가 비어 있습니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>시퀀스에서 지정된 조건에 맞는 첫 번째 요소를 반환합니다.</summary>
      <returns>시퀀스에서 지정된 조건자 함수의 테스트를 통과하는 첫 번째 요소입니다.</returns>
      <param name="source">요소를 반환할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" />의 조건에 맞는 요소가 없는 경우-또는-소스 시퀀스가 비어 있습니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>시퀀스의 첫 번째 요소를 반환합니다. 시퀀스에 요소가 없으면 기본값을 반환합니다.</summary>
      <returns>
        <paramref name="source" />가 비어 있으면 default(<paramref name="TSource" />)이고, 그렇지 않으면 <paramref name="source" />의 첫 번째 요소입니다.</returns>
      <param name="source">첫 번째 요소를 반환할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>시퀀스에서 특정 조건에 맞는 첫 번째 요소를 반환하거나, 이러한 요소가 없으면 기본값을 반환합니다.</summary>
      <returns>
        <paramref name="source" />가 비어 있거나 <paramref name="predicate" />에 지정된 테스트를 통과하는 요소가 없으면 default(<paramref name="TSource" />)이고, 그렇지 않으면 <paramref name="source" />에서 <paramref name="predicate" />에 지정된 테스트를 통과하는 첫 번째 요소입니다.</returns>
      <param name="source">요소를 반환할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>지정된 키 선택기 함수에 따라 시퀀스의 요소를 그룹화합니다.</summary>
      <returns>각 <see cref="T:System.Linq.IGrouping`2" /> 개체가 개체 및 키의 시퀀스를 포함하는 IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;(C#의 경우) 또는 IEnumerable(Of IGrouping(Of TKey, TSource))(Visual Basic의 경우)입니다.</returns>
      <param name="source">요소를 그룹화할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>지정된 키 선택기 함수에 따라 시퀀스의 요소를 그룹화하고 지정된 비교자를 사용하여 키를 비교합니다.</summary>
      <returns>각 <see cref="T:System.Linq.IGrouping`2" /> 개체가 개체 및 키의 컬렉션을 포함하는 IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;(C#의 경우) 또는 IEnumerable(Of IGrouping(Of TKey, TSource))(Visual Basic의 경우)입니다.</returns>
      <param name="source">요소를 그룹화할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>지정된 키 선택기 함수에 따라 시퀀스의 요소를 그룹화하고 지정된 함수를 사용하여 각 그룹의 요소를 프로젝션합니다.</summary>
      <returns>각 <see cref="T:System.Linq.IGrouping`2" /> 개체가 <paramref name="TElement" /> 형식의 개체 및 키의 컬렉션을 포함하는 IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;(C#의 경우) 또는 IEnumerable(Of IGrouping(Of TKey, TElement))(Visual Basic의 경우)입니다.</returns>
      <param name="source">요소를 그룹화할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
      <param name="elementSelector">각 소스 요소를 <see cref="T:System.Linq.IGrouping`2" />의 요소에 매핑하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.IGrouping`2" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" /> 또는 <paramref name="elementSelector" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>키 선택기 함수에 따라 시퀀스의 요소를 그룹화합니다.키는 비교자를 통해 비교되고 각 그룹의 요소는 지정된 함수를 통해 투영됩니다.</summary>
      <returns>각 <see cref="T:System.Linq.IGrouping`2" /> 개체가 <paramref name="TElement" /> 형식의 개체 및 키의 컬렉션을 포함하는 IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;(C#의 경우) 또는 IEnumerable(Of IGrouping(Of TKey, TElement))(Visual Basic의 경우)입니다.</returns>
      <param name="source">요소를 그룹화할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
      <param name="elementSelector">각 소스 요소를 <see cref="T:System.Linq.IGrouping`2" />의 요소에 매핑하는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.IGrouping`2" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" /> 또는 <paramref name="elementSelector" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>지정된 키 선택기 함수에 따라 시퀀스의 요소를 그룹화하고 각 그룹 및 해당 키에서 결과 값을 만듭니다.각 그룹의 요소는 지정된 함수를 통해 투영됩니다.</summary>
      <returns>각 요소가 그룹과 해당 키에 대한 프로젝션을 나타내는 <paramref name="TResult" /> 형식의 요소 컬렉션입니다.</returns>
      <param name="source">요소를 그룹화할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
      <param name="elementSelector">각 소스 요소를 <see cref="T:System.Linq.IGrouping`2" />의 요소에 매핑하는 함수입니다.</param>
      <param name="resultSelector">각 그룹에서 결과 값을 만드는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <typeparam name="TElement">각 <see cref="T:System.Linq.IGrouping`2" />에 있는 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" />에서 반환하는 결과 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>지정된 키 선택기 함수에 따라 시퀀스의 요소를 그룹화하고 각 그룹 및 해당 키에서 결과 값을 만듭니다.키 값은 지정된 비교자를 통해 비교되고 각 그룹의 요소는 지정된 함수를 통해 투영됩니다.</summary>
      <returns>각 요소가 그룹과 해당 키에 대한 프로젝션을 나타내는 <paramref name="TResult" /> 형식의 요소 컬렉션입니다.</returns>
      <param name="source">요소를 그룹화할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
      <param name="elementSelector">각 소스 요소를 <see cref="T:System.Linq.IGrouping`2" />의 요소에 매핑하는 함수입니다.</param>
      <param name="resultSelector">각 그룹에서 결과 값을 만드는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <typeparam name="TElement">각 <see cref="T:System.Linq.IGrouping`2" />에 있는 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" />에서 반환하는 결과 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>지정된 키 선택기 함수에 따라 시퀀스의 요소를 그룹화하고 각 그룹 및 해당 키에서 결과 값을 만듭니다.</summary>
      <returns>각 요소가 그룹과 해당 키에 대한 프로젝션을 나타내는 <paramref name="TResult" /> 형식의 요소 컬렉션입니다.</returns>
      <param name="source">요소를 그룹화할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
      <param name="resultSelector">각 그룹에서 결과 값을 만드는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" />에서 반환하는 결과 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>지정된 키 선택기 함수에 따라 시퀀스의 요소를 그룹화하고 각 그룹 및 해당 키에서 결과 값을 만듭니다.키는 지정된 비교자를 통해 비교됩니다.</summary>
      <returns>각 요소가 그룹과 해당 키에 대한 프로젝션을 나타내는 <paramref name="TResult" /> 형식의 요소 컬렉션입니다.</returns>
      <param name="source">요소를 그룹화할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
      <param name="resultSelector">각 그룹에서 결과 값을 만드는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" />에서 반환하는 결과 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>키가 같은지 여부에 따라 두 시퀀스의 요소를 연관시키고 결과를 그룹화합니다.기본 같음 비교자를 사용하여 키를 비교합니다.</summary>
      <returns>두 시퀀스에 대해 그룹화 조인을 수행하여 가져온 <paramref name="TResult" /> 형식 요소가 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="outer">조인할 첫 번째 시퀀스입니다.</param>
      <param name="inner">첫 번째 시퀀스에 조인할 시퀀스입니다.</param>
      <param name="outerKeySelector">첫 번째 시퀀스의 각 요소에서 조인 키를 추출하는 함수입니다.</param>
      <param name="innerKeySelector">두 번째 시퀀스의 각 요소에서 조인 키를 추출하는 함수입니다.</param>
      <param name="resultSelector">첫 번째 시퀀스의 요소와 두 번째 시퀀스의 일치하는 요소 컬렉션에서 결과 요소를 만드는 함수입니다.</param>
      <typeparam name="TOuter">첫 번째 시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TInner">두 번째 시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TKey">키 선택기 함수에서 반환되는 키의 형식입니다.</typeparam>
      <typeparam name="TResult">결과 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 또는 <paramref name="inner" /> 또는 <paramref name="outerKeySelector" /> 또는 <paramref name="innerKeySelector" /> 또는 <paramref name="resultSelector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>키가 같은지 여부에 따라 두 시퀀스의 요소를 연관시키고 결과를 그룹화합니다.지정된 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />를 사용하여 키를 비교합니다.</summary>
      <returns>두 시퀀스에 대해 그룹화 조인을 수행하여 가져온 <paramref name="TResult" /> 형식 요소가 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="outer">조인할 첫 번째 시퀀스입니다.</param>
      <param name="inner">첫 번째 시퀀스에 조인할 시퀀스입니다.</param>
      <param name="outerKeySelector">첫 번째 시퀀스의 각 요소에서 조인 키를 추출하는 함수입니다.</param>
      <param name="innerKeySelector">두 번째 시퀀스의 각 요소에서 조인 키를 추출하는 함수입니다.</param>
      <param name="resultSelector">첫 번째 시퀀스의 요소와 두 번째 시퀀스의 일치하는 요소 컬렉션에서 결과 요소를 만드는 함수입니다.</param>
      <param name="comparer">키를 해시하고 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TOuter">첫 번째 시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TInner">두 번째 시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TKey">키 선택기 함수에서 반환되는 키의 형식입니다.</typeparam>
      <typeparam name="TResult">결과 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 또는 <paramref name="inner" /> 또는 <paramref name="outerKeySelector" /> 또는 <paramref name="innerKeySelector" /> 또는 <paramref name="resultSelector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>기본 같음 비교자로 값을 비교하여 두 시퀀스의 교집합을 구합니다.</summary>
      <returns>두 시퀀스 요소의 차집합을 형성하는 요소를 포함하는 시퀀스입니다.</returns>
      <param name="first">
        <paramref name="second" />에도 있는 고유 요소가 반환될 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="second">첫 번째 시퀀스에도 있는 고유 요소가 반환될 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <typeparam name="TSource">입력 시퀀스의 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 또는 <paramref name="second" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>지정된 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />로 값을 비교하여 두 시퀀스의 교집합을 구합니다.</summary>
      <returns>두 시퀀스 요소의 차집합을 형성하는 요소를 포함하는 시퀀스입니다.</returns>
      <param name="first">
        <paramref name="second" />에도 있는 고유 요소가 반환될 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="second">첫 번째 시퀀스에도 있는 고유 요소가 반환될 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="comparer">값을 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TSource">입력 시퀀스의 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 또는 <paramref name="second" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>일치하는 키를 기준으로 두 시퀀스의 요소를 연관시킵니다.기본 같음 비교자를 사용하여 키를 비교합니다.</summary>
      <returns>두 시퀀스에 대해 내부 조인을 수행하여 가져온 <paramref name="TResult" /> 형식 요소가 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="outer">조인할 첫 번째 시퀀스입니다.</param>
      <param name="inner">첫 번째 시퀀스에 조인할 시퀀스입니다.</param>
      <param name="outerKeySelector">첫 번째 시퀀스의 각 요소에서 조인 키를 추출하는 함수입니다.</param>
      <param name="innerKeySelector">두 번째 시퀀스의 각 요소에서 조인 키를 추출하는 함수입니다.</param>
      <param name="resultSelector">일치하는 두 요소에서 결과 요소를 만드는 함수입니다.</param>
      <typeparam name="TOuter">첫 번째 시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TInner">두 번째 시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TKey">키 선택기 함수에서 반환되는 키의 형식입니다.</typeparam>
      <typeparam name="TResult">결과 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 또는 <paramref name="inner" /> 또는 <paramref name="outerKeySelector" /> 또는 <paramref name="innerKeySelector" /> 또는 <paramref name="resultSelector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>일치하는 키를 기준으로 두 시퀀스의 요소를 연관시킵니다.지정된 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />를 사용하여 키를 비교합니다.</summary>
      <returns>두 시퀀스에 대해 내부 조인을 수행하여 가져온 <paramref name="TResult" /> 형식 요소가 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="outer">조인할 첫 번째 시퀀스입니다.</param>
      <param name="inner">첫 번째 시퀀스에 조인할 시퀀스입니다.</param>
      <param name="outerKeySelector">첫 번째 시퀀스의 각 요소에서 조인 키를 추출하는 함수입니다.</param>
      <param name="innerKeySelector">두 번째 시퀀스의 각 요소에서 조인 키를 추출하는 함수입니다.</param>
      <param name="resultSelector">일치하는 두 요소에서 결과 요소를 만드는 함수입니다.</param>
      <param name="comparer">키를 해시하고 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TOuter">첫 번째 시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TInner">두 번째 시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TKey">키 선택기 함수에서 반환되는 키의 형식입니다.</typeparam>
      <typeparam name="TResult">결과 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 또는 <paramref name="inner" /> 또는 <paramref name="outerKeySelector" /> 또는 <paramref name="innerKeySelector" /> 또는 <paramref name="resultSelector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>시퀀스의 마지막 요소를 반환합니다.</summary>
      <returns>소스 시퀀스에서 마지막 위치에 있는 값입니다.</returns>
      <param name="source">마지막 요소를 반환할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">소스 시퀀스가 비어 있습니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>지정된 조건을 충족하는 시퀀스의 마지막 요소를 반환합니다.</summary>
      <returns>시퀀스에서 지정된 조건자 함수의 테스트를 통과하는 마지막 요소입니다.</returns>
      <param name="source">요소를 반환할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" />의 조건에 맞는 요소가 없는 경우-또는-소스 시퀀스가 비어 있습니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>시퀀스의 마지막 요소를 반환하거나, 시퀀스에 요소가 없으면 기본값을 반환합니다.</summary>
      <returns>소스 시퀀스가 비어 있으면 기본값(<paramref name="TSource" />)이고, 그렇지 않으면 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 마지막 요소입니다.</returns>
      <param name="source">마지막 요소를 반환할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>시퀀스에서 조건을 충족하는 마지막 요소를 반환합니다. 시퀀스에 그러한 요소가 없으면 기본값을 반환합니다.</summary>
      <returns>시퀀스가 비어 있거나 조건자 함수의 테스트를 통과하는 요소가 없으면 기본값(<paramref name="TSource" />)이고, 그렇지 않으면 조건자 함수의 테스트를 통과하는 마지막 요소입니다.</returns>
      <param name="source">요소를 반환할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>시퀀스의 총 요소 수를 나타내는 <see cref="T:System.Int64" />를 반환합니다.</summary>
      <returns>소스 시퀀스의 요소 수입니다.</returns>
      <param name="source">개수를 셀 요소를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.OverflowException">요소의 수가 <see cref="F:System.Int64.MaxValue" />를 초과합니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>시퀀스에서 조건을 충족하는 요소의 수를 나타내는 <see cref="T:System.Int64" />를 반환합니다.</summary>
      <returns>시퀀스에서 조건자 함수의 조건을 충족하는 요소의 수를 나타내는 수입니다.</returns>
      <param name="source">개수를 셀 요소를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
      <exception cref="T:System.OverflowException">일치하는 요소의 수가 <see cref="F:System.Int64.MaxValue" />를 초과합니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
        <see cref="T:System.Decimal" /> 값의 시퀀스에서 최대값을 반환합니다.</summary>
      <returns>시퀀스의 최대값입니다.</returns>
      <param name="source">최대값을 확인할 <see cref="T:System.Decimal" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
        <see cref="T:System.Double" /> 값의 시퀀스에서 최대값을 반환합니다.</summary>
      <returns>시퀀스의 최대값입니다.</returns>
      <param name="source">최대값을 확인할 <see cref="T:System.Double" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
        <see cref="T:System.Int32" /> 값의 시퀀스에서 최대값을 반환합니다.</summary>
      <returns>시퀀스의 최대값입니다.</returns>
      <param name="source">최대값을 확인할 <see cref="T:System.Int32" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
        <see cref="T:System.Int64" /> 값의 시퀀스에서 최대값을 반환합니다.</summary>
      <returns>시퀀스의 최대값입니다.</returns>
      <param name="source">최대값을 확인할 <see cref="T:System.Int64" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>nullable <see cref="T:System.Decimal" /> 값의 시퀀스에서 최대값을 반환합니다.</summary>
      <returns>시퀀스의 최대값에 해당하는 Nullable&lt;Decimal&gt; 형식(C#) 또는 Nullable(Of Decimal) 형식(Visual Basic의 경우) 값입니다.</returns>
      <param name="source">최대값을 확인할 nullable <see cref="T:System.Decimal" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>nullable <see cref="T:System.Double" /> 값의 시퀀스에서 최대값을 반환합니다.</summary>
      <returns>시퀀스의 최대값에 해당하는 Nullable&lt;Double&gt; 형식(C#) 또는 Nullable(Of Double) 형식(Visual Basic의 경우) 값입니다.</returns>
      <param name="source">최대값을 확인할 nullable <see cref="T:System.Double" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>nullable <see cref="T:System.Int32" /> 값의 시퀀스에서 최대값을 반환합니다.</summary>
      <returns>시퀀스의 최대값에 해당하는 Nullable&lt;Int32&gt; 형식(C#) 또는 Nullable(Of Int32) 형식(Visual Basic의 경우) 값입니다.</returns>
      <param name="source">최대값을 확인할 nullable <see cref="T:System.Int32" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>nullable <see cref="T:System.Int64" /> 값의 시퀀스에서 최대값을 반환합니다.</summary>
      <returns>시퀀스의 최대값에 해당하는 Nullable&lt;Int64&gt; 형식(C#) 또는 Nullable(Of Int64) 형식(Visual Basic의 경우) 값입니다.</returns>
      <param name="source">최대값을 확인할 nullable <see cref="T:System.Int64" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>nullable <see cref="T:System.Single" /> 값의 시퀀스에서 최대값을 반환합니다.</summary>
      <returns>시퀀스의 최대값에 해당하는 Nullable&lt;Single&gt; 형식(C#) 또는 Nullable(Of Single) 형식(Visual Basic의 경우) 값입니다.</returns>
      <param name="source">최대값을 확인할 nullable <see cref="T:System.Single" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
        <see cref="T:System.Single" /> 값의 시퀀스에서 최대값을 반환합니다.</summary>
      <returns>시퀀스의 최대값입니다.</returns>
      <param name="source">최대값을 확인할 <see cref="T:System.Single" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>제네릭 시퀀스의 최대값을 반환합니다.</summary>
      <returns>시퀀스의 최대값입니다.</returns>
      <param name="source">최대값을 확인할 값 시퀀스입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>시퀀스의 각 요소에서 변형 함수를 호출하고 최대 <see cref="T:System.Decimal" /> 값을 반환합니다.</summary>
      <returns>시퀀스의 최대값입니다.</returns>
      <param name="source">최대값을 확인할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>시퀀스의 각 요소에서 변형 함수를 호출하고 최대 <see cref="T:System.Double" /> 값을 반환합니다.</summary>
      <returns>시퀀스의 최대값입니다.</returns>
      <param name="source">최대값을 확인할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>시퀀스의 각 요소에서 변형 함수를 호출하고 최대 <see cref="T:System.Int32" /> 값을 반환합니다.</summary>
      <returns>시퀀스의 최대값입니다.</returns>
      <param name="source">최대값을 확인할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>시퀀스의 각 요소에서 변형 함수를 호출하고 최대 <see cref="T:System.Int64" /> 값을 반환합니다.</summary>
      <returns>시퀀스의 최대값입니다.</returns>
      <param name="source">최대값을 확인할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>시퀀스의 각 요소에서 변형 함수를 호출하고 최대 nullable <see cref="T:System.Decimal" /> 값을 반환합니다.</summary>
      <returns>시퀀스의 최대값에 해당하는 Nullable&lt;Decimal&gt; 형식(C#) 또는 Nullable(Of Decimal) 형식(Visual Basic의 경우) 값입니다.</returns>
      <param name="source">최대값을 확인할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>시퀀스의 각 요소에서 변형 함수를 호출하고 최대 nullable <see cref="T:System.Double" /> 값을 반환합니다.</summary>
      <returns>시퀀스의 최대값에 해당하는 Nullable&lt;Double&gt; 형식(C#) 또는 Nullable(Of Double) 형식(Visual Basic의 경우) 값입니다.</returns>
      <param name="source">최대값을 확인할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>시퀀스의 각 요소에서 변형 함수를 호출하고 최대 nullable <see cref="T:System.Int32" /> 값을 반환합니다.</summary>
      <returns>시퀀스의 최대값에 해당하는 Nullable&lt;Int32&gt; 형식(C#) 또는 Nullable(Of Int32) 형식(Visual Basic의 경우) 값입니다.</returns>
      <param name="source">최대값을 확인할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>시퀀스의 각 요소에서 변형 함수를 호출하고 최대 nullable <see cref="T:System.Int64" /> 값을 반환합니다.</summary>
      <returns>시퀀스의 최대값에 해당하는 Nullable&lt;Int64&gt; 형식(C#) 또는 Nullable(Of Int64) 형식(Visual Basic의 경우) 값입니다.</returns>
      <param name="source">최대값을 확인할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>시퀀스의 각 요소에서 변형 함수를 호출하고 최대 nullable <see cref="T:System.Single" /> 값을 반환합니다.</summary>
      <returns>시퀀스의 최대값에 해당하는 Nullable&lt;Single&gt; 형식(C#) 또는 Nullable(Of Single) 형식(Visual Basic의 경우) 값입니다.</returns>
      <param name="source">최대값을 확인할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>시퀀스의 각 요소에서 변형 함수를 호출하고 최대 <see cref="T:System.Single" /> 값을 반환합니다.</summary>
      <returns>시퀀스의 최대값입니다.</returns>
      <param name="source">최대값을 확인할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>제네릭 시퀀스의 각 요소에 대해 변환 함수를 호출하고 최대 결과 값을 반환합니다.</summary>
      <returns>시퀀스의 최대값입니다.</returns>
      <param name="source">최대값을 확인할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" />에서 반환하는 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
        <see cref="T:System.Decimal" /> 값의 시퀀스에서 최소값을 반환합니다.</summary>
      <returns>시퀀스의 최소값입니다.</returns>
      <param name="source">최소값을 확인할 <see cref="T:System.Decimal" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
        <see cref="T:System.Double" /> 값의 시퀀스에서 최소값을 반환합니다.</summary>
      <returns>시퀀스의 최소값입니다.</returns>
      <param name="source">최소값을 확인할 <see cref="T:System.Double" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
        <see cref="T:System.Int32" /> 값의 시퀀스에서 최소값을 반환합니다.</summary>
      <returns>시퀀스의 최소값입니다.</returns>
      <param name="source">최소값을 확인할 <see cref="T:System.Int32" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
        <see cref="T:System.Int64" /> 값의 시퀀스에서 최소값을 반환합니다.</summary>
      <returns>시퀀스의 최소값입니다.</returns>
      <param name="source">최소값을 확인할 <see cref="T:System.Int64" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>nullable <see cref="T:System.Decimal" /> 값의 시퀀스에서 최소값을 반환합니다.</summary>
      <returns>시퀀스의 최소값에 해당하는 Nullable&lt;Decimal&gt; 형식(C#) 또는 Nullable(Of Decimal) 형식(Visual Basic의 경우) 값입니다.</returns>
      <param name="source">최소값을 확인할 nullable <see cref="T:System.Decimal" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>nullable <see cref="T:System.Double" /> 값의 시퀀스에서 최소값을 반환합니다.</summary>
      <returns>시퀀스의 최소값에 해당하는 Nullable&lt;Double&gt; 형식(C#) 또는 Nullable(Of Double) 형식(Visual Basic의 경우) 값입니다.</returns>
      <param name="source">최소값을 확인할 nullable <see cref="T:System.Double" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>nullable <see cref="T:System.Int32" /> 값의 시퀀스에서 최소값을 반환합니다.</summary>
      <returns>시퀀스의 최소값에 해당하는 Nullable&lt;Int32&gt; 형식(C#) 또는 Nullable(Of Int32) 형식(Visual Basic의 경우) 값입니다.</returns>
      <param name="source">최소값을 확인할 nullable <see cref="T:System.Int32" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>nullable <see cref="T:System.Int64" /> 값의 시퀀스에서 최소값을 반환합니다.</summary>
      <returns>시퀀스의 최소값에 해당하는 Nullable&lt;Int64&gt; 형식(C#) 또는 Nullable(Of Int64) 형식(Visual Basic의 경우) 값입니다.</returns>
      <param name="source">최소값을 확인할 nullable <see cref="T:System.Int64" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>nullable <see cref="T:System.Single" /> 값의 시퀀스에서 최소값을 반환합니다.</summary>
      <returns>시퀀스의 최소값에 해당하는 Nullable&lt;Single&gt; 형식(C#) 또는 Nullable(Of Single) 형식(Visual Basic의 경우) 값입니다.</returns>
      <param name="source">최소값을 확인할 nullable <see cref="T:System.Single" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
        <see cref="T:System.Single" /> 값의 시퀀스에서 최소값을 반환합니다.</summary>
      <returns>시퀀스의 최소값입니다.</returns>
      <param name="source">최소값을 확인할 <see cref="T:System.Single" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>제네릭 시퀀스의 최소값을 반환합니다.</summary>
      <returns>시퀀스의 최소값입니다.</returns>
      <param name="source">최소값을 확인할 값 시퀀스입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>시퀀스의 각 요소에서 변형 함수를 호출하고 최소 <see cref="T:System.Decimal" /> 값을 반환합니다.</summary>
      <returns>시퀀스의 최소값입니다.</returns>
      <param name="source">최소값을 확인할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>시퀀스의 각 요소에서 변형 함수를 호출하고 최소 <see cref="T:System.Double" /> 값을 반환합니다.</summary>
      <returns>시퀀스의 최소값입니다.</returns>
      <param name="source">최소값을 확인할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>시퀀스의 각 요소에서 변형 함수를 호출하고 최소 <see cref="T:System.Int32" /> 값을 반환합니다.</summary>
      <returns>시퀀스의 최소값입니다.</returns>
      <param name="source">최소값을 확인할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>시퀀스의 각 요소에서 변형 함수를 호출하고 최소 <see cref="T:System.Int64" /> 값을 반환합니다.</summary>
      <returns>시퀀스의 최소값입니다.</returns>
      <param name="source">최소값을 확인할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>시퀀스의 각 요소에서 변형 함수를 호출하고 최소 nullable <see cref="T:System.Decimal" /> 값을 반환합니다.</summary>
      <returns>시퀀스의 최소값에 해당하는 Nullable&lt;Decimal&gt; 형식(C#) 또는 Nullable(Of Decimal) 형식(Visual Basic) 값입니다.</returns>
      <param name="source">최소값을 확인할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>시퀀스의 각 요소에서 변형 함수를 호출하고 최소 nullable <see cref="T:System.Double" /> 값을 반환합니다.</summary>
      <returns>시퀀스의 최소값에 해당하는 Nullable&lt;Double&gt; 형식(C#) 또는 Nullable(Of Double) 형식(Visual Basic의 경우) 값입니다.</returns>
      <param name="source">최소값을 확인할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>시퀀스의 각 요소에서 변형 함수를 호출하고 최소 nullable <see cref="T:System.Int32" /> 값을 반환합니다.</summary>
      <returns>시퀀스의 최소값에 해당하는 Nullable&lt;Int32&gt; 형식(C#) 또는 Nullable(Of Int32) 형식(Visual Basic의 경우) 값입니다.</returns>
      <param name="source">최소값을 확인할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>시퀀스의 각 요소에서 변형 함수를 호출하고 최소 nullable <see cref="T:System.Int64" /> 값을 반환합니다.</summary>
      <returns>시퀀스의 최소값에 해당하는 Nullable&lt;Int64&gt; 형식(C#) 또는 Nullable(Of Int64) 형식(Visual Basic의 경우) 값입니다.</returns>
      <param name="source">최소값을 확인할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>시퀀스의 각 요소에서 변형 함수를 호출하고 최소 nullable <see cref="T:System.Single" /> 값을 반환합니다.</summary>
      <returns>시퀀스의 최소값에 해당하는 Nullable&lt;Single&gt; 형식(C#) 또는 Nullable(Of Single) 형식(Visual Basic의 경우) 값입니다.</returns>
      <param name="source">최소값을 확인할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>시퀀스의 각 요소에서 변형 함수를 호출하고 최소 <see cref="T:System.Single" /> 값을 반환합니다.</summary>
      <returns>시퀀스의 최소값입니다.</returns>
      <param name="source">최소값을 확인할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>제네릭 시퀀스의 각 요소에 대해 변환 함수를 호출하고 최소 결과 값을 반환합니다.</summary>
      <returns>시퀀스의 최소값입니다.</returns>
      <param name="source">최소값을 확인할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" />에서 반환하는 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
      <summary>지정된 형식을 기준으로 <see cref="T:System.Collections.IEnumerable" />의 요소를 필터링합니다.</summary>
      <returns>
        <paramref name="TResult" /> 형식 입력 시퀀스의 요소를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="source">요소를 필터링할 <see cref="T:System.Collections.IEnumerable" />입니다.</param>
      <typeparam name="TResult">시퀀스의 요소를 필터링할 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>시퀀스의 요소를 키에 따라 오름차순으로 정렬합니다.</summary>
      <returns>요소가 키에 따라 정렬된 <see cref="T:System.Linq.IOrderedEnumerable`1" />입니다.</returns>
      <param name="source">정렬할 값 시퀀스입니다.</param>
      <param name="keySelector">요소에서 키를 추출하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>시퀀스의 요소를 지정된 비교자를 사용하여 오름차순으로 정렬합니다.</summary>
      <returns>요소가 키에 따라 정렬된 <see cref="T:System.Linq.IOrderedEnumerable`1" />입니다.</returns>
      <param name="source">정렬할 값 시퀀스입니다.</param>
      <param name="keySelector">요소에서 키를 추출하는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IComparer`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>시퀀스의 요소를 키에 따라 내림차순으로 정렬합니다.</summary>
      <returns>요소가 키에 따라 내림차순으로 정렬된 <see cref="T:System.Linq.IOrderedEnumerable`1" />입니다.</returns>
      <param name="source">정렬할 값 시퀀스입니다.</param>
      <param name="keySelector">요소에서 키를 추출하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>시퀀스의 요소를 지정된 비교자를 사용하여 내림차순으로 정렬합니다.</summary>
      <returns>요소가 키에 따라 내림차순으로 정렬된 <see cref="T:System.Linq.IOrderedEnumerable`1" />입니다.</returns>
      <param name="source">정렬할 값 시퀀스입니다.</param>
      <param name="keySelector">요소에서 키를 추출하는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IComparer`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
      <summary>지정된 범위 내의 정수 시퀀스를 생성합니다.</summary>
      <returns>순차적 정수 범위가 들어 있는 IEnumerable&lt;Int32&gt;(C#의 경우) 또는 IEnumerable(Of Int32)(Visual Basic의 경우)입니다..</returns>
      <param name="start">시퀀스의 첫 번째 정수 값입니다.</param>
      <param name="count">생성할 순차적 정수의 개수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 가 0보다 작은 경우-또는-<paramref name="start" /> + <paramref name="count" /> -1이 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
      <summary>반복되는 단일 값이 들어 있는 시퀀스를 생성합니다.</summary>
      <returns>반복되는 값이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="element">반복할 값입니다.</param>
      <param name="count">생성된 시퀀스에서 값을 반복할 횟수입니다.</param>
      <typeparam name="TResult">결과 시퀀스에서 반복할 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>시퀀스에 있는 요소의 순서를 반대로 합니다.</summary>
      <returns>입력 시퀀스의 요소 순서를 뒤집은 시퀀스입니다.</returns>
      <param name="source">순서를 반대로 할 값 시퀀스입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>시퀀스의 각 요소를 새 폼에 프로젝션합니다.</summary>
      <returns>해당 요소가 <paramref name="source" />의 각 요소에 대해 변형 함수를 호출한 결과인 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="source">변형 함수를 호출할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" />에서 반환하는 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
      <summary>요소의 인덱스를 통합하여 시퀀스의 각 요소를 새 폼에 프로젝션합니다.</summary>
      <returns>해당 요소가 <paramref name="source" />의 각 요소에 대해 변형 함수를 호출한 결과인 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="source">변형 함수를 호출할 값 시퀀스입니다.</param>
      <param name="selector">각 소스 요소에 적용할 변형 함수입니다. 이 함수의 두 번째 매개 변수는 소스 요소의 인덱스를 나타냅니다. </param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" />에서 반환하는 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>시퀀스의 각 요소를 <see cref="T:System.Collections.Generic.IEnumerable`1" />에 프로젝션하고 결과 시퀀스를 하나의 시퀀스로 평면화한 다음 각 요소에서 결과 선택기 함수를 호출합니다.</summary>
      <returns>해당 요소가 <paramref name="source" />의 각 요소에 대해 일대다 변환 함수 <paramref name="collectionSelector" />를 호출한 다음 이러한 시퀀스 요소와 해당 소스 요소를 각각 결과 요소에 매핑한 결과인 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="source">프로젝션할 값 시퀀스입니다.</param>
      <param name="collectionSelector">입력 시퀀스의 각 요소에 적용할 변형 함수입니다.</param>
      <param name="resultSelector">중간 시퀀스의 각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TCollection">
        <paramref name="collectionSelector" />에서 수집하는 중간 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">결과 시퀀스의 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="collectionSelector" /> 또는 <paramref name="resultSelector" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>시퀀스의 각 요소를 <see cref="T:System.Collections.Generic.IEnumerable`1" />에 프로젝션하고 결과 시퀀스를 하나의 시퀀스로 평면화합니다.</summary>
      <returns>해당 요소가 입력 시퀀스의 각 요소에 대해 일대다 변환 함수를 호출한 결과인 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="source">프로젝션할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" />가 반환하는 시퀀스 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>시퀀스의 각 요소를 <see cref="T:System.Collections.Generic.IEnumerable`1" />에 프로젝션하고 결과 시퀀스를 하나의 시퀀스로 평면화한 다음 각 요소에서 결과 선택기 함수를 호출합니다.각 소스 요소의 인덱스는 해당 요소의 투영된 중간 폼에 사용됩니다.</summary>
      <returns>해당 요소가 <paramref name="source" />의 각 요소에 대해 일대다 변환 함수 <paramref name="collectionSelector" />를 호출한 다음 이러한 시퀀스 요소와 해당 소스 요소를 각각 결과 요소에 매핑한 결과인 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="source">프로젝션할 값 시퀀스입니다.</param>
      <param name="collectionSelector">각 소스 요소에 적용할 변형 함수입니다. 이 함수의 두 번째 매개 변수는 소스 요소의 인덱스를 나타냅니다. </param>
      <param name="resultSelector">중간 시퀀스의 각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TCollection">
        <paramref name="collectionSelector" />에서 수집하는 중간 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">결과 시퀀스의 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="collectionSelector" /> 또는 <paramref name="resultSelector" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>시퀀스의 각 요소를 <see cref="T:System.Collections.Generic.IEnumerable`1" />에 프로젝션하고 결과 시퀀스를 하나의 시퀀스로 평면화합니다.각 소스 요소의 인덱스는 해당 요소의 투영된 폼에 사용됩니다.</summary>
      <returns>해당 요소가 입력 시퀀스의 각 요소에 대해 일대다 변환 함수를 호출한 결과인 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="source">프로젝션할 값 시퀀스입니다.</param>
      <param name="selector">각 소스 요소에 적용할 변형 함수입니다. 이 함수의 두 번째 매개 변수는 소스 요소의 인덱스를 나타냅니다. </param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" />가 반환하는 시퀀스 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>해당 형식에 대한 기본 같음 비교자를 통해 요소를 비교하여 두 시퀀스가 서로 같은지 확인합니다.</summary>
      <returns>두 소스 시퀀스의 길이가 같고 해당 형식의 기본 같음 비교자에 따라 상응하는 요소가 서로 같으면 True이고, 그렇지 않으면 False입니다.</returns>
      <param name="first">
        <paramref name="second" />와 비교할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="second">첫 번째 시퀀스와 비교할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <typeparam name="TSource">입력 시퀀스의 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 또는 <paramref name="second" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>지정된 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />로 포함 요소를 비교하여 두 시퀀스가 같은지 여부를 확인합니다.</summary>
      <returns>두 소스 시퀀스의 길이가 같고 <paramref name="comparer" />에 따라 상응하는 요소가 서로 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="first">
        <paramref name="second" />와 비교할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="second">첫 번째 시퀀스와 비교할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="comparer">요소를 비교하는 데 사용할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TSource">입력 시퀀스의 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 또는 <paramref name="second" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 둘 이상의 요소가 있습니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>시퀀스의 유일한 요소를 반환하고, 시퀀스에 정확히 하나의 요소가 있는 것이 아니면 예외를 발생합니다.</summary>
      <returns>입력 시퀀스의 단일 요소입니다.</returns>
      <param name="source">단일 요소를 반환할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">입력 시퀀스에 요소가 둘 이상 있는 경우-또는-입력 시퀀스가 비어 있는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>지정된 조건을 충족하는 시퀀스의 유일한 요소를 반환하고, 그러한 요소가 둘 이상이면 예외를 발생합니다.</summary>
      <returns>입력 시퀀스에서 특정 조건에 맞는 단일 요소입니다.</returns>
      <param name="source">단일 요소를 반환할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="predicate">조건에 대해 요소를 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" />의 조건에 맞는 요소가 없는 경우-또는-<paramref name="predicate" />의 조건에 맞는 요소가 둘 이상인 경우-또는-소스 시퀀스가 비어 있습니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>시퀀스의 유일한 요소를 반환하거나, 시퀀스가 비어 있으면 기본값을 반환합니다. 이 메서드는 시퀀스에 둘 이상의 요소가 있으면 예외를 발생합니다.</summary>
      <returns>입력 시퀀스의 기본 요소입니다. 또는 시퀀스에 요소가 포함되어 있지 않으면 default(<paramref name="TSource" />)입니다.</returns>
      <param name="source">단일 요소를 반환할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">입력 시퀀스에 요소가 둘 이상 있는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>지정된 조건을 충족하는 시퀀스의 유일한 요소를 반환하거나, 그러한 요소가 없으면 기본값을 반환합니다. 이 메서드는 조건을 충족하는 요소가 둘 이상이면 예외를 발생합니다.</summary>
      <returns>조건을 충족하는 입력 시퀀스의 단일 요소입니다. 또는 그러한 요소가 없으면 기본값(<paramref name="TSource" />)입니다.</returns>
      <param name="source">단일 요소를 반환할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="predicate">조건에 대해 요소를 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>시퀀스에서 지정된 수만큼의 요소를 무시한 다음 나머지 요소를 반환합니다.</summary>
      <returns>입력 시퀀스에서 지정된 인덱스 뒤에 나오는 요소를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="source">요소를 반환할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="count">나머지 요소를 반환하기 전에 건너뛸 요소의 수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>지정된 조건이 True이면 시퀀스에 있는 요소를 무시하고 나머지 요소를 반환합니다.</summary>
      <returns>입력 시퀀스에서 <paramref name="predicate" />에 지정된 테스트를 통과하지 않는 급수의 첫 요소부터 시작되는 요소가 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="source">요소를 반환할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>지정된 조건이 True이면 시퀀스에 있는 요소를 무시하고 나머지 요소를 반환합니다.조건자 함수의 논리에 요소의 인덱스가 사용됩니다.</summary>
      <returns>입력 시퀀스에서 <paramref name="predicate" />에 지정된 테스트를 통과하지 않는 급수의 첫 요소부터 시작되는 요소가 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="source">요소를 반환할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="predicate">조건에 대해 각 소스 요소를 테스트하는 함수입니다. 이 함수의 두 번째 매개 변수는 소스 요소의 인덱스를 나타냅니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
        <see cref="T:System.Decimal" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>시퀀스의 값 합계입니다.</returns>
      <param name="source">합계를 계산할 <see cref="T:System.Decimal" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.OverflowException">합계가 <see cref="F:System.Decimal.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
        <see cref="T:System.Double" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>시퀀스의 값 합계입니다.</returns>
      <param name="source">합계를 계산할 <see cref="T:System.Double" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
        <see cref="T:System.Int32" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>시퀀스의 값 합계입니다.</returns>
      <param name="source">합계를 계산할 <see cref="T:System.Int32" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.OverflowException">합계가 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
        <see cref="T:System.Int64" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>시퀀스의 값 합계입니다.</returns>
      <param name="source">합계를 계산할 <see cref="T:System.Int64" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.OverflowException">합계가 <see cref="F:System.Int64.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>nullable <see cref="T:System.Decimal" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>시퀀스의 값 합계입니다.</returns>
      <param name="source">합계를 계산할 nullable <see cref="T:System.Decimal" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.OverflowException">합계가 <see cref="F:System.Decimal.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>nullable <see cref="T:System.Double" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>시퀀스의 값 합계입니다.</returns>
      <param name="source">합계를 계산할 nullable <see cref="T:System.Double" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>nullable <see cref="T:System.Int32" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>시퀀스의 값 합계입니다.</returns>
      <param name="source">합계를 계산할 nullable <see cref="T:System.Int32" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.OverflowException">합계가 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>nullable <see cref="T:System.Int64" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>시퀀스의 값 합계입니다.</returns>
      <param name="source">합계를 계산할 nullable <see cref="T:System.Int64" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.OverflowException">합계가 <see cref="F:System.Int64.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>nullable <see cref="T:System.Single" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>시퀀스의 값 합계입니다.</returns>
      <param name="source">합계를 계산할 nullable <see cref="T:System.Single" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
        <see cref="T:System.Single" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>시퀀스의 값 합계입니다.</returns>
      <param name="source">합계를 계산할 <see cref="T:System.Single" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>입력 시퀀스의 각 요소에서 변형 함수를 호출하여 가져온 <see cref="T:System.Decimal" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>프로젝션된 값의 합계입니다.</returns>
      <param name="source">합계를 계산하는 데 사용되는 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.OverflowException">합계가 <see cref="F:System.Decimal.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>입력 시퀀스의 각 요소에서 변형 함수를 호출하여 가져온 <see cref="T:System.Double" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>프로젝션된 값의 합계입니다.</returns>
      <param name="source">합계를 계산하는 데 사용되는 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>입력 시퀀스의 각 요소에서 변형 함수를 호출하여 가져온 <see cref="T:System.Int32" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>프로젝션된 값의 합계입니다.</returns>
      <param name="source">합계를 계산하는 데 사용되는 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.OverflowException">합계가 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>입력 시퀀스의 각 요소에서 변형 함수를 호출하여 가져온 <see cref="T:System.Int64" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>프로젝션된 값의 합계입니다.</returns>
      <param name="source">합계를 계산하는 데 사용되는 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.OverflowException">합계가 <see cref="F:System.Int64.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>입력 시퀀스의 각 요소에서 변형 함수를 호출하여 가져온 nullable <see cref="T:System.Decimal" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>프로젝션된 값의 합계입니다.</returns>
      <param name="source">합계를 계산하는 데 사용되는 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.OverflowException">합계가 <see cref="F:System.Decimal.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>입력 시퀀스의 각 요소에서 변형 함수를 호출하여 가져온 nullable <see cref="T:System.Double" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>프로젝션된 값의 합계입니다.</returns>
      <param name="source">합계를 계산하는 데 사용되는 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>입력 시퀀스의 각 요소에서 변형 함수를 호출하여 가져온 nullable <see cref="T:System.Int32" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>프로젝션된 값의 합계입니다.</returns>
      <param name="source">합계를 계산하는 데 사용되는 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.OverflowException">합계가 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>입력 시퀀스의 각 요소에서 변형 함수를 호출하여 가져온 nullable <see cref="T:System.Int64" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>프로젝션된 값의 합계입니다.</returns>
      <param name="source">합계를 계산하는 데 사용되는 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.OverflowException">합계가 <see cref="F:System.Int64.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>입력 시퀀스의 각 요소에서 변형 함수를 호출하여 가져온 nullable <see cref="T:System.Single" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>프로젝션된 값의 합계입니다.</returns>
      <param name="source">합계를 계산하는 데 사용되는 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>입력 시퀀스의 각 요소에서 변형 함수를 호출하여 가져온 <see cref="T:System.Single" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>프로젝션된 값의 합계입니다.</returns>
      <param name="source">합계를 계산하는 데 사용되는 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>시퀀스의 시작 위치에서 지정된 수만큼의 연속 요소를 반환합니다.</summary>
      <returns>입력 시퀀스의 시작 위치부터 지정된 수의 요소가 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="source">요소를 반환할 시퀀스입니다.</param>
      <param name="count">반환할 요소의 수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>지정된 조건이 True이면 시퀀스에서 요소를 반환합니다.</summary>
      <returns>입력 시퀀스에서 요소가 테스트를 더 이상 통과하지 않는 위치보다 앞에 나오는 요소가 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="source">요소가 반환되는 시퀀스입니다.</param>
      <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>지정된 조건이 True이면 시퀀스에서 요소를 반환합니다.조건자 함수의 논리에 요소의 인덱스가 사용됩니다.</summary>
      <returns>입력 시퀀스에서 요소가 테스트를 더 이상 통과하지 않는 위치보다 앞에 나오는 요소가 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="source">요소를 반환할 시퀀스입니다.</param>
      <param name="predicate">조건에 대해 각 소스 요소를 테스트하는 함수입니다. 이 함수의 두 번째 매개 변수는 소스 요소의 인덱스를 나타냅니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>시퀀스의 요소를 키에 따라 오름차순으로 다시 정렬합니다.</summary>
      <returns>요소가 키에 따라 정렬된 <see cref="T:System.Linq.IOrderedEnumerable`1" />입니다.</returns>
      <param name="source">정렬할 요소를 포함하는 <see cref="T:System.Linq.IOrderedEnumerable`1" />입니다.</param>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>시퀀스의 요소를 지정된 비교자를 사용하여 오름차순으로 다시 정렬합니다.</summary>
      <returns>요소가 키에 따라 정렬된 <see cref="T:System.Linq.IOrderedEnumerable`1" />입니다.</returns>
      <param name="source">정렬할 요소를 포함하는 <see cref="T:System.Linq.IOrderedEnumerable`1" />입니다.</param>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IComparer`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>시퀀스의 요소를 키에 따라 내림차순으로 다시 정렬합니다.</summary>
      <returns>요소가 키에 따라 내림차순으로 정렬된 <see cref="T:System.Linq.IOrderedEnumerable`1" />입니다.</returns>
      <param name="source">정렬할 요소를 포함하는 <see cref="T:System.Linq.IOrderedEnumerable`1" />입니다.</param>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>시퀀스의 요소를 지정된 비교자를 사용하여 내림차순으로 다시 정렬합니다.</summary>
      <returns>요소가 키에 따라 내림차순으로 정렬된 <see cref="T:System.Linq.IOrderedEnumerable`1" />입니다.</returns>
      <param name="source">정렬할 요소를 포함하는 <see cref="T:System.Linq.IOrderedEnumerable`1" />입니다.</param>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IComparer`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />에서 배열을 만듭니다.</summary>
      <returns>입력 시퀀스의 요소가 들어 있는 배열입니다.</returns>
      <param name="source">배열을 만들 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>지정된 키 선택기 함수에 따라 <see cref="T:System.Collections.Generic.IEnumerable`1" />에서 <see cref="T:System.Collections.Generic.Dictionary`2" />를 만듭니다.</summary>
      <returns>키와 값이 들어 있는 <see cref="T:System.Collections.Generic.Dictionary`2" />입니다.</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.Dictionary`2" />를 만들 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" />가 null입니다.-또는-<paramref name="keySelector" />가 생성하는 키가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> 가 두 요소에 대해 중복된 키를 생성하는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>지정된 키 선택기 함수 및 키 비교자에 따라 <see cref="T:System.Collections.Generic.IEnumerable`1" />에서 <see cref="T:System.Collections.Generic.Dictionary`2" />를 만듭니다.</summary>
      <returns>키와 값이 들어 있는 <see cref="T:System.Collections.Generic.Dictionary`2" />입니다.</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.Dictionary`2" />를 만들 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" />가 null입니다.-또는-<paramref name="keySelector" />가 생성하는 키가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> 가 두 요소에 대해 중복된 키를 생성하는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>지정된 키 선택기 함수 및 요소 선택기 함수에 따라 <see cref="T:System.Collections.Generic.IEnumerable`1" />에서 <see cref="T:System.Collections.Generic.Dictionary`2" />를 만듭니다.</summary>
      <returns>입력 시퀀스에서 선택한 <paramref name="TElement" /> 형식의 값을 포함하는 <see cref="T:System.Collections.Generic.Dictionary`2" />입니다.</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.Dictionary`2" />를 만들 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <param name="elementSelector">각 요소에서 결과 요소 값을 생성하는 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" />에서 반환하는 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" /> 또는 <paramref name="elementSelector" />이 null입니다.-또는-<paramref name="keySelector" />가 생성하는 키가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> 가 두 요소에 대해 중복된 키를 생성하는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>지정된 키 선택기 함수, 비교자 및 요소 선택기 함수에 따라 <see cref="T:System.Collections.Generic.IEnumerable`1" />에서 <see cref="T:System.Collections.Generic.Dictionary`2" />를 만듭니다.</summary>
      <returns>입력 시퀀스에서 선택한 <paramref name="TElement" /> 형식의 값을 포함하는 <see cref="T:System.Collections.Generic.Dictionary`2" />입니다.</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.Dictionary`2" />를 만들 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <param name="elementSelector">각 요소에서 결과 요소 값을 생성하는 변형 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" />에서 반환하는 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" /> 또는 <paramref name="elementSelector" />이 null입니다.-또는-<paramref name="keySelector" />가 생성하는 키가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> 가 두 요소에 대해 중복된 키를 생성하는 경우</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />에서 <see cref="T:System.Collections.Generic.List`1" />를 만듭니다.</summary>
      <returns>입력 시퀀스의 요소가 들어 있는 <see cref="T:System.Collections.Generic.List`1" />입니다.</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.List`1" />를 만들 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>지정된 키 선택기 함수에 따라 <see cref="T:System.Collections.Generic.IEnumerable`1" />에서 <see cref="T:System.Linq.Lookup`2" />를 만듭니다.</summary>
      <returns>키와 값이 들어 있는 <see cref="T:System.Linq.Lookup`2" />입니다.</returns>
      <param name="source">
        <see cref="T:System.Linq.Lookup`2" />를 만들 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>지정된 키 선택기 함수 및 키 비교자에 따라 <see cref="T:System.Collections.Generic.IEnumerable`1" />에서 <see cref="T:System.Linq.Lookup`2" />를 만듭니다.</summary>
      <returns>키와 값이 들어 있는 <see cref="T:System.Linq.Lookup`2" />입니다.</returns>
      <param name="source">
        <see cref="T:System.Linq.Lookup`2" />를 만들 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>지정된 키 선택기 함수 및 요소 선택기 함수에 따라 <see cref="T:System.Collections.Generic.IEnumerable`1" />에서 <see cref="T:System.Linq.Lookup`2" />를 만듭니다.</summary>
      <returns>입력 시퀀스에서 선택한 <paramref name="TElement" /> 형식의 값을 포함하는 <see cref="T:System.Linq.Lookup`2" />입니다.</returns>
      <param name="source">
        <see cref="T:System.Linq.Lookup`2" />를 만들 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <param name="elementSelector">각 요소에서 결과 요소 값을 생성하는 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" />에서 반환하는 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" /> 또는 <paramref name="elementSelector" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>지정된 키 선택기 함수, 비교자 및 요소 선택기 함수에 따라 <see cref="T:System.Collections.Generic.IEnumerable`1" />에서 <see cref="T:System.Linq.Lookup`2" />를 만듭니다.</summary>
      <returns>입력 시퀀스에서 선택한 <paramref name="TElement" /> 형식의 값을 포함하는 <see cref="T:System.Linq.Lookup`2" />입니다.</returns>
      <param name="source">
        <see cref="T:System.Linq.Lookup`2" />를 만들 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <param name="elementSelector">각 요소에서 결과 요소 값을 생성하는 변형 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" />에서 반환하는 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" /> 또는 <paramref name="elementSelector" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>기본 같음 비교자를 사용하여 두 시퀀스의 합집합을 구합니다.</summary>
      <returns>두 입력 시퀀스의 모든 요소가 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />이며, 중복 요소는 제외됩니다.</returns>
      <param name="first">포함하는 요소가 합집합의 첫 번째 집합을 구성하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="second">포함하는 요소가 합집합의 두 번째 집합을 구성하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <typeparam name="TSource">입력 시퀀스의 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 또는 <paramref name="second" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>지정된 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />을 사용하여 두 시퀀스의 합집합을 구합니다.</summary>
      <returns>두 입력 시퀀스의 모든 요소가 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />이며, 중복 요소는 제외됩니다.</returns>
      <param name="first">포함하는 요소가 합집합의 첫 번째 집합을 구성하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="second">포함하는 요소가 합집합의 두 번째 집합을 구성하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="comparer">값을 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TSource">입력 시퀀스의 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 또는 <paramref name="second" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>조건자를 기준으로 값 시퀀스를 필터링합니다.</summary>
      <returns>입력 시퀀스에서 조건에 맞는 요소가 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="source">필터링할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>조건자를 기준으로 값 시퀀스를 필터링합니다.조건자 함수의 논리에 각 요소의 인덱스가 사용됩니다.</summary>
      <returns>입력 시퀀스에서 조건에 맞는 요소가 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="source">필터링할 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="predicate">조건에 대해 각 소스 요소를 테스트하는 함수입니다. 이 함수의 두 번째 매개 변수는 소스 요소의 인덱스를 나타냅니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>지정된 조건자 함수를 사용하여 두 시퀀스를 병합합니다.</summary>
      <returns>두 입력 시퀀스의 병합된 요소가 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="first">병합할 첫 번째 시퀀스입니다.</param>
      <param name="second">병합할 두 번째 시퀀스입니다.</param>
      <param name="resultSelector">두 시퀀스에서 요소를 병합하는 방법을 지정하는 함수입니다.</param>
      <typeparam name="TFirst">첫 번째 입력 시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TSecond">두 번째 입력 시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TResult">결과 시퀀스의 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 또는 <paramref name="second" />가 null입니다.</exception>
    </member>
    <member name="T:System.Linq.EnumerableExecutor">
      <summary>식 트리를 나타내며, 식 트리를 다시 작성한 후에 실행하는 기능을 제공합니다.</summary>
    </member>
    <member name="M:System.Linq.EnumerableExecutor.#ctor">
      <summary>
        <see cref="T:System.Linq.EnumerableExecutor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Linq.EnumerableExecutor`1">
      <summary>식 트리를 나타내며, 식 트리를 다시 작성한 후에 실행하는 기능을 제공합니다.</summary>
      <typeparam name="T">식 트리를 실행한 결과 값의 데이터 형식입니다.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableExecutor`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>
        <see cref="T:System.Linq.EnumerableExecutor`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="expression">새 인스턴스와 연결할 식 트리입니다.</param>
    </member>
    <member name="T:System.Linq.EnumerableQuery">
      <summary>
        <see cref="T:System.Collections.IEnumerable" />을 <see cref="T:System.Linq.EnumerableQuery" /> 데이터 소스로 나타냅니다. </summary>
    </member>
    <member name="M:System.Linq.EnumerableQuery.#ctor">
      <summary>
        <see cref="T:System.Linq.EnumerableQuery" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Linq.EnumerableQuery`1">
      <summary>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 <see cref="T:System.Linq.IQueryable`1" /> 데이터 소스로 나타냅니다.</summary>
      <typeparam name="T">컬렉션의 데이터 형식입니다.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Linq.EnumerableQuery`1" /> 클래스의 새 인스턴스를 초기화하고 이 인스턴스를 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션에 연결합니다.</summary>
      <param name="enumerable">새 인스턴스에 연결할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>
        <see cref="T:System.Linq.EnumerableQuery`1" /> 클래스의 새 인스턴스를 초기화하고 이 인스턴스를 식 트리에 연결합니다.</summary>
      <param name="expression">새 인스턴스와 연결할 식 트리입니다.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>연결된 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션 전체에서, 또는 null인 경우 연결된 식 트리를 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 데이터 소스에 대한 쿼리로 다시 작성하고 실행한 결과 컬렉션 전체에서 반복할 수 있는 열거자를 반환합니다.</summary>
      <returns>연결된 데이터 소스에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>연결된 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션 전체에서, 또는 null인 경우 연결된 식 트리를 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 데이터 소스에 대한 쿼리로 다시 작성하고 실행한 결과 컬렉션 전체에서 반복할 수 있는 열거자를 반환합니다.</summary>
      <returns>연결된 데이터 소스에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#ElementType">
      <summary>이 인스턴스가 나타내는 컬렉션의 데이터 형식을 가져옵니다.</summary>
      <returns>이 인스턴스가 나타내는 컬렉션의 데이터 형식입니다.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Expression">
      <summary>이 인스턴스에 연결되거나 이 인스턴스를 나타내는 식 트리를 가져옵니다.</summary>
      <returns>이 인스턴스에 연결되거나 이 인스턴스를 나타내는 식 트리입니다.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Provider">
      <summary>이 인스턴스에 연결된 쿼리 공급자를 가져옵니다.</summary>
      <returns>이 인스턴스에 연결된 쿼리 공급자입니다.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>새 <see cref="T:System.Linq.EnumerableQuery`1" /> 개체를 생성하고 이 개체를 데이터의 <see cref="T:System.Linq.IQueryable`1" /> 컬렉션을 나타내는 지정된 식 트리에 연결합니다.</summary>
      <returns>
        <paramref name="expression" />에 연결된 EnumerableQuery 개체입니다.</returns>
      <param name="expression">실행할 식 트리입니다.</param>
      <typeparam name="S">
        <paramref name="expression" />이 나타내는 컬렉션의 데이터 형식입니다.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary>새 <see cref="T:System.Linq.EnumerableQuery`1" /> 개체를 생성하고 이 개체를 데이터의 <see cref="T:System.Linq.IQueryable" /> 컬렉션을 나타내는 지정된 식 트리에 연결합니다.</summary>
      <returns>
        <paramref name="expression" />.에 연결된 <see cref="T:System.Linq.EnumerableQuery`1" /> 개체입니다.</returns>
      <param name="expression">데이터의 <see cref="T:System.Linq.IQueryable" /> 컬렉션을 나타내는 식 트리입니다.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
      <summary>
        <see cref="T:System.Linq.Queryable" /> 메서드를 통해 쿼리할 수 없는 열거 가능 데이터 소스의 <see cref="T:System.Linq.Queryable" /> 메서드 대신 <see cref="T:System.Linq.Enumerable" /> 메서드를 호출하려면 식을 다시 작성한 후에 실행합니다.</summary>
      <returns>
        <paramref name="expression" />을 실행한 결과 값입니다.</returns>
      <param name="expression">실행할 식 트리입니다.</param>
      <typeparam name="S">
        <paramref name="expression" />이 나타내는 컬렉션의 데이터 형식입니다.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary>
        <see cref="T:System.Linq.Queryable" /> 메서드를 통해 쿼리할 수 없는 열거 가능 데이터 소스의 <see cref="T:System.Linq.Queryable" /> 메서드 대신 <see cref="T:System.Linq.Enumerable" /> 메서드를 호출하려면 식을 다시 작성한 후에 실행합니다.</summary>
      <returns>
        <paramref name="expression" />을 실행한 결과 값입니다.</returns>
      <param name="expression">실행할 식 트리입니다.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.ToString">
      <summary>열거 가능 컬렉션 또는 null인 경우 이 인스턴스에 연결된 식 트리의 텍스트 표현을 반환합니다.</summary>
      <returns>열거 가능 컬렉션 또는 null인 경우 이 인스턴스에 연결된 식 트리의 텍스트 표현입니다.</returns>
    </member>
    <member name="T:System.Linq.IGrouping`2">
      <summary>공통 키가 있는 개체의 컬렉션을 나타냅니다.</summary>
      <typeparam name="TKey">
        <see cref="T:System.Linq.IGrouping`2" />의 키 형식입니다.이 형식 매개 변수는 공변(covariant)입니다. 즉, 지정한 형식을 사용하거나 더 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.IGrouping`2" />의 값 형식입니다.</typeparam>
    </member>
    <member name="P:System.Linq.IGrouping`2.Key">
      <summary>
        <see cref="T:System.Linq.IGrouping`2" />의 키를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Linq.IGrouping`2" />의 키입니다.</returns>
    </member>
    <member name="T:System.Linq.ILookup`2">
      <summary>키를 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 값 시퀀스에 매핑하는 데이터 구조체의 인덱서, 크기 속성 및 부울 검색 메서드를 정의합니다.</summary>
      <typeparam name="TKey">
        <see cref="T:System.Linq.ILookup`2" />에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.ILookup`2" />의 값을 구성하는 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 시퀀스의 요소 형식입니다.</typeparam>
    </member>
    <member name="M:System.Linq.ILookup`2.Contains(`0)">
      <summary>
        <see cref="T:System.Linq.ILookup`2" />에 지정된 키가 있는지 여부를 확인합니다.</summary>
      <returns>
        <paramref name="key" />가 <see cref="T:System.Linq.ILookup`2" />에 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="key">
        <see cref="T:System.Linq.ILookup`2" />에서 검색할 키입니다.</param>
    </member>
    <member name="P:System.Linq.ILookup`2.Count">
      <summary>
        <see cref="T:System.Linq.ILookup`2" />에 있는 키/값 컬렉션 쌍의 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Linq.ILookup`2" />에 있는 키/값 컬렉션 쌍의 개수입니다.</returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Item(`0)">
      <summary>지정된 키에 의해 인덱싱된 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 값 시퀀스를 가져옵니다.</summary>
      <returns>지정된 키에 의해 인덱싱된 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 값 시퀀스입니다.</returns>
      <param name="key">원하는 값 시퀀스의 키입니다.</param>
    </member>
    <member name="T:System.Linq.IOrderedEnumerable`1">
      <summary>정렬된 시퀀스를 나타냅니다.</summary>
      <typeparam name="TElement">시퀀스 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
      <summary>
        <see cref="T:System.Linq.IOrderedEnumerable`1" />의 요소를 키에 따라 다시 정렬합니다.</summary>
      <returns>요소가 키에 따라 정렬된 <see cref="T:System.Linq.IOrderedEnumerable`1" />입니다.</returns>
      <param name="keySelector">각 요소의 키를 추출하는 데 사용되는 <see cref="T:System.Func`2" />입니다.</param>
      <param name="comparer">반환되는 시퀀스에 배치하기 위해 키를 비교하는 데 사용되는 <see cref="T:System.Collections.Generic.IComparer`1" />입니다.</param>
      <param name="descending">요소를 내림차순으로 정렬하려면 true이고, 요소를 오름차순으로 정렬하려면 false입니다.</param>
      <typeparam name="TKey">
        <paramref name="keySelector" />가 생성하는 키의 형식입니다.</typeparam>
    </member>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary>정렬 연산의 결과를 나타냅니다.</summary>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary>정렬 연산의 결과를 나타냅니다.</summary>
      <typeparam name="T">데이터 소스 내용의 형식입니다.이 형식 매개 변수는 공변(covariant)입니다. 즉, 지정한 형식을 사용하거나 더 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary>데이터 형식이 지정되지 않은 특정 데이터 소스에 대한 쿼리를 실행하는 기능을 제공합니다.</summary>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary>
        <see cref="T:System.Linq.IQueryable" />의 이 인스턴스에 연결되어 있는 식 트리가 실행될 때 반환되는 요소의 형식을 가져옵니다.</summary>
      <returns>이 개체에 연결된 식 트리가 실행될 때 반환되는 요소의 형식을 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary>
        <see cref="T:System.Linq.IQueryable" />의 인스턴스에 연결되어 있는 식 트리를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable" />의 이 인스턴스에 연결된 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary>이 데이터 소스에 연결된 쿼리 공급자를 가져옵니다.</summary>
      <returns>이 데이터 소스에 연결되어 있는 <see cref="T:System.Linq.IQueryProvider" />입니다.</returns>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary>데이터 형식이 알려진 특정 데이터 소스에 대한 쿼리를 실행하는 기능을 제공합니다.</summary>
      <typeparam name="T">데이터 소스의 데이터 형식입니다.이 형식 매개 변수는 공변(covariant)입니다. 즉, 지정한 형식을 사용하거나 더 파생된 형식을 사용할 수 있습니다. 공변성(Covariance) 및 반공변성(Contravariance)에 대한 자세한 내용은 [2678dc63-c7f9-4590-9ddc-0a4df684d42e]에서 참조하십시오.</typeparam>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary>
        <see cref="T:System.Linq.IQueryable" /> 개체가 설명하는 쿼리를 실행하고 만드는 메서드를 정의합니다.</summary>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>지정된 식 트리가 나타내는 쿼리를 평가할 수 있는 <see cref="T:System.Linq.IQueryable`1" /> 개체를 생성합니다.</summary>
      <returns>지정된 식 트리가 나타내는 쿼리를 평가할 수 있는 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="expression">LINQ 쿼리를 나타내는 식 트리입니다.</param>
      <typeparam name="TElement">반환되는 <see cref="T:System.Linq.IQueryable`1" />의 요소 형식입니다.</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary>지정된 식 트리가 나타내는 쿼리를 평가할 수 있는 <see cref="T:System.Linq.IQueryable" /> 개체를 생성합니다.</summary>
      <returns>지정된 식 트리가 나타내는 쿼리를 평가할 수 있는 <see cref="T:System.Linq.IQueryable" />입니다.</returns>
      <param name="expression">LINQ 쿼리를 나타내는 식 트리입니다.</param>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary>지정된 식 트리가 나타내는 강력한 형식의 쿼리를 실행합니다.</summary>
      <returns>지정된 쿼리를 실행한 결과 값입니다.</returns>
      <param name="expression">LINQ 쿼리를 나타내는 식 트리입니다.</param>
      <typeparam name="TResult">쿼리를 실행한 결과 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary>지정된 식 트리가 나타내는 쿼리를 실행합니다.</summary>
      <returns>지정된 쿼리를 실행한 결과 값입니다.</returns>
      <param name="expression">LINQ 쿼리를 나타내는 식 트리입니다.</param>
    </member>
    <member name="T:System.Linq.Lookup`2">
      <summary>각각 하나 이상의 값에 매핑된 키의 컬렉션을 나타냅니다.</summary>
      <typeparam name="TKey">
        <see cref="T:System.Linq.Lookup`2" />에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.Lookup`2" />에 있는 각 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 값의 요소 형식입니다.</typeparam>
    </member>
    <member name="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
      <summary>각 키와 키에 연결된 값에 변환 함수를 적용하고 결과를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Linq.Lookup`2" />에 있는 각 키/값 컬렉션 쌍에 대해 값이 하나씩 들어 있는 컬렉션입니다.</returns>
      <param name="resultSelector">각 키와 키에 연결된 값을 사용하여 결과 값을 투영하는 함수입니다.</param>
      <typeparam name="TResult">
        <paramref name="resultSelector" />에서 생성하는 결과 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Linq.Lookup`2.Contains(`0)">
      <summary>
        <see cref="T:System.Linq.Lookup`2" />에 지정된 키가 있는지 여부를 확인합니다.</summary>
      <returns>
        <paramref name="key" />가 <see cref="T:System.Linq.Lookup`2" />에 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="key">
        <see cref="T:System.Linq.Lookup`2" />에서 찾을 키입니다.</param>
    </member>
    <member name="P:System.Linq.Lookup`2.Count">
      <summary>
        <see cref="T:System.Linq.Lookup`2" />에 있는 키/값 컬렉션 쌍의 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Linq.Lookup`2" />에 있는 키/값 컬렉션 쌍의 개수입니다.</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.GetEnumerator">
      <summary>
        <see cref="T:System.Linq.Lookup`2" /> 전체에서 반복되는 제네릭 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Linq.Lookup`2" />에 대한 열거자입니다.</returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Item(`0)">
      <summary>지정된 키에 따라 인덱싱된 값 컬렉션을 가져옵니다.</summary>
      <returns>지정된 키에 따라 인덱싱된 값 컬렉션입니다.</returns>
      <param name="key">원하는 값 컬렉션의 키입니다.</param>
    </member>
    <member name="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>
        <see cref="T:System.Linq.Lookup`2" /> 전체에서 반복되는 열거자를 반환합니다.이 클래스는 상속될 수 없습니다.</summary>
      <returns>
        <see cref="T:System.Linq.Lookup`2" />에 대한 열거자입니다.</returns>
    </member>
    <member name="T:System.Linq.Queryable">
      <summary>
        <see cref="T:System.Linq.IQueryable`1" />을 구현하는 데이터 구조체를 쿼리하기 위한 정적(Visual Basic의 경우 Shared) 메서드 집합을 제공합니다.</summary>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
      <summary>시퀀스에 누산기 함수를 적용합니다.</summary>
      <returns>최종 누산기 값입니다.</returns>
      <param name="source">집계할 시퀀스입니다.</param>
      <param name="func">각 요소에 적용할 누적기 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="func" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
      <summary>시퀀스에 누산기 함수를 적용합니다.지정된 시드 값은 초기 누적기 값으로 사용됩니다.</summary>
      <returns>최종 누산기 값입니다.</returns>
      <param name="source">집계할 시퀀스입니다.</param>
      <param name="seed">초기 누산기 값입니다.</param>
      <param name="func">각 요소에서 호출할 누산기 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TAccumulate">누산기 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="func" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
      <summary>시퀀스에 누산기 함수를 적용합니다.지정된 시드 값은 초기 누적기 값으로 사용되고 지정된 함수는 결과 값을 선택하는 데 사용됩니다.</summary>
      <returns>변형된 최종 누산기 값입니다.</returns>
      <param name="source">집계할 시퀀스입니다.</param>
      <param name="seed">초기 누산기 값입니다.</param>
      <param name="func">각 요소에서 호출할 누산기 함수입니다.</param>
      <param name="selector">최종 누산기 값을 결과 값으로 변형하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TAccumulate">누산기 값의 형식입니다.</typeparam>
      <typeparam name="TResult">결과 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="func" /> 또는 <paramref name="selector" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>시퀀스의 모든 요소가 특정 조건에 맞는지 확인합니다.</summary>
      <returns>소스 시퀀스의 모든 요소가 지정된 조건자의 테스트를 통과하거나 시퀀스가 비어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="source">조건을 테스트할 요소를 포함하는 시퀀스입니다.</param>
      <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
      <summary>시퀀스에 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <returns>소스 시퀀스에 요소가 하나라도 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="source">비어 있는지 확인할 시퀀스입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>시퀀스의 요소가 조건을 충족하는지 여부를 확인합니다.</summary>
      <returns>소스 시퀀스의 요소가 하나라도 지정된 조건자의 테스트를 통과하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="source">조건을 테스트할 요소를 포함하는 시퀀스입니다.</param>
      <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>제네릭 <see cref="T:System.Collections.Generic.IEnumerable`1" />을 제네릭 <see cref="T:System.Linq.IQueryable`1" />로 변환합니다.</summary>
      <returns>입력 시퀀스를 나타내는 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="source">변환할 시퀀스입니다.</param>
      <typeparam name="TElement">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
      <summary>
        <see cref="T:System.Collections.IEnumerable" />을 <see cref="T:System.Linq.IQueryable" />로 변환합니다.</summary>
      <returns>입력 시퀀스를 나타내는 <see cref="T:System.Linq.IQueryable" />입니다.</returns>
      <param name="source">변환할 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" />가 일부 <paramref name="T" />에 대해 <see cref="T:System.Collections.Generic.IEnumerable`1" />을 구현하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
      <summary>
        <see cref="T:System.Decimal" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다.</returns>
      <param name="source">평균을 계산할 <see cref="T:System.Decimal" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
      <summary>
        <see cref="T:System.Double" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다.</returns>
      <param name="source">평균을 계산할 <see cref="T:System.Double" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
      <summary>
        <see cref="T:System.Int32" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다.</returns>
      <param name="source">평균을 계산할 <see cref="T:System.Int32" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
      <summary>
        <see cref="T:System.Int64" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다.</returns>
      <param name="source">평균을 계산할 <see cref="T:System.Int64" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>nullable <see cref="T:System.Decimal" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다. 또는 소스 시퀀스가 비어 있거나 null인 값만 포함하는 경우 null입니다.</returns>
      <param name="source">평균을 계산할 nullable <see cref="T:System.Decimal" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>nullable <see cref="T:System.Double" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다. 또는 소스 시퀀스가 비어 있거나 null인 값만 포함하는 경우 null입니다.</returns>
      <param name="source">평균을 계산할 nullable <see cref="T:System.Double" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>nullable <see cref="T:System.Int32" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다. 또는 소스 시퀀스가 비어 있거나 null인 값만 포함하는 경우 null입니다.</returns>
      <param name="source">평균을 계산할 nullable <see cref="T:System.Int32" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>nullable <see cref="T:System.Int64" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다. 또는 소스 시퀀스가 비어 있거나 null인 값만 포함하는 경우 null입니다.</returns>
      <param name="source">평균을 계산할 nullable <see cref="T:System.Int64" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>nullable <see cref="T:System.Single" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다. 또는 소스 시퀀스가 비어 있거나 null인 값만 포함하는 경우 null입니다.</returns>
      <param name="source">평균을 계산할 nullable <see cref="T:System.Single" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
      <summary>
        <see cref="T:System.Single" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다.</returns>
      <param name="source">평균을 계산할 <see cref="T:System.Single" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>입력 시퀀스의 각 요소에서 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Decimal" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다.</returns>
      <param name="source">평균을 계산하는 데 사용되는 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>입력 시퀀스의 각 요소에서 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Double" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다.</returns>
      <param name="source">평균을 계산할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>입력 시퀀스의 각 요소에서 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Int32" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다.</returns>
      <param name="source">평균을 계산할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>입력 시퀀스의 각 요소에서 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Int64" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다.</returns>
      <param name="source">평균을 계산할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>입력 시퀀스의 각 요소에서 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Decimal" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다. 또는 <paramref name="source" /> 시퀀스가 비어 있거나 null인 값만 포함하는 경우 null입니다.</returns>
      <param name="source">평균을 계산할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>입력 시퀀스의 각 요소에서 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Double" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다. 또는 <paramref name="source" /> 시퀀스가 비어 있거나 null인 값만 포함하는 경우 null입니다.</returns>
      <param name="source">평균을 계산할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>입력 시퀀스의 각 요소에서 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Int32" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다. 또는 <paramref name="source" /> 시퀀스가 비어 있거나 null인 값만 포함하는 경우 null입니다.</returns>
      <param name="source">평균을 계산할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>입력 시퀀스의 각 요소에서 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Int64" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다. 또는 <paramref name="source" /> 시퀀스가 비어 있거나 null인 값만 포함하는 경우 null입니다.</returns>
      <param name="source">평균을 계산할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>입력 시퀀스의 각 요소에서 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Single" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다. 또는 <paramref name="source" /> 시퀀스가 비어 있거나 null인 값만 포함하는 경우 null입니다.</returns>
      <param name="source">평균을 계산할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>입력 시퀀스의 각 요소에서 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Single" /> 값 시퀀스의 평균을 계산합니다.</summary>
      <returns>값 시퀀스의 평균입니다.</returns>
      <param name="source">평균을 계산할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
      <summary>
        <see cref="T:System.Linq.IQueryable" />의 요소를 지정된 형식으로 변환합니다.</summary>
      <returns>지정된 형식으로 변환된 소스 시퀀스의 각 요소가 들어 있는 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="source">변환될 요소를 포함하는 <see cref="T:System.Linq.IQueryable" />입니다.</param>
      <typeparam name="TResult">
        <paramref name="source" />의 요소를 변환할 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidCastException">시퀀스의 요소를 <paramref name="TResult" /> 형식으로 캐스팅할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>두 시퀀스를 연결합니다.</summary>
      <returns>두 입력 시퀀스의 연결된 요소가 들어 있는 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="source1">연결할 첫 번째 시퀀스입니다.</param>
      <param name="source2">첫 번째 시퀀스에 연결할 시퀀스입니다.</param>
      <typeparam name="TSource">입력 시퀀스의 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 또는 <paramref name="source2" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
      <summary>기본 같음 비교자를 사용하여 시퀀스에 지정된 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <returns>입력 시퀀스에 지정된 값을 가진 요소가 포함되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="source">
        <paramref name="item" />을 찾을 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="item">시퀀스에서 찾을 개체입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>지정된 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />을 사용하여 시퀀스에 지정된 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <returns>입력 시퀀스에 지정된 값을 가진 요소가 포함되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="source">
        <paramref name="item" />을 찾을 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="item">시퀀스에서 찾을 개체입니다.</param>
      <param name="comparer">값을 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
      <summary>시퀀스에 있는 요소의 수를 반환합니다.</summary>
      <returns>입력 시퀀스에 있는 요소의 수입니다.</returns>
      <param name="source">개수를 셀 요소를 포함하는 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />에 있는 요소의 수가 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>지정된 시퀀스에서 특정 조건에 맞는 요소 수를 반환합니다.</summary>
      <returns>시퀀스에서 조건자 함수의 조건에 맞는 요소 수입니다.</returns>
      <param name="source">개수를 셀 요소를 포함하는 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />에 있는 요소의 수가 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
      <summary>지정된 시퀀스의 요소를 반환하거나, 시퀀스가 비어 있으면 Singleton 컬렉션의 형식 매개 변수의 기본값을 반환합니다.</summary>
      <returns>
        <paramref name="source" />가 비어 있으면 기본값(<paramref name="TSource" />)이 들어 있는 <see cref="T:System.Linq.IQueryable`1" />이고, 그렇지 않으면 <paramref name="source" />입니다.</returns>
      <param name="source">비어 있으면 기본값을 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
      <summary>지정된 시퀀스의 요소를 반환하거나, 시퀀스가 비어 있으면 Singleton 컬렉션의 지정된 값을 반환합니다.</summary>
      <returns>
        <paramref name="source" />가 비어 있으면 <paramref name="defaultValue" />가 들어 있는 <see cref="T:System.Linq.IQueryable`1" />이고, 그렇지 않으면 <paramref name="source" />입니다.</returns>
      <param name="source">비어 있으면 지정된 값을 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="defaultValue">시퀀스가 비어 있는 경우 반환할 값입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
      <summary>기본 같음 비교자로 값을 비교하여 시퀀스에서 고유 요소를 반환합니다.</summary>
      <returns>
        <paramref name="source" />의 고유 요소를 포함하는 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="source">중복을 제거할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>지정된 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />로 값을 비교하여 시퀀스에서 고유 요소를 반환합니다.</summary>
      <returns>
        <paramref name="source" />의 고유 요소를 포함하는 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="source">중복을 제거할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="comparer">값을 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="comparer" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>시퀀스에서 지정된 인덱스의 요소를 반환합니다.</summary>
      <returns>
        <paramref name="source" />에서 지정된 위치의 요소입니다.</returns>
      <param name="source">요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="index">검색할 요소의 인덱스입니다(0부터 시작).</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 가 0보다 작습니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>시퀀스에서 지정된 인덱스의 요소를 반환하거나, 인덱스가 범위를 벗어나면 기본값을 반환합니다.</summary>
      <returns>
        <paramref name="index" />가 <paramref name="source" />의 범위를 벗어나면 기본값(<paramref name="TSource" />)이고, 그렇지 않으면 <paramref name="source" />에서 지정된 위치에 있는 요소입니다.</returns>
      <param name="source">요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="index">검색할 요소의 인덱스입니다(0부터 시작).</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>기본 같음 비교자로 값을 비교하여 두 시퀀스의 차집합을 구합니다.</summary>
      <returns>두 시퀀스의 차집합을 포함하는 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="source1">
        <paramref name="source2" />에는 없는 요소가 반환될 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="source2">첫 번째 시퀀스에도 있는 요소가 반환된 시퀀스에는 없는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <typeparam name="TSource">입력 시퀀스의 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 또는 <paramref name="source2" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>지정된 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />로 값을 비교하여 두 시퀀스의 차집합을 구합니다.</summary>
      <returns>두 시퀀스의 차집합을 포함하는 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="source1">
        <paramref name="source2" />에는 없는 요소가 반환될 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="source2">첫 번째 시퀀스에도 있는 요소가 반환된 시퀀스에는 없는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="comparer">값을 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TSource">입력 시퀀스의 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 또는 <paramref name="source2" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
      <summary>시퀀스의 첫 번째 요소를 반환합니다.</summary>
      <returns>
        <paramref name="source" />의 첫 번째 요소입니다.</returns>
      <param name="source">첫 번째 요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">소스 시퀀스가 비어 있습니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>시퀀스에서 지정된 조건에 맞는 첫 번째 요소를 반환합니다.</summary>
      <returns>
        <paramref name="source" />에서 <paramref name="predicate" />의 테스트를 통과하는 첫 번째 요소입니다.</returns>
      <param name="source">요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" />의 조건에 맞는 요소가 없는 경우-또는-소스 시퀀스가 비어 있습니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>시퀀스의 첫 번째 요소를 반환합니다. 시퀀스에 요소가 없으면 기본값을 반환합니다.</summary>
      <returns>
        <paramref name="source" />가 비어 있으면 기본값(<paramref name="TSource" />)이고, 그렇지 않으면 <paramref name="source" />의 첫 번째 요소입니다.</returns>
      <param name="source">첫 번째 요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>시퀀스에서 지정된 조건에 맞는 첫 번째 요소를 반환하거나, 이러한 요소가 없으면 기본값을 반환합니다.</summary>
      <returns>
        <paramref name="source" />가 비어 있거나 <paramref name="predicate" />에 지정된 테스트를 통과하는 요소가 없으면 기본값(<paramref name="TSource" />)이고, 그렇지 않으면 <paramref name="source" />에서 <paramref name="predicate" />에 지정된 테스트를 통과하는 첫 번째 요소입니다.</returns>
      <param name="source">요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>지정된 키 선택기 함수에 따라 시퀀스의 요소를 그룹화합니다.</summary>
      <returns>각 <see cref="T:System.Linq.IGrouping`2" /> 개체가 개체 및 키의 시퀀스를 포함하는 IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;(C#의 경우) 또는 IQueryable(Of IGrouping(Of TKey, TSource))(Visual Basic의 경우)입니다.</returns>
      <param name="source">요소를 그룹화할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에 지정된 함수가 반환하는 키 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>지정된 키 선택기 함수에 따라 시퀀스의 요소를 그룹화하고 지정된 비교자를 사용하여 키를 비교합니다.</summary>
      <returns>각 <see cref="T:System.Linq.IGrouping`2" />이 개체 및 키의 시퀀스를 포함하는 IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;(C#의 경우) 또는 IQueryable(Of IGrouping(Of TKey, TSource))(Visual Basic의 경우)입니다.</returns>
      <param name="source">요소를 그룹화할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에 지정된 함수가 반환하는 키 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" /> 또는 <paramref name="comparer" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
      <summary>지정된 키 선택기 함수에 따라 시퀀스의 요소를 그룹화하고 지정된 함수를 사용하여 각 그룹의 요소를 프로젝션합니다.</summary>
      <returns>각 <see cref="T:System.Linq.IGrouping`2" />이 <paramref name="TElement" /> 형식의 개체 및 키의 시퀀스를 포함하는 IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;(C#의 경우) 또는 IQueryable(Of IGrouping(Of TKey, TElement))(Visual Basic의 경우)입니다.</returns>
      <param name="source">요소를 그룹화할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
      <param name="elementSelector">각 소스 요소를 <see cref="T:System.Linq.IGrouping`2" />의 요소에 매핑하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에 지정된 함수가 반환하는 키 형식입니다.</typeparam>
      <typeparam name="TElement">각 <see cref="T:System.Linq.IGrouping`2" />에 있는 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" /> 또는 <paramref name="elementSelector" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>시퀀스의 요소를 그룹화하고 지정된 함수를 사용하여 각 그룹의 요소를 투영합니다.키 값은 지정된 비교자를 통해 비교됩니다.</summary>
      <returns>각 <see cref="T:System.Linq.IGrouping`2" />이 <paramref name="TElement" /> 형식의 개체 및 키의 시퀀스를 포함하는 IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;(C#의 경우) 또는 IQueryable(Of IGrouping(Of TKey, TElement))(Visual Basic의 경우)입니다.</returns>
      <param name="source">요소를 그룹화할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
      <param name="elementSelector">각 소스 요소를 <see cref="T:System.Linq.IGrouping`2" />의 요소에 매핑하는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에 지정된 함수가 반환하는 키 형식입니다.</typeparam>
      <typeparam name="TElement">각 <see cref="T:System.Linq.IGrouping`2" />에 있는 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" /> 또는 <paramref name="elementSelector" /> 또는 <paramref name="comparer" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
      <summary>지정된 키 선택기 함수에 따라 시퀀스의 요소를 그룹화하고 각 그룹 및 해당 키에서 결과 값을 만듭니다.각 그룹의 요소는 지정된 함수를 통해 투영됩니다.</summary>
      <returns>형식 인수가 <paramref name="TResult" />이고 각 요소가 그룹 및 해당 키에 대한 프로젝션을 나타내는 T:System.Linq.IQueryable`1입니다.</returns>
      <param name="source">요소를 그룹화할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
      <param name="elementSelector">각 소스 요소를 <see cref="T:System.Linq.IGrouping`2" />의 요소에 매핑하는 함수입니다.</param>
      <param name="resultSelector">각 그룹에서 결과 값을 만드는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에 지정된 함수가 반환하는 키 형식입니다.</typeparam>
      <typeparam name="TElement">각 <see cref="T:System.Linq.IGrouping`2" />에 있는 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" />에서 반환하는 결과 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" /> 또는 <paramref name="elementSelector" /> 또는 <paramref name="resultSelector" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>지정된 키 선택기 함수에 따라 시퀀스의 요소를 그룹화하고 각 그룹 및 해당 키에서 결과 값을 만듭니다.키는 지정된 비교자를 통해 비교되고 각 그룹의 요소는 지정된 함수를 통해 투영됩니다.</summary>
      <returns>형식 인수가 <paramref name="TResult" />이고 각 요소가 그룹 및 해당 키에 대한 프로젝션을 나타내는 T:System.Linq.IQueryable`1입니다.</returns>
      <param name="source">요소를 그룹화할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
      <param name="elementSelector">각 소스 요소를 <see cref="T:System.Linq.IGrouping`2" />의 요소에 매핑하는 함수입니다.</param>
      <param name="resultSelector">각 그룹에서 결과 값을 만드는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에 지정된 함수가 반환하는 키 형식입니다.</typeparam>
      <typeparam name="TElement">각 <see cref="T:System.Linq.IGrouping`2" />에 있는 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" />에서 반환하는 결과 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" /> 또는 <paramref name="elementSelector" /> 또는 <paramref name="resultSelector" /> 또는 <paramref name="comparer" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
      <summary>지정된 키 선택기 함수에 따라 시퀀스의 요소를 그룹화하고 각 그룹 및 해당 키에서 결과 값을 만듭니다.</summary>
      <returns>형식 인수가 <paramref name="TResult" />이고 각 요소가 그룹 및 해당 키에 대한 프로젝션을 나타내는 T:System.Linq.IQueryable`1입니다.</returns>
      <param name="source">요소를 그룹화할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
      <param name="resultSelector">각 그룹에서 결과 값을 만드는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에 지정된 함수가 반환하는 키 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" />에서 반환하는 결과 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" /> 또는 <paramref name="resultSelector" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>지정된 키 선택기 함수에 따라 시퀀스의 요소를 그룹화하고 각 그룹 및 해당 키에서 결과 값을 만듭니다.키는 지정된 비교자를 통해 비교됩니다.</summary>
      <returns>형식 인수가 <paramref name="TResult" />이고 각 요소가 그룹 및 해당 키에 대한 프로젝션을 나타내는 T:System.Linq.IQueryable`1입니다.</returns>
      <param name="source">요소를 그룹화할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
      <param name="resultSelector">각 그룹에서 결과 값을 만드는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에 지정된 함수가 반환하는 키 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" />에서 반환하는 결과 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" /> 또는 <paramref name="resultSelector" /> 또는 <paramref name="comparer" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
      <summary>키가 같은지 여부에 따라 두 시퀀스의 요소를 연관시키고 결과를 그룹화합니다.기본 같음 비교자를 사용하여 키를 비교합니다.</summary>
      <returns>두 시퀀스에 대해 그룹화 조인을 수행하여 가져온 <paramref name="TResult" /> 형식의 요소를 포함하는 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="outer">조인할 첫 번째 시퀀스입니다.</param>
      <param name="inner">첫 번째 시퀀스에 조인할 시퀀스입니다.</param>
      <param name="outerKeySelector">첫 번째 시퀀스의 각 요소에서 조인 키를 추출하는 함수입니다.</param>
      <param name="innerKeySelector">두 번째 시퀀스의 각 요소에서 조인 키를 추출하는 함수입니다.</param>
      <param name="resultSelector">첫 번째 시퀀스의 요소와 두 번째 시퀀스의 일치하는 요소 컬렉션에서 결과 요소를 만드는 함수입니다.</param>
      <typeparam name="TOuter">첫 번째 시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TInner">두 번째 시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TKey">키 선택기 함수에서 반환되는 키의 형식입니다.</typeparam>
      <typeparam name="TResult">결과 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 또는 <paramref name="inner" /> 또는 <paramref name="outerKeySelector" /> 또는 <paramref name="innerKeySelector" /> 또는 <paramref name="resultSelector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>키가 같은지 여부에 따라 두 시퀀스의 요소를 연관시키고 결과를 그룹화합니다.지정된 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />를 사용하여 키를 비교합니다.</summary>
      <returns>두 시퀀스에 대해 그룹화 조인을 수행하여 가져온 <paramref name="TResult" /> 형식의 요소를 포함하는 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="outer">조인할 첫 번째 시퀀스입니다.</param>
      <param name="inner">첫 번째 시퀀스에 조인할 시퀀스입니다.</param>
      <param name="outerKeySelector">첫 번째 시퀀스의 각 요소에서 조인 키를 추출하는 함수입니다.</param>
      <param name="innerKeySelector">두 번째 시퀀스의 각 요소에서 조인 키를 추출하는 함수입니다.</param>
      <param name="resultSelector">첫 번째 시퀀스의 요소와 두 번째 시퀀스의 일치하는 요소 컬렉션에서 결과 요소를 만드는 함수입니다.</param>
      <param name="comparer">키를 해시하여 비교할 비교자입니다.</param>
      <typeparam name="TOuter">첫 번째 시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TInner">두 번째 시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TKey">키 선택기 함수에서 반환되는 키의 형식입니다.</typeparam>
      <typeparam name="TResult">결과 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 또는 <paramref name="inner" /> 또는 <paramref name="outerKeySelector" /> 또는 <paramref name="innerKeySelector" /> 또는 <paramref name="resultSelector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>기본 같음 비교자로 값을 비교하여 두 시퀀스의 교집합을 구합니다.</summary>
      <returns>두 시퀀스의 교집합이 들어 있는 시퀀스입니다.</returns>
      <param name="source1">
        <paramref name="source2" />에도 있는 고유 요소가 반환되는 시퀀스입니다.</param>
      <param name="source2">첫 번째 시퀀스에도 있는 고유 요소가 반환되는 시퀀스입니다.</param>
      <typeparam name="TSource">입력 시퀀스의 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 또는 <paramref name="source2" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>지정된 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />로 값을 비교하여 두 시퀀스의 교집합을 구합니다.</summary>
      <returns>두 시퀀스의 차집합을 포함하는 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="source1">
        <paramref name="source2" />에도 있는 고유 요소가 반환되는 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="source2">첫 번째 시퀀스에도 있는 고유 요소가 반환되는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="comparer">값을 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TSource">입력 시퀀스의 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 또는 <paramref name="source2" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
      <summary>일치하는 키를 기준으로 두 시퀀스의 요소를 연관시킵니다.기본 같음 비교자를 사용하여 키를 비교합니다.</summary>
      <returns>두 시퀀스에 대해 내부 조인을 수행하여 가져온 <paramref name="TResult" /> 형식 요소가 들어 있는 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="outer">조인할 첫 번째 시퀀스입니다.</param>
      <param name="inner">첫 번째 시퀀스에 조인할 시퀀스입니다.</param>
      <param name="outerKeySelector">첫 번째 시퀀스의 각 요소에서 조인 키를 추출하는 함수입니다.</param>
      <param name="innerKeySelector">두 번째 시퀀스의 각 요소에서 조인 키를 추출하는 함수입니다.</param>
      <param name="resultSelector">일치하는 두 요소에서 결과 요소를 만드는 함수입니다.</param>
      <typeparam name="TOuter">첫 번째 시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TInner">두 번째 시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TKey">키 선택기 함수에서 반환되는 키의 형식입니다.</typeparam>
      <typeparam name="TResult">결과 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 또는 <paramref name="inner" /> 또는 <paramref name="outerKeySelector" /> 또는 <paramref name="innerKeySelector" /> 또는 <paramref name="resultSelector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>일치하는 키를 기준으로 두 시퀀스의 요소를 연관시킵니다.지정된 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />를 사용하여 키를 비교합니다.</summary>
      <returns>두 시퀀스에 대해 내부 조인을 수행하여 가져온 <paramref name="TResult" /> 형식 요소가 들어 있는 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="outer">조인할 첫 번째 시퀀스입니다.</param>
      <param name="inner">첫 번째 시퀀스에 조인할 시퀀스입니다.</param>
      <param name="outerKeySelector">첫 번째 시퀀스의 각 요소에서 조인 키를 추출하는 함수입니다.</param>
      <param name="innerKeySelector">두 번째 시퀀스의 각 요소에서 조인 키를 추출하는 함수입니다.</param>
      <param name="resultSelector">일치하는 두 요소에서 결과 요소를 만드는 함수입니다.</param>
      <param name="comparer">키를 해시하고 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TOuter">첫 번째 시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TInner">두 번째 시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TKey">키 선택기 함수에서 반환되는 키의 형식입니다.</typeparam>
      <typeparam name="TResult">결과 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 또는 <paramref name="inner" /> 또는 <paramref name="outerKeySelector" /> 또는 <paramref name="innerKeySelector" /> 또는 <paramref name="resultSelector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
      <summary>시퀀스의 마지막 요소를 반환합니다.</summary>
      <returns>
        <paramref name="source" />에서 마지막 위치의 값입니다.</returns>
      <param name="source">마지막 요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">소스 시퀀스가 비어 있습니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>지정된 조건을 충족하는 시퀀스의 마지막 요소를 반환합니다.</summary>
      <returns>
        <paramref name="source" />에서 <paramref name="predicate" />에 지정된 테스트를 통과하는 마지막 요소입니다.</returns>
      <param name="source">요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" />의 조건에 맞는 요소가 없는 경우-또는-소스 시퀀스가 비어 있습니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>시퀀스의 마지막 요소를 반환하거나, 시퀀스에 요소가 없으면 기본값을 반환합니다.</summary>
      <returns>
        <paramref name="source" />가 비어 있으면 기본값(<paramref name="TSource" />)이고, 그렇지 않으면 <paramref name="source" />의 마지막 요소입니다.</returns>
      <param name="source">마지막 요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>시퀀스에서 조건을 충족하는 마지막 요소를 반환합니다. 시퀀스에 그러한 요소가 없으면 기본값을 반환합니다.</summary>
      <returns>
        <paramref name="source" />가 비어 있거나 조건자 함수의 테스트를 통과하는 요소가 없으면 기본값(<paramref name="TSource" />)이고, 그렇지 않으면 <paramref name="source" />에서 조건자 함수의 테스트를 통과하는 마지막 요소입니다.</returns>
      <param name="source">요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
      <summary>시퀀스의 총 요소 수를 나타내는 <see cref="T:System.Int64" />를 반환합니다.</summary>
      <returns>
        <paramref name="source" />의 요소 수입니다.</returns>
      <param name="source">개수를 셀 요소를 포함하는 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.OverflowException">요소의 수가 <see cref="F:System.Int64.MaxValue" />를 초과합니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>시퀀스에서 조건을 충족하는 요소의 수를 나타내는 <see cref="T:System.Int64" />를 반환합니다.</summary>
      <returns>
        <paramref name="source" />에서 조건자 함수의 조건에 맞는 요소 수입니다.</returns>
      <param name="source">개수를 셀 요소를 포함하는 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
      <exception cref="T:System.OverflowException">일치하는 요소의 수가 <see cref="F:System.Int64.MaxValue" />를 초과합니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
      <summary>제네릭 <see cref="T:System.Linq.IQueryable`1" />의 최대값을 반환합니다.</summary>
      <returns>시퀀스의 최대값입니다.</returns>
      <param name="source">최대값을 확인할 값 시퀀스입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>제네릭 <see cref="T:System.Linq.IQueryable`1" />의 각 요소에서 프로젝션 함수를 호출하고 최대 결과 값을 반환합니다.</summary>
      <returns>시퀀스의 최대값입니다.</returns>
      <param name="source">최대값을 확인할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" />에 지정된 함수가 반환하는 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
      <summary>제네릭 <see cref="T:System.Linq.IQueryable`1" />의 최소값을 반환합니다.</summary>
      <returns>시퀀스의 최소값입니다.</returns>
      <param name="source">최소값을 확인할 값 시퀀스입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>제네릭 <see cref="T:System.Linq.IQueryable`1" />의 각 요소에서 프로젝션 함수를 호출하고 최소 결과 값을 반환합니다.</summary>
      <returns>시퀀스의 최소값입니다.</returns>
      <param name="source">최소값을 확인할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" />에 지정된 함수가 반환하는 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
      <summary>지정된 형식을 기준으로 <see cref="T:System.Linq.IQueryable" />의 요소를 필터링합니다.</summary>
      <returns>형식이 <paramref name="TResult" />인 <paramref name="source" />의 요소가 들어 있는 컬렉션입니다.</returns>
      <param name="source">요소를 필터링할 <see cref="T:System.Linq.IQueryable" />입니다.</param>
      <typeparam name="TResult">시퀀스의 요소를 필터링할 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>시퀀스의 요소를 키에 따라 오름차순으로 정렬합니다.</summary>
      <returns>요소가 키에 따라 정렬된 <see cref="T:System.Linq.IOrderedQueryable`1" />입니다.</returns>
      <param name="source">정렬할 값 시퀀스입니다.</param>
      <param name="keySelector">요소에서 키를 추출하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에 지정된 함수가 반환하는 키 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>시퀀스의 요소를 지정된 비교자를 사용하여 오름차순으로 정렬합니다.</summary>
      <returns>요소가 키에 따라 정렬된 <see cref="T:System.Linq.IOrderedQueryable`1" />입니다.</returns>
      <param name="source">정렬할 값 시퀀스입니다.</param>
      <param name="keySelector">요소에서 키를 추출하는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IComparer`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에 지정된 함수가 반환하는 키 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" /> 또는 <paramref name="comparer" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>시퀀스의 요소를 키에 따라 내림차순으로 정렬합니다.</summary>
      <returns>요소가 키에 따라 내림차순으로 정렬된 <see cref="T:System.Linq.IOrderedQueryable`1" />입니다.</returns>
      <param name="source">정렬할 값 시퀀스입니다.</param>
      <param name="keySelector">요소에서 키를 추출하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에 지정된 함수가 반환하는 키 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>시퀀스의 요소를 지정된 비교자를 사용하여 내림차순으로 정렬합니다.</summary>
      <returns>요소가 키에 따라 내림차순으로 정렬된 <see cref="T:System.Linq.IOrderedQueryable`1" />입니다.</returns>
      <param name="source">정렬할 값 시퀀스입니다.</param>
      <param name="keySelector">요소에서 키를 추출하는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IComparer`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에 지정된 함수가 반환하는 키 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" /> 또는 <paramref name="comparer" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
      <summary>시퀀스에 있는 요소의 순서를 반대로 합니다.</summary>
      <returns>입력 시퀀스의 요소 순서를 역순으로 한 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="source">순서를 반대로 할 값 시퀀스입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>시퀀스의 각 요소를 새 폼에 프로젝션합니다.</summary>
      <returns>해당 요소가 <paramref name="source" />의 각 요소에 대해 프로젝션 함수를 호출한 결과인 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="source">프로젝션할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" />에 지정된 함수가 반환하는 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
      <summary>요소의 인덱스를 통합하여 시퀀스의 각 요소를 새 폼에 프로젝션합니다.</summary>
      <returns>해당 요소가 <paramref name="source" />의 각 요소에 대해 프로젝션 함수를 호출한 결과인 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="source">프로젝션할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" />에 지정된 함수가 반환하는 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>시퀀스의 각 요소를 <see cref="T:System.Collections.Generic.IEnumerable`1" />에 프로젝션하고 각 요소에서 결과 선택기 함수를 호출합니다.각 중간 시퀀스의 결과 값을 1차원 단일 시퀀스로 결합하여 반환합니다.</summary>
      <returns>해당 요소가 <paramref name="source" />의 각 요소에 대해 일대다 프로젝션 함수 <paramref name="collectionSelector" />를 호출한 다음 이러한 시퀀스 요소와 해당 <paramref name="source" /> 요소를 각각 결과 요소에 매핑한 결과인 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="source">프로젝션할 값 시퀀스입니다.</param>
      <param name="collectionSelector">입력 시퀀스의 각 요소에 적용할 프로젝션 함수입니다.</param>
      <param name="resultSelector">각 중간 시퀀스의 각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TCollection">
        <paramref name="collectionSelector" />가 나타내는 함수가 수집한 중간 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">결과 시퀀스의 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="collectionSelector" /> 또는 <paramref name="resultSelector" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>시퀀스의 각 요소를 <see cref="T:System.Collections.Generic.IEnumerable`1" />에 프로젝션하고 결과 시퀀스를 하나의 시퀀스로 결합합니다.</summary>
      <returns>포함하는 요소가 입력 시퀀스의 각 요소에서 일대다 프로젝션 함수를 호출한 결과인 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="source">프로젝션할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" />가 나타내는 함수에서 반환되는 시퀀스 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>시퀀스의 각 요소를 해당 소스 요소의 인덱스를 통합하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />에 프로젝션합니다.각 중간 시퀀스의 각 요소에 대해 결과 선택기 함수를 호출하고 결과 값을 1차원 단일 시퀀스로 결합하여 반환합니다.</summary>
      <returns>해당 요소가 <paramref name="source" />의 각 요소에 대해 일대다 프로젝션 함수 <paramref name="collectionSelector" />를 호출한 다음 이러한 시퀀스 요소와 해당 <paramref name="source" /> 요소를 각각 결과 요소에 매핑한 결과인 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="source">프로젝션할 값 시퀀스입니다.</param>
      <param name="collectionSelector">입력 시퀀스의 각 요소에 적용할 프로젝션 함수이며, 이 함수의 두 번째 매개 변수는 소스 요소의 인덱스를 나타냅니다.</param>
      <param name="resultSelector">각 중간 시퀀스의 각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TCollection">
        <paramref name="collectionSelector" />가 나타내는 함수가 수집한 중간 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">결과 시퀀스의 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="collectionSelector" /> 또는 <paramref name="resultSelector" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>시퀀스의 각 요소를 <see cref="T:System.Collections.Generic.IEnumerable`1" />에 프로젝션하고 결과 시퀀스를 하나의 시퀀스로 결합합니다.각 소스 요소의 인덱스는 해당 요소의 투영된 폼에 사용됩니다.</summary>
      <returns>포함하는 요소가 입력 시퀀스의 각 요소에서 일대다 프로젝션 함수를 호출한 결과인 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="source">프로젝션할 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수이며, 이 함수의 두 번째 매개 변수는 소스 요소의 인덱스를 나타냅니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" />가 나타내는 함수에서 반환되는 시퀀스 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>기본 같음 비교자를 통해 요소를 비교하여 두 시퀀스가 서로 같은지 확인합니다.</summary>
      <returns>두 소스 시퀀스의 길이가 같고 상응하는 요소가 서로 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="source1">
        <paramref name="source2" />의 요소와 비교할 요소를 포함하는 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="source2">첫 번째 시퀀스의 요소와 비교할 요소를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <typeparam name="TSource">입력 시퀀스의 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 또는 <paramref name="source2" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>지정된 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />로 요소를 비교하여 두 시퀀스가 같은지 여부를 확인합니다.</summary>
      <returns>두 소스 시퀀스의 길이가 같고 상응하는 요소가 서로 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="source1">
        <paramref name="source2" />의 요소와 비교할 요소를 포함하는 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="source2">첫 번째 시퀀스의 요소와 비교할 요소를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="comparer">요소를 비교하는 데 사용할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TSource">입력 시퀀스의 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 또는 <paramref name="source2" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
      <summary>시퀀스의 유일한 요소를 반환하고, 시퀀스에 정확히 하나의 요소가 있는 것이 아니면 예외를 발생합니다.</summary>
      <returns>입력 시퀀스의 단일 요소입니다.</returns>
      <param name="source">단일 요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 에 둘 이상의 요소가 있습니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>지정된 조건을 충족하는 시퀀스의 유일한 요소를 반환하고, 그러한 요소가 둘 이상이면 예외를 발생합니다.</summary>
      <returns>입력 시퀀스에서 <paramref name="predicate" />의 조건에 맞는 단일 요소입니다.</returns>
      <param name="source">단일 요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">조건에 대해 요소를 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" />의 조건에 맞는 요소가 없는 경우-또는-<paramref name="predicate" />의 조건에 맞는 요소가 둘 이상인 경우-또는-소스 시퀀스가 비어 있습니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>시퀀스의 유일한 요소를 반환하거나, 시퀀스가 비어 있으면 기본값을 반환합니다. 이 메서드는 시퀀스에 둘 이상의 요소가 있으면 예외를 발생합니다.</summary>
      <returns>입력 시퀀스의 기본 요소입니다. 또는 시퀀스에 요소가 포함되어 있지 않으면 default(<paramref name="TSource" />)입니다.</returns>
      <param name="source">단일 요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>지정된 조건을 충족하는 시퀀스의 유일한 요소를 반환하거나, 그러한 요소가 없으면 기본값을 반환합니다. 이 메서드는 조건을 충족하는 요소가 둘 이상이면 예외를 발생합니다.</summary>
      <returns>
        <paramref name="predicate" />의 조건을 충족하는 입력 시퀀스의 단일 요소입니다. 또는 그러한 요소가 없으면 기본값(<paramref name="TSource" />)입니다.</returns>
      <param name="source">단일 요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">조건에 대해 요소를 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>시퀀스에서 지정된 수만큼의 요소를 무시한 다음 나머지 요소를 반환합니다.</summary>
      <returns>입력 시퀀스에서 지정된 인덱스 뒤에 나오는 요소를 포함하는 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="source">요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="count">나머지 요소를 반환하기 전에 건너뛸 요소의 수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>지정된 조건이 True이면 시퀀스에 있는 요소를 무시하고 나머지 요소를 반환합니다.</summary>
      <returns>
        <paramref name="source" />에서 <paramref name="predicate" />에 지정된 테스트를 통과하지 않는 급수의 첫 요소부터 시작되는 요소가 들어 있는 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="source">요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>지정된 조건이 True이면 시퀀스에 있는 요소를 무시하고 나머지 요소를 반환합니다.조건자 함수의 논리에 요소의 인덱스가 사용됩니다.</summary>
      <returns>
        <paramref name="source" />에서 <paramref name="predicate" />에 지정된 테스트를 통과하지 않는 급수의 첫 요소부터 시작되는 요소가 들어 있는 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="source">요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">각 요소를 조건에 대해 테스트할 함수이며, 이 함수의 두 번째 매개 변수는 소스 요소의 인덱스를 나타냅니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
      <summary>
        <see cref="T:System.Decimal" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>시퀀스의 값 합계입니다.</returns>
      <param name="source">합계를 계산할 <see cref="T:System.Decimal" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.OverflowException">합계가 <see cref="F:System.Decimal.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
      <summary>
        <see cref="T:System.Double" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>시퀀스의 값 합계입니다.</returns>
      <param name="source">합계를 계산할 <see cref="T:System.Double" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
      <summary>
        <see cref="T:System.Int32" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>시퀀스의 값 합계입니다.</returns>
      <param name="source">합계를 계산할 <see cref="T:System.Int32" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.OverflowException">합계가 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
      <summary>
        <see cref="T:System.Int64" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>시퀀스의 값 합계입니다.</returns>
      <param name="source">합계를 계산할 <see cref="T:System.Int64" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.OverflowException">합계가 <see cref="F:System.Int64.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>nullable <see cref="T:System.Decimal" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>시퀀스의 값 합계입니다.</returns>
      <param name="source">합계를 계산할 nullable <see cref="T:System.Decimal" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.OverflowException">합계가 <see cref="F:System.Decimal.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>nullable <see cref="T:System.Double" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>시퀀스의 값 합계입니다.</returns>
      <param name="source">합계를 계산할 nullable <see cref="T:System.Double" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>nullable <see cref="T:System.Int32" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>시퀀스의 값 합계입니다.</returns>
      <param name="source">합계를 계산할 nullable <see cref="T:System.Int32" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.OverflowException">합계가 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>nullable <see cref="T:System.Int64" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>시퀀스의 값 합계입니다.</returns>
      <param name="source">합계를 계산할 nullable <see cref="T:System.Int64" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
      <exception cref="T:System.OverflowException">합계가 <see cref="F:System.Int64.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>nullable <see cref="T:System.Single" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>시퀀스의 값 합계입니다.</returns>
      <param name="source">합계를 계산할 nullable <see cref="T:System.Single" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
      <summary>
        <see cref="T:System.Single" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>시퀀스의 값 합계입니다.</returns>
      <param name="source">합계를 계산할 <see cref="T:System.Single" /> 값 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>입력 시퀀스의 각 요소에서 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Decimal" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>프로젝션된 값의 합계입니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식의 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.OverflowException">합계가 <see cref="F:System.Decimal.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>입력 시퀀스의 각 요소에서 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Double" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>프로젝션된 값의 합계입니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식의 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>입력 시퀀스의 각 요소에서 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Int32" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>프로젝션된 값의 합계입니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식의 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.OverflowException">합계가 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>입력 시퀀스의 각 요소에서 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Int64" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>프로젝션된 값의 합계입니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식의 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.OverflowException">합계가 <see cref="F:System.Int64.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>입력 시퀀스의 각 요소에서 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Decimal" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>프로젝션된 값의 합계입니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식의 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.OverflowException">합계가 <see cref="F:System.Decimal.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>입력 시퀀스의 각 요소에서 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Double" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>프로젝션된 값의 합계입니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식의 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>입력 시퀀스의 각 요소에서 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Int32" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>프로젝션된 값의 합계입니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식의 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.OverflowException">합계가 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>입력 시퀀스의 각 요소에서 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Int64" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>프로젝션된 값의 합계입니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식의 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.OverflowException">합계가 <see cref="F:System.Int64.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>입력 시퀀스의 각 요소에서 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Single" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>프로젝션된 값의 합계입니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식의 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>입력 시퀀스의 각 요소에서 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Single" /> 값 시퀀스의 합계를 계산합니다.</summary>
      <returns>프로젝션된 값의 합계입니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식의 값 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>시퀀스의 시작 위치에서 지정된 수만큼의 연속 요소를 반환합니다.</summary>
      <returns>
        <paramref name="source" /> 시작 위치에서 지정된 수의 요소가 들어 있는 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="source">요소를 반환할 시퀀스입니다.</param>
      <param name="count">반환할 요소의 수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>지정된 조건이 True이면 시퀀스에서 요소를 반환합니다.</summary>
      <returns>입력 시퀀스에서 요소가 <paramref name="predicate" />에 지정된 테스트를 더 이상 통과하지 않는 위치보다 앞에 나오는 요소가 들어 있는 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="source">요소를 반환할 시퀀스입니다.</param>
      <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>지정된 조건이 True이면 시퀀스에서 요소를 반환합니다.조건자 함수의 논리에 요소의 인덱스가 사용됩니다.</summary>
      <returns>입력 시퀀스에서 요소가 <paramref name="predicate" />에 지정된 테스트를 더 이상 통과하지 않는 위치보다 앞에 나오는 요소가 들어 있는 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="source">요소를 반환할 시퀀스입니다.</param>
      <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다. 이 함수의 두 번째 매개 변수는 소스 시퀀스 요소의 인덱스를 나타냅니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>시퀀스의 요소를 키에 따라 오름차순으로 다시 정렬합니다.</summary>
      <returns>요소가 키에 따라 정렬된 <see cref="T:System.Linq.IOrderedQueryable`1" />입니다.</returns>
      <param name="source">정렬할 요소를 포함하는 <see cref="T:System.Linq.IOrderedQueryable`1" />입니다.</param>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에 지정된 함수가 반환하는 키 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>시퀀스의 요소를 지정된 비교자를 사용하여 오름차순으로 다시 정렬합니다.</summary>
      <returns>요소가 키에 따라 정렬된 <see cref="T:System.Linq.IOrderedQueryable`1" />입니다.</returns>
      <param name="source">정렬할 요소를 포함하는 <see cref="T:System.Linq.IOrderedQueryable`1" />입니다.</param>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IComparer`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에 지정된 함수가 반환하는 키 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" /> 또는 <paramref name="comparer" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>시퀀스의 요소를 키에 따라 내림차순으로 다시 정렬합니다.</summary>
      <returns>요소가 키에 따라 내림차순으로 정렬된 <see cref="T:System.Linq.IOrderedQueryable`1" />입니다.</returns>
      <param name="source">정렬할 요소를 포함하는 <see cref="T:System.Linq.IOrderedQueryable`1" />입니다.</param>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에 지정된 함수가 반환하는 키 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>시퀀스의 요소를 지정된 비교자를 사용하여 내림차순으로 다시 정렬합니다.</summary>
      <returns>요소가 키에 따라 내림차순으로 정렬된 컬렉션입니다.</returns>
      <param name="source">정렬할 요소를 포함하는 <see cref="T:System.Linq.IOrderedQueryable`1" />입니다.</param>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IComparer`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 함수가 반환하는 키 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="keySelector" /> 또는 <paramref name="comparer" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>기본 같음 비교자를 사용하여 두 시퀀스의 합집합을 구합니다.</summary>
      <returns>두 입력 시퀀스의 모든 요소가 들어 있는 <see cref="T:System.Linq.IQueryable`1" />이며, 중복 요소는 제외됩니다.</returns>
      <param name="source1">포함하는 요소가 합집합 연산의 첫 번째 집합을 구성하는 시퀀스입니다.</param>
      <param name="source2">포함하는 요소가 합집합 연산의 두 번째 집합을 구성하는 시퀀스입니다.</param>
      <typeparam name="TSource">입력 시퀀스의 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 또는 <paramref name="source2" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>지정된 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />을 사용하여 두 시퀀스의 합집합을 구합니다.</summary>
      <returns>두 입력 시퀀스의 모든 요소가 들어 있는 <see cref="T:System.Linq.IQueryable`1" />이며, 중복 요소는 제외됩니다.</returns>
      <param name="source1">포함하는 요소가 합집합 연산의 첫 번째 집합을 구성하는 시퀀스입니다.</param>
      <param name="source2">포함하는 요소가 합집합 연산의 두 번째 집합을 구성하는 시퀀스입니다.</param>
      <param name="comparer">값을 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TSource">입력 시퀀스의 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 또는 <paramref name="source2" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>조건자를 기준으로 값 시퀀스를 필터링합니다.</summary>
      <returns>입력 시퀀스에서 <paramref name="predicate" />에 지정된 조건에 맞는 요소가 들어 있는 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="source">필터링할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>조건자를 기준으로 값 시퀀스를 필터링합니다.조건자 함수의 논리에 각 요소의 인덱스가 사용됩니다.</summary>
      <returns>입력 시퀀스에서 <paramref name="predicate" />에 지정된 조건에 맞는 요소가 들어 있는 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="source">필터링할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다. 이 함수의 두 번째 매개 변수는 소스 시퀀스 요소의 인덱스를 나타냅니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>지정된 조건자 함수를 사용하여 두 시퀀스를 병합합니다.</summary>
      <returns>두 입력 시퀀스의 병합된 요소가 들어 있는 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="source1">병합할 첫 번째 시퀀스입니다.</param>
      <param name="source2">병합할 두 번째 시퀀스입니다.</param>
      <param name="resultSelector">두 시퀀스에서 요소를 병합하는 방법을 지정하는 함수입니다.</param>
      <typeparam name="TFirst">첫 번째 입력 시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TSecond">두 번째 입력 시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TResult">결과 시퀀스의 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 또는 <paramref name="source2 " />가 null입니다.</exception>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary>이항 연산자가 있는 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다.예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <returns>이 노드의 방문 결과입니다.</returns>
      <param name="visitor">이 노드를 방문할 방문자입니다.</param>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <summary>식 트리 노드를 줄일 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>식 트리 노드를 줄일 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary>결합 또는 복합 할당 연산에 사용되는 형식 변환 함수를 가져옵니다.</summary>
      <returns>형식 변환 함수를 나타내는 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary>식 트리 노드가 연산자에 대한 리프트된 호출을 나타내는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>노드가 리프트된 호출을 나타내면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary>식 트리 노드가 해당 반환 형식이 nullable 형식으로 리프트된 연산자에 대한 리프트된 호출을 나타내는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>연산자의 반환 형식이 nullable 형식으로 리프트되면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary>이항 연산의 왼쪽 피연산자를 가져옵니다.</summary>
      <returns>이항 연산의 왼쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary>이항 연산에 대한 구현 메서드를 가져옵니다.</summary>
      <returns>구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <summary>이항 식 노드를 더 단순한 식으로 줄입니다.</summary>
      <returns>줄어든 식입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary>이항 연산의 오른쪽 피연산자를 가져옵니다.</summary>
      <returns>이항 연산의 오른쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <summary>제공된 자식을 사용하여 이와 유사한 새 식을 만듭니다.모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="left">결과의 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성입니다. </param>
      <param name="conversion">결과의 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성입니다.</param>
      <param name="right">결과의 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성입니다. </param>
    </member>
    <member name="T:System.Linq.Expressions.BlockExpression">
      <summary>변수를 정의할 수 있는 식의 시퀀스가 들어 있는 블록을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다.예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <returns>이 노드의 방문 결과입니다.</returns>
      <param name="visitor">이 노드를 방문할 방문자입니다.</param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
      <summary>이 블록의 식을 가져옵니다.</summary>
      <returns>이 블록의 모든 식이 들어 있는 읽기 전용 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
      <summary>이 식의 노드 형식을 반환합니다.확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns>식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Result">
      <summary>이 블록의 마지막 식을 가져옵니다.</summary>
      <returns>이 블록의 마지막 식을 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.BlockExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>제공된 자식을 사용하여 이와 유사한 새 식을 만듭니다.모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="variables">결과의 <see cref="P:System.Linq.Expressions.BlockExpression.Variables" /> 속성입니다. </param>
      <param name="expressions">결과의 <see cref="P:System.Linq.Expressions.BlockExpression.Expressions" /> 속성입니다. </param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Variables">
      <summary>이 블록에 정의된 변수를 가져옵니다.</summary>
      <returns>이 블록에 정의된 모든 변수가 들어 있는 읽기 전용 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.CatchBlock">
      <summary>try 블록의 catch 문을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Body">
      <summary>catch 블록의 본문을 가져옵니다.</summary>
      <returns>catch 본문을 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Filter">
      <summary>
        <see cref="T:System.Linq.Expressions.CatchBlock" /> 필터의 본문을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.CatchBlock" /> 필터의 본문을 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Test">
      <summary>이 처리기가 catch하는 <see cref="T:System.Exception" />의 형식을 가져옵니다.</summary>
      <returns>이 처리기가 catch하는 <see cref="T:System.Exception" />의 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.ToString">
      <summary>현재 <see cref="T:System.Object" />을 나타내는 <see cref="T:System.String" />을 반환합니다.</summary>
      <returns>현재 <see cref="T:System.Object" />를 나타내는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>제공된 자식을 사용하여 이와 유사한 새 식을 만듭니다.모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="variable">결과의 <see cref="P:System.Linq.Expressions.CatchBlock.Variable" /> 속성입니다.</param>
      <param name="filter">결과의 <see cref="P:System.Linq.Expressions.CatchBlock.Filter" /> 속성입니다.</param>
      <param name="body">결과의 <see cref="P:System.Linq.Expressions.CatchBlock.Body" /> 속성입니다.</param>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Variable">
      <summary>이 처리기가 catch한 <see cref="T:System.Exception" /> 개체에 대한 참조를 가져옵니다.</summary>
      <returns>이 처리기가 catch한 <see cref="T:System.Exception" /> 개체에 대한 참조를 나타내는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary>조건 연산자가 있는 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다.예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <returns>이 노드의 방문 결과입니다.</returns>
      <param name="visitor">이 노드를 방문할 방문자입니다.</param>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary>테스트 결과가 false인 경우 실행할 식을 가져옵니다.</summary>
      <returns>테스트 결과가 false인 경우 실행할 식을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary>테스트 결과가 true인 경우 실행할 식을 가져옵니다.</summary>
      <returns>테스트 결과가 true인 경우 실행할 식을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <summary>이 식의 노드 형식을 반환합니다.확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns>식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary>조건 연산의 테스트를 가져옵니다.</summary>
      <returns>조건 연산의 테스트를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.ConditionalExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>제공된 자식을 사용하여 이와 유사한 새 식을 만듭니다.모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="test">결과의 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 속성입니다.</param>
      <param name="ifTrue">결과의 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 속성입니다.</param>
      <param name="ifFalse">결과의 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 속성입니다.</param>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary>상수 값이 있는 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다.예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <returns>이 노드의 방문 결과입니다.</returns>
      <param name="visitor">이 노드를 방문할 방문자입니다.</param>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <summary>이 식의 노드 형식을 반환합니다.확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns>식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.ConstantExpression.Type" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary>상수 식의 값을 가져옵니다.</summary>
      <returns>표현된 식의 값과 같은 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DebugInfoExpression">
      <summary>디버그 정보에 대한 시퀀스 위치를 내보내거나 지워디버깅할 때 디버거가 올바른 소스 코드를 강조 표시할 수 있도록 합니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다.예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <returns>이 노드의 방문 결과입니다.</returns>
      <param name="visitor">이 노드를 방문할 방문자입니다.</param>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <summary>소스 파일을 나타내는 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />를 가져옵니다.</summary>
      <returns>소스 파일을 나타내는 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <summary>이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 끝 열을 가져옵니다.</summary>
      <returns>래핑된 식을 생성하는 데 사용된 코드의 끝 열 번호입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <summary>이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 끝 줄을 가져옵니다.</summary>
      <returns>래핑된 식을 생성하는 데 사용된 코드의 끝 줄 번호입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <summary>
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" />이 시퀀스 지점을 지우기 위한 것인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" />이 시퀀스 점을 지우는 데 사용되면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 형식을 반환합니다.</summary>
      <returns>이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <summary>이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 시작 열을 가져옵니다.</summary>
      <returns>래핑된 식을 생성하는 데 사용된 코드의 시작 열 번호입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <summary>이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 시작 줄을 가져옵니다.</summary>
      <returns>래핑된 식을 생성하는 데 사용된 코드의 시작 줄 번호입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" />입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DefaultExpression">
      <summary>형식 또는 빈 식의 기본값을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <summary>이 식의 노드 형식을 반환합니다.확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns>식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.DefaultExpression.Type" />입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpression">
      <summary>동적 작업을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다.예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <returns>이 노드의 방문 결과입니다.</returns>
      <param name="visitor">이 노드를 방문할 방문자입니다.</param>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Arguments">
      <summary>동적 작업의 인수를 가져옵니다.</summary>
      <returns>동적 작업의 인수가 들어 있는 읽기 전용 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Binder">
      <summary>동적 사이트의 런타임 동작을 결정하는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />를 가져옵니다.</summary>
      <returns>동적 사이트의 런타임 동작을 결정하는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.DelegateType">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자 형식을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용하는 대리자의 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>제공된 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />에 의해 바인딩되는 동적 연산을 나타내는 <see cref="T:System.Linq.Expressions.DynamicExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />이고, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />가 지정 값으로 설정되는 <see cref="T:System.Linq.Expressions.DynamicExpression" />입니다.</returns>
      <param name="binder">동적 연산에 대한 런타임 바인더입니다.</param>
      <param name="returnType">동적 식의 결과 형식입니다.</param>
      <param name="arguments">동적 연산에 대한 인수입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>제공된 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />에 의해 바인딩되는 동적 연산을 나타내는 <see cref="T:System.Linq.Expressions.DynamicExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />이고, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />가 지정 값으로 설정되는 <see cref="T:System.Linq.Expressions.DynamicExpression" />입니다.</returns>
      <param name="binder">동적 연산에 대한 런타임 바인더입니다.</param>
      <param name="returnType">동적 식의 결과 형식입니다.</param>
      <param name="arg0">동적 연산에 대한 첫 번째 인수입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>제공된 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />에 의해 바인딩되는 동적 연산을 나타내는 <see cref="T:System.Linq.Expressions.DynamicExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />이고, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />가 지정 값으로 설정되는 <see cref="T:System.Linq.Expressions.DynamicExpression" />입니다.</returns>
      <param name="binder">동적 연산에 대한 런타임 바인더입니다.</param>
      <param name="returnType">동적 식의 결과 형식입니다.</param>
      <param name="arg0">동적 연산에 대한 첫 번째 인수입니다.</param>
      <param name="arg1">동적 연산에 대한 두 번째 인수입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>제공된 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />에 의해 바인딩되는 동적 연산을 나타내는 <see cref="T:System.Linq.Expressions.DynamicExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />이고, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />가 지정 값으로 설정되는 <see cref="T:System.Linq.Expressions.DynamicExpression" />입니다.</returns>
      <param name="binder">동적 연산에 대한 런타임 바인더입니다.</param>
      <param name="returnType">동적 식의 결과 형식입니다.</param>
      <param name="arg0">동적 연산에 대한 첫 번째 인수입니다.</param>
      <param name="arg1">동적 연산에 대한 두 번째 인수입니다.</param>
      <param name="arg2">동적 연산에 대한 세 번째 인수입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>제공된 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />에 의해 바인딩되는 동적 연산을 나타내는 <see cref="T:System.Linq.Expressions.DynamicExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />이고, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />가 지정 값으로 설정되는 <see cref="T:System.Linq.Expressions.DynamicExpression" />입니다.</returns>
      <param name="binder">동적 연산에 대한 런타임 바인더입니다.</param>
      <param name="returnType">동적 식의 결과 형식입니다.</param>
      <param name="arg0">동적 연산에 대한 첫 번째 인수입니다.</param>
      <param name="arg1">동적 연산에 대한 두 번째 인수입니다.</param>
      <param name="arg2">동적 연산에 대한 세 번째 인수입니다.</param>
      <param name="arg3">동적 연산에 대한 4번째 인수입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>제공된 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />에 의해 바인딩되는 동적 연산을 나타내는 <see cref="T:System.Linq.Expressions.DynamicExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />이고, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />가 지정 값으로 설정되는 <see cref="T:System.Linq.Expressions.DynamicExpression" />입니다.</returns>
      <param name="binder">동적 연산에 대한 런타임 바인더입니다.</param>
      <param name="returnType">동적 식의 결과 형식입니다.</param>
      <param name="arguments">동적 연산에 대한 인수입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>제공된 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />에 의해 바인딩되는 동적 연산을 나타내는 <see cref="T:System.Linq.Expressions.DynamicExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />이고 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />가 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.DynamicExpression" />입니다.</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자 형식을 가져옵니다.</param>
      <param name="binder">동적 연산에 대한 런타임 바인더입니다.</param>
      <param name="arguments">동적 연산에 대한 인수입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>제공된 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 및 하나의 인수에 의해 바인딩되는 동적 연산을 나타내는 <see cref="T:System.Linq.Expressions.DynamicExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />이고 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />가 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.DynamicExpression" />입니다.</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자 형식을 가져옵니다.</param>
      <param name="binder">동적 연산에 대한 런타임 바인더입니다.</param>
      <param name="arg0">동적 작업의 인수입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>제공된 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 및 두 개의 인수에 의해 바인딩되는 동적 연산을 나타내는 <see cref="T:System.Linq.Expressions.DynamicExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />이고 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />가 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.DynamicExpression" />입니다.</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자 형식을 가져옵니다.</param>
      <param name="binder">동적 연산에 대한 런타임 바인더입니다.</param>
      <param name="arg0">동적 연산에 대한 첫 번째 인수입니다.</param>
      <param name="arg1">동적 연산에 대한 두 번째 인수입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>제공된 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 및 3개의 인수에 의해 바인딩되는 동적 연산을 나타내는 <see cref="T:System.Linq.Expressions.DynamicExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />이고 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />가 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.DynamicExpression" />입니다.</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자 형식을 가져옵니다.</param>
      <param name="binder">동적 연산에 대한 런타임 바인더입니다.</param>
      <param name="arg0">동적 연산에 대한 첫 번째 인수입니다.</param>
      <param name="arg1">동적 연산에 대한 두 번째 인수입니다.</param>
      <param name="arg2">동적 연산에 대한 세 번째 인수입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>제공된 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 및 4개의 인수에 의해 바인딩되는 동적 연산을 나타내는 <see cref="T:System.Linq.Expressions.DynamicExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />이고 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />가 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.DynamicExpression" />입니다.</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자 형식을 가져옵니다.</param>
      <param name="binder">동적 연산에 대한 런타임 바인더입니다.</param>
      <param name="arg0">동적 연산에 대한 첫 번째 인수입니다.</param>
      <param name="arg1">동적 연산에 대한 두 번째 인수입니다.</param>
      <param name="arg2">동적 연산에 대한 세 번째 인수입니다.</param>
      <param name="arg3">동적 연산에 대한 4번째 인수입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>제공된 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />에 의해 바인딩되는 동적 연산을 나타내는 <see cref="T:System.Linq.Expressions.DynamicExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />이고 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />가 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.DynamicExpression" />입니다.</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자 형식을 가져옵니다.</param>
      <param name="binder">동적 연산에 대한 런타임 바인더입니다.</param>
      <param name="arguments">동적 연산에 대한 인수입니다.</param>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.NodeType">
      <summary>이 식의 노드 형식을 반환합니다.확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns>식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.DynamicExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>매개 변수 arguments로 전송되는 값을 DynamicExpression의 현재 인스턴스의 인수 속성과 비교합니다.매개 변수의 값과 속성이 같으면 현재 인스턴스가 반환됩니다.같지 않을 경우, 인수 속성이 매개 변수 arguments의 값으로 설정된다는 점을 제외하고 현재 인스턴스와 동일한 새 DynamicExpression 인스턴스가 반환됩니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="arguments">결과의 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 속성입니다.</param>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpressionVisitor">
      <summary>동적 식 트리에 대한 방문자 또는 재작성기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.#ctor">
      <summary>
        <see cref="T:System.Linq.Expressions.DynamicExpressionVisitor" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />의 자식을 열어 봅니다.</summary>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식 <see cref="T:System.Linq.Expressions.Expression" />을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary>
        <see cref="T:System.Collections.IEnumerable" /> 컬렉션의 단일 요소에 대한 이니셜라이저를 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary>
        <see cref="T:System.Collections.IEnumerable" /> 컬렉션에 요소를 추가하는 데 사용되는 인스턴스 메서드를 가져옵니다.</summary>
      <returns>컬렉션에 요소를 추가하는 인스턴스 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary>
        <see cref="T:System.Collections.IEnumerable" /> 컬렉션에 요소를 추가하는 메서드로 전달되는 인수 컬렉션을 가져옵니다.</summary>
      <returns>컬렉션에 요소를 추가하는 메서드에 대한 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary>
        <see cref="T:System.Linq.Expressions.ElementInit" /> 개체의 텍스트 표현을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ElementInit" /> 개체의 텍스트 표현입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>제공된 자식을 사용하여 이와 유사한 새 식을 만듭니다.모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="arguments">결과의 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 속성입니다.</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary>식 트리 노드를 나타내는 클래스가 파생되는 기본 클래스를 제공합니다.또한 다양한 노드 형식을 만드는 정적(Visual Basic의 경우 Shared) 팩터리 메서드를 포함합니다.이 클래스는 추상 클래스입니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor">
      <summary>
        <see cref="T:System.Linq.Expressions.Expression" />의 새 인스턴스를 생성합니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
      <summary>
        <see cref="T:System.Linq.Expressions.Expression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="nodeType">노드 형식으로 설정할 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</param>
      <param name="type">이 <see cref="T:System.Linq.Expressions.Expression" />의 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다.예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <returns>이 노드의 방문 결과입니다.</returns>
      <param name="visitor">이 노드를 방문할 방문자입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하지 않는 산술 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Add" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 더하기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하지 않는 산술 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.구현 메서드를 지정할 수 있습니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Add" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 두 개의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 null이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 더하기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하지 않는 더하기 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하지 않는 더하기 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>오버플로를 검사하지 않는 더하기 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하는 더하기 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하는 더하기 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>오버플로를 검사하는 더하기 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하는 산술 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 더하기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하는 산술 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.구현 메서드를 지정할 수 있습니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 두 개의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 null이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 더하기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>비트 AND 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.And" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 비트 AND 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>비트 AND 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.구현 메서드를 지정할 수 있습니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.And" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 두 개의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 null이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 비트 AND 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>첫 번째 피연산자가 true로 계산되는 경우에만 두 번째 피연산자를 계산하는 조건부 AND 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 비트 AND 연산자가 정의되지 않은 경우-또는-<paramref name="left" />.Type과 <paramref name="right" />.Type이 동일한 부울 형식이 아닌 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>첫 번째 피연산자가 True로 계산되는 경우에만 두 번째 피연산자를 계산하는 조건부 AND 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.구현 메서드를 지정할 수 있습니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 두 개의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 null이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 비트 AND 연산자가 정의되지 않은 경우-또는-<paramref name="method" />가 null이고 <paramref name="left" />.Type과 <paramref name="right" />.Type이 동일한 부울 형식이 아닌 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>비트 AND 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>비트 AND 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>비트 AND 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>다차원 배열에 액세스할 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</returns>
      <param name="array">다차원 배열을 나타내는 식입니다.</param>
      <param name="indexes">배열을 인덱싱하는 데 사용되는 식을 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>배열에 액세스할 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</returns>
      <param name="array">인덱싱할 배열을 나타내는 식입니다.</param>
      <param name="indexes">배열을 인덱싱하는 데 사용되는 식이 포함된 배열입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>차수가 1보다 큰 배열에 대한 배열 인덱스 연산자 적용을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />이고 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.MethodCallExpression" />입니다.</returns>
      <param name="array">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="indexes">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 또는 <paramref name="indexes" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type이 배열 형식을 나타내지 않는 경우-또는-<paramref name="array" />.Type의 차수가 <paramref name="indexes" />의 요소 수와 일치하지 않는 경우-또는-<paramref name="indexes" />의 요소 중 하나 이상의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 <see cref="T:System.Int32" /> 형식을 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>차수가 1인 배열에 대한 배열 인덱스 연산자 적용을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="array">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="index">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 또는 <paramref name="index" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type이 배열 형식을 나타내지 않는 경우-또는-<paramref name="array" />.Type이 나타내는 배열 형식의 차수가 1이 아닌 경우-또는-<paramref name="index" />.Type이 <see cref="T:System.Int32" /> 형식을 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>다차원 배열에 대한 배열 인덱스 연산자 적용을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />이고 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.MethodCallExpression" />입니다.</returns>
      <param name="array">배열 인덱스 연산에 대한 인수로서, <see cref="T:System.Linq.Expressions.Expression" /> 인스턴스의 배열입니다.</param>
      <param name="indexes">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 또는 <paramref name="indexes" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type이 배열 형식을 나타내지 않는 경우-또는-<paramref name="array" />.Type의 차수가 <paramref name="indexes" />의 요소 수와 일치하지 않는 경우-또는-<paramref name="indexes" />의 요소 중 하나 이상의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 <see cref="T:System.Int32" /> 형식을 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary>1차원 배열의 길이를 가져오기 위한 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" />이고 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 <paramref name="array" />인 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="array">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type이 배열 형식을 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Assign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary>필드 또는 속성의 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberAssignment" />를 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 속성이 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />이고 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 및 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 속성이 지정된 값으로 설정된 <see cref="T:System.Linq.Expressions.MemberAssignment" />입니다.</returns>
      <param name="member">
        <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성에 설정할 <see cref="T:System.Reflection.MemberInfo" />입니다.</param>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 또는 <paramref name="expression" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 가 필드 또는 속성을 나타내지 않습니다.-또는-<paramref name="member" />가 나타내는 속성에 set 접근자가 없는 경우-또는-<paramref name="member" />가 나타내는 필드 또는 속성의 형식에 <paramref name="expression" />.Type을 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>속성 접근자 메서드를 사용하여 멤버의 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberAssignment" />를 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 속성이 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />이고 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="propertyAccessor" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />로 설정되고 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 속성이 <paramref name="expression" />으로 설정된 <see cref="T:System.Linq.Expressions.MemberAssignment" />입니다.</returns>
      <param name="propertyAccessor">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 또는 <paramref name="expression" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 가 속성 접근자 메서드를 나타내지 않는 경우-또는-<paramref name="propertyAccessor" />로 액세스하는 속성에 set 접근자가 없는 경우-또는-<paramref name="member" />가 나타내는 필드 또는 속성의 형식에 <paramref name="expression" />.Type을 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>지정된 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
      <param name="expressions">블록에 있는 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>지정된 변수와 식을 포함하는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
      <param name="variables">블록에 있는 변수입니다.</param>
      <param name="expressions">블록에 있는 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>지정된 변수와 식을 포함하는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
      <param name="variables">블록에 있는 변수입니다.</param>
      <param name="expressions">블록에 있는 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>두 개의 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
      <param name="arg0">블록에 있는 첫 번째 식입니다.</param>
      <param name="arg1">블록에 있는 두 번째 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>3개의 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
      <param name="arg0">블록에 있는 첫 번째 식입니다.</param>
      <param name="arg1">블록에 있는 두 번째 식입니다.</param>
      <param name="arg2">블록에 있는 세 번째 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>4개의 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
      <param name="arg0">블록에 있는 첫 번째 식입니다.</param>
      <param name="arg1">블록에 있는 두 번째 식입니다.</param>
      <param name="arg2">블록에 있는 세 번째 식입니다.</param>
      <param name="arg3">블록에 있는 4번째 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>5개의 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
      <param name="arg0">블록에 있는 첫 번째 식입니다.</param>
      <param name="arg1">블록에 있는 두 번째 식입니다.</param>
      <param name="arg2">블록에 있는 세 번째 식입니다.</param>
      <param name="arg3">블록에 있는 4번째 식입니다.</param>
      <param name="arg4">블록의 다섯 번째 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <summary>지정된 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
      <param name="expressions">블록에 있는 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>지정된 식을 포함하고 변수가 없으며 특정 결과 형식을 갖는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
      <param name="type">블록의 결과 형식입니다.</param>
      <param name="expressions">블록에 있는 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>지정된 변수와 식을 포함하는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
      <param name="type">블록의 결과 형식입니다.</param>
      <param name="variables">블록에 있는 변수입니다.</param>
      <param name="expressions">블록에 있는 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>지정된 변수와 식을 포함하는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
      <param name="type">블록의 결과 형식입니다.</param>
      <param name="variables">블록에 있는 변수입니다.</param>
      <param name="expressions">블록에 있는 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <summary>지정된 식을 포함하고 변수가 없으며 특정 결과 형식을 갖는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
      <param name="type">블록의 결과 형식입니다.</param>
      <param name="expressions">블록에 있는 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <summary>break 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />가 Break이고, <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 속성이 <paramref name="target" />으로 설정되며, 이동 시 대상 레이블에 null 값이 전달되는 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" />이 점프할 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>break 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />가 Break이고, <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 속성이 <paramref name="target" />으로 설정되며, 이동 시 대상 레이블에 <paramref name="value" />가 전달되는 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" />이 점프할 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</param>
      <param name="value">점프 시 연결된 레이블에 전달되는 값입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>지정된 형식을 사용하여 break 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />가 Break이고, <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 속성이 <paramref name="target" />으로 설정되며, <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 <paramref name="type" />으로 설정되고, 이동 시 대상 레이블에 <paramref name="value" />가 전달되는 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" />이 점프할 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</param>
      <param name="value">점프 시 연결된 레이블에 전달되는 값입니다.</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>지정된 형식을 사용하여 break 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />가 Break이고, <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 속성이 <paramref name="target" />으로 설정되며, <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 <paramref name="type" />으로 설정된 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" />이 점프할 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>인수를 사용하지 않는 인스턴스 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />이고 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.MethodCallExpression" />입니다.</returns>
      <param name="instance">인스턴스 메서드 호출에 대한 인스턴스를 지정하는 <see cref="T:System.Linq.Expressions.Expression" />입니다. 정적(Visual Basic에서는 Shared) 메서드의 경우 null을 전달합니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />이 null입니다.-또는-<paramref name="instance" />가 null이고 <paramref name="method" />가 인스턴스 메서드를 나타내는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type을 <paramref name="method" />가 나타내는 메서드의 선언 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>인수를 사용하는 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />이고 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.MethodCallExpression" />입니다.</returns>
      <param name="instance">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다. 정적(Visual Basic에서는 Shared) 메서드의 경우 null을 전달합니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="arguments">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />이 null입니다.-또는-<paramref name="instance" />가 null이고 <paramref name="method" />가 인스턴스 메서드를 나타내는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type을 <paramref name="method" />가 나타내는 메서드의 선언 형식에 할당할 수 없는 경우-또는-<paramref name="arguments" />의 요소 수가 <paramref name="method" />가 나타내는 메서드의 매개 변수 수와 다른 경우-또는-<paramref name="arguments" />의 요소 중 하나 이상을 <paramref name="method" />가 나타내는 해당 매개 변수에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>두 개의 인수를 사용하는 정적 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />이고 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.MethodCallExpression" />입니다.</returns>
      <param name="instance">인스턴스 호출에 대한 인스턴스를 지정하는 <see cref="T:System.Linq.Expressions.Expression" />입니다.static(Visual Basic에서는 Shared) 메서드의 경우 null을 전달합니다.</param>
      <param name="method">대상 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="arg0">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg1">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>인수를 사용하지 않는 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />이고 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.MethodCallExpression" />입니다.</returns>
      <param name="instance">인스턴스 호출에 대한 인스턴스를 지정하는 <see cref="T:System.Linq.Expressions.Expression" />입니다.static(Visual Basic에서는 Shared) 메서드의 경우 null을 전달합니다.</param>
      <param name="method">대상 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="arg0">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg1">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg2">세 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>인수를 사용하는 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />이고 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.MethodCallExpression" />입니다.</returns>
      <param name="instance">인스턴스 메서드 호출에 대한 인스턴스를 지정하는 <see cref="T:System.Linq.Expressions.Expression" />입니다. 정적(Visual Basic에서는 Shared) 메서드의 경우 null을 전달합니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="arguments">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />이 null입니다.-또는-<paramref name="instance" />가 null이고 <paramref name="method" />가 인스턴스 메서드를 나타내는 경우-또는-<paramref name="arguments" />가 null이 아니고 해당 요소 중 하나 이상이 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type을 <paramref name="method" />가 나타내는 메서드의 선언 형식에 할당할 수 없는 경우-또는-<paramref name="arguments" />의 요소 수가 <paramref name="method" />가 나타내는 메서드의 매개 변수 수와 다른 경우-또는-<paramref name="arguments" />의 요소 중 하나 이상을 <paramref name="method" />가 나타내는 해당 매개 변수에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>적절한 팩터리 메서드를 호출하여 인스턴스 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />이고, <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 <paramref name="instance" />이고, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />가 지정된 인스턴스 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />로 설정되고 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />가 지정된 인수로 설정된 <see cref="T:System.Linq.Expressions.MethodCallExpression" />입니다.</returns>
      <param name="instance">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성 값이 특정 메서드에 대해 검색되는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="methodName">메서드 이름입니다.</param>
      <param name="typeArguments">제네릭 메서드의 형식 매개 변수를 지정하는 <see cref="T:System.Type" /> 개체의 배열입니다.methodName에서 제네릭이 아닌 메서드를 지정하는 경우 이 인수는 null입니다.</param>
      <param name="arguments">메서드에 대한 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 또는 <paramref name="methodName" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="instance" />.Type 또는 해당 기본 형식에 이름이 <paramref name="methodName" />이고 형식 매개 변수가 <paramref name="typeArguments" />와 일치하고 매개 변수 형식이 <paramref name="arguments" />와 일치하는 메서드가 없는 경우-또는-<paramref name="instance" />.Type 또는 해당 기본 형식에 이름이 <paramref name="methodName" />이고 형식 매개 변수가 <paramref name="typeArguments" />와 일치하고 매개 변수 형식이 <paramref name="arguments" />와 일치하는 메서드가 둘 이상 있는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>정적(Visual Basic에서는 Shared) 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />이고 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.MethodCallExpression" />입니다.</returns>
      <param name="method">대상 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="arguments">호출 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>하나의 인수를 사용하는 정적(Visual Basic에서는 Shared) 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />이고 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.MethodCallExpression" />입니다.</returns>
      <param name="method">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="arg0">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>두 개의 인수를 사용하는 정적 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />이고 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.MethodCallExpression" />입니다.</returns>
      <param name="method">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="arg0">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg1">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>3개의 인수를 사용하는 정적 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />이고 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.MethodCallExpression" />입니다.</returns>
      <param name="method">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="arg0">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg1">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg2">세 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>4개의 인수를 사용하는 정적 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />이고 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.MethodCallExpression" />입니다.</returns>
      <param name="method">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="arg0">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg1">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg2">세 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg3">4번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>5개의 인수를 갖는 정적 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />이고 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.MethodCallExpression" />입니다.</returns>
      <param name="method">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="arg0">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg1">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg2">세 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg3">4번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg4">5번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>인수를 사용하는 정적(Visual Basic에서는 Shared) 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />이고 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.MethodCallExpression" />입니다.</returns>
      <param name="method">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성에 설정할 정적(Visual Basic에서는 Shared) 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="arguments">
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" />의 요소 수가 <paramref name="method" />가 나타내는 메서드의 매개 변수 수와 다른 경우-또는-<paramref name="arguments" />의 요소 중 하나 이상을 <paramref name="method" />가 나타내는 해당 매개 변수에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>적절한 팩터리 메서드를 호출하여 정적(Visual Basic에서는 Shared) 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />이고 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성이 지정된 정적(Visual Basic의 경우 Shared) 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />로 설정되고 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 속성이 지정된 인수로 설정된 <see cref="T:System.Linq.Expressions.MethodCallExpression" />입니다.</returns>
      <param name="type">지정된 정적(Visual Basic에서는 Shared) 메서드를 포함하는 형식을 지정하는 <see cref="T:System.Type" />입니다.</param>
      <param name="methodName">메서드 이름입니다.</param>
      <param name="typeArguments">제네릭 메서드의 형식 매개 변수를 지정하는 <see cref="T:System.Type" /> 개체의 배열입니다.methodName에서 제네릭이 아닌 메서드를 지정하는 경우 이 인수는 null입니다.</param>
      <param name="arguments">메서드에 대한 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 또는 <paramref name="methodName" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="type" /> 또는 해당 기본 형식에 이름이 <paramref name="methodName" />이고 형식 매개 변수가 <paramref name="typeArguments" />와 일치하고 매개 변수 형식이 <paramref name="arguments" />와 일치하는 메서드가 없는 경우-또는-<paramref name="type" /> 또는 해당 기본 형식에 이름이 <paramref name="methodName" />이고 형식 매개 변수가 <paramref name="typeArguments" />와 일치하고 매개 변수 형식이 <paramref name="arguments" />와 일치하는 메서드가 둘 이상 있는 경우</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.CanReduce">
      <summary>노드를 더 단순한 노드로 줄일 수 있는지 나타냅니다.true를 반환하면 Reduce()를 호출하여 축소된 형식을 만들 수 있습니다.</summary>
      <returns>노드를 줄일 수 있으면 True이고, 그렇지 않으면 False입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <summary>처리기 본문에 사용하기 위해 catch한 <see cref="T:System.Exception" /> 개체에 대한 참조가 있는 catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" />을 만듭니다. </summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</returns>
      <param name="variable">이 처리기가 catch한 <see cref="T:System.Exception" /> 개체에 대한 참조를 나타내는 <see cref="T:System.Linq.Expressions.ParameterExpression" />입니다.</param>
      <param name="body">catch 문의 본문입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
        <see cref="T:System.Exception" /> 필터 및 catch한 <see cref="T:System.Exception" /> 개체에 대한 참조가 있는 catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</returns>
      <param name="variable">이 처리기가 catch한 <see cref="T:System.Exception" /> 개체에 대한 참조를 나타내는 <see cref="T:System.Linq.Expressions.ParameterExpression" />입니다.</param>
      <param name="body">catch 문의 본문입니다.</param>
      <param name="filter">
        <see cref="T:System.Exception" /> 필터의 본문입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <summary>catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</returns>
      <param name="type">이 <see cref="T:System.Linq.Expressions.CatchBlock" />이 처리할 <see cref="T:System.Exception" />의 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="body">catch 문의 본문입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
        <see cref="T:System.Exception" /> 필터는 있지만 catch한 <see cref="T:System.Exception" /> 개체에 대한 참조가 없는 catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</returns>
      <param name="type">이 <see cref="T:System.Linq.Expressions.CatchBlock" />이 처리할 <see cref="T:System.Exception" />의 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="body">catch 문의 본문입니다.</param>
      <param name="filter">
        <see cref="T:System.Exception" /> 필터의 본문입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <summary>시퀀스 지점을 정리하는 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />을 만듭니다.</summary>
      <returns>시퀀스 위치를 지우기 위한 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 인스턴스입니다.</returns>
      <param name="document">소스 파일을 나타내는 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>병합 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 참조 형식 또는 nullable 값 형식을 나타내지 않는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type과 <paramref name="right" />.Type을 상호 변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary>지정된 변환 함수를 사용한 병합 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type과 <paramref name="right" />.Type을 상호 변환할 수 없는 경우-또는-<paramref name="conversion" />이 null이 아니고 <paramref name="conversion" />.Type이 정확히 하나의 인수를 받지 않는 대리자 형식인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 참조 형식 또는 nullable 값 형식을 나타내지 않는 경우-또는-<paramref name="left" />의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 대리자 형식 <paramref name="conversion" />.Type의 매개 변수 형식에 할당할 수 없는 경우-또는-<paramref name="right" />의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 대리자 형식 <paramref name="conversion" />.Type의 반환 형식과 다른 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>조건부 문을 나타내는 <see cref="T:System.Linq.Expressions.ConditionalExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />이고 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 및 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.ConditionalExpression" />입니다.</returns>
      <param name="test">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="ifTrue">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="ifFalse">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="test" /> 또는 <paramref name="ifTrue" /> 또는 <paramref name="ifFalse" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="test" />.Type이 <see cref="T:System.Boolean" />이 아닌 경우-또는-<paramref name="ifTrue" />.Type이 <paramref name="ifFalse" />.Type과 다른 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <summary>조건부 문을 나타내는 <see cref="T:System.Linq.Expressions.ConditionalExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />이고 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 및 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.ConditionalExpression" />입니다.</returns>
      <param name="test">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="ifTrue">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="ifFalse">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary>
        <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 속성이 지정된 값으로 설정되는 <see cref="T:System.Linq.Expressions.ConstantExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />이고 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.ConstantExpression" />입니다.</returns>
      <param name="value">
        <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 속성에 설정할 <see cref="T:System.Object" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary>
        <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 및 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 지정된 값으로 설정되는 <see cref="T:System.Linq.Expressions.ConstantExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />이고 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 및 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.ConstantExpression" />입니다.</returns>
      <param name="value">
        <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 속성에 설정할 <see cref="T:System.Object" />입니다.</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" />가 null이 아니고 <paramref name="value" />의 동적 형식에서 <paramref name="type" />을 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <summary>continue 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />가 Continue이고, <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 속성이 <paramref name="target" />으로 설정되며, 이동 시 대상 레이블에 null 값이 전달되는 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" />이 점프할 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>지정된 형식을 사용하여 continue 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />가 Continue이고, <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 속성이 <paramref name="target" />으로 설정되며, <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 <paramref name="type" />으로 설정되고, 이동 시 대상 레이블에 null 값이 전달되는 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" />이 점프할 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary>형식 변환 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />이고 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 및 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 또는 <paramref name="type" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type과 <paramref name="type" /> 사이에 변환 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>구현 메서드가 지정되는 변환 연산자를 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />이고 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="T:System.Type" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 또는 <paramref name="type" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 하나의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type과 <paramref name="type" /> 사이에 변환 연산자가 정의되지 않은 경우-또는-<paramref name="expression" />.Type을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우-또는-<paramref name="method" />가 나타내는 메서드의 반환 형식을 <paramref name="type" />에 할당할 수 없는 경우-또는-<paramref name="expression" />.Type 또는 <paramref name="type" />이 nullable 값 형식이고 nullable이 아닌 해당 값 형식이 <paramref name="method" />가 나타내는 메서드의 인수 형식 또는 반환 형식과 각각 일치하지 않는 경우</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
        <paramref name="method" /> 설명과 일치하는 메서드가 둘 이상 있는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary>대상 유형에 오버플로가 발생하면 예외를 발생하는 변환 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />이고 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 및 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 또는 <paramref name="type" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type과 <paramref name="type" /> 사이에 변환 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>구현 메서드가 지정되는 대상 유형에 오버플로가 발생하면 예외를 발생하는 변환 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />이고 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="T:System.Type" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 또는 <paramref name="type" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 하나의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type과 <paramref name="type" /> 사이에 변환 연산자가 정의되지 않은 경우-또는-<paramref name="expression" />.Type을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우-또는-<paramref name="method" />가 나타내는 메서드의 반환 형식을 <paramref name="type" />에 할당할 수 없는 경우-또는-<paramref name="expression" />.Type 또는 <paramref name="type" />이 nullable 값 형식이고 nullable이 아닌 해당 값 형식이 <paramref name="method" />가 나타내는 메서드의 인수 형식 또는 반환 형식과 각각 일치하지 않는 경우</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
        <paramref name="method" /> 설명과 일치하는 메서드가 둘 이상 있는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>지정된 스팬을 사용하여 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 인스턴스입니다.</returns>
      <param name="document">소스 파일을 나타내는 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />입니다.</param>
      <param name="startLine">이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 시작 줄입니다.0보다 커야 합니다.</param>
      <param name="startColumn">이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 시작 열입니다.0보다 커야 합니다.</param>
      <param name="endLine">이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 끝 줄입니다.시작 줄보다 크거나 같아야 합니다.</param>
      <param name="endColumn">이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 끝 열입니다.끝 줄이 시작 줄과 같을 경우 끝 열은 시작 열보다 크거나 같아야 합니다.어떤 경우에도 0보다 커야 합니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <summary>1씩 감소하는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>감소되는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="expression">감소시킬 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>1씩 감소하는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>감소되는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="expression">감소시킬 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <summary>
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 지정된 형식으로 설정되는 <see cref="T:System.Linq.Expressions.DefaultExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Default" />이고 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.DefaultExpression" />입니다.</returns>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>산술 나누기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 나누기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>산술 나누기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.구현 메서드를 지정할 수 있습니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 두 개의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 null이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 나누기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하지 않는 나누기 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하지 않는 나누기 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>오버플로를 검사하지 않는 나누기 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>지정된 <see cref="T:System.Collections.Generic.IEnumerable`1" />을 두 번째 인수로 사용하여 <see cref="T:System.Linq.Expressions.ElementInit" />를 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 및 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.ElementInit" />입니다.</returns>
      <param name="addMethod">
        <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="arguments">
        <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> 또는 <paramref name="arguments" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="addMethod" />가 나타내는 메서드의 이름이 "Add"(대/소문자 구분 안 함)가 아닌 경우-또는-<paramref name="addMethod" />가 나타내는 메서드가 인스턴스 메서드가 아닌 경우-또는-<paramref name="arguments" />에 들어 있는 요소 수가 <paramref name="addMethod" />가 나타내는 메서드의 매개 변수 수와 다른 경우-또는-<paramref name="arguments" />의 요소 중 하나 이상의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="addMethod" />가 나타내는 메서드의 해당 매개 변수 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>지정된 값 배열을 두 번째 인수로 사용하여 <see cref="T:System.Linq.Expressions.ElementInit" />를 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 및 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.ElementInit" />입니다.</returns>
      <param name="addMethod">
        <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="arguments">
        <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> 또는 <paramref name="arguments" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">addMethod가 나타내는 메서드의 이름이 "Add"(대/소문자 구분 안 함)가 아닌 경우-또는-addMethod가 나타내는 메서드가 인스턴스 메서드가 아닌 경우-또는-인수에 들어 있는 요소 수가 addMethod가 나타내는 메서드의 매개 변수 개수와 다른 경우-또는-<paramref name="arguments" />의 요소 중 하나 이상의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="addMethod" />가 나타내는 메서드의 해당 매개 변수 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Empty">
      <summary>
        <see cref="T:System.Void" /> 형식을 갖는 빈 식을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Default" />이고 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 <see cref="T:System.Void" />로 설정된 <see cref="T:System.Linq.Expressions.DefaultExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>같음 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 같음 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>같음 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.구현 메서드를 지정할 수 있습니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="liftToNull">
        <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />을 true로 설정하려면 true이고, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />을 false로 설정하려면 false입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 두 개의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 null이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 같음 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>사용자 정의 형식에 대해 op_ExclusiveOr을 사용하여 비트 XOR 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 XOR 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>사용자 정의 형식에 대해 op_ExclusiveOr을 사용하여 비트 XOR 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.구현 메서드를 지정할 수 있습니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 두 개의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 null이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 XOR 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>사용자 정의 형식에 대해 op_ExclusiveOr을 사용하여 비트 XOR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>사용자 정의 형식에 대해 op_ExclusiveOr을 사용하여 비트 XOR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>사용자 정의 형식에 대해 op_ExclusiveOr을 사용하여 비트 XOR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary>필드 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />이고 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 및 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.MemberExpression" />입니다.</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.정적(Visual Basic의 경우 Shared)인 경우 <paramref name="expression" />이 null이어야 합니다.</param>
      <param name="field">
        <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 속성에 설정할 <see cref="T:System.Reflection.FieldInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="field" />이 null입니다.-또는-<paramref name="field" />가 나타내는 필드가 static(Visual Basic의 경우 Shared)이 아니고 <paramref name="expression" />이 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type을 <paramref name="field" />가 나타내는 필드의 선언 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary>지정된 필드 이름을 사용한 필드 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />이고 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 속성이 <paramref name="expression" />으로 설정되고 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 속성이 <paramref name="fieldName" />이 가리키는 필드를 나타내는 <see cref="T:System.Reflection.FieldInfo" />로 설정된 <see cref="T:System.Linq.Expressions.MemberExpression" />입니다.</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.Expression.Type" />에 이름이 <paramref name="fieldName" />인 필드가 포함되어 있는 <see cref="T:System.Linq.Expressions.Expression" />입니다.이 값은 정적 필드의 경우 null일 수 있습니다.</param>
      <param name="fieldName">액세스할 필드의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 또는 <paramref name="fieldName" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 또는 해당 기본 형식에 이름이 <paramref name="fieldName" />인 필드가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>필드 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.MemberExpression" />입니다.</returns>
      <param name="expression">필드의 포함 개체입니다.이 값은 정적 필드의 경우 null일 수 있습니다.</param>
      <param name="type">필드를 포함하는 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="fieldName">액세스할 필드입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary>특정 형식 인수가 있는 제네릭 System.Action 대리자 형식을 나타내는 <see cref="T:System.Type" /> 개체를 만듭니다.</summary>
      <returns>특정 형식 인수가 있는 System.Action 대리자의 형식입니다.</returns>
      <param name="typeArgs">System.Action 대리자 형식에 대해 형식 인수를 지정하는 <see cref="T:System.Type" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> 에 요소가 4개 이상 들어 있는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <summary>특정 형식 인수가 있는 제네릭 System.Func 또는 System.Action 대리자 형식을 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" /> 개체를 가져옵니다.</summary>
      <returns>대리자 형식입니다.</returns>
      <param name="typeArgs">대리자의 형식 인수입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary>특정 형식 인수가 있는 제네릭 System.Func 대리자 형식을 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" /> 개체를 만듭니다.마지막 형식 인수는 생성된 대리자의 반환 형식을 지정합니다.</summary>
      <returns>특정 형식 인수가 있는 System.Func 대리자의 형식입니다.</returns>
      <param name="typeArgs">System.Func 대리자 형식에 대해 형식 인수를 지정하는 하나에서 5개까지 <see cref="T:System.Type" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> 에 1개보다 적거나 5개보다 많은 요소가 들어 있는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <summary>"go to" 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />가 Goto이고, <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 속성이 지정된 값으로 설정되며, 이동 시 대상 레이블에 null 값이 전달되는 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" />이 점프할 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>"go to" 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />가 Goto이고, <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 속성이 <paramref name="target" />으로 설정되며, 이동 시 대상 레이블에 <paramref name="value" />가 전달되는 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" />이 점프할 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</param>
      <param name="value">점프 시 연결된 레이블에 전달되는 값입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>지정된 형식을 사용하여 "go to" 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />가 Goto이고, <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 속성이 <paramref name="target" />으로 설정되며, <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 <paramref name="type" />으로 설정되고, 이동 시 대상 레이블에 <paramref name="value" />가 전달되는 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" />이 점프할 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</param>
      <param name="value">점프 시 연결된 레이블에 전달되는 값입니다.</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>지정된 형식을 사용하여 "go to" 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />가 Goto이고, <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 속성이 지정된 값으로 설정되며, <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 <paramref name="type" />으로 설정되고, 이동 시 대상 레이블에 null 값이 전달되는 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" />이 점프할 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>"보다 큼" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 큼" 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>"보다 큼" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.구현 메서드를 지정할 수 있습니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="liftToNull">
        <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />을 true로 설정하려면 true이고, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />을 false로 설정하려면 false입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 두 개의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 null이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 큼" 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>"보다 크거나 같음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 크거나 같음" 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>"보다 크거나 같음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="liftToNull">
        <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />을 true로 설정하려면 true이고, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />을 false로 설정하려면 false입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 두 개의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 null이고 "보다 크거나 같음" 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되어 있지 않습니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>if 문이 있는 조건부 블록을 나타내는 <see cref="T:System.Linq.Expressions.ConditionalExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />이고 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.ConditionalExpression" />입니다.<see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 속성은 기본 식으로 설정되고 이 메서드에서 반환되는 결과 <see cref="T:System.Linq.Expressions.ConditionalExpression" />의 형식은 <see cref="T:System.Void" />입니다.</returns>
      <param name="test">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="ifTrue">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>if 및 else 문이 있는 조건부 블록을 나타내는 <see cref="T:System.Linq.Expressions.ConditionalExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />이고 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 및 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.ConditionalExpression" />입니다.이 메서드에서 반환되는 결과 <see cref="T:System.Linq.Expressions.ConditionalExpression" />의 형식은 <see cref="T:System.Void" />입니다.</returns>
      <param name="test">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="ifTrue">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="ifFalse">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <summary>값이 1씩 증가하는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>증가된 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="expression">증가시킬 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>1씩 증가하는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>증가된 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="expression">증가시킬 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>인수 식 목록에 대리자 또는 람다 식을 적용하는 <see cref="T:System.Linq.Expressions.InvocationExpression" />을 만듭니다.</summary>
      <returns>지정된 대리자 또는 람다 식을 제공된 인수에 적용하는 <see cref="T:System.Linq.Expressions.InvocationExpression" />입니다.</returns>
      <param name="expression">적용되는 대리자 또는 람다 식을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arguments">대리자 또는 람다 식이 적용되는 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type이 대리자 형식이나 <see cref="T:System.Linq.Expressions.Expression`1" />을 나타내지 않는 경우-또는-<paramref name="arguments" />에 있는 요소의<see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="expression" />이 나타내는 대리자의 해당 매개 변수 형식에 할당할 수 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" />에 포함된 요소의 수가 <paramref name="expression" />이 나타내는 대리자의 매개 변수 목록과 다릅니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>인수 식 목록에 대리자 또는 람다 식을 적용하는 <see cref="T:System.Linq.Expressions.InvocationExpression" />을 만듭니다.</summary>
      <returns>지정된 대리자 또는 람다 식을 제공된 인수에 적용하는 <see cref="T:System.Linq.Expressions.InvocationExpression" />입니다.</returns>
      <param name="expression">적용되는 대리자 또는 람다 식을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arguments">대리자 또는 람다 식이 적용되는 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type이 대리자 형식이나 <see cref="T:System.Linq.Expressions.Expression`1" />을 나타내지 않는 경우-또는-<paramref name="arguments" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="expression" />이 나타내는 대리자의 해당 매개 변수 형식에 할당할 수 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" />에 포함된 요소의 수가 <paramref name="expression" />이 나타내는 대리자의 매개 변수 목록과 다릅니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <summary>식이 False로 계산되는지 여부를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</returns>
      <param name="expression">평가할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>식이 False로 계산되는지 여부를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</returns>
      <param name="expression">평가할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <summary>식이 True로 계산되는지 여부를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</returns>
      <param name="expression">평가할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>식이 True로 계산되는지 여부를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</returns>
      <param name="expression">평가할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label">
      <summary>이름이 없는 void 형식의 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 만듭니다.</summary>
      <returns>이름이 없는 void 형식의 레이블을 나타내는 새 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <summary>기본값이 없는 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelExpression" />을 만듭니다.</summary>
      <returns>기본값이 없는 <see cref="T:System.Linq.Expressions.LabelExpression" />입니다.</returns>
      <param name="target">이 <see cref="T:System.Linq.Expressions.LabelExpression" />이 연결될 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>지정된 기본값을 사용하여 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelExpression" />을 만듭니다.</summary>
      <returns>지정된 기본값이 있는 <see cref="T:System.Linq.Expressions.LabelExpression" />입니다.</returns>
      <param name="target">이 <see cref="T:System.Linq.Expressions.LabelExpression" />이 연결될 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</param>
      <param name="defaultValue">레이블로 점프하지 않고 일반 제어 흐름을 통해 레이블에 접근할 때 이 <see cref="T:System.Linq.Expressions.LabelExpression" />의 값입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
      <summary>지정된 이름이 있는 void 형식의 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 만듭니다.</summary>
      <returns>지정된 이름이 있는 void 형식의 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 만듭니다.</returns>
      <param name="name">레이블 이름입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <summary>지정된 형식을 사용하여 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 만듭니다.</summary>
      <returns>지정된 형식을 사용하여 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 만듭니다.</returns>
      <param name="type">레이블로 점프할 때 전달되는 값 형식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <summary>지정된 형식 및 이름을 사용하여 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 만듭니다.</summary>
      <returns>지정된 형식 및 이름을 사용하여 레이블을 나타내는 새 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</returns>
      <param name="type">레이블로 점프할 때 전달되는 값 형식입니다.</param>
      <param name="name">레이블 이름입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>먼저 대리자 형식을 생성하여 LambdaExpression을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 속성이 지정된 값으로 설정된 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</returns>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="tailCall">만든 식을 컴파일할 때 마무리 호출 최적화가 적용되는지 여부를 나타내는 <see cref="T:System.Boolean" />입니다.</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> 속성이 <see cref="P:System.Linq.Expressions.Expression`1.Lambda" />이고 <see cref="P:System.Linq.Expressions.Expression`1.Body" /> 및 <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.Expression`1" />입니다.</returns>
      <param name="body">
        <see cref="P:System.Linq.Expressions.Expression`1.Body" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="tailCall">만든 식을 컴파일할 때 마무리 호출 최적화가 적용되는지 여부를 나타내는 <see cref="T:System.Boolean" />입니다.</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <typeparam name="TDelegate">대리자 형식입니다. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> 속성이 <see cref="P:System.Linq.Expressions.Expression`1.Lambda" />이고 <see cref="P:System.Linq.Expressions.Expression`1.Body" /> 및 <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.Expression`1" />입니다.</returns>
      <param name="body">
        <see cref="P:System.Linq.Expressions.Expression`1.Body" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="tailCall">만든 식을 컴파일할 때 마무리 호출 최적화가 적용되는지 여부를 나타내는 <see cref="T:System.Boolean" />입니다.</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체를 포함하는 배열입니다.</param>
      <typeparam name="TDelegate">대리자 형식입니다. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>먼저 대리자 형식을 생성하여 LambdaExpression을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 속성이 지정된 값으로 설정된 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</returns>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="tailCall">만든 식을 컴파일할 때 마무리 호출 최적화가 적용되는지 여부를 나타내는 <see cref="T:System.Boolean" />입니다.</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체를 포함하는 배열입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />이고 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.Expression`1" />입니다.</returns>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <typeparam name="TDelegate">대리자 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" />이 null입니다.-또는-<paramref name="parameters" />의 요소 중 하나 이상이 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> 가 대리자 형식이 아닌 경우-또는-<paramref name="body" />.Type이 나타내는 형식을 <paramref name="TDelegate" />의 반환 형식에 할당할 수 없는 경우-또는-<paramref name="parameters" />에 들어 있는 요소 수가 <paramref name="TDelegate" />의 매개 변수 목록과 다른 경우-또는-<paramref name="TDelegate" />의 해당 매개 변수 형식에서 <paramref name="parameters" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>먼저 대리자 형식을 생성하여 LambdaExpression을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 속성이 지정된 값으로 설정된 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</returns>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />이고 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.Expression`1" />입니다.</returns>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체의 배열입니다.</param>
      <typeparam name="TDelegate">대리자 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" />이 null입니다.-또는-<paramref name="parameters" />의 요소 중 하나 이상이 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> 가 대리자 형식이 아닌 경우-또는-<paramref name="body" />.Type이 나타내는 형식을 <paramref name="TDelegate" />의 반환 형식에 할당할 수 없는 경우-또는-<paramref name="parameters" />에 들어 있는 요소 수가 <paramref name="TDelegate" />의 매개 변수 목록과 다른 경우-또는-<paramref name="TDelegate" />의 해당 매개 변수 형식에서 <paramref name="parameters" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>먼저 대리자 형식을 생성하여 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />이고 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</returns>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" />이 null입니다.-또는-<paramref name="parameters" />의 요소 중 하나 이상이 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 에 17개 이상의 요소가 포함된 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> 속성이 <see cref="P:System.Linq.Expressions.Expression`1.Lambda" />이고 <see cref="P:System.Linq.Expressions.Expression`1.Body" /> 및 <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.Expression`1" />입니다.</returns>
      <param name="body">
        <see cref="P:System.Linq.Expressions.Expression`1.Body" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="name">람다의 이름입니다.디버깅 정보를 생성하는 데 사용됩니다.</param>
      <param name="tailCall">만든 식을 컴파일할 때 마무리 호출 최적화가 적용되는지 여부를 나타내는 <see cref="T:System.Boolean" />입니다.</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <typeparam name="TDelegate">대리자 형식입니다. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>먼저 대리자 형식을 생성하여 LambdaExpression을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 속성이 지정된 값으로 설정된 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</returns>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="name">람다의 이름입니다.디버그 정보를 내보내는 데 사용됩니다.</param>
      <param name="tailCall">만든 식을 컴파일할 때 마무리 호출 최적화가 적용되는지 여부를 나타내는 <see cref="T:System.Boolean" />입니다.</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>먼저 대리자 형식을 생성하여 LambdaExpression을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 속성이 지정된 값으로 설정된 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</returns>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="name">람다의 이름입니다.디버그 정보를 내보내는 데 사용됩니다.</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> 속성이 <see cref="P:System.Linq.Expressions.Expression`1.Lambda" />이고 <see cref="P:System.Linq.Expressions.Expression`1.Body" /> 및 <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.Expression`1" />입니다.</returns>
      <param name="body">
        <see cref="P:System.Linq.Expressions.Expression`1.Body" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="name">람다의 이름입니다.디버깅 정보를 생성하는 데 사용됩니다.</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <typeparam name="TDelegate">대리자 형식입니다. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>먼저 대리자 형식을 생성하여 LambdaExpression을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 속성이 지정된 값으로 설정된 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</returns>
      <param name="delegateType">람다의 대리자 서명을 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="tailCall">만든 식을 컴파일할 때 마무리 호출 최적화가 적용되는지 여부를 나타내는 <see cref="T:System.Boolean" />입니다.</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>먼저 대리자 형식을 생성하여 LambdaExpression을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 속성이 지정된 값으로 설정된 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</returns>
      <param name="delegateType">람다의 대리자 서명을 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="tailCall">만든 식을 컴파일할 때 마무리 호출 최적화가 적용되는지 여부를 나타내는 <see cref="T:System.Boolean" />입니다.</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체를 포함하는 배열입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>먼저 대리자 형식을 생성하여 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.컴파일 시 대리자 형식을 알 수 없을 때 사용할 수 있습니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />이고 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 속성이 지정 값으로 설정된 람다 식을 나타내는 개체입니다.</returns>
      <param name="delegateType">람다의 대리자 서명을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> 또는 <paramref name="body" />가 null입니다.-또는-<paramref name="parameters" />의 요소 중 하나 이상이 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> 이 대리자 형식을 나타내지 않는 경우-또는-<paramref name="body" />.Type이 나타내는 형식을 <paramref name="delegateType" />이 나타내는 대리자 형식의 반환 형식에 할당할 수 없는 경우-또는-<paramref name="parameters" />에 들어 있는 요소 수가 <paramref name="delegateType" />이 나타내는 대리자 형식의 매개 변수 목록과 다른 경우-또는-<paramref name="parameters" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="delegateType" />이 나타내는 대리자 형식의 해당 매개 변수 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>먼저 대리자 형식을 생성하여 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.컴파일 시 대리자 형식을 알 수 없을 때 사용할 수 있습니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />이고 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 속성이 지정 값으로 설정된 람다 식을 나타내는 개체입니다.</returns>
      <param name="delegateType">람다의 대리자 서명을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> 또는 <paramref name="body" />가 null입니다.-또는-<paramref name="parameters" />의 요소 중 하나 이상이 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> 이 대리자 형식을 나타내지 않는 경우-또는-<paramref name="body" />.Type이 나타내는 형식을 <paramref name="delegateType" />이 나타내는 대리자 형식의 반환 형식에 할당할 수 없는 경우-또는-<paramref name="parameters" />에 들어 있는 요소 수가 <paramref name="delegateType" />이 나타내는 대리자 형식의 매개 변수 목록과 다른 경우-또는-<paramref name="parameters" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="delegateType" />이 나타내는 대리자 형식의 해당 매개 변수 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>먼저 대리자 형식을 생성하여 LambdaExpression을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 속성이 지정된 값으로 설정된 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</returns>
      <param name="delegateType">람다의 대리자 서명을 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다. </param>
      <param name="name">람다의 이름입니다.디버그 정보를 내보내는 데 사용됩니다.</param>
      <param name="tailCall">만든 식을 컴파일할 때 마무리 호출 최적화가 적용되는지 여부를 나타내는 <see cref="T:System.Boolean" />입니다. </param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다. </param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>먼저 대리자 형식을 생성하여 LambdaExpression을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 속성이 지정된 값으로 설정된 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</returns>
      <param name="delegateType">람다의 대리자 서명을 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="name">람다의 이름입니다.디버그 정보를 내보내는 데 사용됩니다.</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>비트 왼쪽 시프트 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및<paramref name="right" />.Type에 왼쪽 시프트 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>비트 왼쪽 시프트 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 두 개의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 null이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 왼쪽 시프트 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>비트 왼쪽 시프트 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>비트 왼쪽 시프트 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>비트 왼쪽 시프트 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>"보다 작음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 작음" 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>"보다 작음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="liftToNull">
        <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />을 true로 설정하려면 true이고, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />을 false로 설정하려면 false입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 두 개의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 null이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 작음" 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>"보다 작거나 같음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 작거나 같음" 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>"보다 작거나 같음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="liftToNull">
        <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />을 true로 설정하려면 true이고, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />을 false로 설정하려면 false입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 두 개의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 null이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 작거나 같음" 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>멤버가 필드 또는 속성인 <see cref="T:System.Linq.Expressions.MemberListBinding" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 속성이 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />이고 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 및 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.MemberListBinding" />입니다.</returns>
      <param name="member">
        <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성에 설정할 필드 또는 속성을 나타내는 <see cref="T:System.Reflection.MemberInfo" />입니다.</param>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ElementInit" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" />가 null인 경우 -또는-<paramref name="initializers" />의 요소 중 하나 이상이 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 가 필드 또는 속성을 나타내지 않습니다.-또는-<paramref name="member" />가 나타내는 필드 또는 속성의 <see cref="P:System.Reflection.FieldInfo.FieldType" /> 또는<see cref="P:System.Reflection.PropertyInfo.PropertyType" />이<see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary>멤버가 필드 또는 속성인 <see cref="T:System.Linq.Expressions.MemberListBinding" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 속성이 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />이고 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 및 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.MemberListBinding" />입니다.</returns>
      <param name="member">
        <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성에 설정할 필드 또는 속성을 나타내는 <see cref="T:System.Reflection.MemberInfo" />입니다.</param>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ElementInit" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" />가 null인 경우 -또는-<paramref name="initializers" />의 요소 중 하나 이상이 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 가 필드 또는 속성을 나타내지 않습니다.-또는-<paramref name="member" />가 나타내는 필드 또는 속성의 <see cref="P:System.Reflection.FieldInfo.FieldType" /> 또는 <see cref="P:System.Reflection.PropertyInfo.PropertyType" />이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>지정된 속성 접근자 메서드를 기반으로 <see cref="T:System.Linq.Expressions.MemberListBinding" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 속성이 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />이고 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="propertyAccessor" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.MemberInfo" />로 설정되고 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />가 <paramref name="initializers" />의 요소로 채워진 <see cref="T:System.Linq.Expressions.MemberListBinding" />입니다.</returns>
      <param name="propertyAccessor">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ElementInit" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" />가 null인 경우 -또는-<paramref name="initializers" />의 요소 중 하나 이상이 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 가 속성 접근자 메서드를 나타내지 않는 경우-또는-<paramref name="propertyAccessor" />가 나타내는 메서드가 액세스하는 속성의 <see cref="P:System.Reflection.PropertyInfo.PropertyType" />에서 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary>지정된 속성 접근자 메서드를 기반으로 <see cref="T:System.Linq.Expressions.MemberListBinding" /> 개체를 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 속성이 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />이고 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="propertyAccessor" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.MemberInfo" />로 설정되고 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />가 <paramref name="initializers" />의 요소로 채워진 <see cref="T:System.Linq.Expressions.MemberListBinding" />입니다.</returns>
      <param name="propertyAccessor">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ElementInit" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" />가 null인 경우 -또는-<paramref name="initializers" />의 요소 중 하나 이상이 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 가 속성 접근자 메서드를 나타내지 않는 경우-또는-<paramref name="propertyAccessor" />가 나타내는 메서드가 액세스하는 속성의 <see cref="P:System.Reflection.PropertyInfo.PropertyType" />에서 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>지정된 <see cref="T:System.Linq.Expressions.ElementInit" /> 개체를 사용하여 컬렉션을 초기화하는 <see cref="T:System.Linq.Expressions.ListInitExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />이고 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 및 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.ListInitExpression" />입니다.</returns>
      <param name="newExpression">
        <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.NewExpression" />입니다.</param>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ElementInit" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 또는 <paramref name="initializers" />가 null입니다.-또는-<paramref name="initializers" />의 요소 중 하나 이상이 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>이름이 "Add"인 메서드를 사용하여 컬렉션에 요소를 추가하는 <see cref="T:System.Linq.Expressions.ListInitExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />이고 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.ListInitExpression" />입니다.</returns>
      <param name="newExpression">
        <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.NewExpression" />입니다.</param>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 또는 <paramref name="initializers" />가 null입니다.-또는-<paramref name="initializers" />의 요소 중 하나 이상이null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="newExpression" />.Type 또는 해당 기본 형식에 이름이 "Add"(대/소문자 구분 안 함)인 인스턴스 메서드가 선언되지 않은 경우-또는-<paramref name="newExpression" />.Type 또는 해당 기본 형식의 Add 메서드가 정확히 하나의 인수를 받지 않는 경우-또는-<paramref name="initializers" />에 있는 첫 번째 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="newExpression" />.Type 또는 해당 기본 형식에 있는 Add 메서드의 인수 형식에 할당할 수 없는 경우-또는-<paramref name="newExpression" />.Type 및/또는 해당 기본 형식에 이름이 "Add"(대/소문자 구분 안 함)이고 인수가 호환되는 메서드가 둘 이상 있는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary>지정된 <see cref="T:System.Linq.Expressions.ElementInit" /> 개체를 사용하여 컬렉션을 초기화하는 <see cref="T:System.Linq.Expressions.ListInitExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />이고 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 및 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.ListInitExpression" />입니다.</returns>
      <param name="newExpression">
        <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.NewExpression" />입니다.</param>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ElementInit" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 또는 <paramref name="initializers" />가 null입니다.-또는-<paramref name="initializers" />의 요소 중 하나 이상이 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary>이름이 "Add"인 메서드를 사용하여 컬렉션에 요소를 추가하는 <see cref="T:System.Linq.Expressions.ListInitExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />이고 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.ListInitExpression" />입니다.</returns>
      <param name="newExpression">
        <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.NewExpression" />입니다.</param>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 또는 <paramref name="initializers" />가 null입니다.-또는-<paramref name="initializers" />의 요소 중 하나 이상이 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="newExpression" />.Type 또는 해당 기본 형식에 이름이 "Add"(대/소문자 구분 안 함)인 인스턴스 메서드가 선언되지 않은 경우-또는-<paramref name="newExpression" />.Type 또는 해당 기본 형식의 Add 메서드가 정확히 하나의 인수를 받지 않는 경우-또는-<see cref="P:System.Linq.Expressions.Expression.Type" />에 있는 첫 번째 요소의 <paramref name="initializers" /> 속성이 나타내는 형식을 <paramref name="newExpression" />.Type 또는 해당 기본 형식에 있는 Add 메서드의 인수 형식에 할당할 수 없는 경우-또는-<paramref name="newExpression" />.Type 및/또는 해당 기본 형식에 이름이 "Add"(대/소문자 구분 안 함)이고 인수가 호환되는 메서드가 둘 이상 있는 경우.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>지정된 메서드를 사용하여 컬렉션에 요소를 추가하는 <see cref="T:System.Linq.Expressions.ListInitExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />이고 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.ListInitExpression" />입니다.</returns>
      <param name="newExpression">
        <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.NewExpression" />입니다.</param>
      <param name="addMethod">컬렉션에 요소를 추가하는 "Add"(대/소문자 구분 안 함)라는 인스턴스 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 또는 <paramref name="initializers" />가 null입니다.-또는-<paramref name="initializers" />의 요소 중 하나 이상이 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우-또는-<paramref name="addMethod" />가 null이 아니고 정확히 하나의 인수를 받는 "Add"(대/소문자 구분 안 함)라는 인스턴스 메서드를 나타내지 않는 경우-또는-<paramref name="addMethod" />가 null이 아니고 <paramref name="initializers" />에 있는 요소 중 하나 이상의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="addMethod" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" />가 null이고 <paramref name="newExpression" />.Type 또는 해당 기본 형식에 하나의 형식 호환 인수를 받는 "Add"라는 인스턴스 메서드가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>지정된 메서드를 사용하여 컬렉션에 요소를 추가하는 <see cref="T:System.Linq.Expressions.ListInitExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />이고 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.ListInitExpression" />입니다.</returns>
      <param name="newExpression">
        <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.NewExpression" />입니다.</param>
      <param name="addMethod">하나의 인수를 사용하는 인스턴스 메서드를 나타내고, 컬렉션에 요소를 추가하는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 또는 <paramref name="initializers" />가 null입니다.-또는-<paramref name="initializers" />의 요소 중 하나 이상이 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우-또는-<paramref name="addMethod" />가 null이 아니고 정확히 하나의 인수를 받는 "Add"(대/소문자 구분 안 함)라는 인스턴스 메서드를 나타내지 않는 경우-또는-<paramref name="addMethod" />가 null이 아니고 <paramref name="initializers" />에 있는 요소 중 하나 이상의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="addMethod" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" />가 null이고 <paramref name="newExpression" />.Type 또는 해당 기본 형식에 하나의 형식 호환 인수를 받는 "Add"라는 인스턴스 메서드가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <summary>지정된 본문을 사용하여 <see cref="T:System.Linq.Expressions.LoopExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.LoopExpression" />입니다.</returns>
      <param name="body">루프의 본문입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <summary>지정된 본문 및 break 대상을 사용하여 <see cref="T:System.Linq.Expressions.LoopExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.LoopExpression" />입니다.</returns>
      <param name="body">루프의 본문입니다.</param>
      <param name="break">루프 본문에서 사용되는 break 대상입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <summary>지정된 본문을 사용하여 <see cref="T:System.Linq.Expressions.LoopExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.LoopExpression" />입니다.</returns>
      <param name="body">루프의 본문입니다.</param>
      <param name="break">루프 본문에서 사용되는 break 대상입니다.</param>
      <param name="continue">루프 본문에서 사용하는 continue 대상입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>지정된 왼쪽 및 오른쪽 피연산자를 사용하고 적절한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="binaryType">이항 연산 형식을 지정하는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</param>
      <param name="left">왼쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">오른쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> 이 이항 식 노드에 해당하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>지정된 왼쪽 피연산자, 오른쪽 피연산자 및 구현 메서드를 사용하고 적절한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="binaryType">이항 연산 형식을 지정하는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</param>
      <param name="left">왼쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">오른쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="liftToNull">
        <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />을 true로 설정하려면 true이고, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />을 false로 설정하려면 false입니다.</param>
      <param name="method">구현 메서드를 지정하는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> 이 이항 식 노드에 해당하지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>지정된 왼쪽 피연산자, 오른쪽 피연산자, 구현 메서드 및 형식 변환 함수를 사용하고 적절한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="binaryType">이항 연산 형식을 지정하는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</param>
      <param name="left">왼쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">오른쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="liftToNull">
        <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />을 true로 설정하려면 true이고, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />을 false로 설정하려면 false입니다.</param>
      <param name="method">구현 메서드를 지정하는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="conversion">형식 변환 함수를 나타내는 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.이 매개 변수는 <paramref name="binaryType" />이 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> 또는 복합 할당으로 설정되어 있는 경우에만 사용됩니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> 이 이항 식 노드에 해당하지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>지정된 요소를 사용하여 catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</returns>
      <param name="type">이 <see cref="T:System.Linq.Expressions.CatchBlock" />이 처리할 <see cref="T:System.Exception" />의 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="variable">이 처리기가 catch한 <see cref="T:System.Exception" /> 개체에 대한 참조를 나타내는 <see cref="T:System.Linq.Expressions.ParameterExpression" />입니다.</param>
      <param name="body">catch 문의 본문입니다.</param>
      <param name="filter">
        <see cref="T:System.Exception" /> 필터의 본문입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>지정된 <see cref="T:System.Linq.Expressions.GotoExpressionKind" />의 점프를 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.이동 시 레이블에 전달되는 값도 지정할 수 있습니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />가 <paramref name="kind" />이고, <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 속성이 <paramref name="target" />으로 설정되며, <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 <paramref name="type" />으로 설정되고, 이동 시 대상 레이블에 <paramref name="value" />가 전달되는 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</returns>
      <param name="kind">
        <see cref="T:System.Linq.Expressions.GotoExpression" />의 <see cref="T:System.Linq.Expressions.GotoExpressionKind" />입니다.</param>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" />이 점프할 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</param>
      <param name="value">점프 시 연결된 레이블에 전달되는 값입니다.</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>개체의 인덱싱된 속성에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</returns>
      <param name="instance">속성이 속해 있는 개체입니다.속성이 정적(Visual Basic에서는 shared)이면 null이어야 합니다.</param>
      <param name="indexer">인덱싱할 속성을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arguments">속성을 인덱싱하는 데 사용할 인수가 들어 있는 IEnumerable&lt;Expression&gt;(Visual Basic의 경우 IEnumerable (Of Expression))입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary>필드 또는 속성 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <returns>적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.MemberExpression" />입니다.</returns>
      <param name="expression">멤버가 속하는 개체를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.이 값은 정적 멤버의 경우 null일 수 있습니다.</param>
      <param name="member">액세스할 필드 또는 속성을 설명하는 <see cref="T:System.Reflection.MemberInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 또는 <paramref name="member" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 가 필드 또는 속성을 나타내지 않습니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <summary>지정된 요소를 사용하여 try 블록을 나타내는 <see cref="T:System.Linq.Expressions.TryExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.TryExpression" />입니다.</returns>
      <param name="type">try 식의 결과 형식입니다.null일 경우 본문 및 모든 처리기에 같은 형식이 있어야 합니다.</param>
      <param name="body">try 블록의 본문입니다.</param>
      <param name="finally">finally 블록의 본문입니다.try 블록에 연결된 finally 블록이 없을 경우 null을 전달합니다.</param>
      <param name="fault">try 블록의 본문입니다.try 블록에 연결된 fault 블록이 없을 경우 null을 전달합니다.</param>
      <param name="handlers">try 블록과 연결할 catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" />의 컬렉션입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary>지정된 피연산자를 사용하고 적절한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="unaryType">단항 연산 형식을 지정하는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</param>
      <param name="operand">피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="type">변환할 형식을 지정하는 <see cref="T:System.Type" />입니다. 해당되지 않는 경우 null을 전달합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> 이 단항 식 노드에 해당하지 않습니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>지정된 피연산자 및 구현 메서드를 사용하고 적절한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="unaryType">단항 연산 형식을 지정하는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</param>
      <param name="operand">피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="type">변환할 형식을 지정하는 <see cref="T:System.Type" />입니다. 해당되지 않는 경우 null을 전달합니다.</param>
      <param name="method">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> 이 단항 식 노드에 해당하지 않습니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>필드 또는 속성의 재귀적 멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />를 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 속성이 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />이고 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 및 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />입니다.</returns>
      <param name="member">
        <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성에 설정할 <see cref="T:System.Reflection.MemberInfo" />입니다.</param>
      <param name="bindings">
        <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.MemberBinding" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 또는 <paramref name="bindings" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 가 필드 또는 속성을 나타내지 않습니다.-또는-<paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="member" />가 나타내는 필드 또는 속성의 형식에 속하는 멤버를 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>필드 또는 속성의 재귀적 멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />를 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 속성이 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />이고 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 및 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />입니다.</returns>
      <param name="member">
        <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성에 설정할 <see cref="T:System.Reflection.MemberInfo" />입니다.</param>
      <param name="bindings">
        <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.MemberBinding" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 또는 <paramref name="bindings" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 가 필드 또는 속성을 나타내지 않습니다.-또는-<paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="member" />가 나타내는 필드 또는 속성의 형식에 속하는 멤버를 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>속성 접근자 메서드를 사용하여 액세스되는 멤버의 재귀적 멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />를 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 속성이 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />이고 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="propertyAccessor" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />로 설정되고 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />입니다.</returns>
      <param name="propertyAccessor">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="bindings">
        <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.MemberBinding" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 또는 <paramref name="bindings" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 가 속성 접근자 메서드를 나타내지 않는 경우-또는-<paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="propertyAccessor" />가 나타내는 메서드로 액세스되는 속성의 형식에 속하는 멤버를 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>속성 접근자 메서드를 사용하여 액세스되는 멤버의 재귀적 멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />를 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 속성이 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />이고 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="propertyAccessor" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />로 설정되고 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />입니다.</returns>
      <param name="propertyAccessor">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="bindings">
        <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.MemberBinding" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 또는 <paramref name="bindings" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 가 속성 접근자 메서드를 나타내지 않는 경우-또는-<paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="propertyAccessor" />가 나타내는 메서드로 액세스되는 속성의 형식에 속하는 멤버를 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>새 개체를 만들고 개체의 속성을 초기화하는 식을 나타냅니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" />이고 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 및 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.MemberInitExpression" />입니다.</returns>
      <param name="newExpression">
        <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.NewExpression" />입니다.</param>
      <param name="bindings">
        <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.MemberBinding" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 또는 <paramref name="bindings" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이<paramref name="newExpression" />.Type이 나타내는 형식의 멤버를 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" />이고 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 및 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.MemberInitExpression" />입니다.</returns>
      <param name="newExpression">
        <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.NewExpression" />입니다.</param>
      <param name="bindings">
        <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.MemberBinding" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 또는 <paramref name="bindings" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이<paramref name="newExpression" />.Type이 나타내는 형식의 멤버를 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>산술 나머지 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 나머지 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>산술 나머지 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 두 개의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 null이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 나머지 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>나머지 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>나머지 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>나머지 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하지 않는 산술 곱하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 곱하기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하지 않는 산술 곱하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 두 개의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 null이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 곱하기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하지 않는 곱하기 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하지 않는 곱하기 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>오버플로를 검사하지 않는 곱하기 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하는 곱하기 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하는 곱하기 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>오버플로를 검사하는 곱하기 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하는 산술 곱하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />에 곱하기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하는 산술 곱하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 두 개의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 null이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 곱하기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <summary>산술 부정 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Negate" />이고 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type에 단항 빼기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>산술 부정 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Negate" />이고 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 하나의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 null이고 <paramref name="expression" />.Type에 단항 빼기 연산자가 정의되지 않은 경우-또는-<paramref name="expression" />.Type 또는 이 형식이 nullable 값 형식인 경우 nullable이 아닌 해당 형식을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하는 산술 부정 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" />이고 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type에 단항 빼기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하는 산술 부정 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.구현 메서드를 지정할 수 있습니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" />이고 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 하나의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 null이고 <paramref name="expression" />.Type에 단항 빼기 연산자가 정의되지 않은 경우-또는-<paramref name="expression" />.Type 또는 이 형식이 nullable 값 형식인 경우 nullable이 아닌 해당 형식을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <summary>인수를 사용하지 않는 지정된 생성자에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.New" />이고 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.NewExpression" />입니다.</returns>
      <param name="constructor">
        <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 속성에 설정할 <see cref="T:System.Reflection.ConstructorInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="constructor" />가 나타내는 생성자에 하나 이상의 매개 변수가 있습니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>지정된 인수를 사용하는 지정된 생성자에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.New" />이고 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 및 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.NewExpression" />입니다.</returns>
      <param name="constructor">
        <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 속성에 설정할 <see cref="T:System.Reflection.ConstructorInfo" />입니다.</param>
      <param name="arguments">
        <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" />이 null입니다.-또는-<paramref name="arguments" />의 요소가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 매개 변수에 들어 있는 요소 수가 <paramref name="constructor" />가 나타내는 생성자의 매개 변수 수와 다른 경우-또는-<paramref name="arguments" />에 있는 요소의<see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="constructor" />가 나타내는 생성자의 해당 매개 변수 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>지정된 인수를 사용하는 지정된 생성자에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.생성자에서 초기화되는 필드에 액세스하는 멤버가 지정됩니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.New" />이고 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 및 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.NewExpression" />입니다.</returns>
      <param name="constructor">
        <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 속성에 설정할 <see cref="T:System.Reflection.ConstructorInfo" />입니다.</param>
      <param name="arguments">
        <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="members">
        <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Reflection.MemberInfo" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" />이 null입니다.-또는-<paramref name="arguments" />의 요소가 null인 경우-또는-<paramref name="members" />의 요소가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 매개 변수에 들어 있는 요소 수가 <paramref name="constructor" />가 나타내는 생성자의 매개 변수 수와 다른 경우-또는-<paramref name="arguments" />에 있는 요소의<see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="constructor" />가 나타내는 생성자의 해당 매개 변수 형식에 할당할 수 없는 경우-또는-<paramref name="members" /> 매개 변수의 요소 수가 <paramref name="arguments" />와 다른 경우-또는-<paramref name="arguments" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="members" />의 해당 속성이 나타내는 멤버 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <summary>지정된 인수를 사용하는 지정된 생성자에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.생성자에서 초기화되는 필드에 액세스하는 멤버가 배열로 지정됩니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.New" />이고 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 및 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.NewExpression" />입니다.</returns>
      <param name="constructor">
        <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 속성에 설정할 <see cref="T:System.Reflection.ConstructorInfo" />입니다.</param>
      <param name="arguments">
        <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <param name="members">
        <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Reflection.MemberInfo" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" />이 null입니다.-또는-<paramref name="arguments" />의 요소가 null인 경우-또는-<paramref name="members" />의 요소가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 매개 변수에 들어 있는 요소 수가 <paramref name="constructor" />가 나타내는 생성자의 매개 변수 수와 다른 경우-또는-<paramref name="arguments" />에 있는 요소의<see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="constructor" />가 나타내는 생성자의 해당 매개 변수 형식에 할당할 수 없는 경우-또는-<paramref name="members" /> 매개 변수의 요소 수가 <paramref name="arguments" />와 다른 경우-또는-<paramref name="arguments" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="members" />의 해당 속성이 나타내는 멤버 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <summary>지정된 인수를 사용하는 지정된 생성자에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.New" />이고 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 및 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.NewExpression" />입니다.</returns>
      <param name="constructor">
        <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 속성에 설정할 <see cref="T:System.Reflection.ConstructorInfo" />입니다.</param>
      <param name="arguments">
        <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" />이 null입니다.-또는-<paramref name="arguments" />의 요소가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" />의 길이가 <paramref name="constructor" />가 나타내는 생성자의 매개 변수 수와 일치하지 않는 경우-또는-<paramref name="arguments" />에 있는 요소의<see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="constructor" />가 나타내는 생성자의 해당 매개 변수 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
      <summary>지정된 형식의 매개 변수 없는 생성자에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.New" />이고 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 속성이 지정된 형식에 대한 매개 변수 없이 생성자를 나타내는 <see cref="T:System.Reflection.ConstructorInfo" />로 설정된 <see cref="T:System.Linq.Expressions.NewExpression" />입니다.</returns>
      <param name="type">인수를 사용하지 않는 생성자가 있는 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" />이 나타내는 형식에 매개 변수가 없는 생성자가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>지정된 차수의 배열 만들기를 나타내는 <see cref="T:System.Linq.Expressions.NewArrayExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />이고 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.NewArrayExpression" />입니다.</returns>
      <param name="type">배열의 요소 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="bounds">
        <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 또는 <paramref name="bounds" />가 null입니다.-또는-<paramref name="bounds" />의 요소가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bounds" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 정수 계열 형식을 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <summary>지정된 차수의 배열 만들기를 나타내는 <see cref="T:System.Linq.Expressions.NewArrayExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />이고 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.NewArrayExpression" />입니다.</returns>
      <param name="type">배열의 요소 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="bounds">
        <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 또는 <paramref name="bounds" />가 null입니다.-또는-<paramref name="bounds" />의 요소가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bounds" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 정수 계열 형식을 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>1차원 배열 만들기 및 요소 목록에서의 초기화를 나타내는 <see cref="T:System.Linq.Expressions.NewArrayExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />이고 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.NewArrayExpression" />입니다.</returns>
      <param name="type">배열의 요소 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 또는 <paramref name="initializers" />가 null입니다.-또는-<paramref name="initializers" />의 요소가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="initializers" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="type" /> 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <summary>1차원 배열 만들기 및 요소 목록에서의 초기화를 나타내는 <see cref="T:System.Linq.Expressions.NewArrayExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />이고 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.NewArrayExpression" />입니다.</returns>
      <param name="type">배열의 요소 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 또는 <paramref name="initializers" />가 null입니다.-또는-<paramref name="initializers" />의 요소가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="initializers" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="type" /> 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.NodeType">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 형식을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ExpressionType" /> 값 중 하나입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <summary>비트 보수 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Not" />이고 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type에 단항 Not 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>비트 보수 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.구현 메서드를 지정할 수 있습니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Not" />이고 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 하나의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 null이고 <paramref name="expression" />.Type에 단항 NOT 연산자가 정의되지 않은 경우-또는-<paramref name="expression" />.Type 또는 이 형식이 nullable 값 형식인 경우 nullable이 아닌 해당 형식을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>같지 않음 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 같지 않음 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>같지 않음 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="liftToNull">
        <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />을 true로 설정하려면 true이고, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />을 false로 설정하려면 false입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 두 개의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 null이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 같지 않음 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
      <summary>1의 보수를 나타내는 식을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>1의 보수를 나타내는 식을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>비트 OR 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Or" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 비트 OR 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>비트 OR 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Or" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 두 개의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 null이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 비트 OR 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>비트 OR 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>비트 OR 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>비트 OR 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>첫 번째 피연산자가 false로 계산되는 경우에만 두 번째 피연산자를 계산하는 조건부 OR 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 비트 OR 연산자가 정의되지 않은 경우-또는-<paramref name="left" />.Type과 <paramref name="right" />.Type이 동일한 부울 형식이 아닌 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>첫 번째 피연산자가 false로 계산되는 경우에만 두 번째 피연산자를 계산하는 조건부 OR 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 두 개의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 null이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 비트 OR 연산자가 정의되지 않은 경우-또는-<paramref name="method" />가 null이고 <paramref name="left" />.Type과 <paramref name="right" />.Type이 동일한 부울 형식이 아닌 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
      <summary>식 트리에서 매개 변수 또는 변수를 식별하는 데 사용할 수 있는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드를 만듭니다.</summary>
      <returns>지정된 이름과 형식의 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드입니다.</returns>
      <param name="type">매개 변수 또는 변수의 형식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <summary>식 트리에서 매개 변수 또는 변수를 식별하는 데 사용할 수 있는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드를 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" />이고 <see cref="P:System.Linq.Expressions.Expression.Type" /> 및 <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.ParameterExpression" />입니다.</returns>
      <param name="type">매개 변수 또는 변수의 형식입니다.</param>
      <param name="name">디버깅 또는 인쇄용으로만 사용되는 매개 변수 또는 변수의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>원래 식에서 뒤이어 1씩 감소하는 식의 대입을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="expression">연산을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>원래 식에서 뒤이어 1씩 감소하는 식의 대입을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="expression">연산을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>원래 식에서 뒤이어 1씩 증가하는 식의 대입을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="expression">연산을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>원래 식에서 뒤이어 1씩 증가하는 식의 대입을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="expression">연산을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>숫자의 제곱 구하기를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Power" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 지수 연산자가 정의되지 않은 경우-또는-<paramref name="left" />.Type 및/또는 <paramref name="right" />.Type이 <see cref="T:System.Double" />이 아닌 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>숫자의 제곱 구하기를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Power" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 두 개의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 null이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 지수 연산자가 정의되지 않은 경우-또는-<paramref name="method" />가 null이고 <paramref name="left" />.Type 및/또는 <paramref name="right" />.Type이 <see cref="T:System.Double" />이 아닌 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>식을 거듭제곱하고 결과를 다시 식에 대입하는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>식을 거듭제곱하고 결과를 다시 식에 대입하는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>식을 거듭제곱하고 결과를 다시 식에 대입하는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>식을 1씩 감소시키고 결과를 다시 식에 대입하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="expression">연산을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>식을 1씩 감소시키고 결과를 다시 식에 대입하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="expression">연산을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>식을 1씩 증가시키고 결과를 다시 식에 대입하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="expression">연산을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>식을 1씩 증가시키고 결과를 다시 식에 대입하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="expression">연산을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>속성 접근자 메서드를 사용한 속성 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />이고 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 속성이 <paramref name="expression" />으로 설정되고 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 속성이 <paramref name="propertyAccessor" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />로 설정된 <see cref="T:System.Linq.Expressions.MemberExpression" />입니다.</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.이 값은 정적 속성의 경우 null일 수 있습니다.</param>
      <param name="propertyAccessor">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" />이 null입니다.-또는-<paramref name="propertyAccessor" />가 나타내는 메서드가 static(Visual Basic의 경우 Shared)이 아니고 <paramref name="expression" />이 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type을 <paramref name="propertyAccessor" />가 나타내는 메서드의 선언 형식에 할당할 수 없는 경우-또는-<paramref name="propertyAccessor" />가 나타내는 메서드가 속성 접근자 메서드가 아닌 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <summary>속성 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />이고 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 및 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.MemberExpression" />입니다.</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.이 값은 정적 속성의 경우 null일 수 있습니다.</param>
      <param name="property">
        <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 속성에 설정할 <see cref="T:System.Reflection.PropertyInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" />이 null입니다.-또는-<paramref name="property" />가 나타내는 속성이 static(Visual Basic의 경우 Shared)이 아니고 <paramref name="expression" />이 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type을 <paramref name="property" />가 나타내는 속성의 선언 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>인덱싱된 속성에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</returns>
      <param name="instance">속성이 속해 있는 개체입니다.이 속성이 정적/공유 속성이면 null이어야 합니다.</param>
      <param name="indexer">인덱싱할 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />입니다.</param>
      <param name="arguments">속성을 인덱싱하는 데 사용되는 <see cref="T:System.Linq.Expressions.Expression" />의 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
      <summary>인덱싱된 속성에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</returns>
      <param name="instance">속성이 속해 있는 개체입니다.이 속성이 정적/공유 속성이면 null이어야 합니다.</param>
      <param name="indexer">인덱싱할 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />입니다.</param>
      <param name="arguments">속성을 인덱싱하는 데 사용되는 <see cref="T:System.Linq.Expressions.Expression" />의 배열입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <summary>속성 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />이고 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 속성이 <paramref name="expression" />으로 설정되고 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 속성이 <paramref name="propertyName" />이 가리키는 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />로 설정된 <see cref="T:System.Linq.Expressions.MemberExpression" />입니다.</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.Expression.Type" />에 이름이 <paramref name="propertyName" />인 속성이 포함되어 있는 <see cref="T:System.Linq.Expressions.Expression" />입니다.이 값은 정적 속성의 경우 null일 수 있습니다.</param>
      <param name="propertyName">액세스할 속성의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 또는 <paramref name="propertyName" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 또는 해당 기본 형식에 이름이 <paramref name="propertyName" />인 속성이 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
      <summary>인덱싱된 속성에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</returns>
      <param name="instance">속성이 속해 있는 개체입니다.이 속성이 정적/공유 속성이면 null이어야 합니다.</param>
      <param name="propertyName">인덱서의 이름입니다.</param>
      <param name="arguments">속성을 인덱싱하는 데 사용되는 <see cref="T:System.Linq.Expressions.Expression" />의 배열입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>속성을 액세스하는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.MemberExpression" />입니다.</returns>
      <param name="expression">속성의 포함 개체입니다.이 값은 정적 속성의 경우 null일 수 있습니다.</param>
      <param name="type">속성을 포함하는 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="propertyName">액세스할 속성입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <summary>속성 또는 필드 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />이고 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 속성이 <paramref name="expression" />으로 설정되고 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 속성이 <paramref name="propertyOrFieldName" />이 가리키는 속성 또는 필드를 나타내는 <see cref="T:System.Reflection.PropertyInfo" /> 또는 <see cref="T:System.Reflection.FieldInfo" />로 설정된 <see cref="T:System.Linq.Expressions.MemberExpression" />입니다.</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.Expression.Type" />에 이름이 <paramref name="propertyOrFieldName" />인 속성 또는 필드가 포함되어 있는 <see cref="T:System.Linq.Expressions.Expression" />입니다.이 값은 정적 멤버의 경우 null일 수 있습니다.</param>
      <param name="propertyOrFieldName">액세스할 속성 또는 필드의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 또는 <paramref name="propertyOrFieldName" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 또는 해당 기본 형식에 이름이 <paramref name="propertyOrFieldName" />인 속성 또는 필드가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <summary>
        <see cref="T:System.Linq.Expressions.Expression" /> 형식의 상수 값을 갖는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Quote" />이고 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Reduce">
      <summary>이 노드를 더 단순한 식으로 줄입니다.CanReduce가 True를 반환하면 유효한 식을 반환합니다.이 메서드는 자체를 줄여야 하는 다른 노드를 반환할 수 있습니다.</summary>
      <returns>줄어든 식입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceAndCheck">
      <summary>이 노드를 더 단순한 식으로 줄입니다.CanReduce가 True를 반환하면 유효한 식을 반환합니다.이 메서드는 자체를 줄여야 하는 다른 노드를 반환할 수 있습니다.</summary>
      <returns>줄어든 식입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceExtensions">
      <summary>알려진 노드 형식(Extension 노드가 아님)으로 식을 줄이거나 이미 알려진 형식인 경우 식을 반환합니다.</summary>
      <returns>줄어든 식입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>참조 같음 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>참조 같지 않음 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow">
      <summary>예외의 다시 발생을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>예외를 다시 발생하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
      <summary>지정된 형식을 사용하여 예외의 다시 발생을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>예외를 다시 발생하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="type">식의 새 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
      <summary>return 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />가 Return이고, <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 속성이 <paramref name="target" />으로 설정되며, 이동 시 대상 레이블에 null 값이 전달되는 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" />이 점프할 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>return 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />가 Continue이고, <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 속성이 <paramref name="target" />으로 설정되며, 이동 시 대상 레이블에 <paramref name="value" />이 전달되는 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" />이 점프할 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</param>
      <param name="value">점프 시 연결된 레이블에 전달되는 값입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>지정된 형식을 사용하여 return 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />가 Continue이고, <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 속성이 <paramref name="target" />으로 설정되며, <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 <paramref name="type" />으로 설정되고, 이동 시 대상 레이블에 <paramref name="value" />가 전달되는 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" />이 점프할 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</param>
      <param name="value">점프 시 연결된 레이블에 전달되는 값입니다.</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>지정된 형식을 사용하여 return 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />가 Return이고, <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 속성이 <paramref name="target" />으로 설정되며, <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 <paramref name="type" />으로 설정되고, 이동 시 대상 레이블에 null 값이 전달되는 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" />이 점프할 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>비트 오른쪽 시프트 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 오른쪽 시프트 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>비트 오른쪽 시프트 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 두 개의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 null이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 오른쪽 시프트 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>비트 오른쪽 시프트 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>비트 오른쪽 시프트 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>비트 오른쪽 시프트 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />의 인스턴스를 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />이고 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />의 인스턴스입니다.</returns>
      <param name="variables">
        <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체의 컬렉션입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
      <summary>
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />의 인스턴스를 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />이고 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />의 인스턴스입니다.</returns>
      <param name="variables">
        <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하지 않는 산술 빼기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 빼기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하지 않는 산술 빼기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 두 개의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 null이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 빼기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하지 않는 빼기 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하지 않는 빼기 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>오버플로를 검사하지 않는 빼기 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하는 빼기 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하는 빼기 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>오버플로를 검사하는 빼기 대입 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하는 산술 빼기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 빼기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하는 산술 빼기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />이고 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 두 개의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 null이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 빼기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>기본 사례가 있는 switch 문을 나타내는 <see cref="T:System.Linq.Expressions.SwitchExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</returns>
      <param name="switchValue">각 사례에 대해 테스트할 값입니다.</param>
      <param name="defaultBody">
        <paramref name="switchValue" />와 일치하는 사례가 없는 경우 스위치의 결과입니다.</param>
      <param name="cases">이 switch 식의 사례 집합입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>기본 사례가 있는 switch 문을 나타내는 <see cref="T:System.Linq.Expressions.SwitchExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</returns>
      <param name="switchValue">각 사례에 대해 테스트할 값입니다.</param>
      <param name="defaultBody">
        <paramref name="switchValue" />와 일치하는 사례가 없는 경우 스위치의 결과입니다.</param>
      <param name="comparison">사용할 같음 비교 메서드입니다.</param>
      <param name="cases">이 switch 식의 사례 집합입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>기본 사례가 있는 switch 문을 나타내는 <see cref="T:System.Linq.Expressions.SwitchExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</returns>
      <param name="switchValue">각 사례에 대해 테스트할 값입니다.</param>
      <param name="defaultBody">
        <paramref name="switchValue" />와 일치하는 사례가 없는 경우 스위치의 결과입니다.</param>
      <param name="comparison">사용할 같음 비교 메서드입니다.</param>
      <param name="cases">이 switch 식의 사례 집합입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>기본 사례가 없는 switch 문을 나타내는 <see cref="T:System.Linq.Expressions.SwitchExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</returns>
      <param name="switchValue">각 사례에 대해 테스트할 값입니다.</param>
      <param name="cases">이 switch 식의 사례 집합입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>기본 사례가 있는 switch 문을 나타내는 <see cref="T:System.Linq.Expressions.SwitchExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</returns>
      <param name="type">스위치의 결과 형식입니다.</param>
      <param name="switchValue">각 사례에 대해 테스트할 값입니다.</param>
      <param name="defaultBody">
        <paramref name="switchValue" />와 일치하는 사례가 없는 경우 스위치의 결과입니다.</param>
      <param name="comparison">사용할 같음 비교 메서드입니다.</param>
      <param name="cases">이 switch 식의 사례 집합입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>기본 사례가 있는 switch 문을 나타내는 <see cref="T:System.Linq.Expressions.SwitchExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</returns>
      <param name="type">스위치의 결과 형식입니다.</param>
      <param name="switchValue">각 사례에 대해 테스트할 값입니다.</param>
      <param name="defaultBody">
        <paramref name="switchValue" />와 일치하는 사례가 없는 경우 스위치의 결과입니다.</param>
      <param name="comparison">사용할 같음 비교 메서드입니다.</param>
      <param name="cases">이 switch 식의 사례 집합입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
        <see cref="T:System.Linq.Expressions.SwitchExpression" /> 개체에 사용할 <see cref="T:System.Linq.Expressions.SwitchCase" /> 개체를 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.SwitchCase" />입니다.</returns>
      <param name="body">사례의 본문입니다.</param>
      <param name="testValues">사례의 테스트 값입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>
        <see cref="T:System.Linq.Expressions.SwitchExpression" />에서 사용할 <see cref="T:System.Linq.Expressions.SwitchCase" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.SwitchCase" />입니다.</returns>
      <param name="body">사례의 본문입니다.</param>
      <param name="testValues">사례의 테스트 값입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
      <summary>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />의 인스턴스를 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 속성이 지정된 값으로 설정된 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />입니다.</returns>
      <param name="fileName">
        <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />에 설정할 <see cref="T:System.String" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
      <summary>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />의 인스턴스를 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 및 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 속성이 지정된 값으로 설정된 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />입니다.</returns>
      <param name="fileName">
        <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />에 설정할 <see cref="T:System.String" />입니다.</param>
      <param name="language">
        <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />에 설정할 <see cref="T:System.Guid" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
      <summary>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />의 인스턴스를 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 및 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 및 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> 속성이 지정된 값으로 설정된 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />입니다.</returns>
      <param name="fileName">
        <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />에 설정할 <see cref="T:System.String" />입니다.</param>
      <param name="language">
        <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />에 설정할 <see cref="T:System.Guid" />입니다.</param>
      <param name="languageVendor">
        <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />에 설정할 <see cref="T:System.Guid" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />의 인스턴스를 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 및 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 및 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> 및 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> 속성이 지정된 값으로 설정된 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />입니다.</returns>
      <param name="fileName">
        <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />에 설정할 <see cref="T:System.String" />입니다.</param>
      <param name="language">
        <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />에 설정할 <see cref="T:System.Guid" />입니다.</param>
      <param name="languageVendor">
        <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />에 설정할 <see cref="T:System.Guid" />입니다.</param>
      <param name="documentType">
        <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />에 설정할 <see cref="T:System.Guid" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
      <summary>예외의 발생을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>예외를 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="value">
        <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
      <summary>지정된 형식을 사용하여 예외의 발생을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>예외를 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="value">
        <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="type">식의 새 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ToString">
      <summary>
        <see cref="T:System.Linq.Expressions.Expression" />의 텍스트 표현을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />의 텍스트 표현입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>원하는 수의 catch 문을 사용하고 fault 또는 finally 블록은 사용하지 않고 try 블록을 나타내는 <see cref="T:System.Linq.Expressions.TryExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.TryExpression" />입니다.</returns>
      <param name="body">try 블록의 본문입니다.</param>
      <param name="handlers">try 블록과 연결할 catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" /> 식이 0개 이상인 배열입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>원하는 수의 catch 문 및 하나의 finally 블록을 사용하여 try 블록을 나타내는 <see cref="T:System.Linq.Expressions.TryExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.TryExpression" />입니다.</returns>
      <param name="body">try 블록의 본문입니다.</param>
      <param name="finally">finally 블록의 본문입니다.</param>
      <param name="handlers">try 블록과 연결할 catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" /> 식이 0개 이상인 배열입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>fault 블록을 사용하고 catch 문은 사용하지 않고 try 블록을 나타내는 <see cref="T:System.Linq.Expressions.TryExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.TryExpression" />입니다.</returns>
      <param name="body">try 블록의 본문입니다.</param>
      <param name="fault">fault 블록의 본문입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>finally 블록을 사용하고 catch 문은 사용하지 않고 try 블록을 나타내는 <see cref="T:System.Linq.Expressions.TryExpression" />을 만듭니다.</summary>
      <returns>만든 <see cref="T:System.Linq.Expressions.TryExpression" />입니다.</returns>
      <param name="body">try 블록의 본문입니다.</param>
      <param name="finally">finally 블록의 본문입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
      <summary>특정 형식 인수가 있는 제네릭 System.Action 대리자 형식을 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" /> 개체를 만듭니다.</summary>
      <returns>특정 <paramref name="typeArgs" />에 대해 제네릭 System.Action 대리자 형식이 만들어진 경우 True이고, 그렇지 않으면 False입니다.</returns>
      <param name="typeArgs">System.Action 대리자 형식의 형식 인수를 지정하는 Type 개체의 배열입니다.</param>
      <param name="actionType">이 메서드가 반환될 경우 특정 형식 인수가 있는 제네릭 System.Action 대리자 형식이 포함됩니다.<paramref name="typeArgs" />와 일치하는 제네릭 System.Action 대리자가 없을 경우 null이 포함됩니다. 이 매개 변수는 초기화되지 않고 전달됩니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
      <summary>특정 형식 인수가 있는 제네릭 System.Func 대리자 형식을 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" /> 개체를 만듭니다.마지막 형식 인수는 생성된 대리자의 반환 형식을 지정합니다.</summary>
      <returns>제네릭 System.Func 대리자 형식이 특정 <paramref name="typeArgs" />에 대해 만들어졌을 경우 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="typeArgs">System.Func 대리자 형식의 형식 인수를 지정하는 Type 개체의 배열입니다.</param>
      <param name="funcType">이 메서드가 반환될 경우 특정 형식 인수가 있는 제네릭 System.Func 대리자 형식이 포함됩니다.<paramref name="typeArgs" />와 일치하는 제네릭 System.Func 대리자가 없을 경우 null이 포함됩니다. 이 매개 변수는 초기화되지 않고 전달됩니다.</param>
    </member>
    <member name="P:System.Linq.Expressions.Expression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <summary>변환이 실패하면 null이 제공되는 boxing 변환 또는 명시적 참조를 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" />이고 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 및 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 또는 <paramref name="type" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
      <summary>런타임 형식 ID를 비교하는 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" />이고 <see cref="T:System.Linq.Expressions.Expression" /> 및 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />입니다.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <summary>
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" />이고 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 및 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />입니다.</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 또는 <paramref name="type" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <summary>단항 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />이고 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type에 단항 더하기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>단항 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />이고 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 속성이 지정 값으로 설정된 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 속성에 설정할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 null이 아니고 이것이 나타내는 메서드가 void를 반환하거나, static이 아닙니다(Visual Basic의 경우 Shared). 또는 정확하게 하나의 인수를 사용하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 null이고 <paramref name="expression" />.Type에 단항 빼기 연산자가 정의되지 않은 경우-또는-<paramref name="expression" />.Type 또는 이 형식이 nullable 값 형식인 경우 nullable이 아닌 해당 형식을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
      <summary>명시적 unboxing을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</returns>
      <param name="expression">unboxing할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="type">식의 새 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type)">
      <summary>식 트리에서 매개 변수 또는 변수를 식별하는 데 사용할 수 있는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드를 만듭니다.</summary>
      <returns>지정된 이름과 형식의 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드입니다.</returns>
      <param name="type">매개 변수 또는 변수의 형식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
      <summary>식 트리에서 매개 변수 또는 변수를 식별하는 데 사용할 수 있는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드를 만듭니다.</summary>
      <returns>지정된 이름과 형식의 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드입니다.</returns>
      <param name="type">매개 변수 또는 변수의 형식입니다.</param>
      <param name="name">매개 변수나 변수의 이름입니다.이 이름은 디버깅 또는 인쇄용으로만 사용됩니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
      <summary>노드를 줄인 다음 줄인 식에서 방문자 대리자를 호출합니다.이 메서드는 노드를 줄일 수 없으면 예외를 발생합니다.</summary>
      <returns>방문하는 식 또는 트리에서 해당 식을 바꿀 식입니다.</returns>
      <param name="visitor">
        <see cref="T:System.Func`2" />의 인스턴스입니다.</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression`1">
      <summary>강력한 형식의 람다 식을 식 트리 형태의 데이터 구조로 나타냅니다.이 클래스는 상속될 수 없습니다.</summary>
      <typeparam name="TDelegate">
        <see cref="T:System.Linq.Expressions.Expression`1" />에서 나타내는 대리자의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile">
      <summary>식 트리로 기술된 람다 식을 실행 코드로 컴파일하고 람다 식을 나타내는 대리자를 생성합니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" />로 기술된 컴파일된 람다 식을 나타내는 <paramref name="TDelegate" /> 형식의 대리자입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>제공된 자식을 사용하여 이와 유사한 새 식을 만듭니다.모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="body">결과의 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성입니다.</param>
      <param name="parameters">결과의 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 속성입니다. </param>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionType">
      <summary>식 트리에 있는 노드의 형식을 설명합니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Add">
      <summary>a + b와 같이 숫자 피연산자에 대해 오버플로를 검사하지 않는 더하기 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssign">
      <summary>(a += b)와 같이 숫자 피연산자에 대해 오버플로를 검사하지 않는 더하기 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
      <summary>(a += b)와 같이 숫자 피연산자에 대해 오버플로를 검사하는 더하기 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <summary>(a + b)와 같이 숫자 피연산자에 대해 오버플로를 검사하는 더하기 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.And">
      <summary>C#의 (a &amp; b) 및 Visual Basic의 (a And b) 같은 비트 또는 논리 AND 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <summary>첫 번째 피연산자가 true로 계산되는 경우에만 두 번째 피연산자를 계산하는 조건부 AND 연산입니다.C#의 (a &amp;&amp; b)와 Visual Basic의 (a AndAlso b)에 해당합니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAssign">
      <summary>C#의 (a &amp;= b) 같은 비트 또는 논리 AND 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <summary>C#의 array[index] 또는 Visual Basic의 array(index) 같은 1차원 배열의 인덱싱 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <summary>array.Length 같은 1차원 배열의 길이를 가져오는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Assign">
      <summary>(a = b) 같은 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Block">
      <summary>식 블록입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Call">
      <summary>obj.sampleMethod() 식에서와 같은 메서드 호출입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <summary>C#의 (a ?? b) 또는 Visual Basic의 If(a, b) 같은 null 결합 연산을 나타내는 노드입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
      <summary>C#의 a &gt; b ? a : b 또는 Visual Basic의 If(a &gt; b, a, b) 같은 조건부 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Constant">
      <summary>상수 값입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Convert">
      <summary>C#의 (SampleType)obj 또는 Visual Basic의 CType(obj, SampleType)과 같은 캐스팅 또는 변환 연산입니다.숫자 변환의 경우 변환된 값이 대상 형식에 비해 너무 크면 예외를 발생하지 않습니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <summary>C#의 (SampleType)obj 또는 Visual Basic의 CType(obj, SampleType)과 같은 캐스팅 또는 변환 연산입니다.숫자 변환의 경우 변환된 값이 대상 형식에 맞지 않으면 예외가 발생합니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DebugInfo">
      <summary>디버깅 정보입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Decrement">
      <summary>C# 및 Visual Basic의 (a - 1) 같은 단항 감소 연산입니다.현재 위치에서 a 개체가 수정되어서는 안 됩니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Default">
      <summary>기본값입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Divide">
      <summary>(a / b)와 같이 숫자 피연산자에 대한 나누기 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DivideAssign">
      <summary>(a /= b)와 같이 숫자 피연산자에 대한 나누기 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Dynamic">
      <summary>동적 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Equal">
      <summary>C#의 (a == b) 또는 Visual Basic의 (a = b) 같은 같음 비교를 나타내는 노드입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <summary>C#의 (a ^ b) 또는 Visual Basic의 (a Xor b) 같은 비트 또는 논리 XOR 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
      <summary>C#의 (a ^= b) 같은 비트 또는 논리 XOR 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Extension">
      <summary>확장 식입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Goto">
      <summary>C#의 goto Label 또는 Visual Basic의 GoTo Label 같은 "go to" 식입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <summary>(a &gt; b) 같은 "보다 큼" 비교입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <summary>(a &gt;= b) 같은 "보다 크거나 같음" 비교입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Increment">
      <summary>C# 및 Visual Basic의 (a + 1) 같은 단항 증가 연산입니다.현재 위치에서 a 개체가 수정되어서는 안 됩니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Index">
      <summary>인덱스 연산이거나 인수를 사용하는 속성에 액세스하는 연산입니다. </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
      <summary>sampleDelegate.Invoke() 같은 대리자 또는 람다 식을 호출하는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsFalse">
      <summary>false 조건 값입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsTrue">
      <summary>true 조건 값입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Label">
      <summary>레이블입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
      <summary>C#의 a =&gt; a + a 또는 Visual Basic의 Function(a) a + a 같은 람다 식입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <summary>(a &lt;&lt; b) 같은 비트 왼쪽 시프트 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
      <summary>(a &lt;&lt;= b) 같은 비트 왼쪽 시프트 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
      <summary>(a &lt; b) 같은 "보다 작음" 비교입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <summary>(a &lt;= b) 같은 "보다 작거나 같음" 비교입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
      <summary>C#의 new List&lt;SampleType&gt;(){ a, b, c } 또는 Visual Basic의 Dim sampleList = { a, b, c }와 같이 새 <see cref="T:System.Collections.IEnumerable" /> 개체를 만들고 요소 목록을 사용하여 초기화하는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Loop">
      <summary>for 또는 while 같은 루프입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <summary>obj.SampleProperty와 같이 필드 또는 속성에서 읽는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <summary>C#의 new Point { X = 1, Y = 2 } 또는 Visual Basic의 New Point With {.X = 1, .Y = 2}와 같이 새 개체를 만들고 하나 이상의 멤버를 초기화하는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
      <summary>C#의 (a % b) 또는 Visual Basic의 (a Mod b) 같은 산술 나머지 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
      <summary>C#의 (a %= b) 같은 산술 나머지 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
      <summary>(a * b)와 같이 숫자 피연산자에 대해 오버플로를 검사하지 않는 곱하기 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
      <summary>(a *= b)와 같이 숫자 피연산자에 대해 오버플로를 검사하지 않는 곱하기 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
      <summary>(a *= b)와 같이 숫자 피연산자에 대해 오버플로를 검사하는 곱하기 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <summary>(a * b)와 같이 숫자 피연산자에 대해 오버플로를 검사하는 곱하기 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Negate">
      <summary>(-a) 같은 산술 부정 연산입니다.현재 위치에서 a 개체가 수정되어서는 안 됩니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <summary>(-a)와 같이 오버플로를 검사하는 산술 부정 연산입니다.현재 위치에서 a 개체가 수정되어서는 안 됩니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.New">
      <summary>new SampleType()과 같이 생성자를 호출하여 새 개체를 만드는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <summary>C#의 new SampleType[dim1, dim2] 또는 Visual Basic의 New SampleType(dim1, dim2)과 같이 각 차원의 경계가 지정된 새 배열을 만드는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <summary>C#의 new SampleType[]{a, b, c} 또는 Visual Basic의 New SampleType(){a, b, c}과 같이 새 1차원 배열을 만들고 요소 목록을 사용하여 초기화하는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Not">
      <summary>비트 보수 또는 논리 부정 연산입니다.C#에서는 정수 형식의 (~a) 및 부울 값의 (!a)와 동일하고,Visual Basic에서는 (Not a)와 동일합니다.현재 위치에서 a 개체가 수정되어서는 안 됩니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <summary>C#의 (a != b) 또는 Visual Basic의 (a &lt;&gt; b) 같은 다름 비교입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OnesComplement">
      <summary>C#의 (~a) 같은 1의 보수 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Or">
      <summary>C#의 (a | b) 또는 Visual Basic의 (a Or b) 같은 비트 또는 논리 OR 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrAssign">
      <summary>C#의 (a |= b) 같은 비트 또는 논리 OR 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
      <summary>C#의 (a || b) 또는 Visual Basic의 (a OrElse b) 같은 단락(short circuit) 조건부 OR 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
      <summary>식의 컨텍스트에 정의된 매개 변수 또는 변수에 대한 참조입니다.자세한 내용은 <see cref="T:System.Linq.Expressions.ParameterExpression" />을 참조하세요.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
      <summary>(a--) 같은 단항 후위 감소입니다.현재 위치에서 a 개체가 수정되어야 합니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
      <summary>(a++) 같은 단항 후위 증가입니다.현재 위치에서 a 개체가 수정되어야 합니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Power">
      <summary>Visual Basic의 (a ^ b) 같은 숫자 거듭제곱의 수학 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PowerAssign">
      <summary>Visual Basic의 (a ^= b) 같은 숫자 거듭제곱 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
      <summary>(--a) 같은 단항 전위 감소입니다.현재 위치에서 a 개체가 수정되어야 합니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
      <summary>(++a) 같은 단항 전위 증가입니다.현재 위치에서 a 개체가 수정되어야 합니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Quote">
      <summary>
        <see cref="T:System.Linq.Expressions.Expression" /> 형식의 상수 값이 있는 식입니다.<see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> 노드에는 표현된 식의 컨텍스트에 정의된 매개 변수에 대한 참조가 포함될 수 있습니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
      <summary>(a &gt;&gt; b) 같은 비트 오른쪽 시프트 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
      <summary>(a &gt;&gt;= b) 같은 비트 오른쪽 시프트 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
      <summary>런타임 변수 목록입니다.자세한 내용은 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />을 참조하세요.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
      <summary>(a - b)와 같이 숫자 피연산자에 대해 오버플로 검사 없이 빼기 작업입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
      <summary>(a -= b)와 같이 숫자 피연산자에 대해 오버플로를 검사하지 않는 빼기 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
      <summary>(a -= b)와 같이 숫자 피연산자에 대해 오버플로를 검사하는 빼기 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <summary>(a - b)와 같이 숫자 피연산자에 대해 오버플로를 검사하는 산술 빼기 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Switch">
      <summary>C#의 switch 또는 Visual Basic의 Select Case 같은 switch 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Throw">
      <summary>throw new Exception()과 같이 예외를 발생하는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Try">
      <summary>try-catch 식입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <summary>C#의 (obj as SampleType) 또는 Visual Basic의 TryCast(obj, SampleType)와 같이 변환에 실패하면 null이 제공되는 boxing 변환이나 명시적 참조입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeEqual">
      <summary>정확한 형식 테스트입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <summary>C#의 obj is SampleType 또는 Visual Basic의 TypeOf obj is SampleType 같은 형식 테스트입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <summary>(+a) 같은 단항 더하기 연산입니다.미리 정의된 단항 더하기 연산의 결과는 피연산자의 값과 일치하지만, 구현을 사용자 정의하여 예외적인 결과를 생성할 수도 있습니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Unbox">
      <summary>MSIL 명령 unbox 및 unbox.any 같은 unbox 값 형식 연산입니다. </summary>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionVisitor">
      <summary>식 트리에 대한 방문자 또는 재작성기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
      <summary>
        <see cref="T:System.Linq.Expressions.ExpressionVisitor" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
      <summary>이 클래스의 보다 특수한 visit 메서드 중 하나에 식의 목록을 디스패치합니다.</summary>
      <returns>요소 중 하나가 수정되었으면 수정된 식 목록이고, 그렇지 않으면 원래 식 목록을 반환합니다.</returns>
      <param name="nodes">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
      <summary>지정된 요소 방문자를 사용하여 컬렉션의 모든 노드를 열어 봅니다.</summary>
      <returns>요소가 하나라도 수정되었으면 수정된 노드 목록이고, 그렇지 않으면 원래 노드 목록을 반환합니다.</returns>
      <param name="nodes">열어 볼 노드입니다.</param>
      <param name="elementVisitor">단일 요소를 열어 보는 대리자이며 선택적으로 해당 요소를 새 요소로 바꿉니다.</param>
      <typeparam name="T">노드의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
      <summary>이 클래스의 보다 특수한 visit 메서드 중 하나에 식을 디스패치합니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
      <summary>식을 열어 보고 결과를 원래 식 형식으로 다시 캐스트합니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="nodes">열어 볼 식입니다.</param>
      <param name="callerName">호출 메서드의 이름으로, 더 나은 오류 메시지를 보고하는 데 사용됩니다.</param>
      <typeparam name="T">식 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">이 노드에 대한 visit 메서드가 다른 형식을 반환했습니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
      <summary>식을 열어 보고 결과를 원래 식 형식으로 다시 캐스트합니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
      <param name="callerName">호출 메서드의 이름으로, 더 나은 오류 메시지를 보고하는 데 사용됩니다.</param>
      <typeparam name="T">식 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">이 노드에 대한 visit 메서드가 다른 형식을 반환했습니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.BlockExpression" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <summary>
        <see cref="T:System.Linq.Expressions.CatchBlock" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.ConstantExpression" />을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" />을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.DefaultExpression" />을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <summary>
        <see cref="T:System.Linq.Expressions.ElementInit" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
      <summary>확장 식의 자식 항목을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.GotoExpression" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.IndexExpression" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.InvocationExpression" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.LabelExpression" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
      <summary>
        <see cref="T:System.Linq.Expressions.LabelTarget" />을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <summary>
        <see cref="T:System.Linq.Expressions.Expression`1" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
      <typeparam name="T">대리자의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.ListInitExpression" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.LoopExpression" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberExpression" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberAssignment" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberBinding" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberListBinding" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.NewExpression" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.NewArrayExpression" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.ParameterExpression" />을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.SwitchExpression" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <summary>
        <see cref="T:System.Linq.Expressions.SwitchCase" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.TryExpression" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />의 자식을 열어 봅니다.</summary>
      <returns>이 식 또는 하위 식이 수정되었으면 수정된 식을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <param name="node">열어 볼 식입니다.</param>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpression">
      <summary>무조건 점프를 나타냅니다.여기에는 return 문, break 및 continue 문, 기타 점프가 포함됩니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Kind">
      <summary>"go to" 식의 종류입니다.정보 제공 목적으로만 사용됩니다.</summary>
      <returns>"go to" 식의 종류를 나타내는 <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.NodeType">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 형식을 반환합니다.</summary>
      <returns>이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Target">
      <summary>이 노드가 점프하는 대상 레이블입니다.</summary>
      <returns>이 노드의 대상 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.GotoExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>제공된 자식을 사용하여 이와 유사한 새 식을 만듭니다.모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="target">결과의 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 속성입니다. </param>
      <param name="value">결과의 <see cref="P:System.Linq.Expressions.GotoExpression.Value" /> 속성입니다. </param>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Value">
      <summary>대상에 전달된 값 또는 대상이 System.Void 형식인 경우 null입니다.</summary>
      <returns>대상에 전달된 값을 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체 또는 null입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpressionKind">
      <summary>이 <see cref="T:System.Linq.Expressions.GotoExpression" />이 나타내는 점프 종류를 지정합니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Break">
      <summary>break 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Continue">
      <summary>continue 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Goto">
      <summary>특정 위치로의 점프를 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Return">
      <summary>return 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</summary>
    </member>
    <member name="T:System.Linq.Expressions.IndexExpression">
      <summary>속성 또는 배열 인덱싱을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Arguments">
      <summary>속성 또는 배열을 인덱싱하는 데 사용할 인수를 가져옵니다.</summary>
      <returns>속성 또는 배열을 인덱싱하는 데 사용할 인수가 들어 있는 읽기 전용 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Indexer">
      <summary>식이 인덱싱된 속성을 나타내면 속성의 <see cref="T:System.Reflection.PropertyInfo" />를 가져오고, 그렇지 않으면 null을 반환합니다.</summary>
      <returns>식이 인덱싱된 속성을 나타내면 속성의 <see cref="T:System.Reflection.PropertyInfo" />이고, 그렇지 않으면 null입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.NodeType">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 형식을 반환합니다.</summary>
      <returns>이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Object">
      <summary>인덱싱할 개체입니다.</summary>
      <returns>인덱싱할 개체를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.IndexExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>제공된 자식을 사용하여 이와 유사한 새 식을 만듭니다.모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="object">결과의 <see cref="P:System.Linq.Expressions.IndexExpression.Object" /> 속성입니다.</param>
      <param name="arguments">결과의 <see cref="P:System.Linq.Expressions.IndexExpression.Arguments" /> 속성입니다.</param>
    </member>
    <member name="T:System.Linq.Expressions.InvocationExpression">
      <summary>인수 식 목록에 대리자 또는 람다 식을 적용하는 식을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <summary>대리자 또는 람다 식이 적용된 인수를 가져옵니다.</summary>
      <returns>대리자가 적용되는 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
      <summary>적용할 대리자 또는 람다 식을 가져옵니다.</summary>
      <returns>적용할 대리자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.NodeType">
      <summary>이 식의 노드 형식을 반환합니다.확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns>식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Type">
      <summary>이 <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.InvocationExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>제공된 자식을 사용하여 이와 유사한 새 식을 만듭니다.모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="expression">결과의 <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> 속성입니다.</param>
      <param name="arguments">결과의 <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /> 속성입니다.</param>
    </member>
    <member name="T:System.Linq.Expressions.LabelExpression">
      <summary>
        <see cref="T:System.Linq.Expressions.Expression" /> 컨텍스트에 배치할 수 있는 레이블을 나타냅니다.레이블로 점프하면 해당 <see cref="T:System.Linq.Expressions.GotoExpression" />이 제공하는 값을 가져옵니다.그렇지 않으면 <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" />의 값을 받습니다.<see cref="T:System.Type" />이 System.Void와 같으면 아무 값도 제공되지 않습니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.DefaultValue">
      <summary>레이블로 점프하지 않고 일반 제어 흐름을 통해 레이블에 접근할 때 이 <see cref="T:System.Linq.Expressions.LabelExpression" />의 값입니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelExpression" />의 값을 나타내는 Expression 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.NodeType">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 형식을 반환합니다.</summary>
      <returns>이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Target">
      <summary>이 레이블이 연결되는 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</summary>
      <returns>이 레이블이 연결되는 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.LabelExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>제공된 자식을 사용하여 이와 유사한 새 식을 만듭니다.모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="target">결과의 <see cref="P:System.Linq.Expressions.LabelExpression.Target" /> 속성입니다.</param>
      <param name="defaultValue">결과의 <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> 속성입니다.</param>
    </member>
    <member name="T:System.Linq.Expressions.LabelTarget">
      <summary>
        <see cref="T:System.Linq.Expressions.GotoExpression" />의 대상을 나타내는 데 사용됩니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Name">
      <summary>레이블의 이름을 가져옵니다.</summary>
      <returns>레이블 이름입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelTarget.ToString">
      <summary>현재 <see cref="T:System.Object" />을 나타내는 <see cref="T:System.String" />을 반환합니다.</summary>
      <returns>현재 <see cref="T:System.Object" />를 나타내는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Type">
      <summary>레이블로 점프할 때 전달되는 값 형식입니다. 또는 값이 전달되지 않아야 하는 경우 <see cref="T:System.Void" />입니다.</summary>
      <returns>레이블로 점프할 때 전달되는 값의 형식을 나타내는 <see cref="T:System.Type" /> 개체 또는 값이 전달되지 않아야 하는 경우 <see cref="T:System.Void" />입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.LambdaExpression">
      <summary>람다 식을 기술합니다..NET 메서드 본문과 유사한 코드 블록을 캡처합니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Body">
      <summary>람다 식의 본문을 가져옵니다.</summary>
      <returns>람다 식의 본문을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
      <summary>람다 식을 나타내는 대리자를 생성합니다.</summary>
      <returns>컴파일된 람다 식 버전을 포함하는 <see cref="T:System.Delegate" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Name">
      <summary>람다 식의 이름을 가져옵니다.</summary>
      <returns>람다 식의 이름입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.NodeType">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 형식을 반환합니다.</summary>
      <returns>이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <summary>람다 식의 매개 변수를 가져옵니다.</summary>
      <returns>람다 식의 매개 변수를 나타내는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체의 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.ReturnType">
      <summary>람다 식의 반환 형식을 가져옵니다.</summary>
      <returns>이 람다 식의 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.TailCall">
      <summary>마무리 호출 최적화를 사용하여 람다 식을 컴파일할지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>마무리 호출 최적화를 사용하여 람다 식을 컴파일하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.LambdaExpression.Type" />입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ListInitExpression">
      <summary>컬렉션 이니셜라이저가 있는 생성자 호출을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.CanReduce">
      <summary>식 트리 노드를 줄일 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>노드를 줄일 수 있으면 True이고, 그렇지 않으면 False입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <summary>컬렉션을 초기화하는 데 사용되는 요소 이니셜라이저를 가져옵니다.</summary>
      <returns>컬렉션을 초기화하는 데 사용되는 요소를 나타내는 <see cref="T:System.Linq.Expressions.ElementInit" /> 개체의 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <summary>컬렉션 형식의 생성자에 대한 호출이 들어 있는 식을 가져옵니다.</summary>
      <returns>컬렉션 형식의 생성자에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NodeType">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 형식을 반환합니다.</summary>
      <returns>이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Reduce">
      <summary>이항 식 노드를 더 단순한 식으로 줄입니다.</summary>
      <returns>줄어든 식입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.ListInitExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>제공된 자식을 사용하여 이와 유사한 새 식을 만듭니다.모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="newExpression">결과의 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 속성입니다.</param>
      <param name="initializers">결과의 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 속성입니다.</param>
    </member>
    <member name="T:System.Linq.Expressions.LoopExpression">
      <summary>무한 루프를 나타냅니다."break"를 사용하여 종료할 수 있습니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Body">
      <summary>루프의 본문인 <see cref="T:System.Linq.Expressions.Expression" />을 가져옵니다.</summary>
      <returns>루프의 본문인 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.BreakLabel">
      <summary>루프 본문에서 break 문 대상으로 사용되는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 가져옵니다.</summary>
      <returns>루프 본문에서 break 문 대상으로 사용되는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 가져옵니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
      <summary>루프 본문에서 continue 문 대상으로 사용되는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 가져옵니다.</summary>
      <returns>루프 본문에서 continue 문 대상으로 사용되는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 가져옵니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.NodeType">
      <summary>이 식의 노드 형식을 반환합니다.확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns>식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.LoopExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>제공된 자식을 사용하여 이와 유사한 새 식을 만듭니다.모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="breakLabel">결과의 <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" /> 속성입니다.</param>
      <param name="continueLabel">결과의 <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" /> 속성입니다.</param>
      <param name="body">결과의 <see cref="P:System.Linq.Expressions.LoopExpression.Body" /> 속성입니다.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberAssignment">
      <summary>개체의 필드 또는 속성에 대한 할당 연산을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
      <summary>필드 또는 속성에 할당할 식을 가져옵니다.</summary>
      <returns>필드 또는 속성에 할당할 값을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
      <summary>제공된 자식을 사용하여 이와 유사한 새 식을 만듭니다.모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="expression">결과의 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 속성입니다.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberBinding">
      <summary>새로 만든 개체의 멤버를 초기화하는 데 사용되는 바인딩을 나타내는 클래스가 파생되는 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberBinding" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">나타나는 바인딩 형식을 구분하는 <see cref="T:System.Linq.Expressions.MemberBindingType" />입니다.</param>
      <param name="member">초기화할 필드 또는 속성을 나타내는 <see cref="T:System.Reflection.MemberInfo" />입니다.</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
      <summary>표현된 바인딩의 형식을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberBindingType" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.Member">
      <summary>초기화할 필드 또는 속성을 가져옵니다.</summary>
      <returns>초기화할 필드 또는 속성을 나타내는 <see cref="T:System.Reflection.MemberInfo" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.ToString">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberBinding" />의 텍스트 표현을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberBinding" />의 텍스트 표현입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBindingType">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 개체에 사용되는 바인딩 형식을 설명합니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <summary>멤버를 식의 값으로 초기화하는 동작을 나타내는 바인딩입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <summary>요소 목록에서 <see cref="T:System.Collections.IList" /> 또는 <see cref="T:System.Collections.Generic.ICollection`1" /> 형식의 멤버 초기화를 나타내는 바인딩입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <summary>멤버의 멤버를 재귀적으로 초기화하는 동작을 나타내는 바인딩입니다.</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberExpression">
      <summary>필드 또는 속성에 대한 액세스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다.예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <returns>이 노드의 방문 결과입니다.</returns>
      <param name="visitor">이 노드를 방문할 방문자입니다.</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Expression">
      <summary>필드 또는 속성을 포함하는 개체를 가져옵니다.</summary>
      <returns>필드 또는 속성을 포함하는 개체를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Member">
      <summary>액세스할 필드 또는 속성을 가져옵니다.</summary>
      <returns>액세스할 필드 또는 속성을 설명하는 <see cref="T:System.Reflection.MemberInfo" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.NodeType">
      <summary>이 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />의 노드 형식을 반환합니다.</summary>
      <returns>이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
      <summary>제공된 자식을 사용하여 이와 유사한 새 식을 만듭니다.모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="expression">결과의 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 속성입니다.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberInitExpression">
      <summary>생성자를 호출하고 새 개체의 멤버를 하나 이상 초기화하는 동작을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <summary>새로 만든 개체의 멤버를 초기화하는 방법을 설명하는 바인딩을 가져옵니다.</summary>
      <returns>멤버를 초기화하는 방법을 설명하는 <see cref="T:System.Linq.Expressions.MemberBinding" /> 개체의 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
      <summary>식 트리 노드를 줄일 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>노드를 줄일 수 있으면 True이고, 그렇지 않으면 False입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <summary>생성자 호출을 나타내는 식을 가져옵니다.</summary>
      <returns>생성자 호출을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NodeType">
      <summary>이 식의 노드 형식을 반환합니다.확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns>식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Reduce">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" />을 더 간단한 식으로 줄입니다. </summary>
      <returns>줄어든 식입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.MemberInitExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>제공된 자식을 사용하여 이와 유사한 새 식을 만듭니다.모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="newExpression">결과의 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 속성입니다.</param>
      <param name="bindings">결과의 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 속성입니다.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberListBinding">
      <summary>새로 만든 개체의 컬렉션 멤버 요소를 초기화하는 동작을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <summary>새로 만든 개체의 컬렉션 멤버 요소를 초기화하기 위한 요소 이니셜라이저를 가져옵니다.</summary>
      <returns>컬렉션 멤버를 초기화할 <see cref="T:System.Linq.Expressions.ElementInit" /> 개체의 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>제공된 자식을 사용하여 이와 유사한 새 식을 만듭니다.모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="initializers">결과의 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 속성입니다.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberMemberBinding">
      <summary>새로 만든 개체의 멤버의 멤버를 초기화하는 동작을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <summary>멤버의 멤버를 초기화하는 방법을 설명하는 바인딩을 가져옵니다.</summary>
      <returns>멤버의 멤버를 초기화하는 방법을 설명하는 <see cref="T:System.Linq.Expressions.MemberBinding" /> 개체의 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>제공된 자식을 사용하여 이와 유사한 새 식을 만듭니다.모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="bindings">결과의 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 속성입니다.</param>
    </member>
    <member name="T:System.Linq.Expressions.MethodCallExpression">
      <summary>정적 메서드 또는 인스턴스 메서드에 대한 호출을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다.예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <returns>이 노드의 방문 결과입니다.</returns>
      <param name="visitor">이 노드를 방문할 방문자입니다.</param>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <summary>호출된 메서드의 인수를 나타내는 식 컬렉션을 가져옵니다.</summary>
      <returns>호출된 메서드에 대한 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
      <summary>호출할 메서드의 <see cref="T:System.Reflection.MethodInfo" />를 가져옵니다.</summary>
      <returns>호출된 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.NodeType">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 형식을 반환합니다.</summary>
      <returns>이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
      <summary>인스턴스 메서드 호출의 인스턴스 또는 정적 메서드 호출의 null을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />을 가져옵니다.</summary>
      <returns>메서드를 받는 개체를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.MethodCallExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>제공된 자식을 사용하여 이와 유사한 새 식을 만듭니다.모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="object">결과의 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성입니다.</param>
      <param name="arguments">결과의 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 속성입니다.</param>
    </member>
    <member name="T:System.Linq.Expressions.NewArrayExpression">
      <summary>새 배열을 만들고 선택적으로 새 배열의 요소를 초기화하는 동작을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다.예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <returns>이 노드의 방문 결과입니다.</returns>
      <param name="visitor">이 노드를 방문할 방문자입니다.</param>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <summary>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성의 값이 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />이면 배열의 경계를 가져오고, <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성의 값이 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />이면 새 배열의 요소를 초기화할 값을 가져옵니다.</summary>
      <returns>배열의 경계 또는 초기화 값을 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.NewArrayExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>제공된 자식을 사용하여 이와 유사한 새 식을 만듭니다.모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="expressions">결과의 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 속성입니다.</param>
    </member>
    <member name="T:System.Linq.Expressions.NewExpression">
      <summary>생성자 호출을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다.예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <returns>이 노드의 방문 결과입니다.</returns>
      <param name="visitor">이 노드를 방문할 방문자입니다.</param>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Arguments">
      <summary>생성자에 대한 인수를 가져옵니다.</summary>
      <returns>생성자에 대한 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Constructor">
      <summary>호출된 생성자를 가져옵니다.</summary>
      <returns>호출된 생성자를 나타내는 <see cref="T:System.Reflection.ConstructorInfo" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Members">
      <summary>생성자 인수를 사용하여 초기화된 필드의 값을 검색할 수 있는 멤버를 가져옵니다.</summary>
      <returns>생성자 인수를 사용하여 초기화된 필드의 값을 검색할 수 있는 멤버를 나타내는 <see cref="T:System.Reflection.MemberInfo" /> 개체의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.NodeType">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 형식을 반환합니다.</summary>
      <returns>이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.NewExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>제공된 자식을 사용하여 이와 유사한 새 식을 만듭니다.모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="arguments">결과의 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 속성입니다.</param>
    </member>
    <member name="T:System.Linq.Expressions.ParameterExpression">
      <summary>명명된 매개 변수 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다.예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <returns>이 노드의 방문 결과입니다.</returns>
      <param name="visitor">이 노드를 방문할 방문자입니다.</param>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.IsByRef">
      <summary>이 ParameterExpression이 ByRef 매개 변수로 처리됨을 나타냅니다.</summary>
      <returns>이 ParameterExpression 매개 변수가 ByRef 매개 변수이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Name">
      <summary>매개 변수 또는 변수의 이름을 가져옵니다.</summary>
      <returns>매개 변수의 이름이 들어 있는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.NodeType">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 형식을 반환합니다.</summary>
      <returns>이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.ParameterExpression.Type" />입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.RuntimeVariablesExpression">
      <summary>변수에 대한 런타임 읽기/쓰기 권한을 제공하는 식입니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
      <summary>이 식의 노드 형식을 반환합니다.확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns>식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>제공된 자식을 사용하여 이와 유사한 새 식을 만듭니다.모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="variables">결과의 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 속성입니다.</param>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
      <summary>런타임 액세스를 제공할 변수 또는 매개 변수입니다.</summary>
      <returns>런타임 액세스를 제공할 매개 변수가 들어 있는 읽기 전용 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchCase">
      <summary>
        <see cref="T:System.Linq.Expressions.SwitchExpression" />의 사례 중 하나를 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.Body">
      <summary>이 case의 본문을 가져옵니다.</summary>
      <returns>case 블록의 본문을 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.TestValues">
      <summary>이 case의 값을 가져옵니다.이 case는 <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" />가 이러한 값과 일치할 때 실행되도록 선택됩니다.</summary>
      <returns>이 case 블록에 대한 값의 읽기 전용 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.ToString">
      <summary>현재 <see cref="T:System.Object" />을 나타내는 <see cref="T:System.String" />을 반환합니다.</summary>
      <returns>현재 <see cref="T:System.Object" />를 나타내는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
      <summary>제공된 자식을 사용하여 이와 유사한 새 식을 만듭니다.모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="testValues">결과의 <see cref="P:System.Linq.Expressions.SwitchCase.TestValues" /> 속성입니다.</param>
      <param name="body">결과의 <see cref="P:System.Linq.Expressions.SwitchCase.Body" /> 속성입니다.</param>
    </member>
    <member name="T:System.Linq.Expressions.SwitchExpression">
      <summary>제어를 <see cref="T:System.Linq.Expressions.SwitchCase" />로 전달하여 다중 선택을 처리하는 제어 식을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Cases">
      <summary>스위치에 대한 <see cref="T:System.Linq.Expressions.SwitchCase" /> 개체의 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.SwitchCase" /> 개체의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Comparison">
      <summary>같음 비교 메서드를 가져옵니다(있는 경우).</summary>
      <returns>같음 비교 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
      <summary>스위치에 대한 테스트를 가져옵니다.</summary>
      <returns>스위치에 대한 테스트를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.NodeType">
      <summary>이 식의 노드 형식을 반환합니다.확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns>식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
      <summary>스위치에 대한 테스트를 가져옵니다.</summary>
      <returns>스위치에 대한 테스트를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.SwitchExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
      <summary>제공된 자식을 사용하여 이와 유사한 새 식을 만듭니다.모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="switchValue">결과의 <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> 속성입니다.</param>
      <param name="cases">결과의 <see cref="P:System.Linq.Expressions.SwitchExpression.Cases" /> 속성입니다.</param>
      <param name="defaultBody">결과의 <see cref="P:System.Linq.Expressions.SwitchExpression.DefaultBody" /> 속성입니다.</param>
    </member>
    <member name="T:System.Linq.Expressions.SymbolDocumentInfo">
      <summary>소스 파일에 대한 디버깅 기호 정보를 내보내는 데 필요한 정보, 특히 파일 이름과 고유한 언어 식별자를 저장합니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
      <summary>문서 형식의 고유 식별자를 반환합니다(있는 경우).기본값으로 텍스트 파일의 GUID로 설정됩니다.</summary>
      <returns>문서 형식의 고유 식별자입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
      <summary>소스 파일 이름입니다.</summary>
      <returns>소스 파일 이름을 나타내는 문자열입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
      <summary>언어의 고유 식별자를 반환합니다(있는 경우).</summary>
      <returns>언어의 고유 식별자입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
      <summary>언어 공급업체의 고유 식별자를 반환합니다(있는 경우).</summary>
      <returns>언어 공급업체의 고유 식별자입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.TryExpression">
      <summary>try/catch/finally/fault 블록을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Body">
      <summary>try 블록의 본문을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />을 가져옵니다.</summary>
      <returns>try 블록의 본문을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Fault">
      <summary>fault 블록을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />을 가져옵니다.</summary>
      <returns>fault 블록을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Finally">
      <summary>finally 블록을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />을 가져옵니다.</summary>
      <returns>finally 블록을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Handlers">
      <summary>try 블록과 연결되는 <see cref="T:System.Linq.Expressions.CatchBlock" /> 식의 컬렉션을 가져옵니다.</summary>
      <returns>try 블록에 연결된 <see cref="T:System.Linq.Expressions.CatchBlock" /> 식의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.NodeType">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 형식을 반환합니다.</summary>
      <returns>이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.TryExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>제공된 자식을 사용하여 이와 유사한 새 식을 만듭니다.모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="body">결과의 <see cref="P:System.Linq.Expressions.TryExpression.Body" /> 속성입니다.</param>
      <param name="handlers">결과의 <see cref="P:System.Linq.Expressions.TryExpression.Handlers" /> 속성입니다.</param>
      <param name="finally">결과의 <see cref="P:System.Linq.Expressions.TryExpression.Finally" /> 속성입니다.</param>
      <param name="fault">결과의 <see cref="P:System.Linq.Expressions.TryExpression.Fault" /> 속성입니다.</param>
    </member>
    <member name="T:System.Linq.Expressions.TypeBinaryExpression">
      <summary>식과 형식 간의 연산을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <summary>형식 테스트 연산의 식 피연산자를 가져옵니다.</summary>
      <returns>형식 테스트 연산의 식 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
      <summary>이 식의 노드 형식을 반환합니다.확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns>식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Type">
      <summary>이 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Type" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <summary>형식 테스트 연산의 형식 피연산자를 가져옵니다.</summary>
      <returns>형식 테스트 연산의 형식 피연산자를 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>제공된 자식을 사용하여 이와 유사한 새 식을 만듭니다.모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="expression">결과의 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 속성입니다.</param>
    </member>
    <member name="T:System.Linq.Expressions.UnaryExpression">
      <summary>단항 연산자가 있는 식을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.CanReduce">
      <summary>식 트리 노드를 줄일 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>노드를 줄일 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <summary>식 트리 노드가 연산자에 대한 리프트된 호출을 나타내는지 여부를 알려주는 값을 가져옵니다.</summary>
      <returns>노드가 리프트된 호출을 나타내면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <summary>식 트리 노드가 해당 반환 형식이 nullable 형식으로 리프트된 연산자에 대한 리프트된 호출을 나타내는지 여부를 알려주는 값을 가져옵니다.</summary>
      <returns>연산자의 반환 형식이 nullable 형식으로 리프트되면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Method">
      <summary>단항 연산에 대한 구현 메서드를 가져옵니다.</summary>
      <returns>구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.NodeType">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 형식을 반환합니다.</summary>
      <returns>이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
      <summary>단항 연산의 피연산자를 가져옵니다.</summary>
      <returns>단항 연산의 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Reduce">
      <summary>식 노드를 더 단순한 식으로 줄입니다. </summary>
      <returns>줄어든 식입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.UnaryExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>제공된 자식을 사용하여 이와 유사한 새 식을 만듭니다.모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
      <param name="operand">결과의 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성입니다.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite">
      <summary>동적 호출 사이트의 기본 클래스입니다.이 형식은 동적 사이트 대상에 대한 매개 변수 형식으로 사용됩니다.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite.Binder">
      <summary>동적 사이트에서 동적 연산을 바인딩하는 클래스입니다.</summary>
      <returns>동적 연산을 바인딩하는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite.Create(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>지정된 대리자 형식 및 바인더를 사용하여 호출 사이트를 만듭니다.</summary>
      <returns>새 호출 사이트입니다.</returns>
      <param name="delegateType">호출 사이트의 대리자 형식입니다.</param>
      <param name="binder">호출 사이트 바인더입니다.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite`1">
      <summary>동적 사이트 형식입니다.</summary>
      <typeparam name="T">대리자 형식입니다.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite`1.Create(System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>이 호출 사이트에서 동적 연산의 런타임 바인딩을 수행하는 바인더를 사용하여 초기화되는 동적 호출 사이트의 인스턴스를 만듭니다.</summary>
      <returns>동적 호출 사이트의 새 인스턴스입니다.</returns>
      <param name="binder">이 호출 사이트에서 동적 연산의 런타임 바인딩을 수행하는 바인더입니다.</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.CallSite`1.Target">
      <summary>수준 0 캐시 - 사이트 기록을 기준으로 특수화된 대리자입니다.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite`1.Update">
      <summary>업데이트 대리자입니다.동적 사이트에서 캐시가 누락되는 경우 호출됩니다.</summary>
      <returns>업데이트 대리자입니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteBinder">
      <summary>동적 호출 사이트에서 동적 연산의 런타임 바인딩을 수행하는 클래스입니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.#ctor">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>인수 집합에서 동적 연산의 런타임 바인딩을 수행합니다.</summary>
      <returns>동적 연산의 인수에서 테스트를 수행하고, 테스트에 성공하는 경우 동적 연산을 수행하는 식입니다.이후의 동적 연산에서 테스트에 실패하는 경우 새 인수 형식에 대한 새 <see cref="T:System.Linq.Expressions.Expression" />을 생성하기 위해 Bind가 다시 호출됩니다.</returns>
      <param name="args">동적 연산의 인수 배열입니다.</param>
      <param name="parameters">바인딩 프로세스에서 호출 사이트의 매개 변수를 나타내는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 인스턴스의 배열입니다.</param>
      <param name="returnLabel">동적 바인딩의 결과를 반환하는 데 사용되는 LabelTarget입니다.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.BindDelegate``1(System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>하위 수준 런타임 바인딩 지원을 제공합니다.클래스를 사용하여 이를 재정의하고 규칙 구현을 위한 대리자를 직접 제공할 수 있습니다.이를 통해 디스크에 규칙을 저장하거나 런타임에서 특수화된 규칙을 사용할 수 있게 하거나 다른 캐싱 정책을 제공할 수 있습니다.</summary>
      <returns>CallSite 대상을 대체하는 새 대리자입니다.</returns>
      <param name="site">바인드가 수행되는 CallSite입니다.</param>
      <param name="args">바인더의 인수입니다.</param>
      <typeparam name="T">CallSite의 대상 형식입니다.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.CacheTarget``1(``0)">
      <summary>알려진 대상의 캐시에 대상을 추가합니다.캐시된 대상은 새 규칙을 생성하기 위해 BindDelegate를 호출하기 전에 검색됩니다.</summary>
      <param name="target">캐시에 추가될 대상 대리자입니다.</param>
      <typeparam name="T">추가되는 대상의 형식입니다.</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel">
      <summary>바인딩이 업데이트되도록 하는 데 사용할 수 있는 레이블을 가져옵니다.식의 바인딩이 더 이상 유효하지 않음을 나타냅니다.일반적으로 동적 개체의 "버전"이 변경될 때 사용됩니다.</summary>
      <returns>바인딩 업데이트를 트리거하는 데 사용할 수 있는 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteHelpers">
      <summary>DLR CallSite에 대한 도우미 메서드가 들어 있는 클래스입니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame(System.Reflection.MethodBase)">
      <summary>
        <see cref="T:System.Reflection.MethodBase" />를 DLR에서 내부적으로 사용하고 언어 코드의 스택에 표시하지 않아야 하는지 여부를 확인합니다.</summary>
      <returns>입력 <see cref="T:System.Reflection.MethodBase" />를 DLR에서 내부적으로 사용하고 언어 코드의 스택에 표시하면 안 되면 true이고,그렇지 않으면 false입니다.</returns>
      <param name="mb">입력 입니다. <see cref="T:System.Reflection.MethodBase" /></param>
    </member>
    <member name="T:System.Runtime.CompilerServices.DynamicAttribute">
      <summary>멤버에서 <see cref="T:System.Object" />를 사용하면 동적으로 디스패치되는 형식으로 처리됨을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor(System.Boolean[])">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="transformFlags">형식의 접두사 순회 생성 시 동적으로 디스패치되는 형식으로 처리될 <see cref="T:System.Object" />를 지정합니다.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DynamicAttribute.TransformFlags">
      <summary>형식의 접두사 순회 생성 시 동적으로 디스패치되는 형식으로 처리될 <see cref="T:System.Object" />를 지정합니다.</summary>
      <returns>동적으로 디스패치되는 형식으로 처리될 <see cref="T:System.Object" />의 목록입니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExecutionScope">
      <summary>동적으로 생성된 메서드의 런타임 상태를 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateDelegate(System.Int32,System.Object[])">
      <summary>동적으로 생성된 메서드를 실행하는 데 사용할 수 있는 대리자를 만듭니다.</summary>
      <returns>동적으로 생성된 메서드를 실행할 수 있는 <see cref="T:System.Delegate" />입니다.</returns>
      <param name="indexLambda">동적 메서드의 관련 람다 식에 대한 정보를 저장하는 개체의 인덱스입니다.</param>
      <param name="locals">부모 컨텍스트에서 가져온 지역 변수가 들어 있는 배열입니다.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateHoistedLocals">
      <summary>가져온 지역 변수를 저장할 배열을 만듭니다.</summary>
      <returns>가져온 지역 변수를 저장할 배열입니다.</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Globals">
      <summary>동적으로 생성된 메서드에서 참조하는 특수한 상수 및 로컬로 실행 가능한 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.IsolateExpression(System.Linq.Expressions.Expression,System.Object[])">
      <summary>지정된 식 트리에서 매개 변수를 현재 값으로 바꾸어 외부 매개 변수 참조를 제거합니다.</summary>
      <returns>외부 매개 변수 참조가 들어 있지 않은 식 트리입니다.</returns>
      <param name="expression">외부 매개 변수 참조를 제거할 식 트리입니다.</param>
      <param name="locals">가져온 지역 변수가 들어 있는 배열입니다.</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Locals">
      <summary>부모 컨텍스트에서 가져온 지역 변수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Parent">
      <summary>호출하는 대리자의 실행 범위를 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IStrongBox">
      <summary>개체가 참조하는 값에 액세스하기 위한 속성을 정의합니다.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IStrongBox.Value">
      <summary>개체가 참조하는 값을 가져오거나 설정합니다.</summary>
      <returns>개체가 참조하는 값입니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.StrongBox`1">
      <summary>값에 대한 참조를 보유합니다.</summary>
      <typeparam name="T">
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" />에서 참조하는 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor"></member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor(`0)">
      <summary>제공된 값을 사용하여 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="value">
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" />이 참조할 값입니다.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.StrongBox`1.System#Runtime#CompilerServices#IStrongBox#Value">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" />이 참조하는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" />에서 참조하는 값입니다.</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.StrongBox`1.Value">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" />이 참조하는 값을 나타냅니다.</summary>
    </member>
    <member name="T:System.Security.Cryptography.AesManaged">
      <summary>AES(Advanced Encryption Standard) 대칭 알고리즘의 관리되는 구현을 제공합니다. </summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.AesManaged" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor">
      <summary>현재 키 및 IV(초기화 벡터)를 사용하여 대칭 decryptor 개체를 만듭니다.</summary>
      <returns>대칭 decryptor 개체입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>지정된 키와 IV(초기화 벡터)를 사용하여 대칭 decryptor 개체를 만듭니다.</summary>
      <returns>대칭 decryptor 개체입니다.</returns>
      <param name="key">대칭 알고리즘에 사용할 비밀 키입니다.</param>
      <param name="iv">대칭 알고리즘에 사용할 초기화 벡터입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">초기화 벡터 <paramref name=" iv " />의 크기가 잘못된 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor">
      <summary>현재 키 및 IV(초기화 벡터)를 사용하여 대칭 encryptor 개체를 만듭니다.</summary>
      <returns>대칭 encryptor 개체입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>지정된 키와 IV(초기화 벡터)를 사용하여 대칭 encryptor 개체를 만듭니다.</summary>
      <returns>대칭 encryptor 개체입니다.</returns>
      <param name="key">대칭 알고리즘에 사용할 비밀 키입니다.</param>
      <param name="iv">대칭 알고리즘에 사용할 초기화 벡터입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">초기화 벡터 <paramref name=" iv " />의 크기가 잘못된 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateIV">
      <summary>대칭 알고리즘에 사용할 무작위 IV(초기화 벡터)를 생성합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateKey">
      <summary>대칭 알고리즘에 사용할 무작위 키를 생성합니다.</summary>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.IV">
      <summary>대칭 알고리즘에 대한 IV(초기화 벡터)를 가져오거나 설정합니다.</summary>
      <returns>대칭 알고리즘에 사용할 초기화 벡터입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Key">
      <summary>대칭 알고리즘에 사용되는 비밀 키를 가져오거나 설정합니다.</summary>
      <returns>대칭 알고리즘의 키입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.KeySize">
      <summary>대칭 알고리즘에 사용되는 비밀 키의 크기(비트 단위)를 가져오거나 설정합니다. </summary>
      <returns>대칭 알고리즘에 사용되는 키 크기(비트 단위)입니다.</returns>
    </member>
    <member name="T:System.Threading.LockRecursionPolicy">
      <summary>동일한 스레드에서 잠금을 여러 번 시작할 수 있는지 여부를 지정합니다.</summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.NoRecursion">
      <summary>스레드에서 잠금을 재귀적으로 시작하려고 하면 예외가 발생됩니다. 이 설정을 적용하는 경우 일부 클래스에서 특정 재귀가 허용될 수도 있습니다. </summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.SupportsRecursion">
      <summary>스레드에서 잠금을 재귀적으로 시작할 수 있습니다. 일부 클래스에서는 이 기능이 제한될 수 있습니다. </summary>
    </member>
    <member name="T:System.Threading.ReaderWriterLockSlim">
      <summary>여러 스레드에서 읽을 수 있도록 허용하거나 쓰기를 위한 단독 액세스를 허용하여 리소스에 대한 액세스를 관리하는 데 사용되는 잠금을 나타냅니다.</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor">
      <summary>기본 속성 값으로 <see cref="T:System.Threading.ReaderWriterLockSlim" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor(System.Threading.LockRecursionPolicy)">
      <summary>잠금 재귀 정책을 지정하여 <see cref="T:System.Threading.ReaderWriterLockSlim" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="recursionPolicy">잠금 재귀 정책을 지정하는 열거형 값 중 하나입니다. </param>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.CurrentReadCount">
      <summary>읽기 모드로 잠금을 시작한 고유 스레드의 총 개수를 가져옵니다.</summary>
      <returns>읽기 모드로 잠금을 시작한 고유 스레드의 총 개수입니다.</returns>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.Dispose">
      <summary>
        <see cref="T:System.Threading.ReaderWriterLockSlim" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterReadLock">
      <summary>읽기 모드로 잠금을 시작하려고 합니다.</summary>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 속성이 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />이고 현재 스레드에서 이미 읽기 모드를 시작한 경우 -또는-재귀 횟수가 카운터 용량을 초과하는 경우. 이 제한은 매우 크므로 일반적으로 응용프로그램에서 초과되지 않아야 합니다.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock">
      <summary>업그레이드 가능 모드로 잠금을 시작하려고 합니다.</summary>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 속성이 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />이고 현재 스레드에서 이미 모드에 관계없이 잠금을 시작한 경우 -또는-현재 스레드에서 읽기 모드를 시작했으므로 업그레이드 가능 모드를 시작하려고 하면 교착 상태가 발생할 수 있는 경우 -또는-재귀 횟수가 카운터 용량을 초과하는 경우. 이 제한은 매우 크므로 일반적으로 응용프로그램에서 초과되지 않아야 합니다.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterWriteLock">
      <summary>쓰기 모드로 잠금을 시작하려고 합니다.</summary>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 속성이 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />이고 현재 스레드에서 이미 모드에 관계없이 잠금을 시작한 경우 -또는-현재 스레드에서 읽기 모드를 시작했으므로 쓰기 모드로 잠금을 시작하려고 하면 교착 상태가 발생할 수 있는 경우 -또는-재귀 횟수가 카운터 용량을 초과하는 경우. 이 제한은 매우 크므로 일반적으로 응용프로그램에서 초과되지 않아야 합니다.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitReadLock">
      <summary>읽기 모드의 재귀 횟수를 줄이고, 결과 횟수가 0이 되면 읽기 모드를 종료합니다.</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">현재 스레드에서 읽기 모드로 잠금을 시작하지 않은 경우</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock">
      <summary>업그레이드 가능 모드의 재귀 횟수를 줄이고, 결과 횟수가 0이 되면 업그레이드 가능 모드를 종료합니다.</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">현재 스레드에서 업그레이드 가능 모드로 잠금을 시작하지 않은 경우</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitWriteLock">
      <summary>쓰기 모드의 재귀 횟수를 줄이고, 결과 횟수가 0이 되면 쓰기 모드를 종료합니다.</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">현재 스레드에서 쓰기 모드로 잠금을 시작하지 않은 경우</exception>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsReadLockHeld">
      <summary>현재 스레드에서 읽기 모드로 잠금을 시작했는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 스레드에서 읽기 모드가 시작되었으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld">
      <summary>현재 스레드에서 업그레이드 가능 모드로 잠금을 시작했는지 여부를 나타내는 값을 가져옵니다. </summary>
      <returns>현재 스레드에서 업그레이드 가능 모드가 시작되었으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld">
      <summary>현재 스레드에서 쓰기 모드로 잠금을 시작했는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 스레드에서 쓰기 모드가 시작되었으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy">
      <summary>현재 <see cref="T:System.Threading.ReaderWriterLockSlim" /> 개체에 대한 재귀 정책을 나타내는 값을 가져옵니다.</summary>
      <returns>잠금 재귀 정책을 지정하는 열거형 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveReadCount">
      <summary>재귀를 확인하기 위해 현재 스레드에서 읽기 모드로 잠금을 시작한 횟수를 가져옵니다.</summary>
      <returns>현재 스레드에서 읽기 모드를 시작하지 않았으면 0이고, 스레드에서 읽기 모드를 시작했지만 재귀적으로 시작하지 않았으면 1이고, 스레드에서 재귀적으로 잠금을 n-1회 시작했으면 n입니다.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount">
      <summary>재귀를 확인하기 위해 현재 스레드에서 업그레이드 가능 모드로 잠금을 시작한 횟수를 가져옵니다.</summary>
      <returns>현재 스레드에서 업그레이드 가능 모드를 시작하지 않았으면 0이고, 스레드에서 업그레이드 가능 모드를 시작했지만 재귀적으로 시작하지 않았으면 1이고, 스레드에서 재귀적으로 업그레이드 가능 모드를 n-1회 시작했으면 n입니다.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveWriteCount">
      <summary>재귀를 확인하기 위해 현재 스레드에서 쓰기 모드로 잠금을 시작한 횟수를 가져옵니다.</summary>
      <returns>현재 스레드에서 쓰기 모드를 시작하지 않았으면 0이고, 스레드에서 쓰기 모드를 시작했지만 재귀적으로 시작하지 않았으면 1이고, 스레드에서 재귀적으로 쓰기 모드를 n-1회 시작했으면 n입니다.</returns>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)">
      <summary>제한 시간(정수)을 선택적으로 적용하여 읽기 모드로 잠금을 시작하려고 합니다.</summary>
      <returns>호출하는 스레드에서 읽기 모드가 시작되었으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="millisecondsTimeout">대기할 시간(밀리초)이거나, 무기한 대기하려는 경우 -1(<see cref="F:System.Threading.Timeout.Infinite" />)입니다.</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 속성이 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />이고 현재 스레드에서 이미 잠금을 시작한 경우 -또는-재귀 횟수가 카운터 용량을 초과하는 경우. 이 제한은 매우 크므로 일반적으로 응용프로그램에서 초과되지 않아야 합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" />의 값이 음수이지만 유일하게 허용되는 음수 값인 <see cref="F:System.Threading.Timeout.Infinite" />(-1)이 아닌 경우 </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.TimeSpan)">
      <summary>제한 시간을 선택적으로 적용하여 읽기 모드로 잠금을 시작하려고 합니다.</summary>
      <returns>호출하는 스레드에서 읽기 모드가 시작되었으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="timeout">대기할 간격이거나, 무기한 대기하려는 경우 -1밀리초입니다. </param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 속성이 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />이고 현재 스레드에서 이미 잠금을 시작한 경우 -또는-재귀 횟수가 카운터 용량을 초과하는 경우. 이 제한은 매우 크므로 일반적으로 응용프로그램에서 초과되지 않아야 합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" />의 값이 음수이지만 유일하게 허용되는 음수 값인 -1밀리초가 아닌 경우-또는-<paramref name="timeout" />의 값이 <see cref="F:System.Int32.MaxValue" />밀리초보다 큰 경우 </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)">
      <summary>제한 시간을 선택적으로 적용하여 업그레이드 가능 모드로 잠금을 시작하려고 합니다.</summary>
      <returns>호출하는 스레드에서 업그레이드 가능 모드가 시작되었으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="millisecondsTimeout">대기할 시간(밀리초)이거나, 무기한 대기하려는 경우 -1(<see cref="F:System.Threading.Timeout.Infinite" />)입니다.</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 속성이 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />이고 현재 스레드에서 이미 잠금을 시작한 경우 -또는-현재 스레드에서 초기에 읽기 모드로 잠금을 시작했으므로 업그레이드 가능 모드를 시작하려고 하면 교착 상태가 발생할 수 있는 경우 -또는-재귀 횟수가 카운터 용량을 초과하는 경우. 이 제한은 매우 크므로 일반적으로 응용프로그램에서 초과되지 않아야 합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" />의 값이 음수이지만 유일하게 허용되는 음수 값인 <see cref="F:System.Threading.Timeout.Infinite" />(-1)이 아닌 경우 </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.TimeSpan)">
      <summary>제한 시간을 선택적으로 적용하여 업그레이드 가능 모드로 잠금을 시작하려고 합니다.</summary>
      <returns>호출하는 스레드에서 업그레이드 가능 모드가 시작되었으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="timeout">대기할 간격이거나, 무기한 대기하려는 경우 -1밀리초입니다.</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 속성이 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />이고 현재 스레드에서 이미 잠금을 시작한 경우 -또는-현재 스레드에서 초기에 읽기 모드로 잠금을 시작했으므로 업그레이드 가능 모드를 시작하려고 하면 교착 상태가 발생할 수 있는 경우 -또는-재귀 횟수가 카운터 용량을 초과하는 경우. 이 제한은 매우 크므로 일반적으로 응용프로그램에서 초과되지 않아야 합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" />의 값이 음수이지만 유일하게 허용되는 음수 값인 -1밀리초가 아닌 경우-또는-<paramref name="timeout" />의 값이 <see cref="F:System.Int32.MaxValue" />밀리초보다 큰 경우 </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)">
      <summary>제한 시간을 선택적으로 적용하여 쓰기 모드로 잠금을 시작하려고 합니다.</summary>
      <returns>호출하는 스레드에서 쓰기 모드가 시작되었으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="millisecondsTimeout">대기할 시간(밀리초)이거나, 무기한 대기하려는 경우 -1(<see cref="F:System.Threading.Timeout.Infinite" />)입니다.</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 속성이 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />이고 현재 스레드에서 이미 잠금을 시작한 경우 -또는-현재 스레드에서 초기에 읽기 모드로 잠금을 시작했으므로 쓰기 모드를 시작하려고 하면 교착 상태가 발생할 수 있는 경우 -또는-재귀 횟수가 카운터 용량을 초과하는 경우. 이 제한은 매우 크므로 일반적으로 응용프로그램에서 초과되지 않아야 합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" />의 값이 음수이지만 유일하게 허용되는 음수 값인 <see cref="F:System.Threading.Timeout.Infinite" />(-1)이 아닌 경우 </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.TimeSpan)">
      <summary>제한 시간을 선택적으로 적용하여 쓰기 모드로 잠금을 시작하려고 합니다.</summary>
      <returns>호출하는 스레드에서 쓰기 모드가 시작되었으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="timeout">대기할 간격이거나, 무기한 대기하려는 경우 -1밀리초입니다.</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 속성이 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />이고 현재 스레드에서 이미 잠금을 시작한 경우 -또는-현재 스레드에서 초기에 읽기 모드로 잠금을 시작했으므로 쓰기 모드를 시작하려고 하면 교착 상태가 발생할 수 있는 경우 -또는-재귀 횟수가 카운터 용량을 초과하는 경우. 이 제한은 매우 크므로 일반적으로 응용프로그램에서 초과되지 않아야 합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" />의 값이 음수이지만 유일하게 허용되는 음수 값인 -1밀리초가 아닌 경우-또는-<paramref name="timeout" />의 값이 <see cref="F:System.Int32.MaxValue" />밀리초보다 큰 경우 </exception>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount">
      <summary>읽기 모드로 잠금을 시작하려고 대기 중인 스레드의 총 개수를 가져옵니다.</summary>
      <returns>읽기 모드를 시작하려고 대기 중인 스레드의 총 개수입니다.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount">
      <summary>업그레이드 가능 모드로 잠금을 시작하려고 대기 중인 스레드의 총 개수를 가져옵니다.</summary>
      <returns>업그레이드 가능 모드를 시작하려고 대기 중인 스레드의 총 개수입니다.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount">
      <summary>쓰기 모드로 잠금을 시작하려고 대기 중인 스레드의 총 개수를 가져옵니다.</summary>
      <returns>쓰기 모드를 시작하려고 대기 중인 스레드의 총 개수입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskExtensions">
      <summary>특정 유형의 <see cref="T:System.Threading.Tasks.Task" /> 인스턴스로 작업하기 위한 static(Visual Basic의 경우 Shared) 메서드 집합을 제공합니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
      <summary>Task&lt;Task&lt;T&gt;&gt;(C#) 또는 Task (Of Task(Of T))(Visual Basic)의 비동기 작업을 나타내는 프록시 <see cref="T:System.Threading.Tasks.Task" />를 만듭니다.</summary>
      <returns>제공된 Task&lt;Task&lt;T&gt;&gt;(C#) 또는 Task (Of Task(Of T))(Visual Basic)의 비동기 작업을 나타내는 프록시 <see cref="System.Threading.Tasks.Task`1" />입니다.</returns>
      <param name="task">캡슐화를 해제할 Task&lt;Task&lt;T&gt;&gt;(C#) 또는 Task (Of Task)(Visual Basic)입니다.</param>
      <typeparam name="TResult">작업 결과의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> 인수가 null인 경우 발생하는 예외입니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
      <summary>
        <see cref="T:System.Threading.Tasks.Task{System.Threading.Tasks.Task}" />의 비동기 작업을 나타내는 프록시 <see cref="T:System.Threading.Tasks.Task" />를 만듭니다.</summary>
      <returns>제공된 System.Threading.Tasks.Task(Of Task)의 비동기 작업을 나타내는 작업입니다.</returns>
      <param name="task">캡슐화를 해제할 Task&lt;Task&gt;(C#) 또는 Task (Of Task)(Visual Basic)입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> 인수가 null인 경우 발생하는 예외입니다.</exception>
    </member>
  </members>
</doc>