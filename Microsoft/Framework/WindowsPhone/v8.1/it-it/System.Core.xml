<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Core</name>
  </assembly>
  <members>
    <member name="T:System.Action`10">
      <summary>Incapsula un metodo che presenta 10 parametri e non restituisce alcun valore.</summary>
      <param name="arg1">Primo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg2">Secondo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg3">Terzo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg4">Quarto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg5">Quinto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg6">Sesto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg7">Settimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg8">Ottavo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg9">Nono parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg10">Decimo parametro del metodo incapsulato da questo delegato.</param>
      <typeparam name="T1">Tipo del primo parametro del metodo incapsulato da questo delegato.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Tipo del secondo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T3">Tipo del terzo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T4">Tipo del quarto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T5">Tipo del quinto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T6">Tipo del sesto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T7">Tipo del settimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T8">Tipo dell'ottavo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T9">Tipo del nono parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T10">Tipo del decimo parametro del metodo incapsulato da questo delegato.</typeparam>
    </member>
    <member name="T:System.Action`11">
      <summary>Incapsula un metodo che presenta 11 parametri e non restituisce alcun valore.</summary>
      <param name="arg1">Primo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg2">Secondo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg3">Terzo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg4">Quarto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg5">Quinto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg6">Sesto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg7">Settimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg8">Ottavo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg9">Nono parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg10">Decimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg11">Undicesimo parametro del metodo incapsulato da questo delegato.</param>
      <typeparam name="T1">Tipo del primo parametro del metodo incapsulato da questo delegato.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Tipo del secondo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T3">Tipo del terzo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T4">Tipo del quarto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T5">Tipo del quinto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T6">Tipo del sesto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T7">Tipo del settimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T8">Tipo dell'ottavo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T9">Tipo del nono parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T10">Tipo del decimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T11">Tipo dell'undicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
    </member>
    <member name="T:System.Action`12">
      <summary>Incapsula un metodo che presenta 12 parametri e non restituisce alcun valore.</summary>
      <param name="arg1">Primo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg2">Secondo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg3">Terzo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg4">Quarto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg5">Quinto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg6">Sesto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg7">Settimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg8">Ottavo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg9">Nono parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg10">Decimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg11">Undicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg12">Dodicesimo parametro del metodo incapsulato da questo delegato.</param>
      <typeparam name="T1">Tipo del primo parametro del metodo incapsulato da questo delegato.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Tipo del secondo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T3">Tipo del terzo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T4">Tipo del quarto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T5">Tipo del quinto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T6">Tipo del sesto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T7">Tipo del settimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T8">Tipo dell'ottavo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T9">Tipo del nono parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T10">Tipo del decimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T11">Tipo dell'undicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T12">Tipo del dodicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
    </member>
    <member name="T:System.Action`13">
      <summary>Incapsula un metodo che presenta 13 parametri e non restituisce alcun valore.</summary>
      <param name="arg1">Primo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg2">Secondo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg3">Terzo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg4">Quarto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg5">Quinto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg6">Sesto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg7">Settimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg8">Ottavo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg9">Nono parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg10">Decimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg11">Undicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg12">Dodicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg13">Tredicesimo parametro del metodo incapsulato da questo delegato.</param>
      <typeparam name="T1">Tipo del primo parametro del metodo incapsulato da questo delegato.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Tipo del secondo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T3">Tipo del terzo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T4">Tipo del quarto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T5">Tipo del quinto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T6">Tipo del sesto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T7">Tipo del settimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T8">Tipo dell'ottavo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T9">Tipo del nono parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T10">Tipo del decimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T11">Tipo dell'undicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T12">Tipo del dodicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T13">Tipo del tredicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
    </member>
    <member name="T:System.Action`14">
      <summary>Incapsula un metodo che presenta 14 parametri e non restituisce alcun valore.</summary>
      <param name="arg1">Primo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg2">Secondo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg3">Terzo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg4">Quarto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg5">Quinto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg6">Sesto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg7">Settimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg8">Ottavo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg9">Nono parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg10">Decimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg11">Undicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg12">Dodicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg13">Tredicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg14">Quattordicesimo parametro del metodo incapsulato da questo delegato.</param>
      <typeparam name="T1">Tipo del primo parametro del metodo incapsulato da questo delegato.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Tipo del secondo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T3">Tipo del terzo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T4">Tipo del quarto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T5">Tipo del quinto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T6">Tipo del sesto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T7">Tipo del settimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T8">Tipo dell'ottavo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T9">Tipo del nono parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T10">Tipo del decimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T11">Tipo dell'undicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T12">Tipo del dodicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T13">Tipo del tredicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T14">Tipo del quattordicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
    </member>
    <member name="T:System.Action`15">
      <summary>Incapsula un metodo che presenta 15 parametri e non restituisce alcun valore.</summary>
      <param name="arg1">Primo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg2">Secondo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg3">Terzo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg4">Quarto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg5">Quinto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg6">Sesto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg7">Settimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg8">Ottavo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg9">Nono parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg10">Decimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg11">Undicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg12">Dodicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg13">Tredicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg14">Quattordicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg15">Quindicesimo parametro del metodo incapsulato da questo delegato.</param>
      <typeparam name="T1">Tipo del primo parametro del metodo incapsulato da questo delegato.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Tipo del secondo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T3">Tipo del terzo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T4">Tipo del quarto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T5">Tipo del quinto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T6">Tipo del sesto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T7">Tipo del settimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T8">Tipo dell'ottavo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T9">Tipo del nono parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T10">Tipo del decimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T11">Tipo dell'undicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T12">Tipo del dodicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T13">Tipo del tredicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T14">Tipo del quattordicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T15">Tipo del quindicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
    </member>
    <member name="T:System.Action`16">
      <summary>Incapsula un metodo che presenta 16 parametri e non restituisce alcun valore.</summary>
      <param name="arg1">Primo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg2">Secondo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg3">Terzo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg4">Quarto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg5">Quinto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg6">Sesto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg7">Settimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg8">Ottavo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg9">Nono parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg10">Decimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg11">Undicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg12">Dodicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg13">Tredicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg14">Quattordicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg15">Quindicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg16">Sedicesimo parametro del metodo incapsulato da questo delegato.</param>
      <typeparam name="T1">Tipo del primo parametro del metodo incapsulato da questo delegato.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Tipo del secondo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T3">Tipo del terzo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T4">Tipo del quarto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T5">Tipo del quinto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T6">Tipo del sesto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T7">Tipo del settimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T8">Tipo dell'ottavo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T9">Tipo del nono parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T10">Tipo del decimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T11">Tipo dell'undicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T12">Tipo del dodicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T13">Tipo del tredicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T14">Tipo del quattordicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T15">Tipo del quindicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T16">Tipo del sedicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
    </member>
    <member name="T:System.Action`9">
      <summary>Incapsula un metodo che presenta nove parametri e non restituisce alcun valore.</summary>
      <param name="arg1">Primo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg2">Secondo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg3">Terzo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg4">Quarto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg5">Quinto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg6">Sesto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg7">Settimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg8">Ottavo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg9">Nono parametro del metodo incapsulato da questo delegato.</param>
      <typeparam name="T1">Tipo del primo parametro del metodo incapsulato da questo delegato.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Tipo del secondo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T3">Tipo del terzo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T4">Tipo del quarto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T5">Tipo del quinto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T6">Tipo del sesto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T7">Tipo del settimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T8">Tipo dell'ottavo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T9">Tipo del nono parametro del metodo incapsulato da questo delegato.</typeparam>
    </member>
    <member name="T:System.Func`10">
      <summary>Incapsula un metodo che dispone di nove parametri e restituisce un valore del tipo specificato dal parametro <paramref name="TResult" />.</summary>
      <returns>Valore restituito del metodo incapsulato da questo delegato.</returns>
      <param name="arg1">Primo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg2">Secondo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg3">Terzo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg4">Quarto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg5">Quinto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg6">Sesto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg7">Settimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg8">Ottavo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg9">Nono parametro del metodo incapsulato da questo delegato.</param>
      <typeparam name="T1">Tipo del primo parametro del metodo incapsulato da questo delegato.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Tipo del secondo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T3">Tipo del terzo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T4">Tipo del quarto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T5">Tipo del quinto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T6">Tipo del sesto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T7">Tipo del settimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T8">Tipo dell'ottavo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T9">Tipo del nono parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="TResult">Tipo del valore restituito del metodo incapsulato da questo delegato.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`11">
      <summary>Incapsula un metodo che presenta 10 parametri e restituisce un valore del tipo specificato dal parametro <paramref name="TResult" />.</summary>
      <returns>Valore restituito del metodo incapsulato da questo delegato.</returns>
      <param name="arg1">Primo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg2">Secondo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg3">Terzo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg4">Quarto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg5">Quinto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg6">Sesto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg7">Settimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg8">Ottavo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg9">Nono parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg10">Decimo parametro del metodo incapsulato da questo delegato.</param>
      <typeparam name="T1">Tipo del primo parametro del metodo incapsulato da questo delegato.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Tipo del secondo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T3">Tipo del terzo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T4">Tipo del quarto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T5">Tipo del quinto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T6">Tipo del sesto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T7">Tipo del settimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T8">Tipo dell'ottavo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T9">Tipo del nono parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T10">Tipo del decimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="TResult">Tipo del valore restituito del metodo incapsulato da questo delegato.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`12">
      <summary>Incapsula un metodo che presenta 11 parametri e restituisce un valore del tipo specificato dal parametro <paramref name="TResult" />.</summary>
      <returns>Valore restituito del metodo incapsulato da questo delegato.</returns>
      <param name="arg1">Primo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg2">Secondo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg3">Terzo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg4">Quarto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg5">Quinto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg6">Sesto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg7">Settimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg8">Ottavo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg9">Nono parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg10">Decimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg11">Undicesimo parametro del metodo incapsulato da questo delegato.</param>
      <typeparam name="T1">Tipo del primo parametro del metodo incapsulato da questo delegato.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Tipo del secondo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T3">Tipo del terzo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T4">Tipo del quarto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T5">Tipo del quinto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T6">Tipo del sesto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T7">Tipo del settimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T8">Tipo dell'ottavo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T9">Tipo del nono parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T10">Tipo del decimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T11">Tipo dell'undicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="TResult">Tipo del valore restituito del metodo incapsulato da questo delegato.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`13">
      <summary>Incapsula un metodo che presenta 12 parametri e restituisce un valore del tipo specificato dal parametro <paramref name="TResult" />.</summary>
      <returns>Valore restituito del metodo incapsulato da questo delegato.</returns>
      <param name="arg1">Primo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg2">Secondo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg3">Terzo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg4">Quarto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg5">Quinto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg6">Sesto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg7">Settimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg8">Ottavo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg9">Nono parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg10">Decimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg11">Undicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg12">Dodicesimo parametro del metodo incapsulato da questo delegato.</param>
      <typeparam name="T1">Tipo del primo parametro del metodo incapsulato da questo delegato.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Tipo del secondo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T3">Tipo del terzo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T4">Tipo del quarto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T5">Tipo del quinto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T6">Tipo del sesto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T7">Tipo del settimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T8">Tipo dell'ottavo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T9">Tipo del nono parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T10">Tipo del decimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T11">Tipo dell'undicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T12">Tipo del dodicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="TResult">Tipo del valore restituito del metodo incapsulato da questo delegato.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`14">
      <summary>Incapsula un metodo che presenta 13 parametri e restituisce un valore del tipo specificato dal parametro <paramref name="TResult" />.</summary>
      <returns>Valore restituito del metodo incapsulato da questo delegato.</returns>
      <param name="arg1">Primo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg2">Secondo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg3">Terzo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg4">Quarto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg5">Quinto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg6">Sesto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg7">Settimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg8">Ottavo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg9">Nono parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg10">Decimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg11">Undicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg12">Dodicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg13">Tredicesimo parametro del metodo incapsulato da questo delegato.</param>
      <typeparam name="T1">Tipo del primo parametro del metodo incapsulato da questo delegato.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Tipo del secondo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T3">Tipo del terzo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T4">Tipo del quarto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T5">Tipo del quinto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T6">Tipo del sesto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T7">Tipo del settimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T8">Tipo dell'ottavo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T9">Tipo del nono parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T10">Tipo del decimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T11">Tipo dell'undicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T12">Tipo del dodicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T13">Tipo del tredicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="TResult">Tipo del valore restituito del metodo incapsulato da questo delegato.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`15">
      <summary>Incapsula un metodo che presenta 14 parametri e restituisce un valore del tipo specificato dal parametro <paramref name="TResult" />.</summary>
      <returns>Valore restituito del metodo incapsulato da questo delegato.</returns>
      <param name="arg1">Primo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg2">Secondo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg3">Terzo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg4">Quarto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg5">Quinto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg6">Sesto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg7">Settimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg8">Ottavo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg9">Nono parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg10">Decimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg11">Undicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg12">Dodicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg13">Tredicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg14">Quattordicesimo parametro del metodo incapsulato da questo delegato.</param>
      <typeparam name="T1">Tipo del primo parametro del metodo incapsulato da questo delegato.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Tipo del secondo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T3">Tipo del terzo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T4">Tipo del quarto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T5">Tipo del quinto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T6">Tipo del sesto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T7">Tipo del settimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T8">Tipo dell'ottavo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T9">Tipo del nono parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T10">Tipo del decimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T11">Tipo dell'undicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T12">Tipo del dodicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T13">Tipo del tredicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T14">Tipo del quattordicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="TResult">Tipo del valore restituito del metodo incapsulato da questo delegato.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`16">
      <summary>Incapsula un metodo che presenta 15 parametri e restituisce un valore del tipo specificato dal parametro <paramref name="TResult" />.</summary>
      <returns>Valore restituito del metodo incapsulato da questo delegato.</returns>
      <param name="arg1">Primo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg2">Secondo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg3">Terzo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg4">Quarto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg5">Quinto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg6">Sesto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg7">Settimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg8">Ottavo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg9">Nono parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg10">Decimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg11">Undicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg12">Dodicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg13">Tredicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg14">Quattordicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg15">Quindicesimo parametro del metodo incapsulato da questo delegato.</param>
      <typeparam name="T1">Tipo del primo parametro del metodo incapsulato da questo delegato.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Tipo del secondo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T3">Tipo del terzo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T4">Tipo del quarto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T5">Tipo del quinto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T6">Tipo del sesto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T7">Tipo del settimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T8">Tipo dell'ottavo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T9">Tipo del nono parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T10">Tipo del decimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T11">Tipo dell'undicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T12">Tipo del dodicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T13">Tipo del tredicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T14">Tipo del quattordicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T15">Tipo del quindicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="TResult">Tipo del valore restituito del metodo incapsulato da questo delegato.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`17">
      <summary>Incapsula un metodo che presenta 16 parametri e restituisce un valore del tipo specificato dal parametro <paramref name="TResult" />.</summary>
      <returns>Valore restituito del metodo incapsulato da questo delegato.</returns>
      <param name="arg1">Primo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg2">Secondo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg3">Terzo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg4">Quarto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg5">Quinto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg6">Sesto parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg7">Settimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg8">Ottavo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg9">Nono parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg10">Decimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg11">Undicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg12">Dodicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg13">Tredicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg14">Quattordicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg15">Quindicesimo parametro del metodo incapsulato da questo delegato.</param>
      <param name="arg16">Sedicesimo parametro del metodo incapsulato da questo delegato.</param>
      <typeparam name="T1">Tipo del primo parametro del metodo incapsulato da questo delegato.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Tipo del secondo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T3">Tipo del terzo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T4">Tipo del quarto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T5">Tipo del quinto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T6">Tipo del sesto parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T7">Tipo del settimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T8">Tipo dell'ottavo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T9">Tipo del nono parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T10">Tipo del decimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T11">Tipo dell'undicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T12">Tipo del dodicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T13">Tipo del tredicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T14">Tipo del quattordicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T15">Tipo del quindicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="T16">Tipo del sedicesimo parametro del metodo incapsulato da questo delegato.</typeparam>
      <typeparam name="TResult">Tipo del valore restituito del metodo incapsulato da questo delegato.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1">
      <summary>Rappresenta un insieme di valori.</summary>
      <typeparam name="T">Tipo di elementi contenuti nel set di hash.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor">
      <summary>Inizializza una nuova istanza vuota della classe <see cref="T:System.Collections.Generic.HashSet`1" /> e utilizza l'operatore di confronto per l'uguaglianza per il tipo di insieme.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Collections.Generic.HashSet`1" /> che utilizza l'operatore di confronto per l'uguaglianza per il tipo di insieme, contiene gli elementi copiati dall'insieme specificato e presenta una capacità sufficiente a contenere il numero di elementi copiati.</summary>
      <param name="collection">Insieme i cui elementi vengono copiati nel nuovo insieme.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> è null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Collections.Generic.HashSet`1" /> che utilizza l'operatore di confronto per l'uguaglianza specificato per il tipo di insieme, contiene gli elementi copiati dall'insieme specificato e ha una capacità sufficiente a contenere il numero di elementi copiati.</summary>
      <param name="collection">Insieme i cui elementi vengono copiati nel nuovo insieme.</param>
      <param name="comparer">Implementazione dell'oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> da utilizzare per confrontare i valori nell'insieme oppure null per utilizzare l'implementazione di <see cref="T:System.Collections.Generic.EqualityComparer`1" /> predefinita per il tipo di insieme.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> è null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Inizializza una nuova istanza vuota della classe <see cref="T:System.Collections.Generic.HashSet`1" /> e utilizza l'operatore di confronto per l'uguaglianza specificato per il tipo di insieme.</summary>
      <param name="comparer">Implementazione dell'oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> da utilizzare per confrontare i valori nell'insieme oppure null per utilizzare l'implementazione di <see cref="T:System.Collections.Generic.EqualityComparer`1" /> predefinita per il tipo di insieme.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Add(`0)">
      <summary>Aggiunge l'elemento specificato a un insieme.</summary>
      <returns>true se l'elemento viene aggiunto all'oggetto <see cref="T:System.Collections.Generic.HashSet`1" />; false se l'elemento è già presente.</returns>
      <param name="item">Elemento da aggiungere all'insieme.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Clear">
      <summary>Rimuove tutti gli elementi da un oggetto <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Comparer">
      <summary>Ottiene l'oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, che viene utilizzato per determinare l'uguaglianza dei valori nell'insieme.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> utilizzato per determinare l'uguaglianza dei valori nell'insieme.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Contains(`0)">
      <summary>Determina se un oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> contiene l'elemento specificato.</summary>
      <returns>true se l'oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> contiene l'elemento specificato; in caso contrario, false.</returns>
      <param name="item">Elemento da individuare nell'oggetto <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[])">
      <summary>Copia gli elementi di un oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> in una matrice.</summary>
      <param name="array">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dall'oggetto <see cref="T:System.Collections.Generic.HashSet`1" />. L'indice della matrice deve essere in base zero.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> è null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)">
      <summary>Copia gli elementi di un oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> in una matrice, a partire da un indice di matrice specificato.</summary>
      <param name="array">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dall'oggetto <see cref="T:System.Collections.Generic.HashSet`1" />. L'indice della matrice deve essere in base zero.</param>
      <param name="arrayIndex">Indice in base zero in <paramref name="array" /> in corrispondenza del quale ha inizio la copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> è null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> è minore di 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> è maggiore della lunghezza del parametro <paramref name="array" /> di destinazione.-oppure-<paramref name="count" /> è maggiore della dimensione del parametro <paramref name="array" /> di destinazione.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>Copia il numero specificato di elementi di un oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> in una matrice, a partire da un indice di matrice specificato.</summary>
      <param name="array">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dall'oggetto <see cref="T:System.Collections.Generic.HashSet`1" />. L'indice della matrice deve essere in base zero.</param>
      <param name="arrayIndex">Indice in base zero in <paramref name="array" /> in corrispondenza del quale ha inizio la copia.</param>
      <param name="count">Numero di elementi da copiare in <paramref name="array" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> è null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> è minore di 0.-oppure-<paramref name="count" /> è minore di 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> è maggiore della lunghezza del parametro <paramref name="array" /> di destinazione.-oppure-<paramref name="count" /> è maggiore dello spazio disponibile da <paramref name="index" /> alla fine del parametro <paramref name="array" /> di destinazione.</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Count">
      <summary>Ottiene il numero di elementi contenuti in un insieme.</summary>
      <returns>Numero di elementi contenuti nell'insieme.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Rimuove tutti gli elementi dell'insieme specificato dall'oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> corrente.</summary>
      <param name="other">Insieme di elementi da rimuovere dall'oggetto <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> è null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere un oggetto <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> per l'oggetto <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica l'oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> corrente per contenere solo elementi presenti in tale oggetto e nell'insieme specificato.</summary>
      <param name="other">Insieme da confrontare con l'oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> corrente.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> è null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se un oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> è un sottoinsieme corretto dell'insieme specificato.</summary>
      <returns>true se l'oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> è un sottoinsieme corretto di <paramref name="other" />; in caso contrario, false.</returns>
      <param name="other">Insieme da confrontare con l'oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> corrente.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> è null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se un oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> è un superset corretto dell'insieme specificato.</summary>
      <returns>true se l'oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> è un superset corretto di <paramref name="other" />; in caso contrario, false.</returns>
      <param name="other">Insieme da confrontare con l'oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> corrente. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> è null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se un oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> è un superset dell'insieme specificato.</summary>
      <returns>true se l'oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> è un sottoinsieme di <paramref name="other" />; in caso contrario, false.</returns>
      <param name="other">Insieme da confrontare con l'oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> corrente.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> è null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se un oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> è un superset dell'insieme specificato.</summary>
      <returns>true se l'oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> è un superset di <paramref name="other" />; in caso contrario, false.</returns>
      <param name="other">Insieme da confrontare con l'oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> corrente.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> è null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se l'oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> corrente e un insieme specificato condividono elementi comuni.</summary>
      <returns>true se l'oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> e il parametro <paramref name="other" /> condividono almeno un elemento comune; in caso contrario, false.</returns>
      <param name="other">Insieme da confrontare con l'oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> corrente.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> è null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Remove(`0)">
      <summary>Rimuove l'elemento specificato da un oggetto <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <returns>true se l'elemento viene trovato e rimosso; in caso contrario, false.  Questo metodo restituisce false se <paramref name="item" /> non viene trovato nell'oggetto <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
      <param name="item">Elemento da rimuovere.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>Rimuove tutti gli elementi che corrispondono alle condizioni definite dal predicato specificato da un insieme<see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <returns>Numero di elementi rimossi dall'insieme <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
      <param name="match">Delegato <see cref="T:System.Predicate`1" /> che definisce le condizioni degli elementi da rimuovere.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> è null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se un oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> e l'insieme specificato contengono gli stessi elementi.</summary>
      <returns>true se l'oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> è uguale a <paramref name="other" />; in caso contrario, false.</returns>
      <param name="other">Insieme da confrontare con l'oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> corrente.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> è null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica l'oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> corrente in modo che contenga solo elementi presenti in tale oggetto o nell'insieme specificato, ma non entrambi.</summary>
      <param name="other">Insieme da confrontare con l'oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> corrente.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> è null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Aggiunge un elemento a un oggetto <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">Oggetto da aggiungere all'oggetto <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">L'oggetto <see cref="T:System.Collections.Generic.ICollection`1" /> è in sola lettura.</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Ottiene un valore che indica se un insieme è di sola lettura.</summary>
      <returns>true se l'insieme è di sola lettura; in caso contrario false.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere un insieme.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerator`1" /> che può essere utilizzato per scorrere l'insieme.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere un insieme.</summary>
      <returns>Oggetto <see cref="T:System.Collections.IEnumerator" /> che può essere utilizzato per scorrere l'insieme.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TrimExcess">
      <summary>Imposta la capacità di un oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> sul numero effettivo di elementi che contiene, arrotondato per eccesso a un valore vicino specifico dell’implementazione.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica l'oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> corrente per contenere tutti gli elementi presenti in tale oggetto e nell'insieme specificato.</summary>
      <param name="other">Insieme da confrontare con l'oggetto <see cref="T:System.Collections.Generic.HashSet`1" /> corrente.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> è null.</exception>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1.Enumerator">
      <summary>Enumera gli elementi di un oggetto <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.Current">
      <summary>Ottiene l'elemento in corrispondenza della posizione corrente dell'enumeratore.</summary>
      <returns>Elemento dell'insieme <see cref="T:System.Collections.Generic.HashSet`1" /> in corrispondenza della posizione corrente dell'enumeratore.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.Dispose">
      <summary>Rilascia tutte le risorse utilizzate da un oggetto <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.MoveNext">
      <summary>Sposta l'enumeratore all'elemento successivo dell'insieme <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <returns>true se l'enumeratore ha completato il passaggio all'elemento successivo; false se l'enumeratore ha raggiunto la fine dell'insieme.</returns>
      <exception cref="T:System.InvalidOperationException">L'insieme è stato modificato dopo la creazione dell'enumeratore. </exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Ottiene l'elemento in corrispondenza della posizione corrente dell'enumeratore.</summary>
      <returns>Elemento dell'insieme nella posizione corrente dell'enumeratore, restituito come un oggetto <see cref="T:System.Object" />.</returns>
      <exception cref="T:System.InvalidOperationException">L'enumeratore è posizionato prima del primo elemento o dopo l'ultimo elemento dell'insieme. </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Imposta l'enumeratore sulla propria posizione iniziale, ovvero prima del primo elemento nell'insieme.</summary>
      <exception cref="T:System.InvalidOperationException">L'insieme è stato modificato dopo la creazione dell'enumeratore. </exception>
    </member>
    <member name="T:System.Dynamic.BinaryOperationBinder">
      <summary>Rappresenta l'operazione binaria dinamica nel sito di chiamata, fornendo la semantica di associazione e i dettagli sull'operazione.</summary>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Dynamic.BinaryOperationBinder" />.</summary>
      <param name="operation">Tipo di operazione binaria.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Esegue l'associazione dell'operazione binaria dinamica.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione dinamica.</param>
      <param name="args">Matrice di argomenti dell'operazione dinamica.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Esegue l'associazione dell'operazione binaria dinamica se l'oggetto dinamico di destinazione non può eseguire l'associazione.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione binaria dinamica.</param>
      <param name="arg">Operando destro dell'operazione binaria dinamica.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Se sottoposto a override nella classe derivata, esegue l'associazione dell'operazione binaria dinamica se l'oggetto dinamico di destinazione non può eseguire l'associazione.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione binaria dinamica.</param>
      <param name="arg">Operando destro dell'operazione binaria dinamica.</param>
      <param name="errorSuggestion">Risultato dell'associazione se l'associazione non riesce, oppure null.</param>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.Operation">
      <summary>Tipo di operazione binaria.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.ExpressionType" /> che rappresenta il tipo di operazione binaria.</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.ReturnType">
      <summary>Tipo di risultato dell'operazione.</summary>
      <returns>Tipo di risultato dell'operazione.</returns>
    </member>
    <member name="T:System.Dynamic.BindingRestrictions">
      <summary>Rappresenta un set di restrizioni relative all'associazione per l'oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che determinano la validità dell'associazione dinamica.</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})">
      <summary>Combina le restrizioni relative all'associazione dall'elenco di istanze di <see cref="T:System.Dynamic.DynamicMetaObject" /> in un unico set di restrizioni.</summary>
      <returns>Nuovo set di restrizioni relative all'associazione.</returns>
      <param name="contributingObjects">Elenco di istanze di <see cref="T:System.Dynamic.DynamicMetaObject" /> da cui combinare le restrizioni.</param>
    </member>
    <member name="F:System.Dynamic.BindingRestrictions.Empty">
      <summary>Rappresenta un set vuoto di restrizioni relative all'associazione.Questo campo è di sola lettura.</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)">
      <summary>Crea la restrizione relativa all'associazione che controlla l'eventuale presenza di proprietà non modificabili arbitrarie nell'espressione.</summary>
      <returns>Nuove restrizioni relative all'associazione.</returns>
      <param name="expression">Espressione che rappresenta le restrizioni.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)">
      <summary>Crea la restrizione relativa all'associazione che controlla l'identità dell'istanza dell'oggetto nell'espressione.</summary>
      <returns>Nuove restrizioni relative all'associazione.</returns>
      <param name="expression">Espressione da testare.</param>
      <param name="instance">Istanza esatta dell'oggetto da testare.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)">
      <summary>Crea la restrizione relativa all'associazione che controlla l'identità del tipo di runtime nell'espressione.</summary>
      <returns>Nuove restrizioni relative all'associazione.</returns>
      <param name="expression">Espressione da testare.</param>
      <param name="type">Tipo esatto da testare.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)">
      <summary>Unisce il set di restrizioni relative all'associazione alle restrizioni correnti.</summary>
      <returns>Nuovo set di restrizioni relative all'associazione.</returns>
      <param name="restrictions">Set di restrizioni a cui unire le restrizioni relative all'associazione correnti.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.ToExpression">
      <summary>Crea l'oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta le restrizioni relative all'associazione.</summary>
      <returns>Struttura ad albero dell'espressione che rappresenta le restrizioni.</returns>
    </member>
    <member name="T:System.Dynamic.CallInfo">
      <summary>Descrive gli argomenti nel processo di associazione dinamico.</summary>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Crea un nuovo CallInfo che rappresenta gli argomenti nel processo di associazione dinamico.</summary>
      <param name="argCount">Numero di argomenti.</param>
      <param name="argNames">Nomi degli argomenti.</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])">
      <summary>Crea un nuovo oggetto PositionalArgumentInfo.</summary>
      <param name="argCount">Numero di argomenti.</param>
      <param name="argNames">Nomi degli argomenti.</param>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentCount">
      <summary>Numero di argomenti.</summary>
      <returns>Numero di argomenti.</returns>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentNames">
      <summary>Nomi degli argomenti.</summary>
      <returns>Insieme di sola lettura di nomi degli argomenti.</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.Equals(System.Object)">
      <summary>Determina se l'istanza di CallInfo specificata è considerata uguale a quella corrente.</summary>
      <returns>Restituisce true se l'istanza specificata è uguale a quella corrente; in caso contrario, false.</returns>
      <param name="obj">Istanza di <see cref="T:System.Dynamic.CallInfo" /> da confrontare con l'istanza corrente.</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.GetHashCode">
      <summary>Funge da funzione hash per l'oggetto <see cref="T:System.Dynamic.CallInfo" /> corrente.</summary>
      <returns>Codice hash per la classe <see cref="T:System.Dynamic.CallInfo" /> corrente.</returns>
    </member>
    <member name="T:System.Dynamic.ConvertBinder">
      <summary>Rappresenta l'operazione di conversione dinamica nel sito di chiamata, fornendo la semantica di associazione e i dettagli sull'operazione.</summary>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.#ctor(System.Type,System.Boolean)">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Dynamic.ConvertBinder" />.</summary>
      <param name="type">Tipo in cui eseguire la conversione.</param>
      <param name="explicit">Restituisce true se la conversione deve considerare le conversioni esplicite; in caso contrario, false.</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Esegue l'associazione dell'operazione di conversione dinamica.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione di conversione dinamica.</param>
      <param name="args">Matrice di argomenti dell'operazione di conversione dinamica.</param>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Explicit">
      <summary>Ottiene il valore che indica se la conversione deve considerare le conversioni esplicite.</summary>
      <returns>True se è presente una conversione esplicita; in caso contrario false.</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject)">
      <summary>Esegue l'associazione dell'operazione di conversione dinamica se l'oggetto dinamico di destinazione non può eseguire l'associazione.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione di conversione dinamica.</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Se sottoposto a override nella classe derivata, esegue l'associazione dell'operazione di conversione dinamica se l'oggetto dinamico di destinazione non può eseguire l'associazione.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione di conversione dinamica.</param>
      <param name="errorSuggestion">Risultato dell'associazione da utilizzare se l'associazione non riesce, oppure null.</param>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.ReturnType">
      <summary>Tipo di risultato dell'operazione.</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di risultato dell'operazione.</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Type">
      <summary>Tipo in cui eseguire la conversione.</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo in cui eseguire la conversione.</returns>
    </member>
    <member name="T:System.Dynamic.CreateInstanceBinder">
      <summary>Rappresenta l'operazione di creazione dinamica nel sito di chiamata, fornendo la semantica di associazione e i dettagli sull'operazione.</summary>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Dynamic.CreateInstanceBinder" />.</summary>
      <param name="callInfo">Firma degli argomenti nel sito di chiamata.</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Esegue l'associazione dell'operazione di creazione dinamica.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione di creazione dinamica.</param>
      <param name="args">Matrice di argomenti dell'operazione di creazione dinamica.</param>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.CallInfo">
      <summary>Ottiene la firma degli argomenti nel sito di chiamata.</summary>
      <returns>Firma degli argomenti nel sito di chiamata.</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Esegue l'associazione dell'operazione di creazione dinamica se l'oggetto dinamico di destinazione non può eseguire l'associazione.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione di creazione dinamica.</param>
      <param name="args">Argomenti dell'operazione di creazione dinamica.</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Se sottoposto a override nella classe derivata, esegue l'associazione dell'operazione di creazione dinamica se l'oggetto dinamico di destinazione non può eseguire l'associazione.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione di creazione dinamica.</param>
      <param name="args">Argomenti dell'operazione di creazione dinamica.</param>
      <param name="errorSuggestion">Risultato dell'associazione da utilizzare se l'associazione non riesce, oppure null.</param>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.ReturnType">
      <summary>Tipo di risultato dell'operazione.</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di risultato dell'operazione.</returns>
    </member>
    <member name="T:System.Dynamic.DeleteIndexBinder">
      <summary>Rappresenta l'operazione dinamica di eliminazione dell'indice nel sito di chiamata, fornendo la semantica di associazione e i dettagli sull'operazione.</summary>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Dynamic.DeleteIndexBinder" />.</summary>
      <param name="callInfo">Firma degli argomenti nel sito di chiamata.</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Esegue l'associazione dell'operazione dinamica di eliminazione dell'indice.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione dinamica di eliminazione dell'indice.</param>
      <param name="args">Matrice di argomenti dell'operazione dinamica di eliminazione dell'indice.</param>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.CallInfo">
      <summary>Ottiene la firma degli argomenti nel sito di chiamata.</summary>
      <returns>Firma degli argomenti nel sito di chiamata.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Esegue l'associazione dell'operazione dinamica di eliminazione dell'indice se l'oggetto dinamico di destinazione non può eseguire l'associazione.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione dinamica di eliminazione dell'indice.</param>
      <param name="indexes">Argomenti dell'operazione dinamica di eliminazione dell'indice.</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Se sottoposto a override nella classe derivata, esegue l'associazione dell'operazione dinamica di eliminazione dell'indice se l'oggetto dinamico di destinazione non può eseguire l'associazione.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione dinamica di eliminazione dell'indice.</param>
      <param name="indexes">Argomenti dell'operazione dinamica di eliminazione dell'indice.</param>
      <param name="errorSuggestion">Risultato dell'associazione da utilizzare se l'associazione non riesce, oppure null.</param>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.ReturnType">
      <summary>Tipo di risultato dell'operazione.</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di risultato dell'operazione.</returns>
    </member>
    <member name="T:System.Dynamic.DeleteMemberBinder">
      <summary>Rappresenta l'operazione dinamica di eliminazione del membro nel sito di chiamata, fornendo la semantica di associazione e i dettagli sull'operazione.</summary>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Dynamic.DeleteIndexBinder" />.</summary>
      <param name="name">Nome del membro da eliminare.</param>
      <param name="ignoreCase">Restituisce true se nella corrispondenza del nome deve essere ignorata la distinzione tra maiuscole e minuscole; in caso contrario, false.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Esegue l'associazione dell'operazione dinamica di eliminazione del membro.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione dinamica di eliminazione del membro.</param>
      <param name="args">Matrice di argomenti dell'operazione dinamica di eliminazione del membro.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject)">
      <summary>Esegue l'associazione dell'operazione dinamica di eliminazione del membro se l'oggetto dinamico di destinazione non può eseguire l'associazione.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione dinamica di eliminazione del membro.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Se sottoposto a override nella classe derivata, esegue l'associazione dell'operazione dinamica di eliminazione del membro se l'oggetto dinamico di destinazione non può eseguire l'associazione.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione dinamica di eliminazione del membro.</param>
      <param name="errorSuggestion">Risultato dell'associazione da utilizzare se l'associazione non riesce, oppure null.</param>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.IgnoreCase">
      <summary>Ottiene il valore che indica se nel confronto tra stringhe deve essere ignorata la distinzione tra maiuscole e minuscole per il nome del membro.</summary>
      <returns>Restituisce true se nel confronto tra stringhe deve essere ignorata la distinzione tra maiuscole e minuscole; in caso contrario, false.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.Name">
      <summary>Ottiene il nome del membro da eliminare.</summary>
      <returns>Nome del membro da eliminare.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.ReturnType">
      <summary>Tipo di risultato dell'operazione.</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di risultato dell'operazione.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObject">
      <summary>Rappresenta l'associazione dinamica e un'associazione logica di un oggetto che partecipa all'associazione dinamica.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Dynamic.DynamicMetaObject" />.</summary>
      <param name="expression">Espressione che rappresenta <see cref="T:System.Dynamic.DynamicMetaObject" /> durante il processo di associazione dinamica.</param>
      <param name="restrictions">Set di restrizioni relative all'associazione che determinano la validità dell'associazione.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Dynamic.DynamicMetaObject" />.</summary>
      <param name="expression">Espressione che rappresenta <see cref="T:System.Dynamic.DynamicMetaObject" /> durante il processo di associazione dinamica.</param>
      <param name="restrictions">Set di restrizioni relative all'associazione che determinano la validità dell'associazione.</param>
      <param name="value">Valore di runtime rappresentato da <see cref="T:System.Dynamic.DynamicMetaObject" />.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
      <summary>Esegue l'associazione dell'operazione binaria dinamica.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="binder">Istanza di <see cref="T:System.Dynamic.BinaryOperationBinder" /> che rappresenta i dettagli dell'operazione dinamica.</param>
      <param name="arg">Istanza di <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il lato destro dell'operazione binaria.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
      <summary>Esegue l'associazione dell'operazione di conversione dinamica.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="binder">Istanza di <see cref="T:System.Dynamic.ConvertBinder" /> che rappresenta i dettagli dell'operazione dinamica.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Esegue l'associazione dell'operazione dinamica di creazione dell'istanza.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="binder">Istanza di <see cref="T:System.Dynamic.CreateInstanceBinder" /> che rappresenta i dettagli dell'operazione dinamica.</param>
      <param name="args">Matrice di istanze o argomenti di <see cref="T:System.Dynamic.DynamicMetaObject" /> per l'operazione di creazione dell'istanza.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Esegue l'associazione dell'operazione dinamica di eliminazione dell'indice.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="binder">Istanza di <see cref="T:System.Dynamic.DeleteIndexBinder" /> che rappresenta i dettagli dell'operazione dinamica.</param>
      <param name="indexes">Una matrice di istanze o indici di <see cref="T:System.Dynamic.DynamicMetaObject" /> per l'operazione di eliminazione dell'indice.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>Esegue l'associazione dell'operazione dinamica di eliminazione del membro.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="binder">Istanza di <see cref="T:System.Dynamic.DeleteMemberBinder" /> che rappresenta i dettagli dell'operazione dinamica.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Esegue l'associazione dell'operazione get dinamica sull'indice.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="binder">Istanza di <see cref="T:System.Dynamic.GetIndexBinder" /> che rappresenta i dettagli dell'operazione dinamica.</param>
      <param name="indexes">Una matrice di istanze o indici di <see cref="T:System.Dynamic.DynamicMetaObject" /> per l'operazione di eliminazione dell'indice.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
      <summary>Esegue l'associazione dell'operazione get dinamica sul membro.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="binder">Istanza di <see cref="T:System.Dynamic.GetMemberBinder" /> che rappresenta i dettagli dell'operazione dinamica.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Esegue l'associazione dell'operazione invoke dinamica.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="binder">Istanza di <see cref="T:System.Dynamic.InvokeBinder" /> che rappresenta i dettagli dell'operazione dinamica.</param>
      <param name="args">Matrice di istanze o argomenti di <see cref="T:System.Dynamic.DynamicMetaObject" /> per l'operazione invoke.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Esegue l'associazione dell'operazione invoke dinamica sul membro.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="binder">Istanza di <see cref="T:System.Dynamic.InvokeMemberBinder" /> che rappresenta i dettagli dell'operazione dinamica.</param>
      <param name="args">Matrice di istanze o argomenti di <see cref="T:System.Dynamic.DynamicMetaObject" /> per l'operazione invoke member.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Esegue l'associazione dell'operazione dinamica di impostazione dell'indice.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="binder">Istanza di <see cref="T:System.Dynamic.SetIndexBinder" /> che rappresenta i dettagli dell'operazione dinamica.</param>
      <param name="indexes">Una matrice di istanze o indici di <see cref="T:System.Dynamic.DynamicMetaObject" /> per l'operazione di impostazione dell'indice.</param>
      <param name="value">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il valore per l'operazione di impostazione dell'indice.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
      <summary>Esegue l'associazione dell'operazione dinamica di impostazione del membro.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="binder">Istanza di <see cref="T:System.Dynamic.SetMemberBinder" /> che rappresenta i dettagli dell'operazione dinamica.</param>
      <param name="value">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il valore per l'operazione di impostazione del membro.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
      <summary>Esegue l'associazione dell'operazione unaria dinamica.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="binder">Istanza di <see cref="T:System.Dynamic.UnaryOperationBinder" /> che rappresenta i dettagli dell'operazione dinamica.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)">
      <summary>Crea un metaoggetto per l'oggetto specificato.</summary>
      <returns>Se l'oggetto specificato implementa <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" /> e non è un oggetto remoto esterno all'AppDomain corrente, restituisce il metaoggetto specifico dell'oggetto restituito da <see cref="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)" />.In caso contrario, viene creato e restituito un nuovo metaoggetto semplice senza restrizioni.</returns>
      <param name="value">Oggetto per cui ottenere un metaoggetto.</param>
      <param name="expression">Espressione che rappresenta <see cref="T:System.Dynamic.DynamicMetaObject" /> durante il processo di associazione dinamica.</param>
    </member>
    <member name="F:System.Dynamic.DynamicMetaObject.EmptyMetaObjects">
      <summary>Rappresenta una matrice vuota di tipo <see cref="T:System.Dynamic.DynamicMetaObject" />.Questo campo è di sola lettura.</summary>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Expression">
      <summary>Espressione che rappresenta <see cref="T:System.Dynamic.DynamicMetaObject" /> durante il processo di associazione dinamica.</summary>
      <returns>Espressione che rappresenta <see cref="T:System.Dynamic.DynamicMetaObject" /> durante il processo di associazione dinamica.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.GetDynamicMemberNames">
      <summary>Restituisce l'enumerazione di tutti i nomi di membro dinamici.</summary>
      <returns>Elenco dei nomi di membro dinamici.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.HasValue">
      <summary>Ottiene un valore che indica se <see cref="T:System.Dynamic.DynamicMetaObject" /> include il valore di runtime.</summary>
      <returns>Restituisce true se <see cref="T:System.Dynamic.DynamicMetaObject" /> include il valore di runtime; in caso contrario, false.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.LimitType">
      <summary>Ottiene il tipo di limite di <see cref="T:System.Dynamic.DynamicMetaObject" />.</summary>
      <returns>
        <see cref="P:System.Dynamic.DynamicMetaObject.RuntimeType" /> se il valore di runtime è disponibile; in caso contrario, un tipo di <see cref="P:System.Dynamic.DynamicMetaObject.Expression" />.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Restrictions">
      <summary>Set di restrizioni relative all'associazione che determinano la validità dell'associazione.</summary>
      <returns>Set di restrizioni relative all'associazione.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.RuntimeType">
      <summary>Ottiene il tipo <see cref="T:System.Type" /> del valore di runtime oppure restituisce Null se a <see cref="T:System.Dynamic.DynamicMetaObject" /> non è associato alcun valore.</summary>
      <returns>Tipo <see cref="T:System.Type" /> del valore di runtime oppure Null.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Value">
      <summary>Valore di runtime rappresentato da <see cref="T:System.Dynamic.DynamicMetaObject" />.</summary>
      <returns>Valore di runtime rappresentato da <see cref="T:System.Dynamic.DynamicMetaObject" />.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObjectBinder">
      <summary>Gestore di associazione del sito di chiamata dinamico che fa parte del protocollo di associazione di <see cref="T:System.Dynamic.DynamicMetaObject" />.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Dynamic.DynamicMetaObjectBinder" />.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Se sottoposto a override nella classe derivata, esegue l'associazione dell'operazione dinamica.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione dinamica.</param>
      <param name="args">Matrice di argomenti dell'operazione dinamica.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>Esegue l'associazione di runtime dell'operazione dinamica su un set di argomenti.</summary>
      <returns>Espressione che esegue test sugli argomenti dell'operazione dinamica ed esegue l'operazione dinamica se i test sono validi.Se i test non riescono su occorrenze successive dell'operazione dinamica, Bind sarà chiamato nuovamente per produrre un nuovo <see cref="T:System.Linq.Expressions.Expression" /> per i nuovi tipi di argomento.</returns>
      <param name="args">Matrice di argomenti per l'operazione dinamica.</param>
      <param name="parameters">Matrice di istanze <see cref="T:System.Linq.Expressions.ParameterExpression" /> che rappresentano i parametri del sito di chiamata nel processo di associazione.</param>
      <param name="returnLabel">LabelTarget utilizzato per restituire il risultato dell'associazione dinamica.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Rinvia l'associazione dell'operazione a un momento successivo, al calcolo dei valori di runtime di tutti gli argomenti dell'operazione dinamica.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione dinamica.</param>
      <param name="args">Matrice di argomenti dell'operazione dinamica.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject[])">
      <summary>Rinvia l'associazione dell'operazione a un momento successivo, al calcolo dei valori di runtime di tutti gli argomenti dell'operazione dinamica.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="args">Matrice di argomenti dell'operazione dinamica.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.GetUpdateExpression(System.Type)">
      <summary>Ottiene un'espressione che provocherà l'aggiornamento dell'associazione.Indica che l'associazione dell'espressione non è più valida.Viene utilizzato in genere quando la "versione" di un oggetto dinamico è stata modificata.</summary>
      <returns>Espressione di aggiornamento.</returns>
      <param name="type">Proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> dell'espressione risultante. È consentito qualsiasi tipo.</param>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObjectBinder.ReturnType">
      <summary>Tipo di risultato dell'operazione.</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di risultato dell'operazione.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicObject">
      <summary>Fornisce una classe di base per specificare il comportamento dinamico in runtime.La classe deve essere ereditata e non è possibile crearne direttamente un'istanza.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.#ctor">
      <summary>Consente ai tipi derivati di creare una nuova istanza del tipo <see cref="T:System.Dynamic.DynamicObject" />.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
      <summary>Restituisce l'enumerazione di tutti i nomi di membro dinamici. </summary>
      <returns>Sequenza che contiene nomi dei membri dinamici.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>Fornisce un oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che invia ai metodi virtuali dinamici.L'oggetto può essere incapsulato all'interno di un altro oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> per fornire il comportamento personalizzato per singole azioni.Questo metodo supporta l'infrastruttura DLR (Dynamic Language Runtime) per gli implementatori del linguaggio e non è destinato all'utilizzo direttamente dal codice.</summary>
      <returns>Oggetto di tipo <see cref="T:System.Dynamic.DynamicMetaObject" />.</returns>
      <param name="parameter">Espressione che rappresenta l'oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> da inviare ai metodi virtuali dinamici.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
      <summary>Fornisce l'implementazione per le operazioni binarie.Le classi derivate dalla classe <see cref="T:System.Dynamic.DynamicObject" /> possono eseguire l'override di questo metodo per specificare il comportamento dinamico per operazioni quali l'aggiunta e la moltiplicazione.</summary>
      <returns>true se l'operazione dà esito positivo; in caso contrario, false.Se questo metodo restituisce false, il comportamento viene determinato dal gestore di associazione di runtime del linguaggio.Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</returns>
      <param name="binder">Fornisce informazioni sull'operazione binaria.Proprietà binder.Operation che restituisce un oggetto <see cref="T:System.Linq.Expressions.ExpressionType" />.Ad esempio, per l'istruzione sum = first + second, dove first e second sono derivate dalla classe DynamicObject, binder.Operation restituisce ExpressionType.Add.</param>
      <param name="arg">Operando destro per l'operazione binaria.Ad esempio, per l'istruzione sum = first + second, dove first e second sono derivate dalla classe DynamicObject, <paramref name="arg" /> è uguale a second.</param>
      <param name="result">Risultato dell'operazione binaria.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
      <summary>Fornisce l'implementazione per le operazioni di conversione dei tipi.Le classi derivate dalla classe <see cref="T:System.Dynamic.DynamicObject" /> possono eseguire l'override di questo metodo per specificare il comportamento dinamico per operazioni che eseguono la conversione di un oggetto da un tipo a un altro.</summary>
      <returns>true se l'operazione dà esito positivo; in caso contrario, false.Se questo metodo restituisce false, il comportamento viene determinato dal gestore di associazione di runtime del linguaggio.Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</returns>
      <param name="binder">Fornisce informazioni sull'operazione di conversione.La proprietà binder.Type fornisce il tipo in cui deve essere convertito l'oggetto.Ad esempio, per l'istruzione (String)sampleObject in C# (CType(sampleObject, Type) in Visual Basic), dove sampleObject è un'istanza della classe derivata dalla classe <see cref="T:System.Dynamic.DynamicObject" />, binder.Type restituisce il tipo <see cref="T:System.String" />.La proprietà binder.Explicit fornisce informazioni sul tipo di conversione effettuato.Restituisce true per la conversione esplicita e false per la conversione implicita.</param>
      <param name="result">Tipo di risultato dell'operazione di conversione dei tipi.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
      <summary>Fornisce l'implementazione per le operazioni che creano una nuova istanza di un oggetto dinamico.Questo metodo non può essere utilizzato in C# o in Visual Basic.</summary>
      <returns>true se l'operazione dà esito positivo; in caso contrario, false.Se questo metodo restituisce false, il comportamento viene determinato dal gestore di associazione di runtime del linguaggio.Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</returns>
      <param name="binder">Fornisce informazioni sull'operazione di inizializzazione.</param>
      <param name="args">Argomenti passati all'oggetto durante l'inizializzazione.Ad esempio, per l'operazione new SampleType(100), dove SampleType è il tipo derivato dalla classe <see cref="T:System.Dynamic.DynamicObject" />, <paramref name="args[0]" /> è uguale a 100.</param>
      <param name="result">Risultato dell'inizializzazione.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
      <summary>Fornisce l'implementazione per operazioni che eliminano un oggetto in base all'indice.Questo metodo non può essere utilizzato in C# o in Visual Basic.</summary>
      <returns>true se l'operazione dà esito positivo; in caso contrario, false.Se questo metodo restituisce false, il comportamento viene determinato dal gestore di associazione di runtime del linguaggio.Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</returns>
      <param name="binder">Fornisce informazioni sull'operazione di eliminazione.</param>
      <param name="indexes">Indici da eliminare.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>Fornisce l'implementazione per operazioni che eliminano un membro di un oggetto.Questo metodo non può essere utilizzato in C# o in Visual Basic.</summary>
      <returns>true se l'operazione dà esito positivo; in caso contrario, false.Se questo metodo restituisce false, il comportamento viene determinato dal gestore di associazione di runtime del linguaggio.Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</returns>
      <param name="binder">Fornisce informazioni sull'operazione di eliminazione.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary>Fornisce l'implementazione per operazioni che ottengono un valore in base all'indice.Le classi derivate dalla classe <see cref="T:System.Dynamic.DynamicObject" /> possono eseguire l'override di questo metodo per specificare il comportamento dinamico per operazioni di indicizzazione.</summary>
      <returns>true se l'operazione dà esito positivo; in caso contrario, false.Se questo metodo restituisce false, il comportamento viene determinato dal gestore di associazione di runtime del linguaggio.Nella maggior parte dei casi viene generata eccezione di runtime.</returns>
      <param name="binder">Fornisce informazioni sull'operazione. </param>
      <param name="indexes">Indici utilizzati nell'operazione.Ad esempio, per l'operazione sampleObject[3] in C# (sampleObject(3) in Visual Basic), dove sampleObject è derivato dalla classe DynamicObject, <paramref name="indexes[0]" /> è uguale a 3.</param>
      <param name="result">Risultato dell'operazione di indicizzazione.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>Fornisce l'implementazione per operazioni che ottengono valori dei membri.Le classi derivate dalla classe <see cref="T:System.Dynamic.DynamicObject" /> possono eseguire l'override di questo metodo per specificare il comportamento dinamico per operazioni quale l'acquisizione di un valore per una proprietà.</summary>
      <returns>true se l'operazione dà esito positivo; in caso contrario, false.Se questo metodo restituisce false, il comportamento viene determinato dal gestore di associazione di runtime del linguaggio.Nella maggior parte dei casi viene generata eccezione di runtime.</returns>
      <param name="binder">Fornisce informazioni sull'oggetto che ha chiamato l'operazione dinamica.La proprietà binder.Name fornisce il nome del membro di dati su cui viene eseguita l'operazione dinamica.Ad esempio, per l'istruzione Console.WriteLine(sampleObject.SampleProperty), dove sampleObject è un'istanza della classe derivata dalla classe <see cref="T:System.Dynamic.DynamicObject" />, binder.Name restituisce "SampleProperty".La proprietà binder.IgnoreCase specifica se per il nome del membro viene applicata la distinzione tra maiuscole e minuscole.</param>
      <param name="result">Risultato dell'operazione get.Ad esempio, se il metodo viene chiamato per una proprietà, è possibile assegnare il valore della proprietà a <paramref name="result" />.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
      <summary>Fornisce l'implementazione per operazioni che richiamano un oggetto.Le classi derivate dalla classe <see cref="T:System.Dynamic.DynamicObject" /> possono eseguire l'override di questo metodo per specificare il comportamento dinamico per operazioni quale il richiamo di un oggetto o un delegato.</summary>
      <returns>true se l'operazione dà esito positivo; in caso contrario, false.Se questo metodo restituisce false, il comportamento viene determinato dal gestore di associazione di runtime del linguaggio.Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</returns>
      <param name="binder">Fornisce informazioni sull'operazione invoke.</param>
      <param name="args">Argomenti passati all'oggetto durante l'operazione invoke.Ad esempio, per l'operazione sampleObject(100), dove sampleObject è derivato dalla classe <see cref="T:System.Dynamic.DynamicObject" />, <paramref name="args[0]" /> è uguale a 100.</param>
      <param name="result">Risultato della chiamata all'oggetto.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>Fornisce l'implementazione per operazioni che richiamano un membro.Le classi derivate dalla classe <see cref="T:System.Dynamic.DynamicObject" /> possono eseguire l'override di questo metodo per specificare il comportamento dinamico per operazioni quale la chiamata a un metodo.</summary>
      <returns>true se l'operazione dà esito positivo; in caso contrario, false.Se questo metodo restituisce false, il comportamento viene determinato dal gestore di associazione di runtime del linguaggio.Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</returns>
      <param name="binder">Fornisce informazioni sull'operazione dinamica.La proprietà binder.Name fornisce il nome del membro di dati su cui viene eseguita l'operazione dinamica.Ad esempio, per l'istruzione sampleObject.SampleMethod(100), in cui sampleObject è un'istanza della classe derivata dalla classe <see cref="T:System.Dynamic.DynamicObject" />, binder.Name restituisce "SampleMethod".La proprietà binder.IgnoreCase specifica se per il nome del membro viene applicata la distinzione tra maiuscole e minuscole.</param>
      <param name="args">Argomenti passati al membro dell'oggetto durante l'operazione invoke.Ad esempio, per l'istruzione sampleObject.SampleMethod(100), dove sampleObject è derivata dalla classe <see cref="T:System.Dynamic.DynamicObject" />, <paramref name="args[0]" /> è uguale a 100.</param>
      <param name="result">Risultato della chiamata al membro.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
      <summary>Fornisce l'implementazione per operazioni che impostano un valore in base all'indice.Le classi derivate dalla classe <see cref="T:System.Dynamic.DynamicObject" /> possono eseguire l'override di questo metodo per specificare il comportamento dinamico per operazioni che accedono a oggetti in base a un indice specificato.</summary>
      <returns>true se l'operazione dà esito positivo; in caso contrario, false.Se questo metodo restituisce false, il comportamento viene determinato dal gestore di associazione di runtime del linguaggio.Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</returns>
      <param name="binder">Fornisce informazioni sull'operazione. </param>
      <param name="indexes">Indici utilizzati nell'operazione.Ad esempio, per l'operazione sampleObject[3] = 10 in C# (sampleObject(3) = 10 in Visual Basic), dove sampleObject è derivato dalla classe <see cref="T:System.Dynamic.DynamicObject" />, <paramref name="indexes[0]" /> è uguale a 3.</param>
      <param name="value">Valore da impostare per l'oggetto con l'indice specificato.Ad esempio, per l'operazione sampleObject[3] = 10 in C# (sampleObject(3) = 10 in Visual Basic), dove sampleObject è derivato dalla classe <see cref="T:System.Dynamic.DynamicObject" />, <paramref name="value" /> è uguale a 10.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>Fornisce l'implementazione per operazioni che impostano valori dei membri.Le classi derivate dalla classe <see cref="T:System.Dynamic.DynamicObject" /> possono eseguire l'override di questo metodo per specificare il comportamento dinamico per operazioni quale l'impostazione di un valore per una proprietà.</summary>
      <returns>true se l'operazione dà esito positivo; in caso contrario, false.Se questo metodo restituisce false, il comportamento viene determinato dal gestore di associazione di runtime del linguaggio.Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</returns>
      <param name="binder">Fornisce informazioni sull'oggetto che ha chiamato l'operazione dinamica.La proprietà binder.Name fornisce il nome del membro a cui viene assegnato il valore.Ad esempio, per l'istruzione sampleObject.SampleProperty = "Test", dove sampleObject è un'istanza della classe derivata dalla classe <see cref="T:System.Dynamic.DynamicObject" />, binder.Name restituisce "SampleProperty".La proprietà binder.IgnoreCase specifica se per il nome del membro viene applicata la distinzione tra maiuscole e minuscole.</param>
      <param name="value">Valore su cui impostare il membro.Ad esempio, per l'istruzione sampleObject.SampleProperty = "Test", dove sampleObject è un'istanza della classe derivata dalla classe <see cref="T:System.Dynamic.DynamicObject" />, <paramref name="value" /> è "Test".</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
      <summary>Fornisce l'implementazione per le operazioni unarie.Le classi derivate dalla classe <see cref="T:System.Dynamic.DynamicObject" /> possono eseguire l'override di questo metodo per specificare il comportamento dinamico per operazioni quale negazione, incremento o decremento.</summary>
      <returns>true se l'operazione dà esito positivo; in caso contrario, false.Se questo metodo restituisce false, il comportamento viene determinato dal gestore di associazione di runtime del linguaggio.Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</returns>
      <param name="binder">Fornisce informazioni sull'operazione unaria.Proprietà binder.Operation che restituisce un oggetto <see cref="T:System.Linq.Expressions.ExpressionType" />.Ad esempio, per l'istruzione negativeNumber = -number, dove number è derivata dalla classe DynamicObject, binder.Operation restituisce "Negate".</param>
      <param name="result">Risultato dell'operazione unaria.</param>
    </member>
    <member name="T:System.Dynamic.ExpandoObject">
      <summary>Rappresenta un oggetto i cui membri possono essere aggiunti e rimossi in modo dinamico in fase di esecuzione.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.#ctor">
      <summary>Crea un nuovo oggetto ExpandoObject che non ha membri.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Aggiunge il valore specificato a <see cref="T:System.Collections.Generic.ICollection`1" /> con la chiave specificata.</summary>
      <param name="item">Struttura <see cref="T:System.Collections.Generic.KeyValuePair`2" /> che rappresenta la chiave e il valore da aggiungere all'insieme.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Rimuove tutti gli elementi dall'insieme.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Stabilisce se l'interfaccia <see cref="T:System.Collections.Generic.ICollection`1" /> contiene una coppia chiave/valore specifica.</summary>
      <returns>È true se l'insieme contiene una chiave e un valore specifici. In caso contrario, false.</returns>
      <param name="item">Struttura <see cref="T:System.Collections.Generic.KeyValuePair`2" /> da individuare nell'interfaccia <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Copia gli elementi dell'interfaccia <see cref="T:System.Collections.Generic.ICollection`1" /> in una matrice di tipo <see cref="T:System.Collections.Generic.KeyValuePair`2" />, iniziando dall'indice di matrice specificato.</summary>
      <param name="array">Matrice unidimensionale di tipo <see cref="T:System.Collections.Generic.KeyValuePair`2" /> che costituisce la destinazione degli elementi <see cref="T:System.Collections.Generic.KeyValuePair`2" /> copiati dall'oggetto <see cref="T:System.Collections.Generic.ICollection`1" />.L'indice della matrice deve essere in base zero.</param>
      <param name="arrayIndex">Indice in base zero dell'oggetto <paramref name="array" /> a partire dal quale viene effettuata la copia.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Count">
      <summary>Numero di elementi nella <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>Numero di elementi nella <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Ottiene un valore che indica se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura.</summary>
      <returns>true se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura; in caso contrario, false.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Rimuove una chiave e un valore dall'insieme.</summary>
      <returns>true se la chiave e il valore vengono trovati e rimossi. In caso contrario, false.Questo metodo restituisce false se la chiave e il valore non vengono trovati in <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <param name="item">Struttura <see cref="T:System.Collections.Generic.KeyValuePair`2" /> che rappresenta la chiave e il valore da rimuovere dall'insieme.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Add(System.String,System.Object)">
      <summary>Aggiunge la chiave e il valore specificati al dizionario.</summary>
      <param name="key">Oggetto da utilizzare come chiave.</param>
      <param name="value">Oggetto da utilizzare come valore.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#ContainsKey(System.String)">
      <summary>Determina se il dizionario contiene la chiave specificata.</summary>
      <returns>true se il dizionario contiene un elemento con la chiave specificata; in caso contrario, false.</returns>
      <param name="key">Chiave da individuare nel dizionario.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Item(System.String)">
      <summary>Ottiene o imposta l'elemento che dispone della chiave specificata.</summary>
      <returns>Elemento che dispone della chiave specificata.</returns>
      <param name="key">Chiave dell'elemento da ottenere o impostare.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>Ottiene un'interfaccia <see cref="T:System.Collections.Generic.ICollection`1" /> che contiene le chiavi degli elementi <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.ICollection`1" /> che contiene le chiavi dell'oggetto che implementa <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(System.String)">
      <summary>Rimuove l'elemento con la chiave specificata dall'oggetto <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>true se l'elemento è stato rimosso correttamente; in caso contrario, false.Questo metodo restituisce false anche se false anche se <paramref name="key" /> non è stato trovato nell'oggetto <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
      <param name="key">Chiave dell'elemento da rimuovere.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#TryGetValue(System.String,System.Object@)">
      <summary>Ottiene il valore associato alla chiave specificata.</summary>
      <returns>true se l'oggetto che implementa <see cref="T:System.Collections.Generic.IDictionary`2" /> contiene un elemento con la chiave specificata; in caso contrario, false.</returns>
      <param name="key">Chiave del valore da ottenere.</param>
      <param name="value">Quando termina, questo metodo restituisce il valore associato alla chiave specificata nel caso in cui la chiave venga trovata. In caso contrario, restituisce il valore predefinito per il tipo del parametro <paramref name="value" />.Questo parametro viene passato in forma non inizializzata.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>Ottiene un oggetto <see cref="T:System.Collections.Generic.ICollection`1" /> che contiene i valori di <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.ICollection`1" /> che contiene i valori dell'oggetto che implementa <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere l'insieme.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerator`1" /> che può essere utilizzato per scorrere l'insieme.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere l'insieme.</summary>
      <returns>Oggetto <see cref="T:System.Collections.IEnumerator" /> che può essere utilizzato per scorrere l'insieme.</returns>
    </member>
    <member name="E:System.Dynamic.ExpandoObject.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Viene generato quando il valore di una proprietà cambia.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>Il MetaObject fornito verrà inviato ai metodi virtuali dinamici.L'oggetto può essere incapsulato all'interno di un altro MetaObject per fornire comportamento personalizzato per singole azioni.</summary>
      <returns>Oggetto del tipo <see cref="T:System.Dynamic.DynamicMetaObject" />.</returns>
      <param name="parameter">Espressione che rappresenta il MetaObject da inviare ai metodi virtuali dinamici.</param>
    </member>
    <member name="T:System.Dynamic.GetIndexBinder">
      <summary>Rappresenta l'operazione get dinamica sull'indice nel sito di chiamata, fornendo la semantica di associazione e i dettagli sull'operazione.</summary>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Dynamic.GetIndexBinder" />.</summary>
      <param name="callInfo">Firma degli argomenti nel sito di chiamata.</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Esegue l'associazione dell'operazione get dinamica sull'indice.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione get dinamica sull'indice.</param>
      <param name="args">Matrice di argomenti dell'operazione get dinamica sull'indice.</param>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.CallInfo">
      <summary>Ottiene la firma degli argomenti nel sito di chiamata.</summary>
      <returns>Firma degli argomenti nel sito di chiamata.</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Esegue l'associazione dell'operazione get dinamica sull'indice se l'oggetto dinamico di destinazione non può eseguire l'associazione.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione get dinamica sull'indice.</param>
      <param name="indexes">Argomenti dell'operazione get dinamica sull'indice.</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Se sottoposto a override nella classe derivata, esegue l'associazione dell'operazione get dinamica sull'indice se l'oggetto dinamico di destinazione non può eseguire l'associazione.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione get dinamica sull'indice.</param>
      <param name="indexes">Argomenti dell'operazione get dinamica sull'indice.</param>
      <param name="errorSuggestion">Risultato dell'associazione da utilizzare se l'associazione non riesce, oppure null.</param>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.ReturnType">
      <summary>Tipo di risultato dell'operazione.</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di risultato dell'operazione.</returns>
    </member>
    <member name="T:System.Dynamic.GetMemberBinder">
      <summary>Rappresenta l'operazione get dinamica sul membro nel sito di chiamata, fornendo la semantica di associazione e i dettagli sull'operazione.</summary>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Dynamic.GetMemberBinder" />.</summary>
      <param name="name">Nome del membro da ottenere.</param>
      <param name="ignoreCase">Restituisce true se nella corrispondenza del nome deve essere ignorata la distinzione tra maiuscole e minuscole; in caso contrario, false.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Esegue l'associazione dell'operazione get dinamica sul membro.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione get dinamica sul membro.</param>
      <param name="args">Matrice di argomenti dell'operazione get dinamica sul membro.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject)">
      <summary>Esegue l'associazione dell'operazione get dinamica sul membro se l'oggetto dinamico di destinazione non può eseguire l'associazione.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione get dinamica sul membro.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Se sottoposto a override nella classe derivata, esegue l'associazione dell'operazione get dinamica sul membro se l'oggetto dinamico di destinazione non può eseguire l'associazione.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione get dinamica sul membro.</param>
      <param name="errorSuggestion">Risultato dell'associazione da utilizzare se l'associazione non riesce, oppure null.</param>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.IgnoreCase">
      <summary>Ottiene il valore che indica se nel confronto tra stringhe deve essere ignorata la distinzione tra maiuscole e minuscole per il nome del membro.</summary>
      <returns>Restituisce true la distinzione tra maiuscole e minuscole viene ignorata; in caso contrario, false.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.Name">
      <summary>Ottiene il nome del membro da ottenere.</summary>
      <returns>Nome del membro da ottenere.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.ReturnType">
      <summary>Tipo di risultato dell'operazione.</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di risultato dell'operazione.</returns>
    </member>
    <member name="T:System.Dynamic.IDynamicMetaObjectProvider">
      <summary>Rappresenta un oggetto dinamico le cui operazioni possono essere associate in fase di esecuzione.</summary>
    </member>
    <member name="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>Restituisce l'oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> responsabile delle operazioni di associazione eseguite sull'oggetto corrente.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> da associare all'oggetto corrente.</returns>
      <param name="parameter">Rappresentazione della struttura ad albero dell'espressione del valore di runtime.</param>
    </member>
    <member name="T:System.Dynamic.IInvokeOnGetBinder">
      <summary>Rappresenta le informazioni su un'operazione get dinamica sul membro che indica se devono essere richiamate le proprietà quando si esegue l'operazione get.</summary>
    </member>
    <member name="P:System.Dynamic.IInvokeOnGetBinder.InvokeOnGet">
      <summary>Ottiene il valore che indica se l'operazione get sul membro deve richiamare le proprietà quando eseguono l'operazione get.Il valore predefinito quando l'interfaccia non è presente è true.</summary>
      <returns>True se l'operazione get sul membro deve richiamare le proprietà quando eseguono l'operazione get; in caso contrario, false.</returns>
    </member>
    <member name="T:System.Dynamic.InvokeBinder">
      <summary>Rappresenta l'operazione invoke dinamica nel sito di chiamata, fornendo la semantica di associazione e i dettagli sull'operazione.</summary>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Dynamic.InvokeBinder" />.</summary>
      <param name="callInfo">Firma degli argomenti nel sito di chiamata.</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Esegue l'associazione dell'operazione invoke dinamica.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione invoke dinamica.</param>
      <param name="args">Matrice di argomenti dell'operazione invoke dinamica.</param>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.CallInfo">
      <summary>Ottiene la firma degli argomenti nel sito di chiamata.</summary>
      <returns>Firma degli argomenti nel sito di chiamata.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Esegue l'associazione dell'operazione invoke dinamica se l'oggetto dinamico di destinazione non può eseguire l'associazione.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione invoke dinamica.</param>
      <param name="args">Argomenti dell'operazione invoke dinamica.</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Esegue l'associazione dell'operazione invoke dinamica se l'oggetto dinamico di destinazione non può eseguire l'associazione.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione invoke dinamica.</param>
      <param name="args">Argomenti dell'operazione invoke dinamica.</param>
      <param name="errorSuggestion">Risultato dell'associazione da utilizzare se l'associazione non riesce, oppure null.</param>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.ReturnType">
      <summary>Tipo di risultato dell'operazione.</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di risultato dell'operazione.</returns>
    </member>
    <member name="T:System.Dynamic.InvokeMemberBinder">
      <summary>Rappresenta l'operazione invoke dinamica sul membro nel sito di chiamata, fornendo la semantica di associazione e i dettagli sull'operazione.</summary>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.#ctor(System.String,System.Boolean,System.Dynamic.CallInfo)">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Dynamic.InvokeMemberBinder" />.</summary>
      <param name="name">Nome del membro da richiamare.</param>
      <param name="ignoreCase">Restituisce true se nella corrispondenza del nome deve essere ignorata la distinzione tra maiuscole e minuscole; in caso contrario, false.</param>
      <param name="callInfo">Firma degli argomenti nel sito di chiamata.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Esegue l'associazione dell'operazione invoke dinamica sul membro.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione invoke dinamica sul membro.</param>
      <param name="args">Matrice di argomenti dell'operazione invoke dinamica sul membro.</param>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.CallInfo">
      <summary>Ottiene la firma degli argomenti nel sito di chiamata.</summary>
      <returns>Firma degli argomenti nel sito di chiamata.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Se sottoposto a override nella classe derivata, esegue l'associazione dell'operazione invoke dinamica se l'oggetto dinamico di destinazione non può eseguire l'associazione.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione invoke dinamica.</param>
      <param name="args">Argomenti dell'operazione invoke dinamica.</param>
      <param name="errorSuggestion">Risultato dell'associazione da utilizzare se l'associazione non riesce, oppure null.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Esegue l'associazione dell'operazione invoke dinamica sul membro se l'oggetto dinamico di destinazione non può eseguire l'associazione.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione invoke dinamica sul membro.</param>
      <param name="args">Argomenti dell'operazione invoke dinamica sul membro.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Se sottoposto a override nella classe derivata, esegue l'associazione dell'operazione invoke dinamica sul membro se l'oggetto dinamico di destinazione non può eseguire l'associazione.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione invoke dinamica sul membro.</param>
      <param name="args">Argomenti dell'operazione invoke dinamica sul membro.</param>
      <param name="errorSuggestion">Risultato dell'associazione da utilizzare se l'associazione non riesce, oppure null.</param>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.IgnoreCase">
      <summary>Ottiene il valore che indica se nel confronto tra stringhe deve essere ignorata la distinzione tra maiuscole e minuscole per il nome del membro.</summary>
      <returns>Restituisce true la distinzione tra maiuscole e minuscole viene ignorata; in caso contrario, false.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.Name">
      <summary>Ottiene il nome del membro da richiamare.</summary>
      <returns>Nome del membro da richiamare.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.ReturnType">
      <summary>Tipo di risultato dell'operazione.</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di risultato dell'operazione.</returns>
    </member>
    <member name="T:System.Dynamic.SetIndexBinder">
      <summary>Rappresenta l'operazione dinamica di impostazione dell'indice nel sito di chiamata, fornendo la semantica di associazione e i dettagli sull'operazione.</summary>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Dynamic.SetIndexBinder" />.</summary>
      <param name="callInfo">Firma degli argomenti nel sito di chiamata.</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Esegue l'associazione dell'operazione dinamica di impostazione dell'indice.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione dinamica di impostazione dell'indice.</param>
      <param name="args">Matrice di argomenti dell'operazione dinamica di impostazione dell'indice.</param>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.CallInfo">
      <summary>Ottiene la firma degli argomenti nel sito di chiamata.</summary>
      <returns>Firma degli argomenti nel sito di chiamata.</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Esegue l'associazione dell'operazione dinamica di impostazione dell'indice se l'oggetto dinamico di destinazione non può eseguire l'associazione.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione dinamica di impostazione dell'indice.</param>
      <param name="indexes">Argomenti dell'operazione dinamica di impostazione dell'indice.</param>
      <param name="value">Valore su cui impostare l'insieme.</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Se sottoposto a override nella classe derivata, esegue l'associazione dell'operazione dinamica di impostazione dell'indice se l'oggetto dinamico di destinazione non può eseguire l'associazione.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione dinamica di impostazione dell'indice.</param>
      <param name="indexes">Argomenti dell'operazione dinamica di impostazione dell'indice.</param>
      <param name="value">Valore su cui impostare l'insieme.</param>
      <param name="errorSuggestion">Risultato dell'associazione da utilizzare se l'associazione non riesce, oppure null.</param>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.ReturnType">
      <summary>Tipo di risultato dell'operazione.</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di risultato dell'operazione.</returns>
    </member>
    <member name="T:System.Dynamic.SetMemberBinder">
      <summary>Rappresenta l'operazione dinamica di impostazione del membro nel sito di chiamata, fornendo la semantica di associazione e i dettagli sull'operazione.</summary>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Dynamic.SetMemberBinder" />.</summary>
      <param name="name">Nome del membro da ottenere.</param>
      <param name="ignoreCase">Restituisce true se nella corrispondenza del nome deve essere ignorata la distinzione tra maiuscole e minuscole; in caso contrario, false.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Esegue l'associazione dell'operazione dinamica di impostazione del membro.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione dinamica di impostazione del membro.</param>
      <param name="args">Matrice di argomenti dell'operazione dinamica di impostazione del membro.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Esegue l'associazione dell'operazione dinamica di impostazione del membro se l'oggetto dinamico di destinazione non può eseguire l'associazione.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione dinamica di impostazione del membro.</param>
      <param name="value">Valore su cui impostare il membro.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Esegue l'associazione dell'operazione dinamica di impostazione del membro se l'oggetto dinamico di destinazione non può eseguire l'associazione.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione dinamica di impostazione del membro.</param>
      <param name="value">Valore su cui impostare il membro.</param>
      <param name="errorSuggestion">Risultato dell'associazione da utilizzare se l'associazione non riesce, oppure null.</param>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.IgnoreCase">
      <summary>Ottiene il valore che indica se nel confronto tra stringhe deve essere ignorata la distinzione tra maiuscole e minuscole per il nome del membro.</summary>
      <returns>Restituisce true la distinzione tra maiuscole e minuscole viene ignorata; in caso contrario, false.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.Name">
      <summary>Ottiene il nome del membro da ottenere.</summary>
      <returns>Nome del membro da ottenere.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.ReturnType">
      <summary>Tipo di risultato dell'operazione.</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di risultato dell'operazione.</returns>
    </member>
    <member name="T:System.Dynamic.UnaryOperationBinder">
      <summary>Rappresenta l'operazione dinamica unaria nel sito di chiamata, fornendo la semantica di associazione e i dettagli sull'operazione.</summary>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Dynamic.BinaryOperationBinder" />.</summary>
      <param name="operation">Tipo di operazione unaria.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Esegue l'associazione dell'operazione unaria dinamica.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione dinamica.</param>
      <param name="args">Matrice di argomenti dell'operazione dinamica.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)">
      <summary>Esegue l'associazione dell'operazione unaria dinamica se l'oggetto dinamico di destinazione non può eseguire l'associazione.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione unaria dinamica.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Esegue l'associazione dell'operazione unaria dinamica se l'oggetto dinamico di destinazione non può eseguire l'associazione.</summary>
      <returns>Oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che rappresenta il risultato dell'associazione.</returns>
      <param name="target">Destinazione dell'operazione unaria dinamica.</param>
      <param name="errorSuggestion">Risultato dell'associazione se l'associazione non riesce, oppure null.</param>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.Operation">
      <summary>Tipo di operazione unaria.</summary>
      <returns>Oggetto di <see cref="T:System.Linq.Expressions.ExpressionType" /> che rappresenta il tipo di operazione unaria.</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.ReturnType">
      <summary>Tipo di risultato dell'operazione.</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di risultato dell'operazione.</returns>
    </member>
    <member name="T:System.Linq.Enumerable">
      <summary>Fornisce un set di metodi static (Shared in Visual Basic) per l'esecuzione di query su oggetti che implementano <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
      <summary>Applica una funzione accumulatore a una sequenza.</summary>
      <returns>Valore finale dell'accumulatore.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> a cui aggregare.</param>
      <param name="func">Funzione accumulatore da richiamare per ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="func" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
      <summary>Applica una funzione accumulatore a una sequenza.Il valore di inizializzazione specificato viene utilizzato come valore iniziale dell'accumulatore.</summary>
      <returns>Valore finale dell'accumulatore.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> a cui aggregare.</param>
      <param name="seed">Valore iniziale dell'accumulatore.</param>
      <param name="func">Funzione accumulatore da richiamare per ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Tipo del valore dell'accumulatore.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="func" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>Applica una funzione accumulatore a una sequenza.Il valore di inizializzazione specificato viene utilizzato come valore iniziale dell'accumulatore e la funzione specificata viene utilizzata per selezionare il valore risultante.</summary>
      <returns>Il valore finale trasformato dell'accumulatore.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> a cui aggregare.</param>
      <param name="seed">Valore iniziale dell'accumulatore.</param>
      <param name="func">Funzione accumulatore da richiamare per ogni elemento.</param>
      <param name="resultSelector">Una funzione per trasformare il valore finale dell'accumulatore nel valore risultante.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Tipo del valore dell'accumulatore.</typeparam>
      <typeparam name="TResult">Tipo del valore risultante.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="func" /> o <paramref name="resultSelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Determina se tutti gli elementi di una sequenza soddisfano una condizione.</summary>
      <returns>true se ogni elemento della sequenza di origine supera il test per il predicato specificato o se la sequenza è vuota; in caso contrario, false.</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene gli elementi a cui applicare il predicato.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Determina se una sequenza contiene elementi.</summary>
      <returns>true se la sequenza di origine contiene elementi; in caso contrario, false.</returns>
      <param name="source">L'oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> di cui verificare il contenuto.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Determina un qualsiasi elemento di una sequenza soddisfa una condizione.</summary>
      <returns>true se gli elementi nella sequenza di origine superano il test per il predicato specificato; in caso contrario, false.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> ai cui elementi applicare il predicato.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Restituisce l'input digitato come oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <returns>Sequenza di input digitata come oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
      <param name="source">Sequenza da digitare come oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Decimal" />.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media <see cref="T:System.Decimal" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Double" />.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media <see cref="T:System.Double" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Int32" />.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media <see cref="T:System.Int32" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Int64" />.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media <see cref="T:System.Int64" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Calcola la media di una sequenza che ammette valori <see cref="T:System.Decimal" /> nullable.</summary>
      <returns>Media della sequenza di valori; null se la sequenza di origine è vuota o contiene solo valori null.</returns>
      <param name="source">Sequenza che di valori <see cref="T:System.Decimal" /> nullable di cui calcolare la media .</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma degli elementi della sequenza è superiore a <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Calcola la media di una sequenza che ammette valori <see cref="T:System.Double" /> nullable.</summary>
      <returns>Media della sequenza di valori; null se la sequenza di origine è vuota o contiene solo valori null.</returns>
      <param name="source">Sequenza che di valori <see cref="T:System.Double" /> nullable di cui calcolare la media .</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Calcola la media di una sequenza che ammette valori <see cref="T:System.Int32" /> nullable.</summary>
      <returns>Media della sequenza di valori; null se la sequenza di origine è vuota o contiene solo valori null.</returns>
      <param name="source">Sequenza che di valori <see cref="T:System.Int32" /> nullable di cui calcolare la media .</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma degli elementi della sequenza è superiore a <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Calcola la media di una sequenza che ammette valori <see cref="T:System.Int64" /> nullable.</summary>
      <returns>Media della sequenza di valori; null se la sequenza di origine è vuota o contiene solo valori null.</returns>
      <param name="source">Sequenza che di valori <see cref="T:System.Int64" /> nullable di cui calcolare la media .</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma degli elementi della sequenza è superiore a <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Calcola la media di una sequenza che ammette valori <see cref="T:System.Single" /> nullable.</summary>
      <returns>Media della sequenza di valori; null se la sequenza di origine è vuota o contiene solo valori null.</returns>
      <param name="source">Sequenza che di valori <see cref="T:System.Single" /> nullable di cui calcolare la media .</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Single" />.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media <see cref="T:System.Single" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Decimal" /> ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Sequenza di valori utilizzati per calcolare una media.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
      <exception cref="T:System.OverflowException">La somma degli elementi della sequenza è superiore a <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Double" /> ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Int32" /> ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
      <exception cref="T:System.OverflowException">La somma degli elementi della sequenza è superiore a <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Int64" /> ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di origine.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
      <exception cref="T:System.OverflowException">La somma degli elementi della sequenza è superiore a <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Decimal" /> nullable ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza di valori; null se la sequenza di origine è vuota o contiene solo valori null.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma degli elementi della sequenza è superiore a <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Double" /> nullable ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza di valori; null se la sequenza di origine è vuota o contiene solo valori null.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Int32" /> nullable ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza di valori; null se la sequenza di origine è vuota o contiene solo valori null.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma degli elementi della sequenza è superiore a <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Int64" /> nullable ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza di valori; null se la sequenza di origine è vuota o contiene solo valori null.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Single" /> nullable ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza di valori; null se la sequenza di origine è vuota o contiene solo valori null.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Single" /> ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
      <summary>Converte gli elementi di un oggetto <see cref="T:System.Collections.IEnumerable" /> nel tipo specificato.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene ogni elemento della sequenza di origine convertito nel tipo specificato.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.IEnumerable" /> che contiene gli elementi da convertire.</param>
      <typeparam name="TResult">Tipo in cui convertire gli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidCastException">Non è possibile eseguire il cast di un elemento della sequenza al tipo <paramref name="TResult" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Concatena due sequenze.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene gli elementi concatenati delle due sequenze di input.</returns>
      <param name="first">Prima sequenza da concatenare.</param>
      <param name="second">Sequenza da concatenare alla prima sequenza.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> o <paramref name="second" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Determina se una sequenza contiene uno specifico elemento utilizzando l'operatore di confronto uguaglianze predefinito.</summary>
      <returns>true se il dizionario contiene un elemento con la chiave specificata; in caso contrario, false.</returns>
      <param name="source">Sequenza in cui individuare un valore.</param>
      <param name="value">Valore da individuare nella sequenza .</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determina se una sequenza contiene un elemento specificato utilizzando un oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>true se il dizionario contiene un elemento con la chiave specificata; in caso contrario, false.</returns>
      <param name="source">Sequenza in cui individuare un valore.</param>
      <param name="value">Valore da individuare nella sequenza .</param>
      <param name="comparer">Operatore di confronto uguaglianze per confrontare valori.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Restituisce il numero di elementi in una sequenza.</summary>
      <returns>Numero di elementi nella sequenza di input.</returns>
      <param name="source">Sequenza che contiene gli elementi da contare.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.OverflowException">Il numero di elementi in <paramref name="source" /> è maggiore di <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Restituisce un valore che rappresenta il numero di elementi nella sequenza specificata che soddisfano una condizione.</summary>
      <returns>Numero che rappresenta quanti elementi nella sequenza specificata soddisfano la condizione nella funzione predicativa.</returns>
      <param name="source">Sequenza che contiene gli elementi da sottoporre a test e contare.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
      <exception cref="T:System.OverflowException">Il numero di elementi in <paramref name="source" /> è maggiore di <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Restituisce gli elementi della sequenza specificata o il valore predefinito del parametro di tipo in un insieme di singleton se la sequenza è vuota.</summary>
      <returns>Un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene il valore predefinito per il tipo <paramref name="TSource" /> se <paramref name="source" /> è vuoto; in caso contrario, <paramref name="source" />.</returns>
      <param name="source">Sequenza per cui restituire un valore predefinito se è vuota.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Restituisce gli elementi della sequenza specificata o il valore specificato in un insieme di singleton se la sequenza è vuota.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene <paramref name="defaultValue" /> se <paramref name="source" /> è vuota; in caso contrario, <paramref name="source" />.</returns>
      <param name="source">Sequenza per cui restituire il valore specificato se è vuota.</param>
      <param name="defaultValue">Valore da restituire se la sequenza è vuota.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Restituisce elementi distinti da una sequenza utilizzando l'operatore di confronto uguaglianze predefinito per confrontare i valori.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene elementi distinti dalla sequenza di origine.</returns>
      <param name="source">Sequenza da cui rimuovere elementi duplicati.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Restituisce elementi distinti da una sequenza utilizzando uno specificato <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare valori.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene elementi distinti dalla sequenza di origine.</returns>
      <param name="source">Sequenza da cui rimuovere elementi duplicati.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare i valori.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Restituisce l'elemento in corrispondenza dell’indice specificato in una sequenza.</summary>
      <returns>L'elemento alla posizione specificata nella sequenza di origine.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> dal quale restituire un elemento.</param>
      <param name="index">Indice in base zero dell'elemento da recuperare.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> è minore di 0 oppure maggiore o uguale al numero di elementi di <paramref name="source" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Restituisce l'elemento in corrispondenza di un indice specificato in una sequenza o un valore predefinito se l'indice è esterno all'intervallo.</summary>
      <returns>default(<paramref name="TSource" />) se l'indice è esterno ai limiti della sequenza di origine; in caso contrario, l'elemento alla posizione specificata nella sequenza di origine.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> dal quale restituire un elemento.</param>
      <param name="index">Indice in base zero dell'elemento da recuperare.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Empty``1">
      <summary>Restituisce un oggetto vuoto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che ha l'argomento di tipo specificato.</summary>
      <returns>Oggetto vuoto <see cref="T:System.Collections.Generic.IEnumerable`1" /> il cui argomento di tipo è <paramref name="TResult" />.</returns>
      <typeparam name="TResult">Il tipo da assegnare al parametro di tipo del generico oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produce la differenza insiemistica di due sequenze utilizzando l'operatore di confronto eguaglianze predefinito per confrontare i valori.</summary>
      <returns>Sequenza che contiene la differenza insiemistica degli elementi delle due sequenze.</returns>
      <param name="first">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> di cui saranno restituiti gli elementi che non sono presenti anche in <paramref name="second" />.</param>
      <param name="second">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi, se presenti anche nella prima sequenza, saranno rimossi dalla sequenza restituita.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> o <paramref name="second" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produce la differenza insiemistica delle due sequenze utilizzando l’oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> specificato per confrontare i valori.</summary>
      <returns>Sequenza che contiene la differenza insiemistica degli elementi delle due sequenze.</returns>
      <param name="first">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> di cui saranno restituiti gli elementi che non sono presenti anche in <paramref name="second" />.</param>
      <param name="second">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi, se presenti anche nella prima sequenza, saranno rimossi dalla sequenza restituita.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare i valori.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> o <paramref name="second" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Restituisce il primo elemento di una sequenza.</summary>
      <returns>Il primo elemento nella sequenza specificata.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> di cui restituire il primo elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">La sequenza di origine è vuota.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Restituisce il primo elemento in una sequenza che soddisfa una condizione specificata.</summary>
      <returns>Il primo elemento nella sequenza che supera il test nella funzione predicativa specificata.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> dal quale restituire un elemento.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">Nessun elemento soddisfa la condizione in <paramref name="predicate" />.-oppure-La sequenza di origine è vuota.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Restituisce il primo elemento di una sequenza o un valore predefinito se la sequenza non contiene elementi.</summary>
      <returns>default(<paramref name="TSource" />) se <paramref name="source" /> è vuota; in caso contrario, il primo elemento di <paramref name="source" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> di cui restituire il primo elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Restituisce il primo elemento della sequenza che soddisfa una condizione specificata o un valore predefinito se un tale elemento non viene trovato.</summary>
      <returns>default(<paramref name="TSource" />) se <paramref name="source" /> è vuota o se nessun elemento supera il test specificato da <paramref name="predicate" />; in caso contrario, il primo elemento in <paramref name="source" /> che supera il test specificato da <paramref name="predicate" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> dal quale restituire un elemento.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Raggruppa gli elementi di una sequenza secondo una specificata funzione del selettore principale.</summary>
      <returns>Oggetto IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# o IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic in cui ciascun oggetto <see cref="T:System.Linq.IGrouping`2" /> contiene una sequenza di oggetti e una chiave.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi sono da raggruppare.</param>
      <param name="keySelector">Funzione per estrarre la chiave per ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita da <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Raggruppa gli elementi di una sequenza secondo una specificata funzione del selettore principale e confronta le chiavi utilizzando un operatore di confronto specificato.</summary>
      <returns>Oggetto IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# o IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic in cui ciascun oggetto <see cref="T:System.Linq.IGrouping`2" /> contiene una sequenza di oggetti e una chiave.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi sono da raggruppare.</param>
      <param name="keySelector">Funzione per estrarre la chiave per ogni elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita da <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Raggruppa gli elementi di una sequenza in base a una funzione specificata del selettore principale e proietta gli elementi di ogni gruppo utilizzando una funzione specificata.</summary>
      <returns>Oggetto IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# o IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic in cui ciascun oggetto <see cref="T:System.Linq.IGrouping`2" /> contiene una sequenza di oggetti <paramref name="TElement" /> e una chiave.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi sono da raggruppare.</param>
      <param name="keySelector">Funzione per estrarre la chiave per ogni elemento.</param>
      <param name="elementSelector">Funzione per eseguire il mapping di ogni elemento di origine a un elemento in <see cref="T:System.Linq.IGrouping`2" />.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita da <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo degli elementi contenuti nell’oggetto <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Raggruppa gli elementi di una sequenza secondo una specificata funzione del selettore principale.Le chiavi vengono confrontate utilizzando un operatore di confronto e gli elementi di ogni gruppo vengono proiettati utilizzando una funzione specificata.</summary>
      <returns>Oggetto IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# o IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic in cui ciascun oggetto <see cref="T:System.Linq.IGrouping`2" /> contiene una sequenza di oggetti <paramref name="TElement" /> e una chiave.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi sono da raggruppare.</param>
      <param name="keySelector">Funzione per estrarre la chiave per ogni elemento.</param>
      <param name="elementSelector">Funzione per eseguire il mapping di ogni elemento di origine a un elemento in un <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita da <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo degli elementi contenuti nell’oggetto <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>Raggruppa gli elementi di una sequenza in base a una funzione del selettore principale specificata e crea un valore risultante da ciascun gruppo e relativa chiave.Gli elementi di ogni gruppo vengono proiettati utilizzando una funzione specificata.</summary>
      <returns>Insieme di elementi di tipo <paramref name="TResult" /> dove ogni elemento rappresenta una proiezione su un gruppo e sulla relativa chiave.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi sono da raggruppare.</param>
      <param name="keySelector">Funzione per estrarre la chiave per ogni elemento.</param>
      <param name="elementSelector">Funzione per eseguire il mapping di ogni elemento di origine a un elemento in un <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">Funzione per creare un valore di risultato da ogni gruppo.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita da <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo degli elementi contenuti in ciascun oggetto <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">Tipo del valore restituito dall'oggetto <paramref name="resultSelector" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Raggruppa gli elementi di una sequenza in base a una funzione del selettore principale specificata e crea un valore risultante da ciascun gruppo e relativa chiave.I valori delle chiavi vengono confrontati utilizzando un operatore di confronto specificato e gli elementi di ogni gruppo vengono proiettati utilizzando una funzione specificata.</summary>
      <returns>Insieme di elementi di tipo <paramref name="TResult" /> dove ogni elemento rappresenta una proiezione su un gruppo e sulla relativa chiave.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi sono da raggruppare.</param>
      <param name="keySelector">Funzione per estrarre la chiave per ogni elemento.</param>
      <param name="elementSelector">Funzione per eseguire il mapping di ogni elemento di origine a un elemento in un <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">Funzione per creare un valore di risultato da ogni gruppo.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita da <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo degli elementi contenuti in ciascun oggetto <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">Tipo del valore restituito dall'oggetto <paramref name="resultSelector" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>Raggruppa gli elementi di una sequenza in base a una funzione del selettore principale specificata e crea un valore risultante da ciascun gruppo e relativa chiave.</summary>
      <returns>Insieme di elementi di tipo <paramref name="TResult" /> dove ogni elemento rappresenta una proiezione su un gruppo e sulla relativa chiave.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi sono da raggruppare.</param>
      <param name="keySelector">Funzione per estrarre la chiave per ogni elemento.</param>
      <param name="resultSelector">Funzione per creare un valore di risultato da ogni gruppo.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita da <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Tipo del valore restituito dall'oggetto <paramref name="resultSelector" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Raggruppa gli elementi di una sequenza in base a una funzione del selettore principale specificata e crea un valore risultante da ciascun gruppo e relativa chiave.Le chiavi vengono confrontati utilizzando un operatore di confronto specificato.</summary>
      <returns>Insieme di elementi di tipo <paramref name="TResult" /> dove ogni elemento rappresenta una proiezione su un gruppo e sulla relativa chiave.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi sono da raggruppare.</param>
      <param name="keySelector">Funzione per estrarre la chiave per ogni elemento.</param>
      <param name="resultSelector">Funzione per creare un valore di risultato da ogni gruppo.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita da <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Tipo del valore restituito dall'oggetto <paramref name="resultSelector" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>Correla gli elementi di due sequenze in base all'uguaglianza delle chiavi e raggruppa i risultati.Per confrontare le chiavi viene utilizzato l'operatore di confronto uguaglianze predefinito.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene elementi di tipo <paramref name="TResult" /> ottenuti eseguendo un'aggiunta raggruppata delle due sequenze.</returns>
      <param name="outer">Prima sequenza da unire.</param>
      <param name="inner">Sequenza da unire alla prima sequenza.</param>
      <param name="outerKeySelector">Funzione per estrarre la chiave di aggiunta da ogni elemento della prima sequenza.</param>
      <param name="innerKeySelector">Funzione per estrarre la chiave di aggiunta da ogni elemento della seconda sequenza.</param>
      <param name="resultSelector">Funzione per creare un elemento di risultato da un elemento dalla prima sequenza e un insieme di elementi corrispondenti dalla seconda sequenza.</param>
      <typeparam name="TOuter">Tipo degli elementi della prima sequenza.</typeparam>
      <typeparam name="TInner">Tipo degli elementi della seconda sequenza.</typeparam>
      <typeparam name="TKey">Tipo delle chiavi restituite dalle funzioni del selettore principale.</typeparam>
      <typeparam name="TResult">Tipo degli elementi di risultato.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> o <paramref name="inner" /> o <paramref name="outerKeySelector" /> o <paramref name="innerKeySelector" /> o <paramref name="resultSelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correla gli elementi di due sequenze in base all'uguaglianza delle chiavi e raggruppa i risultati.Viene utilizzato un oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> specificato per confrontare le chiavi.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene elementi di tipo <paramref name="TResult" /> ottenuti eseguendo un'aggiunta raggruppata delle due sequenze.</returns>
      <param name="outer">Prima sequenza da unire.</param>
      <param name="inner">Sequenza da unire alla prima sequenza.</param>
      <param name="outerKeySelector">Funzione per estrarre la chiave di aggiunta da ogni elemento della prima sequenza.</param>
      <param name="innerKeySelector">Funzione per estrarre la chiave di aggiunta da ogni elemento della seconda sequenza.</param>
      <param name="resultSelector">Funzione per creare un elemento di risultato da un elemento dalla prima sequenza e un insieme di elementi corrispondenti dalla seconda sequenza.</param>
      <param name="comparer">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per la codifica hash e il confronto delle chiavi.</param>
      <typeparam name="TOuter">Tipo degli elementi della prima sequenza.</typeparam>
      <typeparam name="TInner">Tipo degli elementi della seconda sequenza.</typeparam>
      <typeparam name="TKey">Tipo delle chiavi restituite dalle funzioni del selettore principale.</typeparam>
      <typeparam name="TResult">Tipo degli elementi di risultato.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> o <paramref name="inner" /> o <paramref name="outerKeySelector" /> o <paramref name="innerKeySelector" /> o <paramref name="resultSelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produce l’intersezione insiemistica di due sequenze utilizzando l'operatore di confronto uguaglianze predefinito per confrontare i valori.</summary>
      <returns>Sequenza che contiene gli elementi che formano l'intersezione insiemistica delle due sequenze.</returns>
      <param name="first">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> di cui verranno restituiti gli elementi distinti che sono presenti anche in <paramref name="second" />.</param>
      <param name="second">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" />  di cui verranno restituiti gli elementi distinti presenti anche nella prima sequenza.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> o <paramref name="second" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produce la differenza insiemistica delle due sequenze utilizzando l’oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> specificato per confrontare i valori.</summary>
      <returns>Sequenza che contiene gli elementi che formano l'intersezione insiemistica delle due sequenze.</returns>
      <param name="first">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> di cui verranno restituiti gli elementi distinti che sono presenti anche in <paramref name="second" />.</param>
      <param name="second">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" />  di cui verranno restituiti gli elementi distinti presenti anche nella prima sequenza.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare i valori.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> o <paramref name="second" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>Correla gli elementi di due sequenze in base alle chiavi corrispondenti.Per confrontare le chiavi viene utilizzato l'operatore di confronto uguaglianze predefinito.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene elementi di tipo <paramref name="TResult" /> ottenuti eseguendo un inner join sulle due sequenze.</returns>
      <param name="outer">Prima sequenza da unire.</param>
      <param name="inner">Sequenza da unire alla prima sequenza.</param>
      <param name="outerKeySelector">Funzione per estrarre la chiave di aggiunta da ogni elemento della prima sequenza.</param>
      <param name="innerKeySelector">Funzione per estrarre la chiave di aggiunta da ogni elemento della seconda sequenza.</param>
      <param name="resultSelector">Funzione per creare un elemento di risultato da due elementi corrispondenti.</param>
      <typeparam name="TOuter">Tipo degli elementi della prima sequenza.</typeparam>
      <typeparam name="TInner">Tipo degli elementi della seconda sequenza.</typeparam>
      <typeparam name="TKey">Tipo delle chiavi restituite dalle funzioni del selettore principale.</typeparam>
      <typeparam name="TResult">Tipo degli elementi di risultato.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> o <paramref name="inner" /> o <paramref name="outerKeySelector" /> o <paramref name="innerKeySelector" /> o <paramref name="resultSelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correla gli elementi di due sequenze in base alle chiavi corrispondenti.Viene utilizzato un oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> specificato per confrontare le chiavi.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene elementi di tipo <paramref name="TResult" /> ottenuti eseguendo un inner join sulle due sequenze.</returns>
      <param name="outer">Prima sequenza da unire.</param>
      <param name="inner">Sequenza da unire alla prima sequenza.</param>
      <param name="outerKeySelector">Funzione per estrarre la chiave di aggiunta da ogni elemento della prima sequenza.</param>
      <param name="innerKeySelector">Funzione per estrarre la chiave di aggiunta da ogni elemento della seconda sequenza.</param>
      <param name="resultSelector">Funzione per creare un elemento di risultato da due elementi corrispondenti.</param>
      <param name="comparer">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per la codifica hash e il confronto delle chiavi.</param>
      <typeparam name="TOuter">Tipo degli elementi della prima sequenza.</typeparam>
      <typeparam name="TInner">Tipo degli elementi della seconda sequenza.</typeparam>
      <typeparam name="TKey">Tipo delle chiavi restituite dalle funzioni del selettore principale.</typeparam>
      <typeparam name="TResult">Tipo degli elementi di risultato.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> o <paramref name="inner" /> o <paramref name="outerKeySelector" /> o <paramref name="innerKeySelector" /> o <paramref name="resultSelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Restituisce l'ultimo elemento di una sequenza.</summary>
      <returns>Il valore dell'ultima posizione nella sequenza di origine.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> di cui restituire l’ultimo elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">La sequenza di origine è vuota.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Restituisce l’ultimo elemento di una sequenza che soddisfa una condizione specificata.</summary>
      <returns>L’ultimo elemento nella sequenza che supera il test nella funzione predicativa specificata.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> dal quale restituire un elemento.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">Nessun elemento soddisfa la condizione in <paramref name="predicate" />.-oppure-La sequenza di origine è vuota.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Restituisce l’ultimo elemento di una sequenza o un valore predefinito se la sequenza non contiene elementi.</summary>
      <returns>default(<paramref name="TSource" />) se la sequenza di origine è vuota; in caso contrario, l'ultimo elemento in <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> di cui restituire l’ultimo elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Restituisce l’ultimo elemento di una sequenza che soddisfa una condizione specificata o un valore predefinito se un tale elemento non viene trovato.</summary>
      <returns>default(<paramref name="TSource" />) se la sequenza è vuota o se nessun elemento supera il test nella funzione predicativa; in caso contrario, l'ultimo elemento che passa il test nella funzione predicativa.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> dal quale restituire un elemento.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Restituisce un oggetto <see cref="T:System.Int64" /> che rappresenta il numero totale di elementi in una sequenza.</summary>
      <returns>Numero di elementi nella sequenza di origine.</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene gli elementi da contare.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.OverflowException">Numero di elementi supera <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Restituisce un oggetto <see cref="T:System.Int64" /> che rappresenta quanti elementi in una sequenza soddisfano una condizione.</summary>
      <returns>Numero che rappresenta quanti elementi nella sequenza specificata soddisfano la condizione nella funzione predicativa.</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene gli elementi da contare.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
      <exception cref="T:System.OverflowException">Il numero di elementi supera <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Restituisce il valore massimo in una sequenza di valori <see cref="T:System.Decimal" />.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Decimal" /> di cui determinare il valore massimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Restituisce il valore massimo in una sequenza di valori <see cref="T:System.Double" />.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Double" /> di cui determinare il valore massimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Restituisce il valore massimo in una sequenza di valori <see cref="T:System.Int32" />.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Int32" /> di cui determinare il valore massimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Restituisce il valore massimo in una sequenza di valori <see cref="T:System.Int64" />.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Int64" /> di cui determinare il valore massimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Restituisce il valore massimo in una sequenza di valori <see cref="T:System.Decimal" /> Nullable.</summary>
      <returns>Valore di tipo Nullable&lt;Decimal&gt; in C# o Nullable(Of Decimal) in Visual Basic che corrisponde al valore massimo nella sequenza. </returns>
      <param name="source">Sequenza di valori <see cref="T:System.Decimal" /> nullable di cui determinare il valore massimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Restituisce il valore massimo in una sequenza di valori <see cref="T:System.Double" /> Nullable.</summary>
      <returns>Valore di tipo Nullable&lt;Double&gt; in C# o Nullable(Of Double) in Visual Basic che corrisponde al valore massimo nella sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Double" /> nullable di cui determinare il valore massimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Restituisce il valore massimo in una sequenza di valori <see cref="T:System.Int32" /> Nullable.</summary>
      <returns>Valore di tipo Nullable&lt;Int32&gt; in C# o Nullable(Of Int32) in Visual Basic che corrisponde al valore massimo nella sequenza. </returns>
      <param name="source">Sequenza di valori <see cref="T:System.Int32" /> nullable di cui determinare il valore massimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Restituisce il valore massimo in una sequenza di valori <see cref="T:System.Int64" /> Nullable.</summary>
      <returns>Valore di tipo Nullable&lt;Int64&gt; in C# o Nullable(Of Int64) in Visual Basic che corrisponde al valore massimo nella sequenza. </returns>
      <param name="source">Sequenza di valori <see cref="T:System.Int64" /> nullable di cui determinare il valore massimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Restituisce il valore massimo in una sequenza di valori <see cref="T:System.Single" /> Nullable.</summary>
      <returns>Valore di tipo Nullable&lt;Single&gt; in C# o Nullable(Of Single) in Visual Basic che corrisponde al valore massimo nella sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Single" /> nullable di cui determinare il valore massimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Restituisce il valore massimo in una sequenza di valori <see cref="T:System.Single" />.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Single" /> di cui determinare il valore massimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Restituisce il valore massimo in una sequenza generica.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <see cref="T:System.Decimal" />.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <see cref="T:System.Double" />.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <see cref="T:System.Int32" />.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <see cref="T:System.Int64" />.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <see cref="T:System.Decimal" />.</summary>
      <returns>Valore di tipo Nullable&lt;Decimal&gt; in C# o Nullable(Of Decimal) in Visual Basic che corrisponde al valore massimo nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <see cref="T:System.Double" />.</summary>
      <returns>Valore di tipo Nullable&lt;Double&gt; in C# o Nullable(Of Double) in Visual Basic che corrisponde al valore massimo nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <see cref="T:System.Int32" />.</summary>
      <returns>Valore di tipo Nullable&lt;Int32&gt; in C# o Nullable(Of Int32) in Visual Basic che corrisponde al valore massimo nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <see cref="T:System.Int64" />.</summary>
      <returns>Valore di tipo Nullable&lt;Int64&gt; in C# o Nullable(Of Int64) in Visual Basic che corrisponde al valore massimo nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <see cref="T:System.Single" />.</summary>
      <returns>Valore di tipo Nullable&lt;Single&gt; in C# o Nullable(Of Single) in Visual Basic che corrisponde al valore massimo nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <see cref="T:System.Single" /> massimo.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Richiama una funzione di trasformazione su ogni elemento di una generica sequenza e restituisce il valore massimo risultante.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo della chiave restituita da <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Restituisce il valore minimo in una sequenza di valori <see cref="T:System.Decimal" />.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Decimal" /> di cui determinare il valore minimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Restituisce il valore minimo in una sequenza di valori <see cref="T:System.Double" />.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Double" /> di cui determinare il valore minimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Restituisce il valore minimo in una sequenza di valori <see cref="T:System.Int32" />.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Int32" /> di cui determinare il valore minimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Restituisce il valore minimo in una sequenza di valori <see cref="T:System.Int64" />.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Int64" /> di cui determinare il valore minimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Restituisce il valore minimo in una sequenza di valori <see cref="T:System.Decimal" />.</summary>
      <returns>Valore di tipo Nullable&lt;Decimal&gt; in C# o Nullable(Of Decimal) in Visual Basic che corrisponde al valore minimo nella sequenza. </returns>
      <param name="source">Sequenza di valori <see cref="T:System.Decimal" /> nullable di cui determinare il valore minimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Restituisce il valore minimo in una sequenza di valori <see cref="T:System.Double" />.</summary>
      <returns>Valore di tipo Nullable&lt;Double&gt; in C# o Nullable(Of Double) in Visual Basic che corrisponde al valore minimo nella sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Double" /> nullable di cui determinare il valore minimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Restituisce il valore minimo in una sequenza di valori <see cref="T:System.Int32" />.</summary>
      <returns>Valore di tipo Nullable&lt;Int32&gt; in C# o Nullable(Of Int32) in Visual Basic che corrisponde al valore minimo nella sequenza. </returns>
      <param name="source">Sequenza di valori <see cref="T:System.Int32" /> nullable di cui determinare il valore minimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Restituisce il valore minimo in una sequenza di valori <see cref="T:System.Int64" />.</summary>
      <returns>Valore di tipo Nullable&lt;Int64&gt; in C# o Nullable(Of Int64) in Visual Basic che corrisponde al valore minimo nella sequenza. </returns>
      <param name="source">Sequenza di valori <see cref="T:System.Int64" /> nullable di cui determinare il valore minimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Restituisce il valore minimo in una sequenza di valori <see cref="T:System.Single" />.</summary>
      <returns>Valore di tipo Nullable&lt;Single&gt; in C# o Nullable(Of Single) in Visual Basic che corrisponde al valore minimo nella sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Single" /> nullable di cui determinare il valore minimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Restituisce il valore minimo in una sequenza di valori <see cref="T:System.Single" />.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Single" /> di cui determinare il valore minimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Restituisce il valore minimo in una sequenza generica.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <see cref="T:System.Decimal" /> minimo.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <see cref="T:System.Double" /> minimo.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <see cref="T:System.Int32" /> minimo.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <see cref="T:System.Int64" /> minimo.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <see cref="T:System.Decimal" /> nullable.</summary>
      <returns>Valore di tipo Nullable&lt;Decimal&gt; in C# o Nullable(Of Decimal) in Visual Basic che corrisponde al valore minimo nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <see cref="T:System.Double" /> nullable.</summary>
      <returns>Valore di tipo Nullable&lt;Double&gt; in C# o Nullable(Of Double) in Visual Basic che corrisponde al valore minimo nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <see cref="T:System.Int32" /> nullable.</summary>
      <returns>Valore di tipo Nullable&lt;Int32&gt; in C# o Nullable(Of Int32) in Visual Basic che corrisponde al valore minimo nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore nullable<see cref="T:System.Int64" /> minimo.</summary>
      <returns>Valore di tipo Nullable&lt;Int64&gt; in C# o Nullable(Of Int64) in Visual Basic che corrisponde al valore minimo nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <see cref="T:System.Single" /> nullable.</summary>
      <returns>Valore di tipo Nullable&lt;Single&gt; in C# o Nullable(Of Single) in Visual Basic che corrisponde al valore minimo nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <see cref="T:System.Single" /> minimo.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Richiama una funzione di trasformazione su ogni elemento di una generica sequenza e restituisce il valore minimo risultante.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo della chiave restituita da <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
      <summary>Filtra gli elementi di un oggetto <see cref="T:System.Collections.IEnumerable" /> in base a un tipo specificato.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene elementi della sequenza di input del tipo <paramref name="TResult" />.</returns>
      <param name="source">L’oggetto <see cref="T:System.Collections.IEnumerable" /> i cui elementi devono essere filtrati.</param>
      <typeparam name="TResult">Il tipo in base al quale filtrare gli elementi della sequenza.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Ordina in senso crescente gli elementi di una sequenza secondo una chiave.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IOrderedEnumerable`1" /> i cui elementi vengono ordinati secondo una chiave.</returns>
      <param name="source">Sequenza di valori da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da un elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita da <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Ordina in ordine crescente gli elementi di una sequenza utilizzando un operatore di confronto specificato.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IOrderedEnumerable`1" /> i cui elementi vengono ordinati secondo una chiave.</returns>
      <param name="source">Sequenza di valori da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da un elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita da <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Ordina in senso decrescente gli elementi di una sequenza secondo una chiave.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IOrderedEnumerable`1" /> i cui elementi vengono ordinati in senso decrescente in base a una chiave.</returns>
      <param name="source">Sequenza di valori da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da un elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita da <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Ordina in senso decrescente gli elementi di una sequenza utilizzando un operatore di confronto specificato.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IOrderedEnumerable`1" /> i cui elementi vengono ordinati in senso decrescente in base a una chiave.</returns>
      <param name="source">Sequenza di valori da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da un elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita da <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
      <summary>Genera una sequenza di numeri integrali all'interno di un intervallo specificato.</summary>
      <returns>Oggetto IEnumerable&lt;Int32&gt; in C# o IEnumerable(Of Int32) in Visual Basic che contiene un intervallo di numeri integrali sequenziali.</returns>
      <param name="start">Il primo valore intero della sequenza.</param>
      <param name="count">Il numero di valori interi sequenziali da generare</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> è minore di 0.-oppure-<paramref name="start" /> + <paramref name="count" /> -1 è maggiore di <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
      <summary>Genera una sequenza che contiene un valore ripetuto.</summary>
      <returns>Classe <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene un valore ripetuto.</returns>
      <param name="element">Valore da ripetere.</param>
      <param name="count">Numero che esprime quante volte il valore è ripetuto nella sequenza generata.</param>
      <typeparam name="TResult">Il tipo del valore da ripetere nella sequenza di risultato.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> è minore di 0.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Inverte l'ordine degli elementi in una sequenza.</summary>
      <returns>Sequenza i cui elementi corrispondono a quelli della sequenza di input, in ordine inverso.</returns>
      <param name="source">Sequenza di valori da invertire.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Proietta ogni elemento di una sequenza in una nuova maschera.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi sono il risultato ottenuto richiamando una funzione di trasformazione su ogni elemento di <paramref name="source" />.</returns>
      <param name="source">Sequenza di valori sulla quale richiamare una funzione di trasformazione.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo della chiave restituita da <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
      <summary>Proietta ogni elemento di una sequenza in un nuovo modulo incorporando l'indice dell'elemento.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi sono il risultato ottenuto richiamando una funzione di trasformazione su ogni elemento di <paramref name="source" />.</returns>
      <param name="source">Sequenza di valori sulla quale richiamare una funzione di trasformazione.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento di origine; il secondo parametro della funzione rappresenta l'indice dell'elemento di origine.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo della chiave restituita da <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Proietta ogni elemento di una sequenza a un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" />, semplifica le sequenze risultanti in un’unica sequenza e richiama una funzione del selettore di risultato su ogni elemento al suo interno.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi sono il risultato ottenuto richiamando la funzione di trasformazione uno a molti <paramref name="collectionSelector" /> su ogni elemento di <paramref name="source" /> ed eseguire quindi il mapping di ognuno degli elementi di tale sequenza e del corrispondente elemento di origine a un elemento di risultato.</returns>
      <param name="source">Sequenza di valori da proiettare.</param>
      <param name="collectionSelector">Funzione di trasformazione da applicare a ogni elemento della sequenza di input.</param>
      <param name="resultSelector">Funzione di trasformazione da applicare a ogni elemento della sequenza intermedia.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">Tipo degli elementi intermedi raccolti da <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">Tipo degli elementi della sequenza risultante.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="collectionSelector" /> o <paramref name="resultSelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Proietta ogni elemento di una sequenza a un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> e semplifica le sequenze risultanti in un’unica sequenza.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi sono il risultato ottenuto richiamando la funzione di trasformazione uno a molti su ogni elemento della sequenza di input.</returns>
      <param name="source">Sequenza di valori da proiettare.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo degli elementi della sequenza restituita da <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Proietta ogni elemento di una sequenza a un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" />, semplifica le sequenze risultanti in un’unica sequenza e richiama una funzione del selettore di risultato su ogni elemento al suo interno.L'indice di ogni elemento di origine viene utilizzato nella maschera intermedia proiettata di tale elemento.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi sono il risultato ottenuto richiamando la funzione di trasformazione uno a molti <paramref name="collectionSelector" /> su ogni elemento di <paramref name="source" /> ed eseguire quindi il mapping di ognuno degli elementi di tale sequenza e del corrispondente elemento di origine a un elemento di risultato.</returns>
      <param name="source">Sequenza di valori da proiettare.</param>
      <param name="collectionSelector">Funzione di trasformazione da applicare a ogni elemento di origine; il secondo parametro della funzione rappresenta l'indice dell'elemento di origine.</param>
      <param name="resultSelector">Funzione di trasformazione da applicare a ogni elemento della sequenza intermedia.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">Tipo degli elementi intermedi raccolti da <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">Tipo degli elementi della sequenza risultante.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="collectionSelector" /> o <paramref name="resultSelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Proietta ogni elemento di una sequenza a un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" />, e semplifica le sequenze risultanti in un’unica sequenza.L'indice di ogni elemento di origine viene utilizzato nella maschera proiettata di tale elemento.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi sono il risultato ottenuto richiamando la funzione di trasformazione uno a molti su ogni elemento di una sequenza di input.</returns>
      <param name="source">Sequenza di valori da proiettare.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento di origine; il secondo parametro della funzione rappresenta l'indice dell'elemento di origine.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo degli elementi della sequenza restituita da <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Determina se due sequenze sono uguali confrontando gli elementi tramite l’uso dell'operatore di confronto uguaglianze predefinito per il loro tipo.</summary>
      <returns>true se le due sequenze di origine hanno la stessa lunghezza e gli elementi corrispondenti risultano uguali in base all'operatore di confronto di uguaglianza predefinito per il relativo tipo. In caso contrario, false.</returns>
      <param name="first">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> da confrontare con <paramref name="second" />.</param>
      <param name="second">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> da confrontare alla prima sequenza.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> o <paramref name="second" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determina se due sequenze sono uguali confrontando i loro elementi mediante l’uso di un oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> specificato.</summary>
      <returns>true se le due sequenze di origine sono di lunghezza uguale e gli elementi corrispondenti risultano uguali secondo <paramref name="comparer" />; in caso contrario, false.</returns>
      <param name="first">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> da confrontare con <paramref name="second" />.</param>
      <param name="second">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> da confrontare alla prima sequenza.</param>
      <param name="comparer">Un oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> da utilizzare per confrontare gli elementi.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> o <paramref name="second" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> presenta più di un elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Restituisce il singolo elemento di una sequenza e genera un'eccezione se nella sequenza non è presente esattamente un elemento.</summary>
      <returns>Singolo elemento della sequenza di input.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> di cui restituire il singolo elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">La sequenza di input contiene più di un elemento.-oppure-La sequenza di input è vuota.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Restituisce il singolo elemento di una sequenza che soddisfa una condizione specificata e genera un'eccezione se esiste più di un elemento.</summary>
      <returns>Singolo elemento della sequenza di input che soddisfa una condizione.</returns>
      <param name="source">Un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> dal quale restituire un singolo elemento.</param>
      <param name="predicate">Funzione per testare un elemento per una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">Nessun elemento soddisfa la condizione in <paramref name="predicate" />.-oppure-Più di un elemento soddisfa la condizione in <paramref name="predicate" />.-oppure-La sequenza di origine è vuota.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Restituisce il singolo elemento di una sequenza o un valore predefinito se la sequenza è vuota. Questo metodo genera un'eccezione se esiste più di un elemento nella sequenza.</summary>
      <returns>Il singolo elemento della sequenza di input, o default(<paramref name="TSource" />) se la sequenza non contiene elementi.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> di cui restituire il singolo elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">La sequenza di input contiene più di un elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Restituisce il singolo elemento di una sequenza che soddisfa una condizione specificata o un valore predefinito se tale elemento esiste. Questo metodo genera un'eccezione se più di un elemento soddisfa la condizione.</summary>
      <returns>Il singolo elemento della sequenza di input che soddisfa la condizione o default(<paramref name="TSource" />) se tale elemento non viene trovato.</returns>
      <param name="source">Un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> dal quale restituire un singolo elemento.</param>
      <param name="predicate">Funzione per testare un elemento per una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Ignora un numero specificato di elementi in una sequenza e quindi restituisce gli elementi rimanenti.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene gli elementi presenti dopo l'indice specificato nella sequenza di input.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> dal quale restituire elementi.</param>
      <param name="count">Il numero di elementi da ignorare prima di restituire gli elementi rimanenti.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Ignora gli elementi in sequenza finché la condizione specificata è soddisfatta e quindi restituisce gli elementi rimanenti.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene gli elementi dalla sequenza di input a partire dal primo elemento nella serie lineare che non supera il test specificato da <paramref name="predicate" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> dal quale restituire elementi.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Ignora gli elementi in sequenza finché la condizione specificata è soddisfatta e quindi restituisce gli elementi rimanenti.L'indice dell'elemento viene utilizzato nella logica della funzione predicativa.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene gli elementi dalla sequenza di input a partire dal primo elemento nella serie lineare che non supera il test specificato da <paramref name="predicate" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> dal quale restituire elementi.</param>
      <param name="predicate">Funzione per verificare ogni elemento di origine per una condizione; il secondo parametro della funzione rappresenta l'indice dell'elemento di origine.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Calcola la somma di una sequenza di valori <see cref="T:System.Decimal" />.</summary>
      <returns>Somma dei valori della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Decimal" /> di cui calcolare la somma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma è superiore a <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Calcola la somma di una sequenza di valori <see cref="T:System.Double" />.</summary>
      <returns>Somma dei valori della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Double" /> di cui calcolare la somma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Calcola la somma di una sequenza di valori <see cref="T:System.Int32" />.</summary>
      <returns>Somma dei valori della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Int32" /> di cui calcolare la somma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma è superiore a <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Calcola la somma di una sequenza di valori <see cref="T:System.Int64" />.</summary>
      <returns>Somma dei valori della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Int64" /> di cui calcolare la somma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma è superiore a <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Calcola la somma di una sequenza di valori <see cref="T:System.Decimal" /> nullable.</summary>
      <returns>Somma dei valori della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Decimal" /> nullable di cui calcolare la somma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma è superiore a <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Calcola la somma di una sequenza di valori <see cref="T:System.Double" /> nullable.</summary>
      <returns>Somma dei valori della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Double" /> nullable di cui calcolare la somma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Calcola la somma di una sequenza di valori <see cref="T:System.Int32" /> nullable.</summary>
      <returns>Somma dei valori della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Int32" /> nullable di cui calcolare la somma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma è superiore a <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Calcola la somma di una sequenza di valori <see cref="T:System.Int64" /> nullable.</summary>
      <returns>Somma dei valori della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Int64" /> nullable di cui calcolare la somma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma è superiore a <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Calcola la somma di una sequenza di valori <see cref="T:System.Single" /> nullable.</summary>
      <returns>Somma dei valori della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Single" /> nullable di cui calcolare la somma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Calcola la somma di una sequenza di valori <see cref="T:System.Single" />.</summary>
      <returns>Somma dei valori della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Single" /> di cui calcolare la somma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Calcola la somma della sequenza di valori <see cref="T:System.Decimal" /> ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori proiettati.</returns>
      <param name="source">Sequenza di valori utilizzati per calcolare una somma.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma è superiore a <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Calcola la somma della sequenza di valori <see cref="T:System.Double" /> ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori proiettati.</returns>
      <param name="source">Sequenza di valori utilizzati per calcolare una somma.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Calcola la somma della sequenza di valori <see cref="T:System.Int32" /> ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori proiettati.</returns>
      <param name="source">Sequenza di valori utilizzati per calcolare una somma.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma è superiore a <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Calcola la somma della sequenza di valori <see cref="T:System.Int64" /> ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori proiettati.</returns>
      <param name="source">Sequenza di valori utilizzati per calcolare una somma.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma è superiore a <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Calcola la somma della sequenza di valori <see cref="T:System.Decimal" /> ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori proiettati.</returns>
      <param name="source">Sequenza di valori utilizzati per calcolare una somma.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma è superiore a <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Calcola la somma della sequenza di valori <see cref="T:System.Double" /> ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori proiettati.</returns>
      <param name="source">Sequenza di valori utilizzati per calcolare una somma.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Calcola la somma della sequenza di valori <see cref="T:System.Int32" /> ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori proiettati.</returns>
      <param name="source">Sequenza di valori utilizzati per calcolare una somma.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma è superiore a <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Calcola la somma della sequenza di valori <see cref="T:System.Int64" /> ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori proiettati.</returns>
      <param name="source">Sequenza di valori utilizzati per calcolare una somma.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma è superiore a <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Calcola la somma della sequenza di valori <see cref="T:System.Single" /> ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori proiettati.</returns>
      <param name="source">Sequenza di valori utilizzati per calcolare una somma.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Calcola la somma della sequenza di valori <see cref="T:System.Single" /> ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori proiettati.</returns>
      <param name="source">Sequenza di valori utilizzati per calcolare una somma.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Restituisce un numero specificato di elementi contigui dall'inizio di una sequenza.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene il numero specificato di elementi, dall'inizio della sequenza di input.</returns>
      <param name="source">Sequenza dalla quale vengono restituiti gli elementi.</param>
      <param name="count">Numero di elementi da restituire.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Restituisce elementi di una sequenza finché una condizione specificata viene soddisfatta.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene gli elementi dalla sequenza di input che precedono il primo elemento che non soddisfa il test.</returns>
      <param name="source">Sequenza dalla quale vengono restituiti gli elementi.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Restituisce elementi di una sequenza finché una condizione specificata viene soddisfatta.L'indice dell'elemento viene utilizzato nella logica della funzione predicativa.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene gli elementi dalla sequenza di input che precedono il primo elemento che non soddisfa il test.</returns>
      <param name="source">Sequenza dalla quale vengono restituiti gli elementi.</param>
      <param name="predicate">Funzione per verificare ogni elemento di origine per una condizione; il secondo parametro della funzione rappresenta l'indice dell'elemento di origine.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>Esegue un successivo ordinamento in senso crescente in base a una chiave degli elementi di una sequenza.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IOrderedEnumerable`1" /> i cui elementi vengono ordinati secondo una chiave.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IOrderedEnumerable`1" /> che contiene gli elementi da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita da <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Esegue un ordinamento secondario in senso crescente degli elementi di una sequenza utilizzando un operatore di confronto specificato.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IOrderedEnumerable`1" /> i cui elementi vengono ordinati secondo una chiave.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IOrderedEnumerable`1" /> che contiene gli elementi da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da ogni elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita da <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>Esegue un successivo ordinamento in senso decrescente in base a una chiave degli elementi di una sequenza.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IOrderedEnumerable`1" /> i cui elementi vengono ordinati in senso decrescente in base a una chiave.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IOrderedEnumerable`1" /> che contiene gli elementi da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita da <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Esegue un ordinamento secondario in senso decrescente degli elementi di una sequenza utilizzando un operatore di confronto specificato.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IOrderedEnumerable`1" /> i cui elementi vengono ordinati in senso decrescente in base a una chiave.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IOrderedEnumerable`1" /> che contiene gli elementi da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da ogni elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita da <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Crea una matrice da un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <returns>Oggetto che contiene gli elementi dalla sequenza di input .</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> da cui creare una matrice.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Crea un oggetto <see cref="T:System.Collections.Generic.Dictionary`2" /> da un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> secondo una funzione del selettore principale specificata.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.Dictionary`2" /> che contiene chiavi e valori.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> da cui creare un oggetto <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Funzione per estrarre una chiave da ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita da <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è null.-oppure-<paramref name="keySelector" /> genera una chiave che è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> genera chiavi duplicate per due elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crea un oggetto <see cref="T:System.Collections.Generic.Dictionary`2" /> da un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> secondo una funzione del selettore principale specificata e un operatore di confronto principale.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.Dictionary`2" /> che contiene chiavi e valori.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> da cui creare un oggetto <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Funzione per estrarre una chiave da ogni elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo delle chiavi restituite da <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è null.-oppure-<paramref name="keySelector" /> genera una chiave che è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> genera chiavi duplicate per due elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Crea un oggetto <see cref="T:System.Collections.Generic.Dictionary`2" /> da un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> secondo le funzioni specificate del selettore principale e del selettore di elementi.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.Dictionary`2" /> che contiene valori del tipo <paramref name="TElement" /> selezionati dalla sequenza di input.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> da cui creare un oggetto <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Funzione per estrarre una chiave da ogni elemento.</param>
      <param name="elementSelector">Funzione di trasformazione per produrre un valore dell'elemento di risultato da ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita da <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo della chiave restituita da <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> è null.-oppure-<paramref name="keySelector" /> genera una chiave che è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> genera chiavi duplicate per due elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crea un oggetto <see cref="T:System.Collections.Generic.Dictionary`2" /> da un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> secondo una funzione specificata del selettore principale, un operatore di confronto principale e una funzione del selettore di elementi.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.Dictionary`2" /> che contiene valori del tipo <paramref name="TElement" /> selezionati dalla sequenza di input.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> da cui creare un oggetto <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Funzione per estrarre una chiave da ogni elemento.</param>
      <param name="elementSelector">Funzione di trasformazione per produrre un valore dell'elemento di risultato da ogni elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita da <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo della chiave restituita da <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> è null.-oppure-<paramref name="keySelector" /> genera una chiave che è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> genera chiavi duplicate per due elementi.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Crea un oggetto <see cref="T:System.Collections.Generic.List`1" /> da un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.List`1" /> che contiene gli elementi dalla sequenza di input.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> da cui creare un oggetto <see cref="T:System.Collections.Generic.List`1" />.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Lookup`2" /> da un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> secondo una funzione del selettore principale specificata.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Lookup`2" /> che contiene chiavi e valori.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> da cui creare un oggetto <see cref="T:System.Linq.Lookup`2" />.</param>
      <param name="keySelector">Funzione per estrarre una chiave da ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita da <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Lookup`2" /> da un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> secondo una funzione del selettore principale specificata e un operatore di confronto principale.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Lookup`2" /> che contiene chiavi e valori.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> da cui creare un oggetto <see cref="T:System.Linq.Lookup`2" />.</param>
      <param name="keySelector">Funzione per estrarre una chiave da ogni elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita da <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Lookup`2" /> da un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> secondo le funzioni specificate del selettore principale e del selettore di elementi.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Lookup`2" /> che contiene valori del tipo <paramref name="TElement" /> selezionati dalla sequenza di input.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> da cui creare un oggetto <see cref="T:System.Linq.Lookup`2" />.</param>
      <param name="keySelector">Funzione per estrarre una chiave da ogni elemento.</param>
      <param name="elementSelector">Funzione di trasformazione per produrre un valore dell'elemento di risultato da ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita da <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo della chiave restituita da <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Lookup`2" /> da un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> secondo una funzione specificata del selettore principale, un operatore di confronto principale e una funzione del selettore di elementi.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Lookup`2" /> che contiene valori del tipo <paramref name="TElement" /> selezionati dalla sequenza di input.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> da cui creare un oggetto <see cref="T:System.Linq.Lookup`2" />.</param>
      <param name="keySelector">Funzione per estrarre una chiave da ogni elemento.</param>
      <param name="elementSelector">Funzione di trasformazione per produrre un valore dell'elemento di risultato da ogni elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita da <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo della chiave restituita da <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produce l'unione insiemistica delle due sequenze utilizzando l'operatore di confronto uguaglianze predefinito.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene gli elementi di entrambe le sequenze di input, tranne i duplicati.</returns>
      <param name="first">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi distinti formano il primo set per l'operazione di unione.</param>
      <param name="second">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi distinti formano il secondo set per l'operazione di unione.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> o <paramref name="second" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produce l'unione insiemistica di due sequenze utilizzando un oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> specificato.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene gli elementi di entrambe le sequenze di input, tranne i duplicati.</returns>
      <param name="first">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi distinti formano il primo set per l'operazione di unione.</param>
      <param name="second">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi distinti formano il secondo set per l'operazione di unione.</param>
      <param name="comparer">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare i valori.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> o <paramref name="second" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Filtra una sequenza di valori in base a un predicato.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene gli elementi dalla sequenza di input che soddisfano la condizione.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> da filtrare.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Filtra una sequenza di valori in base a un predicato.L'indice di ogni elemento viene utilizzato nella logica della funzione predicativa.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene gli elementi dalla sequenza di input che soddisfano la condizione.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> da filtrare.</param>
      <param name="predicate">Funzione per verificare ogni elemento di origine per una condizione; il secondo parametro della funzione rappresenta l'indice dell'elemento di origine.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>Unisce due sequenze tramite la funzione del predicato specificata.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene gli elementi uniti delle due sequenze di input.</returns>
      <param name="first">Prima sequenza da unire.</param>
      <param name="second">Seconda sequenza da unire.</param>
      <param name="resultSelector">Una funzione che specifica come unire gli elementi dalle due sequenze.</param>
      <typeparam name="TFirst">Tipo degli elementi della prima sequenza di input.</typeparam>
      <typeparam name="TSecond">Tipo degli elementi della seconda sequenza di input.</typeparam>
      <typeparam name="TResult">Tipo degli elementi della sequenza risultante.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> o <paramref name="second" /> è null.</exception>
    </member>
    <member name="T:System.Linq.EnumerableExecutor">
      <summary>Rappresenta una struttura ad albero dell'espressione e fornisce la funzionalità per eseguire la struttura ad albero dell'espressione dopo la riscrittura.</summary>
    </member>
    <member name="M:System.Linq.EnumerableExecutor.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Linq.EnumerableExecutor" />.</summary>
    </member>
    <member name="T:System.Linq.EnumerableExecutor`1">
      <summary>Rappresenta una struttura ad albero dell'espressione e fornisce la funzionalità per eseguire la struttura ad albero dell'espressione dopo la riscrittura.</summary>
      <typeparam name="T">Tipo di dati del valore risultante dall'esecuzione della struttura ad albero dell'espressione.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableExecutor`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Linq.EnumerableExecutor`1" />.</summary>
      <param name="expression">Struttura ad albero dell'espressione da associare alla nuova istanza.</param>
    </member>
    <member name="T:System.Linq.EnumerableQuery">
      <summary>Rappresenta un insieme <see cref="T:System.Collections.IEnumerable" /> come origine dati <see cref="T:System.Linq.EnumerableQuery" />. </summary>
    </member>
    <member name="M:System.Linq.EnumerableQuery.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Linq.EnumerableQuery" />.</summary>
    </member>
    <member name="T:System.Linq.EnumerableQuery`1">
      <summary>Rappresenta un insieme <see cref="T:System.Collections.Generic.IEnumerable`1" /> come origine dati <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <typeparam name="T">Tipo di dati nell'insieme.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Linq.EnumerableQuery`1" /> e la associa a un insieme <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <param name="enumerable">Insieme da associare alla nuova istanza.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Linq.EnumerableQuery`1" /> e associa l'istanza a una struttura ad albero dell'espressione.</summary>
      <param name="expression">Struttura ad albero dell'espressione da associare alla nuova istanza.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Restituisce un enumeratore che può scorrere l'insieme <see cref="T:System.Collections.Generic.IEnumerable`1" /> associato o, se è null, può scorrere l'insieme risultante dalla riscrittura della struttura ad albero dell'espressione associata come query su un'origine dati <see cref="T:System.Collections.Generic.IEnumerable`1" /> e dalla relativa esecuzione.</summary>
      <returns>Enumeratore che può essere utilizzato per scorrere l'origine dati associata.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Restituisce un enumeratore che può scorrere l'insieme <see cref="T:System.Collections.Generic.IEnumerable`1" /> associato o, se è null, può scorrere l'insieme risultante dalla riscrittura della struttura ad albero dell'espressione associata come query su un'origine dati <see cref="T:System.Collections.Generic.IEnumerable`1" /> e dalla relativa esecuzione.</summary>
      <returns>Enumeratore che può essere utilizzato per scorrere l'origine dati associata.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#ElementType">
      <summary>Ottiene il tipo di dati nell'insieme rappresentato da questa istanza.</summary>
      <returns>Tipo di dati nell'insieme rappresentato da questa istanza.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Expression">
      <summary>Ottiene la struttura ad albero dell'espressione rappresentata da questa istanza o ad essa associata.</summary>
      <returns>Struttura ad albero dell'espressione rappresentata da questa istanza o ad essa associata.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Provider">
      <summary>Ottiene il provider di query associato a questa istanza.</summary>
      <returns>Provider di query associato a questa istanza.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>Costruisce un nuovo oggetto <see cref="T:System.Linq.EnumerableQuery`1" /> e lo associa alla struttura ad albero dell'espressione specificata che rappresenta un insieme <see cref="T:System.Linq.IQueryable`1" /> di dati.</summary>
      <returns>Oggetto EnumerableQuery associato a <paramref name="expression" />.</returns>
      <param name="expression">Struttura ad albero dell'espressione da eseguire.</param>
      <typeparam name="S">Tipo di dati nell'insieme rappresentato da <paramref name="expression" />.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary>Costruisce un nuovo oggetto <see cref="T:System.Linq.EnumerableQuery`1" /> e lo associa alla struttura ad albero dell'espressione specificata che rappresenta un insieme <see cref="T:System.Linq.IQueryable" /> di dati.</summary>
      <returns>Oggetto <see cref="T:System.Linq.EnumerableQuery`1" /> associato a <paramref name="expression" />.</returns>
      <param name="expression">Struttura ad albero dell'espressione che rappresenta un insieme <see cref="T:System.Linq.IQueryable" /> di dati.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
      <summary>Esegue un'espressione dopo la riscrittura per chiamare i metodi <see cref="T:System.Linq.Enumerable" /> anziché i metodi <see cref="T:System.Linq.Queryable" /> su tutte le origini dati enumerabili su cui non è possibile eseguire una query mediante i metodi <see cref="T:System.Linq.Queryable" />.</summary>
      <returns>Valore risultante dall'esecuzione di <paramref name="expression" />.</returns>
      <param name="expression">Struttura ad albero dell'espressione da eseguire.</param>
      <typeparam name="S">Tipo di dati nell'insieme rappresentato da <paramref name="expression" />.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary>Esegue un'espressione dopo la riscrittura per chiamare i metodi <see cref="T:System.Linq.Enumerable" /> anziché i metodi <see cref="T:System.Linq.Queryable" /> su tutte le origini dati enumerabili su cui non è possibile eseguire una query mediante i metodi <see cref="T:System.Linq.Queryable" />.</summary>
      <returns>Valore risultante dall'esecuzione di <paramref name="expression" />.</returns>
      <param name="expression">Struttura ad albero dell'espressione da eseguire.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.ToString">
      <summary>Restituisce una rappresentazione testuale dell'insieme enumerabile o, se è null, della struttura ad albero dell'espressione associata a questa istanza.</summary>
      <returns>Rappresentazione testuale dell'insieme enumerabile o, se è null, della struttura ad albero dell'espressione associata a questa istanza.</returns>
    </member>
    <member name="T:System.Linq.IGrouping`2">
      <summary>Rappresenta un insieme di oggetti che hanno una chiave comune.</summary>
      <typeparam name="TKey">Tipo di chiave contenuta nell’oggetto <see cref="T:System.Linq.IGrouping`2" />.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="TElement">Tipo dei valori contenuti nell’oggetto <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
    </member>
    <member name="P:System.Linq.IGrouping`2.Key">
      <summary>Ottiene la chiave di <see cref="T:System.Linq.IGrouping`2" />.</summary>
      <returns>Chiave del <see cref="T:System.Linq.IGrouping`2" />.</returns>
    </member>
    <member name="T:System.Linq.ILookup`2">
      <summary>Definisce un indicizzatore, una proprietà dimensione e un metodo di ricerca booleana per strutture di dati che eseguono il mapping di chiavi a una sequenze di valori <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <typeparam name="TKey">Tipo di chiavi contenute nell’oggetto <see cref="T:System.Linq.ILookup`2" />.</typeparam>
      <typeparam name="TElement">Il tipo di elementi nelle sequenze <see cref="T:System.Collections.Generic.IEnumerable`1" /> che costituiscono i valori nell'oggetto <see cref="T:System.Linq.ILookup`2" />.</typeparam>
    </member>
    <member name="M:System.Linq.ILookup`2.Contains(`0)">
      <summary>Determina se una chiave specificata esiste nell’oggetto <see cref="T:System.Linq.ILookup`2" />.</summary>
      <returns>true se <paramref name="key" /> è in <see cref="T:System.Linq.ILookup`2" />; in caso contrario, false.</returns>
      <param name="key">La chiave da cercare nell’oggetto <see cref="T:System.Linq.ILookup`2" />.</param>
    </member>
    <member name="P:System.Linq.ILookup`2.Count">
      <summary>Ottiene il numero di coppie di insiemi chiave/valore contenute nell'oggetto <see cref="T:System.Linq.ILookup`2" />.</summary>
      <returns>Numero di coppie di insiemi chiave/valore contenute nell'oggetto <see cref="T:System.Linq.ILookup`2" />.</returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Item(`0)">
      <summary>Ottiene la sequenza <see cref="T:System.Collections.Generic.IEnumerable`1" /> di valori indicizzati da una chiave specificata.</summary>
      <returns>Sequenza <see cref="T:System.Collections.Generic.IEnumerable`1" /> di valori indicizzati dalla chiave specificata.</returns>
      <param name="key">Chiave della sequenza desiderata di valori.</param>
    </member>
    <member name="T:System.Linq.IOrderedEnumerable`1">
      <summary>Rappresenta una sequenza ordinata.</summary>
      <typeparam name="TElement">Tipo degli elementi della sequenza.</typeparam>
    </member>
    <member name="M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
      <summary>Esegue un successivo ordinamento degli elementi di un oggetto <see cref="T:System.Linq.IOrderedEnumerable`1" /> in base a una chiave.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IOrderedEnumerable`1" /> i cui elementi vengono ordinati secondo una chiave.</returns>
      <param name="keySelector">
        <see cref="T:System.Func`2" /> usata per estrarre la chiave per ogni elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> utilizzato per confrontare chiavi per collocarle nella sequenza restituita.</param>
      <param name="descending">true per ordinare gli elementi in senso decrescente; false false per ordinare gli elementi in ordine crescente.</param>
      <typeparam name="TKey">Tipo della chiave prodotta dall'oggetto <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary>Rappresenta il risultato dell'operazione di ordinamento.</summary>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary>Rappresenta il risultato dell'operazione di ordinamento.</summary>
      <typeparam name="T">Il tipo di contenuto dell’origine dati.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary>Fornisce funzionalità per valutare query in relazione a un'origine dati specifica in cui il tipo dei dati non è specificato.</summary>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary>Ottiene il tipo dell'elemento o degli elementi che sono restituiti quando la struttura ad albero dell'espressione associata a questa istanza di <see cref="T:System.Linq.IQueryable" /> è eseguita.</summary>
      <returns>Un <see cref="T:System.Type" /> che rappresenta il tipo dell’elemento o degli elementi che sono restituiti quando la struttura ad albero dell'espressione associata a questo oggetto è eseguita.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary>Ottiene la struttura ad albero dell'espressione associata all'istanza di <see cref="T:System.Linq.IQueryable" />.</summary>
      <returns>Istanza di <see cref="T:System.Linq.Expressions.Expression" /> associata all'istanza di <see cref="T:System.Linq.IQueryable" />.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary>Ottiene il provider della query associato all’origine dati.</summary>
      <returns>L'oggetto <see cref="T:System.Linq.IQueryProvider" /> associato con l’origine dati.</returns>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary>Fornisce funzionalità per valutare query in relazione a un'origine dati specifica in cui il tipo dei dati è conosciuto.</summary>
      <typeparam name="T">Tipo di dati nell’origine dati.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary>Definisce metodi per creare ed eseguire query descritte da un oggetto <see cref="T:System.Linq.IQueryable" />.</summary>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>Costruisce un oggetto <see cref="T:System.Linq.IQueryable`1" /> per valutare la query rappresentata da una struttura ad albero dell'espressione specificata.</summary>
      <returns>Un oggetto <see cref="T:System.Linq.IQueryable`1" /> per valutare la query rappresentata dalla struttura ad albero dell'espressione specificata.</returns>
      <param name="expression">Una struttura ad albero dell'espressione che rappresenta la query LINQ.</param>
      <typeparam name="TElement">Tipo degli elementi dell’oggetto restituito <see cref="T:System.Linq.IQueryable`1" />.</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary>Costruisce un oggetto <see cref="T:System.Linq.IQueryable" /> per valutare la query rappresentata da una struttura ad albero dell'espressione specificata.</summary>
      <returns>Un oggetto <see cref="T:System.Linq.IQueryable" /> per valutare la query rappresentata dalla struttura ad albero dell'espressione specificata.</returns>
      <param name="expression">Una struttura ad albero dell'espressione che rappresenta la query LINQ.</param>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary>Esegue la query fortemente tipizzata rappresentata da una struttura ad albero dell'espressione specificata.</summary>
      <returns>Il valore che è il risultato dell'esecuzione della query specificata.</returns>
      <param name="expression">Una struttura ad albero dell'espressione che rappresenta la query LINQ.</param>
      <typeparam name="TResult">Il tipo di valore che è il risultato dell'esecuzione della query.</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary>Esegue la query rappresentata da una struttura ad albero dell'espressione specificata.</summary>
      <returns>Il valore che è il risultato dell'esecuzione della query specificata.</returns>
      <param name="expression">Una struttura ad albero dell'espressione che rappresenta la query LINQ.</param>
    </member>
    <member name="T:System.Linq.Lookup`2">
      <summary>Rappresenta un insieme di chiavi, ognuna mappata a uno o più valori.</summary>
      <typeparam name="TKey">Tipo di chiavi contenute nell’oggetto <see cref="T:System.Linq.Lookup`2" />.</typeparam>
      <typeparam name="TElement">Tipo degli elementi di ciascun valore <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenuto nell’oggetto <see cref="T:System.Linq.Lookup`2" />.</typeparam>
    </member>
    <member name="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
      <summary>Applica una funzione di trasformazione a ciascuna chiave e ai valori associati e restituisce i risultati.</summary>
      <returns>Un insieme che contiene un valore per ciascuna coppia di insiemi chiave/valore nell’oggetto <see cref="T:System.Linq.Lookup`2" />.</returns>
      <param name="resultSelector">Una funzione per proiettare un valore da ciascuna chiave e i valori associati.</param>
      <typeparam name="TResult">Tipo di valori prodotti dall'oggetto <paramref name="resultSelector" />.</typeparam>
    </member>
    <member name="M:System.Linq.Lookup`2.Contains(`0)">
      <summary>Determina se una chiave specificata è nell’oggetto <see cref="T:System.Linq.Lookup`2" />.</summary>
      <returns>true se <paramref name="key" /> è in <see cref="T:System.Linq.Lookup`2" />; in caso contrario, false.</returns>
      <param name="key">Chiave da trovare nell’oggetto <see cref="T:System.Linq.Lookup`2" />.</param>
    </member>
    <member name="P:System.Linq.Lookup`2.Count">
      <summary>Ottiene il numero di coppie di insiemi chiave/valore contenute nell'oggetto <see cref="T:System.Linq.Lookup`2" />.</summary>
      <returns>Numero di coppie di insiemi chiave/valore contenute nell'oggetto <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.GetEnumerator">
      <summary>Restituisce un enumeratore generico che consente di scorrere l’oggetto <see cref="T:System.Linq.Lookup`2" />.</summary>
      <returns>Enumeratore per <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Item(`0)">
      <summary>Ottiene l’insieme di valori indicizzati dalla chiave specificata.</summary>
      <returns>L’insieme di valori indicizzati dalla chiave specificata.</returns>
      <param name="key">Chiave dell’insieme desiderato di valori.</param>
    </member>
    <member name="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Restituisce un enumeratore che scorre la classe <see cref="T:System.Linq.Lookup`2" />.Questa classe non può essere ereditata.</summary>
      <returns>Enumeratore per <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="T:System.Linq.Queryable">
      <summary>Fornisce un set di metodi static (Shared in Visual Basic) per l'esecuzione di query su strutture dati che implementano <see cref="T:System.Linq.IQueryable`1" />.</summary>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
      <summary>Applica una funzione accumulatore a una sequenza.</summary>
      <returns>Valore finale dell'accumulatore.</returns>
      <param name="source">Una sequenza su cui aggregare.</param>
      <param name="func">Una funzione accumulatore da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="func" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
      <summary>Applica una funzione accumulatore a una sequenza.Il valore di inizializzazione specificato viene utilizzato come valore iniziale dell'accumulatore.</summary>
      <returns>Valore finale dell'accumulatore.</returns>
      <param name="source">Una sequenza su cui aggregare.</param>
      <param name="seed">Valore iniziale dell'accumulatore.</param>
      <param name="func">Una funzione accumulatore da richiamare per ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Tipo del valore dell'accumulatore.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="func" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
      <summary>Applica una funzione accumulatore a una sequenza.Il valore di inizializzazione specificato viene utilizzato come valore iniziale dell'accumulatore e la funzione specificata viene utilizzata per selezionare il valore risultante.</summary>
      <returns>Il valore finale trasformato dell'accumulatore.</returns>
      <param name="source">Una sequenza su cui aggregare.</param>
      <param name="seed">Valore iniziale dell'accumulatore.</param>
      <param name="func">Una funzione accumulatore da richiamare per ogni elemento.</param>
      <param name="selector">Una funzione per trasformare il valore finale dell'accumulatore nel valore risultante.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Tipo del valore dell'accumulatore.</typeparam>
      <typeparam name="TResult">Tipo del valore risultante.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="func" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Determina se tutti gli elementi di una sequenza soddisfano una condizione.</summary>
      <returns>true se ogni elemento della sequenza di origine supera il test per il predicato specificato o se la sequenza è vuota; in caso contrario, false.</returns>
      <param name="source">Una sequenza i cui elementi sono da testare rispetto a una condizione.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
      <summary>Determina se una sequenza contiene elementi.</summary>
      <returns>true se la sequenza di origine contiene elementi; in caso contrario, false.</returns>
      <param name="source">Una sequenza da verificare per controllare se è vuota.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Determina un qualsiasi elemento di una sequenza soddisfa una condizione.</summary>
      <returns>true se gli elementi nella sequenza di origine superano il test per il predicato specificato; in caso contrario, false.</returns>
      <param name="source">Una sequenza i cui elementi sono da testare rispetto a una condizione.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Converte un generico oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> in un generico oggetto <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <returns>Un oggetto <see cref="T:System.Linq.IQueryable`1" /> che rappresenta la sequenza di input.</returns>
      <param name="source">Sequenza da convertire.</param>
      <typeparam name="TElement">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
      <summary>Converte <see cref="T:System.Collections.IEnumerable" /> in <see cref="T:System.Linq.IQueryable" />.</summary>
      <returns>Un oggetto <see cref="T:System.Linq.IQueryable" /> che rappresenta la sequenza di input.</returns>
      <param name="source">Sequenza da convertire.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> non implementa <see cref="T:System.Collections.Generic.IEnumerable`1" /> per qualche <paramref name="T" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Decimal" />.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media <see cref="T:System.Decimal" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Double" />.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media <see cref="T:System.Double" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Int32" />.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media <see cref="T:System.Int32" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Int64" />.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media <see cref="T:System.Int64" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>Calcola la media di una sequenza che ammette valori <see cref="T:System.Decimal" /> nullable.</summary>
      <returns>Media della sequenza di valori, null se la sequenza di origine è vuota o contiene solo valori null.</returns>
      <param name="source">Sequenza che di valori <see cref="T:System.Decimal" /> nullable di cui calcolare la media .</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>Calcola la media di una sequenza che ammette valori <see cref="T:System.Double" /> nullable.</summary>
      <returns>Media della sequenza di valori, null se la sequenza di origine è vuota o contiene solo valori null.</returns>
      <param name="source">Sequenza che di valori <see cref="T:System.Double" /> nullable di cui calcolare la media .</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>Calcola la media di una sequenza che ammette valori <see cref="T:System.Int32" /> nullable.</summary>
      <returns>Media della sequenza di valori, null se la sequenza di origine è vuota o contiene solo valori null.</returns>
      <param name="source">Sequenza che di valori <see cref="T:System.Int32" /> nullable di cui calcolare la media .</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>Calcola la media di una sequenza che ammette valori <see cref="T:System.Int64" /> nullable.</summary>
      <returns>Media della sequenza di valori, null se la sequenza di origine è vuota o contiene solo valori null.</returns>
      <param name="source">Sequenza che di valori <see cref="T:System.Int64" /> nullable di cui calcolare la media .</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>Calcola la media di una sequenza che ammette valori <see cref="T:System.Single" /> nullable.</summary>
      <returns>Media della sequenza di valori, null se la sequenza di origine è vuota o contiene solo valori null.</returns>
      <param name="source">Sequenza che di valori <see cref="T:System.Single" /> nullable di cui calcolare la media .</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Single" />.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media <see cref="T:System.Single" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Decimal" /> ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Sequenza di valori utilizzati per calcolare una media.</param>
      <param name="selector">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Double" /> ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Int32" /> ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Int64" /> ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Decimal" /> nullable ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza di valori, null se la sequenza <paramref name="source" /> è vuota o contiene solo valori null.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Double" /> nullable ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza di valori, null se la sequenza <paramref name="source" /> è vuota o contiene solo valori null.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Int32" /> nullable ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza di valori, null se la sequenza <paramref name="source" /> è vuota o contiene solo valori null.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Int64" /> nullable ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza di valori, null se la sequenza <paramref name="source" /> è vuota o contiene solo valori null.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Single" /> nullable ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza di valori, null se la sequenza <paramref name="source" /> è vuota o contiene solo valori null.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Calcola la media di una sequenza di valori <see cref="T:System.Single" /> ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
      <summary>Converte gli elementi di un oggetto <see cref="T:System.Linq.IQueryable" /> nel tipo specificato.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene ogni elemento della sequenza di origine convertito nel tipo specificato.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable" /> che contiene gli elementi da convertire.</param>
      <typeparam name="TResult">Tipo in cui convertire gli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidCastException">Non è possibile eseguire il cast di un elemento della sequenza al tipo <paramref name="TResult" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Concatena due sequenze.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene gli elementi concatenati delle due sequenze di input.</returns>
      <param name="source1">Prima sequenza da concatenare.</param>
      <param name="source2">Sequenza da concatenare alla prima sequenza.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> o <paramref name="source2" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
      <summary>Determina se una sequenza contiene uno specifico elemento utilizzando l'operatore di confronto uguaglianze predefinito.</summary>
      <returns>true se la sequenza di input contiene un elemento con la chiave specificata; in caso contrario, false.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> in cui individuare <paramref name="item" />.</param>
      <param name="item">Oggetto da individuare nella sequenza .</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determina se una sequenza contiene un elemento specificato utilizzando un oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>true se la sequenza di input contiene un elemento con la chiave specificata; in caso contrario, false.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> in cui individuare <paramref name="item" />.</param>
      <param name="item">Oggetto da individuare nella sequenza .</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare i valori.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
      <summary>Restituisce il numero di elementi in una sequenza.</summary>
      <returns>Numero di elementi nella sequenza di input.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene gli elementi da contare.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.OverflowException">Il numero di elementi in <paramref name="source" /> è maggiore di <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Restituisce il numero di elementi nella sequenza specificata che soddisfano una condizione.</summary>
      <returns>Il numero di elementi nella sequenza che soddisfa la condizione nella funzione predicativa.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> che contiene gli elementi da contare.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
      <exception cref="T:System.OverflowException">Il numero di elementi in <paramref name="source" /> è maggiore di <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
      <summary>Restituisce gli elementi della sequenza specificata o il valore predefinito del parametro di tipo in un insieme di singleton se la sequenza è vuota.</summary>
      <returns>Oggetto  <see cref="T:System.Linq.IQueryable`1" /> che contiene default(<paramref name="TSource" />) se <paramref name="source" /> è vuota; in caso contrario, <paramref name="source" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> per il quale restituire un valore predefinito se vuoto.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
      <summary>Restituisce gli elementi della sequenza specificata o il valore specificato in un insieme di singleton se la sequenza è vuota.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene <paramref name="defaultValue" /> se <paramref name="source" /> è vuota; in caso contrario, <paramref name="source" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> per il quale restituire il valore specificato se vuoto.</param>
      <param name="defaultValue">Valore da restituire se la sequenza è vuota.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
      <summary>Restituisce elementi distinti da una sequenza utilizzando l'operatore di confronto uguaglianze predefinito per confrontare i valori.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene elementi distinti da <paramref name="source" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> da cui rimuovere i duplicati.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Restituisce elementi distinti da una sequenza utilizzando uno specificato <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare valori.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene elementi distinti da <paramref name="source" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> da cui rimuovere i duplicati.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare i valori.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="comparer" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Restituisce l'elemento in corrispondenza dell’indice specificato in una sequenza.</summary>
      <returns>L’elemento alla posizione specificata in <paramref name="source" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> dal quale restituire un elemento.</param>
      <param name="index">Indice in base zero dell'elemento da recuperare.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> è minore di zero.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Restituisce l'elemento in corrispondenza di un indice specificato in una sequenza o un valore predefinito se l'indice è esterno all'intervallo.</summary>
      <returns>default(<paramref name="TSource" />) se <paramref name="index" /> è esterno ai limiti di <paramref name="source" />; in caso contrario, l'elemento in corrispondenza della posizione specificata in <paramref name="source" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> dal quale restituire un elemento.</param>
      <param name="index">Indice in base zero dell'elemento da recuperare.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produce la differenza insiemistica di due sequenze utilizzando l'operatore di confronto eguaglianze predefinito per confrontare i valori.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene la differenza di set delle due sequenze.</returns>
      <param name="source1">Oggetto <see cref="T:System.Linq.IQueryable`1" /> di cui saranno restituiti gli elementi che non sono presenti anche in <paramref name="source2" />.</param>
      <param name="source2">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi che sono presenti anche nella prima sequenza non saranno visualizzati nella sequenza restituita.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> o <paramref name="source2" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produce la differenza insiemistica delle due sequenze utilizzando l’oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> specificato per confrontare i valori.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene la differenza di set delle due sequenze.</returns>
      <param name="source1">Oggetto <see cref="T:System.Linq.IQueryable`1" /> di cui saranno restituiti gli elementi che non sono presenti anche in <paramref name="source2" />.</param>
      <param name="source2">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi che sono presenti anche nella prima sequenza non saranno visualizzati nella sequenza restituita.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare i valori.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> o <paramref name="source2" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
      <summary>Restituisce il primo elemento di una sequenza.</summary>
      <returns>Il primo elemento in <paramref name="source" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> di cui restituire il primo elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">La sequenza di origine è vuota.</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Restituisce il primo elemento di una sequenza che soddisfa una condizione specificata.</summary>
      <returns>Il primo elemento in <paramref name="source" /> che passa il test rispetto a <paramref name="predicate" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> dal quale restituire un elemento.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">Nessun elemento soddisfa la condizione in <paramref name="predicate" />.-oppure-La sequenza di origine è vuota.</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Restituisce il primo elemento di una sequenza o un valore predefinito se la sequenza non contiene elementi.</summary>
      <returns>default(<paramref name="TSource" />) se <paramref name="source" /> è vuota; in caso contrario, il primo elemento di <paramref name="source" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> di cui restituire il primo elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Restituisce il primo elemento di una sequenza che soddisfa una condizione specificata o un valore predefinito se un tale elemento non viene trovato.</summary>
      <returns>default(<paramref name="TSource" />) se <paramref name="source" /> è vuota o se nessun elemento supera il test specificato da <paramref name="predicate" />; in caso contrario, il primo elemento in <paramref name="source" /> che supera il test specificato da <paramref name="predicate" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> dal quale restituire un elemento.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Raggruppa gli elementi di una sequenza secondo una specificata funzione del selettore principale.</summary>
      <returns>Oggetto IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# o IQueryable(Of IGrouping(Of TKey, TSource)) in Visual Basic dove ciascun oggetto <see cref="T:System.Linq.IGrouping`2" /> contiene una sequenza di oggetti e una chiave.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono da raggruppare.</param>
      <param name="keySelector">Funzione per estrarre la chiave per ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dalla funzione rappresentata nell'oggetto <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Raggruppa gli elementi di una sequenza secondo una specificata funzione del selettore principale e confronta le chiavi utilizzando un operatore di confronto specificato.</summary>
      <returns>Oggetto IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# o IQueryable(Of IGrouping(Of TKey, TSource)) in Visual Basic dove ciascun oggetto <see cref="T:System.Linq.IGrouping`2" /> contiene una sequenza di oggetti e una chiave.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono da raggruppare.</param>
      <param name="keySelector">Funzione per estrarre la chiave per ogni elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dalla funzione rappresentata nell'oggetto <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="comparer" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
      <summary>Raggruppa gli elementi di una sequenza in base a una funzione specificata del selettore principale e proietta gli elementi di ogni gruppo utilizzando una funzione specificata.</summary>
      <returns>Oggetto IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# o IQueryable(Of IGrouping(Of TKey, TElement)) in Visual Basic dove ciascun oggetto <see cref="T:System.Linq.IGrouping`2" /> contiene una sequenza di oggetti e una chiave <paramref name="TElement" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono da raggruppare.</param>
      <param name="keySelector">Funzione per estrarre la chiave per ogni elemento.</param>
      <param name="elementSelector">Funzione per eseguire il mapping di ogni elemento di origine a un elemento in un <see cref="T:System.Linq.IGrouping`2" />.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dalla funzione rappresentata nell'oggetto <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo degli elementi contenuti in ciascun oggetto <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Raggruppa gli elementi di una sequenza e proietta gli elementi di ogni gruppo utilizzando una funzione specificata.I valori chiave vengono confrontati utilizzando un operatore di confronto specificato.</summary>
      <returns>Oggetto IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# o IQueryable(Of IGrouping(Of TKey, TElement)) in Visual Basic dove ciascun oggetto <see cref="T:System.Linq.IGrouping`2" /> contiene una sequenza di oggetti e una chiave <paramref name="TElement" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono da raggruppare.</param>
      <param name="keySelector">Funzione per estrarre la chiave per ogni elemento.</param>
      <param name="elementSelector">Funzione per eseguire il mapping di ogni elemento di origine a un elemento in un <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dalla funzione rappresentata nell'oggetto <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo degli elementi contenuti in ciascun oggetto <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> o <paramref name="comparer" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
      <summary>Raggruppa gli elementi di una sequenza in base a una funzione del selettore principale specificata e crea un valore risultante da ciascun gruppo e relativa chiave.Gli elementi di ogni gruppo vengono proiettati utilizzando una funzione specificata.</summary>
      <returns>Oggetto T:System.Linq.IQueryable`1 con un tipo di argomento di <paramref name="TResult" /> e dove ciascun elemento rappresenta una proiezione su un gruppo e sulla relativa chiave.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono da raggruppare.</param>
      <param name="keySelector">Funzione per estrarre la chiave per ogni elemento.</param>
      <param name="elementSelector">Funzione per eseguire il mapping di ogni elemento di origine a un elemento in un <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">Funzione per creare un valore di risultato da ogni gruppo.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dalla funzione rappresentata nell'oggetto <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo degli elementi contenuti in ciascun oggetto <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">Tipo del valore restituito dall'oggetto <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> o <paramref name="resultSelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Raggruppa gli elementi di una sequenza in base a una funzione del selettore principale specificata e crea un valore risultante da ciascun gruppo e relativa chiave.Le chiavi sono confrontate utilizzando un operatore di confronto specificato e gli elementi di ogni gruppo vengono proiettati utilizzando una funzione specificata.</summary>
      <returns>Oggetto T:System.Linq.IQueryable`1 con un tipo di argomento di <paramref name="TResult" /> e dove ciascun elemento rappresenta una proiezione su un gruppo e sulla relativa chiave.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono da raggruppare.</param>
      <param name="keySelector">Funzione per estrarre la chiave per ogni elemento.</param>
      <param name="elementSelector">Funzione per eseguire il mapping di ogni elemento di origine a un elemento in un <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">Funzione per creare un valore di risultato da ogni gruppo.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dalla funzione rappresentata nell'oggetto <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo degli elementi contenuti in ciascun oggetto <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">Tipo del valore restituito dall'oggetto <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> o <paramref name="resultSelector" /> o <paramref name="comparer" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
      <summary>Raggruppa gli elementi di una sequenza in base a una funzione del selettore principale specificata e crea un valore risultante da ciascun gruppo e relativa chiave.</summary>
      <returns>Oggetto T:System.Linq.IQueryable`1 con un tipo di argomento di <paramref name="TResult" /> e dove ciascun elemento rappresenta una proiezione su un gruppo e sulla relativa chiave.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono da raggruppare.</param>
      <param name="keySelector">Funzione per estrarre la chiave per ogni elemento.</param>
      <param name="resultSelector">Funzione per creare un valore di risultato da ogni gruppo.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dalla funzione rappresentata nell'oggetto <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Tipo del valore restituito dall'oggetto <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="resultSelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Raggruppa gli elementi di una sequenza in base a una funzione del selettore principale specificata e crea un valore risultante da ciascun gruppo e relativa chiave.Le chiavi vengono confrontate utilizzando un operatore di confronto specificato.</summary>
      <returns>Oggetto T:System.Linq.IQueryable`1 con un tipo di argomento di <paramref name="TResult" /> e dove ciascun elemento rappresenta una proiezione su un gruppo e sulla relativa chiave.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono da raggruppare.</param>
      <param name="keySelector">Funzione per estrarre la chiave per ogni elemento.</param>
      <param name="resultSelector">Funzione per creare un valore di risultato da ogni gruppo.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dalla funzione rappresentata nell'oggetto <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Tipo del valore restituito dall'oggetto <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="resultSelector" /> o <paramref name="comparer" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
      <summary>Correla gli elementi di due sequenze in base all'uguaglianza delle chiavi e raggruppa i risultati.Per confrontare le chiavi viene utilizzato l'operatore di confronto uguaglianze predefinito.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene elementi di tipo <paramref name="TResult" /> ottenuti eseguendo un'aggiunta raggruppata delle due sequenze.</returns>
      <param name="outer">Prima sequenza da unire.</param>
      <param name="inner">Sequenza da unire alla prima sequenza.</param>
      <param name="outerKeySelector">Funzione per estrarre la chiave di aggiunta da ogni elemento della prima sequenza.</param>
      <param name="innerKeySelector">Funzione per estrarre la chiave di aggiunta da ogni elemento della seconda sequenza.</param>
      <param name="resultSelector">Funzione per creare un elemento di risultato da un elemento dalla prima sequenza e un insieme di elementi corrispondenti dalla seconda sequenza.</param>
      <typeparam name="TOuter">Tipo degli elementi della prima sequenza.</typeparam>
      <typeparam name="TInner">Tipo degli elementi della seconda sequenza.</typeparam>
      <typeparam name="TKey">Tipo delle chiavi restituite dalle funzioni del selettore principale.</typeparam>
      <typeparam name="TResult">Tipo degli elementi di risultato.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> o <paramref name="inner" /> o <paramref name="outerKeySelector" /> o <paramref name="innerKeySelector" /> o <paramref name="resultSelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correla gli elementi di due sequenze in base all'uguaglianza delle chiavi e raggruppa i risultati.Viene utilizzato un oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> specificato per confrontare le chiavi.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene elementi di tipo <paramref name="TResult" /> ottenuti eseguendo un'aggiunta raggruppata delle due sequenze.</returns>
      <param name="outer">Prima sequenza da unire.</param>
      <param name="inner">Sequenza da unire alla prima sequenza.</param>
      <param name="outerKeySelector">Funzione per estrarre la chiave di aggiunta da ogni elemento della prima sequenza.</param>
      <param name="innerKeySelector">Funzione per estrarre la chiave di aggiunta da ogni elemento della seconda sequenza.</param>
      <param name="resultSelector">Funzione per creare un elemento di risultato da un elemento dalla prima sequenza e un insieme di elementi corrispondenti dalla seconda sequenza.</param>
      <param name="comparer">Un operatore di confronto per la codifica hash e il confronto delle chiavi.</param>
      <typeparam name="TOuter">Tipo degli elementi della prima sequenza.</typeparam>
      <typeparam name="TInner">Tipo degli elementi della seconda sequenza.</typeparam>
      <typeparam name="TKey">Tipo delle chiavi restituite dalle funzioni del selettore principale.</typeparam>
      <typeparam name="TResult">Tipo degli elementi di risultato.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> o <paramref name="inner" /> o <paramref name="outerKeySelector" /> o <paramref name="innerKeySelector" /> o <paramref name="resultSelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produce l’intersezione insiemistica di due sequenze utilizzando l'operatore di confronto uguaglianze predefinito per confrontare i valori.</summary>
      <returns>Una sequenza che contiene l'intersezione insiemistica delle due sequenze.</returns>
      <param name="source1">Una sequenza di cui vengono restituiti gli elementi distinti presenti anche in <paramref name="source2" />.</param>
      <param name="source2">Una sequenza di cui vengono restituiti gli elementi distinti presenti anche nella prima sequenza.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> o <paramref name="source2" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produce la differenza insiemistica delle due sequenze utilizzando l’oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> specificato per confrontare i valori.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene l'intersezione di set delle due sequenze.</returns>
      <param name="source1">
        <see cref="T:System.Linq.IQueryable`1" /> di cui vengono restituiti gli elementi distinti che sono presenti anche in <paramref name="source2" />.</param>
      <param name="source2">Un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> di cui vengono restituiti gli elementi distinti presenti anche nella prima sequenza.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare i valori.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> o <paramref name="source2" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
      <summary>Correla gli elementi di due sequenze in base alle chiavi corrispondenti.Per confrontare le chiavi viene utilizzato l'operatore di confronto uguaglianze predefinito.</summary>
      <returns>Un oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene elementi di tipo <paramref name="TResult" /> ottenuti eseguendo un inner join sulle due sequenze.</returns>
      <param name="outer">Prima sequenza da unire.</param>
      <param name="inner">Sequenza da unire alla prima sequenza.</param>
      <param name="outerKeySelector">Funzione per estrarre la chiave di aggiunta da ogni elemento della prima sequenza.</param>
      <param name="innerKeySelector">Funzione per estrarre la chiave di aggiunta da ogni elemento della seconda sequenza.</param>
      <param name="resultSelector">Funzione per creare un elemento di risultato da due elementi corrispondenti.</param>
      <typeparam name="TOuter">Tipo degli elementi della prima sequenza.</typeparam>
      <typeparam name="TInner">Tipo degli elementi della seconda sequenza.</typeparam>
      <typeparam name="TKey">Tipo delle chiavi restituite dalle funzioni del selettore principale.</typeparam>
      <typeparam name="TResult">Tipo degli elementi di risultato.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> o <paramref name="inner" /> o <paramref name="outerKeySelector" /> o <paramref name="innerKeySelector" /> o <paramref name="resultSelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correla gli elementi di due sequenze in base alle chiavi corrispondenti.Viene utilizzato un oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> specificato per confrontare le chiavi.</summary>
      <returns>Un oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene elementi di tipo <paramref name="TResult" /> ottenuti eseguendo un inner join sulle due sequenze.</returns>
      <param name="outer">Prima sequenza da unire.</param>
      <param name="inner">Sequenza da unire alla prima sequenza.</param>
      <param name="outerKeySelector">Funzione per estrarre la chiave di aggiunta da ogni elemento della prima sequenza.</param>
      <param name="innerKeySelector">Funzione per estrarre la chiave di aggiunta da ogni elemento della seconda sequenza.</param>
      <param name="resultSelector">Funzione per creare un elemento di risultato da due elementi corrispondenti.</param>
      <param name="comparer">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per la codifica hash e il confronto delle chiavi.</param>
      <typeparam name="TOuter">Tipo degli elementi della prima sequenza.</typeparam>
      <typeparam name="TInner">Tipo degli elementi della seconda sequenza.</typeparam>
      <typeparam name="TKey">Tipo delle chiavi restituite dalle funzioni del selettore principale.</typeparam>
      <typeparam name="TResult">Tipo degli elementi di risultato.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> o <paramref name="inner" /> o <paramref name="outerKeySelector" /> o <paramref name="innerKeySelector" /> o <paramref name="resultSelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
      <summary>Restituisce l'ultimo elemento in una sequenza.</summary>
      <returns>Il valore dell’ultima posizione in <paramref name="source" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> di cui restituire l’ultimo elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">La sequenza di origine è vuota.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Restituisce l’ultimo elemento di una sequenza che soddisfa una condizione specificata.</summary>
      <returns>L'ultimo elemento in <paramref name="source" /> che supera il test specificato da <paramref name="predicate" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> dal quale restituire un elemento.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">Nessun elemento soddisfa la condizione in <paramref name="predicate" />.-oppure-La sequenza di origine è vuota.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Restituisce l’ultimo elemento in una sequenza o un valore predefinito se la sequenza non contiene elementi.</summary>
      <returns>default(<paramref name="TSource" />) <paramref name="source" /> è vuota; in caso contrario, l'ultimo elemento di <paramref name="source" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> di cui restituire l’ultimo elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Restituisce l’ultimo elemento di una sequenza che soddisfa una condizione specificata o un valore predefinito se un tale elemento non viene trovato.</summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="source" /> è vuota o se nessun elemento supera il test nella funzione predicativa; in caso contrario, l'ultimo elemento di <paramref name="source" /> che passa il test nella funzione predicativa.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> dal quale restituire un elemento.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
      <summary>Restituisce un oggetto <see cref="T:System.Int64" /> che rappresenta il numero totale di elementi in una sequenza.</summary>
      <returns>Numero di elementi nella <paramref name="source" />.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> che contiene gli elementi da contare.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.OverflowException">Numero di elementi supera <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Restituisce un oggetto <see cref="T:System.Int64" /> che rappresenta il numero di elementi in una sequenza che soddisfano una condizione.</summary>
      <returns>Il numero di elementi in <paramref name="source" /> che soddisfa la condizione nella funzione predicativa.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> che contiene gli elementi da contare.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
      <exception cref="T:System.OverflowException">Il numero di elementi supera <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
      <summary>Restituisce il valore massimo di un generico oggetto <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Una sequenza di valori della quale determinare il massimo.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Richiama una funzione di proiezione su ogni elemento di un generico oggetto <see cref="T:System.Linq.IQueryable`1" /> e restituisce il valore massimo risultante.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Una sequenza di valori della quale determinare il massimo.</param>
      <param name="selector">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo del valore restituito dalla funzione rappresentata dall'oggetto <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
      <summary>Restituisce il valore minimo di un generico oggetto <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Una sequenza di valori della quale determinare il minimo.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Richiama una funzione di proiezione su ogni elemento di un generico oggetto <see cref="T:System.Linq.IQueryable`1" /> e restituisce il valore minimo risultante.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Una sequenza di valori della quale determinare il minimo.</param>
      <param name="selector">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo del valore restituito dalla funzione rappresentata dall'oggetto <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
      <summary>Filtra gli elementi di un oggetto <see cref="T:System.Linq.IQueryable" /> in base a un tipo specificato.</summary>
      <returns>Insieme che contiene elementi da <paramref name="source" /> che sono di tipo <paramref name="TResult" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable" /> i cui elementi sono da filtrare.</param>
      <typeparam name="TResult">Il tipo in base al quale filtrare gli elementi della sequenza.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Ordina in senso crescente gli elementi di una sequenza secondo una chiave.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IOrderedQueryable`1" /> i cui elementi vengono ordinati secondo una chiave.</returns>
      <param name="source">Sequenza di valori da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da un elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dalla funzione rappresentata dall'oggetto <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Ordina in ordine crescente gli elementi di una sequenza utilizzando un operatore di confronto specificato.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IOrderedQueryable`1" /> i cui elementi vengono ordinati secondo una chiave.</returns>
      <param name="source">Sequenza di valori da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da un elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dalla funzione rappresentata dall'oggetto <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="comparer" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Ordina in senso decrescente gli elementi di una sequenza secondo una chiave.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IOrderedQueryable`1" /> i cui elementi vengono ordinati in senso decrescente in base a una chiave.</returns>
      <param name="source">Sequenza di valori da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da un elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dalla funzione rappresentata dall'oggetto <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Ordina in senso decrescente gli elementi di una sequenza utilizzando un operatore di confronto specificato.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IOrderedQueryable`1" /> i cui elementi vengono ordinati in senso decrescente in base a una chiave.</returns>
      <param name="source">Sequenza di valori da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da un elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dalla funzione rappresentata dall'oggetto <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="comparer" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
      <summary>Inverte l'ordine degli elementi in una sequenza.</summary>
      <returns>Un oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi corrispondono a quelli della sequenza di input, in ordine inverso.</returns>
      <param name="source">Sequenza di valori da invertire.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Proietta ogni elemento di una sequenza in una nuova maschera.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono il risultato ottenuto richiamando una funzione di proiezione su ogni elemento di <paramref name="source" />.</returns>
      <param name="source">Sequenza di valori da proiettare.</param>
      <param name="selector">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo del valore restituito dalla funzione rappresentata dall'oggetto <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
      <summary>Proietta ogni elemento di una sequenza in un nuovo modulo incorporando l'indice dell'elemento.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono il risultato ottenuto richiamando una funzione di proiezione su ogni elemento di <paramref name="source" />.</returns>
      <param name="source">Sequenza di valori da proiettare.</param>
      <param name="selector">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo del valore restituito dalla funzione rappresentata dall'oggetto <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Proietta ogni elemento di una sequenza a un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> e richiama una funzione del selettore di risultato su ogni elemento al suo interno.I valori risultanti da ogni sequenza intermedia vengono combinati in un singola sequenza unidimensionale e restituiti.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono il risultato ottenuto richiamando la funzione di proiezione uno a molti <paramref name="collectionSelector" /> su ogni elemento di <paramref name="source" /> ed eseguire quindi il mapping di ognuno degli elementi di tale sequenza e del corrispondente elemento di origine a un elemento di risultato <paramref name="source" />.</returns>
      <param name="source">Sequenza di valori da proiettare.</param>
      <param name="collectionSelector">Una funzione di proiezione da applicare a ogni elemento della sequenza di input.</param>
      <param name="resultSelector">Una funzione di proiezione da applicare a ogni elemento di ogni sequenza intermedia.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">Il tipo degli elementi intermedi raccolti dalla funzione rappresentata da <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">Tipo degli elementi della sequenza risultante.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="collectionSelector" /> o <paramref name="resultSelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>Proietta ogni elemento di una sequenza a un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> e combina le sequenze risultanti in un’unica sequenza.</summary>
      <returns>Un oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono il risultato ottenuto richiamando una funzione di proiezione uno a molti su ogni elemento della sequenza di input.</returns>
      <param name="source">Sequenza di valori da proiettare.</param>
      <param name="selector">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Il tipo degli elementi della sequenza restituiti dalla funzione rappresentata da <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Proietta ogni elemento di una sequenza a un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che incorpora l'indice dell'elemento di origine che lo ha prodotto.Viene quindi richiamata una funzione del selettore di risultato su ogni elemento di ogni sequenza intermedia e i valori risultanti vengono combinati in una singola sequenza unidimensionale e restituiti.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono il risultato ottenuto richiamando la funzione di proiezione uno a molti <paramref name="collectionSelector" /> su ogni elemento di <paramref name="source" /> ed eseguire quindi il mapping di ognuno degli elementi di tale sequenza e del corrispondente elemento di origine a un elemento di risultato <paramref name="source" />.</returns>
      <param name="source">Sequenza di valori da proiettare.</param>
      <param name="collectionSelector">Una funzione di proiezione da applicare a ogni elemento della sequenza di input; il secondo parametro di questa funzione rappresenta l'indice dell'elemento di origine.</param>
      <param name="resultSelector">Una funzione di proiezione da applicare a ogni elemento di ogni sequenza intermedia.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">Il tipo degli elementi intermedi raccolti dalla funzione rappresentata da <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">Tipo degli elementi della sequenza risultante.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="collectionSelector" /> o <paramref name="resultSelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>Proietta ogni elemento di una sequenza a un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> e combina le sequenze risultanti in un’unica sequenza.L'indice di ogni elemento di origine viene utilizzato nella maschera proiettata di tale elemento.</summary>
      <returns>Un oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono il risultato ottenuto richiamando una funzione di proiezione uno a molti su ogni elemento della sequenza di input.</returns>
      <param name="source">Sequenza di valori da proiettare.</param>
      <param name="selector">Una funzione di proiezione da applicare a ogni elemento; il secondo parametro di questa funzione rappresenta l'indice dell'elemento di origine.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Il tipo degli elementi della sequenza restituiti dalla funzione rappresentata da <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Determina se due sequenze sono uguali utilizzando l'operatore di confronto uguaglianze predefinito per confrontare gli elementi.</summary>
      <returns>true se le due sequenze di origine sono di lunghezza uguale e gli elementi corrispondenti risultano uguali; in caso contrario, false.</returns>
      <param name="source1">
        <see cref="T:System.Linq.IQueryable`1" /> i cui elementi devono venire confrontati con quelli di <paramref name="source2" />.</param>
      <param name="source2">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi devono venire confrontati con quelli della prima sequenza.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> o <paramref name="source2" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determina se due sequenze sono uguali utilizzando un oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> specificato per confrontare gli elementi.</summary>
      <returns>true se le due sequenze di origine sono di lunghezza uguale e gli elementi corrispondenti risultano uguali; in caso contrario, false.</returns>
      <param name="source1">
        <see cref="T:System.Linq.IQueryable`1" /> i cui elementi devono venire confrontati con quelli di <paramref name="source2" />.</param>
      <param name="source2">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi devono venire confrontati con quelli della prima sequenza.</param>
      <param name="comparer">Un oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> da utilizzare per confrontare gli elementi.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> o <paramref name="source2" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
      <summary>Restituisce il singolo elemento di una sequenza e genera un'eccezione se nella sequenza non è presente esattamente un elemento.</summary>
      <returns>Singolo elemento della sequenza di input.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> di cui restituire il singolo elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> presenta più di un elemento.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Restituisce il singolo elemento di una sequenza che soddisfa una condizione specificata e genera un'eccezione se esiste più di un elemento.</summary>
      <returns>Il singolo elemento della sequenza di input che soddisfa la condizione in <paramref name="predicate" />.</returns>
      <param name="source">Un oggetto <see cref="T:System.Linq.IQueryable`1" /> dal quale restituire un singolo elemento.</param>
      <param name="predicate">Funzione per testare un elemento per una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">Nessun elemento soddisfa la condizione in <paramref name="predicate" />.-oppure-Più di un elemento soddisfa la condizione in <paramref name="predicate" />.-oppure-La sequenza di origine è vuota.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Restituisce il singolo elemento di una sequenza o un valore predefinito se la sequenza è vuota. Questo metodo genera un'eccezione se esiste più di un elemento nella sequenza.</summary>
      <returns>Il singolo elemento della sequenza di input, o default(<paramref name="TSource" />) se la sequenza non contiene elementi.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> di cui restituire il singolo elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Restituisce il singolo elemento di una sequenza che soddisfa una condizione specificata o un valore predefinito se tale elemento esiste. Questo metodo genera un'eccezione se più di un elemento soddisfa la condizione.</summary>
      <returns>Il singolo elemento della sequenza di input che soddisfa la condizione <paramref name="predicate" />, o default(<paramref name="TSource" />) se tale elemento non viene trovato.</returns>
      <param name="source">Un oggetto <see cref="T:System.Linq.IQueryable`1" /> dal quale restituire un singolo elemento.</param>
      <param name="predicate">Funzione per testare un elemento per una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Ignora un numero specificato di elementi in una sequenza e quindi restituisce gli elementi rimanenti.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene gli elementi presenti dopo l'indice specificato nella sequenza di input.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> dal quale restituire elementi.</param>
      <param name="count">Il numero di elementi da ignorare prima di restituire gli elementi rimanenti.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Ignora gli elementi in sequenza finché la condizione specificata è soddisfatta e quindi restituisce gli elementi rimanenti.</summary>
      <returns>Un oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene elementi da <paramref name="source" /> a partire dal primo elemento nella serie lineare che non supera il test specificato da <paramref name="predicate" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> dal quale restituire elementi.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Ignora gli elementi in sequenza finché la condizione specificata è soddisfatta e quindi restituisce gli elementi rimanenti.L'indice dell'elemento viene utilizzato nella logica della funzione predicativa.</summary>
      <returns>Un oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene elementi da <paramref name="source" /> a partire dal primo elemento nella serie lineare che non supera il test specificato da <paramref name="predicate" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> dal quale restituire elementi.</param>
      <param name="predicate">Una funzione per testare ogni elemento per una condizione; il secondo parametro di questa funzione rappresenta l'indice dell'elemento di origine.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
      <summary>Calcola la somma di una sequenza di valori <see cref="T:System.Decimal" />.</summary>
      <returns>Somma dei valori della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Decimal" /> di cui calcolare la somma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma è superiore a <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
      <summary>Calcola la somma di una sequenza di valori <see cref="T:System.Double" />.</summary>
      <returns>Somma dei valori della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Double" /> di cui calcolare la somma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
      <summary>Calcola la somma di una sequenza di valori <see cref="T:System.Int32" />.</summary>
      <returns>Somma dei valori della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Int32" /> di cui calcolare la somma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma è superiore a <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
      <summary>Calcola la somma di una sequenza di valori <see cref="T:System.Int64" />.</summary>
      <returns>Somma dei valori della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Int64" /> di cui calcolare la somma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma è superiore a <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>Calcola la somma di una sequenza di valori <see cref="T:System.Decimal" /> nullable.</summary>
      <returns>Somma dei valori della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Decimal" /> nullable di cui calcolare la somma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma è superiore a <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>Calcola la somma di una sequenza di valori <see cref="T:System.Double" /> nullable.</summary>
      <returns>Somma dei valori della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Double" /> nullable di cui calcolare la somma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>Calcola la somma di una sequenza di valori <see cref="T:System.Int32" /> nullable.</summary>
      <returns>Somma dei valori della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Int32" /> nullable di cui calcolare la somma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma è superiore a <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>Calcola la somma di una sequenza di valori <see cref="T:System.Int64" /> nullable.</summary>
      <returns>Somma dei valori della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Int64" /> nullable di cui calcolare la somma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma è superiore a <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>Calcola la somma di una sequenza di valori <see cref="T:System.Single" /> nullable.</summary>
      <returns>Somma dei valori della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Single" /> nullable di cui calcolare la somma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
      <summary>Calcola la somma di una sequenza di valori <see cref="T:System.Single" />.</summary>
      <returns>Somma dei valori della sequenza.</returns>
      <param name="source">Sequenza di valori <see cref="T:System.Single" /> di cui calcolare la somma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Calcola la somma della sequenza di valori <see cref="T:System.Decimal" /> ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori proiettati.</returns>
      <param name="source">Sequenza di valori di tipo <paramref name="TSource" />.</param>
      <param name="selector">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma è superiore a <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Calcola la somma della sequenza di valori <see cref="T:System.Double" /> ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori proiettati.</returns>
      <param name="source">Sequenza di valori di tipo <paramref name="TSource" />.</param>
      <param name="selector">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Calcola la somma della sequenza di valori <see cref="T:System.Int32" /> ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori proiettati.</returns>
      <param name="source">Sequenza di valori di tipo <paramref name="TSource" />.</param>
      <param name="selector">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma è superiore a <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Calcola la somma della sequenza di valori <see cref="T:System.Int64" /> ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori proiettati.</returns>
      <param name="source">Sequenza di valori di tipo <paramref name="TSource" />.</param>
      <param name="selector">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma è superiore a <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Calcola la somma della sequenza di valori <see cref="T:System.Decimal" /> nullable ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori proiettati.</returns>
      <param name="source">Sequenza di valori di tipo <paramref name="TSource" />.</param>
      <param name="selector">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma è superiore a <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Calcola la somma della sequenza di valori <see cref="T:System.Double" /> nullable ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori proiettati.</returns>
      <param name="source">Sequenza di valori di tipo <paramref name="TSource" />.</param>
      <param name="selector">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Calcola la somma della sequenza di valori <see cref="T:System.Int32" /> nullable ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori proiettati.</returns>
      <param name="source">Sequenza di valori di tipo <paramref name="TSource" />.</param>
      <param name="selector">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma è superiore a <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Calcola la somma della sequenza di valori <see cref="T:System.Int64" /> nullable ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori proiettati.</returns>
      <param name="source">Sequenza di valori di tipo <paramref name="TSource" />.</param>
      <param name="selector">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
      <exception cref="T:System.OverflowException">La somma è superiore a <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Calcola la somma della sequenza di valori <see cref="T:System.Single" /> nullable ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori proiettati.</returns>
      <param name="source">Sequenza di valori di tipo <paramref name="TSource" />.</param>
      <param name="selector">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Calcola la somma della sequenza di valori <see cref="T:System.Single" /> ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori proiettati.</returns>
      <param name="source">Sequenza di valori di tipo <paramref name="TSource" />.</param>
      <param name="selector">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Restituisce un numero specificato di elementi contigui dall'inizio di una sequenza.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene il numero specificato di elementi dall'inizio di <paramref name="source" />.</returns>
      <param name="source">Sequenza dalla quale vengono restituiti gli elementi.</param>
      <param name="count">Numero di elementi da restituire.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Restituisce elementi di una sequenza finché una condizione specificata viene soddisfatta.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene elementi dalla sequenza di input che precedono il primo elemento che non soddisfa più il test specificato da <paramref name="predicate" />.</returns>
      <param name="source">Sequenza dalla quale vengono restituiti gli elementi.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Restituisce elementi di una sequenza finché una condizione specificata viene soddisfatta.L'indice dell'elemento viene utilizzato nella logica della funzione predicativa.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene elementi dalla sequenza di input che precedono il primo elemento che non soddisfa più il test specificato da <paramref name="predicate" />.</returns>
      <param name="source">Sequenza dalla quale vengono restituiti gli elementi.</param>
      <param name="predicate">Una funzione per testare ogni elemento per una condizione; il secondo parametro della funzione rappresenta l'indice dell'elemento della sequenza di origine.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Esegue un successivo ordinamento in senso crescente in base a una chiave degli elementi di una sequenza.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IOrderedQueryable`1" /> i cui elementi vengono ordinati secondo una chiave.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IOrderedQueryable`1" /> che contiene gli elementi da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo di chiave restituita dalla funzione rappresentata dall'oggetto <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Esegue un ordinamento secondario in senso crescente degli elementi di una sequenza utilizzando un operatore di confronto specificato.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IOrderedQueryable`1" /> i cui elementi vengono ordinati secondo una chiave.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IOrderedQueryable`1" /> che contiene gli elementi da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da ogni elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo di chiave restituita dalla funzione rappresentata dall'oggetto <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="comparer" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Esegue un successivo ordinamento in senso decrescente in base a una chiave degli elementi di una sequenza.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IOrderedQueryable`1" /> i cui elementi vengono ordinati in senso decrescente in base a una chiave.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IOrderedQueryable`1" /> che contiene gli elementi da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo di chiave restituita dalla funzione rappresentata dall'oggetto <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Esegue un ordinamento secondario in senso decrescente degli elementi di una sequenza utilizzando un operatore di confronto specificato.</summary>
      <returns>Insieme i cui elementi vengono disposti in ordine decrescente in base a una chiave.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IOrderedQueryable`1" /> che contiene gli elementi da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da ogni elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dalla funzione <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="comparer" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produce l'unione insiemistica delle due sequenze utilizzando l'operatore di confronto uguaglianze predefinito.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene gli elementi di entrambe le sequenze di input, tranne i duplicati.</returns>
      <param name="source1">Una sequenza i cui elementi distinti formano il primo insieme per l'operazione di unione.</param>
      <param name="source2">Una sequenza i cui elementi distinti formano il secondo insieme per l'operazione di unione.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> o <paramref name="source2" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produce l'unione insiemistica di due sequenze utilizzando un oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> specificato.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene gli elementi di entrambe le sequenze di input, tranne i duplicati.</returns>
      <param name="source1">Una sequenza i cui elementi distinti formano il primo insieme per l'operazione di unione.</param>
      <param name="source2">Una sequenza i cui elementi distinti formano il secondo insieme per l'operazione di unione.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare i valori.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> o <paramref name="source2" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Filtra una sequenza di valori in base a un predicato.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene gli elementi dalla sequenza di input che soddisfano la condizione specificata da <paramref name="predicate" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> da filtrare.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Filtra una sequenza di valori in base a un predicato.L'indice di ogni elemento viene utilizzato nella logica della funzione predicativa.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene gli elementi dalla sequenza di input che soddisfano la condizione specificata da <paramref name="predicate" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.IQueryable`1" /> da filtrare.</param>
      <param name="predicate">Una funzione per testare ogni elemento per una condizione; il secondo parametro della funzione rappresenta l'indice dell'elemento della sequenza di origine.</param>
      <typeparam name="TSource">Tipo degli elementi dell'oggetto <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Unisce due sequenze tramite la funzione del predicato specificata.</summary>
      <returns>Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene gli elementi uniti delle due sequenze di input.</returns>
      <param name="source1">Prima sequenza da unire.</param>
      <param name="source2">Seconda sequenza da unire.</param>
      <param name="resultSelector">Una funzione che specifica come unire gli elementi dalle due sequenze.</param>
      <typeparam name="TFirst">Tipo degli elementi della prima sequenza di input.</typeparam>
      <typeparam name="TSecond">Tipo degli elementi della seconda sequenza di input.</typeparam>
      <typeparam name="TResult">Tipo degli elementi della sequenza risultante.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> o <paramref name="source2 " /> è null.</exception>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary>Rappresenta un'espressione che ha un operatore binario.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Invia al metodo Visit specifico per questo tipo di nodo.Ad esempio, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> chiama <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Risultato della visita di questo nodo.</returns>
      <param name="visitor">Visitatore con cui visitare questo nodo.</param>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <summary>Ottiene un valore che indica se il nodo della struttura ad albero dell'espressione può essere ridotto.</summary>
      <returns>Vero se la struttura ad albero dell'espressione può essere ridotta, in caso contrario falso.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary>Ottiene la funzione di conversione del tipo utilizzata da un'operazione di assegnazione coalescing o composta.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> che rappresenta una funzione di conversione di tipi.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary>Ottiene un valore che indica se il nodo della struttura ad albero dell'espressione rappresenta una chiamata elevata a un operatore.</summary>
      <returns>true se il nodo rappresenta una chiamata elevata; in caso contrario, .</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary>Ottiene un valore che indica se il nodo della struttura ad albero dell'espressione rappresenta una chiamata elevata a un operatore il cui tipo restituito è elevato a un tipo nullable.</summary>
      <returns>true se il tipo restituito dell'operatore è elevato a un tipo nullable; in caso contrario, false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary>Ottiene l'operando sinistro dell'operazione binaria.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'operando sinistro dell'operazione binaria.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary>Ottiene il metodo di implementazione per l'operazione binaria.</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di implementazione.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <summary>Riduce il nodo dell'espressione binaria a un'espressione più semplice.</summary>
      <returns>L'espressione ridotta.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary>Ottiene l'operando destro dell'operazione binaria.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'operando destro dell'operazione binaria.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <summary>Crea una nuova espressione simile a quella corrente, utilizzando però gli elementi figlio specificati.Se tutti gli elementi figlio sono uguali, verrà restituita l'espressione corrente.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="left">Proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> del risultato. </param>
      <param name="conversion">Proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> del risultato.</param>
      <param name="right">Proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> del risultato. </param>
    </member>
    <member name="T:System.Linq.Expressions.BlockExpression">
      <summary>Rappresenta un blocco che contiene una sequenza di espressioni dove possono essere definite le variabili.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Invia al metodo Visit specifico per questo tipo di nodo.Ad esempio, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> chiama <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Risultato della visita di questo nodo.</returns>
      <param name="visitor">Visitatore con cui visitare questo nodo.</param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
      <summary>Ottiene le espressioni in questo blocco.</summary>
      <returns>L'insieme di sola lettura che contiene tutte le espressioni in questo blocco.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
      <summary>Restituisce il tipo di nodo di questa espressione.I nodi di estensione devono restituire <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> quando si esegue l'override di questo metodo.</summary>
      <returns>Classe <see cref="T:System.Linq.Expressions.ExpressionType" /> dell'espressione.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Result">
      <summary>Ottiene l'ultima espressione in questo blocco.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'ultima espressione in questo blocco.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Type">
      <summary>Ottiene il tipo statico dell'espressione rappresentata da <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.BlockExpression.Type" /> che rappresenta il tipo statico dell'espressione.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea una nuova espressione simile a quella corrente, utilizzando però gli elementi figlio specificati.Se tutti gli elementi figlio sono uguali, verrà restituita l'espressione corrente.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="variables">Proprietà <see cref="P:System.Linq.Expressions.BlockExpression.Variables" /> del risultato. </param>
      <param name="expressions">Proprietà <see cref="P:System.Linq.Expressions.BlockExpression.Expressions" /> del risultato. </param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Variables">
      <summary>Ottiene le variabili definite in questo blocco.</summary>
      <returns>L'insieme di sola lettura che contiene tutte le variabili definite in questo blocco.</returns>
    </member>
    <member name="T:System.Linq.Expressions.CatchBlock">
      <summary>Rappresenta un'istruzione catch in un blocco try.</summary>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Body">
      <summary>Ottiene il corpo di questo blocco catch.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il corpo catch.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Filter">
      <summary>Ottiene il corpo del filtro <see cref="T:System.Linq.Expressions.CatchBlock" />.</summary>
      <returns>L'oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il corpo del filtro <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Test">
      <summary>Ottiene il tipo <see cref="T:System.Exception" /> che questo handler cattura.</summary>
      <returns>L'oggetto <see cref="T:System.Type" /> che rappresenta il tipo di <see cref="T:System.Exception" /> che questo handler cattura.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.ToString">
      <summary>Restituisce un oggetto <see cref="T:System.String" /> che rappresenta l'oggetto <see cref="T:System.Object" />.</summary>
      <returns>Oggetto <see cref="T:System.String" /> che rappresenta l'oggetto <see cref="T:System.Object" /> corrente.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea una nuova espressione simile a quella corrente, utilizzando però gli elementi figlio specificati.Se tutti gli elementi figlio sono uguali, verrà restituita l'espressione corrente.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="variable">Proprietà <see cref="P:System.Linq.Expressions.CatchBlock.Variable" /> del risultato.</param>
      <param name="filter">Proprietà <see cref="P:System.Linq.Expressions.CatchBlock.Filter" /> del risultato.</param>
      <param name="body">Proprietà <see cref="P:System.Linq.Expressions.CatchBlock.Body" /> del risultato.</param>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Variable">
      <summary>Ottiene un riferimento all'oggetto <see cref="T:System.Exception" /> catturato da questo handler.</summary>
      <returns>L'oggetto <see cref="T:System.Linq.Expressions.ParameterExpression" /> che rappresenta un riferimento all'oggetto <see cref="T:System.Exception" /> catturato da questo handler.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary>Rappresenta un'espressione che ha un operatore condizionale.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Invia al metodo Visit specifico per questo tipo di nodo.Ad esempio, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> chiama <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Risultato della visita di questo nodo.</returns>
      <param name="visitor">Visitatore con cui visitare questo nodo.</param>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary>Ottiene l'espressione da eseguire se il test restituisce false.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'espressione da eseguire se il test è false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary>Ottiene l'espressione da eseguire se il test restituisce true.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'espressione da eseguire se il test è true.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <summary>Restituisce il tipo di nodo di questa espressione.I nodi di estensione devono restituire <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> quando si esegue l'override di questo metodo.</summary>
      <returns>Classe <see cref="T:System.Linq.Expressions.ExpressionType" /> dell'espressione.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary>Ottiene il test dell'operazione condizionale.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il test dell'operazione condizionale.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
      <summary>Ottiene il tipo statico dell'espressione rappresentata da <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.ConditionalExpression.Type" /> che rappresenta il tipo statico dell'espressione.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea una nuova espressione simile a quella corrente, utilizzando però gli elementi figlio specificati.Se tutti gli elementi figlio sono uguali, verrà restituita l'espressione corrente.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="test">Proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> del risultato.</param>
      <param name="ifTrue">Proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> del risultato.</param>
      <param name="ifFalse">Proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> del risultato.</param>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary>Rappresenta un'espressione che ha un valore costante.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Invia al metodo Visit specifico per questo tipo di nodo.Ad esempio, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> chiama <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Risultato della visita di questo nodo.</returns>
      <param name="visitor">Visitatore con cui visitare questo nodo.</param>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <summary>Restituisce il tipo di nodo di questo oggetto Expression.I nodi di estensione devono restituire <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> quando si esegue l'override di questo metodo.</summary>
      <returns>Classe <see cref="T:System.Linq.Expressions.ExpressionType" /> dell'espressione.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Type">
      <summary>Ottiene il tipo statico dell'espressione rappresentata da <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.ConstantExpression.Type" /> che rappresenta il tipo statico dell'espressione.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary>Ottiene il valore dell'espressione costante.</summary>
      <returns>
        <see cref="T:System.Object" /> uguale al valore dell'espressione rappresentata.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DebugInfoExpression">
      <summary>Crea o cancella un punto di sequenza per le informazioni di debug,consentendo al debugger di evidenziare il codice sorgente corretto durante l'esecuzione del debug.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Invia al metodo Visit specifico per questo tipo di nodo.Ad esempio, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> chiama <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Risultato della visita di questo nodo.</returns>
      <param name="visitor">Visitatore con cui visitare questo nodo.</param>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <summary>Ottiene <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> che rappresenta il file di origine.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> che rappresenta il file di origine.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <summary>Ottiene la colonna finale di questo oggetto <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>Numero della colonna finale del codice utilizzato per generare l'espressione di cui è stato eseguito il wrapping.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <summary>Ottiene la colonna finale di questo oggetto <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>Numero della riga finale del codice utilizzato per generare l'espressione di cui è stato eseguito il wrapping.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <summary>Ottiene il valore per indicare se <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> è per la cancellazione di un punto di sequenza.</summary>
      <returns>True se <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> è per la cancellazione di un punto di sequenza, in caso contrario false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <summary>Restituisce il tipo di nodo di questa proprietà <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ExpressionType" /> che rappresenta l'espressione.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <summary>Ottiene la colonna iniziale di questo oggetto <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>Numero della colonna iniziale del codice utilizzato per generare l'espressione di cui è stato eseguito il wrapping.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <summary>Ottiene la colonna iniziale di questo oggetto <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>Numero della riga iniziale del codice utilizzato per generare l'espressione di cui è stato eseguito il wrapping.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <summary>Ottiene il tipo statico dell'espressione rappresentata da <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" /> che rappresenta il tipo statico dell'espressione.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DefaultExpression">
      <summary>Rappresenta il valore predefinito di un tipo o un'espressione vuota.</summary>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <summary>Restituisce il tipo di nodo di questa espressione.I nodi di estensione devono restituire <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> quando si esegue l'override di questo metodo.</summary>
      <returns>Classe <see cref="T:System.Linq.Expressions.ExpressionType" /> dell'espressione.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.Type">
      <summary>Ottiene il tipo statico dell'espressione rappresentata da <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DefaultExpression.Type" /> che rappresenta il tipo statico dell'espressione.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpression">
      <summary>Rappresenta un'operazione dinamica.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Invia al metodo Visit specifico per questo tipo di nodo.Ad esempio, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> chiama <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Risultato della visita di questo nodo.</returns>
      <param name="visitor">Visitatore con cui visitare questo nodo.</param>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Arguments">
      <summary>Porta gli argomenti all'operazione dinamica.</summary>
      <returns>Gli insiemi di sola lettura che contengono gli argomenti all'operazione dinamica.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Binder">
      <summary>Ottiene <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />, che determina il comportamento di runtime del sito dinamico.</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />, che determina il comportamento di runtime del sito dinamico.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.DelegateType">
      <summary>Ottiene il tipo di delegato usato dal <see cref="T:System.Runtime.CompilerServices.CallSite" />.</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di delegato usato dal <see cref="T:System.Runtime.CompilerServices.CallSite" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> che rappresenta un'operazione dinamica associata dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> e le cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> e <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> sono impostate sui valori specificati.</returns>
      <param name="binder">Gestore di associazione di runtime per l'operazione dinamica.</param>
      <param name="returnType">Tipo di risultato dell'espressione dinamica.</param>
      <param name="arguments">Argomenti per l'operazione dinamica.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> che rappresenta un'operazione dinamica associata dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> e le cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> e <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> sono impostate sui valori specificati.</returns>
      <param name="binder">Gestore di associazione di runtime per l'operazione dinamica.</param>
      <param name="returnType">Tipo di risultato dell'espressione dinamica.</param>
      <param name="arg0">Primo argomento per l'operazione dinamica.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> che rappresenta un'operazione dinamica associata dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> e le cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> e <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> sono impostate sui valori specificati.</returns>
      <param name="binder">Gestore di associazione di runtime per l'operazione dinamica.</param>
      <param name="returnType">Tipo di risultato dell'espressione dinamica.</param>
      <param name="arg0">Primo argomento per l'operazione dinamica.</param>
      <param name="arg1">Secondo argomento per l'operazione dinamica.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> che rappresenta un'operazione dinamica associata dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> e le cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> e <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> sono impostate sui valori specificati.</returns>
      <param name="binder">Gestore di associazione di runtime per l'operazione dinamica.</param>
      <param name="returnType">Tipo di risultato dell'espressione dinamica.</param>
      <param name="arg0">Primo argomento per l'operazione dinamica.</param>
      <param name="arg1">Secondo argomento per l'operazione dinamica.</param>
      <param name="arg2">Terzo argomento per l'operazione dinamica.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> che rappresenta un'operazione dinamica associata dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> e le cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> e <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> sono impostate sui valori specificati.</returns>
      <param name="binder">Gestore di associazione di runtime per l'operazione dinamica.</param>
      <param name="returnType">Tipo di risultato dell'espressione dinamica.</param>
      <param name="arg0">Primo argomento per l'operazione dinamica.</param>
      <param name="arg1">Secondo argomento per l'operazione dinamica.</param>
      <param name="arg2">Terzo argomento per l'operazione dinamica.</param>
      <param name="arg3">Quarto argomento per l'operazione dinamica.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> che rappresenta un'operazione dinamica associata dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> e le cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> e <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> sono impostate sui valori specificati.</returns>
      <param name="binder">Gestore di associazione di runtime per l'operazione dinamica.</param>
      <param name="returnType">Tipo di risultato dell'espressione dinamica.</param>
      <param name="arguments">Argomenti per l'operazione dinamica.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> che rappresenta un'operazione dinamica associata dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> e le cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> e <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> sono impostate sui valori specificati.</returns>
      <param name="delegateType">Tipo del delegato utilizzato dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Gestore di associazione di runtime per l'operazione dinamica.</param>
      <param name="arguments">Argomenti per l'operazione dinamica.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> che rappresenta un'operazione dinamica associata dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> specificato e da un argomento.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> e le cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> e <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> sono impostate sui valori specificati.</returns>
      <param name="delegateType">Tipo del delegato utilizzato dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Gestore di associazione di runtime per l'operazione dinamica.</param>
      <param name="arg0">Argomento per l'operazione dinamica.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> che rappresenta un'operazione dinamica associata dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> specificato e da due argomenti.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> e le cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> e <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> sono impostate sui valori specificati.</returns>
      <param name="delegateType">Tipo del delegato utilizzato dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Gestore di associazione di runtime per l'operazione dinamica.</param>
      <param name="arg0">Primo argomento per l'operazione dinamica.</param>
      <param name="arg1">Secondo argomento per l'operazione dinamica.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> che rappresenta un'operazione dinamica associata dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> specificato e da tre argomenti.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> la  cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> e le cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> e <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> sono impostate sui valori specificati.</returns>
      <param name="delegateType">Tipo del delegato utilizzato dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Gestore di associazione di runtime per l'operazione dinamica.</param>
      <param name="arg0">Primo argomento per l'operazione dinamica.</param>
      <param name="arg1">Secondo argomento per l'operazione dinamica.</param>
      <param name="arg2">Terzo argomento per l'operazione dinamica.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> che rappresenta un'operazione dinamica associata dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> specificato e da quattro argomenti.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> e le cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> e <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> sono impostate sui valori specificati.</returns>
      <param name="delegateType">Tipo del delegato utilizzato dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Gestore di associazione di runtime per l'operazione dinamica.</param>
      <param name="arg0">Primo argomento per l'operazione dinamica.</param>
      <param name="arg1">Secondo argomento per l'operazione dinamica.</param>
      <param name="arg2">Terzo argomento per l'operazione dinamica.</param>
      <param name="arg3">Quarto argomento per l'operazione dinamica.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> che rappresenta un'operazione dinamica associata dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> e le cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> e <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> sono impostate sui valori specificati.</returns>
      <param name="delegateType">Tipo del delegato utilizzato dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Gestore di associazione di runtime per l'operazione dinamica.</param>
      <param name="arguments">Argomenti per l'operazione dinamica.</param>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.NodeType">
      <summary>Restituisce il tipo di nodo di questa espressione.I nodi di estensione devono restituire <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> quando si esegue l'override di questo metodo.</summary>
      <returns>Classe <see cref="T:System.Linq.Expressions.ExpressionType" /> dell'espressione.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Type">
      <summary>Ottiene il tipo statico dell'espressione rappresentata da <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.Type" /> che rappresenta il tipo statico dell'espressione.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Confronta il valore inviato al parametro, arguments, alla proprietà Arguments dell'istanza corrente di DynamicExpression.Se i valori del parametro e la proprietà coincidono, viene restituita l'istanza corrente.Se non coincidono, viene restituita una nuova istanza DynamicExpression identica all'istanza corrente eccetto per la proprietà Arguments impostata sul valore del parametro arguments.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="arguments">Proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> del risultato.</param>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpressionVisitor">
      <summary>Rappresenta un visitatore o un rewriter per le strutture ad albero dell'espressione dinamica.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.#ctor">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Linq.Expressions.DynamicExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.DynamicExpression" />.</summary>
      <returns>Restituisce <see cref="T:System.Linq.Expressions.Expression" />, l'espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary>Rappresenta un inizializzatore per un singolo elemento di un insieme <see cref="T:System.Collections.IEnumerable" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary>Ottiene il metodo di istanza utilizzato per aggiungere un elemento a un insieme <see cref="T:System.Collections.IEnumerable" />.</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> che rappresenta un metodo di istanza che aggiunge un elemento a un insieme.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary>Ottiene l'insieme di argomenti passati a un metodo che aggiunge un elemento a un insieme <see cref="T:System.Collections.IEnumerable" />.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> di oggetti <see cref="T:System.Linq.Expressions.Expression" /> che rappresentano gli argomenti di un metodo che aggiunge un elemento a un insieme.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary>Restituisce una rappresentazione testuale di un oggetto <see cref="T:System.Linq.Expressions.ElementInit" />.</summary>
      <returns>Rappresentazione testuale di <see cref="T:System.Linq.Expressions.ElementInit" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea una nuova espressione simile a quella corrente, utilizzando però gli elementi figlio specificati.Se tutti gli elementi figlio sono uguali, verrà restituita l'espressione corrente.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="arguments">Proprietà <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> del risultato.</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary>Fornisce la classe di base dalla quale derivano le classi che rappresentano i nodi della struttura ad albero dell'espressione.Contiene anche metodi factory static (Shared in Visual Basic) per creare i vari tipi di nodo.Si tratta di una classe abstract.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor">
      <summary>Costruisce una nuova istanza dell'oggetto <see cref="T:System.Linq.Expressions.Expression" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <param name="nodeType">
        <see cref="T:System.Linq.Expressions.ExpressionType" /> da impostare come tipo di nodo.</param>
      <param name="type">Oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> di questo oggetto <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Invia al metodo Visit specifico per questo tipo di nodo.Ad esempio, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> chiama <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Risultato della visita di questo nodo.</returns>
      <param name="visitor">Visitatore con cui visitare questo nodo.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di addizione aritmetica che non ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">L'operatore di addizione non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di addizione aritmetica che non ha il controllo dell'overflow.Il metodo di implementazione può essere specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void non è static (Shared in Visual Basic) o non accetta esattamente due argomenti.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> è null e l'operatore di addizione non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di addizione che non ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di addizione che non ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di addizione che non ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di addizione che ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> e le proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di addizione che ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di addizione che ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di addizione aritmetica che ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">L'operatore di addizione non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di addizione aritmetica che ha il controllo dell'overflow.Il metodo di implementazione può essere specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void non è static (Shared in Visual Basic) o non accetta esattamente due argomenti.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> è null e l'operatore di addizione non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione AND bit per bit.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.And" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">L'operatore bit per bit AND non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione AND bit per bit.Il metodo di implementazione può essere specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.And" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void non è static (Shared in Visual Basic) o non accetta esattamente due argomenti.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> è null e l'operatore bit per bit AND non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione AND condizionale che valuta il secondo operando solo se il primo operando restituisce true.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">L'operatore bit per bit AND non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.-oppure-<paramref name="left" />.Type e <paramref name="right" />.Type non sono dello stesso tipo Boolean.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione AND che valuta il secondo operando solo se il primo operando viene risolto in true.Il metodo di implementazione può essere specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void non è static (Shared in Visual Basic) o non accetta esattamente due argomenti.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> è null e l'operatore bit per bit AND non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.-oppure-<paramref name="method" /> è null e <paramref name="left" />.Type e <paramref name="right" />.Type non sono dello stesso tipo Boolean.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione AND bit per bit.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />  la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione AND bit per bit.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> a cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione AND bit per bit.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea un <see cref="T:System.Linq.Expressions.IndexExpression" /> per accedere a una matrice multidimensionale.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.IndexExpression" /> creato.</returns>
      <param name="array">Espressione che rappresenta la matrice multidimensionale.</param>
      <param name="indexes">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente le espressioni utilizzate per indicizzare la matrice.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Crea <see cref="T:System.Linq.Expressions.IndexExpression" /> per accedere a una matrice.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.IndexExpression" /> creato.</returns>
      <param name="array">Espressione che rappresenta la matrice da indicizzare.</param>
      <param name="indexes">Matrice contenente le espressioni utilizzate per indicizzare la matrice.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta l'applicazione di un operatore di indice di matrice a una matrice con numero di dimensioni superiore a 1.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> sono impostate sui valori specificati.</returns>
      <param name="array">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />.</param>
      <param name="indexes">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.Expression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> o <paramref name="indexes" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type non rappresenta un tipo matrice.-oppure-Il numero di dimensioni di <paramref name="array" />.Type non corrisponde al numero di elementi in <paramref name="indexes" />.-oppure-La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di uno o più elementi di <paramref name="indexes" /> non rappresenta il tipo <see cref="T:System.Int32" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta l'applicazione di un operatore di indice di matrice a una matrice con numero di dimensioni pari a 1.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="array">A <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="index">A <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> o <paramref name="index" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type non rappresenta un tipo matrice.-oppure-<paramref name="array" />.Type rappresenta un tipo matrice il cui numero di dimensioni non è pari a 1.-oppure-<paramref name="index" />.Type non rappresenta il tipo <see cref="T:System.Int32" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta l'applicazione di un operatore di indice di matrice a una matrice multidimensionale.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> sono impostate sui valori specificati.</returns>
      <param name="array">Una matrice di istanze o indici di <see cref="T:System.Linq.Expressions.Expression" /> per l'operazione di indice di matrice.</param>
      <param name="indexes">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> o <paramref name="indexes" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type non rappresenta un tipo matrice.-oppure-Il numero di dimensioni di <paramref name="array" />.Type non corrisponde al numero di elementi in <paramref name="indexes" />.-oppure-La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di uno o più elementi di <paramref name="indexes" /> non rappresenta il tipo <see cref="T:System.Int32" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'espressione per ottenere la lunghezza di una matrice unidimensionale.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> e la cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> è uguale a <paramref name="array" />.</returns>
      <param name="array">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type non rappresenta un tipo matrice.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Assign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MemberAssignment" /> che rappresenta l'inizializzazione di un campo o una proprietà.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberAssignment" /> la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> è uguale a <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> e <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> sono impostate sui valori specificati.</returns>
      <param name="member">A <see cref="T:System.Reflection.MemberInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</param>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> o <paramref name="expression" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> non rappresenta un campo o una proprietà.-oppure-La proprietà rappresentata da <paramref name="member" /> non dispone di una funzione di accesso set.-oppure-<paramref name="expression" />.Type non è assegnabile al tipo del campo o della proprietà che <paramref name="member" /> rappresenta.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MemberAssignment" /> che rappresenta l'inizializzazione di un membro utilizzando un metodo della funzione di accesso alle proprietà.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberAssignment" /> la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> è uguale a <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />, la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> è impostata sull'oggetto <see cref="T:System.Reflection.PropertyInfo" /> che rappresenta la proprietà a cui si accede con <paramref name="propertyAccessor" /> e la cui proprietà <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> è impostata su <paramref name="expression" />.</returns>
      <param name="propertyAccessor">
        <see cref="T:System.Reflection.MethodInfo" /> che rappresenta un metodo della funzione di accesso alle proprietà.</param>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> o <paramref name="expression" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> non rappresenta un metodo della funzione di accesso alle proprietà.-oppure-La proprietà a cui ha avuto accesso <paramref name="propertyAccessor" /> non dispone di una funzione di accesso set.-oppure-<paramref name="expression" />.Type non è assegnabile al tipo del campo o della proprietà che <paramref name="member" /> rappresenta.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> che contiene le espressioni specificate e non dispone di variabili.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> creato.</returns>
      <param name="expressions">Espressioni nel blocco.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> che contiene le espressioni e le variabili specificate.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> creato.</returns>
      <param name="variables">Variabili nel blocco.</param>
      <param name="expressions">Espressioni nel blocco.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> che contiene le espressioni e le variabili specificate.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> creato.</returns>
      <param name="variables">Variabili nel blocco.</param>
      <param name="expressions">Espressioni nel blocco.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> che contiene due espressioni e non dispone di variabili.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> creato.</returns>
      <param name="arg0">Prima espressione nel blocco.</param>
      <param name="arg1">Seconda espressione nel blocco.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> che contiene tre espressioni e non dispone di variabili.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> creato.</returns>
      <param name="arg0">Prima espressione nel blocco.</param>
      <param name="arg1">Seconda espressione nel blocco.</param>
      <param name="arg2">Terza espressione nel blocco.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> che contiene quattro espressioni e non dispone di variabili.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> creato.</returns>
      <param name="arg0">Prima espressione nel blocco.</param>
      <param name="arg1">Seconda espressione nel blocco.</param>
      <param name="arg2">Terza espressione nel blocco.</param>
      <param name="arg3">Quarta espressione nel blocco.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> che contiene cinque espressioni e non dispone di variabili.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> creato.</returns>
      <param name="arg0">Prima espressione nel blocco.</param>
      <param name="arg1">Seconda espressione nel blocco.</param>
      <param name="arg2">Terza espressione nel blocco.</param>
      <param name="arg3">Quarta espressione nel blocco.</param>
      <param name="arg4">Quinta espressione nel blocco.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> che contiene le espressioni specificate e non dispone di variabili.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> creato.</returns>
      <param name="expressions">Espressioni nel blocco.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> che contiene le espressioni specificate, non dispone di variabili e dispone del tipo di risultato specifico.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> creato.</returns>
      <param name="type">Tipo di risultato del blocco.</param>
      <param name="expressions">Espressioni nel blocco.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> che contiene le espressioni e le variabili specificate.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> creato.</returns>
      <param name="type">Tipo di risultato del blocco.</param>
      <param name="variables">Variabili nel blocco.</param>
      <param name="expressions">Espressioni nel blocco.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> che contiene le espressioni e le variabili specificate.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> creato.</returns>
      <param name="type">Tipo di risultato del blocco.</param>
      <param name="variables">Variabili nel blocco.</param>
      <param name="expressions">Espressioni nel blocco.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> che contiene le espressioni specificate, non dispone di variabili e dispone del tipo di risultato specifico.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> creato.</returns>
      <param name="type">Tipo di risultato del blocco.</param>
      <param name="expressions">Espressioni nel blocco.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione break.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Break, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata su <paramref name="target" /> e un valore Null da passare all'etichetta di destinazione al momento del passaggio.</returns>
      <param name="target">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui <see cref="T:System.Linq.Expressions.GotoExpression" /> passerà l'oggetto.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione break.Il valore passato all'etichetta al momento del passaggio può essere specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" /> con <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Break, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata su <paramref name="target" /> e <paramref name="value" /> da passare all'etichetta di destinazione al momento del passaggio.</returns>
      <param name="target">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui <see cref="T:System.Linq.Expressions.GotoExpression" /> passerà l'oggetto.</param>
      <param name="value">Valore che al momento del passaggio verrà passato all'etichetta associata.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione break con il tipo specificato.Il valore passato all'etichetta al momento del passaggio può essere specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Break, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata su <paramref name="target" />, la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> impostata su <paramref name="type" /> e <paramref name="value" /> da passare all'etichetta di destinazione al momento del passaggio.</returns>
      <param name="target">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui <see cref="T:System.Linq.Expressions.GotoExpression" /> passerà l'oggetto.</param>
      <param name="value">Valore che al momento del passaggio verrà passato all'etichetta associata.</param>
      <param name="type">
        <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione break con il tipo specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Break, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata su <paramref name="target" /> e la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> impostata su <paramref name="type" />.</returns>
      <param name="target">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui <see cref="T:System.Linq.Expressions.GotoExpression" /> passerà l'oggetto.</param>
      <param name="type">
        <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo di istanza che non accetta argomenti.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="instance">
        <see cref="T:System.Linq.Expressions.Expression" /> che specifica l'istanza per una chiamata a un metodo di istanza. Passare null per un metodo static (Shared in Visual Basic).</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> è null.-oppure-<paramref name="instance" /> è null e <paramref name="method" /> rappresenta un metodo di istanza.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type non è assegnabile al tipo dichiarante del metodo rappresentato da <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo che accetta argomenti.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> sono impostate sui valori specificati.</returns>
      <param name="instance">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />. Passare null per un metodo static (Shared in Visual Basic).</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.Expression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> è null.-oppure-<paramref name="instance" /> è null e <paramref name="method" /> rappresenta un metodo di istanza.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type non è assegnabile al tipo dichiarante del metodo rappresentato da <paramref name="method" />.-oppure-Il numero di elementi in <paramref name="arguments" /> non è uguale al numero di parametri del metodo rappresentato da <paramref name="method" />.-oppure-Uno o più elementi di <paramref name="arguments" /> non sono assegnabili al parametro corrispondente del metodo rappresentato da <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo statico che accetta due argomenti.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="instance">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che specifica l'istanza per una chiamata all'istanza.Passare null per un metodo statico (condiviso in Visual Basic).</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo chiamato.</param>
      <param name="arg0">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il primo argomento.</param>
      <param name="arg1">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il secondo argomento.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo che non accetta argomenti.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="instance">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che specifica l'istanza per una chiamata all'istanza.Passare null per un metodo statico (condiviso in Visual Basic).</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo chiamato.</param>
      <param name="arg0">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il primo argomento.</param>
      <param name="arg1">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il secondo argomento.</param>
      <param name="arg2">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il terzo argomento.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Crea <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo che accetta argomenti.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> sono impostate sui valori specificati.</returns>
      <param name="instance">
        <see cref="T:System.Linq.Expressions.Expression" /> che specifica l'istanza per una chiamata a un metodo di istanza. Passare null per un metodo static (Shared in Visual Basic).</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arguments">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> è null.-oppure-<paramref name="instance" /> è null e <paramref name="method" /> rappresenta un metodo di istanza.-oppure-<paramref name="arguments" /> non è null e uno o più elementi relativi sono null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type non è assegnabile al tipo dichiarante del metodo rappresentato da <paramref name="method" />.-oppure-Il numero di elementi in <paramref name="arguments" /> non è uguale al numero di parametri del metodo rappresentato da <paramref name="method" />.-oppure-Uno o più elementi di <paramref name="arguments" /> non sono assegnabili al parametro corrispondente del metodo rappresentato da <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo di istanza tramite la chiamata al metodo factory appropriato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, la cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> uguale a <paramref name="instance" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> è impostata sull'oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di istanza specificato e il cui oggetto <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> è impostato sugli argomenti specificati.</returns>
      <param name="instance">
        <see cref="T:System.Linq.Expressions.Expression" /> nel quale valore della proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> verrà cercato un metodo specifico.</param>
      <param name="methodName">Nome del metodo.</param>
      <param name="typeArguments">Matrice di oggetti <see cref="T:System.Type" /> che specificano i parametri di tipo del metodo generico.Questo argomento deve essere null quando methodName specifica un metodo non generico.</param>
      <param name="arguments">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta gli argomenti del metodo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> o <paramref name="methodName" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">Nessun metodo il cui nome è <paramref name="methodName" />, i cui parametri di tipo corrispondono a <paramref name="typeArguments" /> e i cui tipi di parametro corrispondono a <paramref name="arguments" /> viene trovato in <paramref name="instance" />.Type o nei relativi tipi di base.-oppure-Più di un metodo il cui nome è <paramref name="methodName" />, i cui parametri di tipo corrispondono a <paramref name="typeArguments" /> e i cui tipi di parametro corrispondono a <paramref name="arguments" /> viene trovato in <paramref name="instance" />.Type o nei relativi tipi di base.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo statico (condiviso in Visual Basic).</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo chiamato.</param>
      <param name="arguments">Insieme di <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta gli argomenti della chiamata.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo static (Shared in Visual Basic) con un argomento.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arg0">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il primo argomento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo statico che accetta due argomenti.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arg0">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il primo argomento.</param>
      <param name="arg1">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il secondo argomento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo statico che accetta tre argomenti.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arg0">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il primo argomento.</param>
      <param name="arg1">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il secondo argomento.</param>
      <param name="arg2">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il terzo argomento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo statico che accetta quattro argomenti.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arg0">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il primo argomento.</param>
      <param name="arg1">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il secondo argomento.</param>
      <param name="arg2">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il terzo argomento.</param>
      <param name="arg3">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il quarto argomento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo statico che accetta tre argomenti.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arg0">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il primo argomento.</param>
      <param name="arg1">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il secondo argomento.</param>
      <param name="arg2">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il terzo argomento.</param>
      <param name="arg3">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il quarto argomento.</param>
      <param name="arg4">
        <see cref="T:System.Linq.Expressions.Expression" />  che rappresenta il quinto argomento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo static (Shared in Visual Basic) con argomenti.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> sono impostate sui valori specificati.</returns>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> che rappresenta un metodo static (Shared in Visual Basic) su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arguments">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> è null.</exception>
      <exception cref="T:System.ArgumentException">Il numero di elementi in <paramref name="arguments" /> non è uguale al numero di parametri del metodo rappresentato da <paramref name="method" />.-oppure-Uno o più elementi di <paramref name="arguments" /> non sono assegnabili al parametro corrispondente del metodo rappresentato da <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo static (Shared in Visual Basic) chiamando il metodo factory appropriato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, la cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> è impostata sull'oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo static (Shared in Visual Basic) specificato e la cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> è impostata sugli argomenti specificati.</returns>
      <param name="type">
        <see cref="T:System.Type" /> che specifica il tipo che contiene il metodo static (Shared in Visual Basic).</param>
      <param name="methodName">Nome del metodo.</param>
      <param name="typeArguments">Matrice di oggetti <see cref="T:System.Type" /> che specificano i parametri di tipo del metodo generico.Questo argomento deve essere null quando methodName specifica un metodo non generico.</param>
      <param name="arguments">Matrice di <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta gli argomenti del metodo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> o <paramref name="methodName" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">Nessun metodo il cui nome è <paramref name="methodName" />, i cui parametri di tipo corrispondono a <paramref name="typeArguments" />, e i cui tipi di parametro corrispondono a <paramref name="arguments" /> viene trovato in <paramref name="type" /> o nei relativi tipi di base.-oppure-Più di un metodo il cui nome è <paramref name="methodName" />, i cui parametri di tipo corrispondono a <paramref name="typeArguments" /> e i cui tipi di parametro corrispondono a <paramref name="arguments" /> viene trovato in <paramref name="type" /> o nei relativi tipi di base.</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.CanReduce">
      <summary>Indica che il nodo può essere ridotto a un nodo più semplice.Se restituisce true, è possibile chiamare Reduce() per generare la forma ridotta.</summary>
      <returns>Vero se il nodo può essere ridotto, in caso contrario falso.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.CatchBlock" /> che rappresenta un'istruzione catch con un riferimento all'oggetto <see cref="T:System.Exception" /> intercettato per l'utilizzo nel corpo del gestore.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.CatchBlock" /> creato.</returns>
      <param name="variable">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> che rappresenta un riferimento all'oggetto <see cref="T:System.Exception" /> intercettato da questo gestore.</param>
      <param name="body">Corpo dell'istruzione catch.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.CatchBlock" /> che rappresenta un'istruzione catch con un filtro <see cref="T:System.Exception" /> e un riferimento all'oggetto <see cref="T:System.Exception" /> intercettato.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.CatchBlock" /> creato.</returns>
      <param name="variable">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> che rappresenta un riferimento all'oggetto <see cref="T:System.Exception" /> intercettato da questo gestore.</param>
      <param name="body">Corpo dell'istruzione catch.</param>
      <param name="filter">Corpo del filtro <see cref="T:System.Exception" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.CatchBlock" /> che rappresenta un'istruzione catch.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.CatchBlock" /> creato.</returns>
      <param name="type">Oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> di <see cref="T:System.Exception" /> che questo <see cref="T:System.Linq.Expressions.CatchBlock" /> gestirà.</param>
      <param name="body">Corpo dell'istruzione catch.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.CatchBlock" /> che rappresenta un'istruzione catch con un filtro <see cref="T:System.Exception" /> ma senza alcun riferimento all'oggetto <see cref="T:System.Exception" /> intercettato.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.CatchBlock" /> creato.</returns>
      <param name="type">Oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> di <see cref="T:System.Exception" /> che questo <see cref="T:System.Linq.Expressions.CatchBlock" /> gestirà.</param>
      <param name="body">Corpo dell'istruzione catch.</param>
      <param name="filter">Corpo del filtro <see cref="T:System.Exception" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <summary>Crea <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> per la cancellazione di un punto di sequenza.</summary>
      <returns>Istanza di <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> per la cancellazione di un punto di sequenza.</returns>
      <param name="document">
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> che rappresenta il file di origine.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione coalescing.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> e lecui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di <paramref name="left" /> non rappresenta un tipo di riferimento o un tipo valore nullable.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type e <paramref name="right" />.Type non sono convertibili l'uno nell'altro.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione coalescing, data una funzione di conversione.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e<see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type e <paramref name="right" />.Type non sono convertibili l'uno nell'altro.-oppure-<paramref name="conversion" /> non è null e <paramref name="conversion" />.Type è un tipo delegato che non accetta esattamente un argomento.</exception>
      <exception cref="T:System.InvalidOperationException">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di <paramref name="left" /> non rappresenta un tipo di riferimento o un tipo valore nullable.-oppure-La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di <paramref name="left" /> rappresenta un tipo non assegnabile al tipo di parametro del tipo delegato <paramref name="conversion" />.Type.-oppure-La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di <paramref name="right" /> è diversa dal tipo restituito del tipo delegato <paramref name="conversion" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea <see cref="T:System.Linq.Expressions.ConditionalExpression" /> che rappresenta un'istruzione condizionale.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> e le cui proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> e <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> sono impostate sui valori specfici.</returns>
      <param name="test">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.</param>
      <param name="ifTrue">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.</param>
      <param name="ifFalse">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="test" /> o <paramref name="ifTrue" /> o <paramref name="ifFalse" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="test" />.Type non è <see cref="T:System.Boolean" />.-oppure-<paramref name="ifTrue" />.Type è diverso da <paramref name="ifFalse" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <summary>Crea <see cref="T:System.Linq.Expressions.ConditionalExpression" /> che rappresenta un'istruzione condizionale.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> e le cui proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> e <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> sono impostate sui valori specfici.</returns>
      <param name="test">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.</param>
      <param name="ifTrue">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.</param>
      <param name="ifFalse">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />.</param>
      <param name="type">A <see cref="P:System.Linq.Expressions.Expression.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary>Crea <see cref="T:System.Linq.Expressions.ConstantExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> è impostata sul valore specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ConstantExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> e la cui proprietà <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> è impostata sul valore specificato.</returns>
      <param name="value">
        <see cref="T:System.Object" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.ConstantExpression" /> le cui proprietà <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> e <see cref="P:System.Linq.Expressions.Expression.Type" /> sono impostate sui valori specificati.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ConstantExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> e le cui proprietà <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> e <see cref="P:System.Linq.Expressions.Expression.Type" /> sono impostate sui valori specificati.</returns>
      <param name="value">
        <see cref="T:System.Object" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />.</param>
      <param name="type">A <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> non è null e <paramref name="type" /> non è assegnabile dal tipo dinamico di <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione continue.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Continue, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata su <paramref name="target" />, e un valore Null da passare all'etichetta di destinazione al momento del passaggio.</returns>
      <param name="target">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui <see cref="T:System.Linq.Expressions.GotoExpression" /> passerà l'oggetto.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement with the specified type.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Continue, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata su <paramref name="target" />, la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> impostata su <paramref name="type" />e un valore null da passare all'etichetta di destinazione al momento del passaggio.</returns>
      <param name="target">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui <see cref="T:System.Linq.Expressions.GotoExpression" /> passerà l'oggetto.</param>
      <param name="type">
        <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione di conversione di tipo.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> e le cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> e <see cref="P:System.Linq.Expressions.Expression.Type" /> sono impostate sui valori specificati.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="type">A <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> o <paramref name="type" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">Nessun operatore di conversione è definito tra <paramref name="expression" />.Type e <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione di conversione per la quale è specificato il metodo di implementazione.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /><see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> e le cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" /> e <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="type">A <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> o <paramref name="type" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void, non è static (Shared in Visual Basic) o non accetta esattamente un argomento.</exception>
      <exception cref="T:System.InvalidOperationException">Nessun operatore di conversione è definito tra <paramref name="expression" />.Type e <paramref name="type" />.-oppure-<paramref name="expression" />.Type non è assegnabile al tipo di argomento del metodo rappresentato da <paramref name="method" />.-oppure-Il tipo restituito del metodo rappresentato da <paramref name="method" /> non è assegnabile a <paramref name="type" />.-oppure-<paramref name="expression" />.Type o <paramref name="type" /> è un tipo valore nullable e il tipo valore non nullable corrispondente è diverso dal tipo di argomento o dal tipo restituito, rispettivamente, del metodo rappresentato da <paramref name="method" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">È stato trovato più di un metodo che corrisponde alla descrizione di <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione di conversione che genera un'eccezione in caso di overflow del tipo di destinazione.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> e <see cref="P:System.Linq.Expressions.Expression.Type" /> sono impostate sui valori specificati.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="type">A <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> o <paramref name="type" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">Nessun operatore di conversione è definito tra <paramref name="expression" />.Type e <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione di conversione che genera un'eccezione in caso di overflow del tipo di destinazione e per la quale è specificato il metodo di implementazione.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" /> e <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="type">A <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> o <paramref name="type" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void, non è static (Shared in Visual Basic) o non accetta esattamente un argomento.</exception>
      <exception cref="T:System.InvalidOperationException">Nessun operatore di conversione è definito tra <paramref name="expression" />.Type e <paramref name="type" />.-oppure-<paramref name="expression" />.Type non è assegnabile al tipo di argomento del metodo rappresentato da <paramref name="method" />.-oppure-Il tipo restituito del metodo rappresentato da <paramref name="method" /> non è assegnabile a <paramref name="type" />.-oppure-<paramref name="expression" />.Type o <paramref name="type" /> è un tipo valore nullable e il tipo valore non nullable corrispondente è diverso dal tipo di argomento o dal tipo restituito, rispettivamente, del metodo rappresentato da <paramref name="method" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">È stato trovato più di un metodo che corrisponde alla descrizione di <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> con l'intervallo specificato.</summary>
      <returns>Istanza di <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</returns>
      <param name="document">
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> che rappresenta il file di origine.</param>
      <param name="startLine">Riga iniziale di questo oggetto <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.Deve essere maggiore di 0.</param>
      <param name="startColumn">Colonna iniziale di questo oggetto <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.Deve essere maggiore di 0.</param>
      <param name="endLine">Riga finale di questo oggetto <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.Deve essere maggiore o uguale alla riga iniziale.</param>
      <param name="endColumn">Colonna finale di questo oggetto <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.Se la riga finale corrisponde alla riga iniziale, deve essere maggiore o uguale alla colonna iniziale.In qualsiasi caso, deve essere maggiore di 0.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta il decremento dell'espressione di 1.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'espressione decrementata.</returns>
      <param name="expression">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> da decrementare.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta il decremento dell'espressione di 1.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'espressione decrementata.</returns>
      <param name="expression">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> da decrementare.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di implementazione.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <summary>Crea <see cref="T:System.Linq.Expressions.DefaultExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> è impostata sul tipo specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DefaultExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> e la cui proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> è impostata sul valore specificato.</returns>
      <param name="type">A <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di divisione aritmetica.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">L'operatore di divisione non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di divisione aritmetica.Il metodo di implementazione può essere specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void non è static (Shared in Visual Basic) o non accetta esattamente due argomenti.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> è null e l'operatore di divisione non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di divisione che non ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /><see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati..</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di divisione che non ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di divisione che non ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.ElementInit" />, dato <see cref="T:System.Collections.Generic.IEnumerable`1" /> come secondo argomento.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ElementInit" /> le cui proprietà<see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> e <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> sono impostate sui valori specificati.</returns>
      <param name="addMethod">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />.</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> o <paramref name="arguments" /> è null.</exception>
      <exception cref="T:System.ArgumentException">Il metodo che <paramref name="addMethod" /> rappresenta non è denominato "Add" (senza distinzione tra maiuscole e minuscole).-oppure-Il metodo che <paramref name="addMethod" /> rappresenta non è un metodo di istanza.-oppure-<paramref name="arguments" /> è diverso dal numero di parametri del metodo rappresentato da <paramref name="addMethod" />.-oppure-La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di uno o più elementi di <paramref name="arguments" /> non è assegnabile al tipo del parametro corrispondente del metodo rappresentato da <paramref name="addMethod" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.ElementInit" />, data una matrice di valori come secondo argomento..</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ElementInit" /> le cui proprietà <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> e <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> sono impostate sui valori specificati.</returns>
      <param name="addMethod">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />.</param>
      <param name="arguments">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> o <paramref name="arguments" /> è null.</exception>
      <exception cref="T:System.ArgumentException">Il metodo che addMethod rappresenta non è denominato "Add" (senza distinzione tra maiuscole e minuscole).-oppure-Il metodo che addMethod rappresenta non è un metodo di istanza.-oppure-Il numero di elementi in arguments è diverso dal numero di parametri del metodo rappresentato da addMethod.-oppure-La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di uno o più elementi di <paramref name="arguments" /> non è assegnabile al tipo del parametro corrispondente del metodo rappresentato da <paramref name="addMethod" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Empty">
      <summary>Crea un'espressione vuota che dispone di un tipo <see cref="T:System.Void" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DefaultExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> e lacui proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> è impostata su <see cref="T:System.Void" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto di uguaglianza.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">L'operatore di uguaglianza non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Crea <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto di uguaglianza.Il metodo di implementazione può essere specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="liftToNull">true per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su true; false per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void non è static (Shared in Visual Basic) o non accetta esattamente due argomenti.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> è null e l'operatore di uguaglianza non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione XOR bit per bit, tramite op_ExclusiveOr per tipi definiti dall'utente.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> e le proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">L'operatore XOR non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione XOR bit per bit, tramite op_ExclusiveOr per tipi definiti dall'utente.Il metodo di implementazione può essere specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void non è static (Shared in Visual Basic) o non accetta esattamente due argomenti.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> è null e l'operatore XOR non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione XOR bit per bit, tramite op_ExclusiveOr per tipi definiti dall'utente.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione XOR bit per bit, tramite op_ExclusiveOr per tipi definiti dall'utente.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> e le proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione XOR bit per bit, tramite op_ExclusiveOr per tipi definiti dall'utente.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> che rappresenta l'accesso a un campo.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> e <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> sono impostate sui valori specificati.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.Per static (Shared in Visual Basic), <paramref name="expression" /> deve essere null.</param>
      <param name="field">
        <see cref="T:System.Reflection.FieldInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Member" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="field" /> è null.-oppure-Il campo rappresentato da <paramref name="field" /> non è static (Shared in Visual Basic) e <paramref name="expression" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type non è assegnabile al tipo dichiarante del campo rappresentato da <paramref name="field" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> che rappresenta l'accesso a un campo, dato il nome del campo.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, la cui proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> è impostata su <paramref name="expression" /> e la cui proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> è impostata sull'oggetto <see cref="T:System.Reflection.FieldInfo" /> che rappresenta il campo identificato da <paramref name="fieldName" />.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> il cui oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> contiene un campo denominato <paramref name="fieldName" />.Può essere null per i campi statici.</param>
      <param name="fieldName">Nome di un campo a cui accedere.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> o <paramref name="fieldName" /> è null.</exception>
      <exception cref="T:System.ArgumentException">Nessun campo denominato <paramref name="fieldName" /> è definito in <paramref name="expression" />.Type o nei relativi tipi di base.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> che rappresenta l'accesso a un campo.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> creato.</returns>
      <param name="expression">Oggetto contenitore del campo.Può essere null per i campi statici.</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> contenente il campo.</param>
      <param name="fieldName">Campo al quale accedere.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary>Crea un oggetto <see cref="T:System.Type" /> che rappresenta un tipo delegato System.Action generico con argomenti di tipo specifici.</summary>
      <returns>Tipo di un delegato System.Action con l'argomento di tipo specificato.</returns>
      <param name="typeArgs">Matrice di <see cref="T:System.Type" /> che specificano gli argomenti di tipo per il tipo delegato System.Action.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> contiene più di quattro elementi.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <summary>Crea un oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> che rappresenta un tipo delegato System.Func o System.Action generico con argomenti di tipo specifici.</summary>
      <returns>Tipo di delegato.</returns>
      <param name="typeArgs">Argomenti di tipo del delegato.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary>Crea un oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> che rappresenta un tipo delegato System.Func generico con argomenti di tipo specifici.L'ultimo argomento di tipo specifica il tipo restituito del delegato creato.</summary>
      <returns>Tipo di un delegato System.Func con l'argomento di tipo specificato.</returns>
      <param name="typeArgs">Matrice uno a cinque <see cref="T:System.Type" /> che specificano gli argomenti di tipo per il tipo delegato System.Func.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> contiene meno di uno o più di cinque elementi.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione "go to".</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Goto, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata sul valore specificato e un valore null da passare all'etichetta di destinazione al momento del passaggio.</returns>
      <param name="target">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui <see cref="T:System.Linq.Expressions.GotoExpression" /> passerà l'oggetto.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione "go to".Il valore passato all'etichetta al momento del passaggio può essere specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" /> con <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Goto, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata su <paramref name="target" /> e <paramref name="value" /> da passare all'etichetta di destinazione al momento del passaggio.</returns>
      <param name="target">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui <see cref="T:System.Linq.Expressions.GotoExpression" /> passerà l'oggetto.</param>
      <param name="value">Valore che al momento del passaggio verrà passato all'etichetta associata.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Crea <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione "go to" con il tipo specificato.Il valore passato all'etichetta al momento del passaggio può essere specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Goto, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata su <paramref name="target" />, la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> impostata su <paramref name="type" /> e <paramref name="value" /> da passare all'etichetta di destinazione al momento del passaggio.</returns>
      <param name="target">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui <see cref="T:System.Linq.Expressions.GotoExpression" /> passerà l'oggetto.</param>
      <param name="value">Valore che al momento del passaggio verrà passato all'etichetta associata.</param>
      <param name="type">
        <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Crea <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione "go to" con il tipo specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Goto, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata sul valore specificato, la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> impostata su <paramref name="type" /> e un valore null da passare all'etichetta di destinazione al momento del passaggio.</returns>
      <param name="target">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui <see cref="T:System.Linq.Expressions.GotoExpression" /> passerà l'oggetto.</param>
      <param name="type">
        <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto numerico "maggiore di".</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">L'operatore "maggiore di" non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto numerico "maggiore di".Il metodo di implementazione può essere specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="liftToNull">true per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su true; false per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void non è static (Shared in Visual Basic) o non accetta esattamente due argomenti.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> è null e l'operatore "maggiore di" non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto numerico "maggiore o uguale a".</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">L'operatore "maggiore di o uguale a" non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto numerico "maggiore o uguale a".</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="liftToNull">true per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su true; false per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void non è static (Shared in Visual Basic) o non accetta esattamente due argomenti.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> è null e l'operatore "maggiore di o uguale al" non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea <see cref="T:System.Linq.Expressions.ConditionalExpression" /> che rappresenta un blocco condizionale con un'istruzione if.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> e le cui proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> e <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> sono impostate sui valori specificati.La proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> è impostata sull'espressione predefinita e il tipo dell'oggetto <see cref="T:System.Linq.Expressions.ConditionalExpression" /> risultante restituito da questo metodo è <see cref="T:System.Void" />.</returns>
      <param name="test">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.</param>
      <param name="ifTrue">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea <see cref="T:System.Linq.Expressions.ConditionalExpression" /> che rappresenta un blocco condizionale con istruzioni if e else.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> e le cui proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> e <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> sono impostate sui valori specfici.Il tipo dell'oggetto <see cref="T:System.Linq.Expressions.ConditionalExpression" /> risultante restituito da questo metodo è <see cref="T:System.Void" />.</returns>
      <param name="test">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.</param>
      <param name="ifTrue">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.</param>
      <param name="ifFalse">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'incremento del valore dell'espressione di 1.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'espressione incrementata.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> da incrementare.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'incremento dell'espressione di 1.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'espressione incrementata.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> da incrementare.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di implementazione.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.InvocationExpression" /> che applica un delegato o un'espressione lambda a un elenco di espressioni passate come argomento.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.InvocationExpression" /> che applica il delegato o l'espressione lambda specificata agli argomenti forniti.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il delegato o l'espressione lambda da applicare.</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene gli oggetti <see cref="T:System.Linq.Expressions.Expression" /> che rappresentano gli argomenti ai quali viene applicato il delegato o l'espressione lambda.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type non rappresenta un tipo delegato o un <see cref="T:System.Linq.Expressions.Expression`1" />.-oppure-La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="arguments" /> non è assegnabile al tipo del parametro corrispondente del delegato rappresentato da <paramref name="expression" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> non contiene lo stesso numero di elementi come nell'elenco dei parametri per il delegato rappresentato da <paramref name="expression" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.InvocationExpression" /> che applica un delegato o un'espressione lambda a un elenco di espressioni passate come argomento.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.InvocationExpression" /> che applica il delegato o l'espressione lambda specificata agli argomenti forniti.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il delegato o l'espressione lambda da applicare.</param>
      <param name="arguments">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> che rappresentano gli argomenti ai quali viene applicato il delegato o l'espressione lambda.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type non rappresenta un tipo delegato o un <see cref="T:System.Linq.Expressions.Expression`1" />.-oppure-La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="arguments" /> non è assegnabile al tipo del parametro corrispondente del delegato rappresentato da <paramref name="expression" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> non contiene lo stesso numero di elementi come nell'elenco dei parametri per il delegato rappresentato da <paramref name="expression" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <summary>Restituisce un valore che indica se l'espressione restituisce false.</summary>
      <returns>Istanza di <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> per la valutazione.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Restituisce un valore che indica se l'espressione restituisce false.</summary>
      <returns>Istanza di <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> per la valutazione.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di implementazione.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <summary>Restituisce un valore che indica se l'espressione restituisce true.</summary>
      <returns>Istanza di <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> per la valutazione.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Restituisce un valore che indica se l'espressione restituisce true.</summary>
      <returns>Istanza di <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> per la valutazione.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di implementazione.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label">
      <summary>Crea <see cref="T:System.Linq.Expressions.LabelTarget" /> che rappresenta un'etichetta con tipo void e nessun nome.</summary>
      <returns>Nuovo oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> che rappresenta un'etichetta con tipo void e nessun nome.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.LabelExpression" /> che rappresenta un'etichetta senza un valore predefinito.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelExpression" /> senza un valore predefinito.</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> al quale verrà associato questo <see cref="T:System.Linq.Expressions.LabelExpression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.LabelExpression" /> che rappresenta un'etichetta con il valore predefinito.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelExpression" /> con il valore predefinito specificato.</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> al quale verrà associato questo <see cref="T:System.Linq.Expressions.LabelExpression" />.</param>
      <param name="defaultValue">Valore di <see cref="T:System.Linq.Expressions.LabelExpression" /> quando l'etichetta viene raggiunta tramite il normale flusso di controllo.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
      <summary>Crea <see cref="T:System.Linq.Expressions.LabelTarget" /> che rappresenta un'etichetta con tipo void e il nome dato.</summary>
      <returns>Nuovo oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> che rappresenta un'etichetta con tipo void e il nome dato.</returns>
      <param name="name">Nome dell'etichetta.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> che rappresenta un'etichetta con il tipo specificato.</summary>
      <returns>Il nuovo oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with the given typeche rappresenta un'etichetta con il tipo specificato.</returns>
      <param name="type">Tipo di valore passato durante il passaggio all'etichetta.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <summary>Crea <see cref="T:System.Linq.Expressions.LabelTarget" /> che rappresenta un'etichetta con tipo e il nome dati.</summary>
      <returns>Nuovo oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> che rappresenta un'etichetta con tipo e il nome dati.</returns>
      <param name="type">Tipo di valore passato durante il passaggio all'etichetta.</param>
      <param name="name">Nome dell'etichetta.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Crea un oggetto LambdaExpression costruendo prima un tipo delegato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> è uguale a Lambda e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</returns>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="tailCall">Oggetto <see cref="T:System.Boolean" /> che indica se l'ottimizzazione della chiamata tail verrà applicata durante la compilazione dell'espressione creata.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.Expression`1" /> dove il tipo delegato è noto in fase di compilazione.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> è uguale a <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> e le cui proprietà <see cref="P:System.Linq.Expressions.Expression`1.Body" /> e <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> sono impostate sui valori specificati.</returns>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression`1.Body" />.</param>
      <param name="tailCall">Oggetto <see cref="T:System.Boolean" /> che indica se l'ottimizzazione della chiamata tail verrà applicata durante la compilazione dell'espressione creata.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.Expression`1.Parameters" />.</param>
      <typeparam name="TDelegate">Tipo di delegato. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.Expression`1" /> dove il tipo delegato è noto in fase di compilazione.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> è uguale a <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> e le cui proprietà <see cref="P:System.Linq.Expressions.Expression`1.Body" /> e <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> sono impostate sui valori specificati.</returns>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression`1.Body" />.</param>
      <param name="tailCall">Oggetto <see cref="T:System.Boolean" /> che indica se l'ottimizzazione della chiamata tail verrà applicata durante la compilazione dell'espressione creata.</param>
      <param name="parameters">Matrice di oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.Expression`1.Parameters" />.</param>
      <typeparam name="TDelegate">Tipo di delegato. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Crea un oggetto LambdaExpression costruendo prima un tipo delegato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> è uguale a Lambda e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</returns>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="tailCall">Oggetto <see cref="T:System.Boolean" /> che indica se l'ottimizzazione della chiamata tail verrà applicata durante la compilazione dell'espressione creata.</param>
      <param name="parameters">Matrice di oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.Expression`1" /> dove il tipo delegato è noto in fase di compilazione.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</returns>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <typeparam name="TDelegate">Tipo di delegato.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> è null.-oppure-Uno o più elementi in <paramref name="parameters" /> sono null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> non è un tipo delegato.-oppure-<paramref name="body" />.Type rappresenta un tipo non assegnabile al tipo restituito di <paramref name="TDelegate" />.-oppure-<paramref name="parameters" /> non contiene lo stesso numero di elementi come nell'elenco dei parametri per <paramref name="TDelegate" />.-oppure-La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="parameters" /> non è assegnabile dal tipo del parametro corrispondente di <paramref name="TDelegate" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Crea un oggetto LambdaExpression costruendo prima un tipo delegato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> è uguale a Lambda e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</returns>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.Expression`1" /> dove il tipo delegato è noto in fase di compilazione.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e<see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</returns>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="parameters">Matrice di oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <typeparam name="TDelegate">Tipo di delegato.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> è null.-oppure-Uno o più elementi in <paramref name="parameters" /> sono null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> non è un tipo delegato.-oppure-<paramref name="body" />.Type rappresenta un tipo non assegnabile al tipo restituito di <paramref name="TDelegate" />.-oppure-<paramref name="parameters" /> non contiene lo stesso numero di elementi come nell'elenco dei parametri per <paramref name="TDelegate" />.-oppure-La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="parameters" /> non è assegnabile dal tipo del parametro corrispondente di <paramref name="TDelegate" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> costruendo prima un tipo delegato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</returns>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="parameters">Matrice di oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> è null.-oppure-Uno o più elementi di <paramref name="parameters" /> sono null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> contiene più di sedici elementi.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.Expression`1" /> dove il tipo delegato è noto in fase di compilazione.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> è uguale a <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> e le cui proprietà <see cref="P:System.Linq.Expressions.Expression`1.Body" /> e <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> sono impostate sui valori specificati.</returns>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression`1.Body" />.</param>
      <param name="name">Nome dell'espressione lambda.Utilizzato per la generazione di informazioni di debug.</param>
      <param name="tailCall">Oggetto <see cref="T:System.Boolean" /> che indica se l'ottimizzazione della chiamata tail verrà applicata durante la compilazione dell'espressione creata.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.Expression`1.Parameters" />.</param>
      <typeparam name="TDelegate">Tipo di delegato. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Crea un oggetto LambdaExpression costruendo prima un tipo delegato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> è uguale a Lambda e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</returns>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="name">Nome dell'espressione lambda.Utilizzato per la creazione di informazioni di debug.</param>
      <param name="tailCall">Oggetto <see cref="T:System.Boolean" /> che indica se l'ottimizzazione della chiamata tail verrà applicata durante la compilazione dell'espressione creata.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Crea un oggetto LambdaExpression costruendo prima un tipo delegato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> è uguale a Lambda e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</returns>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="name">Nome dell'espressione lambda.Utilizzato per la creazione di informazioni di debug.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.Expression`1" /> dove il tipo delegato è noto in fase di compilazione.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> è uguale a <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> e le cui proprietà <see cref="P:System.Linq.Expressions.Expression`1.Body" /> e <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> sono impostate sui valori specificati.</returns>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression`1.Body" />.</param>
      <param name="name">Nome dell'espressione lambda.Utilizzato per la generazione di informazioni di debug.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.Expression`1.Parameters" />.</param>
      <typeparam name="TDelegate">Tipo di delegato. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Crea un oggetto LambdaExpression costruendo prima un tipo delegato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> è uguale a Lambda e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</returns>
      <param name="delegateType">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> che rappresenta la firma del delegato per l'espressione lambda.</param>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="tailCall">Oggetto <see cref="T:System.Boolean" /> che indica se l'ottimizzazione della chiamata tail verrà applicata durante la compilazione dell'espressione creata.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Crea un oggetto LambdaExpression costruendo prima un tipo delegato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> è uguale a Lambda e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</returns>
      <param name="delegateType">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> che rappresenta la firma del delegato per l'espressione lambda.</param>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="tailCall">Oggetto <see cref="T:System.Boolean" /> che indica se l'ottimizzazione della chiamata tail verrà applicata durante la compilazione dell'espressione creata.</param>
      <param name="parameters">Matrice di oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> costruendo prima un tipo delegato.Può essere utilizzato quando il tipo delegato non è noto in fase di compilazione.</summary>
      <returns>Oggetto che rappresenta un'espressione lambda la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</returns>
      <param name="delegateType">
        <see cref="T:System.Type" /> che rappresenta una firma di delegato per l'espressione lambda.</param>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> o <paramref name="body" /> è null.-oppure-Uno o più elementi in <paramref name="parameters" /> sono null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> non rappresenta un tipo delegato.-oppure-<paramref name="body" />.Type rappresenta un tipo non assegnabile al tipo restituito del tipo delegato rappresentato da <paramref name="delegateType" />.-oppure-<paramref name="parameters" /> non contiene lo stesso numero di elementi come nell'elenco dei parametri per il delegato rappresentato da <paramref name="delegateType" />.-oppure-La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="parameters" /> non è assegnabile dal tipo del parametro corrispondente del tipo di delegato rappresentato da <paramref name="delegateType" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> costruendo prima un tipo delegato.Può essere utilizzato quando il tipo delegato non è noto in fase di compilazione.</summary>
      <returns>Oggetto che rappresenta un'espressione lambda la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</returns>
      <param name="delegateType">
        <see cref="T:System.Type" /> che rappresenta una firma di delegato per l'espressione lambda.</param>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="parameters">Matrice di oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> o <paramref name="body" /> è null.-oppure-Uno o più elementi in <paramref name="parameters" /> sono null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> non rappresenta un tipo delegato.-oppure-<paramref name="body" />.Type rappresenta un tipo non assegnabile al tipo restituito del tipo delegato rappresentato da <paramref name="delegateType" />.-oppure-<paramref name="parameters" /> non contiene lo stesso numero di elementi come nell'elenco dei parametri per il delegato rappresentato da <paramref name="delegateType" />.-oppure-La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="parameters" /> non è assegnabile dal tipo del parametro corrispondente del tipo di delegato rappresentato da <paramref name="delegateType" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Crea un oggetto LambdaExpression costruendo prima un tipo delegato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> è uguale a Lambda e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</returns>
      <param name="delegateType">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> che rappresenta la firma del delegato per l'espressione lambda.</param>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />. </param>
      <param name="name">Nome dell'espressione lambda.Utilizzato per la creazione di informazioni di debug.</param>
      <param name="tailCall">Oggetto <see cref="T:System.Boolean" /> che indica se l'ottimizzazione della chiamata tail verrà applicata durante la compilazione dell'espressione creata. </param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />. </param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Crea un oggetto LambdaExpression costruendo prima un tipo delegato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> è uguale a Lambda e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</returns>
      <param name="delegateType">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> che rappresenta la firma del delegato per l'espressione lambda.</param>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="name">Nome dell'espressione lambda.Utilizzato per la creazione di informazioni di debug.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di spostamento a sinistra bit per bit.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">L'operatore di spostamento a sinistra non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di spostamento a sinistra bit per bit.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void non è static (Shared in Visual Basic) o non accetta esattamente due argomenti.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> è null e l'operatore di spostamento a sinistra non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di spostamento a sinistra bit per bit.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di spostamento a sinistra bit per bit.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di spostamento a sinistra bit per bit.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto numerico "minore di".</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">L'operatore "inferiore a" non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto numerico "minore di".</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="liftToNull">true per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su true; false per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void non è static (Shared in Visual Basic) o non accetta esattamente due argomenti.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> è null e l'operatore "minore di" non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto numerico "minore o uguale a".</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">L'operatore "minore di o uguale a" non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto numerico "minore o uguale a".</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="liftToNull">true per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su true; false per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void non è static (Shared in Visual Basic) o non accetta esattamente due argomenti.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> è null e l'operatore "minore di o uguale a" non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MemberListBinding" /> dove il membro è un campo o una proprietà.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberListBinding" /> la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> è uguale a <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> e <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> sono impostate sui valori specificati.</returns>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" /> che rappresenta un campo o una proprietà su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ElementInit" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> è null. -oppure-Uno o più elementi di <paramref name="initializers" /> sono null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> non rappresenta un campo o una proprietà.-oppure-<see cref="P:System.Reflection.FieldInfo.FieldType" /> o <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> del campo o della proprietà che <paramref name="member" /> rappresenta non implementa <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MemberListBinding" /> dove il membro è un campo o una proprietà.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberListBinding" /> la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> è uguale a <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> e <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> sono impostate sui valori specificati.</returns>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" /> che rappresenta un campo o una proprietà su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</param>
      <param name="initializers">Matrice di oggetti <see cref="T:System.Linq.Expressions.ElementInit" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> è null. -oppure-Uno o più elementi di <paramref name="initializers" /> sono null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> non rappresenta un campo o una proprietà.-oppure-<see cref="P:System.Reflection.FieldInfo.FieldType" /> o <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> del campo o della proprietà che <paramref name="member" /> rappresenta non implementa <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MemberListBinding" /> basato su un metodo della funzione di accesso alle proprietà specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberListBinding" /> la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> è uguale a <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> è impostata sull'oggetto <see cref="T:System.Reflection.MemberInfo" /> che rappresenta la proprietà a cui si accede con <paramref name="propertyAccessor" /> e il cui oggetto <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> è popolato con gli elementi di <paramref name="initializers" />.</returns>
      <param name="propertyAccessor">
        <see cref="T:System.Reflection.MethodInfo" /> che rappresenta un metodo della funzione di accesso alle proprietà.</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ElementInit" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> è null. -oppure-Uno o più elementi di <paramref name="initializers" /> sono null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> non rappresenta un metodo della funzione di accesso alle proprietà.-oppure-<see cref="P:System.Reflection.PropertyInfo.PropertyType" /> della proprietà a cui accede il metodo rappresentato da <paramref name="propertyAccessor" /> non implementa <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MemberListBinding" /> basato su un metodo della funzione di accesso alle proprietà specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberListBinding" /> la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> è uguale a <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> è impostata sull'oggetto <see cref="T:System.Reflection.MemberInfo" /> che rappresenta la proprietà a cui si accede con <paramref name="propertyAccessor" /> e il cui oggetto <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> è popolato con gli elementi di <paramref name="initializers" />.</returns>
      <param name="propertyAccessor">
        <see cref="T:System.Reflection.MethodInfo" /> che rappresenta un metodo della funzione di accesso alle proprietà.</param>
      <param name="initializers">Matrice di oggetti <see cref="T:System.Linq.Expressions.ElementInit" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> è null. -oppure-Uno o più elementi di <paramref name="initializers" /> sono null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> non rappresenta un metodo della funzione di accesso alle proprietà.-oppure-<see cref="P:System.Reflection.PropertyInfo.PropertyType" /> della proprietà a cui accede il metodo rappresentato da <paramref name="propertyAccessor" /> non implementa <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.ListInitExpression" /> che utilizza gli oggetti <see cref="T:System.Linq.Expressions.ElementInit" /> specificati per inizializzare un insieme.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> e le cui proprietà <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> e <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> sono impostate sui valori specificati.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ElementInit" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> o <paramref name="initializers" /> è null.-oppure-Uno o più elementi di <paramref name="initializers" /> sono null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type non implementa <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.ListInitExpression" /> che utilizza un metodo denominato "Add" per aggiungere elementi a un insieme.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> e la cui proprietà <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> è impostata sul valore specificato.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.Expression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> o <paramref name="initializers" /> è null.-oppure-Uno o più elementi di <paramref name="initializers" /> sono null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type non implementa <see cref="T:System.Collections.IEnumerable" />.</exception>
      <exception cref="T:System.InvalidOperationException">Nessun metodo di istanza denominato "Add" (senza distinzione tra maiuscole e minuscole) è dichiarato in <paramref name="newExpression" />.Type o nel relativo tipo di base.-oppure-Il metodo add su <paramref name="newExpression" />.Type o sul relativo tipo di base non accetta esattamente un argomento.-oppure-Il tipo rappresentato dalla proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> del primo elemento di <paramref name="initializers" /> non è assegnabile al tipo di argomento del metodo add su <paramref name="newExpression" />.Type o sul relativo tipo di base.-oppure-Esiste più di un metodo denominato "Add" (senza distinzione tra maiuscole e minuscole) compatibile con l'argomento su <paramref name="newExpression" />.Type e/o sul relativo tipo di base.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.ListInitExpression" /> che utilizza gli oggetti <see cref="T:System.Linq.Expressions.ElementInit" /> specificati per inizializzare un insieme.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> e le cui propretà <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> e <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> sono impostate sui valori specificati.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</param>
      <param name="initializers">Matrice di oggetti <see cref="T:System.Linq.Expressions.ElementInit" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> o <paramref name="initializers" /> è null.-oppure-Uno o più elementi di <paramref name="initializers" /> sono null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type non implementa <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.ListInitExpression" /> che utilizza un metodo denominato "Add" per aggiungere elementi a un insieme.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> e la cui proprietà <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> è impostata sul valore specificato.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</param>
      <param name="initializers">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> o <paramref name="initializers" /> è null.-oppure-Uno o più elementi di <paramref name="initializers" /> sono null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type non implementa <see cref="T:System.Collections.IEnumerable" />.</exception>
      <exception cref="T:System.InvalidOperationException">Nessun metodo di istanza denominato "Add" (senza distinzione tra maiuscole e minuscole) è dichiarato in <paramref name="newExpression" />.Type o nel relativo tipo di base.-oppure-Il metodo add su <paramref name="newExpression" />.Type o sul relativo tipo di base non accetta esattamente un argomento.-oppure-Il tipo rappresentato dalla proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> del primo elemento di <paramref name="initializers" /> non è assegnabile al tipo di argomento del metodo add su <paramref name="newExpression" />.Type o sul relativo tipo di base.-oppure-Esiste più di un metodo denominato "Add" (senza distinzione tra maiuscole e minuscole) compatibile con l'argomento su <paramref name="newExpression" />.Type e/o sul relativo tipo di base.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.ListInitExpression" /> che utilizza un metodo specificato per aggiungere elementi a un insieme.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> e la cui proprietà <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> è impostata sul valore specificato.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</param>
      <param name="addMethod">
        <see cref="T:System.Reflection.MethodInfo" /> che rappresenta un metodo di istanza denominato "Add" (senza distinzione tra maiuscole e minuscole) che aggiunge un elemento a un insieme.</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.Expression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> o <paramref name="initializers" /> è null.-oppure-Uno o più elementi di <paramref name="initializers" /> sono null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type non implementa <see cref="T:System.Collections.IEnumerable" />.-oppure-<paramref name="addMethod" /> non è null e non rappresenta un metodo di istanza denominato "Add" (senza distinzione tra maiuscole e minuscole) che accetta esattamente un argomento.-oppure-<paramref name="addMethod" /> non è null e il tipo rappresentato dalla proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di uno o più elementi di <paramref name="initializers" /> non è assegnabile al tipo di argomento del metodo rappresentato da <paramref name="addMethod" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> è null e non esiste alcun metodo di istanza denominato "Add" che accetta un argomento compatibile con il tipo su <paramref name="newExpression" />.Type o sul relativo tipo di base.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.ListInitExpression" /> che utilizza un metodo specificato per aggiungere elementi a un insieme.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> e la cui proprietà <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> è impostata sul valore specificato.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</param>
      <param name="addMethod">
        <see cref="T:System.Reflection.MethodInfo" /> che rappresenta un metodo di istanza che accetta un argomento e aggiunge un elemento a un insieme.</param>
      <param name="initializers">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> o <paramref name="initializers" /> è null.-oppure-Uno o più elementi di <paramref name="initializers" /> sono null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type non implementa <see cref="T:System.Collections.IEnumerable" />.-oppure-<paramref name="addMethod" /> non è null e non rappresenta un metodo di istanza denominato "Add" (senza distinzione tra maiuscole e minuscole) che accetta esattamente un argomento.-oppure-<paramref name="addMethod" /> non è null e il tipo rappresentato dalla proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di uno o più elementi di <paramref name="initializers" /> non è assegnabile al tipo di argomento del metodo rappresentato da <paramref name="addMethod" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> è null e non esiste alcun metodo di istanza denominato "Add" che accetta un argomento compatibile con il tipo su <paramref name="newExpression" />.Type o sul relativo tipo di base.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.LoopExpression" /> con il corpo specificato.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.LoopExpression" /> creato.</returns>
      <param name="body">Corpo del ciclo.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.LoopExpression" /> con il corpo e la destinazione di break specificati.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.LoopExpression" /> creato.</returns>
      <param name="body">Corpo del ciclo.</param>
      <param name="break">Destinazione di break utilizzata dal corpo del ciclo.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.LoopExpression" /> con il corpo specificato.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.LoopExpression" /> creato.</returns>
      <param name="body">Corpo del ciclo.</param>
      <param name="break">Destinazione di break utilizzata dal corpo del ciclo.</param>
      <param name="continue">Destinazione di continue utilizzata dal corpo del ciclo.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" />, tramite la chiamata al metodo factory appropriato, dati gli operandi sinistro e destro.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> risultante dalla chiamata al metodo factory appropriato.</returns>
      <param name="binaryType">
        <see cref="T:System.Linq.Expressions.ExpressionType" /> che specifica il tipo di operazione binaria.</param>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'operando sinistro.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'operando sinistro.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> non corrisponde a un nodo di espressione binaria.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" />, tramite la chiamata al metodo factory appropriato, dati gli operandi sinistro e destro e il metodo di implementazione.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> risultante dalla chiamata al metodo factory appropriato.</returns>
      <param name="binaryType">
        <see cref="T:System.Linq.Expressions.ExpressionType" /> che specifica il tipo di operazione binaria.</param>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'operando sinistro.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'operando destro.</param>
      <param name="liftToNull">true per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su true; false per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su false.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> che specifica il metodo di implementazione.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> non corrisponde a un nodo di espressione binaria.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" />, tramite la chiamata al metodo factory appropriato, dati gli operandi sinistro e destro, il metodo di implementazione e la funzione di conversione di tipi.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> risultante dalla chiamata al metodo factory appropriato.</returns>
      <param name="binaryType">
        <see cref="T:System.Linq.Expressions.ExpressionType" /> che specifica il tipo di operazione binaria.</param>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'operando sinistro.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'operando destro.</param>
      <param name="liftToNull">true per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su true; false per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su false.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> che specifica il metodo di implementazione.</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> che rappresenta una funzione di conversione di tipi.Questo parametro viene utilizzato solo se <paramref name="binaryType" /> e <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> o assegnazione composta.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> non corrisponde a un nodo di espressione binaria.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.CatchBlock" /> che rappresenta un'istruzione catch con gli elementi specificati.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.CatchBlock" /> creato.</returns>
      <param name="type">Oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> di <see cref="T:System.Exception" /> che questo <see cref="T:System.Linq.Expressions.CatchBlock" /> gestirà.</param>
      <param name="variable">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> che rappresenta un riferimento all'oggetto <see cref="T:System.Exception" /> intercettato da questo gestore.</param>
      <param name="body">Corpo dell'istruzione catch.</param>
      <param name="filter">Corpo del filtro <see cref="T:System.Exception" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un passaggio dell'oggetto <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> specificato.Anche il valore passato all'etichetta al momento del passaggio può essere specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a <paramref name="kind" />, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata su <paramref name="target" />, la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> impostata su <paramref name="type" /> e <paramref name="value" /> da passare all'etichetta di destinazione al momento del passaggio.</returns>
      <param name="kind">
        <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> di <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="target">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui <see cref="T:System.Linq.Expressions.GotoExpression" /> passerà l'oggetto.</param>
      <param name="value">Valore che al momento del passaggio verrà passato all'etichetta associata.</param>
      <param name="type">
        <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea <see cref="T:System.Linq.Expressions.IndexExpression" /> che rappresenta l'accesso a una proprietà indicizzata in un oggetto.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.IndexExpression" /> creato.</returns>
      <param name="instance">Oggetto a cui appartiene la proprietà.Deve essere null se la proprietà è static (shared in Visual Basic).</param>
      <param name="indexer">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta la proprietà da indicizzare.</param>
      <param name="arguments">IEnumerable&lt;Expression&gt; (IEnumerable (Of Expression) in Visual Basic) in Visual Basic) contenente gli argomenti che verranno utilizzati per indicizzare la proprietà.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> che rappresenta l'accesso a un campo o a una proprietà.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" /> risultante dalla chiamata al metodo factory appropriato.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'oggetto al quale appartiene il membro.Può essere null per i membri statici.</param>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" /> che descrive il campo o la proprietà a cui accedere.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> o <paramref name="member" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> non rappresenta un campo o una proprietà.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.TryExpression" /> che rappresenta un blocco try con gli elementi specificati.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.TryExpression" /> creato.</returns>
      <param name="type">Tipo di risultato dell'espressione try.Se null, il corpo e tutti i gestori devono disporre di tipo identico.</param>
      <param name="body">Corpo del blocco try.</param>
      <param name="finally">Corpo del blocco finally.Passare null se al blocco try non è associato alcun blocco finally.</param>
      <param name="fault">Corpo del blocco try.Passare null se al blocco try non è associato alcun blocco fault.</param>
      <param name="handlers">Insieme di espressioni <see cref="T:System.Linq.Expressions.CatchBlock" /> che rappresentano le istruzioni catch da associare al blocco try.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> tramite la chiamata al metodo factory appropriato, dato un operando.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> risultante dalla chiamata al metodo factory appropriato.</returns>
      <param name="unaryType">
        <see cref="T:System.Linq.Expressions.ExpressionType" /> che specifica il tipo di operazione unaria.</param>
      <param name="operand">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'operando.</param>
      <param name="type">
        <see cref="T:System.Type" /> che specifica il tipo da convertire (passare null null se non applicabile).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> non corrisponde a un nodo di espressione unaria.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> tramite la chiamata al metodo factory appropriato, dato un operando e il metodo di implementazione.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> risultante dalla chiamata al metodo factory appropriato.</returns>
      <param name="unaryType">
        <see cref="T:System.Linq.Expressions.ExpressionType" /> che specifica il tipo di operazione unaria.</param>
      <param name="operand">
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'operando.</param>
      <param name="type">
        <see cref="T:System.Type" /> che specifica il tipo da convertire (passare null null se non applicabili).</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di implementazione.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> non corrisponde a un nodo di espressione unaria.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> che rappresenta l'inizializzazione ricorsiva di membri di un campo o una proprietà.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> è uguale a <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> e <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> sono impostate sui valori specificati.</returns>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</param>
      <param name="bindings">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.MemberBinding" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> o <paramref name="bindings" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> non rappresenta un campo o una proprietà.-oppure-La proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> di un elemento di <paramref name="bindings" /> non rappresenta un membro del tipo del campo o della proprietà che <paramref name="member" /> rappresenta.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> che rappresenta l'inizializzazione ricorsiva di membri di un campo o una proprietà.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> è uguale a <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> e <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> sono impostate sui valori specificati.</returns>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</param>
      <param name="bindings">Matrice di oggetti <see cref="T:System.Linq.Expressions.MemberBinding" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> o <paramref name="bindings" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> non rappresenta un campo o una proprietà.-oppure-La proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> di un elemento di <paramref name="bindings" /> non rappresenta un membro del tipo del campo o della proprietà che <paramref name="member" /> rappresenta.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> che rappresenta l'inizializzazione ricorsiva di membri di un membro a cui si accede utilizzando un metodo della funzione di accesso alle proprietà.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> è uguale a <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> e la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> è impostata sull'oggetto <see cref="T:System.Reflection.PropertyInfo" /> che rappresenta la proprietà a cui si accede con <paramref name="propertyAccessor" /> e le proprietà <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> impostate sui valori specificati.</returns>
      <param name="propertyAccessor">
        <see cref="T:System.Reflection.MethodInfo" /> che rappresenta un metodo della funzione di accesso alle proprietà.</param>
      <param name="bindings">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.MemberBinding" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> o <paramref name="bindings" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> non rappresenta un metodo della funzione di accesso alle proprietà.-oppure-La proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> di un elemento di <paramref name="bindings" /> non rappresenta un membro del tipo della proprietà a cui si accede con il metodo che <paramref name="propertyAccessor" /> rappresenta.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> che rappresenta l'inizializzazione ricorsiva di membri di un membro a cui si accede utilizzando un metodo della funzione di accesso alle proprietà.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> è uguale a <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> e la cui proprieà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> impostata sull'oggetto <see cref="T:System.Reflection.PropertyInfo" /> che rappresenta la proprietà a cui si accede con <paramref name="propertyAccessor" /> e le proprietà <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> impostate sui valori specificati.</returns>
      <param name="propertyAccessor">
        <see cref="T:System.Reflection.MethodInfo" /> che rappresenta un metodo della funzione di accesso alle proprietà.</param>
      <param name="bindings">Matrice di oggetti <see cref="T:System.Linq.Expressions.MemberBinding" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> o <paramref name="bindings" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> non rappresenta un metodo della funzione di accesso alle proprietà.-oppure-La proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> di un elemento di <paramref name="bindings" /> non rappresenta un membro del tipo della proprietà a cui si accede con il metodo che <paramref name="propertyAccessor" /> rappresenta.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Rappresenta un'espressione che crea un nuovo oggetto e inizializza una proprietà dell'oggetto.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> e <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> sono impostate sui valori specificati.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />.</param>
      <param name="bindings">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.MemberBinding" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> o <paramref name="bindings" /> è null.</exception>
      <exception cref="T:System.ArgumentException">La proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> di un elemento di <paramref name="bindings" /> non rappresenta un membro del tipo che <paramref name="newExpression" />.Type rappresenta.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> e <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> sono impostate sui valori specificati.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />.</param>
      <param name="bindings">Matrice di oggetti <see cref="T:System.Linq.Expressions.MemberBinding" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> o <paramref name="bindings" /> è null.</exception>
      <exception cref="T:System.ArgumentException">La proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> di un elemento di <paramref name="bindings" /> non rappresenta un membro del tipo che <paramref name="newExpression" />.Type rappresenta.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di resto aritmetica.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">Il modulo di addizione non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di resto aritmetica.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void non è static (Shared in Visual Basic) o non accetta esattamente due argomenti.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> è null l'operatore del modulo non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di resto.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di resto.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di resto.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di moltiplicazione aritmetica che non ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">L'operatore di moltiplicazione non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di moltiplicazione aritmetica che non ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void non è static (Shared in Visual Basic) o non accetta esattamente due argomenti.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> è null e l'operatore di moltiplicazione non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di moltiplicazione che non ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di moltiplicazione che non ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di moltiplicazione che non ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di moltiplicazione che ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di moltiplicazione che ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Crea <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di moltiplicazione che ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di moltiplicazione aritmetica che ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" />  su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">L'operatore di moltiplicazione non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di moltiplicazione aritmetica che ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void non è static (Shared in Visual Basic) o non accetta esattamente due argomenti.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> è null e l'operatore di moltiplicazione non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione di divisione aritmetica.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> e la cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> è impostata sul valore specificato.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">L'operatore meno unario non è definito per <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione di divisione aritmetica.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> e le cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> e <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void, non è static (Shared in Visual Basic) o non accetta esattamente un argomento.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> è null e l'operatore meno unario non è definito per <paramref name="expression" />.Type.-oppure-<paramref name="expression" />.Type o il tipo non nullable corrispondente se si tratta di un tipo nullable, non è assegnabile al tipo di argomento del metodo rappresentato da <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione di negazione aritmetica che ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> è impostata sul valore specificato.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">L'operatore meno unario non è definito per <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione di negazione aritmetica che ha il controllo dell'overflow.Il metodo di implementazione può essere specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> e <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void, non è static (Shared in Visual Basic) o non accetta esattamente un argomento.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> è null e l'operatore meno unario non è definito per <paramref name="expression" />.Type.-oppure-<paramref name="expression" />.Type o il tipo non nullable corrispondente se si tratta di un tipo nullable, non è assegnabile al tipo di argomento del metodo rappresentato da <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.NewExpression" /> che rappresenta la chiamata al costruttore specificato che non accetta argomenti.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.New" /> e la cui proprietà <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> è impostata sul valore specificato.</returns>
      <param name="constructor">
        <see cref="T:System.Reflection.ConstructorInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> è null.</exception>
      <exception cref="T:System.ArgumentException">Il costruttore che <paramref name="constructor" /> rappresenta ha almeno un parametro.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.NewExpression" /> che rappresenta la chiamata al costruttore specificato con gli argomenti specificati.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.New" /> e le cui proprietà <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> sono impostate sui valori specificati.</returns>
      <param name="constructor">
        <see cref="T:System.Reflection.ConstructorInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.Expression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> è null.-oppure-Un elemento di <paramref name="arguments" /> è null.</exception>
      <exception cref="T:System.ArgumentException">Il numero di elementi in <paramref name="arguments" /> è diverso dal numero di parametri per il costruttore rappresentato da <paramref name="constructor" />.-oppure-La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="arguments" /> non è assegnabile al tipo del parametro corrispondente al costruttore che <paramref name="constructor" /> rappresenta.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.NewExpression" /> che rappresenta la chiamata al costruttore specificato con gli argomenti specificati.I membri che accedono ai campi inizializzati del costruttore sono specificati.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.New" /> e le cui proprietà <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> e <see cref="P:System.Linq.Expressions.NewExpression.Members" /> sono impostate sui valori specificati.</returns>
      <param name="constructor">
        <see cref="T:System.Reflection.ConstructorInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.Expression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.</param>
      <param name="members">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Reflection.MemberInfo" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.NewExpression.Members" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> è null.-oppure-Un elemento di <paramref name="arguments" /> è null.-oppure-Un elemento di <paramref name="members" /> è null.</exception>
      <exception cref="T:System.ArgumentException">Il numero di elementi in <paramref name="arguments" /> è diverso dal numero di parametri per il costruttore rappresentato da <paramref name="constructor" />.-oppure-La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="arguments" /> non è assegnabile al tipo del parametro corrispondente al costruttore che <paramref name="constructor" /> rappresenta.-oppure-Il numero di elementi nel parametro <paramref name="members" /> è diverso da quello in <paramref name="arguments" />.-oppure-La proprietà <paramref name="arguments" /> di un elemento di <see cref="P:System.Linq.Expressions.Expression.Type" /> rappresenta un tipo non assegnabile al tipo del membro rappresentato dall'elemento corrispondente di <paramref name="members" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.NewExpression" /> che rappresenta la chiamata al costruttore specificato con gli argomenti specificati.I membri che accedono ai campi inizializzati del costruttore sono specificati come matrice.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.New" /> e le cui proprietà <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> e <see cref="P:System.Linq.Expressions.NewExpression.Members" /> sono impostate sui valori specificati.</returns>
      <param name="constructor">
        <see cref="T:System.Reflection.ConstructorInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.Expression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.</param>
      <param name="members">Matrice di oggetti <see cref="T:System.Reflection.MemberInfo" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.NewExpression.Members" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> è null.-oppure-Un elemento di <paramref name="arguments" /> è null.-oppure-Un elemento di <paramref name="members" /> è null.</exception>
      <exception cref="T:System.ArgumentException">Il numero di elementi in <paramref name="arguments" /> è diverso dal numero di parametri per il costruttore rappresentato da <paramref name="constructor" />.-oppure-La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="arguments" /> non è assegnabile al tipo del parametro corrispondente al costruttore che <paramref name="constructor" /> rappresenta.-oppure-Il numero di elementi nel parametro <paramref name="members" /> è diverso da quello in <paramref name="arguments" />.-oppure-La proprietà <paramref name="arguments" /> di un elemento di <see cref="P:System.Linq.Expressions.Expression.Type" /> rappresenta un tipo non assegnabile al tipo del membro rappresentato dall'elemento corrispondente di <paramref name="members" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.NewExpression" /> che rappresenta la chiamata al costruttore specificato con gli argomenti specificati.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.New" /> e le cui proprietà <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> e <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> sono impostate sui valori specificati.</returns>
      <param name="constructor">
        <see cref="T:System.Reflection.ConstructorInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</param>
      <param name="arguments">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> è null.-oppure-Un elemento di <paramref name="arguments" /> è null.</exception>
      <exception cref="T:System.ArgumentException">La lunghezza di <paramref name="arguments" /> corrisponde al numero di parametri per il costruttore che <paramref name="constructor" /> rappresenta.-oppure-La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="arguments" /> non è assegnabile al tipo del parametro corrispondente al costruttore che <paramref name="constructor" /> rappresenta.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.NewExpression" /> che rappresenta la chiamata al costruttore senza parametri del tipo specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.New" /> e la cui proprietà <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> è impostata sull'oggetto <see cref="T:System.Reflection.ConstructorInfo" /> che rappresenta il costruttore senza parametri per il tipo specificato.</returns>
      <param name="type">
        <see cref="T:System.Type" /> con un costruttore che non accetta argomenti.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> è null.</exception>
      <exception cref="T:System.ArgumentException">Il tipo rappresentato da <paramref name="type" /> non dispone di un costruttore senza parametri.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.NewArrayExpression" /> che rappresenta la creazione di una matrice con un numero di dimensioni specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewArrayExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> e la cui proprietà <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> è impostata sul valore specificato.</returns>
      <param name="type">
        <see cref="T:System.Type" /> che rappresenta il tipo di elemento della matrice.</param>
      <param name="bounds">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.Expression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> o <paramref name="bounds" /> è null.-oppure-Un elemento di <paramref name="bounds" /> è null.</exception>
      <exception cref="T:System.ArgumentException">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="bounds" /> non rappresenta un tipo integrale.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.NewArrayExpression" /> che rappresenta la creazione di una matrice con un numero di dimensioni specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewArrayExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> e la cui proprietà <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> è impostata sul valore specificato.</returns>
      <param name="type">
        <see cref="T:System.Type" /> che rappresenta il tipo di elemento della matrice.</param>
      <param name="bounds">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> o <paramref name="bounds" /> è null.-oppure-Un elemento di <paramref name="bounds" /> è null.</exception>
      <exception cref="T:System.ArgumentException">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="bounds" /> non rappresenta un tipo integrale.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.NewArrayExpression" /> che rappresenta la creazione di una matrice unidimensionale e la sua inizializzazione da un elenco di elementi.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewArrayExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> e la cui proprietà <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> è impostata sul valore specificato.</returns>
      <param name="type">
        <see cref="T:System.Type" /> che rappresenta il tipo di elemento della matrice.</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.Expression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> o <paramref name="initializers" /> è null.-oppure-Un elemento di <paramref name="initializers" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="initializers" /> rappresenta un tipo non assegnabile al tipo <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.NewArrayExpression" /> che rappresenta la creazione di una matrice unidimensionale e la sua inizializzazione da un elenco di elementi.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewArrayExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> uguale a <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> e la cui proprietà <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> è impostata sul valore specificato.</returns>
      <param name="type">
        <see cref="T:System.Type" /> che rappresenta il tipo di elemento della matrice.</param>
      <param name="initializers">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> o <paramref name="initializers" /> è null.-oppure-Un elemento di <paramref name="initializers" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="initializers" /> rappresenta un tipo non assegnabile al tipo <paramref name="type" />.</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.NodeType">
      <summary>Ottiene il tipo di nodo di questa proprietà <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Uno dei valori <see cref="T:System.Linq.Expressions.ExpressionType" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione di complemento bit per bit</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> e la cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> è impostata sul valore specificato.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">L'operatore non unario non è definito per <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione di complemento bit per bitIl metodo di implementazione può essere specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> e le cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> e<see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void, non è static (Shared in Visual Basic) o non accetta esattamente un argomento.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> è null e l'operatore non unario non è definito per <paramref name="expression" />.Type.-oppure-<paramref name="expression" />.Type o il tipo non nullable corrispondente se si tratta di un tipo nullable, non è assegnabile al tipo di argomento del metodo rappresentato da <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto di disuaglianza.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">L'operatore di disuguaglianza non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Crea <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto di disuaglianza.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="liftToNull">true per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su true; false per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void non è static (Shared in Visual Basic) o non accetta esattamente due argomenti.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> è null e l'operatore di disuguaglianza non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
      <summary>Restituisce l'espressione che rappresenta il complemento a uno.</summary>
      <returns>Istanza di <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Restituisce l'espressione che rappresenta il complemento a uno.</summary>
      <returns>Istanza di <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di implementazione.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione OR.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">L'operatore bit per bit OR non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione OR.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void non è static (Shared in Visual Basic) o non accetta esattamente due argomenti.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> è null e l'operatore bit per bit OR non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione OR bit per bit.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione OR bit per bit.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione OR bit per bit.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione OR condizionale che valuta il secondo operando solo se il primo operando restituisce false.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">L'operatore bit per bit OR non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.-oppure-<paramref name="left" />.Type e <paramref name="right" />.Type non sono dello stesso tipo Boolean.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione OR condizionale che valuta il secondo operando solo se il primo operando restituisce false.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void non è static (Shared in Visual Basic) o non accetta esattamente due argomenti.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> è null e l'operatore bit per bit OR non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.-oppure-<paramref name="method" /> è null e <paramref name="left" />.Type e <paramref name="right" />.Type non sono dello stesso tipo Boolean.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
      <summary>Crea un nodo <see cref="T:System.Linq.Expressions.ParameterExpression" /> che può essere utilizzato per identificare un parametro o una variabile in una struttura ad albero dell'espressione.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> con il nome e il tipo specificati.</returns>
      <param name="type">Tipo di parametro o di variabile.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <summary>Crea un nodo <see cref="T:System.Linq.Expressions.ParameterExpression" /> che può essere utilizzato per identificare un parametro o una variabile in una struttura ad albero dell'espressione.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> e le cui proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> e <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> sono impostate sui valori specificati.</returns>
      <param name="type">Tipo di parametro o di variabile.</param>
      <param name="name">Nome del parametro o della variabile, utilizzato solo a scopo di debug o di stampa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'assegnazione dell'espressione seguita da un successivo decremento di 1 dell'espressione originale.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'espressione risultante.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> al quale applicare le operazioni.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'assegnazione dell'espressione seguita da un successivo decremento di 1 dell'espressione originale.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'espressione risultante.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> al quale applicare le operazioni.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di implementazione.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'assegnazione dell'espressione seguita da un successivo incremento di 1 dell'espressione originale.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'espressione risultante.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> al quale applicare le operazioni.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'assegnazione dell'espressione seguita da un successivo incremento di 1 dell'espressione originale.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'espressione risultante.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> al quale applicare le operazioni.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di implementazione.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta l'elevamento di un numero a una potenza.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà  <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> e le proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">L'operatore di esponenziale non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.-oppure-<paramref name="left" />.Type e/o <paramref name="right" />.Type non sono <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta l'elevamento di un numero a una potenza.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void non è static (Shared in Visual Basic) o non accetta esattamente due argomenti.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> è null e l'operatore esponenziale non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.-oppure-<paramref name="method" /> è null e <paramref name="left" />.Type e/o <paramref name="right" />.Type non sono <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta l'elevamento di un'espressione a una potenza e l'assegnazione del risultato all'espressione.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> uguale a <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta l'elevamento di un'espressione a una potenza e l'assegnazione del risultato all'espressione.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Crea <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta l'elevamento di un'espressione a una potenza e l'assegnazione del risultato all'espressione.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che decrementa l'espressione di 1 e assegna di nuovo il risultato all'espressione.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'espressione risultante.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> al quale applicare le operazioni.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che decrementa l'espressione di 1 e assegna di nuovo il risultato all'espressione.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'espressione risultante.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> al quale applicare le operazioni.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di implementazione.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che incrementa l'espressione di 1 e assegna di nuovo il risultato all'espressione.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'espressione risultante.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> al quale applicare le operazioni.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che incrementa l'espressione di 1 e assegna di nuovo il risultato all'espressione.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'espressione risultante.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> al quale applicare le operazioni.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" />  che rappresenta il metodo di implementazione.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> che rappresenta l'accesso a una proprietà utilizzando un metodo della funzione di accesso alle proprietà.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> la cui proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> è impostata sull'oggetto <paramref name="expression" /> e la cui proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> è impostata sull'oggetto <see cref="T:System.Reflection.PropertyInfo" /> che rappresenta la proprietà a cui si accede con <paramref name="propertyAccessor" />.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.Per le proprietà statiche, il valore può essere null.</param>
      <param name="propertyAccessor">
        <see cref="T:System.Reflection.MethodInfo" /> che rappresenta un metodo della funzione di accesso alle proprietà.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> è null.-oppure-Il metodo che <paramref name="propertyAccessor" /> rappresenta non è static (Shared in Visual Basic) e <paramref name="expression" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type non è assegnabile al tipo dichiarante del metodo rappresentato da <paramref name="propertyAccessor" />.-oppure-Il metodo rappresentato da <paramref name="propertyAccessor" /> non è un metodo della funzione di accesso alle proprietà.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> tche rappresenta l'accesso a una lettera.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> e <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> sono impostate sui valori specificati.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.Per le proprietà statiche, il valore può essere null.</param>
      <param name="property">
        <see cref="T:System.Reflection.PropertyInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Member" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> è null.-oppure-La proprietà che <paramref name="property" /> rappresenta non è static (Shared in Visual Basic) e <paramref name="expression" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type non è assegnabile al tipo dichiarante della proprietà che <paramref name="property" /> rappresenta.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.IndexExpression" /> che rappresenta l'accesso a una proprietà indicizzata.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.IndexExpression" /> creato.</returns>
      <param name="instance">Oggetto a cui appartiene la proprietà.Se la proprietà è statica/condivisa, deve essere null.</param>
      <param name="indexer">
        <see cref="T:System.Reflection.PropertyInfo" /> che rappresenta la proprietà da indicizzare.</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> di oggetti <see cref="T:System.Linq.Expressions.Expression" /> utilizzati per indicizzare la proprietà.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.IndexExpression" /> che rappresenta l'accesso a una proprietà indicizzata.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.IndexExpression" /> creato.</returns>
      <param name="instance">Oggetto a cui appartiene la proprietà.Se la proprietà è statica/condivisa, deve essere null.</param>
      <param name="indexer">
        <see cref="T:System.Reflection.PropertyInfo" /> che rappresenta la proprietà da indicizzare.</param>
      <param name="arguments">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> utilizzati per indicizzare la proprietà.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> tche rappresenta l'accesso a una lettera.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> la cui proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> è impostata sull'oggetto <paramref name="expression" /> e la cui proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> è impostata sull'oggetto <see cref="T:System.Reflection.PropertyInfo" /> che rappresenta la proprietà identificata da <paramref name="propertyName" />.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> il cui oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> contiene una proprietà denominata <paramref name="propertyName" />.Per le proprietà statiche, il valore può essere null.</param>
      <param name="propertyName">Nome di una proprietà a cui accedere.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> o <paramref name="propertyName" /> è null.</exception>
      <exception cref="T:System.ArgumentException">Nessun proprietà denominata <paramref name="propertyName" /> è definita in <paramref name="expression" />.Type o nei relativi tipi di base.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.IndexExpression" /> che rappresenta l'accesso a una proprietà indicizzata.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.IndexExpression" /> creato.</returns>
      <param name="instance">Oggetto a cui appartiene la proprietà.Se la proprietà è statica/condivisa, deve essere null.</param>
      <param name="propertyName">Nome dell'indicizzatore.</param>
      <param name="arguments">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> utilizzati per indicizzare la proprietà.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>Crea <see cref="T:System.Linq.Expressions.MemberExpression" /> che accede a una proprietà.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> creato.</returns>
      <param name="expression">Oggetto contenitore della proprietà.Per le proprietà statiche, il valore può essere null.</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> che contiene la proprietà.</param>
      <param name="propertyName">Proprietà a cui accedere.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> che rappresenta l'accesso a una proprietà o a un campo.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, la cui proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> è impostata sull'oggetto <paramref name="expression" /> e la cui proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> è impostata sull'oggetto <see cref="T:System.Reflection.PropertyInfo" /> or <see cref="T:System.Reflection.FieldInfo" /> che rappresenta la proprietà identificata da <paramref name="propertyOrFieldName" />.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> il cui oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> contiene una proprietà o un campo denominato <paramref name="propertyOrFieldName" />.Può essere null per i membri statici.</param>
      <param name="propertyOrFieldName">Nome di una proprietà o di un campo a cui accedere.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> o <paramref name="propertyOrFieldName" /> è null.</exception>
      <exception cref="T:System.ArgumentException">Nessun proprietà o campo denominato <paramref name="propertyOrFieldName" /> è definito in <paramref name="expression" />.Type o nei relativi tipi di base.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'espressione che ha un valore costante di tipo <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> e la cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> è impostata sul valore specificato.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Reduce">
      <summary>Riduce questo nodo a un'espressione più semplice.Se CanReduce restituisce true, deve essere restituita un'espressione valida.Questo metodo può restituire un altro nodo che deve essere a sua volta ridotto.</summary>
      <returns>L'espressione ridotta.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceAndCheck">
      <summary>Riduce questo nodo a un'espressione più semplice.Se CanReduce restituisce true, deve essere restituita un'espressione valida.Questo metodo può restituire un altro nodo che deve essere a sua volta ridotto.</summary>
      <returns>L'espressione ridotta.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceExtensions">
      <summary>Riduce l'espressione a un tipo di nodo noto (diverso da un nodo di estensione) o restituisce solo l'espressione se è già un tipo noto.</summary>
      <returns>L'espressione ridotta.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto di uguaglianza.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto di disuguaglianza.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow">
      <summary>Crea <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta la rigenerazione di un'eccezione.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta la rigenerazione di un'eccezione.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta la rigenerazione di un'eccezione con un tipo specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta la rigenerazione di un'eccezione.</returns>
      <param name="type">Nuova classe <see cref="T:System.Type" /> dell'espressione.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione return.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Return, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata su <paramref name="target" /> e un valore Null da passare all'etichetta di destinazione al momento del passaggio.</returns>
      <param name="target">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui <see cref="T:System.Linq.Expressions.GotoExpression" /> passerà l'oggetto.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione return.Il valore passato all'etichetta al momento del passaggio può essere specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" /> con <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Continue, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata su <paramref name="target" />, e <paramref name="value" /> da passare all'etichetta di destinazione al momento del passaggio.</returns>
      <param name="target">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui <see cref="T:System.Linq.Expressions.GotoExpression" /> passerà l'oggetto.</param>
      <param name="value">Valore che al momento del passaggio verrà passato all'etichetta associata.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione return con il tipo specificato.Il valore passato all'etichetta al momento del passaggio può essere specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Continue, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata su <paramref name="target" />, la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> impostata su <paramref name="type" /> e <paramref name="value" /> da passare all'etichetta di destinazione al momento del passaggio.</returns>
      <param name="target">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui <see cref="T:System.Linq.Expressions.GotoExpression" /> passerà l'oggetto.</param>
      <param name="value">Valore che al momento del passaggio verrà passato all'etichetta associata.</param>
      <param name="type">
        <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione return con il tipo specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Return, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata su <paramref name="target" />, la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> impostata su <paramref name="type" /> e un valore null da passare all'etichetta di destinazione al momento del passaggio.</returns>
      <param name="target">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui <see cref="T:System.Linq.Expressions.GotoExpression" /> passerà l'oggetto.</param>
      <param name="type">
        <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di spostamento a destra bit per bit.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">L'operatore di spostamento a destra non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di spostamento a destra bit per bit.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void non è static (Shared in Visual Basic) o non accetta esattamente due argomenti.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> è null e l'operatore di spostamento a destra non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di spostamento a destra bit per bit.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di spostamento a destra bit per bit.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di spostamento a destra bit per bit.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Crea un'istanza di <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <returns>Istanza di <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> e la cui proprietà <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> è impostata sul valore specificato.</returns>
      <param name="variables">Insieme di oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
      <summary>Crea un'istanza di <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <returns>Istanza di <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> e la cui proprietà <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> è impostata sul valore specificato.</returns>
      <param name="variables">Matrice di oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da utilizzare per popolare l'insieme <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di sottrazione aritmetica che non ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">L'operatore di sottrazione non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di sottrazione aritmetica che non ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void non è static (Shared in Visual Basic) o non accetta esattamente due argomenti.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> è null e l'operatore di sottrazione non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di sottrazione che non ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di sottrazione che non ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di sottrazione che non ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di sottrazione che ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di sottrazione che ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Crea <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di sottrazione che ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di sottrazione aritmetica che ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">L'operatore di sottrazione non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di sottrazione aritmetica che ha il controllo dell'overflow.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void non è static (Shared in Visual Basic) o non accetta esattamente due argomenti.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> è null e l'operatore di sottrazione non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>Crea <see cref="T:System.Linq.Expressions.SwitchExpression" /> che rappresenta un'istruzione switch con un caso predefinito.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.SwitchExpression" /> creato.</returns>
      <param name="switchValue">Valore da testare a fronte di ogni case.</param>
      <param name="defaultBody">Risultato dell'opzione se <paramref name="switchValue" /> non corrisponde ad alcun case.</param>
      <param name="cases">Set di case per questa espressione switch.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>Crea <see cref="T:System.Linq.Expressions.SwitchExpression" /> che rappresenta un'istruzione switch con un caso predefinito.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.SwitchExpression" /> creato.</returns>
      <param name="switchValue">Valore da testare a fronte di ogni case.</param>
      <param name="defaultBody">Risultato dell'opzione se <paramref name="switchValue" /> non corrisponde ad alcun case.</param>
      <param name="comparison">Metodo di confronto di uguaglianze da utilizzare.</param>
      <param name="cases">Set di case per questa espressione switch.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>Crea <see cref="T:System.Linq.Expressions.SwitchExpression" /> che rappresenta un'istruzione switch con un caso predefinito.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.SwitchExpression" /> creato.</returns>
      <param name="switchValue">Valore da testare a fronte di ogni case.</param>
      <param name="defaultBody">Risultato dell'opzione se <paramref name="switchValue" /> non corrisponde ad alcun case.</param>
      <param name="comparison">Metodo di confronto di uguaglianze da utilizzare.</param>
      <param name="cases">Set di case per questa espressione switch.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>Crea <see cref="T:System.Linq.Expressions.SwitchExpression" /> che rappresenta un'istruzione switch senza un caso predefinito.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.SwitchExpression" /> creato.</returns>
      <param name="switchValue">Valore da testare a fronte di ogni case.</param>
      <param name="cases">Set di case per questa espressione switch.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>Crea <see cref="T:System.Linq.Expressions.SwitchExpression" /> che rappresenta un'istruzione switch con un caso predefinito.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.SwitchExpression" /> creato.</returns>
      <param name="type">Tipo di risultato dell'opzione.</param>
      <param name="switchValue">Valore da testare a fronte di ogni case.</param>
      <param name="defaultBody">Risultato dell'opzione se <paramref name="switchValue" /> non corrisponde ad alcun case.</param>
      <param name="comparison">Metodo di confronto di uguaglianze da utilizzare.</param>
      <param name="cases">Set di case per questa espressione switch.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>Crea <see cref="T:System.Linq.Expressions.SwitchExpression" /> che rappresenta un'istruzione switch con un caso predefinito.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.SwitchExpression" /> creato.</returns>
      <param name="type">Tipo di risultato dell'opzione.</param>
      <param name="switchValue">Valore da testare a fronte di ogni case.</param>
      <param name="defaultBody">Risultato dell'opzione se <paramref name="switchValue" /> non corrisponde ad alcun case.</param>
      <param name="comparison">Metodo di confronto di uguaglianze da utilizzare.</param>
      <param name="cases">Set di case per questa espressione switch.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.SwitchCase" /> da utilizzare in un oggetto used in a <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.SwitchCase" /> creato.</returns>
      <param name="body">Corpo del case.</param>
      <param name="testValues">Valori di test del case.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.SwitchCase" /> per l'utilizzo in un oggetto <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.SwitchCase" /> creato.</returns>
      <param name="body">Corpo del case.</param>
      <param name="testValues">Valori di test del case.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
      <summary>Crea un'istanza di <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> la cui proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> è impostata sul valore specificato.</returns>
      <param name="fileName">
        <see cref="T:System.String" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
      <summary>Crea un'istanza di <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> le cui proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> e <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> sono impostate sul valore specificato.</returns>
      <param name="fileName">
        <see cref="T:System.String" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.</param>
      <param name="language">
        <see cref="T:System.Guid" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
      <summary>Crea un'istanza di <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> le cui proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> e <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> e <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> sono impostate sul valore specificato.</returns>
      <param name="fileName">
        <see cref="T:System.String" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.</param>
      <param name="language">
        <see cref="T:System.Guid" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />.</param>
      <param name="languageVendor">
        <see cref="T:System.Guid" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>Crea un'istanza di <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> le cui proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> e <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> e <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> e <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> sono impostate sul valore specificato.</returns>
      <param name="fileName">
        <see cref="T:System.String" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.</param>
      <param name="language">
        <see cref="T:System.Guid" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />.</param>
      <param name="languageVendor">
        <see cref="T:System.Guid" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />.</param>
      <param name="documentType">
        <see cref="T:System.Guid" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
      <summary>Crea <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta la generazione di un'eccezione.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'eccezione.</returns>
      <param name="value">
        <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta la generazione di un'eccezione con un tipo specificato.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'eccezione.</returns>
      <param name="value">
        <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="type">Nuova classe <see cref="T:System.Type" /> dell'espressione.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ToString">
      <summary>Restituisce una rappresentazione testuale di <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Rappresentazione testuale di <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.TryExpression" /> che rappresenta un blocco try con qualsiasi numero di istruzioni catch e nessun blocco fault o finally.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.TryExpression" /> creato.</returns>
      <param name="body">Corpo del blocco try.</param>
      <param name="handlers">Matrice di zero o più espressioni <see cref="T:System.Linq.Expressions.CatchBlock" /> che rappresentano le istruzioni catch da associare al blocco try.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.TryExpression" /> che rappresenta un blocco try con qualsiasi numero di istruzioni catch e un blocco finally.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.TryExpression" /> creato.</returns>
      <param name="body">Corpo del blocco try.</param>
      <param name="finally">Corpo del blocco finally.</param>
      <param name="handlers">Matrice di zero o più espressioni <see cref="T:System.Linq.Expressions.CatchBlock" /> che rappresentano le istruzioni catch da associare al blocco try.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea <see cref="T:System.Linq.Expressions.TryExpression" /> che rappresenta un blocco try con un blocco fault e nessuna istruzione catch.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.TryExpression" /> creato.</returns>
      <param name="body">Corpo del blocco try.</param>
      <param name="fault">Corpo del blocco fault.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea <see cref="T:System.Linq.Expressions.TryExpression" /> che rappresenta un blocco try con un blocco finally e nessuna istruzione catch.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.TryExpression" /> creato.</returns>
      <param name="body">Corpo del blocco try.</param>
      <param name="finally">Corpo del blocco finally.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
      <summary>Crea un oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> che rappresenta un tipo delegato System.Action generico con argomenti di tipo specifici.</summary>
      <returns>True se il tipo delegato System.Action generico è stato creato per <paramref name="typeArgs" /> specifico. In caso contrario, false.</returns>
      <param name="typeArgs">Matrice di oggetti Type che specificano gli argomenti di tipo per il tipo delegato System.Action.</param>
      <param name="actionType">Quando questo metodo viene restituito, contiene il tipo delegato System.Action generico che dispone di argomenti di tipo specifici.Contiene null se nessun delegato System.Action generico corrisponde all'oggetto <paramref name="typeArgs" />. Questo parametro viene passato non inizializzato.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
      <summary>Crea un oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> che rappresenta un tipo delegato System.Func generico con argomenti di tipo specifici.L'ultimo argomento di tipo specifica il tipo restituito del delegato creato.</summary>
      <returns>True se il tipo delegato System.Func generico è stato creato per <paramref name="typeArgs" /> specifico. In caso contrario, false.</returns>
      <param name="typeArgs">Matrice di oggetti Type che specificano gli argomenti di tipo per il tipo delegato System.Func.</param>
      <param name="funcType">Quando questo metodo viene restituito, contiene il tipo delegato System.Func generico che dispone di argomenti di tipo specifici.Contiene null se nessun delegato System.Func generico corrisponde all'oggetto <paramref name="typeArgs" />. Questo parametro viene passato non inizializzato.</param>
    </member>
    <member name="P:System.Linq.Expressions.Expression.Type">
      <summary>Ottiene il tipo statico dell'espressione rappresentata da <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="T:System.Type" /> che rappresenta il tipo statico dell'espressione.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un riferimento esplicito o una conversione boxing in cui viene fornito null se la conversione non riesce.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> e le cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /><see cref="P:System.Linq.Expressions.Expression.Type" /> sono impostate sui valori specificati.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="type">A <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> o <paramref name="type" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> che confronta l'identità del tipo in fase di esecuzione.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> per cui la proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> e per cui le proprietà <see cref="T:System.Linq.Expressions.Expression" /> e <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> sono impostate sui valori specificati.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="type">A <see cref="P:System.Linq.Expressions.Expression.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> per cui la proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> e per cui le proprietà <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> e <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> sono impostate sui valori specificati.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />.</param>
      <param name="type">A <see cref="P:System.Linq.Expressions.Expression.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> o <paramref name="type" /> è null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione con il più unario.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> e la cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> è impostata sul valore specificato.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> è null.</exception>
      <exception cref="T:System.InvalidOperationException">L'operatore più unario non è definito per <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione con il più unario.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> e le cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> e <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> sono impostate sui valori specificati.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> è null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> non è null e il metodo che rappresenta restituisce void, non è static (Shared in Visual Basic) o non accetta esattamente un argomento.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> è null e l'operatore più unario non è definito per <paramref name="expression" />.Type.-oppure-<paramref name="expression" />.Type o il tipo non nullable corrispondente se si tratta di un tipo nullable, non è assegnabile al tipo di argomento del metodo rappresentato da <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
      <summary>Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta una conversione unboxing esplicita.</summary>
      <returns>Istanza di <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> di cui eseguire la conversione unboxing.</param>
      <param name="type">Nuova classe <see cref="T:System.Type" /> dell'espressione.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type)">
      <summary>Crea un nodo <see cref="T:System.Linq.Expressions.ParameterExpression" /> che può essere utilizzato per identificare un parametro o una variabile in una struttura ad albero dell'espressione.</summary>
      <returns>Nodo <see cref="T:System.Linq.Expressions.ParameterExpression" /> con il nome e il tipo specificati</returns>
      <param name="type">Tipo di parametro o di variabile.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
      <summary>Crea un nodo <see cref="T:System.Linq.Expressions.ParameterExpression" /> che può essere utilizzato per identificare un parametro o una variabile in una struttura ad albero dell'espressione.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> con il nome e il tipo specificati.</returns>
      <param name="type">Tipo di parametro o di variabile.</param>
      <param name="name">Nome del parametro o della variabile.Questo nome viene utilizzato solo a scopo di debug o di stampa.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Riduce il nodo, quindi chiama il delegato del visitatore sull'espressione ridotta.Se il nodo non è riducibile, il metodo genera un'eccezione.</summary>
      <returns>Espressione visitata o espressione che deve sostituirla nella struttura ad albero.</returns>
      <param name="visitor">Istanza di <see cref="T:System.Func`2" />.</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression`1">
      <summary>Rappresenta un'espressione lambda fortemente tipizzata come struttura dei dati sotto forma di una struttura ad albero dell'espressione.Questa classe non può essere ereditata.</summary>
      <typeparam name="TDelegate">Tipo del delegato rappresentato dall'oggetto <see cref="T:System.Linq.Expressions.Expression`1" />.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile">
      <summary>Compila l'espressione lambda descritta dalla struttura ad albero dell'espressione in codice eseguibile e produce un delegato che rappresenta l'espressione lambda.</summary>
      <returns>Delegato di tipo <paramref name="TDelegate" /> che rappresenta l'espressione lambda compilata descritta dall'oggetto <see cref="T:System.Linq.Expressions.Expression`1" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Crea una nuova espressione simile a quella corrente, utilizzando però gli elementi figlio specificati.Se tutti gli elementi figlio sono uguali, verrà restituita l'espressione corrente.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="body">Proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> del risultato.</param>
      <param name="parameters">Proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> del risultato. </param>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionType">
      <summary>Descrive i tipi dei nodi di una struttura ad albero dell'espressione.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Add">
      <summary>Operazione di addizione, ad esempio a + b, senza controllo dell'overflow, per operandi numerici.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssign">
      <summary>Operazione di assegnazione composta di addizione, ad esempio (a += b), senza controllo dell'overflow, per operandi numerici.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
      <summary>Operazione di assegnazione composta di addizione, ad esempio (a += b), con controllo dell'overflow, per operandi numerici.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <summary>Operazione di addizione, ad esempio (a + b), con controllo dell'overflow, per operandi numerici.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.And">
      <summary>Operazione AND bit per bit o logica, ad esempio, ad esempio (a &amp; b) in C# e (a And b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <summary>Operazione AND condizionale che valuta il secondo operando solo se il primo operando restituisce true.Corrisponde a (a &amp;&amp; b) in C# e a (a AndAlso b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAssign">
      <summary>Operazione di assegnazione composta AND  bit per bit o logica, ad esempio (a &amp;= b) in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <summary>Operazione di indicizzazione in una matrice unidimensionale, quale array[index] in C# o array(index) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <summary>Operazione che ottiene la lunghezza di una matrice unidimensionale, ad esempio array.Length.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Assign">
      <summary>Operazione di assegnazione, ad esempio (a = b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Block">
      <summary>Blocco di espressioni.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Call">
      <summary>Chiamata a un metodo, ad esempio nell'espressione obj.sampleMethod().</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <summary>Nodo che rappresenta un'operazione null coalescing, ad esempio (a ?? b) in C# o If(a, b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
      <summary>Operazione condizionale, ad esempio a &gt; b ? a : b in C# o If(a &gt; b, a, b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Constant">
      <summary>Valore costante.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Convert">
      <summary>Operazione cast o di conversione, ad esempio (SampleType)obj in C#o CType(obj, SampleType) in Visual Basic.Nel caso di una conversione numerica, se il valore convertito è troppo lungo per il tipo di destinazione non viene generata alcuna eccezione.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <summary>Operazione cast o di conversione, ad esempio (SampleType)obj in C#o CType(obj, SampleType) in Visual Basic.Nel caso di una conversione numerica, se il valore convertito è troppo lungo per il tipo di destinazione viene generata un'eccezione.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DebugInfo">
      <summary>Informazioni sul debug.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Decrement">
      <summary>Operazione di decremento unaria quale (a - 1) in C# e Visual Basic.È necessario che l'oggetto a non venga modificato sul posto.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Default">
      <summary>Valore predefinito.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Divide">
      <summary>Operazione di divisione, ad esempio (a / b), per operandi numerici.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DivideAssign">
      <summary>Operazione di assegnazione composta di divisione, ad esempio (a /= b), per operandi numerici.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Dynamic">
      <summary>Operazione dinamica.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Equal">
      <summary>Nodo che rappresenta un confronto di uguaglianze, ad esempio (a == b) in C# o (a = b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <summary>Operazione XOR bit per bit o logica, ad esempio, ad esempio (a ^ b) in C# o (a Xor b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
      <summary>Operazione di assegnazione composta XOR  bit per bit o logica, ad esempio (a ^= b) in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Extension">
      <summary>Espressione di estensione.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Goto">
      <summary>Espressione "go to", ad esempio goto Label in C# o GoTo Label in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <summary>Confronto "maggiore di", ad esempio (a &gt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <summary>Confronto "maggiore o uguale a", ad esempio (a &gt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Increment">
      <summary>Operazione di incremento unaria quale (a + 1) in C# e Visual Basic.È necessario che l'oggetto a non venga modificato sul posto.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Index">
      <summary>Operazione di indicizzazione o operazione che accede a una proprietà che accetta argomenti. </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
      <summary>Operazione che richiama un delegato o un'espressione lambda, ad esempio sampleDelegate.Invoke().</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsFalse">
      <summary>Valore di condizione false.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsTrue">
      <summary>Valore di condizione true.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Label">
      <summary>Etichetta.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
      <summary>Espressione lambda, ad esempio a =&gt; a + a in C# o Function(a) a + a in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <summary>Operazione di scorrimento a sinistra bit per bit, ad esempio (a &lt;&lt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
      <summary>Assegnazione composta di scorrimento a sinistra bit per bit, ad esempio (a &lt;&lt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
      <summary>Confronto "minore di", ad esempio (a &lt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <summary>Confronto "minore o uguale a", ad esempio (a &lt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
      <summary>Operazione che crea un nuovo oggetto <see cref="T:System.Collections.IEnumerable" /> e lo inizializza da un elenco di elementi, ad esempio new List&lt;SampleType&gt;(){ a, b, c } in C# o Dim sampleList = { a, b, c } in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Loop">
      <summary>Una classe for ad esempio while.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <summary>Operazione che legge da un campo o una proprietà, ad esempio obj.SampleProperty.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <summary>Operazione che crea un nuovo oggetto e ne inizializza uno o più membri, ad esempio new Point { X = 1, Y = 2 } in C# o New Point With {.X = 1, .Y = 2} in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
      <summary>Operazione di resto aritmetica, ad esempio (a % b) in C# o (a Mod b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
      <summary>Operazione di assegnazione composta di resto aritmetica, ad esempio (a %= b) in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
      <summary>Operazione di moltiplicazione, ad esempio (a * b), senza controllo dell'overflow, per operandi numerici.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
      <summary>Operazione di assegnazione composta di moltiplicazione, ad esempio (a *= b), senza controllo dell'overflow, per operandi numerici.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
      <summary>Operazione di assegnazione composta di moltiplicazione, ad esempio (a *= b), con controllo dell'overflow, per operandi numerici.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <summary>Operazione di moltiplicazione, ad esempio (a * b), con controllo dell'overflow, per operandi numerici.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Negate">
      <summary>Operazione di negazione aritmetica, ad esempio (-a).È necessario che l'oggetto a non venga modificato sul posto.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <summary>Operazione di negazione aritmetica, ad esempio (-a), con controllo dell'overflow.È necessario che l'oggetto a non venga modificato sul posto.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.New">
      <summary>Operazione che chiama un costruttore per creare un nuovo oggetto, ad esempio new SampleType().</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <summary>Operazione che crea una nuova matrice in cui sono specificati i limiti per ogni dimensione, ad esempio new SampleType[dim1, dim2] in C# o New SampleType(dim1, dim2) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <summary>Operazione che crea una nuova matrice unidimensionale e la inizializza da un elenco di elementi, ad esempio new SampleType[]{a, b, c} in C# o New SampleType(){a, b, c} in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Not">
      <summary>Operazione di negazione logica o di complemento bit per bit.In C#, è equivalente a (~a) per i tipi integrali e a (!a) per i valori booleani.In Visual Basic, è equivalente a (Not a).È necessario che l'oggetto a non venga modificato sul posto.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <summary>Confronto di disuguaglianze, ad esempio (a != b) in C# o (a &lt;&gt; b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OnesComplement">
      <summary>Operazione di complemento a uno, ad esempio (~a) in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Or">
      <summary>Operazione OR bit per bit o logica, ad esempio, ad esempio (a | b) in C# o (a Or b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrAssign">
      <summary>Assegnazione composta OR bit per bit o logica, ad esempio (a |= b) in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
      <summary>Operazione OR condizionale di corto circuito, ad esempio (a || b) in C# o (a OrElse b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
      <summary>Riferimento a un parametro o una variabile definiti nel contesto dell'espressione.Per ulteriori informazioni, vedere <see cref="T:System.Linq.Expressions.ParameterExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
      <summary>Forma suffissa di decremento unario, ad esempio (a--).È necessario che l'oggetto a venga modificato sul posto.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
      <summary>Forma suffissa di incremento unario, ad esempio (a++).È necessario che l'oggetto a venga modificato sul posto.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Power">
      <summary>Operazione matematica che eleva un numero a potenza, ad esempio (a ^ b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PowerAssign">
      <summary>Operazione di assegnazione composta che eleva un numero a potenza, ad esempio (a ^= b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
      <summary>Forma prefissa di decremento unario, ad esempio (--a).È necessario che l'oggetto a venga modificato sul posto.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
      <summary>Forma prefissa di incremento unario, ad esempio (++a).È necessario che l'oggetto a venga modificato sul posto.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Quote">
      <summary>Espressione che ha un valore costante di tipo <see cref="T:System.Linq.Expressions.Expression" />.Un nodo <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> può contenere riferimenti ai parametri definiti nel contesto dell'espressione che rappresenta.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
      <summary>Operazione di scorrimento a destra bit per bit, ad esempio (a &gt;&gt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
      <summary>Operazione di assegnazione composta di scorrimento a destra bit per bit, ad esempio (a &gt;&gt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
      <summary>Elenco di variabili di run-time.Per ulteriori informazioni, vedere <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
      <summary>Operazione di sottrazione, ad esempio (a - b), senza controllo dell'overflow, per operandi numerici.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
      <summary>Operazione di assegnazione composta di sottrazione, ad esempio (a -= b), senza controllo dell'overflow, per operandi numerici.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
      <summary>Operazione di assegnazione composta di sottrazione, ad esempio (a -= b), con controllo dell'overflow, per operandi numerici.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <summary>Operazione di sottrazione aritmetica, ad esempio (a - b), con controllo dell'overflow, per operandi numerici.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Switch">
      <summary>Operazione di switch, ad esempio switch in C# o Select Case in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Throw">
      <summary>Operazione che genera un'eccezione, ad esempio throw new Exception().</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Try">
      <summary>Espressione try-catch.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <summary>Riferimento esplicito o conversione boxing in cui viene specificato null se la conversione non riesce, ad esempio null se la conversione non riesce, ad esempio (obj as SampleType) in C# o TryCast(obj, SampleType) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeEqual">
      <summary>Test di tipo esatto.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <summary>Modello di test, ad esempio obj is SampleType in C# o TypeOf obj is SampleType in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <summary>Operazione con il più unario, ad esempio (+a).Il risultato di un'operazione con il più unario predefinita è il valore dell'operando, ma le implementazioni definite dall'utente possono dare risultati insoliti.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Unbox">
      <summary>Operazione di unboxing del tipo di valore, ad esempio le istruzioni unbox e unbox.any in MSIL. </summary>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionVisitor">
      <summary>Rappresenta un visitatore o un rewriter per le strutture ad albero dell'espressione.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Linq.Expressions.ExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
      <summary>Invia l'elenco di espressioni a uno dei metodi di visita più specializzati in questa classe.</summary>
      <returns>L'elenco modificato delle espressioni, se è stato modificato uno degli elementi; in caso contrario, restituisce l'elenco originale delle espressioni.</returns>
      <param name="nodes">Espressioni da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
      <summary>Visita tutti i nodi nell'insieme utilizzando un visitatore dell'elemento specificato.</summary>
      <returns>Elenco modificato dei nodi, se è stato modificato uno degli elementi. In caso contrario, restituisce l'elenco originale dei nodi.</returns>
      <param name="nodes">I nodi da visitare.</param>
      <param name="elementVisitor">Un delegato che visita un solo elemento, sostituendolo facoltativamente con un nuovo elemento.</param>
      <typeparam name="T">Il tipo di tutti i nodi.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
      <summary>Invia l'espressione a uno dei metodi di visita più specializzati in questa classe.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
      <summary>Visita un'espressione, eseguendo il cast del risultato sul tipo di espressione originale.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="nodes">Espressione da visitare.</param>
      <param name="callerName">Nome del metodo chiamante. Utilizzato per segnalare un messaggio di errore migliore.</param>
      <typeparam name="T">Il tipo dell'espressione.</typeparam>
      <exception cref="T:System.InvalidOperationException">Il metodo di visita per questo nodo ha restituito un tipo diverso.</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
      <summary>Visita un'espressione, eseguendo il cast del risultato sul tipo di espressione originale.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
      <param name="callerName">Nome del metodo chiamante. Utilizzato per segnalare un messaggio di errore migliore.</param>
      <typeparam name="T">Il tipo dell'espressione.</typeparam>
      <exception cref="T:System.InvalidOperationException">Il metodo di visita per questo nodo ha restituito un tipo diverso.</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.BinaryExpression" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.BlockExpression" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.CatchBlock" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.ConditionalExpression" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <summary>Visita <see cref="T:System.Linq.Expressions.ConstantExpression" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <summary>Visita <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <summary>Visita <see cref="T:System.Linq.Expressions.DefaultExpression" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.ElementInit" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
      <summary>Visita i figli dell'espressione di estensione.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.GotoExpression" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.IndexExpression" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.InvocationExpression" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.LabelExpression" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
      <summary>Visita <see cref="T:System.Linq.Expressions.LabelTarget" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.Expression`1" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
      <typeparam name="T">Tipo di delegato.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.ListInitExpression" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.LoopExpression" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.MemberExpression" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.MemberAssignment" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.MemberBinding" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.MemberListBinding" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.MemberMemberBinding" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.MethodCallExpression" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.NewExpression" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.NewArrayExpression" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <summary>Visita <see cref="T:System.Linq.Expressions.ParameterExpression" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.SwitchCase" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.TryExpression" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <summary>Visita gli elementi figlio di <see cref="T:System.Linq.Expressions.UnaryExpression" />.</summary>
      <returns>Espressione modificata, se l'espressione stessa o una delle relative sottoespressioni è stata modificata; in caso contrario, restituisce l'espressione originale.</returns>
      <param name="node">Espressione da visitare.</param>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpression">
      <summary>Rappresenta un salto incondizionato.Include istruzioni di ritorno, interruzione e continuazione, e altri salti.</summary>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Kind">
      <summary>Il tipo di espressione "go to".Ha solo scopi di informazione.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> che rappresenta il tipo dell'espressione "go to".</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.NodeType">
      <summary>Restituisce il tipo di nodo di questa proprietà <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ExpressionType" /> che rappresenta l'espressione.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Target">
      <summary>L'etichetta della destinazione a cui salta questo nodo.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelTarget" /> che rappresenta l'etichetta destinazione per questo nodo.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Type">
      <summary>Ottiene il tipo statico dell'espressione rappresentata da <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.GotoExpression.Type" /> che rappresenta il tipo statico dell'espressione.</returns>
    </member>
    <member name="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Crea una nuova espressione simile a quella corrente, utilizzando però gli elementi figlio specificati.Se tutti gli elementi figlio sono uguali, verrà restituita l'espressione corrente.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="target">Proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> del risultato. </param>
      <param name="value">Proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Value" /> del risultato. </param>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Value">
      <summary>Il valore passato alla destinazione, oppure Null se la destinazione è di tipo System.Void.</summary>
      <returns>L'oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il valore passato alla destinazione, oppure null.</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpressionKind">
      <summary>Specifica che tipo di salto che questo <see cref="T:System.Linq.Expressions.GotoExpression" /> rappresenta.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Break">
      <summary>
        <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione di interruzione.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Continue">
      <summary>
        <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione di continuazione.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Goto">
      <summary>Un <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un salto a una determinata posizione.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Return">
      <summary>
        <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione di ritorno.</summary>
    </member>
    <member name="T:System.Linq.Expressions.IndexExpression">
      <summary>Rappresenta l'indicizzazione di una proprietà o di una matrice.</summary>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Arguments">
      <summary>Ottiene gli argomenti che verranno utilizzati per indicizzare la proprietà o la matrice.</summary>
      <returns>Insieme a sola lettura contenente gli argomenti che verranno utilizzati per indicizzare la proprietà o la matrice.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Indexer">
      <summary>Ottiene <see cref="T:System.Reflection.PropertyInfo" /> per la proprietà se l'espressione rappresenta una proprietà indicizzata, restituisce Null in caso contrario.</summary>
      <returns>
        <see cref="T:System.Reflection.PropertyInfo" /> per la proprietà se l'espressione rappresenta una proprietà indicizzata; in caso contrario Null.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.NodeType">
      <summary>Restituisce il tipo di nodo di questa proprietà <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ExpressionType" /> che rappresenta l'espressione.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Object">
      <summary>Un oggetto da indicizzare.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'oggetto da indicizzare.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Type">
      <summary>Ottiene il tipo statico dell'espressione rappresentata da <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.IndexExpression.Type" /> che rappresenta il tipo statico dell'espressione.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea una nuova espressione simile a quella corrente, utilizzando però gli elementi figlio specificati.Se tutti gli elementi figlio sono uguali, verrà restituita l'espressione corrente.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="object">Proprietà <see cref="P:System.Linq.Expressions.IndexExpression.Object" /> del risultato.</param>
      <param name="arguments">Proprietà <see cref="P:System.Linq.Expressions.IndexExpression.Arguments" /> del risultato.</param>
    </member>
    <member name="T:System.Linq.Expressions.InvocationExpression">
      <summary>Rappresenta un'espressione che applica un delegato o un'espressione lambda a un elenco di espressioni argomento.</summary>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <summary>Ottiene gli argomenti a cui viene applicato il delegato o l'espressione lambda.</summary>
      <returns>Oggetto <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> di oggetti <see cref="T:System.Linq.Expressions.Expression" /> che rappresentano gli argomenti ai quali viene applicato il delegato.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
      <summary>Ottiene il delegato o l'espressione lambda da applicare.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il delegato da applicare.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.NodeType">
      <summary>Restituisce il tipo di nodo di questa espressione.I nodi di estensione devono restituire <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> quando si esegue l'override di questo metodo.</summary>
      <returns>Classe <see cref="T:System.Linq.Expressions.ExpressionType" /> dell'espressione.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Type">
      <summary>Ottiene il tipo statico dell'espressione rappresentata da <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" />.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.InvocationExpression.Type" /> che rappresenta il tipo statico dell'espressione.</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea una nuova espressione simile a quella corrente, utilizzando però gli elementi figlio specificati.Se tutti gli elementi figlio sono uguali, verrà restituita l'espressione corrente.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="expression">Proprietà <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> del risultato.</param>
      <param name="arguments">Proprietà <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /> del risultato.</param>
    </member>
    <member name="T:System.Linq.Expressions.LabelExpression">
      <summary>Rappresenta un'etichetta che può essere inserita in qualsiasi contesto <see cref="T:System.Linq.Expressions.Expression" />.Se viene raggiunto, otterrà il valore fornito dal corrispondente <see cref="T:System.Linq.Expressions.GotoExpression" />.In caso contrario, riceve il valore in <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" />.Se <see cref="T:System.Type" /> è uguale a System.Void, non deve essere fornito alcun valore.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.DefaultValue">
      <summary>Il valore di <see cref="T:System.Linq.Expressions.LabelExpression" /> quando l'etichetta viene raggiunta tramite flusso di controllo normale (ad esempio, non ci si è arrivati tramite un salto).</summary>
      <returns>Oggetto Expression che rappresenta il valore dell'oggetto <see cref="T:System.Linq.Expressions.LabelExpression" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.NodeType">
      <summary>Restituisce il tipo di nodo di questa proprietà <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ExpressionType" /> che rappresenta l'espressione.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Target">
      <summary>
        <see cref="T:System.Linq.Expressions.LabelTarget" /> al quale è associata questa etichetta.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelTarget" /> al quale è associata questa etichetta.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Type">
      <summary>Ottiene il tipo statico dell'espressione rappresentata da <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.LabelExpression.Type" /> che rappresenta il tipo statico dell'espressione.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Crea una nuova espressione simile a quella corrente, utilizzando però gli elementi figlio specificati.Se tutti gli elementi figlio sono uguali, verrà restituita l'espressione corrente.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="target">Proprietà <see cref="P:System.Linq.Expressions.LabelExpression.Target" /> del risultato.</param>
      <param name="defaultValue">Proprietà <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> del risultato.</param>
    </member>
    <member name="T:System.Linq.Expressions.LabelTarget">
      <summary>Utilizzato per rappresentare la destinazione di un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Name">
      <summary>Ottiene il nome dell'etichetta.</summary>
      <returns>Nome dell'etichetta.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelTarget.ToString">
      <summary>Restituisce un oggetto <see cref="T:System.String" /> che rappresenta l'oggetto <see cref="T:System.Object" />.</summary>
      <returns>Oggetto <see cref="T:System.String" /> che rappresenta l'oggetto <see cref="T:System.Object" /> corrente.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Type">
      <summary>Il tipo di valore passato saltando all'etichetta (o <see cref="T:System.Void" /> se non deve essere passato alcun valore).</summary>
      <returns>L'oggetto <see cref="T:System.Type" /> che rappresenta il tipo di valore passato saltando all'etichetta, oppure <see cref="T:System.Void" /> se non deve essere passato alcun valore</returns>
    </member>
    <member name="T:System.Linq.Expressions.LambdaExpression">
      <summary>Descrive un'espressione lambda.Acquisisce un blocco di codice analogo a un corpo di metodo .NET.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Body">
      <summary>Ottiene il corpo dell'espressione lambda.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il corpo dell'espressione lambda.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
      <summary>Produce un delegato che rappresenta l'espressione lambda.</summary>
      <returns>Oggetto <see cref="T:System.Delegate" /> contenente la versione compilata dell'espressione lambda.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Name">
      <summary>Ottiene il nome dell'espressione lambda.</summary>
      <returns>Nome dell'espressione lambda.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.NodeType">
      <summary>Restituisce il tipo di nodo di questa proprietà <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ExpressionType" /> che rappresenta l'espressione.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <summary>Ottiene i parametri dell'espressione lambda.</summary>
      <returns>Oggetto <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> di oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> che rappresentano i parametri dell'espressione lambda.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.ReturnType">
      <summary>Ottiene il tipo di ritorno dell'espressione lambda.</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo dell'espressione lambda.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.TailCall">
      <summary>Ottiene il valore che indica se l'espressione lambda sarà compilata con l'ottimizzazione della chiamata tail.</summary>
      <returns>Vero se l'espressione lambda sarà compilata con l'ottimizzazione della chiamata tail; in caso contrario falso.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Type">
      <summary>Ottiene il tipo statico dell'espressione rappresentata da <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.LambdaExpression.Type" /> che rappresenta il tipo statico dell'espressione.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ListInitExpression">
      <summary>Rappresenta una chiamata al costruttore con un inizializzatore di insieme.</summary>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.CanReduce">
      <summary>Ottiene un valore che indica se il nodo della struttura ad albero dell'espressione può essere ridotto.</summary>
      <returns>Vero se il nodo può essere ridotto, in caso contrario falso.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <summary>Ottiene gli inizializzatori di elementi utilizzati per inizializzare un insieme.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> di oggetti <see cref="T:System.Linq.Expressions.ElementInit" /> che rappresentano gli elementi utilizzati per inizializzare l'insieme.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <summary>Ottiene l'espressione che contiene una chiamata al costruttore di un tipo di insieme.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" /> che rappresenta la chiamata al costruttore di un tipo di insieme.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NodeType">
      <summary>Restituisce il tipo di nodo di questa proprietà <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ExpressionType" /> che rappresenta l'espressione.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Reduce">
      <summary>Riduce il nodo dell'espressione binaria a un'espressione più semplice.</summary>
      <returns>L'espressione ridotta.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Type">
      <summary>Ottiene il tipo statico dell'espressione rappresentata da <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.ListInitExpression.Type" /> che rappresenta il tipo statico dell'espressione.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Crea una nuova espressione simile a quella corrente, utilizzando però gli elementi figlio specificati.Se tutti gli elementi figlio sono uguali, verrà restituita l'espressione corrente.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="newExpression">Proprietà <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> del risultato.</param>
      <param name="initializers">Proprietà <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> del risultato.</param>
    </member>
    <member name="T:System.Linq.Expressions.LoopExpression">
      <summary>Rappresenta un ciclo infinito.È possibile uscire con "interruzione."</summary>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Body">
      <summary>Ottiene l'oggetto <see cref="T:System.Linq.Expressions.Expression" /> che costituisce il corpo del ciclo.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che costituisce il corpo del ciclo.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.BreakLabel">
      <summary>Ottiene <see cref="T:System.Linq.Expressions.LabelTarget" /> utilizzato dal corpo di ciclo come destinazione dell'istruzione di interruzione.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelTarget" /> utilizzato dal corpo di ciclo come destinazione dell'istruzione di interruzione.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
      <summary>Ottiene <see cref="T:System.Linq.Expressions.LabelTarget" /> utilizzato dal corpo di ciclo come destinazione dell'istruzione di continuazione.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelTarget" /> utilizzato dal corpo di ciclo come destinazione dell'istruzione di continuazione.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.NodeType">
      <summary>Restituisce il tipo di nodo di questa espressione.I nodi di estensione devono restituire <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> quando si esegue l'override di questo metodo.</summary>
      <returns>Classe <see cref="T:System.Linq.Expressions.ExpressionType" /> dell'espressione.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Type">
      <summary>Ottiene il tipo statico dell'espressione rappresentata da <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.LoopExpression.Type" /> che rappresenta il tipo statico dell'espressione.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Crea una nuova espressione simile a quella corrente, utilizzando però gli elementi figlio specificati.Se tutti gli elementi figlio sono uguali, verrà restituita l'espressione corrente.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="breakLabel">Proprietà <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" /> del risultato.</param>
      <param name="continueLabel">Proprietà <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" /> del risultato.</param>
      <param name="body">Proprietà <see cref="P:System.Linq.Expressions.LoopExpression.Body" /> del risultato.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberAssignment">
      <summary>Rappresenta l'operazione di assegnazione per un campo o una proprietà di un oggetto.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
      <summary>Ottiene l'espressione da assegnare al campo o alla proprietà.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il valore da assegnare al campo o alla proprietà.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
      <summary>Crea una nuova espressione simile a quella corrente, utilizzando però gli elementi figlio specificati.Se tutti gli elementi figlio sono uguali, verrà restituita l'espressione corrente.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="expression">Proprietà <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> del risultato.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberBinding">
      <summary>Fornisce la classe di base dalla quale derivano le classi che rappresentano le associazioni utilizzate per inizializzare i membri di un oggetto appena creato.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Linq.Expressions.MemberBinding" />.</summary>
      <param name="type">
        <see cref="T:System.Linq.Expressions.MemberBindingType" /> che discrimina il tipo di associazione rappresentato.</param>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" /> che rappresenta un campo o una proprietà da inizializzare.</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
      <summary>Ottiene il tipo di associazione rappresentato.</summary>
      <returns>Uno dei valori <see cref="T:System.Linq.Expressions.MemberBindingType" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.Member">
      <summary>Ottiene il campo o la proprietà da inizializzare.</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> che rappresenta il campo o la proprietà da inizializzare.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.ToString">
      <summary>Restituisce una rappresentazione testuale di <see cref="T:System.Linq.Expressions.MemberBinding" />.</summary>
      <returns>Rappresentazione testuale di <see cref="T:System.Linq.Expressions.MemberBinding" />.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBindingType">
      <summary>Descrive i tipi di associazione utilizzati negli oggetti <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <summary>Associazione che rappresenta l'inizializzazione di un membro con il valore di un'espressione.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <summary>Associazione che rappresenta l'inizializzazione di un membro di tipo <see cref="T:System.Collections.IList" /> o <see cref="T:System.Collections.Generic.ICollection`1" /> da un elenco di elementi.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <summary>Associazione che rappresenta l'inizializzazione ricorsiva dei membri di un membro.</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberExpression">
      <summary>Rappresenta l'accesso a un campo o a una proprietà.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Invia al metodo Visit specifico per questo tipo di nodo.Ad esempio, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> chiama <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Risultato della visita di questo nodo.</returns>
      <param name="visitor">Visitatore con cui visitare questo nodo.</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Expression">
      <summary>Ottiene l'oggetto contenitore del campo o della proprietà.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'oggetto contenitore del campo o della proprietà.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Member">
      <summary>Ottiene il campo o la proprietà a cui accedere.</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> che rappresenta il campo o la proprietà a cui accedere.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.NodeType">
      <summary>Restituisce il tipo di nodo di questa proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ExpressionType" /> che rappresenta l'espressione.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Crea una nuova espressione simile a quella corrente, utilizzando però gli elementi figlio specificati.Se tutti gli elementi figlio sono uguali, verrà restituita l'espressione corrente.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="expression">Proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> del risultato.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberInitExpression">
      <summary>Rappresenta la chiamata a un costruttore e l'inizializzazione di uno o più membri del nuovo oggetto.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <summary>Ottiene le associazioni che descrivono come inizializzare i membri dell'oggetto appena creato.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> di oggetti <see cref="T:System.Linq.Expressions.MemberBinding" /> che descrivono come inizializzare i membri.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
      <summary>Ottiene un valore che indica se il nodo della struttura ad albero dell'espressione può essere ridotto.</summary>
      <returns>Vero se il nodo può essere ridotto, in caso contrario falso.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <summary>Ottiene l'espressione che rappresenta la chiamata al costruttore.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" /> che rappresenta la chiamata al costruttore.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NodeType">
      <summary>Restituisce il tipo di nodo di questo oggetto Expression.I nodi di estensione devono restituire <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> quando si esegue l'override di questo metodo.</summary>
      <returns>Classe <see cref="T:System.Linq.Expressions.ExpressionType" /> dell'espressione.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Reduce">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" /> a un'espressione più semplice. </summary>
      <returns>L'espressione ridotta.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Type">
      <summary>Ottiene il tipo statico dell'espressione rappresentata da <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.MemberInitExpression.Type" /> che rappresenta il tipo statico dell'espressione.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Crea una nuova espressione simile a quella corrente, utilizzando però gli elementi figlio specificati.Se tutti gli elementi figlio sono uguali, verrà restituita l'espressione corrente.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="newExpression">Proprietà <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> del risultato.</param>
      <param name="bindings">Proprietà <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> del risultato.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberListBinding">
      <summary>Rappresenta l'inizializzazione degli elementi di un membro di insieme di un oggetto appena creato.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <summary>Ottiene gli inizializzatori di elemento per l'inizializzazione di un membro di insieme di un oggetto appena creato.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> di oggetti <see cref="T:System.Linq.Expressions.ElementInit" /> con cui inizializzare un membro di insieme.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Crea una nuova espressione simile a quella corrente, utilizzando però gli elementi figlio specificati.Se tutti gli elementi figlio sono uguali, verrà restituita l'espressione corrente.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="initializers">Proprietà <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> del risultato.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberMemberBinding">
      <summary>Rappresenta l'inizializzazione dei membri di un membro di un oggetto appena creato.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <summary>Ottiene le associazioni che descrivono come inizializzare i membri di un membro.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> di oggetti <see cref="T:System.Linq.Expressions.MemberBinding" /> che descrivono come inizializzare i membri del membro.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Crea una nuova espressione simile a quella corrente, utilizzando però gli elementi figlio specificati.Se tutti gli elementi figlio sono uguali, verrà restituita l'espressione corrente.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="bindings">Proprietà <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> del risultato.</param>
    </member>
    <member name="T:System.Linq.Expressions.MethodCallExpression">
      <summary>Rappresenta una chiamata a un metodo statico o di istanza.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Invia al metodo Visit specifico per questo tipo di nodo.Ad esempio, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> chiama <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Risultato della visita di questo nodo.</returns>
      <param name="visitor">Visitatore con cui visitare questo nodo.</param>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <summary>Ottiene un insieme di espressioni che rappresentano gli argomenti del metodo chiamato.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> di oggetti <see cref="T:System.Linq.Expressions.Expression" /> che rappresentano gli argomenti del metodo chiamato.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
      <summary>Ottiene l'oggetto <see cref="T:System.Reflection.MethodInfo" /> per il metodo da chiamare.</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo chiamato.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.NodeType">
      <summary>Restituisce il tipo di nodo di questa proprietà <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ExpressionType" /> che rappresenta l'espressione.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
      <summary>Ottiene l'oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'istanza per le chiamate ai metodi di istanza oppure null per le chiamate ai metodi statici.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'oggetto ricevente del metodo.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Type">
      <summary>Ottiene il tipo statico dell'espressione rappresentata da <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.MethodCallExpression.Type" /> che rappresenta il tipo statico dell'espressione.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea una nuova espressione simile a quella corrente, utilizzando però gli elementi figlio specificati.Se tutti gli elementi figlio sono uguali, verrà restituita l'espressione corrente.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="object">Proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> del risultato.</param>
      <param name="arguments">Proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> del risultato.</param>
    </member>
    <member name="T:System.Linq.Expressions.NewArrayExpression">
      <summary>Rappresenta la creazione di una nuova matrice e la possibile inizializzazione degli elementi della nuova matrice.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Invia al metodo Visit specifico per questo tipo di nodo.Ad esempio, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> chiama <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Risultato della visita di questo nodo.</returns>
      <param name="visitor">Visitatore con cui visitare questo nodo.</param>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <summary>Ottiene i limiti della matrice se il valore della proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />, o i valori per inizializzare gli elementi della nuova matrice se il valore della proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> di oggetti <see cref="T:System.Linq.Expressions.Expression" /> che rappresentano i limiti della matrice o i valori di inizializzazione.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Type">
      <summary>Ottiene il tipo statico dell'espressione rappresentata da <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.NewArrayExpression.Type" /> che rappresenta il tipo statico dell'espressione.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea una nuova espressione simile a quella corrente, utilizzando però gli elementi figlio specificati.Se tutti gli elementi figlio sono uguali, verrà restituita l'espressione corrente.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="expressions">Proprietà <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> del risultato.</param>
    </member>
    <member name="T:System.Linq.Expressions.NewExpression">
      <summary>Rappresenta una chiamata a un costruttore.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Invia al metodo Visit specifico per questo tipo di nodo.Ad esempio, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> chiama <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Risultato della visita di questo nodo.</returns>
      <param name="visitor">Visitatore con cui visitare questo nodo.</param>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Arguments">
      <summary>Ottiene gli argomenti del costruttore.</summary>
      <returns>Insieme di oggetti <see cref="T:System.Linq.Expressions.Expression" /> che rappresentano gli argomenti del costruttore.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Constructor">
      <summary>Ottiene il costruttore chiamato.</summary>
      <returns>
        <see cref="T:System.Reflection.ConstructorInfo" /> che rappresenta il costruttore chiamato.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Members">
      <summary>Ottiene i membri che possono recuperare i valori dei campi inizializzati con gli argomenti del costruttore.</summary>
      <returns>Insieme di oggetti <see cref="T:System.Reflection.MemberInfo" /> che rappresentano i membri che possono recuperare i valori dei campi inizializzati con gli argomenti del costruttore.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.NodeType">
      <summary>Restituisce il tipo di nodo di questa proprietà <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ExpressionType" /> che rappresenta l'espressione.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Type">
      <summary>Ottiene il tipo statico dell'espressione rappresentata da <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.NewExpression.Type" /> che rappresenta il tipo statico dell'espressione.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Crea una nuova espressione simile a quella corrente, utilizzando però gli elementi figlio specificati.Se tutti gli elementi figlio sono uguali, verrà restituita l'espressione corrente.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="arguments">Proprietà <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> del risultato.</param>
    </member>
    <member name="T:System.Linq.Expressions.ParameterExpression">
      <summary>Rappresenta un'espressione del parametro denominato.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Invia al metodo Visit specifico per questo tipo di nodo.Ad esempio, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> chiama <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Risultato della visita di questo nodo.</returns>
      <param name="visitor">Visitatore con cui visitare questo nodo.</param>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.IsByRef">
      <summary>Indica che questo ParameterExpression deve essere trattato come un parametro ByRef.</summary>
      <returns>True se questo oggetto ParameterExpression è un parametro ByRef. In caso contrario, false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Name">
      <summary>Ottiene il nome del parametro o della variabile.</summary>
      <returns>
        <see cref="T:System.String" /> che contiene il nome del parametro.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.NodeType">
      <summary>Restituisce il tipo di nodo di questa proprietà <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ExpressionType" /> che rappresenta l'espressione.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Type">
      <summary>Ottiene il tipo statico dell'espressione rappresentata da <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.ParameterExpression.Type" /> che rappresenta il tipo statico dell'espressione.</returns>
    </member>
    <member name="T:System.Linq.Expressions.RuntimeVariablesExpression">
      <summary>Un'espressione che fornisce autorizzazione di lettura e scrittura per le variabili al runtime.</summary>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
      <summary>Restituisce il tipo di nodo di questo oggetto Expression.I nodi di estensione devono restituire <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> quando si esegue l'override di questo metodo.</summary>
      <returns>Classe <see cref="T:System.Linq.Expressions.ExpressionType" /> dell'espressione.</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
      <summary>Ottiene il tipo statico dell'espressione rappresentata da <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" /> che rappresenta il tipo statico dell'espressione.</returns>
    </member>
    <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Crea una nuova espressione simile a quella corrente, utilizzando però gli elementi figlio specificati.Se tutti gli elementi figlio sono uguali, verrà restituita l'espressione corrente.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="variables">Proprietà <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> del risultato.</param>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
      <summary>Le variabili o parametri alle quali fornire accesso al runtime.</summary>
      <returns>L'insieme di sola lettura che contiene i parametri a cui sarà forniti l'accesso al runtime.</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchCase">
      <summary>Rappresenta un case di un <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.Body">
      <summary>Ottiene il corpo di questo case.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il corpo di un blocco case.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.TestValues">
      <summary>Ottiene i valori di questo case.Questo case viene selezionato per l'esecuzione quando <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> corrisponde a qualsiasi valore.</summary>
      <returns>L'insieme di sola lettura dei valori per questo blocco case.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.ToString">
      <summary>Restituisce un oggetto <see cref="T:System.String" /> che rappresenta l'oggetto <see cref="T:System.Object" />.</summary>
      <returns>Oggetto <see cref="T:System.String" /> che rappresenta l'oggetto <see cref="T:System.Object" /> corrente.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
      <summary>Crea una nuova espressione simile a quella corrente, utilizzando però gli elementi figlio specificati.Se tutti gli elementi figlio sono uguali, verrà restituita l'espressione corrente.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="testValues">Proprietà <see cref="P:System.Linq.Expressions.SwitchCase.TestValues" /> del risultato.</param>
      <param name="body">Proprietà <see cref="P:System.Linq.Expressions.SwitchCase.Body" /> del risultato.</param>
    </member>
    <member name="T:System.Linq.Expressions.SwitchExpression">
      <summary>Rappresenta un'espressione di controllo che gestisce le selezioni multiple passando il controllo a <see cref="T:System.Linq.Expressions.SwitchCase" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Cases">
      <summary>Ottiene l'insieme di oggetti <see cref="T:System.Linq.Expressions.SwitchCase" /> per l'opzione.</summary>
      <returns>Insieme di oggetti <see cref="T:System.Linq.Expressions.SwitchCase" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Comparison">
      <summary>Ottiene il metodo di confronto di uguaglianze, se presente.</summary>
      <returns>Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di confronto di uguaglianze.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
      <summary>Ottiene il test per lo switch.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il test per lo switch.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.NodeType">
      <summary>Restituisce il tipo di nodo di questo oggetto Expression.I nodi di estensione devono restituire <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> quando si esegue l'override di questo metodo.</summary>
      <returns>Classe <see cref="T:System.Linq.Expressions.ExpressionType" /> dell'espressione.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
      <summary>Ottiene il test per lo switch.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il test per lo switch.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Type">
      <summary>Ottiene il tipo statico dell'espressione rappresentata da <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.SwitchExpression.Type" /> che rappresenta il tipo statico dell'espressione.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
      <summary>Crea una nuova espressione simile a quella corrente, utilizzando però gli elementi figlio specificati.Se tutti gli elementi figlio sono uguali, verrà restituita l'espressione corrente.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="switchValue">Proprietà <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> del risultato.</param>
      <param name="cases">Proprietà <see cref="P:System.Linq.Expressions.SwitchExpression.Cases" /> del risultato.</param>
      <param name="defaultBody">Proprietà <see cref="P:System.Linq.Expressions.SwitchExpression.DefaultBody" /> del risultato.</param>
    </member>
    <member name="T:System.Linq.Expressions.SymbolDocumentInfo">
      <summary>Archivia le informazioni necessarie per generare informazioni sui simboli del debug per un file di origine, in particolare il nome file e l'identificatore del linguaggio univoco.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
      <summary>Restituisce l'identificatore univoco del tipo di documento, se presente.Imposta come valore predefinito a GUID per un file di testo.</summary>
      <returns>Identificatore univoco del tipo di documento.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
      <summary>Nome del file di origine.</summary>
      <returns>Stringa che rappresenta il nome del file di origine.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
      <summary>Restituisce l'identificatore univoco del linguaggio, se presente.</summary>
      <returns>Identificatore univoco del linguaggio</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
      <summary>Restituisce l'identificatore univoco del fornitore del linguaggio, se presente.</summary>
      <returns>Identificatore univoco del fornitore del linguaggio.</returns>
    </member>
    <member name="T:System.Linq.Expressions.TryExpression">
      <summary>Rappresenta un blocco try/catch/finally/fault.</summary>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Body">
      <summary>Ottiene l'oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il corpo del blocco try.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il corpo del blocco try.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Fault">
      <summary>Ottiene <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il blocco fault.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il blocco fault.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Finally">
      <summary>Ottiene <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il blocco finally.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il blocco finally.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Handlers">
      <summary>Ottiene l'insieme di espressioni <see cref="T:System.Linq.Expressions.CatchBlock" /> associate al blocco try.</summary>
      <returns>Insieme di espressioni <see cref="T:System.Linq.Expressions.CatchBlock" /> associate al blocco try.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.NodeType">
      <summary>Restituisce il tipo di nodo di questa proprietà <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ExpressionType" /> che rappresenta l'espressione.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Type">
      <summary>Ottiene il tipo statico dell'espressione rappresentata da <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.TryExpression.Type" /> che rappresenta il tipo statico dell'espressione.</returns>
    </member>
    <member name="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Crea una nuova espressione simile a quella corrente, utilizzando però gli elementi figlio specificati.Se tutti gli elementi figlio sono uguali, verrà restituita l'espressione corrente.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="body">Proprietà <see cref="P:System.Linq.Expressions.TryExpression.Body" /> del risultato.</param>
      <param name="handlers">Proprietà <see cref="P:System.Linq.Expressions.TryExpression.Handlers" /> del risultato.</param>
      <param name="finally">Proprietà <see cref="P:System.Linq.Expressions.TryExpression.Finally" /> del risultato.</param>
      <param name="fault">Proprietà <see cref="P:System.Linq.Expressions.TryExpression.Fault" /> del risultato.</param>
    </member>
    <member name="T:System.Linq.Expressions.TypeBinaryExpression">
      <summary>Rappresenta un'operazione tra un'espressione e un tipo.</summary>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <summary>Ottiene l'operando dell'espressione di un'operazione di test del tipo.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'operando dell'espressione di un'operazione di test del tipo.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
      <summary>Restituisce il tipo di nodo di questo oggetto Expression.I nodi di estensione devono restituire <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> quando si esegue l'override di questo metodo.</summary>
      <returns>Classe <see cref="T:System.Linq.Expressions.ExpressionType" /> dell'espressione.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Type">
      <summary>Ottiene il tipo statico dell'espressione rappresentata da <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Type" /> che rappresenta il tipo statico dell'espressione.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <summary>Ottiene l'operando del tipo di un'operazione di test del tipo.</summary>
      <returns>
        <see cref="T:System.Type" /> che rappresenta l'operando del tipo di un'operazione di test del tipo.</returns>
    </member>
    <member name="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Crea una nuova espressione simile a quella corrente, utilizzando però gli elementi figlio specificati.Se tutti gli elementi figlio sono uguali, verrà restituita l'espressione corrente.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="expression">Proprietà <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> del risultato.</param>
    </member>
    <member name="T:System.Linq.Expressions.UnaryExpression">
      <summary>Rappresenta un'espressione che ha un operatore unario.</summary>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.CanReduce">
      <summary>Ottiene un valore che indica se il nodo della struttura ad albero dell'espressione può essere ridotto.</summary>
      <returns>Vero se un nodo può essere ridotto, in caso contrario falso.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <summary>Ottiene un valore che indica se il nodo della struttura ad albero dell'espressione rappresenta una chiamata elevata a un operatore.</summary>
      <returns>true se il nodo rappresenta una chiamata elevata; in caso contrario, .</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <summary>Ottiene un valore che indica se il nodo della struttura ad albero dell'espressione rappresenta una chiamata elevata a un operatore il cui tipo restituito è elevato a un tipo nullable.</summary>
      <returns>true se il tipo restituito dell'operatore è elevato a un tipo nullable; in caso contrario, false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Method">
      <summary>Ottiene il metodo di implementazione per l'operazione unaria.</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di implementazione.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.NodeType">
      <summary>Restituisce il tipo di nodo di questa proprietà <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ExpressionType" /> che rappresenta l'espressione.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
      <summary>Ottiene l'operando dell'operazione unaria.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'operando dell'operazione unaria.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Reduce">
      <summary>Riduce il nodo dell'espressione a un'espressione più semplice. </summary>
      <returns>L'espressione ridotta.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Type">
      <summary>Ottiene il tipo statico dell'espressione rappresentata da <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.UnaryExpression.Type" /> che rappresenta il tipo statico dell'espressione.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Crea una nuova espressione simile a quella corrente, utilizzando però gli elementi figlio specificati.Se tutti gli elementi figlio sono uguali, verrà restituita l'espressione corrente.</summary>
      <returns>Espressione corrente se non viene modificato alcun elemento figlio o espressione con gli elementi figlio aggiornati.</returns>
      <param name="operand">Proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> del risultato.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite">
      <summary>Una classe di base del sito di chiamata dinamica.Questo tipo viene utilizzato come tipo di parametro ai siti dinamici di destinazione.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite.Binder">
      <summary>Classe responsabile per l'associazione di operazioni dinamiche sul sito dinamico.</summary>
      <returns>Oggetto <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> responsabile per l'associazione di operazioni dinamiche.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite.Create(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>Crea un sito di chiamata con il tipo delegato specificato e il gestore di associazione.</summary>
      <returns>Nuovo sito di chiamata.</returns>
      <param name="delegateType">Tipo delegato del sito di chiamata.</param>
      <param name="binder">Gestore di associazione del sito di chiamata.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite`1">
      <summary>Tipo di sito dinamico.</summary>
      <typeparam name="T">Tipo di delegato.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite`1.Create(System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>Crea un'istanza del sito di chiamata dinamico, inizializzata con il gestore di associazione responsabile per l'associazione di runtime delle operazioni dinamiche in questo sito di chiamata.</summary>
      <returns>Nuova istanza del sito di chiamata dinamico.</returns>
      <param name="binder">Gestore di associazione responsabile per l'associazione di runtime delle operazioni dinamiche in questo sito di chiamata.</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.CallSite`1.Target">
      <summary>Cache di livello 0 - delegato specializzato basato sulla cronologia del sito.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite`1.Update">
      <summary>Delegato dell'aggiornamento.Chiamato quando il sito dinamico sperimenta una riga di accesso alla cache non eseguita.</summary>
      <returns>Delegato dell'aggiornamento.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteBinder">
      <summary>Classe responsabile per l'associazione di runtime delle operazioni dinamiche sul sito dinamico di chiamata.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>Esegue l'associazione di runtime dell'operazione dinamica su un set di argomenti.</summary>
      <returns>Espressione che esegue test sugli argomenti dell'operazione dinamica ed esegue l'operazione dinamica se i test sono validi.Se i test non riescono su occorrenze successive dell'operazione dinamica, Bind sarà chiamato nuovamente per produrre un nuovo <see cref="T:System.Linq.Expressions.Expression" /> per i nuovi tipi di argomento.</returns>
      <param name="args">Matrice di argomenti per l'operazione dinamica.</param>
      <param name="parameters">Matrice di istanze <see cref="T:System.Linq.Expressions.ParameterExpression" /> che rappresentano i parametri del sito di chiamata nel processo di associazione.</param>
      <param name="returnLabel">LabelTarget utilizzato per restituire il risultato dell'associazione dinamica.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.BindDelegate``1(System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>Fornisce supporto dell'associazione di runtime di basso livello.Le classi possono eseguire l'override di questo e fornire un delegato diretto per l'implementazione di regola.Può attivare regole del salvataggio su disco, disponendo di regole specializzate in fase di esecuzione o fornendo diversi criteri di memorizzazione nella cache.</summary>
      <returns>Nuovo delegato che sostituisce la destinazione di CallSite.</returns>
      <param name="site">CallSite per il quale viene eseguita l'associazione.</param>
      <param name="args">Argomenti per il gestore di associazione.</param>
      <typeparam name="T">Tipo destinazione di CallSite.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.CacheTarget``1(``0)">
      <summary>Aggiunge una destinazione alla cache di destinazioni note.Le destinazioni memorizzate nella cache saranno analizzate prima di chiamare BindDelegate per produrre la nuova regola.</summary>
      <param name="target">Delegato destinazione da aggiungere alla cache.</param>
      <typeparam name="T">Tipo di destinazione da aggiungere.</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel">
      <summary>Ottiene un'etichetta che può essere utilizzata per determinare l'aggiornamento dell'associazione.Indica che l'associazione dell'espressione non è più valida.Viene utilizzato in genere quando la "versione" di un oggetto dinamico è stata modificata.</summary>
      <returns>Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> che rappresenta un'etichetta che può essere utilizzata per lanciare l'aggiornamento dell'associazione.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteHelpers">
      <summary>Classe che contiene metodi di supporto per DLR CallSites.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame(System.Reflection.MethodBase)">
      <summary>Controlla se <see cref="T:System.Reflection.MethodBase" /> è utilizzato internamente da DLR e non deve essere visualizzato sullo stack del codice del linguaggio.</summary>
      <returns>True se <see cref="T:System.Reflection.MethodBase" /> di input è utilizzato internamente da DLR e non deve essere visualizzato sullo stack del codice del linguaggio.In caso contrario, false.</returns>
      <param name="mb">Input <see cref="T:System.Reflection.MethodBase" /></param>
    </member>
    <member name="T:System.Runtime.CompilerServices.DynamicAttribute">
      <summary>Indica che l'utilizzo di <see cref="T:System.Object" /> su un membro va trattato come tipo inviato dinamicamente.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor(System.Boolean[])">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" />.</summary>
      <param name="transformFlags">Specifica, in un prefisso traversal della costruzione di un tipo, quali occorrenze <see cref="T:System.Object" /> vanno trattate come tipo dinamicamente inviato.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DynamicAttribute.TransformFlags">
      <summary>Specifica, in un prefisso traversal della costruzione di un tipo, quali occorrenze <see cref="T:System.Object" /> vanno trattate come tipo dinamicamente inviato.</summary>
      <returns>Elenco di occorrenze di <see cref="T:System.Object" /> da trattare come tipo inviato dinamicamente.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExecutionScope">
      <summary>Rappresenta lo stato di runtime di un metodo generato in modo dinamico.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateDelegate(System.Int32,System.Object[])">
      <summary>Crea un delegato che può essere utilizzato per eseguire un metodo generato in modo dinamico.</summary>
      <returns>Oggetto <see cref="T:System.Delegate" /> che può eseguire un metodo generato in modo dinamico.</returns>
      <param name="indexLambda">Indice dell'oggetto che archivia informazioni sull’espressione lambda associata del metodo dinamico.</param>
      <param name="locals">Matrice che contiene le variabili locali eseguite dal contesto padre.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateHoistedLocals">
      <summary>Crea una matrice per archiviare le variabili locali eseguite.</summary>
      <returns>Matrice per archiviare le variabili locali eseguite.</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Globals">
      <summary>Rappresenta le costanti non semplici e le espressioni eseguibili localmente a cui si fa riferimento da un metodo generato in modo dinamico.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.IsolateExpression(System.Linq.Expressions.Expression,System.Object[])">
      <summary>Libera una struttura ad albero dell'espressione specificata di parametri di riferimento esterni sostituendo il parametro con il valore corrente.</summary>
      <returns>Struttura ad albero dell'espressione che non contiene parametri di riferimento esterni.</returns>
      <param name="expression">Struttura ad albero dell'espressione per liberarsi di parametri di riferimento esterni.</param>
      <param name="locals">Matrice che contiene le variabili locali eseguite.</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Locals">
      <summary>Rappresenta le variabili locali eseguite dal contesto padre.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Parent">
      <summary>Rappresenta l'ambito di esecuzione del delegato chiamante.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IStrongBox">
      <summary>Definisce una proprietà per l'accesso al valore a cui fa riferimento un oggetto.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IStrongBox.Value">
      <summary>Ottiene o imposta il valore a cui fa riferimento un oggetto.</summary>
      <returns>Valore a cui fa riferimento l'oggetto.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.StrongBox`1">
      <summary>Contiene un riferimento a un valore.</summary>
      <typeparam name="T">Tipo del valore a cui fa riferimento <see cref="T:System.Runtime.CompilerServices.StrongBox`1" />.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor"></member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor(`0)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> utilizzando il valore fornito. </summary>
      <param name="value">Valore a cui fa riferimento <see cref="T:System.Runtime.CompilerServices.StrongBox`1" />.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.StrongBox`1.System#Runtime#CompilerServices#IStrongBox#Value">
      <summary>Ottiene o imposta il valore a cui fa riferimento <see cref="T:System.Runtime.CompilerServices.StrongBox`1" />.</summary>
      <returns>Il valore a cui fa riferimento <see cref="T:System.Runtime.CompilerServices.StrongBox`1" />.</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.StrongBox`1.Value">
      <summary>Rappresenta il valore a cui fa riferimento <see cref="T:System.Runtime.CompilerServices.StrongBox`1" />.</summary>
    </member>
    <member name="T:System.Security.Cryptography.AesManaged">
      <summary>Fornisce un'implementazione gestita dell'algoritmo simmetrico AES (Advanced Encryption Standard). </summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.AesManaged" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor">
      <summary>Consente di creare un oggetto di decrittografia simmetrica utilizzando la chiave e il vettore di inizializzazione (IV) correnti.</summary>
      <returns>Oggetto di decrittografia simmetrica.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>Consente di creare un oggetto di decrittografia simmetrica utilizzando la chiave e il vettore di inizializzazione (IV) specificati.</summary>
      <returns>Oggetto di decrittografia simmetrica.</returns>
      <param name="key">Chiave privata da utilizzare per l'algoritmo simmetrico.</param>
      <param name="iv">Vettore di inizializzazione da utilizzare per l'algoritmo simmetrico.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è null.</exception>
      <exception cref="T:System.ArgumentException">Il vettore di inizializzazione<paramref name=" iv " />ha una dimensione non valida.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor">
      <summary>Consente di creare un oggetto di crittografia simmetrica utilizzando la chiave e il vettore di inizializzazione (IV) correnti.</summary>
      <returns>Oggetto di crittografia simmetrica.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>Consente di creare un oggetto di crittografia simmetrica utilizzando la chiave e il vettore di inizializzazione (IV) specificati.</summary>
      <returns>Oggetto di crittografia simmetrica.</returns>
      <param name="key">Chiave privata da utilizzare per l'algoritmo simmetrico.</param>
      <param name="iv">Vettore di inizializzazione da utilizzare per l'algoritmo simmetrico.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è null.</exception>
      <exception cref="T:System.ArgumentException">Il vettore di inizializzazione<paramref name=" iv " />ha una dimensione non valida.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateIV">
      <summary>Genera un vettore di inizializzazione (IV) casuale da utilizzare per l'algoritmo simmetrico.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateKey">
      <summary>Genera una chiave casuale da utilizzare per l'algoritmo simmetrico.</summary>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.IV">
      <summary>Ottiene o imposta il vettore di inizializzazione (IV) da utilizzare per l'algoritmo simmetrico.</summary>
      <returns>Vettore di inizializzazione da utilizzare per l'algoritmo simmetrico.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Key">
      <summary>Ottiene o imposta la chiave privata utilizzata per l'algoritmo simmetrico.</summary>
      <returns>Chiave per l'algoritmo simmetrico.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.KeySize">
      <summary>Ottiene o imposta la dimensione in bit della chiave privata utilizzata per l'algoritmo simmetrico. </summary>
      <returns>Dimensione in bit della chiave utilizzata dall'algoritmo simmetrico.</returns>
    </member>
    <member name="T:System.Threading.LockRecursionPolicy">
      <summary>Specifica se lo stesso thread può accedere a un blocco più volte.</summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.NoRecursion">
      <summary>Se un thread tenta di accedere a un blocco in modo ricorsivo, viene generata un'eccezione. È possibile che alcune classi consentano particolari ricorsioni quando questa impostazione è attivata. </summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.SupportsRecursion">
      <summary>Un thread può accedere a un blocco in modo ricorsivo. Alcune classi possono limitare questa funzionalità. </summary>
    </member>
    <member name="T:System.Threading.ReaderWriterLockSlim">
      <summary>Rappresenta un blocco utilizzato per gestire l'accesso a una risorsa, consentendo a più thread l'accesso in lettura o l'accesso esclusivo in scrittura.</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Threading.ReaderWriterLockSlim" /> con i valori predefiniti delle proprietà.</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor(System.Threading.LockRecursionPolicy)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Threading.ReaderWriterLockSlim" />, specificando i criteri di ricorsione del blocco.</summary>
      <param name="recursionPolicy">Uno dei valori di enumerazione che specifica i criteri di ricorsione del blocco. </param>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.CurrentReadCount">
      <summary>Ottiene il numero complessivo di thread univoci che hanno acceduto al blocco in modalità di lettura.</summary>
      <returns>Numero di thread univoci che hanno acceduto al blocco in modalità di lettura.</returns>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.Dispose">
      <summary>Rilascia tutte le risorse utilizzate dall'istanza corrente della classe <see cref="T:System.Threading.ReaderWriterLockSlim" />.</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterReadLock">
      <summary>Tenta di accedere al blocco in modalità di lettura.</summary>
      <exception cref="T:System.Threading.LockRecursionException">La proprietà <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> è <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> e il thread corrente ha già acceduto alla modalità di lettura. -oppure-Il numero di ricorsione supererebbe la capacità del contatore. Questo limite è talmente elevato che le applicazioni non dovrebbero mai raggiungerlo.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock">
      <summary>Tenta di accedere al blocco in modalità aggiornabile.</summary>
      <exception cref="T:System.Threading.LockRecursionException">La proprietà <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> è <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> e il thread corrente ha già acceduto al blocco in tutte le modalità. -oppure-Il thread corrente ha acceduto alla modalità di lettura, pertanto il tentativo di accedere alla modalità aggiornabile creerebbe la possibilità di un deadlock. -oppure-Il numero di ricorsione supererebbe la capacità del contatore. Il limite è talmente elevato che le applicazioni non dovrebbero mai raggiungerlo.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterWriteLock">
      <summary>Tenta di accedere al blocco in modalità di scrittura.</summary>
      <exception cref="T:System.Threading.LockRecursionException">La proprietà <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> è <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> e il thread corrente ha già acceduto al blocco in tutte le modalità. -oppure-Il thread corrente ha acceduto alla modalità di lettura, pertanto il tentativo di accedere al blocco in modalità di scrittura creerebbe la possibilità di un deadlock. -oppure-Il numero di ricorsione supererebbe la capacità del contatore. Il limite è talmente elevato che le applicazioni non dovrebbero mai raggiungerlo.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitReadLock">
      <summary>Riduce il conteggio della ricorsione per la modalità di lettura ed esce da questa modalità se il conteggio risultante è 0 (zero).</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">Il thread corrente non ha acceduto al blocco in modalità di lettura.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock">
      <summary>Riduce il conteggio della ricorsione per la modalità aggiornabile ed esce da questa modalità se il conteggio risultante è 0 (zero).</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">Il thread corrente non ha acceduto al blocco in modalità aggiornabile.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitWriteLock">
      <summary>Riduce il conteggio della ricorsione per la modalità di scrittura ed esce da questa modalità se il conteggio risultante è 0 (zero).</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">Il thread corrente non ha acceduto al blocco in modalità di scrittura.</exception>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsReadLockHeld">
      <summary>Ottiene un valore che indica se il thread corrente ha acceduto al blocco in modalità di lettura.</summary>
      <returns>true se il thread corrente ha acceduto alla modalità di lettura; in caso contrario, false.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld">
      <summary>Ottiene un valore che indica se il thread corrente ha acceduto al blocco in modalità aggiornabile. </summary>
      <returns>true se il thread corrente ha acceduto alla modalità aggiornabile; in caso contrario, false.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld">
      <summary>Ottiene un valore che indica se il thread corrente ha acceduto al blocco in modalità di scrittura.</summary>
      <returns>true se il thread corrente ha acceduto alla modalità di scrittura; in caso contrario, false.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy">
      <summary>Ottiene un valore che indica i criteri di ricorsione per l'oggetto <see cref="T:System.Threading.ReaderWriterLockSlim" /> corrente.</summary>
      <returns>Uno dei valori di enumerazione che specifica i criteri di ricorsione del blocco.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveReadCount">
      <summary>Ottiene il numero di volte in cui il thread corrente ha acceduto al blocco in modalità di lettura, come indicazione della ricorsione.</summary>
      <returns>0 (zero) se il thread corrente non ha acceduto alla modalità di lettura, 1 se il thread ha acceduto alla modalità di lettura ma non lo ha fatto in modo ricorsivo, oppure n se il thread ha acceduto al blocco in modo ricorsivo n - 1 volte.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount">
      <summary>Ottiene il numero di volte in cui il thread corrente ha acceduto al blocco in modalità aggiornabile, come indicazione della ricorsione.</summary>
      <returns>0 (zero) se il thread corrente non ha acceduto alla modalità aggiornabile, 1 se il thread ha acceduto alla modalità aggiornabile ma non lo ha fatto in modo ricorsivo, oppure n se il thread ha acceduto alla modalità aggiornabile in modo ricorsivo n - 1 volte.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveWriteCount">
      <summary>Ottiene il numero di volte in cui il thread corrente ha acceduto al blocco in modalità di scrittura, come indicazione della ricorsione.</summary>
      <returns>0 (zero) se il thread corrente non ha acceduto alla modalità di scrittura, 1 se il thread ha acceduto alla modalità di scrittura ma non lo ha fatto in modo ricorsivo, oppure n se il thread ha acceduto alla modalità di scrittura in modo ricorsivo n - 1 volte.</returns>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)">
      <summary>Tenta di accedere al blocco in modalità di lettura con un timeout intero facoltativo.</summary>
      <returns>true se il thread chiamante ha acceduto alla modalità di lettura; in caso contrario, false.</returns>
      <param name="millisecondsTimeout">Numero di millisecondi di attesa, oppure -1 (<see cref="F:System.Threading.Timeout.Infinite" />) per attendere per un periodo di tempo indefinito.</param>
      <exception cref="T:System.Threading.LockRecursionException">La proprietà <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> è <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> e il thread corrente ha già acceduto al blocco. -oppure-Il numero di ricorsione supererebbe la capacità del contatore. Il limite è talmente elevato che le applicazioni non dovrebbero mai raggiungerlo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Il valore di <paramref name="millisecondsTimeout" /> è negativo, ma non è uguale a <see cref="F:System.Threading.Timeout.Infinite" /> (-1), ovvero l'unico valore negativo consentito. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.TimeSpan)">
      <summary>Tenta di accedere al blocco in modalità di lettura con un timeout facoltativo.</summary>
      <returns>true se il thread chiamante ha acceduto alla modalità di lettura; in caso contrario, false.</returns>
      <param name="timeout">Intervallo di attesa, oppure -1 millisecondi per attendere per un periodo di tempo indefinito. </param>
      <exception cref="T:System.Threading.LockRecursionException">La proprietà <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> è <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> e il thread corrente ha già acceduto al blocco. -oppure-Il numero di ricorsione supererebbe la capacità del contatore. Il limite è talmente elevato che le applicazioni non dovrebbero mai raggiungerlo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Il valore di <paramref name="timeout" /> è negativo, ma non è uguale a -1 millisecondi, ovvero l'unico valore negativo consentito.-oppure-Il valore di <paramref name="timeout" /> è superiore a <see cref="F:System.Int32.MaxValue" /> millisecondi. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)">
      <summary>Tenta di accedere al blocco in modalità aggiornabile con un timeout facoltativo.</summary>
      <returns>true se il thread chiamante ha acceduto alla modalità aggiornabile; in caso contrario, false.</returns>
      <param name="millisecondsTimeout">Numero di millisecondi di attesa, oppure -1 (<see cref="F:System.Threading.Timeout.Infinite" />) per attendere per un periodo di tempo indefinito.</param>
      <exception cref="T:System.Threading.LockRecursionException">La proprietà <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> è <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> e il thread corrente ha già acceduto al blocco. -oppure-Il thread corrente ha inizialmente acceduto al blocco in modalità di lettura, pertanto il tentativo di accedere alla modalità aggiornabile creerebbe la possibilità di un deadlock. -oppure-Il numero di ricorsione supererebbe la capacità del contatore. Il limite è talmente elevato che le applicazioni non dovrebbero mai raggiungerlo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Il valore di <paramref name="millisecondsTimeout" /> è negativo, ma non è uguale a <see cref="F:System.Threading.Timeout.Infinite" /> (-1), ovvero l'unico valore negativo consentito. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.TimeSpan)">
      <summary>Tenta di accedere al blocco in modalità aggiornabile con un timeout facoltativo.</summary>
      <returns>true se il thread chiamante ha acceduto alla modalità aggiornabile; in caso contrario, false.</returns>
      <param name="timeout">Intervallo di attesa, oppure -1 millisecondi per attendere per un periodo di tempo indefinito.</param>
      <exception cref="T:System.Threading.LockRecursionException">La proprietà <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> è <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> e il thread corrente ha già acceduto al blocco. -oppure-Il thread corrente ha inizialmente acceduto al blocco in modalità di lettura, pertanto il tentativo di accedere alla modalità aggiornabile creerebbe la possibilità di un deadlock. -oppure-Il numero di ricorsione supererebbe la capacità del contatore. Il limite è talmente elevato che le applicazioni non dovrebbero mai raggiungerlo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Il valore di <paramref name="timeout" /> è negativo, ma non è uguale a -1 millisecondi, ovvero l'unico valore negativo consentito.-oppure-Il valore di <paramref name="timeout" /> è superiore a <see cref="F:System.Int32.MaxValue" /> millisecondi. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)">
      <summary>Tenta di accedere al blocco in modalità di scrittura con un timeout facoltativo.</summary>
      <returns>true se il thread chiamante ha acceduto alla modalità di scrittura; in caso contrario, false.</returns>
      <param name="millisecondsTimeout">Numero di millisecondi di attesa, oppure -1 (<see cref="F:System.Threading.Timeout.Infinite" />) per attendere per un periodo di tempo indefinito.</param>
      <exception cref="T:System.Threading.LockRecursionException">La proprietà <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> è <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> e il thread corrente ha già acceduto al blocco. -oppure-Il thread corrente ha inizialmente acceduto al blocco in modalità di lettura, pertanto il tentativo di accedere alla modalità di scrittura creerebbe la possibilità di un deadlock. -oppure-Il numero di ricorsione supererebbe la capacità del contatore. Il limite è talmente elevato che le applicazioni non dovrebbero mai raggiungerlo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Il valore di <paramref name="millisecondsTimeout" /> è negativo, ma non è uguale a <see cref="F:System.Threading.Timeout.Infinite" /> (-1), ovvero l'unico valore negativo consentito. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.TimeSpan)">
      <summary>Tenta di accedere al blocco in modalità di scrittura con un timeout facoltativo.</summary>
      <returns>true se il thread chiamante ha acceduto alla modalità di scrittura; in caso contrario, false.</returns>
      <param name="timeout">Intervallo di attesa, oppure -1 millisecondi per attendere per un periodo di tempo indefinito.</param>
      <exception cref="T:System.Threading.LockRecursionException">La proprietà <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> è <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> e il thread corrente ha già acceduto al blocco. -oppure-Il thread corrente ha inizialmente acceduto al blocco in modalità di lettura, pertanto il tentativo di accedere alla modalità di scrittura creerebbe la possibilità di un deadlock. -oppure-Il numero di ricorsione supererebbe la capacità del contatore. Il limite è talmente elevato che le applicazioni non dovrebbero mai raggiungerlo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Il valore di <paramref name="timeout" /> è negativo, ma non è uguale a -1 millisecondi, ovvero l'unico valore negativo consentito.-oppure-Il valore di <paramref name="timeout" /> è superiore a <see cref="F:System.Int32.MaxValue" /> millisecondi. </exception>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount">
      <summary>Ottiene il numero complessivo di thread in attesa di accedere al blocco in modalità di lettura.</summary>
      <returns>Numero complessivo di thread in attesa di accedere alla modalità di lettura.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount">
      <summary>Ottiene il numero complessivo di thread in attesa di accedere al blocco in modalità aggiornabile.</summary>
      <returns>Numero complessivo di thread in attesa di accedere in modalità aggiornabile.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount">
      <summary>Ottiene il numero complessivo di thread in attesa di accedere al blocco in modalità di scrittura.</summary>
      <returns>Numero complessivo di thread in attesa di accedere alla modalità di scrittura.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskExtensions">
      <summary>Fornisce un set di metodi statici (Shared in Visual Basic) per l'utilizzo di tipi specifici di istanze di <see cref="T:System.Threading.Tasks.Task" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
      <summary>Crea un oggetto proxy <see cref="T:System.Threading.Tasks.Task" /> che rappresenta l'operazione asincrona di un oggetto Task&lt;Task&lt;T&gt;&gt; (C#) o Task (Of Task(Of T)) (Visual Basic).</summary>
      <returns>Attività <see cref="System.Threading.Tasks.Task`1" /> che rappresenta l'operazione asincrona dell'oggetto Task&lt;Task&lt;T&gt;&gt; (C#) o Task (Of Task(Of T)) (Visual Basic) fornito.</returns>
      <param name="task">Oggetto Task&lt;Task&lt;T&gt;&gt; (C#) o Task (Of Task(Of T)) (Visual Basic) di cui annullare il wrapping.</param>
      <typeparam name="TResult">Tipo di risultato dell'attività.</typeparam>
      <exception cref="T:System.ArgumentNullException">Eccezione generata se l'argomento <paramref name="task" /> è Null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
      <summary>Crea un oggetto proxy <see cref="T:System.Threading.Tasks.Task" /> che rappresenta l'operazione asincrona di un oggetto <see cref="T:System.Threading.Tasks.Task{System.Threading.Tasks.Task}" />.</summary>
      <returns>Attività che rappresenta l'operazione asincrona dell'oggetto System.Threading.Tasks.Task(Of Task) fornito.</returns>
      <param name="task">Oggetto Task&lt;Task&gt; (C#) o Task (Of Task) (Visual Basic) di cui annullare il wrapping.</param>
      <exception cref="T:System.ArgumentNullException">Eccezione generata se l'argomento <paramref name="task" /> è Null.</exception>
    </member>
  </members>
</doc>